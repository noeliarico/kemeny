
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,71,63,65,64,59,73,72,67,61],
[59,0,66,58,58,54,62,63,64,59],
[67,64,0,61,58,53,60,62,60,65],
[65,72,69,0,67,60,66,76,69,62],
[66,72,72,63,0,61,68,75,70,65],
[71,76,77,70,69,0,64,74,70,78],
[57,68,70,64,62,66,0,68,67,71],
[58,67,68,54,55,56,62,0,64,66],
[63,66,70,61,60,60,63,66,0,65],
[69,71,65,68,65,52,59,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,66,52,61,59,50,66,62,58],
[68,0,64,58,62,57,50,65,60,62],
[64,66,0,46,59,53,44,57,50,56],
[78,72,84,0,64,61,59,66,74,68],
[69,68,71,66,0,65,64,69,50,61],
[71,73,77,69,65,0,64,69,68,54],
[80,80,86,71,66,66,0,72,62,69],
[64,65,73,64,61,61,58,0,73,73],
[68,70,80,56,80,62,68,57,0,73],
[72,68,74,62,69,76,61,57,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,67,67,70,64,63,70,65,73],
[62,0,63,63,57,58,56,65,58,58],
[63,67,0,72,66,62,59,69,72,68],
[63,67,58,0,62,62,68,68,67,68],
[60,73,64,68,0,65,62,71,73,64],
[66,72,68,68,65,0,61,67,73,65],
[67,74,71,62,68,69,0,67,76,78],
[60,65,61,62,59,63,63,0,60,64],
[65,72,58,63,57,57,54,70,0,60],
[57,72,62,62,66,65,52,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,48,52,50,53,82,57,63,46],
[72,0,58,56,43,41,64,59,62,63],
[82,72,0,57,62,60,70,64,74,71],
[78,74,73,0,66,77,87,63,72,85],
[80,87,68,64,0,78,98,66,80,86],
[77,89,70,53,52,0,83,65,66,78],
[48,66,60,43,32,47,0,48,51,60],
[73,71,66,67,64,65,82,0,71,70],
[67,68,56,58,50,64,79,59,0,69],
[84,67,59,45,44,52,70,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,66,76,52,70,68,63,70,64],
[51,0,68,53,56,63,46,56,70,68],
[64,62,0,62,48,57,37,61,53,50],
[54,77,68,0,49,61,60,78,70,67],
[78,74,82,81,0,67,57,84,71,77],
[60,67,73,69,63,0,54,68,77,56],
[62,84,93,70,73,76,0,81,70,70],
[67,74,69,52,46,62,49,0,60,64],
[60,60,77,60,59,53,60,70,0,72],
[66,62,80,63,53,74,60,66,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,95,70,55,63,57,35,67,76],
[64,0,79,78,55,76,54,51,49,67],
[35,51,0,65,59,55,43,46,56,61],
[60,52,65,0,62,75,65,43,57,67],
[75,75,71,68,0,76,65,53,72,79],
[67,54,75,55,54,0,64,43,53,71],
[73,76,87,65,65,66,0,69,55,69],
[95,79,84,87,77,87,61,0,77,84],
[63,81,74,73,58,77,75,53,0,62],
[54,63,69,63,51,59,61,46,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,63,78,88,85,77,65,70,81],
[48,0,72,48,72,51,75,26,57,51],
[67,58,0,68,63,61,60,37,70,57],
[52,82,62,0,89,58,66,39,68,37],
[42,58,67,41,0,58,69,50,57,65],
[45,79,69,72,72,0,81,59,66,61],
[53,55,70,64,61,49,0,43,58,57],
[65,104,93,91,80,71,87,0,81,61],
[60,73,60,62,73,64,72,49,0,47],
[49,79,73,93,65,69,73,69,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,69,69,69,58,58,69,69,65],
[54,0,112,123,69,58,112,0,112,54],
[61,18,0,18,18,7,119,7,119,61],
[61,7,112,0,58,0,112,0,112,54],
[61,61,112,72,0,54,119,61,112,61],
[72,72,123,130,76,0,130,18,123,72],
[72,18,11,18,11,0,0,11,11,65],
[61,130,123,130,69,112,119,0,123,65],
[61,18,11,18,18,7,119,7,0,61],
[65,76,69,76,69,58,65,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,54,65,66,70,66,69,53,64],
[55,0,54,53,62,71,55,67,57,58],
[76,76,0,64,65,72,74,79,67,74],
[65,77,66,0,70,75,70,74,61,64],
[64,68,65,60,0,73,70,81,65,73],
[60,59,58,55,57,0,64,71,58,55],
[64,75,56,60,60,66,0,84,60,63],
[61,63,51,56,49,59,46,0,54,58],
[77,73,63,69,65,72,70,76,0,77],
[66,72,56,66,57,75,67,72,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,76,62,66,71,80,48,72,63],
[66,0,83,65,81,72,75,65,75,70],
[54,47,0,72,74,64,69,70,77,72],
[68,65,58,0,59,59,73,69,66,75],
[64,49,56,71,0,75,69,55,61,61],
[59,58,66,71,55,0,73,56,75,71],
[50,55,61,57,61,57,0,51,68,67],
[82,65,60,61,75,74,79,0,67,69],
[58,55,53,64,69,55,62,63,0,67],
[67,60,58,55,69,59,63,61,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,71,60,62,58,45,64,61,65],
[82,0,75,65,71,67,76,72,73,82],
[59,55,0,60,61,61,59,68,66,63],
[70,65,70,0,66,67,63,73,73,58],
[68,59,69,64,0,64,65,65,74,57],
[72,63,69,63,66,0,58,71,69,69],
[85,54,71,67,65,72,0,69,72,71],
[66,58,62,57,65,59,61,0,69,65],
[69,57,64,57,56,61,58,61,0,67],
[65,48,67,72,73,61,59,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,62,77,51,60,55,63,55,62],
[73,0,53,80,59,66,63,61,66,63],
[68,77,0,75,56,63,52,61,55,58],
[53,50,55,0,56,61,46,60,58,59],
[79,71,74,74,0,69,66,63,62,61],
[70,64,67,69,61,0,60,64,62,62],
[75,67,78,84,64,70,0,81,69,65],
[67,69,69,70,67,66,49,0,58,55],
[75,64,75,72,68,68,61,72,0,64],
[68,67,72,71,69,68,65,75,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,61,56,63,55,55,56,64,55],
[59,0,53,55,56,49,53,43,56,54],
[69,77,0,67,65,53,56,67,66,60],
[74,75,63,0,73,55,63,69,75,72],
[67,74,65,57,0,59,60,61,64,57],
[75,81,77,75,71,0,61,68,76,71],
[75,77,74,67,70,69,0,60,67,67],
[74,87,63,61,69,62,70,0,70,61],
[66,74,64,55,66,54,63,60,0,63],
[75,76,70,58,73,59,63,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,55,63,60,67,56,50,56,63],
[61,0,55,64,53,65,54,71,64,54],
[75,75,0,75,62,69,65,63,75,73],
[67,66,55,0,62,69,70,73,63,60],
[70,77,68,68,0,72,66,62,65,70],
[63,65,61,61,58,0,62,53,69,64],
[74,76,65,60,64,68,0,62,71,62],
[80,59,67,57,68,77,68,0,64,61],
[74,66,55,67,65,61,59,66,0,67],
[67,76,57,70,60,66,68,69,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,73,79,68,74,64,65,69],
[61,0,63,64,64,48,68,50,61,68],
[62,67,0,77,75,63,64,57,74,66],
[57,66,53,0,60,52,59,46,59,63],
[51,66,55,70,0,46,63,54,70,64],
[62,82,67,78,84,0,73,65,80,77],
[56,62,66,71,67,57,0,60,72,71],
[66,80,73,84,76,65,70,0,80,79],
[65,69,56,71,60,50,58,50,0,73],
[61,62,64,67,66,53,59,51,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,63,52,64,78,74,57,80,67],
[57,0,51,59,55,78,72,60,58,52],
[67,79,0,57,66,77,75,60,72,69],
[78,71,73,0,60,71,82,70,78,78],
[66,75,64,70,0,73,68,56,70,58],
[52,52,53,59,57,0,59,56,56,55],
[56,58,55,48,62,71,0,62,65,70],
[73,70,70,60,74,74,68,0,75,58],
[50,72,58,52,60,74,65,55,0,59],
[63,78,61,52,72,75,60,72,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,74,62,65,80,62,64,66,64],
[67,0,71,64,60,66,69,68,66,68],
[56,59,0,50,57,63,56,60,64,62],
[68,66,80,0,67,77,64,74,72,75],
[65,70,73,63,0,75,63,79,57,73],
[50,64,67,53,55,0,52,52,57,60],
[68,61,74,66,67,78,0,70,63,66],
[66,62,70,56,51,78,60,0,65,68],
[64,64,66,58,73,73,67,65,0,71],
[66,62,68,55,57,70,64,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,67,74,72,71,62,79,67,69],
[60,0,59,67,56,59,59,66,60,61],
[63,71,0,74,58,70,62,65,56,66],
[56,63,56,0,61,66,59,66,56,54],
[58,74,72,69,0,73,69,74,68,60],
[59,71,60,64,57,0,62,71,59,63],
[68,71,68,71,61,68,0,70,60,65],
[51,64,65,64,56,59,60,0,63,57],
[63,70,74,74,62,71,70,67,0,69],
[61,69,64,76,70,67,65,73,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,70,69,79,69,82,51,70,45],
[67,0,74,91,120,106,56,88,111,68],
[60,56,0,80,65,54,64,75,41,60],
[61,39,50,0,78,17,49,64,59,76],
[51,10,65,52,0,51,34,51,102,10],
[61,24,76,113,79,0,56,88,101,61],
[48,74,66,81,96,74,0,90,103,65],
[79,42,55,66,79,42,40,0,90,79],
[60,19,89,71,28,29,27,40,0,33],
[85,62,70,54,120,69,65,51,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,83,72,75,67,60,64,57,69],
[69,0,77,75,79,69,62,68,66,57],
[47,53,0,57,64,59,55,55,57,53],
[58,55,73,0,79,76,65,60,79,74],
[55,51,66,51,0,66,49,41,53,52],
[63,61,71,54,64,0,71,47,53,61],
[70,68,75,65,81,59,0,63,72,69],
[66,62,75,70,89,83,67,0,82,79],
[73,64,73,51,77,77,58,48,0,60],
[61,73,77,56,78,69,61,51,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,68,60,67,64,68,58,57,62],
[72,0,72,66,67,68,66,62,67,70],
[62,58,0,64,63,58,54,59,54,62],
[70,64,66,0,68,68,68,71,70,65],
[63,63,67,62,0,67,67,59,69,61],
[66,62,72,62,63,0,66,62,64,60],
[62,64,76,62,63,64,0,58,61,60],
[72,68,71,59,71,68,72,0,65,62],
[73,63,76,60,61,66,69,65,0,62],
[68,60,68,65,69,70,70,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,60,66,66,63,70,65,76,72],
[67,0,61,72,64,59,71,71,84,68],
[70,69,0,67,67,65,69,63,82,85],
[64,58,63,0,61,64,61,66,80,62],
[64,66,63,69,0,57,63,63,67,59],
[67,71,65,66,73,0,71,73,76,80],
[60,59,61,69,67,59,0,66,73,61],
[65,59,67,64,67,57,64,0,70,66],
[54,46,48,50,63,54,57,60,0,54],
[58,62,45,68,71,50,69,64,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,50,68,51,67,72,68,50],
[60,0,57,52,55,49,70,55,53,53],
[64,73,0,53,83,57,73,63,71,60],
[80,78,77,0,84,55,86,62,64,59],
[62,75,47,46,0,45,57,53,52,53],
[79,81,73,75,85,0,78,61,64,73],
[63,60,57,44,73,52,0,39,59,50],
[58,75,67,68,77,69,91,0,56,47],
[62,77,59,66,78,66,71,74,0,60],
[80,77,70,71,77,57,80,83,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,68,64,59,58,51,63,64],
[63,0,58,67,54,55,67,66,60,79],
[66,72,0,71,61,67,73,65,64,71],
[62,63,59,0,56,60,57,55,56,62],
[66,76,69,74,0,59,67,58,70,73],
[71,75,63,70,71,0,77,60,72,77],
[72,63,57,73,63,53,0,55,61,69],
[79,64,65,75,72,70,75,0,63,74],
[67,70,66,74,60,58,69,67,0,60],
[66,51,59,68,57,53,61,56,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,66,41,31,64,56,62,51,66],
[75,0,53,65,36,51,45,55,81,64],
[64,77,0,66,63,69,75,57,77,56],
[89,65,64,0,44,76,62,63,82,64],
[99,94,67,86,0,63,77,61,65,76],
[66,79,61,54,67,0,80,70,78,48],
[74,85,55,68,53,50,0,33,56,28],
[68,75,73,67,69,60,97,0,45,56],
[79,49,53,48,65,52,74,85,0,57],
[64,66,74,66,54,82,102,74,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,77,66,59,70,68,56,61,76],
[61,0,60,65,49,63,61,63,65,68],
[53,70,0,59,48,69,59,56,54,64],
[64,65,71,0,64,79,74,60,65,77],
[71,81,82,66,0,73,73,67,64,76],
[60,67,61,51,57,0,63,52,65,62],
[62,69,71,56,57,67,0,65,65,77],
[74,67,74,70,63,78,65,0,52,72],
[69,65,76,65,66,65,65,78,0,79],
[54,62,66,53,54,68,53,58,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,75,36,72,69,74,70,78],
[70,0,58,72,60,73,74,77,72,73],
[70,72,0,66,64,64,60,66,71,73],
[55,58,64,0,52,64,52,61,64,67],
[94,70,66,78,0,77,63,75,75,74],
[58,57,66,66,53,0,62,61,58,67],
[61,56,70,78,67,68,0,72,80,81],
[56,53,64,69,55,69,58,0,54,62],
[60,58,59,66,55,72,50,76,0,75],
[52,57,57,63,56,63,49,68,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,55,57,76,61,67,78,65,70],
[79,0,74,73,72,63,81,78,63,74],
[75,56,0,69,74,63,74,80,63,68],
[73,57,61,0,64,64,68,80,69,70],
[54,58,56,66,0,63,60,77,51,66],
[69,67,67,66,67,0,65,77,73,76],
[63,49,56,62,70,65,0,70,58,63],
[52,52,50,50,53,53,60,0,53,52],
[65,67,67,61,79,57,72,77,0,73],
[60,56,62,60,64,54,67,78,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,58,56,51,53,52,49,35,72],
[76,0,74,55,75,73,67,61,66,75],
[72,56,0,49,68,62,66,58,57,71],
[74,75,81,0,81,75,72,74,56,81],
[79,55,62,49,0,53,59,53,50,65],
[77,57,68,55,77,0,73,62,42,62],
[78,63,64,58,71,57,0,67,58,91],
[81,69,72,56,77,68,63,0,46,69],
[95,64,73,74,80,88,72,84,0,86],
[58,55,59,49,65,68,39,61,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,68,61,70,63,61,70,65],
[63,0,59,62,66,68,68,62,65,73],
[66,71,0,63,56,65,65,55,65,66],
[62,68,67,0,61,74,67,62,70,66],
[69,64,74,69,0,75,64,66,72,71],
[60,62,65,56,55,0,56,61,66,57],
[67,62,65,63,66,74,0,61,67,65],
[69,68,75,68,64,69,69,0,71,72],
[60,65,65,60,58,64,63,59,0,61],
[65,57,64,64,59,73,65,58,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,71,56,60,60,51,60,56,59],
[57,0,66,63,53,66,59,58,61,60],
[59,64,0,62,58,63,66,64,57,60],
[74,67,68,0,65,75,55,69,63,69],
[70,77,72,65,0,61,58,66,51,54],
[70,64,67,55,69,0,52,66,61,71],
[79,71,64,75,72,78,0,72,72,68],
[70,72,66,61,64,64,58,0,64,58],
[74,69,73,67,79,69,58,66,0,67],
[71,70,70,61,76,59,62,72,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,98,72,50,51,84,75,81,102],
[15,0,81,38,38,56,81,59,65,73],
[32,49,0,38,56,50,56,67,46,48],
[58,92,92,0,67,66,93,98,95,129],
[80,92,74,63,0,64,86,81,72,98],
[79,74,80,64,66,0,81,70,94,85],
[46,49,74,37,44,49,0,72,63,76],
[55,71,63,32,49,60,58,0,53,77],
[49,65,84,35,58,36,67,77,0,98],
[28,57,82,1,32,45,54,53,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,60,56,75,71,67,64,68,79],
[73,0,58,57,68,69,59,60,49,73],
[70,72,0,69,75,72,81,54,50,71],
[74,73,61,0,70,67,57,68,71,76],
[55,62,55,60,0,58,66,51,55,70],
[59,61,58,63,72,0,61,53,68,82],
[63,71,49,73,64,69,0,61,73,74],
[66,70,76,62,79,77,69,0,65,90],
[62,81,80,59,75,62,57,65,0,83],
[51,57,59,54,60,48,56,40,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,74,81,58,62,72,61,62,72],
[60,0,68,68,60,60,60,64,59,64],
[56,62,0,71,52,58,65,61,56,66],
[49,62,59,0,51,65,63,62,55,71],
[72,70,78,79,0,68,74,72,64,73],
[68,70,72,65,62,0,68,64,67,71],
[58,70,65,67,56,62,0,61,62,68],
[69,66,69,68,58,66,69,0,54,68],
[68,71,74,75,66,63,68,76,0,69],
[58,66,64,59,57,59,62,62,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,39,55,45,72,32,29,52,43],
[63,0,67,63,52,85,50,40,45,64],
[91,63,0,65,50,96,52,38,53,46],
[75,67,65,0,67,89,63,43,74,49],
[85,78,80,63,0,101,57,44,59,52],
[58,45,34,41,29,0,33,15,35,45],
[98,80,78,67,73,97,0,49,65,78],
[101,90,92,87,86,115,81,0,64,84],
[78,85,77,56,71,95,65,66,0,63],
[87,66,84,81,78,85,52,46,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,88,92,113,113,64,80,88],
[20,0,88,79,32,45,78,44,50,52],
[24,42,0,48,24,49,48,35,80,44],
[42,51,82,0,67,90,78,69,49,52],
[38,98,106,63,0,101,90,33,63,71],
[17,85,81,40,29,0,59,37,55,46],
[17,52,82,52,40,71,0,44,65,58],
[66,86,95,61,97,93,86,0,96,70],
[50,80,50,81,67,75,65,34,0,39],
[42,78,86,78,59,84,72,60,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,57,62,79,60,69,64,70,70],
[63,0,63,47,73,65,62,57,63,65],
[73,67,0,67,74,70,63,69,70,66],
[68,83,63,0,80,66,70,68,67,72],
[51,57,56,50,0,55,50,60,59,64],
[70,65,60,64,75,0,63,57,57,73],
[61,68,67,60,80,67,0,70,55,66],
[66,73,61,62,70,73,60,0,70,75],
[60,67,60,63,71,73,75,60,0,73],
[60,65,64,58,66,57,64,55,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,59,61,64,54,56,61,66,56],
[71,0,75,65,73,64,59,64,67,72],
[71,55,0,67,74,63,67,64,78,71],
[69,65,63,0,68,76,69,60,67,66],
[66,57,56,62,0,59,55,57,63,62],
[76,66,67,54,71,0,67,70,65,68],
[74,71,63,61,75,63,0,61,69,65],
[69,66,66,70,73,60,69,0,64,76],
[64,63,52,63,67,65,61,66,0,63],
[74,58,59,64,68,62,65,54,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,60,68,52,54,55,63,67,55],
[55,0,64,54,58,45,58,46,62,62],
[70,66,0,72,65,53,62,62,64,59],
[62,76,58,0,68,50,60,65,71,55],
[78,72,65,62,0,56,65,56,71,60],
[76,85,77,80,74,0,70,58,80,68],
[75,72,68,70,65,60,0,67,70,61],
[67,84,68,65,74,72,63,0,71,68],
[63,68,66,59,59,50,60,59,0,56],
[75,68,71,75,70,62,69,62,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,57,65,59,61,57,72,65,62],
[65,0,68,75,62,61,61,79,80,67],
[73,62,0,62,66,64,60,70,73,69],
[65,55,68,0,68,51,59,72,70,68],
[71,68,64,62,0,70,64,79,76,65],
[69,69,66,79,60,0,55,79,69,65],
[73,69,70,71,66,75,0,78,73,64],
[58,51,60,58,51,51,52,0,63,64],
[65,50,57,60,54,61,57,67,0,57],
[68,63,61,62,65,65,66,66,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,53,67,52,54,70,50,36,54],
[80,0,80,63,36,59,55,60,58,68],
[77,50,0,58,41,67,42,48,64,76],
[63,67,72,0,64,55,56,64,41,58],
[78,94,89,66,0,91,89,67,58,84],
[76,71,63,75,39,0,78,50,67,53],
[60,75,88,74,41,52,0,58,57,78],
[80,70,82,66,63,80,72,0,74,72],
[94,72,66,89,72,63,73,56,0,76],
[76,62,54,72,46,77,52,58,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,60,63,63,75,58,62,64,63],
[69,0,70,59,70,74,60,67,71,66],
[70,60,0,63,66,76,53,64,66,65],
[67,71,67,0,70,70,59,58,61,63],
[67,60,64,60,0,69,65,61,64,68],
[55,56,54,60,61,0,56,61,66,57],
[72,70,77,71,65,74,0,61,69,62],
[68,63,66,72,69,69,69,0,72,70],
[66,59,64,69,66,64,61,58,0,67],
[67,64,65,67,62,73,68,60,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,59,52,60,54,57,62,63,68],
[79,0,66,66,72,68,65,66,69,74],
[71,64,0,65,69,64,65,60,64,72],
[78,64,65,0,66,65,63,70,70,70],
[70,58,61,64,0,56,68,64,71,69],
[76,62,66,65,74,0,63,61,76,77],
[73,65,65,67,62,67,0,66,75,69],
[68,64,70,60,66,69,64,0,70,71],
[67,61,66,60,59,54,55,60,0,62],
[62,56,58,60,61,53,61,59,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,57,61,59,64,56,64,64,65],
[69,0,74,64,63,65,70,73,63,74],
[73,56,0,60,58,68,61,72,67,69],
[69,66,70,0,71,65,65,69,63,66],
[71,67,72,59,0,65,70,74,71,84],
[66,65,62,65,65,0,60,73,64,72],
[74,60,69,65,60,70,0,72,70,75],
[66,57,58,61,56,57,58,0,57,68],
[66,67,63,67,59,66,60,73,0,77],
[65,56,61,64,46,58,55,62,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,55,59,82,62,83,62,72],
[62,0,48,43,65,64,48,68,66,54],
[60,82,0,64,69,75,67,70,76,72],
[75,87,66,0,75,68,55,83,70,75],
[71,65,61,55,0,55,51,68,63,56],
[48,66,55,62,75,0,51,69,58,64],
[68,82,63,75,79,79,0,66,67,59],
[47,62,60,47,62,61,64,0,47,58],
[68,64,54,60,67,72,63,83,0,60],
[58,76,58,55,74,66,71,72,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,58,69,56,67,67,59,53,52],
[66,0,51,62,58,56,65,67,62,59],
[72,79,0,77,67,61,69,70,73,61],
[61,68,53,0,65,66,72,63,65,61],
[74,72,63,65,0,78,75,58,69,68],
[63,74,69,64,52,0,65,62,61,63],
[63,65,61,58,55,65,0,54,53,51],
[71,63,60,67,72,68,76,0,71,64],
[77,68,57,65,61,69,77,59,0,68],
[78,71,69,69,62,67,79,66,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,81,70,69,77,75,66,81,73],
[68,0,73,72,71,79,64,64,80,74],
[49,57,0,58,51,65,65,41,61,77],
[60,58,72,0,69,82,89,50,65,76],
[61,59,79,61,0,78,63,55,66,72],
[53,51,65,48,52,0,56,47,48,53],
[55,66,65,41,67,74,0,52,68,73],
[64,66,89,80,75,83,78,0,78,74],
[49,50,69,65,64,82,62,52,0,76],
[57,56,53,54,58,77,57,56,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,72,66,68,67,65,70,61,61],
[69,0,62,70,68,72,75,76,65,66],
[58,68,0,62,58,66,61,67,65,64],
[64,60,68,0,62,68,65,67,52,53],
[62,62,72,68,0,68,57,76,66,51],
[63,58,64,62,62,0,56,66,63,63],
[65,55,69,65,73,74,0,70,61,64],
[60,54,63,63,54,64,60,0,56,56],
[69,65,65,78,64,67,69,74,0,67],
[69,64,66,77,79,67,66,74,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,74,93,91,54,90,61,59,77],
[76,0,41,76,42,35,75,58,80,71],
[56,89,0,77,76,55,88,80,97,81],
[37,54,53,0,60,25,87,40,63,56],
[39,88,54,70,0,48,95,58,80,71],
[76,95,75,105,82,0,83,44,65,59],
[40,55,42,43,35,47,0,40,68,41],
[69,72,50,90,72,86,90,0,59,52],
[71,50,33,67,50,65,62,71,0,91],
[53,59,49,74,59,71,89,78,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,72,62,57,52,51,67,63,57],
[79,0,81,74,62,82,67,85,83,68],
[58,49,0,59,59,58,65,55,65,68],
[68,56,71,0,67,54,64,64,72,81],
[73,68,71,63,0,63,65,72,79,78],
[78,48,72,76,67,0,64,80,82,75],
[79,63,65,66,65,66,0,60,75,74],
[63,45,75,66,58,50,70,0,72,70],
[67,47,65,58,51,48,55,58,0,60],
[73,62,62,49,52,55,56,60,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,85,56,45,84,66,63,62,62],
[82,0,88,84,48,88,74,74,75,85],
[45,42,0,70,37,75,64,52,67,62],
[74,46,60,0,71,78,87,63,75,49],
[85,82,93,59,0,75,74,74,96,73],
[46,42,55,52,55,0,61,58,63,64],
[64,56,66,43,56,69,0,57,62,47],
[67,56,78,67,56,72,73,0,55,53],
[68,55,63,55,34,67,68,75,0,43],
[68,45,68,81,57,66,83,77,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,59,60,64,64,72,68,69,68],
[72,0,70,64,67,66,69,75,72,73],
[71,60,0,64,62,63,65,69,78,73],
[70,66,66,0,63,63,62,63,71,71],
[66,63,68,67,0,69,71,69,74,69],
[66,64,67,67,61,0,71,70,74,64],
[58,61,65,68,59,59,0,68,70,63],
[62,55,61,67,61,60,62,0,64,60],
[61,58,52,59,56,56,60,66,0,63],
[62,57,57,59,61,66,67,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,72,65,59,61,85,63,61,51],
[49,0,56,54,48,53,67,43,45,40],
[58,74,0,64,54,70,79,61,60,52],
[65,76,66,0,70,74,88,65,70,67],
[71,82,76,60,0,77,95,69,65,62],
[69,77,60,56,53,0,70,53,58,48],
[45,63,51,42,35,60,0,47,44,30],
[67,87,69,65,61,77,83,0,76,61],
[69,85,70,60,65,72,86,54,0,63],
[79,90,78,63,68,82,100,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,67,58,51,61,66,58,57,55],
[71,0,77,67,74,68,72,54,52,65],
[63,53,0,49,55,63,68,54,52,42],
[72,63,81,0,73,61,83,58,65,60],
[79,56,75,57,0,74,74,57,62,67],
[69,62,67,69,56,0,67,51,57,59],
[64,58,62,47,56,63,0,59,48,44],
[72,76,76,72,73,79,71,0,56,60],
[73,78,78,65,68,73,82,74,0,68],
[75,65,88,70,63,71,86,70,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,68,71,72,64,65,65,60],
[65,0,66,70,71,70,61,64,71,54],
[67,64,0,63,67,63,58,59,68,56],
[62,60,67,0,61,66,63,63,69,56],
[59,59,63,69,0,72,68,59,68,52],
[58,60,67,64,58,0,57,67,58,52],
[66,69,72,67,62,73,0,70,63,61],
[65,66,71,67,71,63,60,0,71,66],
[65,59,62,61,62,72,67,59,0,58],
[70,76,74,74,78,78,69,64,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,61,64,60,66,75,68,62,63],
[64,0,59,62,64,67,65,64,65,61],
[69,71,0,62,67,61,64,63,69,67],
[66,68,68,0,54,60,71,64,61,65],
[70,66,63,76,0,77,76,74,67,76],
[64,63,69,70,53,0,57,61,69,63],
[55,65,66,59,54,73,0,69,65,62],
[62,66,67,66,56,69,61,0,68,64],
[68,65,61,69,63,61,65,62,0,64],
[67,69,63,65,54,67,68,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,83,78,58,76,68,77,80,84],
[60,0,81,70,62,78,60,63,61,78],
[47,49,0,64,56,68,48,56,56,77],
[52,60,66,0,46,70,51,54,66,75],
[72,68,74,84,0,73,58,76,74,82],
[54,52,62,60,57,0,29,61,58,75],
[62,70,82,79,72,101,0,75,69,85],
[53,67,74,76,54,69,55,0,67,79],
[50,69,74,64,56,72,61,63,0,71],
[46,52,53,55,48,55,45,51,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,58,66,57,63,71,72,72],
[67,0,61,67,55,56,60,69,58,72],
[59,69,0,62,70,59,64,71,71,71],
[72,63,68,0,55,56,62,68,69,70],
[64,75,60,75,0,63,72,66,62,70],
[73,74,71,74,67,0,62,78,69,75],
[67,70,66,68,58,68,0,68,75,79],
[59,61,59,62,64,52,62,0,60,62],
[58,72,59,61,68,61,55,70,0,56],
[58,58,59,60,60,55,51,68,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,62,55,49,50,56,65,55],
[66,0,45,58,67,45,52,33,55,48],
[68,85,0,73,74,76,84,50,90,58],
[68,72,57,0,57,61,72,49,75,47],
[75,63,56,73,0,60,61,53,52,61],
[81,85,54,69,70,0,78,60,83,65],
[80,78,46,58,69,52,0,65,60,50],
[74,97,80,81,77,70,65,0,76,66],
[65,75,40,55,78,47,70,54,0,53],
[75,82,72,83,69,65,80,64,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,80,68,84,75,55,58,58,79],
[59,0,71,73,61,64,55,64,50,59],
[50,59,0,55,74,85,58,54,70,55],
[62,57,75,0,77,73,58,55,75,66],
[46,69,56,53,0,61,46,49,57,52],
[55,66,45,57,69,0,49,52,60,62],
[75,75,72,72,84,81,0,75,65,68],
[72,66,76,75,81,78,55,0,70,71],
[72,80,60,55,73,70,65,60,0,70],
[51,71,75,64,78,68,62,59,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,27,58,21,21,37,51,64],
[60,0,76,38,60,43,60,45,35,51],
[66,54,0,47,78,23,57,58,71,85],
[103,92,83,0,89,55,67,83,60,60],
[72,70,52,41,0,71,51,82,75,51],
[109,87,107,75,59,0,62,110,86,83],
[109,70,73,63,79,68,0,78,57,73],
[93,85,72,47,48,20,52,0,56,72],
[79,95,59,70,55,44,73,74,0,50],
[66,79,45,70,79,47,57,58,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,79,65,65,61,71,60,74,79],
[67,0,54,61,62,54,55,47,55,73],
[51,76,0,65,73,57,70,61,74,76],
[65,69,65,0,61,57,58,65,68,72],
[65,68,57,69,0,56,69,63,73,82],
[69,76,73,73,74,0,65,69,73,86],
[59,75,60,72,61,65,0,54,58,72],
[70,83,69,65,67,61,76,0,69,77],
[56,75,56,62,57,57,72,61,0,66],
[51,57,54,58,48,44,58,53,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,59,76,79,69,67,56,63,76],
[44,0,47,65,56,68,59,52,54,53],
[71,83,0,62,75,68,65,67,71,65],
[54,65,68,0,71,61,68,70,78,70],
[51,74,55,59,0,64,59,56,54,59],
[61,62,62,69,66,0,66,61,66,60],
[63,71,65,62,71,64,0,63,67,59],
[74,78,63,60,74,69,67,0,61,73],
[67,76,59,52,76,64,63,69,0,84],
[54,77,65,60,71,70,71,57,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,54,58,54,66,66,56,57,60],
[49,0,57,56,50,50,56,45,62,48],
[76,73,0,59,57,65,62,61,60,60],
[72,74,71,0,65,62,67,65,75,76],
[76,80,73,65,0,58,74,56,64,57],
[64,80,65,68,72,0,71,60,65,63],
[64,74,68,63,56,59,0,52,56,52],
[74,85,69,65,74,70,78,0,76,67],
[73,68,70,55,66,65,74,54,0,60],
[70,82,70,54,73,67,78,63,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,70,66,46,60,51,66,45,59],
[70,0,78,60,67,65,65,70,44,67],
[60,52,0,65,45,62,64,49,46,66],
[64,70,65,0,54,61,60,47,49,55],
[84,63,85,76,0,71,80,67,67,65],
[70,65,68,69,59,0,41,72,51,62],
[79,65,66,70,50,89,0,67,55,66],
[64,60,81,83,63,58,63,0,51,70],
[85,86,84,81,63,79,75,79,0,74],
[71,63,64,75,65,68,64,60,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,69,80,74,66,63,57,65],
[66,0,51,69,75,61,67,58,51,59],
[66,79,0,65,78,74,82,68,64,66],
[61,61,65,0,80,74,75,59,54,58],
[50,55,52,50,0,59,60,51,38,46],
[56,69,56,56,71,0,66,57,55,55],
[64,63,48,55,70,64,0,48,43,49],
[67,72,62,71,79,73,82,0,67,53],
[73,79,66,76,92,75,87,63,0,66],
[65,71,64,72,84,75,81,77,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,58,58,61,57,59,63,63],
[66,0,68,63,53,70,57,65,65,70],
[63,62,0,55,59,59,58,64,57,68],
[72,67,75,0,66,72,71,56,66,66],
[72,77,71,64,0,69,61,67,63,66],
[69,60,71,58,61,0,58,61,52,65],
[73,73,72,59,69,72,0,60,72,69],
[71,65,66,74,63,69,70,0,68,67],
[67,65,73,64,67,78,58,62,0,67],
[67,60,62,64,64,65,61,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,61,67,67,66,72,56,61,64],
[76,0,69,71,69,72,79,61,72,73],
[69,61,0,62,70,76,66,72,63,60],
[63,59,68,0,62,75,66,65,59,72],
[63,61,60,68,0,69,72,57,62,65],
[64,58,54,55,61,0,54,60,47,57],
[58,51,64,64,58,76,0,56,55,63],
[74,69,58,65,73,70,74,0,61,71],
[69,58,67,71,68,83,75,69,0,64],
[66,57,70,58,65,73,67,59,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,53,68,55,45,101,94,54,55],
[63,0,58,82,76,70,75,72,59,74],
[77,72,0,61,63,75,78,76,67,95],
[62,48,69,0,70,70,103,82,69,77],
[75,54,67,60,0,93,104,85,92,89],
[85,60,55,60,37,0,93,77,57,66],
[29,55,52,27,26,37,0,65,35,66],
[36,58,54,48,45,53,65,0,44,57],
[76,71,63,61,38,73,95,86,0,70],
[75,56,35,53,41,64,64,73,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,61,69,69,69,61,72,76,65],
[70,0,55,61,54,74,59,75,65,74],
[69,75,0,65,66,75,61,67,69,71],
[61,69,65,0,58,72,58,68,70,71],
[61,76,64,72,0,59,63,72,79,70],
[61,56,55,58,71,0,49,58,62,65],
[69,71,69,72,67,81,0,65,63,75],
[58,55,63,62,58,72,65,0,74,70],
[54,65,61,60,51,68,67,56,0,72],
[65,56,59,59,60,65,55,60,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,68,61,74,72,64,68,65,70],
[58,0,64,53,69,66,56,69,58,71],
[62,66,0,60,69,62,59,74,62,73],
[69,77,70,0,69,66,65,76,64,67],
[56,61,61,61,0,61,62,69,50,63],
[58,64,68,64,69,0,60,70,56,72],
[66,74,71,65,68,70,0,79,63,65],
[62,61,56,54,61,60,51,0,56,67],
[65,72,68,66,80,74,67,74,0,68],
[60,59,57,63,67,58,65,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,76,67,72,59,72,68,71],
[65,0,66,72,70,59,67,71,68,65],
[61,64,0,69,62,60,63,69,68,71],
[54,58,61,0,60,52,53,62,57,64],
[63,60,68,70,0,61,69,73,63,70],
[58,71,70,78,69,0,62,71,65,71],
[71,63,67,77,61,68,0,65,68,72],
[58,59,61,68,57,59,65,0,68,56],
[62,62,62,73,67,65,62,62,0,72],
[59,65,59,66,60,59,58,74,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,98,64,45,64,21,65,56,65],
[99,0,67,64,58,87,58,65,70,58],
[32,63,0,65,58,53,52,65,36,78],
[66,66,65,0,99,34,66,99,70,66],
[85,72,72,31,0,54,86,85,90,79],
[66,43,77,96,76,0,32,65,36,65],
[109,72,78,64,44,98,0,51,69,44],
[65,65,65,31,45,65,79,0,70,21],
[74,60,94,60,40,94,61,60,0,61],
[65,72,52,64,51,65,86,109,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,71,37,82,93,83,84,74,76],
[58,0,44,68,55,65,71,62,68,63],
[59,86,0,72,74,77,83,72,61,67],
[93,62,58,0,80,78,85,62,82,68],
[48,75,56,50,0,80,74,58,71,63],
[37,65,53,52,50,0,79,54,62,49],
[47,59,47,45,56,51,0,56,45,60],
[46,68,58,68,72,76,74,0,41,59],
[56,62,69,48,59,68,85,89,0,90],
[54,67,63,62,67,81,70,71,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,63,61,74,78,63,65,68],
[65,0,62,76,72,73,73,70,77,68],
[67,68,0,78,61,68,73,70,79,72],
[67,54,52,0,51,69,64,67,76,63],
[69,58,69,79,0,65,75,67,72,71],
[56,57,62,61,65,0,55,68,69,63],
[52,57,57,66,55,75,0,68,58,58],
[67,60,60,63,63,62,62,0,68,65],
[65,53,51,54,58,61,72,62,0,66],
[62,62,58,67,59,67,72,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,58,55,61,49,39,79,54,49],
[73,0,69,78,91,60,65,121,75,63],
[72,61,0,56,69,66,55,87,42,45],
[75,52,74,0,53,68,51,86,61,40],
[69,39,61,77,0,55,60,113,40,67],
[81,70,64,62,75,0,61,101,64,71],
[91,65,75,79,70,69,0,75,84,79],
[51,9,43,44,17,29,55,0,40,57],
[76,55,88,69,90,66,46,90,0,54],
[81,67,85,90,63,59,51,73,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,60,66,32,90,96,90,130,90],
[40,0,66,40,66,40,40,66,130,66],
[70,64,0,6,32,70,70,70,130,64],
[64,90,124,0,26,90,64,90,124,90],
[98,64,98,104,0,64,70,64,130,98],
[40,90,60,40,66,0,6,96,130,124],
[34,90,60,66,60,124,0,124,124,124],
[40,64,60,40,66,34,6,0,130,60],
[0,0,0,6,0,0,6,0,0,0],
[40,64,66,40,32,6,6,70,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,58,57,82,58,65,79,64,65],
[67,0,54,60,64,71,66,71,43,65],
[72,76,0,73,66,51,50,68,68,46],
[73,70,57,0,87,73,54,82,48,73],
[48,66,64,43,0,51,64,62,56,73],
[72,59,79,57,79,0,63,81,60,75],
[65,64,80,76,66,67,0,78,64,69],
[51,59,62,48,68,49,52,0,50,62],
[66,87,62,82,74,70,66,80,0,67],
[65,65,84,57,57,55,61,68,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,71,78,67,65,71,66,77,58],
[53,0,73,71,77,62,58,63,69,60],
[59,57,0,73,73,66,69,61,63,54],
[52,59,57,0,62,49,63,56,60,56],
[63,53,57,68,0,61,62,68,58,58],
[65,68,64,81,69,0,70,63,73,54],
[59,72,61,67,68,60,0,62,54,57],
[64,67,69,74,62,67,68,0,70,60],
[53,61,67,70,72,57,76,60,0,66],
[72,70,76,74,72,76,73,70,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,60,65,70,67,70,68,81,72],
[61,0,58,67,63,67,63,62,74,65],
[70,72,0,75,70,75,61,72,82,69],
[65,63,55,0,60,65,63,64,80,67],
[60,67,60,70,0,58,71,61,89,74],
[63,63,55,65,72,0,63,52,77,71],
[60,67,69,67,59,67,0,63,83,76],
[62,68,58,66,69,78,67,0,75,78],
[49,56,48,50,41,53,47,55,0,56],
[58,65,61,63,56,59,54,52,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,71,71,56,74,68,73,81,71],
[63,0,70,80,69,69,61,81,78,69],
[59,60,0,73,74,75,70,79,67,61],
[59,50,57,0,71,69,57,83,74,67],
[74,61,56,59,0,63,60,64,75,57],
[56,61,55,61,67,0,62,76,72,67],
[62,69,60,73,70,68,0,66,69,60],
[57,49,51,47,66,54,64,0,73,66],
[49,52,63,56,55,58,61,57,0,49],
[59,61,69,63,73,63,70,64,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,80,69,69,60,68,66,69],
[61,0,60,76,59,69,51,69,71,62],
[65,70,0,88,66,81,74,78,77,79],
[50,54,42,0,59,48,45,62,53,59],
[61,71,64,71,0,70,56,66,62,82],
[61,61,49,82,60,0,57,76,73,62],
[70,79,56,85,74,73,0,87,72,73],
[62,61,52,68,64,54,43,0,65,66],
[64,59,53,77,68,57,58,65,0,67],
[61,68,51,71,48,68,57,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,73,63,85,71,72,62,78,68],
[57,0,67,64,83,76,66,86,69,69],
[57,63,0,63,68,61,60,70,64,64],
[67,66,67,0,77,63,66,68,73,63],
[45,47,62,53,0,61,57,60,64,60],
[59,54,69,67,69,0,62,64,74,63],
[58,64,70,64,73,68,0,70,67,65],
[68,44,60,62,70,66,60,0,61,55],
[52,61,66,57,66,56,63,69,0,55],
[62,61,66,67,70,67,65,75,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,72,73,60,62,71,62,58],
[66,0,62,64,71,65,69,60,70,61],
[70,68,0,62,65,62,72,70,67,62],
[58,66,68,0,63,60,65,66,57,53],
[57,59,65,67,0,61,61,53,62,57],
[70,65,68,70,69,0,63,63,72,67],
[68,61,58,65,69,67,0,65,65,61],
[59,70,60,64,77,67,65,0,62,62],
[68,60,63,73,68,58,65,68,0,58],
[72,69,68,77,73,63,69,68,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,58,96,66,90,91,72,59,72],
[49,0,47,71,75,68,74,50,58,53],
[72,83,0,83,64,80,88,54,38,71],
[34,59,47,0,41,56,68,35,25,31],
[64,55,66,89,0,63,84,61,59,58],
[40,62,50,74,67,0,80,65,47,53],
[39,56,42,62,46,50,0,50,34,41],
[58,80,76,95,69,65,80,0,49,64],
[71,72,92,105,71,83,96,81,0,57],
[58,77,59,99,72,77,89,66,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,80,69,65,66,71,77,73,64],
[55,0,76,52,61,49,55,64,67,52],
[50,54,0,54,69,62,47,68,69,67],
[61,78,76,0,66,78,78,65,77,71],
[65,69,61,64,0,68,73,75,86,69],
[64,81,68,52,62,0,62,68,68,66],
[59,75,83,52,57,68,0,51,53,65],
[53,66,62,65,55,62,79,0,73,67],
[57,63,61,53,44,62,77,57,0,65],
[66,78,63,59,61,64,65,63,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,72,75,70,48,65,65,56,45],
[54,0,90,59,64,66,37,63,35,69],
[58,40,0,72,61,60,51,60,42,40],
[55,71,58,0,69,69,51,64,36,73],
[60,66,69,61,0,72,64,81,67,59],
[82,64,70,61,58,0,63,80,57,39],
[65,93,79,79,66,67,0,79,74,75],
[65,67,70,66,49,50,51,0,65,58],
[74,95,88,94,63,73,56,65,0,76],
[85,61,90,57,71,91,55,72,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,44,57,61,76,55,51,60,62],
[77,0,71,61,57,81,66,71,72,69],
[86,59,0,83,71,92,74,85,77,66],
[73,69,47,0,76,72,70,84,69,64],
[69,73,59,54,0,67,46,54,67,59],
[54,49,38,58,63,0,50,70,42,67],
[75,64,56,60,84,80,0,81,72,69],
[79,59,45,46,76,60,49,0,59,55],
[70,58,53,61,63,88,58,71,0,74],
[68,61,64,66,71,63,61,75,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,57,60,53,58,56,53,53,59],
[84,0,80,79,65,73,71,71,68,71],
[73,50,0,67,56,61,52,63,65,62],
[70,51,63,0,52,49,61,55,55,60],
[77,65,74,78,0,72,73,72,72,75],
[72,57,69,81,58,0,63,61,67,66],
[74,59,78,69,57,67,0,69,60,68],
[77,59,67,75,58,69,61,0,70,61],
[77,62,65,75,58,63,70,60,0,68],
[71,59,68,70,55,64,62,69,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,68,61,66,53,74,63,64],
[62,0,68,67,68,70,62,75,60,62],
[66,62,0,65,55,56,60,68,51,64],
[62,63,65,0,62,52,67,79,52,69],
[69,62,75,68,0,69,65,76,64,74],
[64,60,74,78,61,0,65,81,68,68],
[77,68,70,63,65,65,0,78,68,67],
[56,55,62,51,54,49,52,0,56,58],
[67,70,79,78,66,62,62,74,0,79],
[66,68,66,61,56,62,63,72,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,76,75,80,79,57,62,70,70],
[53,0,59,51,66,62,64,55,59,55],
[54,71,0,61,63,74,60,52,64,58],
[55,79,69,0,63,76,49,56,63,56],
[50,64,67,67,0,69,60,50,63,54],
[51,68,56,54,61,0,60,60,60,52],
[73,66,70,81,70,70,0,65,72,70],
[68,75,78,74,80,70,65,0,69,64],
[60,71,66,67,67,70,58,61,0,60],
[60,75,72,74,76,78,60,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,81,60,62,76,69,76,76,67],
[60,0,68,59,57,63,74,66,67,57],
[49,62,0,48,59,53,60,59,60,52],
[70,71,82,0,66,73,68,68,76,62],
[68,73,71,64,0,67,70,71,72,66],
[54,67,77,57,63,0,67,68,71,62],
[61,56,70,62,60,63,0,68,70,67],
[54,64,71,62,59,62,62,0,70,62],
[54,63,70,54,58,59,60,60,0,64],
[63,73,78,68,64,68,63,68,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,59,65,53,70,70,63,80,45],
[67,0,65,67,58,64,66,75,61,56],
[71,65,0,72,62,77,76,77,72,68],
[65,63,58,0,62,61,70,61,71,55],
[77,72,68,68,0,79,62,77,81,63],
[60,66,53,69,51,0,64,68,72,46],
[60,64,54,60,68,66,0,72,62,52],
[67,55,53,69,53,62,58,0,75,61],
[50,69,58,59,49,58,68,55,0,51],
[85,74,62,75,67,84,78,69,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,78,65,70,75,68,68,61,67],
[58,0,67,63,68,59,59,65,66,67],
[52,63,0,62,62,56,55,59,64,60],
[65,67,68,0,69,67,58,63,60,67],
[60,62,68,61,0,67,53,68,61,67],
[55,71,74,63,63,0,60,70,65,73],
[62,71,75,72,77,70,0,71,74,69],
[62,65,71,67,62,60,59,0,63,66],
[69,64,66,70,69,65,56,67,0,69],
[63,63,70,63,63,57,61,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,79,65,75,69,75,77,77],
[64,0,69,69,69,71,74,70,67,70],
[60,61,0,62,69,65,65,67,61,66],
[51,61,68,0,62,63,66,60,58,62],
[65,61,61,68,0,61,66,67,57,68],
[55,59,65,67,69,0,62,68,62,70],
[61,56,65,64,64,68,0,63,60,67],
[55,60,63,70,63,62,67,0,66,62],
[53,63,69,72,73,68,70,64,0,70],
[53,60,64,68,62,60,63,68,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,66,73,67,67,64,67,73],
[62,0,59,62,64,70,65,58,61,61],
[64,71,0,74,73,68,66,60,67,65],
[64,68,56,0,79,69,70,73,63,65],
[57,66,57,51,0,65,62,60,65,70],
[63,60,62,61,65,0,73,73,68,74],
[63,65,64,60,68,57,0,55,67,64],
[66,72,70,57,70,57,75,0,71,74],
[63,69,63,67,65,62,63,59,0,58],
[57,69,65,65,60,56,66,56,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,74,65,69,71,64,57,78,72],
[67,0,68,54,62,62,50,53,71,72],
[56,62,0,65,59,54,59,56,65,65],
[65,76,65,0,64,66,61,66,67,64],
[61,68,71,66,0,70,61,65,73,69],
[59,68,76,64,60,0,65,59,69,69],
[66,80,71,69,69,65,0,65,81,82],
[73,77,74,64,65,71,65,0,71,76],
[52,59,65,63,57,61,49,59,0,72],
[58,58,65,66,61,61,48,54,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,61,68,64,61,55,57,67,71],
[69,0,57,68,58,63,62,58,67,64],
[69,73,0,81,70,60,60,64,69,69],
[62,62,49,0,58,52,51,61,60,54],
[66,72,60,72,0,59,59,63,66,67],
[69,67,70,78,71,0,69,73,69,63],
[75,68,70,79,71,61,0,65,60,68],
[73,72,66,69,67,57,65,0,71,72],
[63,63,61,70,64,61,70,59,0,67],
[59,66,61,76,63,67,62,58,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,73,65,66,65,59,63,64,62],
[72,0,71,62,67,70,59,62,62,62],
[57,59,0,55,60,62,55,58,55,51],
[65,68,75,0,63,69,60,56,70,58],
[64,63,70,67,0,79,70,65,62,64],
[65,60,68,61,51,0,67,59,59,62],
[71,71,75,70,60,63,0,60,70,58],
[67,68,72,74,65,71,70,0,68,67],
[66,68,75,60,68,71,60,62,0,60],
[68,68,79,72,66,68,72,63,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,84,70,72,70,69,62,76,74],
[67,0,70,64,66,70,65,69,76,71],
[46,60,0,55,53,57,59,50,62,61],
[60,66,75,0,61,68,67,56,81,68],
[58,64,77,69,0,59,74,59,67,64],
[60,60,73,62,71,0,68,64,70,61],
[61,65,71,63,56,62,0,56,68,70],
[68,61,80,74,71,66,74,0,75,74],
[54,54,68,49,63,60,62,55,0,59],
[56,59,69,62,66,69,60,56,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,70,68,60,60,55,60,68],
[65,0,63,71,71,55,68,66,52,73],
[60,67,0,66,66,66,62,63,54,71],
[60,59,64,0,60,61,52,56,62,59],
[62,59,64,70,0,50,57,59,48,62],
[70,75,64,69,80,0,60,64,58,72],
[70,62,68,78,73,70,0,68,65,70],
[75,64,67,74,71,66,62,0,68,77],
[70,78,76,68,82,72,65,62,0,71],
[62,57,59,71,68,58,60,53,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,72,68,68,61,75,73,62,63],
[55,0,71,66,65,54,61,61,65,52],
[58,59,0,64,66,65,63,65,73,55],
[62,64,66,0,66,60,59,60,72,59],
[62,65,64,64,0,61,63,56,68,58],
[69,76,65,70,69,0,66,65,65,67],
[55,69,67,71,67,64,0,59,69,63],
[57,69,65,70,74,65,71,0,70,62],
[68,65,57,58,62,65,61,60,0,55],
[67,78,75,71,72,63,67,68,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,72,51,61,84,54,24,41,68],
[51,0,35,34,34,61,51,75,48,75],
[58,95,0,63,23,63,58,53,54,48],
[79,96,67,0,38,50,49,59,60,79],
[69,96,107,92,0,125,97,54,68,66],
[46,69,67,80,5,0,61,24,43,50],
[76,79,72,81,33,69,0,55,85,83],
[106,55,77,71,76,106,75,0,73,117],
[89,82,76,70,62,87,45,57,0,106],
[62,55,82,51,64,80,47,13,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,73,62,62,67,54,60,68],
[67,0,66,76,61,70,66,58,68,62],
[66,64,0,70,76,68,68,73,68,73],
[57,54,60,0,67,67,55,55,54,49],
[68,69,54,63,0,67,61,59,60,58],
[68,60,62,63,63,0,59,59,61,56],
[63,64,62,75,69,71,0,64,64,60],
[76,72,57,75,71,71,66,0,72,66],
[70,62,62,76,70,69,66,58,0,71],
[62,68,57,81,72,74,70,64,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,53,48,66,86,68,74,75,48],
[54,0,62,47,52,61,58,63,70,31],
[77,68,0,70,66,80,83,77,78,61],
[82,83,60,0,81,85,63,82,75,78],
[64,78,64,49,0,84,63,68,80,51],
[44,69,50,45,46,0,47,49,68,32],
[62,72,47,67,67,83,0,72,85,49],
[56,67,53,48,62,81,58,0,84,41],
[55,60,52,55,50,62,45,46,0,51],
[82,99,69,52,79,98,81,89,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,78,71,61,77,66,67,63],
[61,0,66,69,77,61,69,63,69,68],
[59,64,0,71,78,65,76,57,68,67],
[52,61,59,0,70,62,63,54,61,61],
[59,53,52,60,0,51,58,58,52,57],
[69,69,65,68,79,0,77,63,78,72],
[53,61,54,67,72,53,0,60,61,58],
[64,67,73,76,72,67,70,0,63,67],
[63,61,62,69,78,52,69,67,0,71],
[67,62,63,69,73,58,72,63,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,73,66,66,55,62,68,60,65],
[64,0,66,69,55,64,72,57,61,64],
[57,64,0,57,58,62,62,64,60,59],
[64,61,73,0,53,60,75,60,68,67],
[64,75,72,77,0,62,70,73,68,73],
[75,66,68,70,68,0,69,75,68,59],
[68,58,68,55,60,61,0,61,64,55],
[62,73,66,70,57,55,69,0,60,71],
[70,69,70,62,62,62,66,70,0,63],
[65,66,71,63,57,71,75,59,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,67,53,85,79,85,59,72,40],
[87,0,88,64,82,84,82,67,85,69],
[63,42,0,57,39,102,92,66,36,35],
[77,66,73,0,76,102,109,83,57,46],
[45,48,91,54,0,98,107,74,53,39],
[51,46,28,28,32,0,52,27,15,30],
[45,48,38,21,23,78,0,31,17,29],
[71,63,64,47,56,103,99,0,47,56],
[58,45,94,73,77,115,113,83,0,47],
[90,61,95,84,91,100,101,74,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,63,54,61,69,63,55,71,61],
[75,0,69,61,65,87,64,70,83,74],
[67,61,0,55,54,61,65,50,61,67],
[76,69,75,0,76,62,72,68,82,74],
[69,65,76,54,0,62,59,63,82,77],
[61,43,69,68,68,0,66,68,65,63],
[67,66,65,58,71,64,0,55,66,64],
[75,60,80,62,67,62,75,0,80,80],
[59,47,69,48,48,65,64,50,0,60],
[69,56,63,56,53,67,66,50,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,57,67,77,64,77,60,68,62],
[57,0,55,60,67,57,66,42,54,66],
[73,75,0,84,82,68,64,72,68,73],
[63,70,46,0,71,61,72,50,61,72],
[53,63,48,59,0,57,63,46,58,70],
[66,73,62,69,73,0,75,49,66,79],
[53,64,66,58,67,55,0,54,68,69],
[70,88,58,80,84,81,76,0,72,87],
[62,76,62,69,72,64,62,58,0,68],
[68,64,57,58,60,51,61,43,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,80,58,72,71,77,66,74],
[63,0,67,73,73,80,81,86,69,53],
[63,63,0,61,77,79,76,88,62,73],
[50,57,69,0,61,76,59,66,60,52],
[72,57,53,69,0,72,62,76,56,70],
[58,50,51,54,58,0,65,65,43,55],
[59,49,54,71,68,65,0,74,43,61],
[53,44,42,64,54,65,56,0,52,36],
[64,61,68,70,74,87,87,78,0,72],
[56,77,57,78,60,75,69,94,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,57,62,64,63,56,57,58,57],
[66,0,61,62,64,74,61,60,68,58],
[73,69,0,67,69,66,64,66,67,67],
[68,68,63,0,61,66,68,55,64,62],
[66,66,61,69,0,66,55,62,65,66],
[67,56,64,64,64,0,63,61,60,60],
[74,69,66,62,75,67,0,76,71,71],
[73,70,64,75,68,69,54,0,62,67],
[72,62,63,66,65,70,59,68,0,56],
[73,72,63,68,64,70,59,63,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,73,67,62,66,60,59,72,71],
[47,0,54,58,53,68,59,50,59,55],
[57,76,0,62,62,62,71,60,65,63],
[63,72,68,0,57,61,77,65,66,74],
[68,77,68,73,0,63,63,67,71,68],
[64,62,68,69,67,0,62,60,78,69],
[70,71,59,53,67,68,0,68,74,71],
[71,80,70,65,63,70,62,0,75,62],
[58,71,65,64,59,52,56,55,0,68],
[59,75,67,56,62,61,59,68,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,69,60,74,67,64,64,68],
[65,0,67,65,76,71,64,67,74,72],
[65,63,0,60,55,65,64,61,67,61],
[61,65,70,0,72,70,64,61,68,64],
[70,54,75,58,0,66,64,60,74,75],
[56,59,65,60,64,0,70,52,65,63],
[63,66,66,66,66,60,0,55,65,57],
[66,63,69,69,70,78,75,0,72,72],
[66,56,63,62,56,65,65,58,0,65],
[62,58,69,66,55,67,73,58,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,60,60,63,58,53,57,59],
[68,0,63,62,56,62,52,62,58,68],
[69,67,0,66,60,65,67,60,65,71],
[70,68,64,0,57,62,60,67,62,68],
[70,74,70,73,0,75,66,62,65,73],
[67,68,65,68,55,0,63,57,66,62],
[72,78,63,70,64,67,0,65,67,78],
[77,68,70,63,68,73,65,0,67,73],
[73,72,65,68,65,64,63,63,0,69],
[71,62,59,62,57,68,52,57,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,64,66,65,70,66,64,75,62],
[68,0,78,67,68,68,65,72,54,61],
[66,52,0,66,65,75,63,64,55,67],
[64,63,64,0,69,74,67,74,60,62],
[65,62,65,61,0,76,53,66,56,55],
[60,62,55,56,54,0,57,58,58,58],
[64,65,67,63,77,73,0,75,62,63],
[66,58,66,56,64,72,55,0,56,61],
[55,76,75,70,74,72,68,74,0,68],
[68,69,63,68,75,72,67,69,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,63,51,67,39,77,35,28,42],
[39,0,59,30,37,49,77,48,38,41],
[67,71,0,54,30,28,92,24,32,35],
[79,100,76,0,51,61,124,51,67,86],
[63,93,100,79,0,69,109,55,65,49],
[91,81,102,69,61,0,103,68,70,65],
[53,53,38,6,21,27,0,27,17,18],
[95,82,106,79,75,62,103,0,95,79],
[102,92,98,63,65,60,113,35,0,74],
[88,89,95,44,81,65,112,51,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,62,86,94,82,115,94,96,109],
[41,0,69,90,95,82,73,70,98,101],
[68,61,0,65,66,59,95,37,86,74],
[44,40,65,0,60,52,78,53,49,67],
[36,35,64,70,0,53,73,47,81,86],
[48,48,71,78,77,0,92,58,68,89],
[15,57,35,52,57,38,0,55,89,59],
[36,60,93,77,83,72,75,0,90,101],
[34,32,44,81,49,62,41,40,0,64],
[21,29,56,63,44,41,71,29,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,70,65,68,72,69,68,53,82],
[56,0,73,62,61,61,67,63,61,70],
[60,57,0,67,71,62,63,61,57,71],
[65,68,63,0,59,62,56,65,59,65],
[62,69,59,71,0,65,62,63,57,65],
[58,69,68,68,65,0,62,64,57,76],
[61,63,67,74,68,68,0,62,69,72],
[62,67,69,65,67,66,68,0,63,77],
[77,69,73,71,73,73,61,67,0,78],
[48,60,59,65,65,54,58,53,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,57,59,65,58,62,60,52,72],
[62,0,56,63,56,60,63,63,51,65],
[73,74,0,61,70,69,63,64,65,74],
[71,67,69,0,57,62,65,68,59,64],
[65,74,60,73,0,65,61,58,58,72],
[72,70,61,68,65,0,66,61,62,73],
[68,67,67,65,69,64,0,69,64,70],
[70,67,66,62,72,69,61,0,57,77],
[78,79,65,71,72,68,66,73,0,68],
[58,65,56,66,58,57,60,53,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,63,73,68,71,76,69,68,72],
[58,0,66,66,75,59,73,65,78,67],
[67,64,0,66,69,66,58,65,68,65],
[57,64,64,0,70,73,69,58,70,72],
[62,55,61,60,0,71,61,60,70,71],
[59,71,64,57,59,0,64,67,63,65],
[54,57,72,61,69,66,0,61,59,66],
[61,65,65,72,70,63,69,0,71,69],
[62,52,62,60,60,67,71,59,0,64],
[58,63,65,58,59,65,64,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,60,70,69,68,64,65,57,72],
[68,0,65,66,66,65,63,61,68,69],
[70,65,0,78,66,71,71,59,63,73],
[60,64,52,0,75,54,62,62,56,66],
[61,64,64,55,0,58,63,58,65,70],
[62,65,59,76,72,0,69,57,70,74],
[66,67,59,68,67,61,0,60,66,69],
[65,69,71,68,72,73,70,0,68,79],
[73,62,67,74,65,60,64,62,0,72],
[58,61,57,64,60,56,61,51,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,28,32,57,76,7,68,56,67],
[71,0,19,19,57,35,36,79,69,89],
[102,111,0,79,89,66,64,68,66,97],
[98,111,51,0,70,85,70,95,84,112],
[73,73,41,60,0,54,55,83,41,91],
[54,95,64,45,76,0,43,84,46,73],
[123,94,66,60,75,87,0,96,65,104],
[62,51,62,35,47,46,34,0,29,72],
[74,61,64,46,89,84,65,101,0,95],
[63,41,33,18,39,57,26,58,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,73,47,105,130,73,58,98,73],
[32,0,32,47,32,47,105,90,105,15],
[57,98,0,47,90,130,105,115,130,15],
[83,83,83,0,58,83,83,83,83,83],
[25,98,40,72,0,40,98,83,98,40],
[0,83,0,47,90,0,73,58,98,15],
[57,25,25,47,32,57,0,25,40,15],
[72,40,15,47,47,72,105,0,98,15],
[32,25,0,47,32,32,90,32,0,0],
[57,115,115,47,90,115,115,115,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,75,72,72,72,72,65,65,66],
[51,0,51,57,49,58,52,57,49,38],
[55,79,0,70,58,55,63,72,59,61],
[58,73,60,0,61,63,67,70,69,75],
[58,81,72,69,0,68,74,73,64,70],
[58,72,75,67,62,0,76,67,55,69],
[58,78,67,63,56,54,0,74,59,63],
[65,73,58,60,57,63,56,0,54,56],
[65,81,71,61,66,75,71,76,0,79],
[64,92,69,55,60,61,67,74,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,68,85,68,67,62,73,60,61],
[71,0,69,80,75,65,78,74,64,73],
[62,61,0,78,81,59,66,73,67,61],
[45,50,52,0,65,44,51,61,63,50],
[62,55,49,65,0,47,51,68,56,41],
[63,65,71,86,83,0,75,70,59,67],
[68,52,64,79,79,55,0,66,64,58],
[57,56,57,69,62,60,64,0,49,51],
[70,66,63,67,74,71,66,81,0,68],
[69,57,69,80,89,63,72,79,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,63,65,61,61,70,66,59],
[65,0,61,63,57,58,63,68,61,60],
[64,69,0,60,65,67,56,68,70,66],
[67,67,70,0,68,69,65,76,72,65],
[65,73,65,62,0,68,62,77,67,71],
[69,72,63,61,62,0,65,70,70,69],
[69,67,74,65,68,65,0,74,68,67],
[60,62,62,54,53,60,56,0,63,57],
[64,69,60,58,63,60,62,67,0,59],
[71,70,64,65,59,61,63,73,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,67,73,70,67,66,71,70,67],
[67,0,72,69,73,63,68,69,66,58],
[63,58,0,69,66,61,54,64,64,60],
[57,61,61,0,66,58,47,65,59,58],
[60,57,64,64,0,55,59,68,59,62],
[63,67,69,72,75,0,60,74,70,71],
[64,62,76,83,71,70,0,70,75,65],
[59,61,66,65,62,56,60,0,63,64],
[60,64,66,71,71,60,55,67,0,59],
[63,72,70,72,68,59,65,66,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,60,66,62,64,65,70,54,59],
[85,0,72,72,72,66,76,80,58,76],
[70,58,0,71,72,67,72,71,64,67],
[64,58,59,0,69,58,66,72,51,54],
[68,58,58,61,0,64,72,76,52,68],
[66,64,63,72,66,0,75,73,67,66],
[65,54,58,64,58,55,0,67,53,58],
[60,50,59,58,54,57,63,0,56,59],
[76,72,66,79,78,63,77,74,0,80],
[71,54,63,76,62,64,72,71,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,48,76,58,90,62,52,38,74],
[60,0,71,74,75,87,73,80,54,56],
[82,59,0,81,70,84,76,70,63,52],
[54,56,49,0,63,54,72,56,48,65],
[72,55,60,67,0,83,94,80,45,65],
[40,43,46,76,47,0,63,66,69,59],
[68,57,54,58,36,67,0,52,44,40],
[78,50,60,74,50,64,78,0,46,60],
[92,76,67,82,85,61,86,84,0,64],
[56,74,78,65,65,71,90,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,80,73,72,87,64,71,72,80],
[48,0,65,61,49,82,46,43,61,67],
[50,65,0,59,58,80,51,64,61,61],
[57,69,71,0,59,80,62,55,68,69],
[58,81,72,71,0,79,60,62,78,75],
[43,48,50,50,51,0,45,54,47,55],
[66,84,79,68,70,85,0,65,71,71],
[59,87,66,75,68,76,65,0,70,81],
[58,69,69,62,52,83,59,60,0,47],
[50,63,69,61,55,75,59,49,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,53,76,72,14,61,65,60,51],
[81,0,81,62,72,67,81,69,95,95],
[77,49,0,83,85,45,84,68,82,75],
[54,68,47,0,72,33,94,68,74,81],
[58,58,45,58,0,45,45,58,77,45],
[116,63,85,97,85,0,88,90,104,97],
[69,49,46,36,85,42,0,57,60,83],
[65,61,62,62,72,40,73,0,56,62],
[70,35,48,56,53,26,70,74,0,87],
[79,35,55,49,85,33,47,68,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,58,62,65,68,65,61,61,65],
[63,0,58,58,59,70,71,61,57,66],
[72,72,0,64,70,63,75,69,68,69],
[68,72,66,0,79,79,80,74,63,77],
[65,71,60,51,0,77,72,68,54,69],
[62,60,67,51,53,0,60,51,54,69],
[65,59,55,50,58,70,0,59,53,60],
[69,69,61,56,62,79,71,0,58,77],
[69,73,62,67,76,76,77,72,0,77],
[65,64,61,53,61,61,70,53,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,83,94,64,59,51,68,44,67],
[71,0,80,76,61,64,54,78,53,61],
[47,50,0,71,52,38,63,68,41,56],
[36,54,59,0,62,48,56,48,42,53],
[66,69,78,68,0,56,71,75,59,65],
[71,66,92,82,74,0,64,86,65,57],
[79,76,67,74,59,66,0,78,51,62],
[62,52,62,82,55,44,52,0,42,52],
[86,77,89,88,71,65,79,88,0,70],
[63,69,74,77,65,73,68,78,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,63,57,61,65,50,62,60,63],
[73,0,59,61,57,50,55,58,57,72],
[67,71,0,70,71,58,62,62,59,69],
[73,69,60,0,72,61,61,64,66,63],
[69,73,59,58,0,56,61,62,59,68],
[65,80,72,69,74,0,74,65,69,77],
[80,75,68,69,69,56,0,71,74,65],
[68,72,68,66,68,65,59,0,60,70],
[70,73,71,64,71,61,56,70,0,70],
[67,58,61,67,62,53,65,60,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,50,59,54,68,56,64,56,52],
[64,0,61,67,51,64,58,54,58,53],
[80,69,0,68,68,69,64,69,73,61],
[71,63,62,0,60,58,62,61,56,54],
[76,79,62,70,0,75,63,60,70,65],
[62,66,61,72,55,0,59,55,66,60],
[74,72,66,68,67,71,0,64,66,60],
[66,76,61,69,70,75,66,0,68,57],
[74,72,57,74,60,64,64,62,0,63],
[78,77,69,76,65,70,70,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,67,34,57,106,53,108,57,65],
[46,0,72,68,79,111,58,99,67,99],
[63,58,0,47,79,78,46,104,34,78],
[96,62,83,0,50,111,71,115,64,97],
[73,51,51,80,0,104,51,80,39,111],
[24,19,52,19,26,0,40,65,40,68],
[77,72,84,59,79,90,0,96,82,97],
[22,31,26,15,50,65,34,0,50,46],
[73,63,96,66,91,90,48,80,0,97],
[65,31,52,33,19,62,33,84,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,64,52,55,77,53,57,47,61],
[70,0,64,60,66,84,66,58,65,76],
[66,66,0,59,72,76,55,66,60,73],
[78,70,71,0,75,87,58,68,55,60],
[75,64,58,55,0,78,59,59,50,52],
[53,46,54,43,52,0,50,51,37,53],
[77,64,75,72,71,80,0,71,54,61],
[73,72,64,62,71,79,59,0,51,63],
[83,65,70,75,80,93,76,79,0,76],
[69,54,57,70,78,77,69,67,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,62,76,72,59,67,59,70,74],
[60,0,61,62,58,56,62,54,55,66],
[68,69,0,58,71,60,71,69,72,73],
[54,68,72,0,61,58,60,50,68,73],
[58,72,59,69,0,56,66,53,52,69],
[71,74,70,72,74,0,63,61,70,64],
[63,68,59,70,64,67,0,54,64,65],
[71,76,61,80,77,69,76,0,80,76],
[60,75,58,62,78,60,66,50,0,64],
[56,64,57,57,61,66,65,54,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,71,63,59,55,67,58,62,64],
[78,0,68,73,66,74,81,70,69,65],
[59,62,0,61,62,63,71,58,65,62],
[67,57,69,0,67,60,80,61,69,65],
[71,64,68,63,0,64,78,65,67,72],
[75,56,67,70,66,0,74,66,69,68],
[63,49,59,50,52,56,0,51,64,57],
[72,60,72,69,65,64,79,0,73,67],
[68,61,65,61,63,61,66,57,0,56],
[66,65,68,65,58,62,73,63,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,62,54,62,73,74,58,53,54],
[70,0,60,68,69,67,71,69,67,54],
[68,70,0,72,71,72,74,76,68,60],
[76,62,58,0,67,53,66,66,63,59],
[68,61,59,63,0,66,77,73,61,56],
[57,63,58,77,64,0,57,59,54,51],
[56,59,56,64,53,73,0,57,53,45],
[72,61,54,64,57,71,73,0,61,63],
[77,63,62,67,69,76,77,69,0,65],
[76,76,70,71,74,79,85,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,64,62,41,85,78,101,101,81],
[55,0,64,77,55,81,56,88,61,81],
[66,66,0,63,60,89,56,99,75,73],
[68,53,67,0,71,78,73,71,72,88],
[89,75,70,59,0,70,67,96,94,82],
[45,49,41,52,60,0,46,49,36,55],
[52,74,74,57,63,84,0,76,71,71],
[29,42,31,59,34,81,54,0,38,74],
[29,69,55,58,36,94,59,92,0,85],
[49,49,57,42,48,75,59,56,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,69,62,60,62,52,58,68,47],
[72,0,60,57,66,62,67,75,74,63],
[61,70,0,67,72,65,58,63,75,57],
[68,73,63,0,67,49,58,72,70,54],
[70,64,58,63,0,49,74,79,73,45],
[68,68,65,81,81,0,64,80,85,67],
[78,63,72,72,56,66,0,84,78,59],
[72,55,67,58,51,50,46,0,70,48],
[62,56,55,60,57,45,52,60,0,53],
[83,67,73,76,85,63,71,82,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,60,54,59,57,62,73,62,58],
[80,0,74,74,75,71,71,77,65,72],
[70,56,0,64,60,71,62,73,65,69],
[76,56,66,0,64,73,69,84,67,73],
[71,55,70,66,0,63,65,68,70,62],
[73,59,59,57,67,0,69,71,64,65],
[68,59,68,61,65,61,0,81,67,75],
[57,53,57,46,62,59,49,0,59,66],
[68,65,65,63,60,66,63,71,0,70],
[72,58,61,57,68,65,55,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,56,83,75,66,76,63,74,99],
[70,0,71,71,62,72,75,66,65,91],
[74,59,0,71,68,65,85,69,65,86],
[47,59,59,0,75,63,73,64,61,89],
[55,68,62,55,0,57,68,51,65,77],
[64,58,65,67,73,0,81,59,67,94],
[54,55,45,57,62,49,0,57,58,70],
[67,64,61,66,79,71,73,0,67,85],
[56,65,65,69,65,63,72,63,0,84],
[31,39,44,41,53,36,60,45,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,75,72,69,73,61,69,74,75],
[68,0,69,62,58,59,68,73,69,75],
[55,61,0,57,65,63,55,64,64,58],
[58,68,73,0,58,66,58,64,56,63],
[61,72,65,72,0,75,61,70,70,70],
[57,71,67,64,55,0,55,68,58,63],
[69,62,75,72,69,75,0,68,70,70],
[61,57,66,66,60,62,62,0,65,71],
[56,61,66,74,60,72,60,65,0,73],
[55,55,72,67,60,67,60,59,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,71,89,71,70,63,99,69,94],
[62,0,70,70,80,71,72,90,64,104],
[59,60,0,72,68,53,51,63,66,66],
[41,60,58,0,70,76,56,71,42,85],
[59,50,62,60,0,71,47,67,46,79],
[60,59,77,54,59,0,51,62,48,82],
[67,58,79,74,83,79,0,87,75,80],
[31,40,67,59,63,68,43,0,43,84],
[61,66,64,88,84,82,55,87,0,89],
[36,26,64,45,51,48,50,46,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,57,61,50,61,53,53,57,61],
[84,0,73,64,61,61,62,64,61,63],
[73,57,0,58,54,57,58,53,56,58],
[69,66,72,0,64,70,65,53,56,56],
[80,69,76,66,0,75,63,66,73,66],
[69,69,73,60,55,0,66,50,66,61],
[77,68,72,65,67,64,0,59,67,65],
[77,66,77,77,64,80,71,0,66,71],
[73,69,74,74,57,64,63,64,0,66],
[69,67,72,74,64,69,65,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,59,59,66,57,72,63,50],
[67,0,91,72,56,73,85,62,65,48],
[68,39,0,49,49,59,78,53,59,60],
[71,58,81,0,63,56,82,82,76,65],
[71,74,81,67,0,79,92,69,66,61],
[64,57,71,74,51,0,91,53,66,41],
[73,45,52,48,38,39,0,51,59,35],
[58,68,77,48,61,77,79,0,74,64],
[67,65,71,54,64,64,71,56,0,54],
[80,82,70,65,69,89,95,66,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,67,60,67,84,72,73,71,58],
[55,0,64,58,65,77,61,66,70,63],
[63,66,0,61,68,84,58,65,67,67],
[70,72,69,0,69,74,68,66,73,65],
[63,65,62,61,0,76,71,60,73,65],
[46,53,46,56,54,0,54,54,56,55],
[58,69,72,62,59,76,0,66,63,61],
[57,64,65,64,70,76,64,0,73,68],
[59,60,63,57,57,74,67,57,0,56],
[72,67,63,65,65,75,69,62,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,62,73,68,77,75,66,60,67],
[59,0,60,64,55,65,67,62,58,62],
[68,70,0,68,63,62,72,65,67,70],
[57,66,62,0,60,70,69,68,63,68],
[62,75,67,70,0,71,77,68,69,71],
[53,65,68,60,59,0,68,58,64,64],
[55,63,58,61,53,62,0,65,65,63],
[64,68,65,62,62,72,65,0,64,75],
[70,72,63,67,61,66,65,66,0,65],
[63,68,60,62,59,66,67,55,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,59,60,71,70,73,73,76,67],
[61,0,52,59,55,53,57,63,62,68],
[71,78,0,59,58,59,71,66,76,71],
[70,71,71,0,63,65,65,73,68,73],
[59,75,72,67,0,70,68,66,79,66],
[60,77,71,65,60,0,66,75,75,77],
[57,73,59,65,62,64,0,73,70,71],
[57,67,64,57,64,55,57,0,67,71],
[54,68,54,62,51,55,60,63,0,62],
[63,62,59,57,64,53,59,59,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,50,54,43,51,48,44,38,64],
[85,0,68,66,74,82,62,48,69,76],
[80,62,0,77,79,77,76,66,64,73],
[76,64,53,0,59,79,61,50,56,64],
[87,56,51,71,0,69,56,70,54,65],
[79,48,53,51,61,0,54,59,43,68],
[82,68,54,69,74,76,0,59,61,68],
[86,82,64,80,60,71,71,0,63,78],
[92,61,66,74,76,87,69,67,0,83],
[66,54,57,66,65,62,62,52,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,75,75,69,65,75,72,65,65],
[62,0,72,80,65,60,73,73,65,69],
[55,58,0,70,68,55,59,59,63,54],
[55,50,60,0,56,48,58,61,58,55],
[61,65,62,74,0,53,64,62,61,59],
[65,70,75,82,77,0,67,62,75,61],
[55,57,71,72,66,63,0,64,59,61],
[58,57,71,69,68,68,66,0,68,70],
[65,65,67,72,69,55,71,62,0,66],
[65,61,76,75,71,69,69,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,59,70,55,64,55,55,61,66],
[66,0,72,69,72,63,55,64,72,61],
[71,58,0,64,62,58,58,54,66,68],
[60,61,66,0,71,62,66,61,69,66],
[75,58,68,59,0,69,52,59,65,55],
[66,67,72,68,61,0,63,60,71,63],
[75,75,72,64,78,67,0,60,69,70],
[75,66,76,69,71,70,70,0,75,61],
[69,58,64,61,65,59,61,55,0,61],
[64,69,62,64,75,67,60,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,69,62,54,51,62,67,63,62],
[58,0,66,57,65,52,68,72,66,64],
[61,64,0,55,56,53,61,54,61,59],
[68,73,75,0,62,71,68,73,77,70],
[76,65,74,68,0,65,74,65,77,76],
[79,78,77,59,65,0,69,74,80,71],
[68,62,69,62,56,61,0,61,83,69],
[63,58,76,57,65,56,69,0,77,66],
[67,64,69,53,53,50,47,53,0,55],
[68,66,71,60,54,59,61,64,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,73,72,71,72,76,63,66,74],
[58,0,64,69,69,69,73,60,64,68],
[57,66,0,57,64,70,69,61,55,63],
[58,61,73,0,61,76,71,68,62,66],
[59,61,66,69,0,76,72,63,66,70],
[58,61,60,54,54,0,61,50,55,56],
[54,57,61,59,58,69,0,57,63,62],
[67,70,69,62,67,80,73,0,64,66],
[64,66,75,68,64,75,67,66,0,69],
[56,62,67,64,60,74,68,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,53,69,52,21,48,49,22,47],
[92,0,37,83,48,33,56,75,53,92],
[77,93,0,69,90,59,68,89,60,85],
[61,47,61,0,39,26,50,63,40,54],
[78,82,40,91,0,60,97,79,56,65],
[109,97,71,104,70,0,74,58,107,67],
[82,74,62,80,33,56,0,86,53,71],
[81,55,41,67,51,72,44,0,57,57],
[108,77,70,90,74,23,77,73,0,72],
[83,38,45,76,65,63,59,73,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,77,64,57,70,69,67,81,60],
[67,0,76,70,68,76,70,67,69,65],
[53,54,0,58,49,62,60,56,63,55],
[66,60,72,0,52,65,72,66,65,67],
[73,62,81,78,0,76,76,69,72,61],
[60,54,68,65,54,0,66,65,55,60],
[61,60,70,58,54,64,0,54,66,50],
[63,63,74,64,61,65,76,0,65,55],
[49,61,67,65,58,75,64,65,0,54],
[70,65,75,63,69,70,80,75,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,71,64,92,80,60,86,57,91],
[50,0,70,43,77,78,51,84,39,107],
[59,60,0,56,101,60,53,73,47,80],
[66,87,74,0,83,79,66,81,65,103],
[38,53,29,47,0,66,36,59,39,72],
[50,52,70,51,64,0,45,52,61,75],
[70,79,77,64,94,85,0,94,74,73],
[44,46,57,49,71,78,36,0,45,83],
[73,91,83,65,91,69,56,85,0,95],
[39,23,50,27,58,55,57,47,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,73,73,70,61,72,59,65],
[65,0,64,78,56,84,65,63,57,78],
[62,66,0,80,71,79,75,71,55,63],
[57,52,50,0,50,54,47,71,47,71],
[57,74,59,80,0,78,49,55,46,61],
[60,46,51,76,52,0,58,71,59,74],
[69,65,55,83,81,72,0,72,72,75],
[58,67,59,59,75,59,58,0,57,70],
[71,73,75,83,84,71,58,73,0,69],
[65,52,67,59,69,56,55,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,53,60,64,56,58,64,53,56],
[66,0,63,69,70,71,62,65,54,67],
[77,67,0,67,74,63,66,70,56,66],
[70,61,63,0,65,66,66,69,47,65],
[66,60,56,65,0,57,68,63,53,57],
[74,59,67,64,73,0,65,69,59,59],
[72,68,64,64,62,65,0,68,55,65],
[66,65,60,61,67,61,62,0,56,58],
[77,76,74,83,77,71,75,74,0,62],
[74,63,64,65,73,71,65,72,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,56,62,66,57,66,69,75,60],
[66,0,67,61,63,74,79,78,70,60],
[74,63,0,69,74,77,72,83,75,60],
[68,69,61,0,62,76,66,79,77,75],
[64,67,56,68,0,86,84,69,70,56],
[73,56,53,54,44,0,61,70,67,57],
[64,51,58,64,46,69,0,64,63,60],
[61,52,47,51,61,60,66,0,61,56],
[55,60,55,53,60,63,67,69,0,58],
[70,70,70,55,74,73,70,74,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,63,62,66,60,54,67,68,62],
[71,0,58,71,70,70,73,71,66,67],
[67,72,0,72,66,68,67,67,67,64],
[68,59,58,0,66,60,72,72,64,61],
[64,60,64,64,0,66,77,71,74,70],
[70,60,62,70,64,0,73,65,67,60],
[76,57,63,58,53,57,0,65,68,61],
[63,59,63,58,59,65,65,0,69,61],
[62,64,63,66,56,63,62,61,0,62],
[68,63,66,69,60,70,69,69,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,69,49,68,68,54,51,71],
[60,0,67,67,52,63,69,57,61,61],
[64,63,0,73,44,64,63,69,45,84],
[61,63,57,0,46,62,73,55,71,61],
[81,78,86,84,0,90,72,68,63,84],
[62,67,66,68,40,0,70,54,51,59],
[62,61,67,57,58,60,0,55,57,72],
[76,73,61,75,62,76,75,0,61,75],
[79,69,85,59,67,79,73,69,0,75],
[59,69,46,69,46,71,58,55,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,60,66,66,44,65,57,74,41],
[59,0,63,66,77,51,68,70,60,69],
[70,67,0,71,71,68,67,76,57,56],
[64,64,59,0,71,60,70,65,65,64],
[64,53,59,59,0,44,78,66,65,56],
[86,79,62,70,86,0,77,84,75,74],
[65,62,63,60,52,53,0,60,63,53],
[73,60,54,65,64,46,70,0,50,53],
[56,70,73,65,65,55,67,80,0,53],
[89,61,74,66,74,56,77,77,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,71,68,68,67,63,63,68,72],
[66,0,73,74,66,69,69,64,69,67],
[59,57,0,69,69,57,65,71,69,66],
[62,56,61,0,65,57,58,62,57,54],
[62,64,61,65,0,59,59,64,67,68],
[63,61,73,73,71,0,71,77,67,70],
[67,61,65,72,71,59,0,66,66,66],
[67,66,59,68,66,53,64,0,60,64],
[62,61,61,73,63,63,64,70,0,60],
[58,63,64,76,62,60,64,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,62,70,65,72,64,67,73,61],
[65,0,61,79,70,65,68,62,70,69],
[68,69,0,74,64,69,62,63,71,67],
[60,51,56,0,59,60,61,55,60,59],
[65,60,66,71,0,64,71,65,70,57],
[58,65,61,70,66,0,59,63,65,65],
[66,62,68,69,59,71,0,60,73,71],
[63,68,67,75,65,67,70,0,74,68],
[57,60,59,70,60,65,57,56,0,65],
[69,61,63,71,73,65,59,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,61,71,60,67,49,74,62,74],
[38,0,50,59,44,41,50,36,46,56],
[69,80,0,63,50,56,51,69,57,71],
[59,71,67,0,59,74,46,61,50,80],
[70,86,80,71,0,79,63,80,53,80],
[63,89,74,56,51,0,51,79,69,76],
[81,80,79,84,67,79,0,70,63,81],
[56,94,61,69,50,51,60,0,48,59],
[68,84,73,80,77,61,67,82,0,84],
[56,74,59,50,50,54,49,71,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,82,89,56,62,45,74,61],
[70,0,49,60,89,69,59,55,84,75],
[67,81,0,93,80,101,79,45,87,69],
[48,70,37,0,48,37,7,43,87,34],
[41,41,50,82,0,61,40,50,74,54],
[74,61,29,93,69,0,46,43,76,60],
[68,71,51,123,90,84,0,43,96,72],
[85,75,85,87,80,87,87,0,87,62],
[56,46,43,43,56,54,34,43,0,48],
[69,55,61,96,76,70,58,68,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,71,64,66,70,68,75,67],
[65,0,65,76,60,64,71,56,68,67],
[63,65,0,70,60,63,74,67,65,63],
[59,54,60,0,58,49,63,53,63,54],
[66,70,70,72,0,62,66,61,67,62],
[64,66,67,81,68,0,74,62,74,67],
[60,59,56,67,64,56,0,62,56,55],
[62,74,63,77,69,68,68,0,67,62],
[55,62,65,67,63,56,74,63,0,66],
[63,63,67,76,68,63,75,68,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,56,43,60,78,63,70,73,81],
[78,0,72,51,77,69,63,74,84,78],
[74,58,0,53,65,81,69,78,85,81],
[87,79,77,0,74,80,59,79,74,70],
[70,53,65,56,0,74,61,70,69,76],
[52,61,49,50,56,0,61,61,61,68],
[67,67,61,71,69,69,0,77,80,72],
[60,56,52,51,60,69,53,0,73,64],
[57,46,45,56,61,69,50,57,0,54],
[49,52,49,60,54,62,58,66,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,60,73,61,58,72,77,68],
[61,0,62,63,71,59,64,60,71,58],
[63,68,0,74,78,61,73,56,71,70],
[70,67,56,0,84,50,59,66,66,65],
[57,59,52,46,0,49,53,58,60,57],
[69,71,69,80,81,0,81,65,77,77],
[72,66,57,71,77,49,0,65,73,55],
[58,70,74,64,72,65,65,0,72,66],
[53,59,59,64,70,53,57,58,0,68],
[62,72,60,65,73,53,75,64,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,61,66,74,68,54,59,57,57],
[71,0,65,74,73,56,61,64,61,67],
[69,65,0,71,76,64,59,62,63,60],
[64,56,59,0,70,64,56,59,63,53],
[56,57,54,60,0,55,49,58,56,50],
[62,74,66,66,75,0,67,59,68,59],
[76,69,71,74,81,63,0,66,67,65],
[71,66,68,71,72,71,64,0,69,60],
[73,69,67,67,74,62,63,61,0,66],
[73,63,70,77,80,71,65,70,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,73,63,59,67,63,70,55,70],
[71,0,73,67,69,68,67,68,64,68],
[57,57,0,52,60,45,51,64,49,56],
[67,63,78,0,64,59,53,72,67,74],
[71,61,70,66,0,64,55,70,59,68],
[63,62,85,71,66,0,63,68,70,70],
[67,63,79,77,75,67,0,76,69,68],
[60,62,66,58,60,62,54,0,60,55],
[75,66,81,63,71,60,61,70,0,70],
[60,62,74,56,62,60,62,75,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,59,66,59,63,59,55,65,58],
[61,0,67,56,58,60,49,57,55,61],
[71,63,0,69,58,61,58,71,63,69],
[64,74,61,0,59,64,60,62,63,64],
[71,72,72,71,0,68,67,64,63,70],
[67,70,69,66,62,0,58,72,65,68],
[71,81,72,70,63,72,0,72,65,77],
[75,73,59,68,66,58,58,0,67,71],
[65,75,67,67,67,65,65,63,0,64],
[72,69,61,66,60,62,53,59,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,71,64,71,60,65,55,59,66],
[62,0,57,67,74,67,68,61,63,58],
[59,73,0,70,77,64,61,65,70,60],
[66,63,60,0,66,64,61,68,63,55],
[59,56,53,64,0,66,57,60,52,49],
[70,63,66,66,64,0,67,66,58,53],
[65,62,69,69,73,63,0,65,64,61],
[75,69,65,62,70,64,65,0,68,68],
[71,67,60,67,78,72,66,62,0,64],
[64,72,70,75,81,77,69,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,72,63,76,72,71,65,72],
[62,0,52,64,77,71,64,63,70,85],
[60,78,0,63,69,73,68,61,67,80],
[58,66,67,0,72,74,63,59,72,79],
[67,53,61,58,0,54,54,63,56,67],
[54,59,57,56,76,0,50,43,66,69],
[58,66,62,67,76,80,0,55,75,74],
[59,67,69,71,67,87,75,0,73,83],
[65,60,63,58,74,64,55,57,0,72],
[58,45,50,51,63,61,56,47,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,65,53,62,58,59,55,56,64],
[69,0,66,63,70,58,54,53,53,52],
[65,64,0,64,63,68,68,54,52,55],
[77,67,66,0,76,64,72,60,56,62],
[68,60,67,54,0,58,57,65,59,57],
[72,72,62,66,72,0,66,64,67,59],
[71,76,62,58,73,64,0,67,52,68],
[75,77,76,70,65,66,63,0,68,63],
[74,77,78,74,71,63,78,62,0,67],
[66,78,75,68,73,71,62,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,78,54,89,79,54,66,69,73],
[59,0,88,62,65,98,75,56,61,47],
[52,42,0,29,83,60,19,56,60,43],
[76,68,101,0,89,90,48,59,44,69],
[41,65,47,41,0,78,33,54,74,64],
[51,32,70,40,52,0,72,53,61,39],
[76,55,111,82,97,58,0,84,82,62],
[64,74,74,71,76,77,46,0,62,59],
[61,69,70,86,56,69,48,68,0,78],
[57,83,87,61,66,91,68,71,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,62,66,70,66,59,67,62],
[63,0,67,64,64,65,58,67,62,51],
[60,63,0,67,53,58,66,70,60,73],
[68,66,63,0,73,67,63,68,70,73],
[64,66,77,57,0,51,58,50,70,67],
[60,65,72,63,79,0,69,75,64,69],
[64,72,64,67,72,61,0,72,66,79],
[71,63,60,62,80,55,58,0,66,77],
[63,68,70,60,60,66,64,64,0,64],
[68,79,57,57,63,61,51,53,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,75,66,64,78,70,69,66,78],
[61,0,63,74,61,66,68,70,56,79],
[55,67,0,62,58,72,62,64,60,66],
[64,56,68,0,58,67,70,69,64,69],
[66,69,72,72,0,74,68,73,65,71],
[52,64,58,63,56,0,58,62,54,70],
[60,62,68,60,62,72,0,61,64,73],
[61,60,66,61,57,68,69,0,66,68],
[64,74,70,66,65,76,66,64,0,74],
[52,51,64,61,59,60,57,62,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,60,64,56,49,52,50,73,68],
[58,0,50,60,49,63,55,55,60,55],
[70,80,0,63,57,49,44,55,67,57],
[66,70,67,0,52,49,60,52,75,64],
[74,81,73,78,0,66,64,70,81,67],
[81,67,81,81,64,0,73,66,74,77],
[78,75,86,70,66,57,0,63,70,71],
[80,75,75,78,60,64,67,0,80,68],
[57,70,63,55,49,56,60,50,0,62],
[62,75,73,66,63,53,59,62,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,72,61,63,61,70,68,67,68],
[67,0,64,65,57,61,66,64,72,68],
[58,66,0,58,60,54,68,59,67,61],
[69,65,72,0,71,67,69,74,73,73],
[67,73,70,59,0,63,64,72,73,69],
[69,69,76,63,67,0,76,71,80,72],
[60,64,62,61,66,54,0,75,66,71],
[62,66,71,56,58,59,55,0,68,65],
[63,58,63,57,57,50,64,62,0,62],
[62,62,69,57,61,58,59,65,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,65,47,75,64,48,72,91,83],
[44,0,41,48,38,48,45,81,98,54],
[65,89,0,63,55,60,47,77,107,63],
[83,82,67,0,78,88,69,91,91,55],
[55,92,75,52,0,83,47,102,82,67],
[66,82,70,42,47,0,36,99,82,74],
[82,85,83,61,83,94,0,97,95,67],
[58,49,53,39,28,31,33,0,74,49],
[39,32,23,39,48,48,35,56,0,25],
[47,76,67,75,63,56,63,81,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,59,70,68,55,67,74,50,43],
[77,0,64,83,72,47,70,60,57,62],
[71,66,0,77,64,69,63,63,63,61],
[60,47,53,0,58,37,59,63,43,63],
[62,58,66,72,0,48,58,51,67,54],
[75,83,61,93,82,0,78,59,75,80],
[63,60,67,71,72,52,0,75,65,61],
[56,70,67,67,79,71,55,0,60,64],
[80,73,67,87,63,55,65,70,0,61],
[87,68,69,67,76,50,69,66,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,74,75,71,77,73,76,69,63],
[70,0,79,70,79,82,78,82,83,65],
[56,51,0,63,71,71,61,69,68,61],
[55,60,67,0,72,76,71,64,74,60],
[59,51,59,58,0,65,64,67,75,57],
[53,48,59,54,65,0,56,58,57,47],
[57,52,69,59,66,74,0,65,54,54],
[54,48,61,66,63,72,65,0,68,56],
[61,47,62,56,55,73,76,62,0,51],
[67,65,69,70,73,83,76,74,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,56,68,73,77,55,50,43,60],
[75,0,82,62,57,88,66,60,46,74],
[74,48,0,66,65,73,62,53,71,62],
[62,68,64,0,69,79,71,71,61,54],
[57,73,65,61,0,79,69,56,37,58],
[53,42,57,51,51,0,59,43,37,50],
[75,64,68,59,61,71,0,44,48,69],
[80,70,77,59,74,87,86,0,70,65],
[87,84,59,69,93,93,82,60,0,74],
[70,56,68,76,72,80,61,65,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,75,60,68,67,66,66,69,68],
[69,0,74,60,70,65,66,64,69,72],
[55,56,0,53,58,53,52,58,50,55],
[70,70,77,0,64,69,66,74,68,71],
[62,60,72,66,0,65,73,63,67,74],
[63,65,77,61,65,0,68,70,64,70],
[64,64,78,64,57,62,0,63,66,70],
[64,66,72,56,67,60,67,0,66,74],
[61,61,80,62,63,66,64,64,0,70],
[62,58,75,59,56,60,60,56,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,34,61,40,62,41,66,56,63],
[77,0,56,56,57,48,45,40,69,56],
[96,74,0,75,90,67,56,75,80,78],
[69,74,55,0,57,62,62,74,82,57],
[90,73,40,73,0,79,62,96,91,80],
[68,82,63,68,51,0,71,70,83,80],
[89,85,74,68,68,59,0,68,78,58],
[64,90,55,56,34,60,62,0,79,37],
[74,61,50,48,39,47,52,51,0,47],
[67,74,52,73,50,50,72,93,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,79,68,67,84,71,64,71,64],
[53,0,73,58,54,81,75,73,71,65],
[51,57,0,57,65,71,71,76,58,73],
[62,72,73,0,75,81,73,74,76,75],
[63,76,65,55,0,81,64,76,64,79],
[46,49,59,49,49,0,54,62,47,46],
[59,55,59,57,66,76,0,69,57,68],
[66,57,54,56,54,68,61,0,53,66],
[59,59,72,54,66,83,73,77,0,65],
[66,65,57,55,51,84,62,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,59,61,68,63,68,68,71,65],
[65,0,62,62,59,67,59,70,68,68],
[71,68,0,66,66,63,71,75,71,73],
[69,68,64,0,65,68,69,73,73,67],
[62,71,64,65,0,68,66,75,70,69],
[67,63,67,62,62,0,63,68,69,61],
[62,71,59,61,64,67,0,68,69,66],
[62,60,55,57,55,62,62,0,61,62],
[59,62,59,57,60,61,61,69,0,63],
[65,62,57,63,61,69,64,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,51,59,55,60,72,54,59],
[66,0,59,42,57,53,62,59,55,60],
[63,71,0,51,52,51,61,58,54,64],
[79,88,79,0,77,74,76,84,65,67],
[71,73,78,53,0,65,68,75,66,65],
[75,77,79,56,65,0,65,85,69,57],
[70,68,69,54,62,65,0,87,70,58],
[58,71,72,46,55,45,43,0,60,55],
[76,75,76,65,64,61,60,70,0,66],
[71,70,66,63,65,73,72,75,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,64,51,60,62,59,58,58,63],
[74,0,68,63,65,71,66,69,59,75],
[66,62,0,60,59,65,58,64,65,62],
[79,67,70,0,69,76,72,73,61,79],
[70,65,71,61,0,70,69,65,69,61],
[68,59,65,54,60,0,61,65,58,70],
[71,64,72,58,61,69,0,70,64,65],
[72,61,66,57,65,65,60,0,62,65],
[72,71,65,69,61,72,66,68,0,71],
[67,55,68,51,69,60,65,65,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,69,66,65,60,71,69,61,69],
[59,0,62,71,64,56,66,60,61,57],
[61,68,0,81,57,59,73,70,64,67],
[64,59,49,0,65,62,62,57,63,66],
[65,66,73,65,0,74,81,80,67,72],
[70,74,71,68,56,0,60,58,62,76],
[59,64,57,68,49,70,0,62,61,60],
[61,70,60,73,50,72,68,0,63,70],
[69,69,66,67,63,68,69,67,0,76],
[61,73,63,64,58,54,70,60,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,62,63,47,49,45,38,49,22],
[95,0,69,81,54,58,48,38,57,45],
[68,61,0,59,62,33,50,43,53,34],
[67,49,71,0,42,53,31,42,39,42],
[83,76,68,88,0,52,69,68,58,34],
[81,72,97,77,78,0,65,68,62,76],
[85,82,80,99,61,65,0,75,70,58],
[92,92,87,88,62,62,55,0,86,52],
[81,73,77,91,72,68,60,44,0,57],
[108,85,96,88,96,54,72,78,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,62,81,49,57,72,62,61,60],
[70,0,69,79,77,65,60,66,58,56],
[68,61,0,66,49,59,51,54,45,67],
[49,51,64,0,62,50,63,59,52,51],
[81,53,81,68,0,64,58,66,67,65],
[73,65,71,80,66,0,72,75,62,69],
[58,70,79,67,72,58,0,75,68,68],
[68,64,76,71,64,55,55,0,62,58],
[69,72,85,78,63,68,62,68,0,74],
[70,74,63,79,65,61,62,72,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,52,65,72,81,64,75,62,68],
[52,0,28,47,56,55,54,48,45,27],
[78,102,0,66,87,91,85,77,57,57],
[65,83,64,0,77,75,85,79,65,56],
[58,74,43,53,0,53,58,62,53,37],
[49,75,39,55,77,0,76,67,44,37],
[66,76,45,45,72,54,0,59,38,44],
[55,82,53,51,68,63,71,0,45,39],
[68,85,73,65,77,86,92,85,0,63],
[62,103,73,74,93,93,86,91,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,58,56,61,61,60,60,57,57],
[66,0,59,59,62,60,61,70,62,72],
[72,71,0,57,66,61,62,72,58,71],
[74,71,73,0,69,65,67,65,65,69],
[69,68,64,61,0,63,66,71,60,65],
[69,70,69,65,67,0,67,70,65,71],
[70,69,68,63,64,63,0,67,67,67],
[70,60,58,65,59,60,63,0,62,65],
[73,68,72,65,70,65,63,68,0,81],
[73,58,59,61,65,59,63,65,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,52,68,59,56,58,78,65,76],
[89,0,65,87,69,66,89,59,99,69],
[78,65,0,69,51,56,78,59,67,75],
[62,43,61,0,67,59,63,36,54,64],
[71,61,79,63,0,62,79,70,61,49],
[74,64,74,71,68,0,87,76,66,72],
[72,41,52,67,51,43,0,47,58,53],
[52,71,71,94,60,54,83,0,76,62],
[65,31,63,76,69,64,72,54,0,62],
[54,61,55,66,81,58,77,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,60,64,60,59,60,47,58,50],
[76,0,66,77,64,68,69,66,67,71],
[70,64,0,65,64,63,63,60,69,74],
[66,53,65,0,63,64,66,55,64,76],
[70,66,66,67,0,68,60,58,60,72],
[71,62,67,66,62,0,64,61,66,68],
[70,61,67,64,70,66,0,56,59,64],
[83,64,70,75,72,69,74,0,67,77],
[72,63,61,66,70,64,71,63,0,74],
[80,59,56,54,58,62,66,53,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,76,76,65,73,88,71,80,87],
[58,0,62,68,50,69,70,59,64,67],
[54,68,0,49,59,59,63,58,64,70],
[54,62,81,0,60,61,70,68,73,80],
[65,80,71,70,0,75,83,69,66,84],
[57,61,71,69,55,0,70,64,64,71],
[42,60,67,60,47,60,0,50,60,71],
[59,71,72,62,61,66,80,0,67,72],
[50,66,66,57,64,66,70,63,0,76],
[43,63,60,50,46,59,59,58,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,65,62,71,63,65,73,61,60],
[73,0,74,71,82,73,64,65,57,62],
[65,56,0,70,69,75,63,59,64,62],
[68,59,60,0,70,73,59,81,63,61],
[59,48,61,60,0,59,60,66,64,58],
[67,57,55,57,71,0,68,81,60,53],
[65,66,67,71,70,62,0,79,57,60],
[57,65,71,49,64,49,51,0,66,59],
[69,73,66,67,66,70,73,64,0,67],
[70,68,68,69,72,77,70,71,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,65,65,72,72,64,68,66,66],
[58,0,62,66,64,56,64,64,66,60],
[65,68,0,68,63,61,59,63,64,60],
[65,64,62,0,63,56,69,62,59,62],
[58,66,67,67,0,61,66,62,62,63],
[58,74,69,74,69,0,65,70,66,66],
[66,66,71,61,64,65,0,69,71,65],
[62,66,67,68,68,60,61,0,74,59],
[64,64,66,71,68,64,59,56,0,59],
[64,70,70,68,67,64,65,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,69,75,69,46,70,62,75,80],
[46,0,42,66,36,46,39,28,46,35],
[61,88,0,75,64,42,62,59,61,76],
[55,64,55,0,63,45,35,39,32,48],
[61,94,66,67,0,49,48,64,65,42],
[84,84,88,85,81,0,61,67,78,87],
[60,91,68,95,82,69,0,55,81,74],
[68,102,71,91,66,63,75,0,81,68],
[55,84,69,98,65,52,49,49,0,64],
[50,95,54,82,88,43,56,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,63,75,78,68,78,73,71,75],
[67,0,70,62,76,75,75,70,66,82],
[67,60,0,67,77,76,73,70,68,87],
[55,68,63,0,79,66,78,72,70,77],
[52,54,53,51,0,54,64,58,59,65],
[62,55,54,64,76,0,75,63,64,76],
[52,55,57,52,66,55,0,60,61,68],
[57,60,60,58,72,67,70,0,65,69],
[59,64,62,60,71,66,69,65,0,62],
[55,48,43,53,65,54,62,61,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,69,65,74,77,70,80,62,81],
[56,0,83,48,72,55,47,58,44,86],
[61,47,0,57,54,65,47,46,40,76],
[65,82,73,0,84,67,81,67,66,69],
[56,58,76,46,0,72,62,64,42,63],
[53,75,65,63,58,0,61,83,60,76],
[60,83,83,49,68,69,0,69,60,87],
[50,72,84,63,66,47,61,0,51,83],
[68,86,90,64,88,70,70,79,0,96],
[49,44,54,61,67,54,43,47,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,59,68,55,58,59,52,61,52],
[69,0,52,50,62,59,55,61,63,58],
[71,78,0,69,76,71,69,70,79,63],
[62,80,61,0,70,69,64,73,74,58],
[75,68,54,60,0,58,59,60,63,63],
[72,71,59,61,72,0,62,72,62,53],
[71,75,61,66,71,68,0,68,74,63],
[78,69,60,57,70,58,62,0,67,68],
[69,67,51,56,67,68,56,63,0,53],
[78,72,67,72,67,77,67,62,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,59,61,55,63,66,66,73,63],
[70,0,60,79,67,71,73,75,76,68],
[71,70,0,73,65,76,77,74,79,72],
[69,51,57,0,59,68,66,64,74,59],
[75,63,65,71,0,74,70,74,80,60],
[67,59,54,62,56,0,62,61,70,66],
[64,57,53,64,60,68,0,71,69,57],
[64,55,56,66,56,69,59,0,67,57],
[57,54,51,56,50,60,61,63,0,57],
[67,62,58,71,70,64,73,73,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,59,42,46,58,44,38,51,35],
[75,0,65,45,56,62,56,55,65,62],
[71,65,0,54,50,53,51,48,66,56],
[88,85,76,0,72,78,55,70,70,64],
[84,74,80,58,0,66,73,61,72,64],
[72,68,77,52,64,0,43,61,69,60],
[86,74,79,75,57,87,0,63,77,64],
[92,75,82,60,69,69,67,0,76,74],
[79,65,64,60,58,61,53,54,0,60],
[95,68,74,66,66,70,66,56,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,66,69,70,65,67,82,65],
[57,0,78,56,64,69,52,61,73,59],
[61,52,0,45,60,54,42,56,51,52],
[64,74,85,0,62,72,57,59,79,65],
[61,66,70,68,0,65,62,69,63,66],
[60,61,76,58,65,0,62,75,81,67],
[65,78,88,73,68,68,0,79,70,58],
[63,69,74,71,61,55,51,0,69,69],
[48,57,79,51,67,49,60,61,0,57],
[65,71,78,65,64,63,72,61,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,62,68,60,57,65,64,71],
[64,0,62,59,63,65,65,63,63,65],
[68,68,0,66,61,55,68,62,65,63],
[68,71,64,0,64,64,67,59,71,69],
[62,67,69,66,0,57,60,61,63,64],
[70,65,75,66,73,0,71,72,72,72],
[73,65,62,63,70,59,0,66,68,64],
[65,67,68,71,69,58,64,0,72,74],
[66,67,65,59,67,58,62,58,0,63],
[59,65,67,61,66,58,66,56,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,65,66,59,62,52,63,64,69],
[77,0,65,76,71,63,68,76,62,70],
[65,65,0,78,72,68,67,69,60,71],
[64,54,52,0,56,58,67,57,48,60],
[71,59,58,74,0,68,66,74,62,81],
[68,67,62,72,62,0,65,72,62,69],
[78,62,63,63,64,65,0,76,67,71],
[67,54,61,73,56,58,54,0,60,68],
[66,68,70,82,68,68,63,70,0,78],
[61,60,59,70,49,61,59,62,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,85,77,78,59,71,74,81,80],
[63,0,76,80,80,64,61,75,87,72],
[45,54,0,70,56,50,44,63,66,62],
[53,50,60,0,78,50,55,66,74,60],
[52,50,74,52,0,52,48,75,74,62],
[71,66,80,80,78,0,64,99,83,79],
[59,69,86,75,82,66,0,79,76,76],
[56,55,67,64,55,31,51,0,65,55],
[49,43,64,56,56,47,54,65,0,59],
[50,58,68,70,68,51,54,75,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,56,51,60,68,60,63,54,54],
[73,0,64,57,59,63,70,67,69,64],
[74,66,0,65,61,66,65,65,63,65],
[79,73,65,0,63,70,69,66,61,67],
[70,71,69,67,0,73,67,65,71,60],
[62,67,64,60,57,0,64,70,52,55],
[70,60,65,61,63,66,0,63,58,58],
[67,63,65,64,65,60,67,0,55,59],
[76,61,67,69,59,78,72,75,0,61],
[76,66,65,63,70,75,72,71,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,67,63,62,65,67,69,66,68],
[58,0,53,59,54,68,60,61,58,76],
[63,77,0,62,64,68,61,60,67,77],
[67,71,68,0,62,69,69,69,64,73],
[68,76,66,68,0,72,62,67,67,69],
[65,62,62,61,58,0,65,60,58,71],
[63,70,69,61,68,65,0,55,68,72],
[61,69,70,61,63,70,75,0,70,78],
[64,72,63,66,63,72,62,60,0,69],
[62,54,53,57,61,59,58,52,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,71,69,66,67,61,62,76,66],
[72,0,62,63,73,70,67,70,73,65],
[59,68,0,62,68,65,67,69,73,66],
[61,67,68,0,67,68,65,68,73,61],
[64,57,62,63,0,66,60,68,63,58],
[63,60,65,62,64,0,76,69,71,66],
[69,63,63,65,70,54,0,66,70,68],
[68,60,61,62,62,61,64,0,71,62],
[54,57,57,57,67,59,60,59,0,61],
[64,65,64,69,72,64,62,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,61,58,69,67,70,63,66,67],
[67,0,60,61,71,63,69,70,72,67],
[69,70,0,64,71,70,69,65,69,71],
[72,69,66,0,70,63,74,65,78,76],
[61,59,59,60,0,60,60,61,68,68],
[63,67,60,67,70,0,60,62,76,74],
[60,61,61,56,70,70,0,58,66,62],
[67,60,65,65,69,68,72,0,68,73],
[64,58,61,52,62,54,64,62,0,63],
[63,63,59,54,62,56,68,57,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,63,64,60,61,63,65,63,71],
[48,0,51,53,48,52,43,56,50,62],
[67,79,0,69,67,65,68,68,68,78],
[66,77,61,0,64,62,62,61,61,63],
[70,82,63,66,0,62,60,74,74,70],
[69,78,65,68,68,0,60,65,67,80],
[67,87,62,68,70,70,0,68,64,76],
[65,74,62,69,56,65,62,0,64,70],
[67,80,62,69,56,63,66,66,0,65],
[59,68,52,67,60,50,54,60,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,63,72,52,57,71,59,71,55],
[62,0,66,55,62,60,69,54,83,60],
[67,64,0,58,64,78,73,54,77,69],
[58,75,72,0,55,64,75,63,74,71],
[78,68,66,75,0,65,68,67,65,67],
[73,70,52,66,65,0,67,59,69,60],
[59,61,57,55,62,63,0,50,69,67],
[71,76,76,67,63,71,80,0,76,74],
[59,47,53,56,65,61,61,54,0,49],
[75,70,61,59,63,70,63,56,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,59,63,52,66,69,59,61,56],
[78,0,61,70,66,66,70,66,60,46],
[71,69,0,83,59,69,76,73,55,58],
[67,60,47,0,57,57,59,61,42,55],
[78,64,71,73,0,70,74,78,68,61],
[64,64,61,73,60,0,74,68,67,66],
[61,60,54,71,56,56,0,62,59,50],
[71,64,57,69,52,62,68,0,67,48],
[69,70,75,88,62,63,71,63,0,52],
[74,84,72,75,69,64,80,82,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,68,75,61,79,68,68,76,75],
[55,0,64,75,61,64,60,64,65,71],
[62,66,0,72,70,67,66,71,72,78],
[55,55,58,0,56,59,64,54,68,67],
[69,69,60,74,0,66,68,68,73,68],
[51,66,63,71,64,0,71,70,67,70],
[62,70,64,66,62,59,0,63,74,70],
[62,66,59,76,62,60,67,0,67,74],
[54,65,58,62,57,63,56,63,0,68],
[55,59,52,63,62,60,60,56,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,56,50,56,55,61,63,62,61],
[69,0,56,56,65,60,57,65,65,59],
[74,74,0,71,73,56,69,75,77,74],
[80,74,59,0,60,67,59,68,67,61],
[74,65,57,70,0,58,60,67,76,69],
[75,70,74,63,72,0,64,71,72,69],
[69,73,61,71,70,66,0,64,67,62],
[67,65,55,62,63,59,66,0,66,64],
[68,65,53,63,54,58,63,64,0,55],
[69,71,56,69,61,61,68,66,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,36,78,41,64,58,53,61,68],
[73,0,38,91,54,49,53,58,58,60],
[94,92,0,98,64,76,91,80,96,113],
[52,39,32,0,50,48,20,52,56,58],
[89,76,66,80,0,63,68,63,68,79],
[66,81,54,82,67,0,45,61,88,76],
[72,77,39,110,62,85,0,54,77,89],
[77,72,50,78,67,69,76,0,81,86],
[69,72,34,74,62,42,53,49,0,75],
[62,70,17,72,51,54,41,44,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,68,75,58,60,70,69,69,59],
[73,0,69,60,64,65,75,63,65,64],
[62,61,0,58,63,51,69,63,73,66],
[55,70,72,0,66,67,74,61,68,69],
[72,66,67,64,0,64,74,59,67,69],
[70,65,79,63,66,0,65,68,68,72],
[60,55,61,56,56,65,0,60,68,68],
[61,67,67,69,71,62,70,0,67,61],
[61,65,57,62,63,62,62,63,0,66],
[71,66,64,61,61,58,62,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,75,84,65,65,70,67,67,74],
[56,0,74,71,80,55,73,66,68,51],
[55,56,0,83,72,48,59,59,63,57],
[46,59,47,0,46,39,54,56,55,40],
[65,50,58,84,0,60,64,62,66,65],
[65,75,82,91,70,0,75,75,72,57],
[60,57,71,76,66,55,0,67,58,62],
[63,64,71,74,68,55,63,0,60,61],
[63,62,67,75,64,58,72,70,0,62],
[56,79,73,90,65,73,68,69,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,48,70,70,54,55,77,70,77],
[70,0,62,96,83,78,71,84,83,92],
[82,68,0,80,71,73,71,93,79,65],
[60,34,50,0,36,50,46,54,52,59],
[60,47,59,94,0,72,61,76,63,92],
[76,52,57,80,58,0,53,77,63,73],
[75,59,59,84,69,77,0,87,69,77],
[53,46,37,76,54,53,43,0,75,69],
[60,47,51,78,67,67,61,55,0,64],
[53,38,65,71,38,57,53,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,66,61,76,67,73,66,66,62],
[63,0,78,68,74,65,72,84,86,58],
[64,52,0,51,75,64,64,68,78,52],
[69,62,79,0,73,75,73,81,77,69],
[54,56,55,57,0,71,69,64,86,54],
[63,65,66,55,59,0,74,69,75,64],
[57,58,66,57,61,56,0,59,70,51],
[64,46,62,49,66,61,71,0,73,61],
[64,44,52,53,44,55,60,57,0,53],
[68,72,78,61,76,66,79,69,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,68,71,63,56,66,60,59],
[65,0,73,72,71,73,65,82,70,60],
[63,57,0,67,59,61,57,66,59,58],
[62,58,63,0,68,66,58,68,59,53],
[59,59,71,62,0,63,57,69,64,57],
[67,57,69,64,67,0,52,66,63,69],
[74,65,73,72,73,78,0,75,62,58],
[64,48,64,62,61,64,55,0,53,57],
[70,60,71,71,66,67,68,77,0,64],
[71,70,72,77,73,61,72,73,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,57,56,65,76,52,44,40,54],
[76,0,66,64,70,79,51,47,46,47],
[73,64,0,73,70,66,54,49,58,44],
[74,66,57,0,58,70,47,55,52,55],
[65,60,60,72,0,65,61,45,52,58],
[54,51,64,60,65,0,47,55,67,57],
[78,79,76,83,69,83,0,60,64,72],
[86,83,81,75,85,75,70,0,57,65],
[90,84,72,78,78,63,66,73,0,50],
[76,83,86,75,72,73,58,65,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,74,80,65,69,68,72,57,80],
[58,0,67,77,58,65,75,66,59,71],
[56,63,0,70,59,60,63,67,53,59],
[50,53,60,0,42,34,75,68,44,66],
[65,72,71,88,0,72,83,64,66,77],
[61,65,70,96,58,0,82,63,64,70],
[62,55,67,55,47,48,0,58,42,57],
[58,64,63,62,66,67,72,0,50,75],
[73,71,77,86,64,66,88,80,0,83],
[50,59,71,64,53,60,73,55,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,62,72,69,70,70,73,66,77],
[63,0,70,66,63,68,65,66,61,70],
[68,60,0,76,66,73,71,70,73,69],
[58,64,54,0,57,61,60,56,61,62],
[61,67,64,73,0,66,68,69,68,75],
[60,62,57,69,64,0,61,70,62,72],
[60,65,59,70,62,69,0,65,61,74],
[57,64,60,74,61,60,65,0,59,67],
[64,69,57,69,62,68,69,71,0,76],
[53,60,61,68,55,58,56,63,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,53,61,60,46,44,74,53,62],
[60,0,51,43,58,64,43,69,54,51],
[77,79,0,49,75,67,67,57,69,77],
[69,87,81,0,62,55,69,81,74,69],
[70,72,55,68,0,49,66,65,57,55],
[84,66,63,75,81,0,67,76,44,80],
[86,87,63,61,64,63,0,77,45,59],
[56,61,73,49,65,54,53,0,54,58],
[77,76,61,56,73,86,85,76,0,84],
[68,79,53,61,75,50,71,72,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,56,74,78,104,67,130,48,104],
[47,0,23,74,18,70,67,96,70,70],
[74,107,0,78,78,104,44,107,54,81],
[56,56,52,0,27,79,44,105,47,74],
[52,112,52,103,0,79,96,103,77,77],
[26,60,26,51,51,0,44,51,25,25],
[63,63,86,86,34,86,0,112,54,63],
[0,34,23,25,27,79,18,0,18,81],
[82,60,76,83,53,105,76,112,0,86],
[26,60,49,56,53,105,67,49,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,67,53,67,68,63,59,58],
[64,0,67,61,60,63,74,65,75,65],
[60,63,0,57,60,58,68,68,57,61],
[63,69,73,0,58,67,63,70,68,63],
[77,70,70,72,0,68,68,74,73,64],
[63,67,72,63,62,0,65,74,78,71],
[62,56,62,67,62,65,0,63,73,53],
[67,65,62,60,56,56,67,0,63,62],
[71,55,73,62,57,52,57,67,0,53],
[72,65,69,67,66,59,77,68,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,58,67,69,83,70,71,71,66],
[58,0,70,54,69,66,64,78,62,70],
[72,60,0,56,65,63,66,67,65,48],
[63,76,74,0,65,74,77,83,59,74],
[61,61,65,65,0,65,80,74,65,74],
[47,64,67,56,65,0,60,74,69,58],
[60,66,64,53,50,70,0,70,57,55],
[59,52,63,47,56,56,60,0,66,62],
[59,68,65,71,65,61,73,64,0,53],
[64,60,82,56,56,72,75,68,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,68,61,62,71,61,70,70,74],
[64,0,63,64,64,69,65,68,68,80],
[62,67,0,62,73,75,75,70,76,80],
[69,66,68,0,67,59,69,64,70,71],
[68,66,57,63,0,65,66,67,70,76],
[59,61,55,71,65,0,61,65,62,69],
[69,65,55,61,64,69,0,70,70,73],
[60,62,60,66,63,65,60,0,71,70],
[60,62,54,60,60,68,60,59,0,73],
[56,50,50,59,54,61,57,60,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,36,50,86,65,73,109,36,65],
[101,0,36,86,86,65,80,80,36,36],
[94,94,0,50,94,94,73,94,86,73],
[80,44,80,0,80,80,80,80,36,80],
[44,44,36,50,0,73,44,44,36,44],
[65,65,36,50,57,0,44,101,57,44],
[57,50,57,50,86,86,0,101,57,57],
[21,50,36,50,86,29,29,0,36,0],
[94,94,44,94,94,73,73,94,0,73],
[65,94,57,50,86,86,73,130,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,58,59,43,48,49,69,61,75],
[61,0,69,69,63,60,54,55,74,73],
[72,61,0,74,64,51,50,62,58,68],
[71,61,56,0,49,60,60,65,57,63],
[87,67,66,81,0,77,65,78,83,79],
[82,70,79,70,53,0,66,62,73,85],
[81,76,80,70,65,64,0,78,80,76],
[61,75,68,65,52,68,52,0,66,66],
[69,56,72,73,47,57,50,64,0,72],
[55,57,62,67,51,45,54,64,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,71,62,62,62,63,82,61],
[66,0,62,75,74,68,68,68,81,63],
[64,68,0,76,79,73,60,67,83,68],
[59,55,54,0,65,83,58,60,60,60],
[68,56,51,65,0,66,49,56,69,55],
[68,62,57,47,64,0,55,49,61,50],
[68,62,70,72,81,75,0,64,73,64],
[67,62,63,70,74,81,66,0,73,65],
[48,49,47,70,61,69,57,57,0,53],
[69,67,62,70,75,80,66,65,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,81,67,78,65,73,73,67,69],
[60,0,71,63,80,67,72,76,59,62],
[49,59,0,65,68,65,69,65,71,60],
[63,67,65,0,66,74,63,79,62,73],
[52,50,62,64,0,61,60,55,59,58],
[65,63,65,56,69,0,72,65,65,58],
[57,58,61,67,70,58,0,71,64,66],
[57,54,65,51,75,65,59,0,75,51],
[63,71,59,68,71,65,66,55,0,59],
[61,68,70,57,72,72,64,79,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,61,68,65,64,56,64,46],
[65,0,63,57,57,61,65,64,63,55],
[67,67,0,59,65,65,69,64,61,65],
[69,73,71,0,66,71,63,72,65,66],
[62,73,65,64,0,67,68,63,62,68],
[65,69,65,59,63,0,67,63,62,55],
[66,65,61,67,62,63,0,63,59,56],
[74,66,66,58,67,67,67,0,64,64],
[66,67,69,65,68,68,71,66,0,49],
[84,75,65,64,62,75,74,66,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,61,65,81,63,72,66,61,76],
[66,0,67,56,69,57,60,55,64,62],
[69,63,0,66,73,60,58,60,61,63],
[65,74,64,0,74,62,77,58,59,68],
[49,61,57,56,0,55,61,61,62,63],
[67,73,70,68,75,0,67,54,67,68],
[58,70,72,53,69,63,0,52,55,64],
[64,75,70,72,69,76,78,0,71,74],
[69,66,69,71,68,63,75,59,0,70],
[54,68,67,62,67,62,66,56,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,83,49,112,72,51,100,82,99],
[60,0,82,82,80,82,77,81,98,95],
[47,48,0,66,52,39,35,38,38,51],
[81,48,64,0,64,72,66,67,33,66],
[18,50,78,66,0,56,68,69,35,69],
[58,48,91,58,74,0,51,77,58,77],
[79,53,95,64,62,79,0,79,79,95],
[30,49,92,63,61,53,51,0,92,95],
[48,32,92,97,95,72,51,38,0,78],
[31,35,79,64,61,53,35,35,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,65,68,68,69,64,66,71,74],
[64,0,65,60,60,65,65,66,70,72],
[65,65,0,67,71,66,70,61,69,68],
[62,70,63,0,63,62,64,66,75,69],
[62,70,59,67,0,67,64,62,75,65],
[61,65,64,68,63,0,64,63,73,65],
[66,65,60,66,66,66,0,62,74,65],
[64,64,69,64,68,67,68,0,69,71],
[59,60,61,55,55,57,56,61,0,59],
[56,58,62,61,65,65,65,59,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,57,65,62,64,54,74,58,72],
[70,0,68,65,69,80,71,76,72,81],
[73,62,0,57,71,55,54,72,64,65],
[65,65,73,0,64,63,61,65,56,65],
[68,61,59,66,0,58,58,72,51,74],
[66,50,75,67,72,0,72,68,62,66],
[76,59,76,69,72,58,0,76,56,72],
[56,54,58,65,58,62,54,0,50,67],
[72,58,66,74,79,68,74,80,0,68],
[58,49,65,65,56,64,58,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,64,61,56,58,62,63,60,58],
[74,0,75,65,62,71,65,71,74,69],
[66,55,0,56,59,67,66,70,62,64],
[69,65,74,0,69,64,68,72,75,73],
[74,68,71,61,0,64,71,71,75,67],
[72,59,63,66,66,0,65,72,66,57],
[68,65,64,62,59,65,0,69,71,65],
[67,59,60,58,59,58,61,0,64,63],
[70,56,68,55,55,64,59,66,0,62],
[72,61,66,57,63,73,65,67,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,55,69,60,59,54,42,50,62],
[86,0,76,70,75,68,64,79,70,74],
[75,54,0,60,68,81,71,60,62,70],
[61,60,70,0,68,68,77,58,65,57],
[70,55,62,62,0,70,79,57,65,72],
[71,62,49,62,60,0,67,53,57,61],
[76,66,59,53,51,63,0,62,67,56],
[88,51,70,72,73,77,68,0,71,66],
[80,60,68,65,65,73,63,59,0,62],
[68,56,60,73,58,69,74,64,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,56,60,86,91,68,91,84,91],
[43,0,45,83,83,61,73,92,37,45],
[74,85,0,94,64,95,77,120,80,54],
[70,47,36,0,42,48,79,90,54,57],
[44,47,66,88,0,57,65,88,56,58],
[39,69,35,82,73,0,51,65,53,25],
[62,57,53,51,65,79,0,71,46,64],
[39,38,10,40,42,65,59,0,49,54],
[46,93,50,76,74,77,84,81,0,65],
[39,85,76,73,72,105,66,76,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,63,53,72,76,56,83,65,59],
[61,0,68,51,74,70,72,83,79,70],
[67,62,0,70,70,80,77,87,67,75],
[77,79,60,0,66,75,80,79,78,67],
[58,56,60,64,0,61,55,74,57,57],
[54,60,50,55,69,0,57,73,65,61],
[74,58,53,50,75,73,0,76,58,61],
[47,47,43,51,56,57,54,0,56,54],
[65,51,63,52,73,65,72,74,0,72],
[71,60,55,63,73,69,69,76,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,53,67,53,57,53,51,55,69],
[65,0,57,68,35,54,53,33,58,58],
[77,73,0,63,51,57,62,55,69,68],
[63,62,67,0,49,71,61,53,56,44],
[77,95,79,81,0,95,62,76,69,62],
[73,76,73,59,35,0,58,55,47,54],
[77,77,68,69,68,72,0,54,64,49],
[79,97,75,77,54,75,76,0,73,76],
[75,72,61,74,61,83,66,57,0,78],
[61,72,62,86,68,76,81,54,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,56,55,57,69,49,75,68,51],
[58,0,73,75,69,76,83,75,64,72],
[74,57,0,63,48,64,47,76,67,50],
[75,55,67,0,58,60,55,73,73,67],
[73,61,82,72,0,80,71,83,91,70],
[61,54,66,70,50,0,73,71,63,63],
[81,47,83,75,59,57,0,78,78,62],
[55,55,54,57,47,59,52,0,64,63],
[62,66,63,57,39,67,52,66,0,45],
[79,58,80,63,60,67,68,67,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,70,72,61,67,64,57,74,59],
[73,0,71,67,74,62,68,67,75,66],
[60,59,0,66,71,65,66,61,66,52],
[58,63,64,0,59,66,66,54,67,58],
[69,56,59,71,0,67,71,65,66,58],
[63,68,65,64,63,0,69,68,75,57],
[66,62,64,64,59,61,0,63,73,64],
[73,63,69,76,65,62,67,0,74,64],
[56,55,64,63,64,55,57,56,0,51],
[71,64,78,72,72,73,66,66,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,59,82,70,56,61,85,71,53],
[68,0,58,66,93,68,60,84,73,58],
[71,72,0,81,94,69,71,87,75,65],
[48,64,49,0,79,78,65,84,67,30],
[60,37,36,51,0,52,42,78,61,27],
[74,62,61,52,78,0,61,82,63,39],
[69,70,59,65,88,69,0,81,81,53],
[45,46,43,46,52,48,49,0,63,40],
[59,57,55,63,69,67,49,67,0,33],
[77,72,65,100,103,91,77,90,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,64,80,66,69,70,77,79,74],
[58,0,53,67,54,61,75,63,66,65],
[66,77,0,65,59,58,69,68,69,69],
[50,63,65,0,66,50,61,49,63,55],
[64,76,71,64,0,61,72,71,77,65],
[61,69,72,80,69,0,72,63,78,66],
[60,55,61,69,58,58,0,65,66,70],
[53,67,62,81,59,67,65,0,74,61],
[51,64,61,67,53,52,64,56,0,62],
[56,65,61,75,65,64,60,69,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,76,72,69,62,75,73,55,63],
[63,0,67,84,70,79,93,59,67,82],
[54,63,0,64,68,79,91,75,73,68],
[58,46,66,0,68,65,85,54,53,66],
[61,60,62,62,0,73,91,54,61,63],
[68,51,51,65,57,0,85,56,52,59],
[55,37,39,45,39,45,0,52,44,58],
[57,71,55,76,76,74,78,0,48,70],
[75,63,57,77,69,78,86,82,0,76],
[67,48,62,64,67,71,72,60,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,74,68,62,64,71,70,78],
[65,0,66,62,53,62,61,70,74,85],
[67,64,0,70,74,73,67,75,69,80],
[56,68,60,0,65,63,61,63,75,77],
[62,77,56,65,0,52,67,66,81,75],
[68,68,57,67,78,0,69,75,73,79],
[66,69,63,69,63,61,0,62,74,76],
[59,60,55,67,64,55,68,0,70,82],
[60,56,61,55,49,57,56,60,0,75],
[52,45,50,53,55,51,54,48,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,49,67,73,66,67,64,63,56],
[60,0,42,51,57,53,66,49,49,55],
[81,88,0,65,79,64,68,76,65,66],
[63,79,65,0,77,65,66,71,64,66],
[57,73,51,53,0,69,64,57,49,56],
[64,77,66,65,61,0,77,77,64,65],
[63,64,62,64,66,53,0,61,65,53],
[66,81,54,59,73,53,69,0,60,63],
[67,81,65,66,81,66,65,70,0,68],
[74,75,64,64,74,65,77,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,60,58,62,60,63,70,61],
[65,0,66,57,63,70,63,69,70,60],
[67,64,0,56,63,65,62,68,73,67],
[70,73,74,0,77,67,65,71,82,72],
[72,67,67,53,0,65,63,75,76,62],
[68,60,65,63,65,0,61,61,75,68],
[70,67,68,65,67,69,0,61,81,59],
[67,61,62,59,55,69,69,0,73,52],
[60,60,57,48,54,55,49,57,0,48],
[69,70,63,58,68,62,71,78,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,69,62,73,60,91,69,43,73],
[71,0,86,71,82,68,72,57,46,76],
[61,44,0,61,69,43,80,58,52,88],
[68,59,69,0,108,69,98,72,71,63],
[57,48,61,22,0,58,53,36,46,33],
[70,62,87,61,72,0,79,87,43,81],
[39,58,50,32,77,51,0,45,24,81],
[61,73,72,58,94,43,85,0,34,51],
[87,84,78,59,84,87,106,96,0,82],
[57,54,42,67,97,49,49,79,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,66,67,73,65,67,64,70,72],
[68,0,69,73,74,66,70,66,60,72],
[64,61,0,73,59,64,72,69,64,76],
[63,57,57,0,62,55,73,61,61,62],
[57,56,71,68,0,64,63,66,64,64],
[65,64,66,75,66,0,67,60,68,76],
[63,60,58,57,67,63,0,58,65,70],
[66,64,61,69,64,70,72,0,67,76],
[60,70,66,69,66,62,65,63,0,74],
[58,58,54,68,66,54,60,54,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,51,49,58,57,51,41,57,63],
[73,0,63,58,67,56,71,61,80,71],
[79,67,0,65,61,60,67,43,72,72],
[81,72,65,0,68,63,73,55,70,82],
[72,63,69,62,0,67,71,64,75,70],
[73,74,70,67,63,0,80,66,69,67],
[79,59,63,57,59,50,0,47,65,65],
[89,69,87,75,66,64,83,0,67,73],
[73,50,58,60,55,61,65,63,0,68],
[67,59,58,48,60,63,65,57,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,41,69,60,39,46,69,56,62],
[76,0,76,36,65,52,65,61,45,63],
[89,54,0,52,49,81,73,50,68,75],
[61,94,78,0,40,65,65,92,62,79],
[70,65,81,90,0,83,91,101,74,109],
[91,78,49,65,47,0,61,87,59,106],
[84,65,57,65,39,69,0,66,43,60],
[61,69,80,38,29,43,64,0,74,76],
[74,85,62,68,56,71,87,56,0,54],
[68,67,55,51,21,24,70,54,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,69,71,62,74,66,59,58,61],
[67,0,61,62,58,74,66,62,54,63],
[61,69,0,75,55,66,72,57,48,64],
[59,68,55,0,62,66,68,55,62,62],
[68,72,75,68,0,72,74,65,67,65],
[56,56,64,64,58,0,65,51,57,63],
[64,64,58,62,56,65,0,58,61,61],
[71,68,73,75,65,79,72,0,56,63],
[72,76,82,68,63,73,69,74,0,57],
[69,67,66,68,65,67,69,67,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,72,62,74,68,82,63,67,72],
[52,0,58,49,48,47,60,55,54,61],
[58,72,0,61,65,63,70,46,58,70],
[68,81,69,0,68,71,76,53,61,81],
[56,82,65,62,0,52,64,62,54,70],
[62,83,67,59,78,0,63,55,56,68],
[48,70,60,54,66,67,0,40,46,59],
[67,75,84,77,68,75,90,0,63,70],
[63,76,72,69,76,74,84,67,0,66],
[58,69,60,49,60,62,71,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,68,78,62,61,66,57,65,76],
[67,0,63,58,61,63,57,74,58,74],
[62,67,0,61,71,63,68,70,68,84],
[52,72,69,0,58,61,62,61,54,66],
[68,69,59,72,0,58,67,58,54,67],
[69,67,67,69,72,0,61,71,58,71],
[64,73,62,68,63,69,0,64,62,74],
[73,56,60,69,72,59,66,0,66,75],
[65,72,62,76,76,72,68,64,0,67],
[54,56,46,64,63,59,56,55,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,61,57,65,74,66,65,68],
[64,0,62,60,63,67,78,66,70,71],
[68,68,0,66,65,74,81,68,76,73],
[69,70,64,0,66,73,75,75,69,70],
[73,67,65,64,0,67,77,67,73,71],
[65,63,56,57,63,0,70,64,67,70],
[56,52,49,55,53,60,0,58,59,56],
[64,64,62,55,63,66,72,0,59,67],
[65,60,54,61,57,63,71,71,0,61],
[62,59,57,60,59,60,74,63,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,94,91,103,72,77,85,80,93],
[66,0,64,74,78,52,83,96,73,77],
[36,66,0,50,76,58,67,99,57,85],
[39,56,80,0,78,38,72,82,59,83],
[27,52,54,52,0,37,53,65,53,75],
[58,78,72,92,93,0,78,100,89,98],
[53,47,63,58,77,52,0,96,57,78],
[45,34,31,48,65,30,34,0,55,67],
[50,57,73,71,77,41,73,75,0,72],
[37,53,45,47,55,32,52,63,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,82,71,46,71,44,44,40,58],
[76,0,65,58,85,84,81,54,58,79],
[48,65,0,82,47,56,59,42,41,52],
[59,72,48,0,54,53,60,43,48,64],
[84,45,83,76,0,80,48,73,48,77],
[59,46,74,77,50,0,57,86,57,82],
[86,49,71,70,82,73,0,67,66,56],
[86,76,88,87,57,44,63,0,61,54],
[90,72,89,82,82,73,64,69,0,64],
[72,51,78,66,53,48,74,76,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,46,45,63,54,45,58,49,37],
[81,0,46,60,80,75,57,69,63,53],
[84,84,0,74,72,81,62,72,63,63],
[85,70,56,0,62,79,57,79,68,43],
[67,50,58,68,0,60,65,58,63,47],
[76,55,49,51,70,0,58,65,47,47],
[85,73,68,73,65,72,0,71,66,66],
[72,61,58,51,72,65,59,0,59,41],
[81,67,67,62,67,83,64,71,0,46],
[93,77,67,87,83,83,64,89,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,64,63,60,70,65,63,69,62],
[69,0,69,62,66,72,64,64,66,63],
[66,61,0,64,69,66,66,57,67,63],
[67,68,66,0,71,65,65,67,70,67],
[70,64,61,59,0,72,62,64,62,59],
[60,58,64,65,58,0,58,62,69,63],
[65,66,64,65,68,72,0,66,74,74],
[67,66,73,63,66,68,64,0,76,67],
[61,64,63,60,68,61,56,54,0,58],
[68,67,67,63,71,67,56,63,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,70,54,65,66,72,64,68,58],
[68,0,78,57,63,73,78,67,90,63],
[60,52,0,63,71,61,66,56,68,63],
[76,73,67,0,60,68,58,59,79,72],
[65,67,59,70,0,63,74,71,84,55],
[64,57,69,62,67,0,83,52,66,60],
[58,52,64,72,56,47,0,53,59,53],
[66,63,74,71,59,78,77,0,73,68],
[62,40,62,51,46,64,71,57,0,54],
[72,67,67,58,75,70,77,62,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,42,54,60,46,56,64,62],
[65,0,70,57,58,73,55,74,74,69],
[69,60,0,55,78,61,58,58,65,46],
[88,73,75,0,83,79,62,79,80,83],
[76,72,52,47,0,62,47,66,58,68],
[70,57,69,51,68,0,73,62,69,67],
[84,75,72,68,83,57,0,62,63,78],
[74,56,72,51,64,68,68,0,62,76],
[66,56,65,50,72,61,67,68,0,66],
[68,61,84,47,62,63,52,54,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,72,62,86,64,64,69,60,56],
[56,0,63,56,79,61,59,64,58,51],
[58,67,0,66,85,54,64,60,57,63],
[68,74,64,0,89,58,72,63,74,70],
[44,51,45,41,0,42,40,56,51,32],
[66,69,76,72,88,0,66,70,69,60],
[66,71,66,58,90,64,0,69,68,58],
[61,66,70,67,74,60,61,0,60,61],
[70,72,73,56,79,61,62,70,0,61],
[74,79,67,60,98,70,72,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,66,57,58,55,66,67,60],
[62,0,50,57,57,58,50,61,58,64],
[72,80,0,54,62,58,62,64,63,65],
[64,73,76,0,61,57,57,51,67,67],
[73,73,68,69,0,62,52,59,57,63],
[72,72,72,73,68,0,65,69,60,72],
[75,80,68,73,78,65,0,62,74,71],
[64,69,66,79,71,61,68,0,70,78],
[63,72,67,63,73,70,56,60,0,62],
[70,66,65,63,67,58,59,52,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,83,72,87,79,62,38,76,74],
[62,0,62,49,59,51,63,52,42,50],
[47,68,0,36,54,58,48,46,52,57],
[58,81,94,0,72,66,77,72,70,79],
[43,71,76,58,0,64,55,64,60,91],
[51,79,72,64,66,0,80,39,57,70],
[68,67,82,53,75,50,0,59,52,63],
[92,78,84,58,66,91,71,0,69,76],
[54,88,78,60,70,73,78,61,0,89],
[56,80,73,51,39,60,67,54,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,66,72,66,64,73,68,66,68],
[57,0,61,56,59,57,67,64,61,53],
[64,69,0,59,63,64,61,64,57,60],
[58,74,71,0,61,63,68,70,61,69],
[64,71,67,69,0,57,65,70,62,61],
[66,73,66,67,73,0,68,65,67,65],
[57,63,69,62,65,62,0,65,56,60],
[62,66,66,60,60,65,65,0,53,63],
[64,69,73,69,68,63,74,77,0,69],
[62,77,70,61,69,65,70,67,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,71,47,55,63,43,55,60],
[65,0,78,63,62,70,61,49,59,64],
[63,52,0,67,62,71,69,62,54,52],
[59,67,63,0,57,66,69,58,63,61],
[83,68,68,73,0,65,73,64,55,73],
[75,60,59,64,65,0,69,58,64,60],
[67,69,61,61,57,61,0,50,56,54],
[87,81,68,72,66,72,80,0,58,74],
[75,71,76,67,75,66,74,72,0,64],
[70,66,78,69,57,70,76,56,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,92,74,62,60,90,98,101,50],
[61,0,85,84,56,50,69,76,88,76],
[38,45,0,66,61,34,69,51,91,61],
[56,46,64,0,75,58,62,87,106,53],
[68,74,69,55,0,65,63,97,75,74],
[70,80,96,72,65,0,83,89,108,81],
[40,61,61,68,67,47,0,71,107,69],
[32,54,79,43,33,41,59,0,76,68],
[29,42,39,24,55,22,23,54,0,35],
[80,54,69,77,56,49,61,62,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,63,67,61,56,57,57,64],
[68,0,65,62,57,69,67,59,58,66],
[67,65,0,69,61,65,68,62,57,71],
[67,68,61,0,61,67,60,61,53,63],
[63,73,69,69,0,64,67,61,62,68],
[69,61,65,63,66,0,64,62,62,79],
[74,63,62,70,63,66,0,66,57,72],
[73,71,68,69,69,68,64,0,71,76],
[73,72,73,77,68,68,73,59,0,75],
[66,64,59,67,62,51,58,54,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,65,56,64,58,70,68,89,78],
[44,0,71,49,62,37,61,63,75,74],
[65,59,0,64,69,40,81,56,80,73],
[74,81,66,0,68,64,73,58,94,78],
[66,68,61,62,0,68,80,72,93,67],
[72,93,90,66,62,0,65,90,90,85],
[60,69,49,57,50,65,0,66,67,51],
[62,67,74,72,58,40,64,0,88,51],
[41,55,50,36,37,40,63,42,0,43],
[52,56,57,52,63,45,79,79,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,35,57,57,77,57,57,37,42],
[95,0,81,68,90,110,54,76,73,53],
[95,49,0,68,61,103,42,81,51,43],
[73,62,62,0,54,84,57,42,15,83],
[73,40,69,76,0,62,42,42,0,83],
[53,20,27,46,68,0,22,7,14,43],
[73,76,88,73,88,108,0,86,36,63],
[73,54,49,88,88,123,44,0,36,63],
[93,57,79,115,130,116,94,94,0,93],
[88,77,87,47,47,87,67,67,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,51,51,73,92,51,59,50,58],
[56,0,56,76,53,76,48,60,58,73],
[79,74,0,78,72,84,68,90,63,63],
[79,54,52,0,47,90,50,39,60,55],
[57,77,58,83,0,99,62,71,63,86],
[38,54,46,40,31,0,33,44,39,24],
[79,82,62,80,68,97,0,76,77,48],
[71,70,40,91,59,86,54,0,62,64],
[80,72,67,70,67,91,53,68,0,52],
[72,57,67,75,44,106,82,66,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,69,57,68,53,54,57,65,55],
[81,0,71,62,82,67,64,60,70,74],
[61,59,0,60,79,61,65,53,69,63],
[73,68,70,0,77,60,71,58,66,67],
[62,48,51,53,0,54,50,46,57,53],
[77,63,69,70,76,0,67,67,73,63],
[76,66,65,59,80,63,0,61,71,65],
[73,70,77,72,84,63,69,0,74,74],
[65,60,61,64,73,57,59,56,0,68],
[75,56,67,63,77,67,65,56,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,60,55,54,62,60,59,73,54],
[69,0,58,65,78,49,59,59,77,55],
[70,72,0,67,64,63,47,72,75,45],
[75,65,63,0,65,63,55,62,76,64],
[76,52,66,65,0,64,63,64,75,63],
[68,81,67,67,66,0,65,78,85,49],
[70,71,83,75,67,65,0,70,79,67],
[71,71,58,68,66,52,60,0,84,52],
[57,53,55,54,55,45,51,46,0,45],
[76,75,85,66,67,81,63,78,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,56,68,60,80,72,55,70,51],
[52,0,52,48,45,66,46,65,81,53],
[74,78,0,56,54,78,57,53,69,43],
[62,82,74,0,55,54,49,58,60,48],
[70,85,76,75,0,64,54,66,76,53],
[50,64,52,76,66,0,54,48,69,59],
[58,84,73,81,76,76,0,71,80,99],
[75,65,77,72,64,82,59,0,73,50],
[60,49,61,70,54,61,50,57,0,27],
[79,77,87,82,77,71,31,80,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,63,51,71,66,63,52,47,66],
[59,0,58,58,57,51,47,54,43,56],
[67,72,0,69,88,77,58,68,64,77],
[79,72,61,0,81,67,57,62,51,59],
[59,73,42,49,0,48,39,63,54,55],
[64,79,53,63,82,0,49,65,51,64],
[67,83,72,73,91,81,0,61,67,72],
[78,76,62,68,67,65,69,0,56,65],
[83,87,66,79,76,79,63,74,0,76],
[64,74,53,71,75,66,58,65,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,58,79,66,66,64,74,61,54],
[88,0,82,89,64,71,54,64,71,66],
[72,48,0,84,69,79,64,71,71,62],
[51,41,46,0,58,64,62,63,61,57],
[64,66,61,72,0,53,53,58,56,62],
[64,59,51,66,77,0,69,72,64,72],
[66,76,66,68,77,61,0,78,63,65],
[56,66,59,67,72,58,52,0,55,56],
[69,59,59,69,74,66,67,75,0,67],
[76,64,68,73,68,58,65,74,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,77,75,72,73,77,95,68,70],
[65,0,89,66,63,77,64,84,58,63],
[53,41,0,54,54,47,71,75,59,58],
[55,64,76,0,74,67,74,79,66,55],
[58,67,76,56,0,65,75,82,62,69],
[57,53,83,63,65,0,74,86,60,62],
[53,66,59,56,55,56,0,70,70,48],
[35,46,55,51,48,44,60,0,49,37],
[62,72,71,64,68,70,60,81,0,48],
[60,67,72,75,61,68,82,93,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,57,63,50,49,53,49,46,70],
[68,0,53,51,52,48,47,52,47,67],
[73,77,0,72,61,52,59,60,59,66],
[67,79,58,0,56,61,52,70,50,61],
[80,78,69,74,0,64,67,69,67,73],
[81,82,78,69,66,0,62,73,61,67],
[77,83,71,78,63,68,0,62,64,74],
[81,78,70,60,61,57,68,0,67,68],
[84,83,71,80,63,69,66,63,0,71],
[60,63,64,69,57,63,56,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,69,50,66,60,76,67,67,73],
[37,0,46,56,47,43,60,60,69,61],
[61,84,0,71,71,65,80,84,70,73],
[80,74,59,0,62,61,65,60,55,52],
[64,83,59,68,0,70,86,74,72,84],
[70,87,65,69,60,0,67,61,83,91],
[54,70,50,65,44,63,0,61,73,67],
[63,70,46,70,56,69,69,0,70,80],
[63,61,60,75,58,47,57,60,0,63],
[57,69,57,78,46,39,63,50,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,76,78,81,64,74,58,59,64],
[61,0,79,68,71,58,72,65,59,69],
[54,51,0,60,61,53,58,51,48,53],
[52,62,70,0,66,62,67,53,56,65],
[49,59,69,64,0,49,66,49,54,49],
[66,72,77,68,81,0,74,73,70,50],
[56,58,72,63,64,56,0,63,61,58],
[72,65,79,77,81,57,67,0,61,55],
[71,71,82,74,76,60,69,69,0,73],
[66,61,77,65,81,80,72,75,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,72,69,76,67,60,74,72],
[61,0,66,75,73,70,68,69,72,74],
[61,64,0,67,73,78,68,66,72,70],
[58,55,63,0,63,60,58,57,66,63],
[61,57,57,67,0,64,63,59,63,63],
[54,60,52,70,66,0,48,58,62,58],
[63,62,62,72,67,82,0,67,61,66],
[70,61,64,73,71,72,63,0,69,76],
[56,58,58,64,67,68,69,61,0,64],
[58,56,60,67,67,72,64,54,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,79,55,57,70,68,45,77,42],
[80,0,65,60,64,88,53,91,65,74],
[51,65,0,53,58,54,76,49,61,60],
[75,70,77,0,70,87,75,67,50,70],
[73,66,72,60,0,83,57,64,71,54],
[60,42,76,43,47,0,52,66,63,54],
[62,77,54,55,73,78,0,57,67,68],
[85,39,81,63,66,64,73,0,64,58],
[53,65,69,80,59,67,63,66,0,52],
[88,56,70,60,76,76,62,72,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,56,51,54,61,62,55,64,66],
[65,0,66,63,63,73,58,61,66,68],
[74,64,0,73,62,74,67,65,71,73],
[79,67,57,0,67,73,63,60,62,65],
[76,67,68,63,0,68,73,69,66,78],
[69,57,56,57,62,0,64,63,62,69],
[68,72,63,67,57,66,0,65,66,69],
[75,69,65,70,61,67,65,0,62,75],
[66,64,59,68,64,68,64,68,0,66],
[64,62,57,65,52,61,61,55,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,71,78,74,68,86,65,82,76],
[70,0,70,75,76,67,72,60,83,72],
[59,60,0,75,74,59,74,63,69,74],
[52,55,55,0,65,60,70,47,76,61],
[56,54,56,65,0,55,66,62,69,64],
[62,63,71,70,75,0,73,65,86,82],
[44,58,56,60,64,57,0,60,70,69],
[65,70,67,83,68,65,70,0,89,67],
[48,47,61,54,61,44,60,41,0,46],
[54,58,56,69,66,48,61,63,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,62,65,67,71,67,73,68],
[66,0,66,61,64,68,68,64,67,59],
[61,64,0,59,62,66,68,65,67,58],
[68,69,71,0,67,67,68,70,71,59],
[65,66,68,63,0,61,60,62,76,63],
[63,62,64,63,69,0,70,68,68,60],
[59,62,62,62,70,60,0,68,64,60],
[63,66,65,60,68,62,62,0,75,59],
[57,63,63,59,54,62,66,55,0,61],
[62,71,72,71,67,70,70,71,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,92,62,71,80,81,49,66,67],
[64,0,72,66,78,78,87,65,70,70],
[38,58,0,60,49,56,48,42,62,46],
[68,64,70,0,70,62,76,48,63,55],
[59,52,81,60,0,57,55,45,74,68],
[50,52,74,68,73,0,72,55,76,59],
[49,43,82,54,75,58,0,61,65,57],
[81,65,88,82,85,75,69,0,78,85],
[64,60,68,67,56,54,65,52,0,77],
[63,60,84,75,62,71,73,45,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,90,46,61,51,45,56,71,66],
[45,0,84,45,65,73,61,67,59,69],
[40,46,0,43,53,49,41,41,45,48],
[84,85,87,0,85,81,70,97,51,86],
[69,65,77,45,0,74,58,79,57,80],
[79,57,81,49,56,0,61,80,70,61],
[85,69,89,60,72,69,0,74,81,68],
[74,63,89,33,51,50,56,0,55,48],
[59,71,85,79,73,60,49,75,0,60],
[64,61,82,44,50,69,62,82,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,52,31,54,42,45,55,32,47],
[75,0,67,58,77,60,63,64,59,58],
[78,63,0,73,79,70,65,68,47,69],
[99,72,57,0,72,84,75,56,51,68],
[76,53,51,58,0,62,54,62,59,65],
[88,70,60,46,68,0,64,58,53,51],
[85,67,65,55,76,66,0,53,63,63],
[75,66,62,74,68,72,77,0,59,61],
[98,71,83,79,71,77,67,71,0,62],
[83,72,61,62,65,79,67,69,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,60,60,61,67,69,60,73],
[63,0,64,61,56,57,63,58,65,61],
[61,66,0,61,61,64,70,62,69,63],
[70,69,69,0,64,77,69,67,65,68],
[70,74,69,66,0,64,70,65,62,70],
[69,73,66,53,66,0,61,60,68,60],
[63,67,60,61,60,69,0,63,69,68],
[61,72,68,63,65,70,67,0,61,71],
[70,65,61,65,68,62,61,69,0,71],
[57,69,67,62,60,70,62,59,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,95,69,76,70,64,97,60,52],
[46,0,88,70,68,48,61,69,60,58],
[35,42,0,58,65,53,59,75,61,62],
[61,60,72,0,79,60,60,74,51,75],
[54,62,65,51,0,46,64,78,64,75],
[60,82,77,70,84,0,77,89,82,64],
[66,69,71,70,66,53,0,75,54,61],
[33,61,55,56,52,41,55,0,54,77],
[70,70,69,79,66,48,76,76,0,56],
[78,72,68,55,55,66,69,53,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,61,63,63,60,68,67,63],
[64,0,69,61,60,66,55,62,73,59],
[67,61,0,63,54,72,65,64,62,58],
[69,69,67,0,66,69,57,60,72,65],
[67,70,76,64,0,67,61,61,59,62],
[67,64,58,61,63,0,46,62,62,62],
[70,75,65,73,69,84,0,73,69,73],
[62,68,66,70,69,68,57,0,61,64],
[63,57,68,58,71,68,61,69,0,68],
[67,71,72,65,68,68,57,66,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,53,55,71,67,65,71,74,71],
[64,0,63,53,63,66,78,70,65,70],
[77,67,0,65,79,71,70,67,74,75],
[75,77,65,0,66,55,74,67,70,68],
[59,67,51,64,0,69,71,69,70,67],
[63,64,59,75,61,0,66,70,68,69],
[65,52,60,56,59,64,0,71,62,68],
[59,60,63,63,61,60,59,0,71,70],
[56,65,56,60,60,62,68,59,0,69],
[59,60,55,62,63,61,62,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,77,68,71,82,77,53,62,70],
[73,0,66,67,78,74,76,64,75,92],
[53,64,0,70,74,69,52,53,62,82],
[62,63,60,0,63,75,90,76,82,87],
[59,52,56,67,0,69,67,52,56,65],
[48,56,61,55,61,0,52,66,56,80],
[53,54,78,40,63,78,0,42,34,80],
[77,66,77,54,78,64,88,0,64,75],
[68,55,68,48,74,74,96,66,0,96],
[60,38,48,43,65,50,50,55,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,63,68,62,59,57,68,57,62],
[72,0,67,71,73,64,66,77,66,74],
[67,63,0,73,66,64,66,73,65,67],
[62,59,57,0,63,61,59,67,52,66],
[68,57,64,67,0,65,63,63,56,62],
[71,66,66,69,65,0,67,70,59,67],
[73,64,64,71,67,63,0,69,64,65],
[62,53,57,63,67,60,61,0,52,62],
[73,64,65,78,74,71,66,78,0,77],
[68,56,63,64,68,63,65,68,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,69,69,62,76,66,66,65],
[65,0,61,54,59,63,69,61,60,64],
[61,69,0,58,64,56,66,65,63,63],
[61,76,72,0,63,62,74,72,67,65],
[61,71,66,67,0,60,73,70,63,72],
[68,67,74,68,70,0,73,64,65,71],
[54,61,64,56,57,57,0,59,63,68],
[64,69,65,58,60,66,71,0,60,69],
[64,70,67,63,67,65,67,70,0,69],
[65,66,67,65,58,59,62,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,64,55,58,64,68,62,64,62],
[61,0,55,54,59,73,62,60,65,60],
[66,75,0,66,61,75,69,68,70,70],
[75,76,64,0,68,79,76,75,72,68],
[72,71,69,62,0,72,73,75,65,63],
[66,57,55,51,58,0,62,56,67,57],
[62,68,61,54,57,68,0,65,63,63],
[68,70,62,55,55,74,65,0,65,69],
[66,65,60,58,65,63,67,65,0,64],
[68,70,60,62,67,73,67,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,80,84,76,78,65,79,61,76],
[53,0,62,80,65,66,56,74,59,70],
[50,68,0,66,72,60,52,76,54,58],
[46,50,64,0,58,57,31,54,48,39],
[54,65,58,72,0,56,46,72,56,47],
[52,64,70,73,74,0,45,74,55,52],
[65,74,78,99,84,85,0,87,54,70],
[51,56,54,76,58,56,43,0,56,46],
[69,71,76,82,74,75,76,74,0,62],
[54,60,72,91,83,78,60,84,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,98,66,100,54,60,85,54,45],
[86,0,85,58,112,78,65,72,40,67],
[32,45,0,49,59,52,48,46,37,49],
[64,72,81,0,78,61,45,68,49,67],
[30,18,71,52,0,69,51,62,37,25],
[76,52,78,69,61,0,58,77,64,66],
[70,65,82,85,79,72,0,75,60,69],
[45,58,84,62,68,53,55,0,53,46],
[76,90,93,81,93,66,70,77,0,62],
[85,63,81,63,105,64,61,84,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,48,73,38,69,68,65,93],
[60,0,78,53,33,48,76,97,59,72],
[65,52,0,44,61,57,45,62,69,65],
[82,77,86,0,67,76,64,81,84,88],
[57,97,69,63,0,41,58,79,59,82],
[92,82,73,54,89,0,76,97,50,70],
[61,54,85,66,72,54,0,66,72,79],
[62,33,68,49,51,33,64,0,49,52],
[65,71,61,46,71,80,58,81,0,71],
[37,58,65,42,48,60,51,78,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,67,67,89,73,65,70,63],
[61,0,58,49,66,69,63,64,86,71],
[65,72,0,56,57,67,66,60,60,67],
[63,81,74,0,72,75,77,63,80,79],
[63,64,73,58,0,74,73,58,74,73],
[41,61,63,55,56,0,71,63,64,58],
[57,67,64,53,57,59,0,60,70,70],
[65,66,70,67,72,67,70,0,76,73],
[60,44,70,50,56,66,60,54,0,70],
[67,59,63,51,57,72,60,57,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,77,69,62,54,71,64,62,59],
[47,0,74,61,72,55,59,62,62,61],
[53,56,0,52,61,59,49,60,49,46],
[61,69,78,0,64,57,68,63,53,56],
[68,58,69,66,0,60,62,65,64,55],
[76,75,71,73,70,0,64,79,66,66],
[59,71,81,62,68,66,0,77,66,65],
[66,68,70,67,65,51,53,0,62,54],
[68,68,81,77,66,64,64,68,0,64],
[71,69,84,74,75,64,65,76,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,40,29,69,31,25,57,47,68],
[74,0,14,19,44,63,38,54,57,59],
[90,116,0,52,43,76,69,76,66,67],
[101,111,78,0,86,70,107,71,59,64],
[61,86,87,44,0,45,60,91,55,83],
[99,67,54,60,85,0,71,67,53,84],
[105,92,61,23,70,59,0,60,69,84],
[73,76,54,59,39,63,70,0,76,85],
[83,73,64,71,75,77,61,54,0,79],
[62,71,63,66,47,46,46,45,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,73,66,72,72,67,80,77,68],
[68,0,71,76,71,85,78,69,80,65],
[57,59,0,66,49,86,64,80,68,59],
[64,54,64,0,67,69,66,75,74,70],
[58,59,81,63,0,80,66,60,69,72],
[58,45,44,61,50,0,47,68,65,51],
[63,52,66,64,64,83,0,72,75,60],
[50,61,50,55,70,62,58,0,68,56],
[53,50,62,56,61,65,55,62,0,59],
[62,65,71,60,58,79,70,74,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,66,62,75,69,70,63,73,68],
[58,0,56,63,64,62,63,69,67,70],
[64,74,0,61,66,67,68,64,63,68],
[68,67,69,0,66,68,79,61,70,70],
[55,66,64,64,0,59,60,53,64,56],
[61,68,63,62,71,0,70,69,64,66],
[60,67,62,51,70,60,0,51,68,67],
[67,61,66,69,77,61,79,0,68,68],
[57,63,67,60,66,66,62,62,0,66],
[62,60,62,60,74,64,63,62,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,85,73,69,69,73,72,83,70],
[73,0,95,75,67,64,57,69,71,62],
[45,35,0,64,50,47,59,69,67,58],
[57,55,66,0,69,58,65,63,66,71],
[61,63,80,61,0,53,45,72,75,69],
[61,66,83,72,77,0,83,80,91,70],
[57,73,71,65,85,47,0,74,59,85],
[58,61,61,67,58,50,56,0,62,76],
[47,59,63,64,55,39,71,68,0,78],
[60,68,72,59,61,60,45,54,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,57,63,68,60,76,59,70],
[61,0,68,66,60,72,68,64,68,65],
[59,62,0,50,62,61,56,49,62,57],
[73,64,80,0,73,80,70,70,65,74],
[67,70,68,57,0,68,67,68,62,63],
[62,58,69,50,62,0,56,56,64,61],
[70,62,74,60,63,74,0,67,72,66],
[54,66,81,60,62,74,63,0,66,64],
[71,62,68,65,68,66,58,64,0,62],
[60,65,73,56,67,69,64,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,72,70,76,77,66,60,55,60],
[54,0,66,70,44,57,50,67,60,51],
[58,64,0,75,50,71,68,59,77,60],
[60,60,55,0,69,64,65,53,58,67],
[54,86,80,61,0,68,59,81,60,36],
[53,73,59,66,62,0,37,61,57,38],
[64,80,62,65,71,93,0,62,75,55],
[70,63,71,77,49,69,68,0,65,58],
[75,70,53,72,70,73,55,65,0,42],
[70,79,70,63,94,92,75,72,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,71,66,68,67,71,69,79,58],
[55,0,56,57,57,56,59,51,60,57],
[59,74,0,58,56,64,72,66,66,58],
[64,73,72,0,75,69,72,70,80,68],
[62,73,74,55,0,63,67,67,66,63],
[63,74,66,61,67,0,66,71,81,59],
[59,71,58,58,63,64,0,61,73,68],
[61,79,64,60,63,59,69,0,67,57],
[51,70,64,50,64,49,57,63,0,59],
[72,73,72,62,67,71,62,73,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,74,76,78,73,71,63,64,68],
[63,0,62,67,66,60,63,66,67,65],
[56,68,0,66,53,74,62,68,53,73],
[54,63,64,0,42,59,75,52,62,75],
[52,64,77,88,0,72,70,57,63,70],
[57,70,56,71,58,0,63,61,65,56],
[59,67,68,55,60,67,0,62,69,68],
[67,64,62,78,73,69,68,0,72,70],
[66,63,77,68,67,65,61,58,0,63],
[62,65,57,55,60,74,62,60,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,58,61,64,78,61,63,51,56],
[82,0,69,83,74,87,73,74,73,61],
[72,61,0,73,76,88,86,77,65,69],
[69,47,57,0,73,85,75,68,69,75],
[66,56,54,57,0,56,59,54,49,57],
[52,43,42,45,74,0,57,47,51,59],
[69,57,44,55,71,73,0,52,53,52],
[67,56,53,62,76,83,78,0,49,63],
[79,57,65,61,81,79,77,81,0,77],
[74,69,61,55,73,71,78,67,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,61,66,62,63,69,61,57,59],
[61,0,56,59,57,56,62,62,60,51],
[69,74,0,68,64,69,80,73,68,67],
[64,71,62,0,60,69,69,64,63,56],
[68,73,66,70,0,75,75,65,69,68],
[67,74,61,61,55,0,64,59,58,54],
[61,68,50,61,55,66,0,56,63,53],
[69,68,57,66,65,71,74,0,63,63],
[73,70,62,67,61,72,67,67,0,61],
[71,79,63,74,62,76,77,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,72,92,64,103,82,97,79,87],
[71,0,58,69,91,75,71,83,83,78],
[58,72,0,65,75,92,83,95,80,83],
[38,61,65,0,52,60,83,90,55,77],
[66,39,55,78,0,79,73,81,64,84],
[27,55,38,70,51,0,62,68,49,67],
[48,59,47,47,57,68,0,70,45,67],
[33,47,35,40,49,62,60,0,44,65],
[51,47,50,75,66,81,85,86,0,75],
[43,52,47,53,46,63,63,65,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,19,39,39,21,62,67,40,44],
[64,0,30,46,55,57,48,51,29,35],
[111,100,0,93,91,66,95,82,92,57],
[91,84,37,0,65,47,71,66,78,65],
[91,75,39,65,0,55,69,60,54,65],
[109,73,64,83,75,0,56,83,78,89],
[68,82,35,59,61,74,0,65,46,65],
[63,79,48,64,70,47,65,0,51,43],
[90,101,38,52,76,52,84,79,0,53],
[86,95,73,65,65,41,65,87,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,66,67,59,60,58,58,75,65],
[72,0,77,73,60,80,57,81,85,69],
[64,53,0,57,60,57,58,64,79,61],
[63,57,73,0,61,66,64,71,84,61],
[71,70,70,69,0,67,64,74,84,63],
[70,50,73,64,63,0,68,71,86,65],
[72,73,72,66,66,62,0,74,87,67],
[72,49,66,59,56,59,56,0,72,53],
[55,45,51,46,46,44,43,58,0,46],
[65,61,69,69,67,65,63,77,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,88,88,85,66,61,76,72,78],
[42,0,51,52,54,50,49,57,32,41],
[42,79,0,62,64,72,55,76,50,63],
[42,78,68,0,60,60,67,75,56,65],
[45,76,66,70,0,67,58,73,72,70],
[64,80,58,70,63,0,59,55,60,66],
[69,81,75,63,72,71,0,90,78,70],
[54,73,54,55,57,75,40,0,60,58],
[58,98,80,74,58,70,52,70,0,63],
[52,89,67,65,60,64,60,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,69,69,61,72,68,74,66,71],
[54,0,72,65,59,71,70,64,67,65],
[61,58,0,58,49,63,64,50,63,62],
[61,65,72,0,59,74,65,62,68,59],
[69,71,81,71,0,73,71,63,73,62],
[58,59,67,56,57,0,57,56,56,62],
[62,60,66,65,59,73,0,70,62,61],
[56,66,80,68,67,74,60,0,66,74],
[64,63,67,62,57,74,68,64,0,59],
[59,65,68,71,68,68,69,56,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,74,76,58,52,66,75,81,68],
[64,0,80,70,83,77,71,68,73,106],
[56,50,0,61,40,52,79,63,82,54],
[54,60,69,0,64,59,60,66,78,78],
[72,47,90,66,0,66,79,71,83,84],
[78,53,78,71,64,0,71,72,87,78],
[64,59,51,70,51,59,0,64,64,76],
[55,62,67,64,59,58,66,0,67,70],
[49,57,48,52,47,43,66,63,0,68],
[62,24,76,52,46,52,54,60,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,66,50,63,72,67,70,61,69],
[86,0,72,62,81,78,68,68,56,69],
[64,58,0,55,56,59,76,62,63,53],
[80,68,75,0,74,62,65,79,73,78],
[67,49,74,56,0,66,63,50,61,58],
[58,52,71,68,64,0,69,87,65,66],
[63,62,54,65,67,61,0,57,53,61],
[60,62,68,51,80,43,73,0,56,67],
[69,74,67,57,69,65,77,74,0,69],
[61,61,77,52,72,64,69,63,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,74,71,78,65,69,63,70,70],
[51,0,56,54,59,58,58,57,61,59],
[56,74,0,74,69,71,64,70,68,64],
[59,76,56,0,63,60,62,53,73,72],
[52,71,61,67,0,70,59,74,63,68],
[65,72,59,70,60,0,71,65,65,64],
[61,72,66,68,71,59,0,68,68,74],
[67,73,60,77,56,65,62,0,67,58],
[60,69,62,57,67,65,62,63,0,74],
[60,71,66,58,62,66,56,72,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,50,78,58,56,68,78,65,73],
[29,0,51,61,41,40,48,67,40,34],
[80,79,0,68,62,57,79,74,61,63],
[52,69,62,0,50,55,63,70,58,51],
[72,89,68,80,0,64,74,84,75,86],
[74,90,73,75,66,0,75,81,72,62],
[62,82,51,67,56,55,0,74,66,49],
[52,63,56,60,46,49,56,0,49,39],
[65,90,69,72,55,58,64,81,0,44],
[57,96,67,79,44,68,81,91,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,48,71,56,53,57,54,66,67],
[64,0,49,70,73,58,67,61,66,74],
[82,81,0,87,75,67,64,71,67,92],
[59,60,43,0,55,48,60,53,49,61],
[74,57,55,75,0,71,75,62,60,67],
[77,72,63,82,59,0,70,72,70,77],
[73,63,66,70,55,60,0,48,63,74],
[76,69,59,77,68,58,82,0,74,83],
[64,64,63,81,70,60,67,56,0,74],
[63,56,38,69,63,53,56,47,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,59,71,72,70,57,58,64,75],
[41,0,55,70,55,62,48,61,50,71],
[71,75,0,71,58,75,60,56,61,82],
[59,60,59,0,57,81,72,62,57,75],
[58,75,72,73,0,74,75,60,68,74],
[60,68,55,49,56,0,61,49,59,75],
[73,82,70,58,55,69,0,59,65,85],
[72,69,74,68,70,81,71,0,50,83],
[66,80,69,73,62,71,65,80,0,76],
[55,59,48,55,56,55,45,47,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,56,71,82,54,70,59,76],
[64,0,70,63,72,73,69,75,59,73],
[64,60,0,65,77,60,53,67,58,72],
[74,67,65,0,74,67,56,69,59,80],
[59,58,53,56,0,72,51,66,59,57],
[48,57,70,63,58,0,57,59,55,67],
[76,61,77,74,79,73,0,74,64,79],
[60,55,63,61,64,71,56,0,66,71],
[71,71,72,71,71,75,66,64,0,79],
[54,57,58,50,73,63,51,59,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,59,58,58,58,59,57,68,55],
[76,0,65,59,82,54,59,63,57,58],
[71,65,0,52,60,41,67,60,57,49],
[72,71,78,0,67,53,72,61,74,71],
[72,48,70,63,0,53,56,50,60,63],
[72,76,89,77,77,0,73,61,63,69],
[71,71,63,58,74,57,0,69,65,64],
[73,67,70,69,80,69,61,0,75,72],
[62,73,73,56,70,67,65,55,0,68],
[75,72,81,59,67,61,66,58,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,62,67,61,69,59,60,59,55],
[62,0,57,67,60,67,59,55,54,50],
[68,73,0,77,59,71,66,68,61,59],
[63,63,53,0,60,68,57,57,60,62],
[69,70,71,70,0,75,72,61,68,57],
[61,63,59,62,55,0,49,59,52,51],
[71,71,64,73,58,81,0,66,65,63],
[70,75,62,73,69,71,64,0,65,55],
[71,76,69,70,62,78,65,65,0,66],
[75,80,71,68,73,79,67,75,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,67,71,60,75,58,63,67,64],
[74,0,67,66,55,69,59,78,76,73],
[63,63,0,68,67,75,70,70,64,61],
[59,64,62,0,66,60,69,69,68,61],
[70,75,63,64,0,69,72,75,67,62],
[55,61,55,70,61,0,64,65,71,61],
[72,71,60,61,58,66,0,68,65,65],
[67,52,60,61,55,65,62,0,72,53],
[63,54,66,62,63,59,65,58,0,59],
[66,57,69,69,68,69,65,77,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,63,69,63,64,66,63,61,68],
[61,0,56,53,63,54,70,56,57,59],
[67,74,0,65,66,80,71,62,58,60],
[61,77,65,0,63,67,73,61,65,66],
[67,67,64,67,0,73,65,65,60,66],
[66,76,50,63,57,0,69,57,63,64],
[64,60,59,57,65,61,0,61,56,54],
[67,74,68,69,65,73,69,0,66,62],
[69,73,72,65,70,67,74,64,0,60],
[62,71,70,64,64,66,76,68,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,62,64,67,67,63,70,56,70],
[61,0,61,67,55,64,61,71,58,68],
[68,69,0,71,67,72,69,74,64,72],
[66,63,59,0,66,65,68,76,61,73],
[63,75,63,64,0,71,69,72,73,75],
[63,66,58,65,59,0,68,74,67,71],
[67,69,61,62,61,62,0,72,63,64],
[60,59,56,54,58,56,58,0,59,60],
[74,72,66,69,57,63,67,71,0,65],
[60,62,58,57,55,59,66,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,68,59,65,76,62,71,72,71],
[70,0,62,53,68,65,64,70,71,67],
[62,68,0,53,62,63,65,62,70,80],
[71,77,77,0,72,63,70,67,82,74],
[65,62,68,58,0,68,65,66,72,70],
[54,65,67,67,62,0,64,64,72,68],
[68,66,65,60,65,66,0,59,62,70],
[59,60,68,63,64,66,71,0,62,71],
[58,59,60,48,58,58,68,68,0,63],
[59,63,50,56,60,62,60,59,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,42,79,45,57,72,76,73,72],
[66,0,65,74,68,61,75,76,76,63],
[88,65,0,83,61,69,56,79,77,71],
[51,56,47,0,55,45,60,75,68,76],
[85,62,69,75,0,53,58,68,80,74],
[73,69,61,85,77,0,64,78,80,81],
[58,55,74,70,72,66,0,81,76,77],
[54,54,51,55,62,52,49,0,71,64],
[57,54,53,62,50,50,54,59,0,63],
[58,67,59,54,56,49,53,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,58,71,62,64,71,66,59,71],
[65,0,59,65,62,62,63,76,63,71],
[72,71,0,76,65,68,74,69,67,71],
[59,65,54,0,55,62,64,57,59,61],
[68,68,65,75,0,68,67,66,68,68],
[66,68,62,68,62,0,65,62,68,63],
[59,67,56,66,63,65,0,62,59,66],
[64,54,61,73,64,68,68,0,69,65],
[71,67,63,71,62,62,71,61,0,69],
[59,59,59,69,62,67,64,65,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,63,60,73,82,71,72,68,57],
[67,0,70,59,71,81,90,67,53,68],
[67,60,0,51,54,67,59,56,60,59],
[70,71,79,0,71,83,77,79,79,63],
[57,59,76,59,0,76,80,52,68,62],
[48,49,63,47,54,0,65,58,59,57],
[59,40,71,53,50,65,0,59,45,54],
[58,63,74,51,78,72,71,0,63,70],
[62,77,70,51,62,71,85,67,0,55],
[73,62,71,67,68,73,76,60,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,65,65,62,71,66,67,61],
[68,0,69,60,59,71,70,56,59,64],
[67,61,0,65,60,71,71,61,63,64],
[65,70,65,0,54,62,62,54,62,54],
[65,71,70,76,0,60,72,60,62,66],
[68,59,59,68,70,0,65,57,64,62],
[59,60,59,68,58,65,0,64,67,57],
[64,74,69,76,70,73,66,0,75,68],
[63,71,67,68,68,66,63,55,0,66],
[69,66,66,76,64,68,73,62,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,54,56,70,45,60,52,75,62],
[58,0,63,73,61,51,69,49,68,76],
[76,67,0,78,69,72,61,69,75,53],
[74,57,52,0,61,47,67,52,65,49],
[60,69,61,69,0,42,55,62,55,51],
[85,79,58,83,88,0,71,77,76,79],
[70,61,69,63,75,59,0,66,81,50],
[78,81,61,78,68,53,64,0,75,76],
[55,62,55,65,75,54,49,55,0,56],
[68,54,77,81,79,51,80,54,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,78,66,69,64,68,82,63,64],
[72,0,80,60,60,60,79,67,65,57],
[52,50,0,63,57,59,74,69,63,51],
[64,70,67,0,80,78,83,75,76,61],
[61,70,73,50,0,58,79,60,63,58],
[66,70,71,52,72,0,77,64,64,65],
[62,51,56,47,51,53,0,60,60,56],
[48,63,61,55,70,66,70,0,72,49],
[67,65,67,54,67,66,70,58,0,54],
[66,73,79,69,72,65,74,81,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,75,67,63,71,67,68,60,76],
[69,0,70,71,64,61,70,71,67,79],
[55,60,0,63,55,58,51,56,46,52],
[63,59,67,0,60,56,58,61,61,70],
[67,66,75,70,0,77,78,70,65,73],
[59,69,72,74,53,0,66,65,58,73],
[63,60,79,72,52,64,0,69,52,72],
[62,59,74,69,60,65,61,0,50,63],
[70,63,84,69,65,72,78,80,0,76],
[54,51,78,60,57,57,58,67,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,69,110,83,65,130,78,63,49],
[79,0,99,79,99,52,99,79,79,110],
[61,31,0,92,45,45,110,78,63,31],
[20,51,38,0,51,65,116,98,69,69],
[47,31,85,79,0,34,116,47,110,96],
[65,78,85,65,96,0,116,65,96,96],
[0,31,20,14,14,14,0,0,32,31],
[52,51,52,32,83,65,130,0,83,83],
[67,51,67,61,20,34,98,47,0,51],
[81,20,99,61,34,34,99,47,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,109,109,63,95,29,61,61,64],
[52,0,106,74,52,86,70,54,92,52],
[21,24,0,41,27,41,29,41,27,36],
[21,56,89,0,19,23,39,23,27,38],
[67,78,103,111,0,112,77,78,56,70],
[35,44,89,107,18,0,61,80,41,53],
[101,60,101,91,53,69,0,43,108,70],
[69,76,89,107,52,50,87,0,76,53],
[69,38,103,103,74,89,22,54,0,69],
[66,78,94,92,60,77,60,77,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,74,64,61,55,71,70,61,69],
[66,0,85,78,64,69,70,76,73,70],
[56,45,0,58,58,52,50,59,57,59],
[66,52,72,0,60,69,63,70,76,64],
[69,66,72,70,0,61,63,70,72,63],
[75,61,78,61,69,0,67,76,67,74],
[59,60,80,67,67,63,0,78,71,67],
[60,54,71,60,60,54,52,0,60,55],
[69,57,73,54,58,63,59,70,0,66],
[61,60,71,66,67,56,63,75,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,75,75,68,77,63,53,75,64],
[73,0,80,59,73,63,75,65,75,72],
[55,50,0,46,63,46,74,45,62,44],
[55,71,84,0,79,72,77,60,78,58],
[62,57,67,51,0,66,56,52,66,47],
[53,67,84,58,64,0,72,64,57,46],
[67,55,56,53,74,58,0,56,64,44],
[77,65,85,70,78,66,74,0,75,55],
[55,55,68,52,64,73,66,55,0,47],
[66,58,86,72,83,84,86,75,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,69,39,59,69,88,48,56,79],
[83,0,77,53,59,68,89,38,65,86],
[61,53,0,41,58,25,69,34,54,57],
[91,77,89,0,75,67,91,64,84,83],
[71,71,72,55,0,57,78,60,51,72],
[61,62,105,63,73,0,68,60,66,76],
[42,41,61,39,52,62,0,50,39,70],
[82,92,96,66,70,70,80,0,62,85],
[74,65,76,46,79,64,91,68,0,82],
[51,44,73,47,58,54,60,45,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,72,66,72,71,74,71,63,65],
[62,0,64,58,75,70,63,67,60,59],
[58,66,0,61,65,57,60,79,72,71],
[64,72,69,0,68,69,73,76,62,73],
[58,55,65,62,0,59,70,63,50,60],
[59,60,73,61,71,0,70,61,55,75],
[56,67,70,57,60,60,0,68,61,68],
[59,63,51,54,67,69,62,0,65,38],
[67,70,58,68,80,75,69,65,0,57],
[65,71,59,57,70,55,62,92,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,72,74,69,66,75,72,79],
[60,0,70,70,66,69,67,70,70,78],
[65,60,0,68,87,68,71,71,77,71],
[58,60,62,0,65,57,56,63,72,67],
[56,64,43,65,0,63,56,62,66,61],
[61,61,62,73,67,0,62,71,71,70],
[64,63,59,74,74,68,0,66,73,77],
[55,60,59,67,68,59,64,0,77,68],
[58,60,53,58,64,59,57,53,0,71],
[51,52,59,63,69,60,53,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,90,70,63,74,76,85,76,72],
[61,0,77,49,65,67,58,84,72,79],
[40,53,0,53,52,63,83,80,67,67],
[60,81,77,0,73,67,77,103,71,76],
[67,65,78,57,0,67,63,84,78,83],
[56,63,67,63,63,0,77,84,65,82],
[54,72,47,53,67,53,0,83,62,66],
[45,46,50,27,46,46,47,0,44,50],
[54,58,63,59,52,65,68,86,0,84],
[58,51,63,54,47,48,64,80,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,58,61,69,58,71,70,75,70],
[72,0,59,57,77,71,69,65,71,72],
[72,71,0,74,66,64,74,73,79,72],
[69,73,56,0,76,75,67,73,85,80],
[61,53,64,54,0,61,66,71,70,70],
[72,59,66,55,69,0,69,68,77,77],
[59,61,56,63,64,61,0,57,68,74],
[60,65,57,57,59,62,73,0,75,73],
[55,59,51,45,60,53,62,55,0,60],
[60,58,58,50,60,53,56,57,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,62,70,69,70,78,72,69,68],
[65,0,77,71,66,75,79,71,68,75],
[68,53,0,70,73,69,72,61,61,68],
[60,59,60,0,64,61,68,64,59,68],
[61,64,57,66,0,64,68,56,65,67],
[60,55,61,69,66,0,64,57,62,65],
[52,51,58,62,62,66,0,66,63,64],
[58,59,69,66,74,73,64,0,71,66],
[61,62,69,71,65,68,67,59,0,76],
[62,55,62,62,63,65,66,64,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,70,76,71,79,82,65,74,81],
[58,0,64,75,69,79,86,52,65,64],
[60,66,0,75,68,72,81,63,77,76],
[54,55,55,0,62,68,65,37,56,70],
[59,61,62,68,0,62,72,62,60,71],
[51,51,58,62,68,0,58,53,68,68],
[48,44,49,65,58,72,0,54,78,59],
[65,78,67,93,68,77,76,0,68,68],
[56,65,53,74,70,62,52,62,0,62],
[49,66,54,60,59,62,71,62,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,62,63,68,70,68,76,76],
[61,0,65,67,64,66,61,75,67,72],
[59,65,0,64,58,64,75,73,73,68],
[68,63,66,0,70,66,75,76,82,68],
[67,66,72,60,0,67,64,82,68,71],
[62,64,66,64,63,0,68,68,77,73],
[60,69,55,55,66,62,0,71,77,60],
[62,55,57,54,48,62,59,0,64,63],
[54,63,57,48,62,53,53,66,0,62],
[54,58,62,62,59,57,70,67,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,64,64,56,66,59,57,69],
[66,0,68,67,68,65,72,69,55,49],
[65,62,0,60,64,71,63,58,62,71],
[66,63,70,0,73,63,71,68,70,73],
[66,62,66,57,0,68,60,64,56,71],
[74,65,59,67,62,0,70,74,61,65],
[64,58,67,59,70,60,0,62,59,66],
[71,61,72,62,66,56,68,0,61,60],
[73,75,68,60,74,69,71,69,0,61],
[61,81,59,57,59,65,64,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,60,69,52,63,64,66,63,64],
[75,0,60,68,54,63,64,69,49,51],
[70,70,0,79,68,66,71,73,71,64],
[61,62,51,0,59,56,68,67,55,56],
[78,76,62,71,0,70,71,70,66,70],
[67,67,64,74,60,0,66,74,63,62],
[66,66,59,62,59,64,0,77,59,64],
[64,61,57,63,60,56,53,0,59,68],
[67,81,59,75,64,67,71,71,0,66],
[66,79,66,74,60,68,66,62,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,63,48,65,47,71,81,49,57],
[56,0,51,50,55,49,63,74,48,51],
[67,79,0,70,65,57,83,89,58,45],
[82,80,60,0,73,59,75,87,67,76],
[65,75,65,57,0,58,77,80,76,46],
[83,81,73,71,72,0,80,88,80,55],
[59,67,47,55,53,50,0,90,61,42],
[49,56,41,43,50,42,40,0,56,40],
[81,82,72,63,54,50,69,74,0,48],
[73,79,85,54,84,75,88,90,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,78,57,75,66,72,77,63,78],
[55,0,59,55,72,55,60,54,52,61],
[52,71,0,57,64,55,63,53,65,60],
[73,75,73,0,58,60,69,72,64,64],
[55,58,66,72,0,67,61,75,65,72],
[64,75,75,70,63,0,68,69,73,66],
[58,70,67,61,69,62,0,63,64,74],
[53,76,77,58,55,61,67,0,63,69],
[67,78,65,66,65,57,66,67,0,64],
[52,69,70,66,58,64,56,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,63,63,70,61,60,63,56,72],
[77,0,65,63,72,67,63,61,77,73],
[67,65,0,69,73,69,62,59,70,77],
[67,67,61,0,73,70,54,63,60,74],
[60,58,57,57,0,54,54,55,60,63],
[69,63,61,60,76,0,65,58,64,74],
[70,67,68,76,76,65,0,66,69,78],
[67,69,71,67,75,72,64,0,72,76],
[74,53,60,70,70,66,61,58,0,66],
[58,57,53,56,67,56,52,54,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,59,64,58,63,57,60,64,65],
[70,0,61,63,66,60,65,62,61,67],
[71,69,0,65,62,57,64,58,63,69],
[66,67,65,0,63,64,62,61,54,67],
[72,64,68,67,0,66,70,70,73,72],
[67,70,73,66,64,0,63,53,67,63],
[73,65,66,68,60,67,0,59,60,66],
[70,68,72,69,60,77,71,0,67,65],
[66,69,67,76,57,63,70,63,0,72],
[65,63,61,63,58,67,64,65,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,60,72,66,81,71,61,80,61],
[64,0,70,77,75,70,73,65,80,69],
[70,60,0,69,69,63,64,62,68,62],
[58,53,61,0,65,65,66,55,62,65],
[64,55,61,65,0,75,67,55,77,68],
[49,60,67,65,55,0,59,51,72,58],
[59,57,66,64,63,71,0,57,73,66],
[69,65,68,75,75,79,73,0,75,74],
[50,50,62,68,53,58,57,55,0,56],
[69,61,68,65,62,72,64,56,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,43,48,53,55,59,55,52,49],
[75,0,44,52,66,77,78,66,63,66],
[87,86,0,65,71,75,86,83,65,78],
[82,78,65,0,78,80,70,81,59,86],
[77,64,59,52,0,78,70,63,68,55],
[75,53,55,50,52,0,77,68,57,56],
[71,52,44,60,60,53,0,64,56,52],
[75,64,47,49,67,62,66,0,63,64],
[78,67,65,71,62,73,74,67,0,58],
[81,64,52,44,75,74,78,66,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,68,67,69,67,67,60,64,71],
[56,0,55,56,58,50,53,60,59,60],
[62,75,0,56,72,67,60,61,76,59],
[63,74,74,0,67,73,68,65,61,77],
[61,72,58,63,0,66,70,66,68,76],
[63,80,63,57,64,0,56,56,64,54],
[63,77,70,62,60,74,0,72,78,64],
[70,70,69,65,64,74,58,0,76,78],
[66,71,54,69,62,66,52,54,0,69],
[59,70,71,53,54,76,66,52,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,92,68,59,54,66,60,56,74],
[73,0,86,56,77,63,46,66,66,70],
[38,44,0,37,42,41,30,46,35,58],
[62,74,93,0,69,60,57,43,59,81],
[71,53,88,61,0,53,65,53,74,57],
[76,67,89,70,77,0,64,66,67,55],
[64,84,100,73,65,66,0,70,71,76],
[70,64,84,87,77,64,60,0,68,72],
[74,64,95,71,56,63,59,62,0,80],
[56,60,72,49,73,75,54,58,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,77,68,67,59,56,66,60,61],
[76,0,76,76,67,58,70,68,70,75],
[53,54,0,59,62,57,56,60,61,63],
[62,54,71,0,62,66,63,64,60,54],
[63,63,68,68,0,61,61,60,62,64],
[71,72,73,64,69,0,63,68,54,67],
[74,60,74,67,69,67,0,72,68,66],
[64,62,70,66,70,62,58,0,55,63],
[70,60,69,70,68,76,62,75,0,62],
[69,55,67,76,66,63,64,67,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,63,71,55,64,64,54,66,60],
[73,0,68,71,73,68,66,58,75,62],
[67,62,0,68,71,72,66,67,69,70],
[59,59,62,0,59,58,57,56,57,61],
[75,57,59,71,0,61,67,57,71,64],
[66,62,58,72,69,0,62,56,68,58],
[66,64,64,73,63,68,0,65,72,61],
[76,72,63,74,73,74,65,0,75,71],
[64,55,61,73,59,62,58,55,0,69],
[70,68,60,69,66,72,69,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,65,86,58,67,58,79,78,69],
[53,0,64,62,45,61,68,74,81,68],
[65,66,0,79,77,56,42,60,73,76],
[44,68,51,0,49,49,55,56,54,49],
[72,85,53,81,0,62,75,73,86,78],
[63,69,74,81,68,0,53,77,84,81],
[72,62,88,75,55,77,0,78,85,70],
[51,56,70,74,57,53,52,0,68,63],
[52,49,57,76,44,46,45,62,0,58],
[61,62,54,81,52,49,60,67,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,76,80,59,64,63,68,61,67],
[67,0,74,68,55,71,61,69,65,68],
[54,56,0,72,61,66,60,62,57,67],
[50,62,58,0,59,60,68,69,59,56],
[71,75,69,71,0,64,75,69,63,72],
[66,59,64,70,66,0,69,60,63,65],
[67,69,70,62,55,61,0,64,64,69],
[62,61,68,61,61,70,66,0,53,59],
[69,65,73,71,67,67,66,77,0,64],
[63,62,63,74,58,65,61,71,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,58,48,81,47,57,55,60,65],
[85,0,59,71,76,60,66,63,57,66],
[72,71,0,58,73,69,63,57,62,70],
[82,59,72,0,69,57,50,61,70,75],
[49,54,57,61,0,62,55,58,61,71],
[83,70,61,73,68,0,64,74,71,84],
[73,64,67,80,75,66,0,71,61,81],
[75,67,73,69,72,56,59,0,71,75],
[70,73,68,60,69,59,69,59,0,81],
[65,64,60,55,59,46,49,55,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,49,78,59,56,57,63,67,69],
[66,0,67,75,72,57,69,67,58,79],
[81,63,0,73,68,70,57,66,62,66],
[52,55,57,0,48,47,55,54,55,55],
[71,58,62,82,0,72,49,74,69,66],
[74,73,60,83,58,0,52,62,59,69],
[73,61,73,75,81,78,0,69,92,70],
[67,63,64,76,56,68,61,0,69,71],
[63,72,68,75,61,71,38,61,0,52],
[61,51,64,75,64,61,60,59,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,74,72,68,78,64,65,79],
[63,0,62,78,79,69,73,64,71,70],
[66,68,0,76,73,63,81,67,71,74],
[56,52,54,0,64,62,69,59,53,56],
[58,51,57,66,0,64,68,50,66,59],
[62,61,67,68,66,0,76,60,63,63],
[52,57,49,61,62,54,0,59,61,64],
[66,66,63,71,80,70,71,0,77,79],
[65,59,59,77,64,67,69,53,0,68],
[51,60,56,74,71,67,66,51,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,62,60,58,73,93,58,97,69],
[61,0,41,83,92,85,85,72,88,83],
[68,89,0,80,80,69,115,101,108,58],
[70,47,50,0,105,15,70,50,95,13],
[72,38,50,25,0,38,50,50,97,26],
[57,45,61,115,92,0,68,92,108,11],
[37,45,15,60,80,62,0,46,62,22],
[72,58,29,80,80,38,84,0,86,23],
[33,42,22,35,33,22,68,44,0,20],
[61,47,72,117,104,119,108,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,70,61,106,115,79,38,70,79],
[97,0,70,88,88,91,82,79,52,61],
[60,60,0,93,121,77,78,47,103,67],
[69,42,37,0,88,104,69,47,53,28],
[24,42,9,42,0,68,32,29,70,33],
[15,39,53,26,62,0,56,44,26,44],
[51,48,52,61,98,74,0,53,53,16],
[92,51,83,83,101,86,77,0,93,66],
[60,78,27,77,60,104,77,37,0,59],
[51,69,63,102,97,86,114,64,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,81,47,77,73,55,66,51],
[69,0,76,67,72,64,60,51,77,65],
[63,54,0,67,56,71,67,58,72,40],
[49,63,63,0,58,68,59,43,66,59],
[83,58,74,72,0,67,73,66,63,68],
[53,66,59,62,63,0,66,47,53,47],
[57,70,63,71,57,64,0,67,62,49],
[75,79,72,87,64,83,63,0,72,71],
[64,53,58,64,67,77,68,58,0,66],
[79,65,90,71,62,83,81,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,77,61,71,84,63,60,72,67],
[60,0,55,61,61,65,49,56,62,57],
[53,75,0,56,72,64,57,46,65,65],
[69,69,74,0,70,55,66,58,70,59],
[59,69,58,60,0,62,51,67,63,64],
[46,65,66,75,68,0,63,56,58,79],
[67,81,73,64,79,67,0,70,62,69],
[70,74,84,72,63,74,60,0,68,80],
[58,68,65,60,67,72,68,62,0,84],
[63,73,65,71,66,51,61,50,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,58,52,52,64,60,62,62,55],
[71,0,64,47,58,73,72,83,70,61],
[72,66,0,46,56,58,64,61,61,59],
[78,83,84,0,70,75,69,75,67,65],
[78,72,74,60,0,52,67,62,68,70],
[66,57,72,55,78,0,60,69,71,53],
[70,58,66,61,63,70,0,67,76,46],
[68,47,69,55,68,61,63,0,69,55],
[68,60,69,63,62,59,54,61,0,51],
[75,69,71,65,60,77,84,75,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,59,52,64,67,78,63,55,66],
[51,0,57,61,57,62,70,56,61,59],
[71,73,0,66,72,69,76,64,66,67],
[78,69,64,0,75,63,75,65,63,67],
[66,73,58,55,0,66,68,68,63,60],
[63,68,61,67,64,0,74,76,70,65],
[52,60,54,55,62,56,0,52,60,50],
[67,74,66,65,62,54,78,0,61,62],
[75,69,64,67,67,60,70,69,0,68],
[64,71,63,63,70,65,80,68,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,97,61,88,81,76,96,69,78],
[60,0,84,58,72,102,67,84,63,56],
[33,46,0,32,37,56,35,67,29,39],
[69,72,98,0,61,80,52,74,51,65],
[42,58,93,69,0,88,83,86,62,64],
[49,28,74,50,42,0,54,27,52,38],
[54,63,95,78,47,76,0,85,69,54],
[34,46,63,56,44,103,45,0,55,51],
[61,67,101,79,68,78,61,75,0,65],
[52,74,91,65,66,92,76,79,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,78,63,63,68,66,73,57,71],
[64,0,63,63,69,73,70,78,61,62],
[52,67,0,56,81,61,55,66,65,69],
[67,67,74,0,74,64,65,76,57,78],
[67,61,49,56,0,41,54,59,56,66],
[62,57,69,66,89,0,65,76,71,58],
[64,60,75,65,76,65,0,75,48,75],
[57,52,64,54,71,54,55,0,55,88],
[73,69,65,73,74,59,82,75,0,73],
[59,68,61,52,64,72,55,42,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,53,76,56,92,92,74,77,75],
[65,0,68,93,79,80,66,74,86,49],
[77,62,0,52,60,67,62,62,69,60],
[54,37,78,0,85,64,37,62,85,78],
[74,51,70,45,0,82,68,68,58,51],
[38,50,63,66,48,0,69,71,77,78],
[38,64,68,93,62,61,0,69,97,74],
[56,56,68,68,62,59,61,0,74,66],
[53,44,61,45,72,53,33,56,0,77],
[55,81,70,52,79,52,56,64,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,49,85,71,78,44,62,40,90],
[83,0,63,91,79,63,66,60,72,85],
[81,67,0,81,90,42,56,76,55,81],
[45,39,49,0,73,57,32,42,43,57],
[59,51,40,57,0,24,41,38,44,50],
[52,67,88,73,106,0,73,59,60,74],
[86,64,74,98,89,57,0,69,57,85],
[68,70,54,88,92,71,61,0,71,95],
[90,58,75,87,86,70,73,59,0,86],
[40,45,49,73,80,56,45,35,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,53,66,51,68,73,65,72,68],
[65,0,58,59,56,72,50,66,78,48],
[77,72,0,62,54,65,65,66,74,64],
[64,71,68,0,63,60,72,71,62,57],
[79,74,76,67,0,84,78,69,71,61],
[62,58,65,70,46,0,70,71,57,68],
[57,80,65,58,52,60,0,57,65,77],
[65,64,64,59,61,59,73,0,71,75],
[58,52,56,68,59,73,65,59,0,51],
[62,82,66,73,69,62,53,55,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,103,90,94,80,78,60,114,103],
[53,0,62,62,53,62,37,52,73,62],
[27,68,0,42,68,59,33,61,66,84],
[40,68,88,0,91,97,85,55,101,84],
[36,77,62,39,0,49,72,51,33,64],
[50,68,71,33,81,0,63,65,66,74],
[52,93,97,45,58,67,0,74,84,100],
[70,78,69,75,79,65,56,0,79,94],
[16,57,64,29,97,64,46,51,0,51],
[27,68,46,46,66,56,30,36,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,71,49,48,63,49,55,63,56],
[84,0,84,72,54,68,64,72,69,62],
[59,46,0,53,42,62,51,53,58,52],
[81,58,77,0,64,68,69,73,67,69],
[82,76,88,66,0,82,63,74,77,67],
[67,62,68,62,48,0,59,61,65,53],
[81,66,79,61,67,71,0,68,68,60],
[75,58,77,57,56,69,62,0,65,54],
[67,61,72,63,53,65,62,65,0,54],
[74,68,78,61,63,77,70,76,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,56,63,60,61,58,74,51,60],
[70,0,62,59,53,62,59,55,56,55],
[74,68,0,66,65,62,57,72,63,61],
[67,71,64,0,55,63,60,66,62,64],
[70,77,65,75,0,72,65,70,68,70],
[69,68,68,67,58,0,62,72,63,69],
[72,71,73,70,65,68,0,71,69,71],
[56,75,58,64,60,58,59,0,59,66],
[79,74,67,68,62,67,61,71,0,68],
[70,75,69,66,60,61,59,64,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,62,57,59,61,59,55,61,70],
[75,0,62,65,63,63,66,67,58,62],
[68,68,0,63,63,58,61,66,62,72],
[73,65,67,0,74,67,78,70,64,75],
[71,67,67,56,0,56,68,63,67,72],
[69,67,72,63,74,0,67,64,76,72],
[71,64,69,52,62,63,0,68,65,69],
[75,63,64,60,67,66,62,0,66,70],
[69,72,68,66,63,54,65,64,0,80],
[60,68,58,55,58,58,61,60,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,59,68,71,57,58,70,73,63],
[78,0,70,72,68,77,70,81,80,60],
[71,60,0,67,73,71,52,69,79,74],
[62,58,63,0,76,69,53,68,88,66],
[59,62,57,54,0,56,58,61,55,67],
[73,53,59,61,74,0,64,69,75,69],
[72,60,78,77,72,66,0,75,73,66],
[60,49,61,62,69,61,55,0,61,57],
[57,50,51,42,75,55,57,69,0,44],
[67,70,56,64,63,61,64,73,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,85,62,72,61,67,77,102,61],
[45,0,53,32,46,55,48,82,79,74],
[45,77,0,53,53,51,36,56,101,58],
[68,98,77,0,64,63,62,77,102,89],
[58,84,77,66,0,71,85,88,112,67],
[69,75,79,67,59,0,78,76,101,77],
[63,82,94,68,45,52,0,83,104,70],
[53,48,74,53,42,54,47,0,91,56],
[28,51,29,28,18,29,26,39,0,36],
[69,56,72,41,63,53,60,74,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,63,40,54,83,83,63,18,18],
[69,0,92,54,77,101,121,77,56,56],
[67,38,0,51,52,76,52,74,76,29],
[90,76,79,0,43,85,76,78,56,33],
[76,53,78,87,0,85,85,64,65,65],
[47,29,54,45,45,0,29,45,23,32],
[47,9,78,54,45,101,0,54,56,32],
[67,53,56,52,66,85,76,0,47,76],
[112,74,54,74,65,107,74,83,0,29],
[112,74,101,97,65,98,98,54,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,74,66,65,72,73,69,74,69],
[58,0,77,61,67,65,69,63,72,63],
[56,53,0,51,53,60,60,59,62,63],
[64,69,79,0,68,70,71,68,79,77],
[65,63,77,62,0,65,69,65,70,61],
[58,65,70,60,65,0,69,58,72,63],
[57,61,70,59,61,61,0,54,62,67],
[61,67,71,62,65,72,76,0,70,76],
[56,58,68,51,60,58,68,60,0,61],
[61,67,67,53,69,67,63,54,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,68,59,68,81,68,74,62,66],
[59,0,53,72,65,58,53,62,56,66],
[62,77,0,69,72,79,70,76,67,65],
[71,58,61,0,65,72,67,66,66,68],
[62,65,58,65,0,72,63,68,55,68],
[49,72,51,58,58,0,58,63,52,62],
[62,77,60,63,67,72,0,51,52,59],
[56,68,54,64,62,67,79,0,63,71],
[68,74,63,64,75,78,78,67,0,68],
[64,64,65,62,62,68,71,59,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,76,66,68,69,71,65,63,71],
[61,0,59,59,52,46,54,57,56,54],
[54,71,0,67,56,60,66,61,64,71],
[64,71,63,0,58,64,67,55,65,68],
[62,78,74,72,0,59,75,66,74,75],
[61,84,70,66,71,0,62,66,81,70],
[59,76,64,63,55,68,0,62,59,63],
[65,73,69,75,64,64,68,0,74,74],
[67,74,66,65,56,49,71,56,0,66],
[59,76,59,62,55,60,67,56,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,58,60,53,62,55,63,66,58],
[72,0,63,67,57,72,69,72,77,65],
[72,67,0,70,52,68,67,67,70,61],
[70,63,60,0,53,63,68,64,76,60],
[77,73,78,77,0,79,70,74,83,61],
[68,58,62,67,51,0,66,61,65,56],
[75,61,63,62,60,64,0,68,69,63],
[67,58,63,66,56,69,62,0,69,64],
[64,53,60,54,47,65,61,61,0,54],
[72,65,69,70,69,74,67,66,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,84,86,84,79,69,79,64,68],
[49,0,66,81,70,56,73,59,51,51],
[46,64,0,59,73,58,45,51,43,33],
[44,49,71,0,64,61,45,57,42,52],
[46,60,57,66,0,67,64,57,52,64],
[51,74,72,69,63,0,64,57,62,56],
[61,57,85,85,66,66,0,56,62,52],
[51,71,79,73,73,73,74,0,57,54],
[66,79,87,88,78,68,68,73,0,64],
[62,79,97,78,66,74,78,76,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,67,66,63,71,71,67,71],
[65,0,62,66,53,63,63,60,67,73],
[65,68,0,69,63,60,68,62,62,68],
[63,64,61,0,58,61,67,64,70,68],
[64,77,67,72,0,68,76,65,69,66],
[67,67,70,69,62,0,66,72,68,71],
[59,67,62,63,54,64,0,61,65,70],
[59,70,68,66,65,58,69,0,69,68],
[63,63,68,60,61,62,65,61,0,68],
[59,57,62,62,64,59,60,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,72,66,62,64,54,58,59,64],
[59,0,54,58,56,48,58,42,39,69],
[58,76,0,72,69,66,69,70,59,91],
[64,72,58,0,55,58,55,46,44,78],
[68,74,61,75,0,52,52,60,51,76],
[66,82,64,72,78,0,62,65,59,80],
[76,72,61,75,78,68,0,73,59,73],
[72,88,60,84,70,65,57,0,65,83],
[71,91,71,86,79,71,71,65,0,79],
[66,61,39,52,54,50,57,47,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,73,62,63,70,60,71,71,63],
[60,0,66,60,59,55,58,58,70,61],
[57,64,0,62,61,67,66,64,67,63],
[68,70,68,0,61,55,56,63,68,67],
[67,71,69,69,0,58,59,62,69,69],
[60,75,63,75,72,0,64,67,74,66],
[70,72,64,74,71,66,0,76,82,67],
[59,72,66,67,68,63,54,0,67,63],
[59,60,63,62,61,56,48,63,0,57],
[67,69,67,63,61,64,63,67,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,64,70,60,68,71,67,75,65],
[57,0,64,61,65,65,66,63,65,65],
[66,66,0,64,74,74,71,65,72,71],
[60,69,66,0,73,72,72,77,69,58],
[70,65,56,57,0,65,66,63,64,64],
[62,65,56,58,65,0,61,59,65,61],
[59,64,59,58,64,69,0,65,67,58],
[63,67,65,53,67,71,65,0,69,68],
[55,65,58,61,66,65,63,61,0,60],
[65,65,59,72,66,69,72,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,66,64,73,79,74,73,72,68],
[56,0,78,65,79,80,71,68,64,63],
[64,52,0,45,62,55,63,59,53,49],
[66,65,85,0,65,73,79,71,63,57],
[57,51,68,65,0,70,66,58,58,54],
[51,50,75,57,60,0,55,69,62,51],
[56,59,67,51,64,75,0,54,53,66],
[57,62,71,59,72,61,76,0,67,67],
[58,66,77,67,72,68,77,63,0,60],
[62,67,81,73,76,79,64,63,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,75,53,74,48,92,58,58,81],
[53,0,51,56,61,37,68,69,54,81],
[55,79,0,60,73,55,76,59,63,71],
[77,74,70,0,83,55,78,64,68,79],
[56,69,57,47,0,41,75,56,53,64],
[82,93,75,75,89,0,93,92,63,79],
[38,62,54,52,55,37,0,42,41,59],
[72,61,71,66,74,38,88,0,61,79],
[72,76,67,62,77,67,89,69,0,65],
[49,49,59,51,66,51,71,51,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,62,78,86,53,66,68,78,56],
[61,0,64,85,70,67,83,55,66,59],
[68,66,0,70,65,75,70,55,59,46],
[52,45,60,0,55,49,64,58,56,35],
[44,60,65,75,0,65,73,53,58,53],
[77,63,55,81,65,0,67,56,66,59],
[64,47,60,66,57,63,0,58,63,56],
[62,75,75,72,77,74,72,0,60,67],
[52,64,71,74,72,64,67,70,0,51],
[74,71,84,95,77,71,74,63,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,72,66,67,61,69,76,89,75],
[59,0,69,61,69,68,72,72,81,76],
[58,61,0,63,66,68,64,81,79,67],
[64,69,67,0,53,57,61,70,75,67],
[63,61,64,77,0,74,69,82,80,74],
[69,62,62,73,56,0,51,74,79,60],
[61,58,66,69,61,79,0,70,68,65],
[54,58,49,60,48,56,60,0,56,63],
[41,49,51,55,50,51,62,74,0,46],
[55,54,63,63,56,70,65,67,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,63,86,49,69,59,45,83,80],
[73,0,68,86,63,71,75,57,71,86],
[67,62,0,88,49,63,59,63,59,85],
[44,44,42,0,56,57,64,48,59,63],
[81,67,81,74,0,69,60,61,81,81],
[61,59,67,73,61,0,70,66,61,66],
[71,55,71,66,70,60,0,66,58,71],
[85,73,67,82,69,64,64,0,72,72],
[47,59,71,71,49,69,72,58,0,71],
[50,44,45,67,49,64,59,58,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,65,57,61,62,62,60,70,65],
[59,0,59,56,54,55,63,64,65,66],
[65,71,0,64,68,61,58,62,66,66],
[73,74,66,0,65,61,62,72,80,82],
[69,76,62,65,0,73,67,75,76,68],
[68,75,69,69,57,0,64,65,68,62],
[68,67,72,68,63,66,0,71,71,62],
[70,66,68,58,55,65,59,0,79,66],
[60,65,64,50,54,62,59,51,0,63],
[65,64,64,48,62,68,68,64,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,73,57,75,60,72,66,76],
[65,0,75,80,69,82,58,67,71,70],
[65,55,0,58,62,53,46,68,61,59],
[57,50,72,0,51,64,51,64,56,70],
[73,61,68,79,0,88,75,77,58,77],
[55,48,77,66,42,0,61,71,50,48],
[70,72,84,79,55,69,0,79,63,72],
[58,63,62,66,53,59,51,0,60,62],
[64,59,69,74,72,80,67,70,0,77],
[54,60,71,60,53,82,58,68,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,77,63,46,47,67,51,72,64],
[58,0,45,46,23,22,53,49,66,52],
[53,85,0,43,57,33,65,69,77,49],
[67,84,87,0,50,45,63,57,83,79],
[84,107,73,80,0,55,89,86,95,62],
[83,108,97,85,75,0,87,59,99,78],
[63,77,65,67,41,43,0,65,85,61],
[79,81,61,73,44,71,65,0,77,64],
[58,64,53,47,35,31,45,53,0,73],
[66,78,81,51,68,52,69,66,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,66,59,81,76,76,65,89,77],
[56,0,59,75,67,65,65,78,68,87],
[64,71,0,64,75,71,57,69,77,77],
[71,55,66,0,66,69,68,67,78,71],
[49,63,55,64,0,80,62,54,74,67],
[54,65,59,61,50,0,72,60,56,66],
[54,65,73,62,68,58,0,71,64,83],
[65,52,61,63,76,70,59,0,75,67],
[41,62,53,52,56,74,66,55,0,67],
[53,43,53,59,63,64,47,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,56,51,57,52,54,67,65,66],
[59,0,60,61,57,54,63,71,73,59],
[74,70,0,60,57,51,55,83,69,70],
[79,69,70,0,60,67,69,88,76,69],
[73,73,73,70,0,67,63,87,83,81],
[78,76,79,63,63,0,75,80,73,73],
[76,67,75,61,67,55,0,70,63,65],
[63,59,47,42,43,50,60,0,72,57],
[65,57,61,54,47,57,67,58,0,63],
[64,71,60,61,49,57,65,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,50,58,54,72,53,68,59,73],
[44,0,51,59,50,60,68,52,51,49],
[80,79,0,64,64,67,67,68,53,71],
[72,71,66,0,73,77,65,66,62,64],
[76,80,66,57,0,62,80,64,59,79],
[58,70,63,53,68,0,52,60,61,64],
[77,62,63,65,50,78,0,57,62,72],
[62,78,62,64,66,70,73,0,83,71],
[71,79,77,68,71,69,68,47,0,78],
[57,81,59,66,51,66,58,59,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,73,66,59,52,55,102,92,68],
[47,0,60,58,55,52,83,91,67,65],
[57,70,0,89,62,30,59,100,54,78],
[64,72,41,0,69,45,59,82,63,65],
[71,75,68,61,0,75,55,87,63,68],
[78,78,100,85,55,0,70,88,73,84],
[75,47,71,71,75,60,0,87,72,59],
[28,39,30,48,43,42,43,0,33,36],
[38,63,76,67,67,57,58,97,0,71],
[62,65,52,65,62,46,71,94,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,40,75,19,58,77,81,50,63],
[94,0,65,80,26,97,80,94,37,60],
[90,65,0,106,75,90,75,104,70,73],
[55,50,24,0,20,81,34,71,23,61],
[111,104,55,110,0,112,89,76,87,96],
[72,33,40,49,18,0,35,71,48,78],
[53,50,55,96,41,95,0,87,56,78],
[49,36,26,59,54,59,43,0,34,65],
[80,93,60,107,43,82,74,96,0,96],
[67,70,57,69,34,52,52,65,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,75,71,68,67,61,68,72],
[69,0,76,79,60,64,75,61,64,73],
[63,54,0,72,61,62,67,60,61,64],
[55,51,58,0,53,53,50,52,52,62],
[59,70,69,77,0,64,60,66,65,76],
[62,66,68,77,66,0,65,63,71,77],
[63,55,63,80,70,65,0,62,66,71],
[69,69,70,78,64,67,68,0,65,74],
[62,66,69,78,65,59,64,65,0,78],
[58,57,66,68,54,53,59,56,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,72,66,65,63,69,62,71,64],
[58,0,63,62,60,56,63,53,61,56],
[58,67,0,56,66,63,65,57,65,59],
[64,68,74,0,74,65,69,67,67,59],
[65,70,64,56,0,63,64,61,71,60],
[67,74,67,65,67,0,64,64,73,64],
[61,67,65,61,66,66,0,61,67,70],
[68,77,73,63,69,66,69,0,71,66],
[59,69,65,63,59,57,63,59,0,62],
[66,74,71,71,70,66,60,64,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,68,64,65,63,69,67,62,65],
[68,0,67,62,65,65,63,74,61,64],
[62,63,0,61,59,56,59,66,67,62],
[66,68,69,0,67,65,66,73,72,65],
[65,65,71,63,0,69,60,73,66,62],
[67,65,74,65,61,0,68,73,67,65],
[61,67,71,64,70,62,0,77,62,67],
[63,56,64,57,57,57,53,0,53,60],
[68,69,63,58,64,63,68,77,0,64],
[65,66,68,65,68,65,63,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,59,69,44,25,66,41,66,60],
[64,0,67,79,57,69,73,47,89,74],
[71,63,0,51,65,58,101,58,77,61],
[61,51,79,0,53,53,85,62,72,57],
[86,73,65,77,0,75,103,65,83,58],
[105,61,72,77,55,0,104,68,77,68],
[64,57,29,45,27,26,0,45,54,34],
[89,83,72,68,65,62,85,0,81,83],
[64,41,53,58,47,53,76,49,0,34],
[70,56,69,73,72,62,96,47,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,79,76,45,66,42,65,65,30],
[90,0,87,75,73,91,100,90,77,53],
[51,43,0,67,46,71,46,65,39,58],
[54,55,63,0,48,58,57,65,69,33],
[85,57,84,82,0,93,69,66,90,69],
[64,39,59,72,37,0,27,40,57,40],
[88,30,84,73,61,103,0,76,73,58],
[65,40,65,65,64,90,54,0,65,43],
[65,53,91,61,40,73,57,65,0,48],
[100,77,72,97,61,90,72,87,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,68,71,66,65,68,73,69,70],
[64,0,68,74,67,76,65,73,72,68],
[62,62,0,59,68,74,63,65,65,60],
[59,56,71,0,68,78,64,75,64,67],
[64,63,62,62,0,70,62,68,71,63],
[65,54,56,52,60,0,54,64,66,61],
[62,65,67,66,68,76,0,72,76,65],
[57,57,65,55,62,66,58,0,59,50],
[61,58,65,66,59,64,54,71,0,61],
[60,62,70,63,67,69,65,80,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,63,69,52,54,55,62,65],
[68,0,64,69,70,63,66,60,70,76],
[69,66,0,74,71,68,69,59,79,78],
[67,61,56,0,63,58,59,57,71,73],
[61,60,59,67,0,51,60,58,69,82],
[78,67,62,72,79,0,67,69,76,83],
[76,64,61,71,70,63,0,54,77,76],
[75,70,71,73,72,61,76,0,70,76],
[68,60,51,59,61,54,53,60,0,64],
[65,54,52,57,48,47,54,54,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,75,65,64,64,70,67,60,78],
[60,0,59,66,72,56,77,52,46,67],
[55,71,0,67,67,61,67,57,59,67],
[65,64,63,0,72,63,60,62,50,75],
[66,58,63,58,0,59,67,50,58,64],
[66,74,69,67,71,0,71,64,65,75],
[60,53,63,70,63,59,0,61,51,66],
[63,78,73,68,80,66,69,0,69,72],
[70,84,71,80,72,65,79,61,0,77],
[52,63,63,55,66,55,64,58,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,55,62,80,56,80,75,73,80],
[65,0,67,59,69,60,76,55,85,50],
[75,63,0,72,84,65,77,82,80,76],
[68,71,58,0,64,65,81,53,77,54],
[50,61,46,66,0,64,79,60,64,64],
[74,70,65,65,66,0,89,72,74,71],
[50,54,53,49,51,41,0,36,67,40],
[55,75,48,77,70,58,94,0,78,52],
[57,45,50,53,66,56,63,52,0,51],
[50,80,54,76,66,59,90,78,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,74,72,75,80,63,74,76],
[66,0,69,71,69,75,77,65,70,73],
[64,61,0,61,71,68,75,57,64,72],
[56,59,69,0,64,76,79,57,70,76],
[58,61,59,66,0,64,69,56,68,79],
[55,55,62,54,66,0,74,53,67,67],
[50,53,55,51,61,56,0,48,60,65],
[67,65,73,73,74,77,82,0,70,80],
[56,60,66,60,62,63,70,60,0,75],
[54,57,58,54,51,63,65,50,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,62,69,65,61,60,58,62,66],
[71,0,69,77,68,78,63,69,73,63],
[68,61,0,73,69,72,67,70,68,65],
[61,53,57,0,56,69,65,65,60,62],
[65,62,61,74,0,68,71,65,73,61],
[69,52,58,61,62,0,62,56,55,59],
[70,67,63,65,59,68,0,55,65,60],
[72,61,60,65,65,74,75,0,68,63],
[68,57,62,70,57,75,65,62,0,61],
[64,67,65,68,69,71,70,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,65,64,54,57,54,59,67,62],
[58,0,70,66,68,71,64,65,64,62],
[65,60,0,59,69,61,66,62,61,70],
[66,64,71,0,68,63,65,58,61,65],
[76,62,61,62,0,62,65,61,70,58],
[73,59,69,67,68,0,67,66,70,65],
[76,66,64,65,65,63,0,69,65,70],
[71,65,68,72,69,64,61,0,72,68],
[63,66,69,69,60,60,65,58,0,70],
[68,68,60,65,72,65,60,62,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,62,72,82,57,70,57,62,83],
[62,0,70,64,80,67,45,54,43,69],
[68,60,0,65,86,67,69,54,49,69],
[58,66,65,0,83,60,55,61,55,68],
[48,50,44,47,0,35,52,44,46,67],
[73,63,63,70,95,0,74,72,73,80],
[60,85,61,75,78,56,0,70,57,83],
[73,76,76,69,86,58,60,0,60,88],
[68,87,81,75,84,57,73,70,0,80],
[47,61,61,62,63,50,47,42,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,66,63,66,68,67,66,67],
[63,0,61,69,64,66,69,75,74,60],
[67,69,0,70,72,72,62,67,71,66],
[64,61,60,0,66,67,60,65,74,71],
[67,66,58,64,0,59,58,69,66,66],
[64,64,58,63,71,0,61,69,76,71],
[62,61,68,70,72,69,0,66,75,72],
[63,55,63,65,61,61,64,0,70,58],
[64,56,59,56,64,54,55,60,0,62],
[63,70,64,59,64,59,58,72,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,57,65,58,54,65,59,62,54],
[64,0,54,60,63,56,59,58,68,61],
[73,76,0,65,69,72,64,65,69,65],
[65,70,65,0,60,61,72,64,65,60],
[72,67,61,70,0,57,66,67,69,62],
[76,74,58,69,73,0,73,67,68,59],
[65,71,66,58,64,57,0,63,63,67],
[71,72,65,66,63,63,67,0,62,66],
[68,62,61,65,61,62,67,68,0,69],
[76,69,65,70,68,71,63,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,62,71,53,52,66,62,56,64],
[56,0,56,73,59,56,60,52,63,56],
[68,74,0,74,62,63,73,61,66,62],
[59,57,56,0,58,51,58,55,66,61],
[77,71,68,72,0,64,74,62,67,71],
[78,74,67,79,66,0,76,75,66,63],
[64,70,57,72,56,54,0,59,65,60],
[68,78,69,75,68,55,71,0,65,54],
[74,67,64,64,63,64,65,65,0,77],
[66,74,68,69,59,67,70,76,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,80,58,70,73,73,66,75,72],
[63,0,66,66,57,64,64,49,64,67],
[50,64,0,63,71,70,54,68,61,70],
[72,64,67,0,72,64,61,65,60,74],
[60,73,59,58,0,75,66,74,78,78],
[57,66,60,66,55,0,62,54,65,66],
[57,66,76,69,64,68,0,56,77,77],
[64,81,62,65,56,76,74,0,73,76],
[55,66,69,70,52,65,53,57,0,66],
[58,63,60,56,52,64,53,54,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,65,58,56,57,56,73,61,60],
[73,0,68,56,63,70,61,76,65,59],
[65,62,0,62,61,63,60,61,56,58],
[72,74,68,0,61,72,71,79,57,64],
[74,67,69,69,0,69,75,81,60,64],
[73,60,67,58,61,0,70,76,62,53],
[74,69,70,59,55,60,0,67,54,55],
[57,54,69,51,49,54,63,0,50,54],
[69,65,74,73,70,68,76,80,0,69],
[70,71,72,66,66,77,75,76,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,59,70,62,54,65,63,67,73],
[66,0,65,72,74,61,64,65,69,64],
[71,65,0,69,76,67,68,66,64,61],
[60,58,61,0,69,63,62,58,68,72],
[68,56,54,61,0,53,58,61,64,72],
[76,69,63,67,77,0,71,64,74,84],
[65,66,62,68,72,59,0,63,61,74],
[67,65,64,72,69,66,67,0,76,80],
[63,61,66,62,66,56,69,54,0,60],
[57,66,69,58,58,46,56,50,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,48,52,34,28,47,60,48,31],
[109,0,96,114,79,70,69,99,59,74],
[82,34,0,66,40,57,45,72,60,32],
[78,16,64,0,48,53,56,83,26,29],
[96,51,90,82,0,72,77,90,78,33],
[102,60,73,77,58,0,60,68,60,56],
[83,61,85,74,53,70,0,71,59,57],
[70,31,58,47,40,62,59,0,46,35],
[82,71,70,104,52,70,71,84,0,44],
[99,56,98,101,97,74,73,95,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,76,68,70,65,68,68,71,75],
[64,0,67,63,61,55,56,65,57,68],
[54,63,0,49,53,52,56,56,59,63],
[62,67,81,0,68,57,74,71,65,76],
[60,69,77,62,0,59,70,73,56,66],
[65,75,78,73,71,0,64,71,70,72],
[62,74,74,56,60,66,0,69,74,73],
[62,65,74,59,57,59,61,0,69,68],
[59,73,71,65,74,60,56,61,0,61],
[55,62,67,54,64,58,57,62,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,64,64,73,55,73,68,60,53],
[71,0,68,73,65,68,52,54,66,53],
[66,62,0,69,61,54,67,57,60,68],
[66,57,61,0,63,65,70,59,66,43],
[57,65,69,67,0,60,69,70,72,60],
[75,62,76,65,70,0,71,66,70,63],
[57,78,63,60,61,59,0,50,60,53],
[62,76,73,71,60,64,80,0,79,68],
[70,64,70,64,58,60,70,51,0,68],
[77,77,62,87,70,67,77,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,58,59,60,69,57,68,65,59],
[61,0,57,54,55,71,53,58,64,63],
[72,73,0,67,67,69,64,73,67,73],
[71,76,63,0,78,70,69,77,78,71],
[70,75,63,52,0,68,66,70,68,69],
[61,59,61,60,62,0,55,62,58,61],
[73,77,66,61,64,75,0,68,76,68],
[62,72,57,53,60,68,62,0,64,63],
[65,66,63,52,62,72,54,66,0,64],
[71,67,57,59,61,69,62,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,27,60,50,56,42,37,48,59],
[89,0,65,74,73,73,49,63,67,84],
[103,65,0,89,79,74,69,55,63,84],
[70,56,41,0,59,71,42,36,45,46],
[80,57,51,71,0,62,53,49,63,78],
[74,57,56,59,68,0,42,31,62,57],
[88,81,61,88,77,88,0,70,74,84],
[93,67,75,94,81,99,60,0,64,81],
[82,63,67,85,67,68,56,66,0,69],
[71,46,46,84,52,73,46,49,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,62,64,70,56,53,65,62,63],
[69,0,86,79,76,67,69,82,63,74],
[68,44,0,60,59,54,53,54,36,56],
[66,51,70,0,69,64,73,81,62,74],
[60,54,71,61,0,56,54,69,52,62],
[74,63,76,66,74,0,65,73,66,62],
[77,61,77,57,76,65,0,67,58,61],
[65,48,76,49,61,57,63,0,53,57],
[68,67,94,68,78,64,72,77,0,68],
[67,56,74,56,68,68,69,73,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,66,62,57,57,63,58,58],
[63,0,68,71,67,61,70,61,63,58],
[63,62,0,58,67,68,66,65,59,60],
[64,59,72,0,66,62,66,64,64,54],
[68,63,63,64,0,67,57,58,56,56],
[73,69,62,68,63,0,67,67,62,65],
[73,60,64,64,73,63,0,69,63,65],
[67,69,65,66,72,63,61,0,60,54],
[72,67,71,66,74,68,67,70,0,57],
[72,72,70,76,74,65,65,76,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,77,32,53,101,76,74,83,92],
[73,0,50,69,55,76,64,85,86,88],
[53,80,0,75,47,87,34,74,95,86],
[98,61,55,0,45,96,77,78,58,106],
[77,75,83,85,0,118,79,61,75,95],
[29,54,43,34,12,0,45,37,57,58],
[54,66,96,53,51,85,0,67,88,92],
[56,45,56,52,69,93,63,0,74,63],
[47,44,35,72,55,73,42,56,0,111],
[38,42,44,24,35,72,38,67,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,79,79,53,51,65,47,54,56],
[70,0,80,70,79,52,76,67,56,78],
[51,50,0,49,55,35,57,60,64,72],
[51,60,81,0,82,65,77,55,59,61],
[77,51,75,48,0,47,62,63,62,73],
[79,78,95,65,83,0,68,63,54,73],
[65,54,73,53,68,62,0,61,50,70],
[83,63,70,75,67,67,69,0,70,79],
[76,74,66,71,68,76,80,60,0,86],
[74,52,58,69,57,57,60,51,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,47,57,92,48,57,38,48,67],
[53,0,9,47,54,19,9,9,10,0],
[83,121,0,92,54,54,10,29,10,83],
[73,83,38,0,54,54,38,29,39,73],
[38,76,76,76,0,48,38,76,86,38],
[82,111,76,76,82,0,76,76,67,29],
[73,121,120,92,92,54,0,111,48,73],
[92,121,101,101,54,54,19,0,10,83],
[82,120,120,91,44,63,82,120,0,82],
[63,130,47,57,92,101,57,47,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,62,61,79,64,62,63,65,70],
[61,0,77,59,82,56,60,61,63,75],
[68,53,0,51,79,66,52,61,61,65],
[69,71,79,0,90,66,70,80,62,67],
[51,48,51,40,0,59,47,54,47,46],
[66,74,64,64,71,0,54,62,68,64],
[68,70,78,60,83,76,0,77,78,60],
[67,69,69,50,76,68,53,0,64,67],
[65,67,69,68,83,62,52,66,0,54],
[60,55,65,63,84,66,70,63,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,68,66,63,72,79,65,65,62],
[58,0,58,46,61,55,65,59,58,45],
[62,72,0,62,65,67,75,72,77,54],
[64,84,68,0,61,63,69,69,72,58],
[67,69,65,69,0,70,71,71,61,68],
[58,75,63,67,60,0,59,55,67,47],
[51,65,55,61,59,71,0,60,51,51],
[65,71,58,61,59,75,70,0,61,57],
[65,72,53,58,69,63,79,69,0,56],
[68,85,76,72,62,83,79,73,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,61,74,63,79,70,71,61,60],
[45,0,62,49,53,64,58,64,44,61],
[69,68,0,67,63,54,59,62,69,52],
[56,81,63,0,80,86,82,62,53,53],
[67,77,67,50,0,74,67,61,65,66],
[51,66,76,44,56,0,61,50,68,41],
[60,72,71,48,63,69,0,56,61,48],
[59,66,68,68,69,80,74,0,65,62],
[69,86,61,77,65,62,69,65,0,53],
[70,69,78,77,64,89,82,68,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,51,65,64,69,71,63,51,58],
[68,0,56,60,68,71,64,63,57,68],
[79,74,0,68,65,78,68,60,68,72],
[65,70,62,0,67,68,72,65,51,68],
[66,62,65,63,0,74,63,53,64,65],
[61,59,52,62,56,0,69,51,51,69],
[59,66,62,58,67,61,0,61,64,61],
[67,67,70,65,77,79,69,0,55,74],
[79,73,62,79,66,79,66,75,0,66],
[72,62,58,62,65,61,69,56,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,77,73,59,69,59,66,57,71],
[72,0,76,61,45,53,42,57,34,57],
[53,54,0,76,48,38,41,55,61,56],
[57,69,54,0,52,43,37,50,39,70],
[71,85,82,78,0,78,66,72,59,82],
[61,77,92,87,52,0,32,67,67,67],
[71,88,89,93,64,98,0,72,62,86],
[64,73,75,80,58,63,58,0,49,80],
[73,96,69,91,71,63,68,81,0,64],
[59,73,74,60,48,63,44,50,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,54,53,49,57,58,57,63,66],
[57,0,56,57,63,59,65,52,75,61],
[76,74,0,75,66,59,67,71,71,74],
[77,73,55,0,61,61,75,57,68,66],
[81,67,64,69,0,58,63,62,57,57],
[73,71,71,69,72,0,68,54,70,66],
[72,65,63,55,67,62,0,65,66,66],
[73,78,59,73,68,76,65,0,77,72],
[67,55,59,62,73,60,64,53,0,68],
[64,69,56,64,73,64,64,58,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,52,72,45,46,42,60,64,72],
[67,0,68,67,78,55,50,67,52,77],
[78,62,0,70,54,45,69,72,77,80],
[58,63,60,0,53,54,59,69,67,72],
[85,52,76,77,0,51,64,64,64,76],
[84,75,85,76,79,0,60,68,74,89],
[88,80,61,71,66,70,0,77,81,61],
[70,63,58,61,66,62,53,0,60,64],
[66,78,53,63,66,56,49,70,0,55],
[58,53,50,58,54,41,69,66,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,67,62,81,63,64,70,70],
[66,0,67,59,66,72,67,69,81,69],
[63,63,0,46,62,65,60,54,64,64],
[63,71,84,0,70,71,78,68,73,67],
[68,64,68,60,0,67,64,77,69,64],
[49,58,65,59,63,0,55,63,52,68],
[67,63,70,52,66,75,0,74,64,68],
[66,61,76,62,53,67,56,0,62,64],
[60,49,66,57,61,78,66,68,0,63],
[60,61,66,63,66,62,62,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,72,68,64,75,67,74,69,68],
[58,0,67,66,60,74,64,64,61,71],
[58,63,0,61,62,68,61,66,62,64],
[62,64,69,0,53,74,62,73,65,60],
[66,70,68,77,0,67,69,67,64,68],
[55,56,62,56,63,0,52,62,55,65],
[63,66,69,68,61,78,0,59,69,70],
[56,66,64,57,63,68,71,0,66,72],
[61,69,68,65,66,75,61,64,0,72],
[62,59,66,70,62,65,60,58,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,60,69,73,57,63,82,77],
[59,0,63,51,63,67,46,65,74,69],
[66,67,0,57,68,65,65,68,69,80],
[70,79,73,0,78,76,59,79,75,79],
[61,67,62,52,0,68,43,57,69,71],
[57,63,65,54,62,0,55,63,70,67],
[73,84,65,71,87,75,0,77,89,81],
[67,65,62,51,73,67,53,0,70,65],
[48,56,61,55,61,60,41,60,0,61],
[53,61,50,51,59,63,49,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,57,51,63,54,56,58,54,59],
[67,0,60,47,72,69,64,68,61,68],
[73,70,0,61,70,57,63,67,70,63],
[79,83,69,0,75,66,75,77,64,75],
[67,58,60,55,0,63,58,62,56,64],
[76,61,73,64,67,0,58,71,56,58],
[74,66,67,55,72,72,0,70,62,76],
[72,62,63,53,68,59,60,0,62,64],
[76,69,60,66,74,74,68,68,0,80],
[71,62,67,55,66,72,54,66,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,52,56,75,49,71,61,60,58],
[88,0,75,62,84,73,81,71,93,79],
[78,55,0,65,87,76,82,79,73,74],
[74,68,65,0,103,66,73,69,90,60],
[55,46,43,27,0,47,64,64,64,37],
[81,57,54,64,83,0,81,71,82,62],
[59,49,48,57,66,49,0,71,45,43],
[69,59,51,61,66,59,59,0,83,64],
[70,37,57,40,66,48,85,47,0,40],
[72,51,56,70,93,68,87,66,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,62,46,62,61,58,44,69,39],
[79,0,74,75,88,74,61,62,56,50],
[68,56,0,37,72,64,64,49,74,44],
[84,55,93,0,73,90,67,80,92,76],
[68,42,58,57,0,47,52,39,56,41],
[69,56,66,40,83,0,53,44,64,37],
[72,69,66,63,78,77,0,64,67,61],
[86,68,81,50,91,86,66,0,73,49],
[61,74,56,38,74,66,63,57,0,57],
[91,80,86,54,89,93,69,81,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,58,71,63,61,66,66,63,68],
[66,0,66,63,71,62,70,61,64,71],
[72,64,0,69,66,68,69,73,67,68],
[59,67,61,0,65,70,64,59,67,67],
[67,59,64,65,0,58,63,56,64,61],
[69,68,62,60,72,0,71,70,65,70],
[64,60,61,66,67,59,0,58,63,61],
[64,69,57,71,74,60,72,0,68,69],
[67,66,63,63,66,65,67,62,0,70],
[62,59,62,63,69,60,69,61,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,72,66,71,65,78,73,79,63],
[60,0,64,78,64,66,82,69,76,54],
[58,66,0,64,61,54,70,52,70,57],
[64,52,66,0,69,61,73,56,66,56],
[59,66,69,61,0,62,80,64,73,65],
[65,64,76,69,68,0,70,59,77,73],
[52,48,60,57,50,60,0,62,64,52],
[57,61,78,74,66,71,68,0,72,62],
[51,54,60,64,57,53,66,58,0,54],
[67,76,73,74,65,57,78,68,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,69,73,77,62,45,55,63,64],
[74,0,64,80,82,81,62,86,70,79],
[61,66,0,70,82,84,70,72,63,68],
[57,50,60,0,79,71,66,74,61,70],
[53,48,48,51,0,57,53,49,66,65],
[68,49,46,59,73,0,54,49,47,53],
[85,68,60,64,77,76,0,73,67,64],
[75,44,58,56,81,81,57,0,52,67],
[67,60,67,69,64,83,63,78,0,69],
[66,51,62,60,65,77,66,63,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,68,63,61,67,55,55,67],
[59,0,56,47,61,64,53,54,59,52],
[66,74,0,63,70,71,73,57,72,71],
[62,83,67,0,70,79,53,62,66,74],
[67,69,60,60,0,61,62,47,56,56],
[69,66,59,51,69,0,52,48,51,67],
[63,77,57,77,68,78,0,65,68,74],
[75,76,73,68,83,82,65,0,68,78],
[75,71,58,64,74,79,62,62,0,79],
[63,78,59,56,74,63,56,52,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,65,65,67,71,62,68,61,70],
[62,0,66,62,60,79,61,63,56,67],
[65,64,0,66,70,82,58,69,67,69],
[65,68,64,0,72,76,63,67,67,66],
[63,70,60,58,0,78,68,63,62,68],
[59,51,48,54,52,0,51,49,47,63],
[68,69,72,67,62,79,0,69,67,70],
[62,67,61,63,67,81,61,0,61,72],
[69,74,63,63,68,83,63,69,0,78],
[60,63,61,64,62,67,60,58,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,47,69,86,52,58,77,47,54],
[93,0,52,80,89,72,81,79,62,73],
[83,78,0,76,92,83,74,95,72,61],
[61,50,54,0,87,68,54,67,59,42],
[44,41,38,43,0,51,53,54,44,39],
[78,58,47,62,79,0,71,77,55,55],
[72,49,56,76,77,59,0,84,59,64],
[53,51,35,63,76,53,46,0,52,53],
[83,68,58,71,86,75,71,78,0,63],
[76,57,69,88,91,75,66,77,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,70,75,77,71,68,72,76,68],
[69,0,76,69,71,62,67,69,71,71],
[60,54,0,72,66,63,69,63,67,67],
[55,61,58,0,68,63,58,65,70,57],
[53,59,64,62,0,48,55,64,66,58],
[59,68,67,67,82,0,61,62,69,63],
[62,63,61,72,75,69,0,60,64,64],
[58,61,67,65,66,68,70,0,71,68],
[54,59,63,60,64,61,66,59,0,61],
[62,59,63,73,72,67,66,62,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,58,54,69,60,79,64,64,58],
[75,0,71,74,77,65,72,63,62,68],
[72,59,0,62,68,68,72,69,62,64],
[76,56,68,0,67,71,75,72,61,60],
[61,53,62,63,0,64,66,61,66,62],
[70,65,62,59,66,0,72,69,55,60],
[51,58,58,55,64,58,0,66,62,63],
[66,67,61,58,69,61,64,0,60,59],
[66,68,68,69,64,75,68,70,0,67],
[72,62,66,70,68,70,67,71,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,72,66,64,70,69,66,64,70],
[59,0,63,56,61,70,66,64,63,62],
[58,67,0,58,62,67,59,60,58,63],
[64,74,72,0,59,75,63,64,64,62],
[66,69,68,71,0,64,64,70,65,71],
[60,60,63,55,66,0,68,62,54,62],
[61,64,71,67,66,62,0,65,60,68],
[64,66,70,66,60,68,65,0,65,66],
[66,67,72,66,65,76,70,65,0,70],
[60,68,67,68,59,68,62,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,58,65,41,59,66,41,58,38],
[88,0,60,56,40,59,72,40,57,48],
[72,70,0,84,37,55,82,58,68,56],
[65,74,46,0,46,50,69,57,58,40],
[89,90,93,84,0,64,77,61,72,70],
[71,71,75,80,66,0,72,51,74,54],
[64,58,48,61,53,58,0,40,57,39],
[89,90,72,73,69,79,90,0,63,57],
[72,73,62,72,58,56,73,67,0,34],
[92,82,74,90,60,76,91,73,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,58,42,53,70,70,66,45,79],
[56,0,59,62,62,67,55,66,59,66],
[72,71,0,68,71,70,64,79,56,71],
[88,68,62,0,77,75,70,78,57,81],
[77,68,59,53,0,79,63,77,43,93],
[60,63,60,55,51,0,69,51,51,75],
[60,75,66,60,67,61,0,67,70,69],
[64,64,51,52,53,79,63,0,58,68],
[85,71,74,73,87,79,60,72,0,80],
[51,64,59,49,37,55,61,62,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,31,24,79,39,52,32,11,29],
[69,0,64,43,56,34,77,56,67,64],
[99,66,0,40,95,69,57,48,27,38],
[106,87,90,0,66,66,63,68,63,82],
[51,74,35,64,0,31,85,64,51,48],
[91,96,61,64,99,0,72,77,64,86],
[78,53,73,67,45,58,0,54,60,73],
[98,74,82,62,66,53,76,0,49,64],
[119,63,103,67,79,66,70,81,0,82],
[101,66,92,48,82,44,57,66,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,62,64,74,76,74,65,66,70],
[59,0,54,58,66,57,69,68,59,70],
[68,76,0,63,71,71,65,64,69,64],
[66,72,67,0,67,75,75,66,63,73],
[56,64,59,63,0,61,64,65,60,67],
[54,73,59,55,69,0,66,60,60,69],
[56,61,65,55,66,64,0,59,57,64],
[65,62,66,64,65,70,71,0,64,70],
[64,71,61,67,70,70,73,66,0,66],
[60,60,66,57,63,61,66,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,75,69,68,76,73,70,70,69],
[67,0,71,66,72,78,73,78,65,67],
[55,59,0,58,60,69,66,68,60,62],
[61,64,72,0,65,75,69,69,56,66],
[62,58,70,65,0,78,59,65,54,65],
[54,52,61,55,52,0,57,61,52,54],
[57,57,64,61,71,73,0,70,59,62],
[60,52,62,61,65,69,60,0,66,62],
[60,65,70,74,76,78,71,64,0,72],
[61,63,68,64,65,76,68,68,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,70,68,67,65,60,70,62],
[63,0,63,68,70,61,69,66,68,52],
[60,67,0,59,62,63,61,58,60,60],
[60,62,71,0,66,63,68,58,66,57],
[62,60,68,64,0,65,64,65,60,62],
[63,69,67,67,65,0,69,64,65,65],
[65,61,69,62,66,61,0,66,68,61],
[70,64,72,72,65,66,64,0,70,68],
[60,62,70,64,70,65,62,60,0,57],
[68,78,70,73,68,65,69,62,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,62,70,76,52,70,58,70,62],
[63,0,80,70,80,52,68,48,80,65],
[68,50,0,62,67,61,50,56,47,52],
[60,60,68,0,73,51,63,68,60,67],
[54,50,63,57,0,50,57,49,61,57],
[78,78,69,79,80,0,69,61,82,80],
[60,62,80,67,73,61,0,67,76,67],
[72,82,74,62,81,69,63,0,72,71],
[60,50,83,70,69,48,54,58,0,67],
[68,65,78,63,73,50,63,59,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,44,54,83,74,64,37,90,55],
[77,0,67,79,109,65,67,85,102,78],
[86,63,0,93,82,87,70,58,111,83],
[76,51,37,0,95,57,76,32,91,53],
[47,21,48,35,0,68,75,57,85,64],
[56,65,43,73,62,0,63,29,65,64],
[66,63,60,54,55,67,0,57,84,54],
[93,45,72,98,73,101,73,0,110,88],
[40,28,19,39,45,65,46,20,0,46],
[75,52,47,77,66,66,76,42,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,64,72,63,68,70,66,75,60],
[56,0,58,54,56,49,59,52,60,57],
[66,72,0,67,67,62,62,72,74,66],
[58,76,63,0,64,55,65,63,73,61],
[67,74,63,66,0,60,76,72,72,73],
[62,81,68,75,70,0,77,75,77,73],
[60,71,68,65,54,53,0,59,65,62],
[64,78,58,67,58,55,71,0,72,54],
[55,70,56,57,58,53,65,58,0,58],
[70,73,64,69,57,57,68,76,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,62,75,84,64,61,74,91,82],
[56,0,44,60,70,60,60,65,65,57],
[68,86,0,81,95,62,75,62,84,75],
[55,70,49,0,59,60,61,61,66,78],
[46,60,35,71,0,55,60,54,67,58],
[66,70,68,70,75,0,58,60,73,66],
[69,70,55,69,70,72,0,68,75,72],
[56,65,68,69,76,70,62,0,81,53],
[39,65,46,64,63,57,55,49,0,55],
[48,73,55,52,72,64,58,77,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,28,103,48,52,74,37,73,64],
[108,0,56,98,98,66,103,90,90,99],
[102,74,0,101,80,82,90,110,52,98],
[27,32,29,0,19,38,48,45,46,43],
[82,32,50,111,0,69,85,59,69,93],
[78,64,48,92,61,0,99,83,61,99],
[56,27,40,82,45,31,0,67,64,97],
[93,40,20,85,71,47,63,0,43,75],
[57,40,78,84,61,69,66,87,0,71],
[66,31,32,87,37,31,33,55,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,66,67,62,55,52,51,64,56],
[74,0,74,76,75,64,74,65,85,73],
[64,56,0,62,59,57,68,63,67,58],
[63,54,68,0,56,55,69,58,68,72],
[68,55,71,74,0,60,64,68,74,68],
[75,66,73,75,70,0,70,60,71,78],
[78,56,62,61,66,60,0,70,73,67],
[79,65,67,72,62,70,60,0,75,68],
[66,45,63,62,56,59,57,55,0,60],
[74,57,72,58,62,52,63,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,56,63,72,61,66,68,58,77],
[75,0,72,67,73,75,68,72,62,85],
[74,58,0,59,77,74,60,73,69,77],
[67,63,71,0,72,73,68,70,65,74],
[58,57,53,58,0,60,57,66,62,65],
[69,55,56,57,70,0,61,64,56,65],
[64,62,70,62,73,69,0,69,65,74],
[62,58,57,60,64,66,61,0,60,64],
[72,68,61,65,68,74,65,70,0,79],
[53,45,53,56,65,65,56,66,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,68,61,49,61,59,59,49,58],
[75,0,77,81,82,88,83,69,55,70],
[62,53,0,77,61,68,51,46,55,55],
[69,49,53,0,56,63,49,50,49,53],
[81,48,69,74,0,73,70,50,58,55],
[69,42,62,67,57,0,52,50,50,55],
[71,47,79,81,60,78,0,56,62,59],
[71,61,84,80,80,80,74,0,73,75],
[81,75,75,81,72,80,68,57,0,74],
[72,60,75,77,75,75,71,55,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,55,58,58,62,53,60,63,53],
[68,0,59,67,61,63,58,63,66,63],
[75,71,0,72,64,81,72,67,70,75],
[72,63,58,0,60,69,67,64,66,61],
[72,69,66,70,0,73,72,69,72,65],
[68,67,49,61,57,0,58,59,63,62],
[77,72,58,63,58,72,0,73,69,69],
[70,67,63,66,61,71,57,0,72,67],
[67,64,60,64,58,67,61,58,0,65],
[77,67,55,69,65,68,61,63,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,81,72,64,75,71,91,88,66],
[62,0,66,66,69,78,90,68,79,81],
[49,64,0,54,58,63,86,63,68,62],
[58,64,76,0,62,54,84,64,78,78],
[66,61,72,68,0,73,77,65,76,63],
[55,52,67,76,57,0,77,48,61,75],
[59,40,44,46,53,53,0,56,66,58],
[39,62,67,66,65,82,74,0,75,75],
[42,51,62,52,54,69,64,55,0,60],
[64,49,68,52,67,55,72,55,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,72,87,60,90,89,81,92,73],
[59,0,73,79,83,94,87,87,93,70],
[58,57,0,78,67,74,77,89,84,72],
[43,51,52,0,70,64,60,71,66,34],
[70,47,63,60,0,68,65,67,83,53],
[40,36,56,66,62,0,58,90,94,59],
[41,43,53,70,65,72,0,72,83,38],
[49,43,41,59,63,40,58,0,71,37],
[38,37,46,64,47,36,47,59,0,45],
[57,60,58,96,77,71,92,93,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,68,72,53,64,63,61,65,84],
[59,0,74,70,61,68,63,60,68,79],
[62,56,0,61,60,67,70,61,71,83],
[58,60,69,0,50,66,60,58,67,76],
[77,69,70,80,0,75,58,76,67,84],
[66,62,63,64,55,0,60,64,59,83],
[67,67,60,70,72,70,0,63,72,82],
[69,70,69,72,54,66,67,0,68,76],
[65,62,59,63,63,71,58,62,0,76],
[46,51,47,54,46,47,48,54,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,48,55,68,59,60,57,57,63],
[43,0,49,59,66,50,57,52,54,60],
[82,81,0,74,75,70,77,72,63,80],
[75,71,56,0,77,68,71,64,68,73],
[62,64,55,53,0,55,62,57,59,63],
[71,80,60,62,75,0,77,74,68,67],
[70,73,53,59,68,53,0,57,52,68],
[73,78,58,66,73,56,73,0,64,72],
[73,76,67,62,71,62,78,66,0,60],
[67,70,50,57,67,63,62,58,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,57,64,62,65,61,59,61],
[66,0,71,63,57,72,68,62,65,58],
[66,59,0,57,68,64,69,58,65,59],
[73,67,73,0,62,65,75,71,63,70],
[66,73,62,68,0,63,66,64,62,64],
[68,58,66,65,67,0,75,62,56,64],
[65,62,61,55,64,55,0,62,61,61],
[69,68,72,59,66,68,68,0,61,53],
[71,65,65,67,68,74,69,69,0,63],
[69,72,71,60,66,66,69,77,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,49,47,68,64,66,64,56,55],
[76,0,68,62,72,73,73,70,67,63],
[81,62,0,65,69,66,64,73,62,67],
[83,68,65,0,76,70,74,76,79,66],
[62,58,61,54,0,64,63,64,62,58],
[66,57,64,60,66,0,75,74,59,60],
[64,57,66,56,67,55,0,73,61,62],
[66,60,57,54,66,56,57,0,63,54],
[74,63,68,51,68,71,69,67,0,54],
[75,67,63,64,72,70,68,76,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,70,80,66,66,65,56,79,73],
[73,0,79,90,67,75,68,65,83,80],
[60,51,0,62,65,66,60,48,69,62],
[50,40,68,0,61,58,65,53,59,59],
[64,63,65,69,0,63,62,51,64,60],
[64,55,64,72,67,0,66,59,78,68],
[65,62,70,65,68,64,0,50,77,64],
[74,65,82,77,79,71,80,0,88,82],
[51,47,61,71,66,52,53,42,0,52],
[57,50,68,71,70,62,66,48,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,68,66,74,65,73,58,72],
[68,0,65,62,62,72,65,76,64,64],
[69,65,0,59,59,77,65,70,68,70],
[62,68,71,0,60,69,65,82,61,73],
[64,68,71,70,0,68,70,72,60,70],
[56,58,53,61,62,0,53,70,60,68],
[65,65,65,65,60,77,0,74,64,74],
[57,54,60,48,58,60,56,0,59,63],
[72,66,62,69,70,70,66,71,0,79],
[58,66,60,57,60,62,56,67,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,54,56,53,57,51,50,50,62],
[70,0,61,63,70,59,48,54,44,52],
[76,69,0,62,71,56,53,70,56,57],
[74,67,68,0,70,65,67,61,70,50],
[77,60,59,60,0,57,58,62,63,62],
[73,71,74,65,73,0,66,69,69,64],
[79,82,77,63,72,64,0,66,68,67],
[80,76,60,69,68,61,64,0,63,63],
[80,86,74,60,67,61,62,67,0,68],
[68,78,73,80,68,66,63,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,59,68,77,62,55,81,47,36],
[69,0,78,61,79,56,60,69,65,63],
[71,52,0,64,69,59,68,90,60,60],
[62,69,66,0,75,69,84,86,57,64],
[53,51,61,55,0,59,51,64,55,52],
[68,74,71,61,71,0,61,80,58,67],
[75,70,62,46,79,69,0,78,44,70],
[49,61,40,44,66,50,52,0,48,43],
[83,65,70,73,75,72,86,82,0,60],
[94,67,70,66,78,63,60,87,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,73,72,83,59,87,69,79,80],
[63,0,64,64,86,66,79,61,85,84],
[57,66,0,69,74,61,88,70,78,72],
[58,66,61,0,84,69,87,67,72,63],
[47,44,56,46,0,47,78,60,62,56],
[71,64,69,61,83,0,80,50,74,62],
[43,51,42,43,52,50,0,52,68,43],
[61,69,60,63,70,80,78,0,62,59],
[51,45,52,58,68,56,62,68,0,45],
[50,46,58,67,74,68,87,71,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,75,70,71,62,67,60,70,70],
[51,0,69,65,61,59,74,59,64,71],
[55,61,0,63,63,54,65,55,71,52],
[60,65,67,0,59,55,67,57,69,58],
[59,69,67,71,0,60,71,67,66,60],
[68,71,76,75,70,0,71,60,73,57],
[63,56,65,63,59,59,0,60,54,60],
[70,71,75,73,63,70,70,0,75,67],
[60,66,59,61,64,57,76,55,0,58],
[60,59,78,72,70,73,70,63,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,74,71,58,74,67,66,55,64],
[81,0,72,61,45,64,71,63,64,82],
[56,58,0,44,53,56,67,50,69,64],
[59,69,86,0,67,68,54,69,63,72],
[72,85,77,63,0,57,66,63,70,69],
[56,66,74,62,73,0,65,60,73,81],
[63,59,63,76,64,65,0,60,60,69],
[64,67,80,61,67,70,70,0,68,79],
[75,66,61,67,60,57,70,62,0,79],
[66,48,66,58,61,49,61,51,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,58,60,60,64,59,67,61,57],
[69,0,62,61,66,67,69,72,68,63],
[72,68,0,62,57,66,63,65,65,66],
[70,69,68,0,65,69,62,69,63,63],
[70,64,73,65,0,62,71,70,69,64],
[66,63,64,61,68,0,63,72,52,62],
[71,61,67,68,59,67,0,73,63,59],
[63,58,65,61,60,58,57,0,57,59],
[69,62,65,67,61,78,67,73,0,66],
[73,67,64,67,66,68,71,71,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,68,58,62,78,63,65,64,68],
[64,0,67,51,72,78,50,66,63,57],
[62,63,0,59,71,76,57,63,62,64],
[72,79,71,0,84,93,66,63,77,73],
[68,58,59,46,0,76,52,55,60,60],
[52,52,54,37,54,0,38,56,54,52],
[67,80,73,64,78,92,0,76,72,85],
[65,64,67,67,75,74,54,0,74,68],
[66,67,68,53,70,76,58,56,0,68],
[62,73,66,57,70,78,45,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,70,79,80,59,74,65,68,70],
[66,0,72,69,71,62,75,65,60,59],
[60,58,0,66,67,57,65,60,58,62],
[51,61,64,0,61,56,58,62,45,57],
[50,59,63,69,0,52,70,50,65,57],
[71,68,73,74,78,0,68,55,59,79],
[56,55,65,72,60,62,0,59,42,56],
[65,65,70,68,80,75,71,0,68,60],
[62,70,72,85,65,71,88,62,0,69],
[60,71,68,73,73,51,74,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,65,61,66,55,73,64,63,57],
[62,0,55,55,48,59,84,69,67,63],
[65,75,0,65,53,70,76,76,67,55],
[69,75,65,0,56,74,85,81,68,79],
[64,82,77,74,0,82,75,70,76,74],
[75,71,60,56,48,0,85,70,67,68],
[57,46,54,45,55,45,0,54,43,40],
[66,61,54,49,60,60,76,0,62,55],
[67,63,63,62,54,63,87,68,0,65],
[73,67,75,51,56,62,90,75,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,64,61,69,68,69,64,63,66],
[73,0,66,66,76,60,81,71,58,70],
[66,64,0,64,71,61,72,65,60,68],
[69,64,66,0,68,70,68,70,68,61],
[61,54,59,62,0,52,63,56,53,73],
[62,70,69,60,78,0,75,70,66,67],
[61,49,58,62,67,55,0,57,51,59],
[66,59,65,60,74,60,73,0,60,71],
[67,72,70,62,77,64,79,70,0,75],
[64,60,62,69,57,63,71,59,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,56,61,57,65,63,65,55,58],
[66,0,69,67,55,64,60,69,61,59],
[74,61,0,62,60,70,56,56,63,67],
[69,63,68,0,65,73,57,59,59,58],
[73,75,70,65,0,78,69,62,66,64],
[65,66,60,57,52,0,58,62,53,58],
[67,70,74,73,61,72,0,67,71,74],
[65,61,74,71,68,68,63,0,61,68],
[75,69,67,71,64,77,59,69,0,72],
[72,71,63,72,66,72,56,62,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,61,65,68,58,65,70,58,65],
[71,0,65,66,81,63,63,65,68,71],
[69,65,0,61,75,59,62,73,58,59],
[65,64,69,0,66,61,58,69,59,58],
[62,49,55,64,0,63,62,65,58,69],
[72,67,71,69,67,0,74,76,61,66],
[65,67,68,72,68,56,0,57,59,63],
[60,65,57,61,65,54,73,0,69,66],
[72,62,72,71,72,69,71,61,0,69],
[65,59,71,72,61,64,67,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,56,79,87,57,49,71,55,75],
[82,0,92,87,93,81,82,89,83,64],
[74,38,0,69,72,48,57,64,52,66],
[51,43,61,0,73,56,65,53,43,42],
[43,37,58,57,0,61,38,58,72,35],
[73,49,82,74,69,0,72,81,42,75],
[81,48,73,65,92,58,0,70,76,74],
[59,41,66,77,72,49,60,0,62,41],
[75,47,78,87,58,88,54,68,0,70],
[55,66,64,88,95,55,56,89,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,73,63,69,72,68,68,67,66],
[66,0,60,72,57,66,56,63,74,62],
[57,70,0,65,73,68,69,63,69,60],
[67,58,65,0,58,65,66,69,67,61],
[61,73,57,72,0,71,58,73,67,62],
[58,64,62,65,59,0,70,56,63,61],
[62,74,61,64,72,60,0,66,74,65],
[62,67,67,61,57,74,64,0,67,72],
[63,56,61,63,63,67,56,63,0,59],
[64,68,70,69,68,69,65,58,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,45,41,43,67,58,57,49,28],
[38,0,57,57,43,45,42,60,56,37],
[85,73,0,74,84,78,61,70,59,53],
[89,73,56,0,64,74,67,73,57,50],
[87,87,46,66,0,71,52,68,66,34],
[63,85,52,56,59,0,68,69,27,40],
[72,88,69,63,78,62,0,73,65,69],
[73,70,60,57,62,61,57,0,65,32],
[81,74,71,73,64,103,65,65,0,56],
[102,93,77,80,96,90,61,98,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,69,74,64,65,66,77,65,72],
[64,0,65,74,69,74,61,80,65,72],
[61,65,0,70,66,68,60,78,61,68],
[56,56,60,0,66,67,52,65,58,64],
[66,61,64,64,0,69,53,72,57,67],
[65,56,62,63,61,0,60,69,57,59],
[64,69,70,78,77,70,0,81,71,73],
[53,50,52,65,58,61,49,0,55,63],
[65,65,69,72,73,73,59,75,0,69],
[58,58,62,66,63,71,57,67,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,46,55,71,66,64,55,75,64],
[65,0,46,36,90,52,51,40,36,40],
[84,84,0,67,58,60,66,66,80,72],
[75,94,63,0,92,74,81,47,62,85],
[59,40,72,38,0,46,64,56,56,65],
[64,78,70,56,84,0,68,81,96,66],
[66,79,64,49,66,62,0,57,68,75],
[75,90,64,83,74,49,73,0,66,79],
[55,94,50,68,74,34,62,64,0,68],
[66,90,58,45,65,64,55,51,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,94,62,78,81,100,83,69,104],
[42,0,42,51,75,41,45,60,58,82],
[36,88,0,54,53,41,78,63,70,79],
[68,79,76,0,80,67,78,62,95,79],
[52,55,77,50,0,36,67,73,75,77],
[49,89,89,63,94,0,92,72,79,91],
[30,85,52,52,63,38,0,56,75,78],
[47,70,67,68,57,58,74,0,65,68],
[61,72,60,35,55,51,55,65,0,72],
[26,48,51,51,53,39,52,62,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,48,63,57,63,58,59,61,51],
[65,0,78,54,53,61,65,58,61,54],
[82,52,0,68,67,65,68,67,61,66],
[67,76,62,0,58,75,66,71,67,60],
[73,77,63,72,0,57,60,67,70,63],
[67,69,65,55,73,0,66,64,70,59],
[72,65,62,64,70,64,0,71,70,66],
[71,72,63,59,63,66,59,0,62,56],
[69,69,69,63,60,60,60,68,0,53],
[79,76,64,70,67,71,64,74,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,51,54,57,50,56,64,59,56],
[67,0,67,70,50,55,62,57,68,55],
[79,63,0,66,65,57,66,69,72,60],
[76,60,64,0,67,58,66,57,65,55],
[73,80,65,63,0,62,75,64,63,61],
[80,75,73,72,68,0,75,72,71,58],
[74,68,64,64,55,55,0,57,71,51],
[66,73,61,73,66,58,73,0,77,65],
[71,62,58,65,67,59,59,53,0,54],
[74,75,70,75,69,72,79,65,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,61,72,70,56,64,55,77,77],
[44,0,72,64,71,70,50,56,69,65],
[69,58,0,75,70,68,48,61,81,59],
[58,66,55,0,67,53,47,50,65,60],
[60,59,60,63,0,46,50,31,54,56],
[74,60,62,77,84,0,52,44,55,68],
[66,80,82,83,80,78,0,55,81,75],
[75,74,69,80,99,86,75,0,87,64],
[53,61,49,65,76,75,49,43,0,53],
[53,65,71,70,74,62,55,66,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,63,65,62,57,58,61,67,66],
[73,0,51,73,63,70,49,50,61,51],
[67,79,0,76,73,67,65,62,66,55],
[65,57,54,0,63,64,54,48,65,54],
[68,67,57,67,0,60,56,52,68,44],
[73,60,63,66,70,0,58,64,59,57],
[72,81,65,76,74,72,0,65,78,49],
[69,80,68,82,78,66,65,0,84,70],
[63,69,64,65,62,71,52,46,0,61],
[64,79,75,76,86,73,81,60,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,70,81,79,70,67,66,62,59],
[59,0,57,67,63,57,52,59,62,61],
[60,73,0,77,63,57,66,61,60,69],
[49,63,53,0,63,54,51,49,56,55],
[51,67,67,67,0,61,60,56,64,60],
[60,73,73,76,69,0,66,70,60,65],
[63,78,64,79,70,64,0,62,73,69],
[64,71,69,81,74,60,68,0,66,61],
[68,68,70,74,66,70,57,64,0,64],
[71,69,61,75,70,65,61,69,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,69,64,69,70,72,69,58,78],
[59,0,57,62,66,64,55,64,66,55],
[61,73,0,64,73,70,68,60,60,71],
[66,68,66,0,68,70,67,59,63,66],
[61,64,57,62,0,64,58,59,55,63],
[60,66,60,60,66,0,56,57,61,59],
[58,75,62,63,72,74,0,63,63,70],
[61,66,70,71,71,73,67,0,67,74],
[72,64,70,67,75,69,67,63,0,72],
[52,75,59,64,67,71,60,56,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,81,39,71,51,58,58,39,30],
[40,0,30,70,39,40,30,39,70,30],
[49,100,0,79,41,91,49,79,79,70],
[91,60,51,0,60,91,28,28,89,0],
[59,91,89,70,0,59,89,98,70,70],
[79,90,39,39,71,0,39,39,39,39],
[72,100,81,102,41,91,0,111,102,102],
[72,91,51,102,32,91,19,0,70,70],
[91,60,51,41,60,91,28,60,0,0],
[100,100,60,130,60,91,28,60,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,54,74,68,55,73,61,93,48],
[35,0,45,68,56,44,27,42,51,53],
[76,85,0,75,58,68,42,81,46,65],
[56,62,55,0,32,60,31,31,23,61],
[62,74,72,98,0,66,47,85,96,85],
[75,86,62,70,64,0,58,55,69,80],
[57,103,88,99,83,72,0,79,85,88],
[69,88,49,99,45,75,51,0,63,58],
[37,79,84,107,34,61,45,67,0,42],
[82,77,65,69,45,50,42,72,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,83,68,89,78,71,76,86,59],
[43,0,62,52,63,68,41,55,66,44],
[47,68,0,36,57,46,41,47,54,39],
[62,78,94,0,85,78,72,65,91,66],
[41,67,73,45,0,69,58,57,57,47],
[52,62,84,52,61,0,55,62,76,52],
[59,89,89,58,72,75,0,65,83,57],
[54,75,83,65,73,68,65,0,69,63],
[44,64,76,39,73,54,47,61,0,48],
[71,86,91,64,83,78,73,67,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,67,68,60,61,51,62,64,60],
[59,0,68,58,67,60,55,54,67,48],
[63,62,0,52,63,68,56,66,67,55],
[62,72,78,0,64,58,49,62,68,50],
[70,63,67,66,0,60,70,61,69,61],
[69,70,62,72,70,0,64,64,83,60],
[79,75,74,81,60,66,0,66,79,73],
[68,76,64,68,69,66,64,0,81,58],
[66,63,63,62,61,47,51,49,0,34],
[70,82,75,80,69,70,57,72,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,67,78,55,77,66,38,63,67],
[68,0,76,69,45,76,68,52,73,75],
[63,54,0,76,44,58,72,51,78,46],
[52,61,54,0,46,58,59,35,53,61],
[75,85,86,84,0,58,63,74,70,77],
[53,54,72,72,72,0,67,52,61,57],
[64,62,58,71,67,63,0,69,53,68],
[92,78,79,95,56,78,61,0,71,84],
[67,57,52,77,60,69,77,59,0,58],
[63,55,84,69,53,73,62,46,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,49,67,69,62,68,59,61,74],
[67,0,53,72,64,67,63,61,63,70],
[81,77,0,74,75,76,77,72,64,79],
[63,58,56,0,65,56,60,47,60,68],
[61,66,55,65,0,55,69,51,60,74],
[68,63,54,74,75,0,67,65,59,81],
[62,67,53,70,61,63,0,56,63,63],
[71,69,58,83,79,65,74,0,65,73],
[69,67,66,70,70,71,67,65,0,80],
[56,60,51,62,56,49,67,57,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,71,66,60,63,68,69,73],
[63,0,65,72,68,66,64,67,63,69],
[63,65,0,75,68,60,57,78,69,71],
[59,58,55,0,63,60,61,67,71,67],
[64,62,62,67,0,55,64,63,61,71],
[70,64,70,70,75,0,71,72,69,71],
[67,66,73,69,66,59,0,66,68,72],
[62,63,52,63,67,58,64,0,66,69],
[61,67,61,59,69,61,62,64,0,68],
[57,61,59,63,59,59,58,61,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,74,77,57,59,80,64,38,55],
[72,0,89,78,71,66,75,71,67,59],
[56,41,0,74,63,53,67,69,59,55],
[53,52,56,0,59,57,71,58,58,63],
[73,59,67,71,0,45,76,72,69,50],
[71,64,77,73,85,0,97,85,82,86],
[50,55,63,59,54,33,0,50,54,53],
[66,59,61,72,58,45,80,0,58,50],
[92,63,71,72,61,48,76,72,0,59],
[75,71,75,67,80,44,77,80,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,60,38,74,57,73,59,67],
[57,0,54,50,36,78,40,71,45,56],
[61,76,0,72,48,72,71,76,59,79],
[70,80,58,0,50,68,64,57,67,78],
[92,94,82,80,0,79,64,84,75,86],
[56,52,58,62,51,0,37,61,55,64],
[73,90,59,66,66,93,0,79,66,97],
[57,59,54,73,46,69,51,0,65,74],
[71,85,71,63,55,75,64,65,0,80],
[63,74,51,52,44,66,33,56,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,57,68,58,69,71,66,67,65],
[65,0,61,59,57,60,66,51,60,57],
[73,69,0,71,63,64,73,72,71,68],
[62,71,59,0,61,59,66,60,67,60],
[72,73,67,69,0,71,76,67,68,60],
[61,70,66,71,59,0,67,58,71,60],
[59,64,57,64,54,63,0,58,60,59],
[64,79,58,70,63,72,72,0,69,63],
[63,70,59,63,62,59,70,61,0,66],
[65,73,62,70,70,70,71,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,70,71,66,74,63,62,73],
[61,0,63,60,74,76,78,65,61,69],
[62,67,0,68,70,75,84,64,70,73],
[60,70,62,0,67,69,70,57,57,72],
[59,56,60,63,0,61,81,65,65,59],
[64,54,55,61,69,0,77,60,51,60],
[56,52,46,60,49,53,0,66,47,52],
[67,65,66,73,65,70,64,0,63,70],
[68,69,60,73,65,79,83,67,0,74],
[57,61,57,58,71,70,78,60,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,60,66,51,54,53,62,38,73],
[65,0,46,61,52,39,66,45,65,75],
[70,84,0,70,74,61,70,72,59,86],
[64,69,60,0,70,58,68,85,68,77],
[79,78,56,60,0,66,81,70,64,74],
[76,91,69,72,64,0,84,85,72,86],
[77,64,60,62,49,46,0,67,62,66],
[68,85,58,45,60,45,63,0,54,73],
[92,65,71,62,66,58,68,76,0,87],
[57,55,44,53,56,44,64,57,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,68,63,73,72,66,59,66,68],
[64,0,63,68,62,76,68,66,60,65],
[62,67,0,74,69,79,69,59,71,70],
[67,62,56,0,63,70,64,57,62,63],
[57,68,61,67,0,73,61,62,67,67],
[58,54,51,60,57,0,58,44,48,57],
[64,62,61,66,69,72,0,63,70,65],
[71,64,71,73,68,86,67,0,66,70],
[64,70,59,68,63,82,60,64,0,63],
[62,65,60,67,63,73,65,60,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,52,71,64,66,60,51,65,59],
[66,0,57,67,69,72,60,60,67,63],
[78,73,0,75,70,78,71,77,64,60],
[59,63,55,0,65,70,61,63,69,58],
[66,61,60,65,0,72,68,56,60,55],
[64,58,52,60,58,0,49,51,65,50],
[70,70,59,69,62,81,0,66,66,63],
[79,70,53,67,74,79,64,0,74,63],
[65,63,66,61,70,65,64,56,0,65],
[71,67,70,72,75,80,67,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,80,67,67,72,64,67,63,73],
[63,0,64,60,68,61,60,55,57,63],
[50,66,0,50,54,64,54,47,52,64],
[63,70,80,0,69,60,64,55,67,73],
[63,62,76,61,0,58,56,58,59,70],
[58,69,66,70,72,0,69,58,59,80],
[66,70,76,66,74,61,0,61,59,69],
[63,75,83,75,72,72,69,0,65,79],
[67,73,78,63,71,71,71,65,0,76],
[57,67,66,57,60,50,61,51,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,70,70,61,76,70,75,75,74],
[47,0,61,53,62,64,65,60,63,66],
[60,69,0,67,63,64,71,73,66,72],
[60,77,63,0,67,69,73,68,74,71],
[69,68,67,63,0,69,64,72,63,65],
[54,66,66,61,61,0,69,71,65,69],
[60,65,59,57,66,61,0,68,68,58],
[55,70,57,62,58,59,62,0,69,61],
[55,67,64,56,67,65,62,61,0,61],
[56,64,58,59,65,61,72,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,66,93,74,38,67,57,51,17],
[87,0,92,89,83,71,58,71,71,79],
[64,38,0,61,56,37,55,56,64,27],
[37,41,69,0,66,46,72,52,48,36],
[56,47,74,64,0,47,72,51,60,36],
[92,59,93,84,83,0,81,55,63,47],
[63,72,75,58,58,49,0,46,57,61],
[73,59,74,78,79,75,84,0,96,54],
[79,59,66,82,70,67,73,34,0,55],
[113,51,103,94,94,83,69,76,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,61,59,67,58,85,65,68,59],
[51,0,66,49,52,62,60,62,53,58],
[69,64,0,61,73,73,68,74,73,79],
[71,81,69,0,69,64,75,66,79,71],
[63,78,57,61,0,64,80,69,77,70],
[72,68,57,66,66,0,81,87,73,70],
[45,70,62,55,50,49,0,63,60,60],
[65,68,56,64,61,43,67,0,63,74],
[62,77,57,51,53,57,70,67,0,53],
[71,72,51,59,60,60,70,56,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,59,60,61,53,53,54,52,58],
[70,0,62,67,63,64,65,69,76,76],
[71,68,0,74,67,63,76,69,63,62],
[70,63,56,0,61,56,57,64,43,72],
[69,67,63,69,0,61,52,63,60,65],
[77,66,67,74,69,0,54,73,60,73],
[77,65,54,73,78,76,0,68,64,59],
[76,61,61,66,67,57,62,0,61,53],
[78,54,67,87,70,70,66,69,0,72],
[72,54,68,58,65,57,71,77,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,68,65,70,62,67,69,66,75],
[54,0,65,67,63,63,66,61,61,63],
[62,65,0,70,60,61,67,69,65,63],
[65,63,60,0,58,58,67,61,66,61],
[60,67,70,72,0,73,77,72,69,69],
[68,67,69,72,57,0,68,67,62,63],
[63,64,63,63,53,62,0,56,61,55],
[61,69,61,69,58,63,74,0,59,64],
[64,69,65,64,61,68,69,71,0,65],
[55,67,67,69,61,67,75,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,55,60,57,67,65,51,77,71],
[42,0,52,49,52,51,49,49,50,41],
[75,78,0,64,73,69,67,74,74,61],
[70,81,66,0,71,67,69,62,66,61],
[73,78,57,59,0,60,66,62,68,63],
[63,79,61,63,70,0,63,61,63,67],
[65,81,63,61,64,67,0,68,62,55],
[79,81,56,68,68,69,62,0,72,65],
[53,80,56,64,62,67,68,58,0,56],
[59,89,69,69,67,63,75,65,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,18,130,53,77,0,77,112,77],
[53,0,71,130,53,130,53,18,53,71],
[112,59,0,112,53,112,112,59,112,59],
[0,0,18,0,0,59,0,0,0,18],
[77,77,77,130,0,77,59,77,112,77],
[53,0,18,71,53,0,53,0,53,18],
[130,77,18,130,71,77,0,77,112,77],
[53,112,71,130,53,130,53,0,112,130],
[18,77,18,130,18,77,18,18,0,77],
[53,59,71,112,53,112,53,0,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,74,67,55,50,66,63,69,55],
[60,0,52,60,60,63,56,54,59,51],
[56,78,0,70,61,56,59,58,65,67],
[63,70,60,0,71,63,68,65,65,53],
[75,70,69,59,0,58,55,43,50,54],
[80,67,74,67,72,0,51,72,71,73],
[64,74,71,62,75,79,0,49,50,68],
[67,76,72,65,87,58,81,0,65,73],
[61,71,65,65,80,59,80,65,0,58],
[75,79,63,77,76,57,62,57,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,57,67,72,72,72,79,66,80],
[49,0,48,60,60,56,63,68,59,59],
[73,82,0,74,78,83,77,78,65,79],
[63,70,56,0,69,52,71,64,50,70],
[58,70,52,61,0,54,76,70,65,69],
[58,74,47,78,76,0,74,86,56,69],
[58,67,53,59,54,56,0,62,63,57],
[51,62,52,66,60,44,68,0,68,61],
[64,71,65,80,65,74,67,62,0,67],
[50,71,51,60,61,61,73,69,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,66,62,83,79,59,60,55,62],
[50,0,37,49,63,65,54,54,48,70],
[64,93,0,80,91,88,70,68,68,52],
[68,81,50,0,61,73,65,49,52,56],
[47,67,39,69,0,64,59,47,67,61],
[51,65,42,57,66,0,57,46,47,56],
[71,76,60,65,71,73,0,42,54,63],
[70,76,62,81,83,84,88,0,71,78],
[75,82,62,78,63,83,76,59,0,56],
[68,60,78,74,69,74,67,52,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,71,52,66,68,82,72,79],
[66,0,74,78,50,64,65,74,75,71],
[62,56,0,84,75,58,68,76,74,63],
[59,52,46,0,57,51,68,64,57,56],
[78,80,55,73,0,61,64,82,72,81],
[64,66,72,79,69,0,75,72,58,62],
[62,65,62,62,66,55,0,78,64,67],
[48,56,54,66,48,58,52,0,79,72],
[58,55,56,73,58,72,66,51,0,79],
[51,59,67,74,49,68,63,58,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,75,60,70,55,73,70,80,65],
[60,0,74,64,75,67,59,75,58,62],
[55,56,0,51,58,46,58,68,63,53],
[70,66,79,0,62,62,68,76,73,62],
[60,55,72,68,0,56,64,76,74,66],
[75,63,84,68,74,0,76,69,69,65],
[57,71,72,62,66,54,0,79,63,51],
[60,55,62,54,54,61,51,0,69,54],
[50,72,67,57,56,61,67,61,0,60],
[65,68,77,68,64,65,79,76,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,72,58,75,62,61,72,58,69],
[56,0,55,52,61,51,56,59,49,50],
[58,75,0,58,64,60,65,61,60,63],
[72,78,72,0,72,67,72,73,66,61],
[55,69,66,58,0,55,63,70,53,55],
[68,79,70,63,75,0,69,77,72,68],
[69,74,65,58,67,61,0,69,62,60],
[58,71,69,57,60,53,61,0,52,64],
[72,81,70,64,77,58,68,78,0,64],
[61,80,67,69,75,62,70,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,55,57,62,59,59,58,65,65],
[65,0,58,60,61,53,57,54,65,68],
[75,72,0,71,64,66,61,63,71,69],
[73,70,59,0,63,60,65,61,62,65],
[68,69,66,67,0,63,68,62,67,71],
[71,77,64,70,67,0,65,64,72,72],
[71,73,69,65,62,65,0,67,66,70],
[72,76,67,69,68,66,63,0,71,73],
[65,65,59,68,63,58,64,59,0,64],
[65,62,61,65,59,58,60,57,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,58,60,62,55,65,58,72,56],
[69,0,51,58,52,51,62,41,69,50],
[72,79,0,71,70,64,79,57,71,61],
[70,72,59,0,69,60,69,55,71,59],
[68,78,60,61,0,63,72,56,74,69],
[75,79,66,70,67,0,70,63,81,67],
[65,68,51,61,58,60,0,46,64,56],
[72,89,73,75,74,67,84,0,74,64],
[58,61,59,59,56,49,66,56,0,53],
[74,80,69,71,61,63,74,66,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,84,104,84,130,130,26,58,46],
[58,0,58,58,84,130,104,26,58,104],
[46,72,0,46,26,72,104,72,46,46],
[26,72,84,0,26,130,130,26,84,46],
[46,46,104,104,0,130,104,72,104,46],
[0,0,58,0,0,0,58,26,58,46],
[0,26,26,0,26,72,0,26,0,46],
[104,104,58,104,58,104,104,0,58,104],
[72,72,84,46,26,72,130,72,0,46],
[84,26,84,84,84,84,84,26,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,74,57,60,49,74,65,52,80],
[59,0,63,47,66,56,57,62,57,72],
[56,67,0,40,63,53,49,49,45,62],
[73,83,90,0,75,65,75,69,80,76],
[70,64,67,55,0,54,59,66,56,67],
[81,74,77,65,76,0,74,65,66,81],
[56,73,81,55,71,56,0,74,59,72],
[65,68,81,61,64,65,56,0,63,74],
[78,73,85,50,74,64,71,67,0,67],
[50,58,68,54,63,49,58,56,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,68,72,73,72,77,66,74,72],
[70,0,68,61,61,75,77,68,69,65],
[62,62,0,60,66,81,70,60,67,68],
[58,69,70,0,59,84,64,67,62,60],
[57,69,64,71,0,74,76,67,78,64],
[58,55,49,46,56,0,66,50,58,57],
[53,53,60,66,54,64,0,49,59,66],
[64,62,70,63,63,80,81,0,64,61],
[56,61,63,68,52,72,71,66,0,65],
[58,65,62,70,66,73,64,69,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,69,59,73,61,52,57,81,62],
[78,0,73,68,68,77,61,75,75,69],
[61,57,0,68,69,59,48,56,57,55],
[71,62,62,0,76,65,62,69,68,60],
[57,62,61,54,0,56,50,60,59,49],
[69,53,71,65,74,0,61,74,67,61],
[78,69,82,68,80,69,0,66,79,62],
[73,55,74,61,70,56,64,0,66,63],
[49,55,73,62,71,63,51,64,0,65],
[68,61,75,70,81,69,68,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,19,61,46,26,41,42,60,30],
[47,0,44,88,58,47,73,73,58,73],
[111,86,0,75,60,29,55,60,60,96],
[69,42,55,0,59,80,62,62,59,37],
[84,72,70,71,0,59,77,52,49,45],
[104,83,101,50,71,0,71,60,64,87],
[89,57,75,68,53,59,0,90,49,79],
[88,57,70,68,78,70,40,0,38,56],
[70,72,70,71,81,66,81,92,0,56],
[100,57,34,93,85,43,51,74,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,90,75,80,78,90,86,91,63],
[35,0,55,38,53,59,66,65,57,46],
[40,75,0,48,66,53,57,50,71,73],
[55,92,82,0,66,84,90,80,88,56],
[50,77,64,64,0,64,69,65,66,56],
[52,71,77,46,66,0,50,38,72,55],
[40,64,73,40,61,80,0,67,80,76],
[44,65,80,50,65,92,63,0,71,69],
[39,73,59,42,64,58,50,59,0,59],
[67,84,57,74,74,75,54,61,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,72,66,71,62,72,74,56],
[63,0,66,78,62,71,64,74,76,70],
[67,64,0,71,59,64,57,70,78,71],
[58,52,59,0,55,66,56,69,64,57],
[64,68,71,75,0,59,59,65,65,74],
[59,59,66,64,71,0,65,70,69,71],
[68,66,73,74,71,65,0,75,71,69],
[58,56,60,61,65,60,55,0,71,61],
[56,54,52,66,65,61,59,59,0,59],
[74,60,59,73,56,59,61,69,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,73,64,64,71,76,60,73,75],
[59,0,66,73,57,61,67,63,70,70],
[57,64,0,66,62,64,64,56,64,69],
[66,57,64,0,56,62,64,54,64,73],
[66,73,68,74,0,82,64,72,73,78],
[59,69,66,68,48,0,67,59,66,78],
[54,63,66,66,66,63,0,62,63,68],
[70,67,74,76,58,71,68,0,67,74],
[57,60,66,66,57,64,67,63,0,71],
[55,60,61,57,52,52,62,56,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,57,51,51,72,65,21,59,50],
[92,0,62,70,54,81,72,72,70,55],
[73,68,0,107,61,76,77,63,78,60],
[79,60,23,0,45,73,58,30,63,42],
[79,76,69,85,0,94,64,68,78,67],
[58,49,54,57,36,0,33,39,63,64],
[65,58,53,72,66,97,0,21,71,54],
[109,58,67,100,62,91,109,0,79,68],
[71,60,52,67,52,67,59,51,0,37],
[80,75,70,88,63,66,76,62,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,74,67,67,63,66,56,60],
[70,0,58,86,78,58,68,68,66,61],
[67,72,0,66,67,65,69,60,61,61],
[56,44,64,0,64,45,55,57,68,51],
[63,52,63,66,0,59,63,67,55,57],
[63,72,65,85,71,0,68,63,68,66],
[67,62,61,75,67,62,0,66,64,53],
[64,62,70,73,63,67,64,0,70,64],
[74,64,69,62,75,62,66,60,0,54],
[70,69,69,79,73,64,77,66,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,70,43,60,39,46,53,68,68],
[67,0,71,41,38,69,44,44,43,58],
[60,59,0,44,38,62,54,80,69,84],
[87,89,86,0,38,55,79,98,86,70],
[70,92,92,92,0,35,59,78,81,75],
[91,61,68,75,95,0,101,85,84,119],
[84,86,76,51,71,29,0,61,62,91],
[77,86,50,32,52,45,69,0,104,85],
[62,87,61,44,49,46,68,26,0,54],
[62,72,46,60,55,11,39,45,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,76,76,72,70,64,71,79,79],
[57,0,59,61,52,61,57,66,65,61],
[54,71,0,62,60,62,52,58,69,68],
[54,69,68,0,60,66,66,70,68,67],
[58,78,70,70,0,70,64,69,70,65],
[60,69,68,64,60,0,62,59,63,62],
[66,73,78,64,66,68,0,71,69,73],
[59,64,72,60,61,71,59,0,68,63],
[51,65,61,62,60,67,61,62,0,63],
[51,69,62,63,65,68,57,67,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,73,70,64,70,62,66,73,68],
[62,0,71,71,62,63,65,62,72,68],
[57,59,0,65,60,56,62,56,66,63],
[60,59,65,0,67,63,62,59,75,65],
[66,68,70,63,0,69,73,64,77,72],
[60,67,74,67,61,0,58,57,76,69],
[68,65,68,68,57,72,0,59,71,63],
[64,68,74,71,66,73,71,0,77,70],
[57,58,64,55,53,54,59,53,0,52],
[62,62,67,65,58,61,67,60,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,74,55,50,64,80,69,47,40],
[69,0,74,63,51,50,81,76,62,46],
[56,56,0,60,56,50,65,65,57,61],
[75,67,70,0,61,60,91,64,68,71],
[80,79,74,69,0,48,80,82,60,64],
[66,80,80,70,82,0,88,65,58,60],
[50,49,65,39,50,42,0,64,44,46],
[61,54,65,66,48,65,66,0,58,55],
[83,68,73,62,70,72,86,72,0,65],
[90,84,69,59,66,70,84,75,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,63,70,63,57,64,56,62,60],
[71,0,67,74,74,65,74,70,72,68],
[67,63,0,70,66,64,64,73,77,68],
[60,56,60,0,61,58,59,67,62,67],
[67,56,64,69,0,57,69,71,75,66],
[73,65,66,72,73,0,68,59,71,70],
[66,56,66,71,61,62,0,67,69,64],
[74,60,57,63,59,71,63,0,65,55],
[68,58,53,68,55,59,61,65,0,59],
[70,62,62,63,64,60,66,75,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,49,65,63,73,68,92,59],
[66,0,70,62,55,52,56,59,94,58],
[61,60,0,62,64,67,67,73,82,56],
[81,68,68,0,58,65,79,69,102,77],
[65,75,66,72,0,71,87,80,89,68],
[67,78,63,65,59,0,85,76,95,64],
[57,74,63,51,43,45,0,58,80,48],
[62,71,57,61,50,54,72,0,75,69],
[38,36,48,28,41,35,50,55,0,47],
[71,72,74,53,62,66,82,61,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,74,73,41,65,71,51,47,70],
[73,0,71,74,62,78,79,51,74,78],
[56,59,0,54,45,67,66,58,50,53],
[57,56,76,0,56,54,69,46,60,68],
[89,68,85,74,0,78,73,65,75,83],
[65,52,63,76,52,0,58,47,50,76],
[59,51,64,61,57,72,0,57,46,58],
[79,79,72,84,65,83,73,0,62,69],
[83,56,80,70,55,80,84,68,0,87],
[60,52,77,62,47,54,72,61,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,79,65,74,73,56,66,60,66],
[73,0,81,65,77,80,73,66,75,77],
[51,49,0,51,64,56,55,57,52,68],
[65,65,79,0,72,68,60,60,69,78],
[56,53,66,58,0,69,62,66,61,61],
[57,50,74,62,61,0,64,57,64,64],
[74,57,75,70,68,66,0,69,73,73],
[64,64,73,70,64,73,61,0,69,73],
[70,55,78,61,69,66,57,61,0,65],
[64,53,62,52,69,66,57,57,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,81,65,78,72,64,76,65,65],
[56,0,68,65,70,65,62,60,54,63],
[49,62,0,64,64,57,64,56,60,50],
[65,65,66,0,69,67,67,62,61,62],
[52,60,66,61,0,70,60,57,54,57],
[58,65,73,63,60,0,62,59,53,67],
[66,68,66,63,70,68,0,66,56,55],
[54,70,74,68,73,71,64,0,51,59],
[65,76,70,69,76,77,74,79,0,53],
[65,67,80,68,73,63,75,71,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,82,83,69,82,74,70,93,79],
[68,0,69,91,66,78,70,91,68,63],
[48,61,0,51,51,71,56,86,52,57],
[47,39,79,0,50,71,71,86,80,54],
[61,64,79,80,0,100,64,93,86,67],
[48,52,59,59,30,0,73,83,65,43],
[56,60,74,59,66,57,0,82,60,47],
[60,39,44,44,37,47,48,0,56,32],
[37,62,78,50,44,65,70,74,0,50],
[51,67,73,76,63,87,83,98,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,77,77,69,81,70,69,61,66],
[67,0,71,84,85,74,62,82,80,63],
[53,59,0,72,60,53,63,71,73,46],
[53,46,58,0,60,67,67,59,59,55],
[61,45,70,70,0,54,50,66,65,65],
[49,56,77,63,76,0,70,73,78,55],
[60,68,67,63,80,60,0,71,59,61],
[61,48,59,71,64,57,59,0,74,43],
[69,50,57,71,65,52,71,56,0,51],
[64,67,84,75,65,75,69,87,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,78,67,66,83,72,66,65,74],
[52,0,77,74,62,72,70,67,62,74],
[52,53,0,63,53,61,64,55,51,64],
[63,56,67,0,59,75,68,63,58,64],
[64,68,77,71,0,81,76,63,69,69],
[47,58,69,55,49,0,68,54,54,58],
[58,60,66,62,54,62,0,47,52,63],
[64,63,75,67,67,76,83,0,59,66],
[65,68,79,72,61,76,78,71,0,70],
[56,56,66,66,61,72,67,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,68,55,66,82,73,74,57,73],
[51,0,49,60,76,68,63,65,51,58],
[62,81,0,66,69,74,60,73,64,63],
[75,70,64,0,75,72,74,67,54,64],
[64,54,61,55,0,73,70,67,67,58],
[48,62,56,58,57,0,49,77,52,55],
[57,67,70,56,60,81,0,76,68,55],
[56,65,57,63,63,53,54,0,62,47],
[73,79,66,76,63,78,62,68,0,67],
[57,72,67,66,72,75,75,83,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,65,73,67,47,75,65,55,62],
[67,0,72,77,81,69,82,69,63,72],
[65,58,0,83,72,48,69,56,73,61],
[57,53,47,0,69,48,62,60,56,60],
[63,49,58,61,0,58,66,58,75,49],
[83,61,82,82,72,0,98,68,73,53],
[55,48,61,68,64,32,0,78,51,52],
[65,61,74,70,72,62,52,0,57,77],
[75,67,57,74,55,57,79,73,0,71],
[68,58,69,70,81,77,78,53,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,64,64,77,73,67,66,67],
[60,0,67,79,68,74,67,58,66,73],
[66,63,0,66,64,70,81,65,61,71],
[66,51,64,0,67,65,70,63,55,63],
[66,62,66,63,0,75,69,63,59,68],
[53,56,60,65,55,0,68,59,54,61],
[57,63,49,60,61,62,0,53,54,60],
[63,72,65,67,67,71,77,0,62,70],
[64,64,69,75,71,76,76,68,0,69],
[63,57,59,67,62,69,70,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,73,55,63,68,67,64,72],
[69,0,57,71,76,58,70,60,85,75],
[63,73,0,76,83,71,77,65,71,73],
[57,59,54,0,55,56,46,59,65,56],
[75,54,47,75,0,66,72,69,75,56],
[67,72,59,74,64,0,67,68,64,59],
[62,60,53,84,58,63,0,67,61,73],
[63,70,65,71,61,62,63,0,68,60],
[66,45,59,65,55,66,69,62,0,67],
[58,55,57,74,74,71,57,70,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,59,65,65,59,51,67,61,65],
[69,0,73,79,64,61,74,77,69,76],
[71,57,0,55,71,61,67,62,77,62],
[65,51,75,0,69,61,70,69,74,59],
[65,66,59,61,0,65,75,62,73,59],
[71,69,69,69,65,0,77,60,78,69],
[79,56,63,60,55,53,0,62,73,60],
[63,53,68,61,68,70,68,0,73,72],
[69,61,53,56,57,52,57,57,0,57],
[65,54,68,71,71,61,70,58,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,57,66,51,66,50,52,54,49],
[76,0,69,72,66,70,65,69,64,65],
[73,61,0,67,68,70,57,62,59,57],
[64,58,63,0,61,65,62,68,61,63],
[79,64,62,69,0,76,57,66,62,63],
[64,60,60,65,54,0,47,57,60,57],
[80,65,73,68,73,83,0,72,71,67],
[78,61,68,62,64,73,58,0,62,65],
[76,66,71,69,68,70,59,68,0,65],
[81,65,73,67,67,73,63,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,56,102,81,67,60,59,88,73],
[59,0,62,62,42,59,52,68,62,74],
[74,68,0,86,63,63,74,72,70,70],
[28,68,44,0,43,53,43,58,58,55],
[49,88,67,87,0,71,72,69,74,78],
[63,71,67,77,59,0,60,55,78,75],
[70,78,56,87,58,70,0,70,55,68],
[71,62,58,72,61,75,60,0,81,67],
[42,68,60,72,56,52,75,49,0,77],
[57,56,60,75,52,55,62,63,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,66,57,59,57,65,63,55,55],
[71,0,69,69,66,61,72,71,58,66],
[64,61,0,62,71,65,68,66,56,64],
[73,61,68,0,62,62,80,69,61,68],
[71,64,59,68,0,54,76,72,55,71],
[73,69,65,68,76,0,75,77,69,73],
[65,58,62,50,54,55,0,67,55,64],
[67,59,64,61,58,53,63,0,53,61],
[75,72,74,69,75,61,75,77,0,71],
[75,64,66,62,59,57,66,69,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,38,68,42,75,76,78,57,53],
[56,0,56,75,72,67,61,76,83,55],
[92,74,0,95,77,87,77,87,90,63],
[62,55,35,0,51,56,54,75,72,54],
[88,58,53,79,0,73,66,86,101,66],
[55,63,43,74,57,0,67,76,61,49],
[54,69,53,76,64,63,0,90,82,48],
[52,54,43,55,44,54,40,0,57,34],
[73,47,40,58,29,69,48,73,0,50],
[77,75,67,76,64,81,82,96,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,65,77,66,66,74,75,63],
[63,0,63,65,64,61,71,71,66,63],
[60,67,0,69,77,67,74,78,74,68],
[65,65,61,0,75,63,71,66,66,64],
[53,66,53,55,0,57,64,64,53,56],
[64,69,63,67,73,0,74,85,76,63],
[64,59,56,59,66,56,0,68,57,62],
[56,59,52,64,66,45,62,0,67,55],
[55,64,56,64,77,54,73,63,0,63],
[67,67,62,66,74,67,68,75,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,72,58,65,57,73,68,55,75],
[68,0,71,67,57,63,64,66,64,67],
[58,59,0,58,58,59,57,67,60,78],
[72,63,72,0,58,65,63,68,44,74],
[65,73,72,72,0,55,73,75,59,87],
[73,67,71,65,75,0,68,76,77,72],
[57,66,73,67,57,62,0,70,53,66],
[62,64,63,62,55,54,60,0,54,67],
[75,66,70,86,71,53,77,76,0,77],
[55,63,52,56,43,58,64,63,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,0,72,0,40,9,40,103,31],
[99,0,0,99,9,36,36,99,99,36],
[130,130,0,130,72,67,36,130,130,67],
[58,31,0,0,0,40,9,40,94,31],
[130,121,58,130,0,67,67,130,130,67],
[90,94,63,90,63,0,90,94,121,63],
[121,94,94,121,63,40,0,103,121,31],
[90,31,0,90,0,36,27,0,90,27],
[27,31,0,36,0,9,9,40,0,0],
[99,94,63,99,63,67,99,103,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,72,69,59,70,69,59,68,67],
[73,0,72,67,63,71,62,58,53,67],
[58,58,0,65,62,57,59,71,53,66],
[61,63,65,0,57,71,76,62,61,68],
[71,67,68,73,0,73,74,67,70,65],
[60,59,73,59,57,0,60,64,61,69],
[61,68,71,54,56,70,0,60,63,64],
[71,72,59,68,63,66,70,0,69,80],
[62,77,77,69,60,69,67,61,0,68],
[63,63,64,62,65,61,66,50,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,61,56,54,56,59,54,60,65],
[77,0,56,63,66,60,56,63,62,66],
[69,74,0,67,72,62,69,70,72,73],
[74,67,63,0,70,58,65,56,73,66],
[76,64,58,60,0,60,63,64,61,73],
[74,70,68,72,70,0,71,69,65,75],
[71,74,61,65,67,59,0,66,65,67],
[76,67,60,74,66,61,64,0,69,71],
[70,68,58,57,69,65,65,61,0,61],
[65,64,57,64,57,55,63,59,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,79,65,61,54,70,66,72],
[66,0,67,73,64,57,63,70,65,64],
[61,63,0,64,55,58,70,66,57,74],
[51,57,66,0,62,53,52,66,54,67],
[65,66,75,68,0,64,64,68,71,65],
[69,73,72,77,66,0,67,71,58,76],
[76,67,60,78,66,63,0,68,68,78],
[60,60,64,64,62,59,62,0,59,73],
[64,65,73,76,59,72,62,71,0,77],
[58,66,56,63,65,54,52,57,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,81,63,73,69,75,59,68,65],
[77,0,65,73,92,80,87,88,83,84],
[49,65,0,77,68,57,69,72,60,68],
[67,57,53,0,69,61,66,64,66,76],
[57,38,62,61,0,77,59,62,61,54],
[61,50,73,69,53,0,57,62,56,68],
[55,43,61,64,71,73,0,64,62,65],
[71,42,58,66,68,68,66,0,74,64],
[62,47,70,64,69,74,68,56,0,67],
[65,46,62,54,76,62,65,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,79,80,70,75,88,70,67,67],
[68,0,79,76,71,74,87,64,63,76],
[51,51,0,70,62,65,73,48,53,60],
[50,54,60,0,59,60,78,54,56,58],
[60,59,68,71,0,73,87,59,53,66],
[55,56,65,70,57,0,79,42,59,60],
[42,43,57,52,43,51,0,53,39,44],
[60,66,82,76,71,88,77,0,69,78],
[63,67,77,74,77,71,91,61,0,73],
[63,54,70,72,64,70,86,52,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,77,67,60,64,66,67,70],
[63,0,71,68,58,61,60,64,64,61],
[62,59,0,66,65,57,56,53,61,56],
[53,62,64,0,65,50,60,63,58,58],
[63,72,65,65,0,63,61,62,58,61],
[70,69,73,80,67,0,63,68,65,70],
[66,70,74,70,69,67,0,69,59,61],
[64,66,77,67,68,62,61,0,66,69],
[63,66,69,72,72,65,71,64,0,71],
[60,69,74,72,69,60,69,61,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,71,72,73,64,74,79,70],
[61,0,70,67,62,67,62,66,75,71],
[59,60,0,65,61,66,65,68,64,59],
[59,63,65,0,65,65,52,72,59,73],
[58,68,69,65,0,69,53,66,59,68],
[57,63,64,65,61,0,57,61,58,66],
[66,68,65,78,77,73,0,69,73,73],
[56,64,62,58,64,69,61,0,63,64],
[51,55,66,71,71,72,57,67,0,70],
[60,59,71,57,62,64,57,66,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,68,69,76,70,75,68,71,55],
[58,0,60,56,64,58,68,58,62,51],
[62,70,0,64,72,54,77,63,59,62],
[61,74,66,0,68,58,76,62,63,61],
[54,66,58,62,0,55,71,66,65,61],
[60,72,76,72,75,0,73,62,68,66],
[55,62,53,54,59,57,0,69,61,56],
[62,72,67,68,64,68,61,0,68,63],
[59,68,71,67,65,62,69,62,0,66],
[75,79,68,69,69,64,74,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,41,77,93,77,77,93,36,77],
[78,0,78,78,78,78,78,78,37,78],
[89,52,0,114,130,114,36,130,73,114],
[53,52,16,0,53,78,16,94,37,53],
[37,52,0,77,0,41,0,57,37,36],
[53,52,16,52,89,0,52,130,37,89],
[53,52,94,114,130,78,0,130,37,114],
[37,52,0,36,73,0,0,0,37,73],
[94,93,57,93,93,93,93,93,0,93],
[53,52,16,77,94,41,16,57,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,53,64,57,72,41,65,64,66],
[68,0,71,54,66,68,60,79,69,68],
[77,59,0,71,63,74,61,67,70,64],
[66,76,59,0,62,88,59,53,82,73],
[73,64,67,68,0,75,71,62,74,75],
[58,62,56,42,55,0,49,55,72,53],
[89,70,69,71,59,81,0,67,79,80],
[65,51,63,77,68,75,63,0,70,79],
[66,61,60,48,56,58,51,60,0,68],
[64,62,66,57,55,77,50,51,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,59,55,63,59,67,50,63,55],
[67,0,49,61,59,49,63,59,57,51],
[71,81,0,68,68,66,72,62,73,76],
[75,69,62,0,73,61,77,69,87,71],
[67,71,62,57,0,59,75,53,78,62],
[71,81,64,69,71,0,72,65,70,68],
[63,67,58,53,55,58,0,58,74,66],
[80,71,68,61,77,65,72,0,72,70],
[67,73,57,43,52,60,56,58,0,48],
[75,79,54,59,68,62,64,60,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,49,44,54,79,64,29,37,47],
[86,0,86,95,91,79,90,74,55,103],
[81,44,0,70,55,70,79,64,55,48],
[86,35,60,0,74,92,94,48,60,81],
[76,39,75,56,0,70,82,47,49,81],
[51,51,60,38,60,0,54,42,24,72],
[66,40,51,36,48,76,0,49,57,64],
[101,56,66,82,83,88,81,0,66,73],
[93,75,75,70,81,106,73,64,0,74],
[83,27,82,49,49,58,66,57,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,59,76,71,60,66,69,62,62],
[61,0,52,63,57,58,66,61,61,60],
[71,78,0,77,63,63,73,73,68,75],
[54,67,53,0,58,55,63,72,64,62],
[59,73,67,72,0,59,70,68,71,64],
[70,72,67,75,71,0,74,79,68,64],
[64,64,57,67,60,56,0,66,66,63],
[61,69,57,58,62,51,64,0,56,64],
[68,69,62,66,59,62,64,74,0,62],
[68,70,55,68,66,66,67,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,66,63,70,63,67,62,70,60],
[69,0,72,66,73,60,70,71,76,66],
[64,58,0,61,70,68,77,66,69,64],
[67,64,69,0,61,61,70,66,70,59],
[60,57,60,69,0,62,63,63,68,67],
[67,70,62,69,68,0,78,68,78,64],
[63,60,53,60,67,52,0,55,71,67],
[68,59,64,64,67,62,75,0,68,61],
[60,54,61,60,62,52,59,62,0,65],
[70,64,66,71,63,66,63,69,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,26,47,104,47,73,47,104,47],
[57,0,83,0,57,0,73,47,104,0],
[104,47,0,47,104,47,73,47,104,47],
[83,130,83,0,83,104,73,104,104,26],
[26,73,26,47,0,47,73,47,47,73],
[83,130,83,26,83,0,73,73,130,26],
[57,57,57,57,57,57,0,57,57,0],
[83,83,83,26,83,57,73,0,57,26],
[26,26,26,26,83,0,73,73,0,26],
[83,130,83,104,57,104,130,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,70,60,65,66,56,60,66],
[63,0,61,61,58,61,56,63,62,59],
[61,69,0,52,62,66,64,59,62,58],
[60,69,78,0,55,62,68,61,60,69],
[70,72,68,75,0,69,70,64,61,72],
[65,69,64,68,61,0,76,66,60,76],
[64,74,66,62,60,54,0,59,62,67],
[74,67,71,69,66,64,71,0,59,68],
[70,68,68,70,69,70,68,71,0,65],
[64,71,72,61,58,54,63,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,60,60,66,59,70,62,59,55],
[64,0,66,67,56,62,56,67,61,57],
[70,64,0,61,58,60,62,65,63,53],
[70,63,69,0,63,68,66,71,67,53],
[64,74,72,67,0,71,69,71,59,59],
[71,68,70,62,59,0,72,71,66,61],
[60,74,68,64,61,58,0,72,64,60],
[68,63,65,59,59,59,58,0,56,53],
[71,69,67,63,71,64,66,74,0,65],
[75,73,77,77,71,69,70,77,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,59,52,66,60,72,62,68,63],
[59,0,59,61,63,63,66,66,63,60],
[71,71,0,61,75,69,79,68,73,78],
[78,69,69,0,79,62,68,72,75,77],
[64,67,55,51,0,53,71,64,60,64],
[70,67,61,68,77,0,74,77,66,68],
[58,64,51,62,59,56,0,55,57,51],
[68,64,62,58,66,53,75,0,67,66],
[62,67,57,55,70,64,73,63,0,70],
[67,70,52,53,66,62,79,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,61,61,65,71,65,60,76,75],
[59,0,62,65,67,73,71,68,69,77],
[69,68,0,69,60,75,73,68,70,85],
[69,65,61,0,67,65,68,71,65,74],
[65,63,70,63,0,61,69,73,67,75],
[59,57,55,65,69,0,60,64,53,70],
[65,59,57,62,61,70,0,74,62,85],
[70,62,62,59,57,66,56,0,51,78],
[54,61,60,65,63,77,68,79,0,83],
[55,53,45,56,55,60,45,52,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,63,73,64,77,65,70,77],
[64,0,61,72,69,60,70,66,61,77],
[68,69,0,65,70,78,80,74,67,70],
[67,58,65,0,74,67,67,74,72,78],
[57,61,60,56,0,72,71,73,61,67],
[66,70,52,63,58,0,70,69,59,66],
[53,60,50,63,59,60,0,67,61,71],
[65,64,56,56,57,61,63,0,70,73],
[60,69,63,58,69,71,69,60,0,66],
[53,53,60,52,63,64,59,57,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,59,64,62,68,75,62,65,71],
[64,0,62,60,62,56,69,58,62,64],
[71,68,0,70,63,72,74,68,63,65],
[66,70,60,0,65,67,72,66,66,66],
[68,68,67,65,0,64,66,65,63,68],
[62,74,58,63,66,0,72,65,70,75],
[55,61,56,58,64,58,0,60,67,66],
[68,72,62,64,65,65,70,0,70,69],
[65,68,67,64,67,60,63,60,0,63],
[59,66,65,64,62,55,64,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,82,65,69,66,59,69,64,63],
[54,0,60,61,63,57,65,55,60,70],
[48,70,0,56,60,63,61,60,53,62],
[65,69,74,0,77,66,67,69,70,78],
[61,67,70,53,0,57,58,61,60,66],
[64,73,67,64,73,0,68,67,63,70],
[71,65,69,63,72,62,0,60,58,65],
[61,75,70,61,69,63,70,0,56,70],
[66,70,77,60,70,67,72,74,0,73],
[67,60,68,52,64,60,65,60,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,65,66,68,61,68,75,68],
[68,0,57,58,53,54,61,60,73,69],
[67,73,0,50,66,47,54,65,64,67],
[65,72,80,0,66,59,62,64,70,75],
[64,77,64,64,0,62,66,66,80,70],
[62,76,83,71,68,0,69,74,72,77],
[69,69,76,68,64,61,0,72,68,69],
[62,70,65,66,64,56,58,0,65,72],
[55,57,66,60,50,58,62,65,0,63],
[62,61,63,55,60,53,61,58,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,67,70,63,60,64,71,53,71],
[77,0,67,73,72,69,70,77,60,69],
[63,63,0,65,64,61,61,62,62,72],
[60,57,65,0,64,56,51,59,56,63],
[67,58,66,66,0,54,68,69,55,64],
[70,61,69,74,76,0,66,64,70,72],
[66,60,69,79,62,64,0,64,60,71],
[59,53,68,71,61,66,66,0,70,67],
[77,70,68,74,75,60,70,60,0,75],
[59,61,58,67,66,58,59,63,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,78,60,92,77,64,79,68,69],
[61,0,62,65,71,69,65,49,60,69],
[52,68,0,62,75,65,67,63,67,62],
[70,65,68,0,87,81,57,70,72,78],
[38,59,55,43,0,55,50,68,60,58],
[53,61,65,49,75,0,52,69,60,52],
[66,65,63,73,80,78,0,74,56,68],
[51,81,67,60,62,61,56,0,56,71],
[62,70,63,58,70,70,74,74,0,65],
[61,61,68,52,72,78,62,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,63,62,56,66,65,63,67],
[64,0,63,55,68,49,59,59,60,62],
[67,67,0,60,70,49,57,58,68,61],
[67,75,70,0,75,55,65,68,76,71],
[68,62,60,55,0,59,66,59,66,62],
[74,81,81,75,71,0,67,64,79,75],
[64,71,73,65,64,63,0,58,77,65],
[65,71,72,62,71,66,72,0,69,71],
[67,70,62,54,64,51,53,61,0,58],
[63,68,69,59,68,55,65,59,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,68,77,73,66,68,61,58],
[66,0,58,65,66,71,59,71,67,58],
[64,72,0,80,81,81,75,65,77,66],
[62,65,50,0,62,46,51,70,58,48],
[53,64,49,68,0,68,69,66,79,52],
[57,59,49,84,62,0,79,64,89,54],
[64,71,55,79,61,51,0,63,64,64],
[62,59,65,60,64,66,67,0,74,46],
[69,63,53,72,51,41,66,56,0,52],
[72,72,64,82,78,76,66,84,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,49,59,52,72,77,42,54,52],
[54,0,48,53,40,75,76,41,63,42],
[81,82,0,56,44,78,82,57,62,65],
[71,77,74,0,56,81,84,71,66,78],
[78,90,86,74,0,100,97,57,61,79],
[58,55,52,49,30,0,77,46,48,51],
[53,54,48,46,33,53,0,44,30,55],
[88,89,73,59,73,84,86,0,64,77],
[76,67,68,64,69,82,100,66,0,68],
[78,88,65,52,51,79,75,53,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,60,41,38,45,51,65,58,59],
[84,0,76,64,54,60,61,75,72,70],
[70,54,0,60,59,51,41,45,66,60],
[89,66,70,0,55,54,51,74,70,65],
[92,76,71,75,0,80,81,60,97,104],
[85,70,79,76,50,0,57,56,84,102],
[79,69,89,79,49,73,0,74,73,88],
[65,55,85,56,70,74,56,0,74,87],
[72,58,64,60,33,46,57,56,0,68],
[71,60,70,65,26,28,42,43,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,57,63,58,47,54,61,77,54],
[52,0,57,66,66,56,69,52,65,62],
[73,73,0,65,61,53,72,73,86,68],
[67,64,65,0,57,55,67,62,78,59],
[72,64,69,73,0,54,72,79,78,59],
[83,74,77,75,76,0,71,82,85,63],
[76,61,58,63,58,59,0,71,77,59],
[69,78,57,68,51,48,59,0,82,72],
[53,65,44,52,52,45,53,48,0,61],
[76,68,62,71,71,67,71,58,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,70,83,87,73,62,73,73],
[66,0,69,58,72,87,64,55,68,69],
[61,61,0,69,76,73,64,72,64,78],
[60,72,61,0,57,84,70,54,61,72],
[47,58,54,73,0,61,65,55,59,73],
[43,43,57,46,69,0,54,48,54,70],
[57,66,66,60,65,76,0,65,62,76],
[68,75,58,76,75,82,65,0,75,80],
[57,62,66,69,71,76,68,55,0,73],
[57,61,52,58,57,60,54,50,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,69,74,57,54,57,87,48,78],
[78,0,67,52,71,71,62,88,60,60],
[61,63,0,54,63,58,54,76,73,77],
[56,78,76,0,53,50,54,74,56,52],
[73,59,67,77,0,82,65,92,69,81],
[76,59,72,80,48,0,61,80,56,58],
[73,68,76,76,65,69,0,79,57,66],
[43,42,54,56,38,50,51,0,60,70],
[82,70,57,74,61,74,73,70,0,97],
[52,70,53,78,49,72,64,60,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,52,54,30,36,49,60,37,56],
[77,0,71,60,46,63,72,64,51,58],
[78,59,0,66,56,60,72,67,66,61],
[76,70,64,0,61,62,75,60,49,56],
[100,84,74,69,0,76,79,76,54,66],
[94,67,70,68,54,0,71,70,40,51],
[81,58,58,55,51,59,0,61,52,50],
[70,66,63,70,54,60,69,0,57,60],
[93,79,64,81,76,90,78,73,0,68],
[74,72,69,74,64,79,80,70,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,67,55,69,68,62,59,57,71],
[60,0,64,65,65,62,61,59,59,63],
[63,66,0,52,65,65,58,66,57,69],
[75,65,78,0,78,67,70,69,74,78],
[61,65,65,52,0,60,70,68,62,64],
[62,68,65,63,70,0,62,65,63,62],
[68,69,72,60,60,68,0,66,64,74],
[71,71,64,61,62,65,64,0,69,63],
[73,71,73,56,68,67,66,61,0,68],
[59,67,61,52,66,68,56,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,74,57,77,71,60,59,60,62],
[64,0,64,80,77,80,75,95,80,94],
[56,66,0,70,62,71,54,74,67,80],
[73,50,60,0,76,69,67,65,78,64],
[53,53,68,54,0,77,61,62,50,63],
[59,50,59,61,53,0,47,65,64,68],
[70,55,76,63,69,83,0,76,52,76],
[71,35,56,65,68,65,54,0,62,89],
[70,50,63,52,80,66,78,68,0,88],
[68,36,50,66,67,62,54,41,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,54,77,64,67,63,73,72,68],
[71,0,62,68,65,73,64,71,77,73],
[76,68,0,81,66,67,63,70,77,69],
[53,62,49,0,61,62,61,63,64,56],
[66,65,64,69,0,67,59,66,70,69],
[63,57,63,68,63,0,54,62,70,65],
[67,66,67,69,71,76,0,63,73,63],
[57,59,60,67,64,68,67,0,76,66],
[58,53,53,66,60,60,57,54,0,56],
[62,57,61,74,61,65,67,64,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,58,60,54,63,56,67,53],
[71,0,68,62,55,65,64,65,69,66],
[65,62,0,55,59,63,64,62,60,60],
[72,68,75,0,70,74,63,76,73,68],
[70,75,71,60,0,72,69,66,70,68],
[76,65,67,56,58,0,59,64,62,62],
[67,66,66,67,61,71,0,70,71,64],
[74,65,68,54,64,66,60,0,71,60],
[63,61,70,57,60,68,59,59,0,67],
[77,64,70,62,62,68,66,70,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,66,46,65,49,47,47,61,80],
[79,0,83,79,66,74,63,70,70,78],
[64,47,0,54,52,53,48,58,60,66],
[84,51,76,0,68,65,74,66,71,86],
[65,64,78,62,0,68,69,58,68,74],
[81,56,77,65,62,0,70,72,81,81],
[83,67,82,56,61,60,0,61,70,88],
[83,60,72,64,72,58,69,0,70,90],
[69,60,70,59,62,49,60,60,0,76],
[50,52,64,44,56,49,42,40,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,67,65,76,60,69,74,69,81],
[52,0,58,56,56,53,60,56,54,67],
[63,72,0,73,68,67,75,67,67,70],
[65,74,57,0,66,60,69,68,57,74],
[54,74,62,64,0,63,64,70,56,69],
[70,77,63,70,67,0,67,68,60,67],
[61,70,55,61,66,63,0,60,60,67],
[56,74,63,62,60,62,70,0,62,70],
[61,76,63,73,74,70,70,68,0,79],
[49,63,60,56,61,63,63,60,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,58,80,69,75,64,60,58,54],
[68,0,70,83,70,81,65,68,60,56],
[72,60,0,81,66,75,51,53,43,53],
[50,47,49,0,69,50,54,57,41,51],
[61,60,64,61,0,62,48,56,54,50],
[55,49,55,80,68,0,50,60,45,59],
[66,65,79,76,82,80,0,74,65,73],
[70,62,77,73,74,70,56,0,49,76],
[72,70,87,89,76,85,65,81,0,76],
[76,74,77,79,80,71,57,54,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,70,86,76,72,75,77,75,110],
[81,0,54,59,48,99,59,37,109,88],
[60,76,0,60,80,84,80,76,102,110],
[44,71,70,0,50,72,62,61,71,60],
[54,82,50,80,0,77,79,68,81,79],
[58,31,46,58,53,0,55,36,53,63],
[55,71,50,68,51,75,0,72,86,92],
[53,93,54,69,62,94,58,0,80,88],
[55,21,28,59,49,77,44,50,0,80],
[20,42,20,70,51,67,38,42,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,61,76,73,59,71,64,57,74],
[63,0,73,77,66,59,62,45,58,64],
[69,57,0,76,70,60,66,63,61,71],
[54,53,54,0,60,48,62,52,56,64],
[57,64,60,70,0,55,60,48,53,67],
[71,71,70,82,75,0,75,64,78,70],
[59,68,64,68,70,55,0,54,50,66],
[66,85,67,78,82,66,76,0,64,81],
[73,72,69,74,77,52,80,66,0,80],
[56,66,59,66,63,60,64,49,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,59,62,55,55,58,62,69,63],
[64,0,62,64,62,64,61,56,66,64],
[71,68,0,67,56,68,66,63,73,65],
[68,66,63,0,53,66,63,58,69,61],
[75,68,74,77,0,64,78,63,87,77],
[75,66,62,64,66,0,69,66,70,67],
[72,69,64,67,52,61,0,66,85,72],
[68,74,67,72,67,64,64,0,79,73],
[61,64,57,61,43,60,45,51,0,64],
[67,66,65,69,53,63,58,57,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,57,60,53,57,62,62,50,57],
[72,0,63,66,56,63,63,64,62,65],
[73,67,0,68,62,76,75,70,69,73],
[70,64,62,0,62,68,74,74,74,66],
[77,74,68,68,0,61,76,75,85,73],
[73,67,54,62,69,0,69,75,67,71],
[68,67,55,56,54,61,0,62,68,59],
[68,66,60,56,55,55,68,0,63,61],
[80,68,61,56,45,63,62,67,0,65],
[73,65,57,64,57,59,71,69,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,68,66,60,66,58,74,61,68],
[59,0,79,81,76,69,60,63,70,49],
[62,51,0,66,53,70,56,71,65,55],
[64,49,64,0,60,65,60,65,59,42],
[70,54,77,70,0,68,70,68,72,60],
[64,61,60,65,62,0,50,71,63,40],
[72,70,74,70,60,80,0,75,59,58],
[56,67,59,65,62,59,55,0,69,41],
[69,60,65,71,58,67,71,61,0,50],
[62,81,75,88,70,90,72,89,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,64,62,57,59,64,63,57,72],
[68,0,62,57,56,69,69,60,54,60],
[66,68,0,66,64,74,70,67,60,71],
[68,73,64,0,61,69,78,68,58,81],
[73,74,66,69,0,60,72,59,63,76],
[71,61,56,61,70,0,64,60,59,65],
[66,61,60,52,58,66,0,58,59,72],
[67,70,63,62,71,70,72,0,71,75],
[73,76,70,72,67,71,71,59,0,72],
[58,70,59,49,54,65,58,55,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,73,65,47,59,64,55,68,60],
[83,0,74,67,77,79,72,65,91,64],
[57,56,0,70,71,68,69,72,73,67],
[65,63,60,0,53,73,63,57,71,53],
[83,53,59,77,0,62,76,55,76,67],
[71,51,62,57,68,0,56,55,70,44],
[66,58,61,67,54,74,0,64,71,70],
[75,65,58,73,75,75,66,0,81,68],
[62,39,57,59,54,60,59,49,0,60],
[70,66,63,77,63,86,60,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,60,64,55,66,60,61,63,71],
[62,0,61,62,55,61,66,59,66,66],
[70,69,0,68,62,68,66,70,62,72],
[66,68,62,0,61,57,64,61,58,65],
[75,75,68,69,0,67,63,66,64,71],
[64,69,62,73,63,0,64,63,62,65],
[70,64,64,66,67,66,0,67,68,77],
[69,71,60,69,64,67,63,0,68,74],
[67,64,68,72,66,68,62,62,0,81],
[59,64,58,65,59,65,53,56,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,79,90,96,81,74,83,88,83],
[65,0,61,95,84,65,76,69,71,78],
[51,69,0,67,62,56,67,55,77,75],
[40,35,63,0,51,46,67,53,41,60],
[34,46,68,79,0,43,63,52,47,59],
[49,65,74,84,87,0,69,78,66,74],
[56,54,63,63,67,61,0,61,70,75],
[47,61,75,77,78,52,69,0,73,70],
[42,59,53,89,83,64,60,57,0,69],
[47,52,55,70,71,56,55,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,52,72,64,71,63,66,58,52],
[74,0,54,78,55,70,64,70,67,68],
[78,76,0,80,63,64,74,69,69,78],
[58,52,50,0,47,66,60,54,54,71],
[66,75,67,83,0,74,65,73,72,69],
[59,60,66,64,56,0,74,66,67,68],
[67,66,56,70,65,56,0,61,58,62],
[64,60,61,76,57,64,69,0,61,60],
[72,63,61,76,58,63,72,69,0,70],
[78,62,52,59,61,62,68,70,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,66,49,56,57,69,60,45,55],
[71,0,61,66,63,56,78,51,59,68],
[64,69,0,69,59,66,89,64,65,53],
[81,64,61,0,62,75,70,63,65,65],
[74,67,71,68,0,66,68,73,53,66],
[73,74,64,55,64,0,78,74,69,69],
[61,52,41,60,62,52,0,70,43,56],
[70,79,66,67,57,56,60,0,50,64],
[85,71,65,65,77,61,87,80,0,68],
[75,62,77,65,64,61,74,66,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,62,53,62,63,75,60,63,55],
[59,0,61,54,52,61,71,56,71,65],
[68,69,0,65,61,65,71,65,70,69],
[77,76,65,0,57,74,77,72,72,66],
[68,78,69,73,0,74,73,65,69,66],
[67,69,65,56,56,0,66,60,74,54],
[55,59,59,53,57,64,0,56,70,57],
[70,74,65,58,65,70,74,0,71,75],
[67,59,60,58,61,56,60,59,0,55],
[75,65,61,64,64,76,73,55,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,57,100,46,53,38,37,80,76],
[71,0,52,97,61,52,53,41,81,86],
[73,78,0,104,45,79,67,47,106,98],
[30,33,26,0,41,38,26,31,48,79],
[84,69,85,89,0,57,65,54,93,90],
[77,78,51,92,73,0,71,59,76,88],
[92,77,63,104,65,59,0,80,85,89],
[93,89,83,99,76,71,50,0,90,103],
[50,49,24,82,37,54,45,40,0,60],
[54,44,32,51,40,42,41,27,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,80,68,109,87,72,109,44,65],
[45,0,45,67,77,86,89,55,68,58],
[50,85,0,90,109,96,63,109,54,41],
[62,63,40,0,50,74,41,50,41,41],
[21,53,21,80,0,108,21,53,34,31],
[43,44,34,56,22,0,22,31,35,34],
[58,41,67,89,109,108,0,65,31,77],
[21,75,21,80,77,99,65,0,44,43],
[86,62,76,89,96,95,99,86,0,77],
[65,72,89,89,99,96,53,87,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,66,72,67,66,83,51,64,71],
[68,0,75,71,71,68,96,65,62,60],
[64,55,0,53,66,45,75,49,53,60],
[58,59,77,0,65,66,77,52,58,66],
[63,59,64,65,0,53,70,60,53,59],
[64,62,85,64,77,0,86,61,55,58],
[47,34,55,53,60,44,0,39,53,53],
[79,65,81,78,70,69,91,0,66,61],
[66,68,77,72,77,75,77,64,0,67],
[59,70,70,64,71,72,77,69,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,61,67,55,61,67,65,74,65],
[63,0,69,60,62,65,68,68,72,62],
[69,61,0,67,72,69,60,73,90,62],
[63,70,63,0,63,70,68,65,75,63],
[75,68,58,67,0,69,74,70,78,76],
[69,65,61,60,61,0,67,55,78,63],
[63,62,70,62,56,63,0,68,72,61],
[65,62,57,65,60,75,62,0,79,73],
[56,58,40,55,52,52,58,51,0,54],
[65,68,68,67,54,67,69,57,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,68,59,67,64,69,62,62,72],
[60,0,69,68,63,73,67,78,69,68],
[62,61,0,66,61,60,58,71,63,68],
[71,62,64,0,62,60,67,63,61,63],
[63,67,69,68,0,71,67,77,66,67],
[66,57,70,70,59,0,69,70,67,74],
[61,63,72,63,63,61,0,82,65,62],
[68,52,59,67,53,60,48,0,47,56],
[68,61,67,69,64,63,65,83,0,63],
[58,62,62,67,63,56,68,74,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,69,60,65,57,58,59,56,60],
[70,0,65,65,71,59,69,69,62,73],
[61,65,0,54,60,59,59,61,62,70],
[70,65,76,0,73,70,70,70,60,71],
[65,59,70,57,0,63,60,67,60,62],
[73,71,71,60,67,0,63,69,64,68],
[72,61,71,60,70,67,0,67,62,67],
[71,61,69,60,63,61,63,0,60,64],
[74,68,68,70,70,66,68,70,0,63],
[70,57,60,59,68,62,63,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,85,65,47,90,85,69,40],
[63,0,59,81,61,53,75,63,24,35],
[61,71,0,75,75,68,101,68,43,50],
[45,49,55,0,50,62,71,78,39,33],
[65,69,55,80,0,66,69,74,50,32],
[83,77,62,68,64,0,68,90,43,66],
[40,55,29,59,61,62,0,65,32,44],
[45,67,62,52,56,40,65,0,36,27],
[61,106,87,91,80,87,98,94,0,66],
[90,95,80,97,98,64,86,103,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,34,59,67,58,32,56,39,65],
[75,0,70,69,87,68,44,69,47,47],
[96,60,0,91,82,82,63,74,96,72],
[71,61,39,0,59,74,69,56,49,66],
[63,43,48,71,0,70,45,72,66,56],
[72,62,48,56,60,0,40,52,44,45],
[98,86,67,61,85,90,0,78,71,78],
[74,61,56,74,58,78,52,0,45,58],
[91,83,34,81,64,86,59,85,0,46],
[65,83,58,64,74,85,52,72,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,60,65,63,56,65,62,65],
[62,0,63,54,65,62,52,60,64,65],
[62,67,0,58,64,60,58,68,63,62],
[70,76,72,0,68,64,66,67,67,71],
[65,65,66,62,0,71,66,65,70,72],
[67,68,70,66,59,0,65,64,66,72],
[74,78,72,64,64,65,0,66,67,71],
[65,70,62,63,65,66,64,0,57,63],
[68,66,67,63,60,64,63,73,0,62],
[65,65,68,59,58,58,59,67,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,74,57,72,62,75,65,65,67],
[66,0,77,67,78,73,67,63,65,70],
[56,53,0,55,63,62,57,50,57,54],
[73,63,75,0,70,71,69,59,61,64],
[58,52,67,60,0,67,61,65,59,59],
[68,57,68,59,63,0,70,64,63,67],
[55,63,73,61,69,60,0,62,54,61],
[65,67,80,71,65,66,68,0,74,69],
[65,65,73,69,71,67,76,56,0,69],
[63,60,76,66,71,63,69,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,73,65,54,61,66,61,76,72],
[75,0,77,73,63,85,73,81,87,76],
[57,53,0,63,55,57,55,60,71,69],
[65,57,67,0,46,62,48,54,78,67],
[76,67,75,84,0,88,78,64,97,87],
[69,45,73,68,42,0,56,60,77,75],
[64,57,75,82,52,74,0,62,82,86],
[69,49,70,76,66,70,68,0,82,78],
[54,43,59,52,33,53,48,48,0,62],
[58,54,61,63,43,55,44,52,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,55,70,62,75,54,71,50,66],
[69,0,39,72,68,80,50,71,43,65],
[75,91,0,82,74,85,59,88,66,82],
[60,58,48,0,65,68,51,70,62,67],
[68,62,56,65,0,72,45,54,53,77],
[55,50,45,62,58,0,51,62,49,56],
[76,80,71,79,85,79,0,78,61,72],
[59,59,42,60,76,68,52,0,55,67],
[80,87,64,68,77,81,69,75,0,71],
[64,65,48,63,53,74,58,63,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,68,75,73,78,62,71,70,76],
[58,0,63,60,70,59,69,61,63,58],
[62,67,0,57,52,70,64,60,65,65],
[55,70,73,0,71,60,70,64,67,68],
[57,60,78,59,0,64,57,58,70,63],
[52,71,60,70,66,0,60,61,64,64],
[68,61,66,60,73,70,0,68,63,66],
[59,69,70,66,72,69,62,0,63,68],
[60,67,65,63,60,66,67,67,0,58],
[54,72,65,62,67,66,64,62,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,72,78,65,74,75,74,80,88],
[43,0,60,57,56,62,49,49,55,63],
[58,70,0,58,57,67,61,68,63,67],
[52,73,72,0,60,60,71,59,60,70],
[65,74,73,70,0,66,73,69,63,81],
[56,68,63,70,64,0,63,55,67,68],
[55,81,69,59,57,67,0,59,66,66],
[56,81,62,71,61,75,71,0,64,84],
[50,75,67,70,67,63,64,66,0,75],
[42,67,63,60,49,62,64,46,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,73,70,76,70,65,73,71,65],
[58,0,60,61,62,68,58,67,60,54],
[57,70,0,65,73,70,62,77,63,67],
[60,69,65,0,67,78,56,79,64,64],
[54,68,57,63,0,64,62,65,67,67],
[60,62,60,52,66,0,49,62,57,61],
[65,72,68,74,68,81,0,80,65,74],
[57,63,53,51,65,68,50,0,55,55],
[59,70,67,66,63,73,65,75,0,70],
[65,76,63,66,63,69,56,75,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,71,76,66,70,65,65,72,67],
[60,0,74,73,69,67,58,66,66,68],
[59,56,0,64,61,61,56,52,55,59],
[54,57,66,0,64,63,54,58,59,61],
[64,61,69,66,0,65,61,64,65,68],
[60,63,69,67,65,0,71,61,61,66],
[65,72,74,76,69,59,0,67,73,73],
[65,64,78,72,66,69,63,0,66,70],
[58,64,75,71,65,69,57,64,0,63],
[63,62,71,69,62,64,57,60,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,79,67,67,64,74,79,68,86],
[53,0,67,69,55,62,67,71,63,64],
[51,63,0,60,54,59,53,62,53,61],
[63,61,70,0,55,65,55,56,63,66],
[63,75,76,75,0,64,71,80,68,76],
[66,68,71,65,66,0,70,62,58,76],
[56,63,77,75,59,60,0,62,66,74],
[51,59,68,74,50,68,68,0,51,62],
[62,67,77,67,62,72,64,79,0,62],
[44,66,69,64,54,54,56,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,69,81,66,60,62,67,66],
[63,0,62,57,73,60,62,64,57,71],
[67,68,0,63,79,69,59,62,61,70],
[61,73,67,0,81,70,58,65,66,72],
[49,57,51,49,0,62,58,59,59,66],
[64,70,61,60,68,0,59,59,61,69],
[70,68,71,72,72,71,0,69,62,81],
[68,66,68,65,71,71,61,0,65,77],
[63,73,69,64,71,69,68,65,0,68],
[64,59,60,58,64,61,49,53,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,64,67,61,76,64,64,55],
[62,0,66,59,58,52,73,60,61,61],
[64,64,0,60,53,52,75,60,63,53],
[66,71,70,0,63,66,67,62,68,66],
[63,72,77,67,0,61,70,65,65,61],
[69,78,78,64,69,0,77,70,65,67],
[54,57,55,63,60,53,0,53,53,56],
[66,70,70,68,65,60,77,0,60,70],
[66,69,67,62,65,65,77,70,0,65],
[75,69,77,64,69,63,74,60,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,70,75,64,67,65,56,66],
[61,0,68,59,72,59,63,68,61,61],
[63,62,0,62,66,59,63,65,55,59],
[60,71,68,0,58,62,55,57,60,67],
[55,58,64,72,0,65,55,64,64,68],
[66,71,71,68,65,0,63,67,63,65],
[63,67,67,75,75,67,0,77,68,69],
[65,62,65,73,66,63,53,0,54,53],
[74,69,75,70,66,67,62,76,0,68],
[64,69,71,63,62,65,61,77,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,100,57,63,71,78,62,79,65],
[66,0,84,65,54,46,59,58,83,51],
[30,46,0,40,37,33,48,47,42,29],
[73,65,90,0,54,70,60,72,95,62],
[67,76,93,76,0,57,68,67,87,54],
[59,84,97,60,73,0,82,54,71,72],
[52,71,82,70,62,48,0,70,83,48],
[68,72,83,58,63,76,60,0,74,62],
[51,47,88,35,43,59,47,56,0,55],
[65,79,101,68,76,58,82,68,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,56,55,69,58,59,68,44,61],
[85,0,69,64,70,92,79,74,78,68],
[74,61,0,66,66,67,75,71,76,62],
[75,66,64,0,65,66,63,71,70,52],
[61,60,64,65,0,77,70,68,60,36],
[72,38,63,64,53,0,68,80,45,50],
[71,51,55,67,60,62,0,75,60,52],
[62,56,59,59,62,50,55,0,56,53],
[86,52,54,60,70,85,70,74,0,64],
[69,62,68,78,94,80,78,77,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,58,66,68,57,74,65,67],
[63,0,66,61,64,57,54,62,55,69],
[63,64,0,57,55,60,57,57,58,73],
[72,69,73,0,68,68,63,70,72,67],
[64,66,75,62,0,60,54,68,58,66],
[62,73,70,62,70,0,63,68,62,67],
[73,76,73,67,76,67,0,73,57,64],
[56,68,73,60,62,62,57,0,60,59],
[65,75,72,58,72,68,73,70,0,72],
[63,61,57,63,64,63,66,71,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,69,77,75,70,79,67,57,64],
[54,0,51,72,60,67,49,49,47,70],
[61,79,0,67,61,70,71,64,57,63],
[53,58,63,0,39,59,57,60,53,65],
[55,70,69,91,0,80,68,69,55,72],
[60,63,60,71,50,0,68,68,57,56],
[51,81,59,73,62,62,0,69,61,71],
[63,81,66,70,61,62,61,0,72,76],
[73,83,73,77,75,73,69,58,0,74],
[66,60,67,65,58,74,59,54,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,76,59,65,75,69,83,73,67],
[68,0,76,56,59,64,65,71,62,48],
[54,54,0,52,49,61,58,74,60,52],
[71,74,78,0,71,65,70,67,83,60],
[65,71,81,59,0,69,64,79,64,62],
[55,66,69,65,61,0,66,66,63,59],
[61,65,72,60,66,64,0,67,70,70],
[47,59,56,63,51,64,63,0,59,69],
[57,68,70,47,66,67,60,71,0,52],
[63,82,78,70,68,71,60,61,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,54,80,65,57,41,56,59,59],
[62,0,60,62,62,60,29,53,65,56],
[76,70,0,29,100,56,38,53,20,20],
[50,68,101,0,83,104,50,74,68,41],
[65,68,30,47,0,66,54,39,21,21],
[73,70,74,26,64,0,76,49,43,43],
[89,101,92,80,76,54,0,36,94,38],
[74,77,77,56,91,81,94,0,70,61],
[71,65,110,62,109,87,36,60,0,65],
[71,74,110,89,109,87,92,69,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,40,54,44,77,63,57,52,77],
[83,0,76,81,68,114,76,62,75,68],
[90,54,0,74,60,94,67,58,64,67],
[76,49,56,0,45,87,44,54,69,60],
[86,62,70,85,0,94,72,75,62,76],
[53,16,36,43,36,0,48,12,34,41],
[67,54,63,86,58,82,0,54,72,69],
[73,68,72,76,55,118,76,0,74,70],
[78,55,66,61,68,96,58,56,0,81],
[53,62,63,70,54,89,61,60,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,70,69,74,55,51,67,63,63],
[84,0,72,80,61,73,58,76,61,73],
[60,58,0,73,65,60,60,56,62,54],
[61,50,57,0,59,48,54,50,51,58],
[56,69,65,71,0,55,51,56,48,60],
[75,57,70,82,75,0,60,54,62,70],
[79,72,70,76,79,70,0,60,64,66],
[63,54,74,80,74,76,70,0,60,68],
[67,69,68,79,82,68,66,70,0,63],
[67,57,76,72,70,60,64,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,73,56,59,64,65,68,64,47],
[79,0,67,71,74,68,69,72,68,63],
[57,63,0,53,68,64,72,64,71,55],
[74,59,77,0,61,65,67,71,61,59],
[71,56,62,69,0,68,65,72,69,65],
[66,62,66,65,62,0,71,72,63,49],
[65,61,58,63,65,59,0,69,58,66],
[62,58,66,59,58,58,61,0,55,43],
[66,62,59,69,61,67,72,75,0,53],
[83,67,75,71,65,81,64,87,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,63,59,62,64,64,60,71,67],
[62,0,60,56,58,70,58,64,62,64],
[67,70,0,58,70,65,58,63,74,73],
[71,74,72,0,67,64,64,61,71,78],
[68,72,60,63,0,64,65,65,73,73],
[66,60,65,66,66,0,64,62,67,64],
[66,72,72,66,65,66,0,64,68,75],
[70,66,67,69,65,68,66,0,69,70],
[59,68,56,59,57,63,62,61,0,68],
[63,66,57,52,57,66,55,60,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,60,53,63,66,58,62,64,58],
[63,0,66,65,53,66,64,65,69,62],
[70,64,0,66,59,55,67,51,65,59],
[77,65,64,0,62,65,53,48,71,62],
[67,77,71,68,0,62,67,60,82,65],
[64,64,75,65,68,0,68,61,64,65],
[72,66,63,77,63,62,0,60,67,61],
[68,65,79,82,70,69,70,0,73,73],
[66,61,65,59,48,66,63,57,0,63],
[72,68,71,68,65,65,69,57,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,74,68,77,57,70,71,66,65],
[66,0,73,73,73,61,74,60,61,63],
[56,57,0,63,73,53,65,53,57,61],
[62,57,67,0,64,59,69,56,57,60],
[53,57,57,66,0,48,62,45,55,51],
[73,69,77,71,82,0,81,70,76,65],
[60,56,65,61,68,49,0,54,64,58],
[59,70,77,74,85,60,76,0,67,66],
[64,69,73,73,75,54,66,63,0,63],
[65,67,69,70,79,65,72,64,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,71,76,72,58,58,71,59],
[67,0,70,68,75,58,66,62,69,57],
[59,60,0,74,75,62,65,66,71,63],
[59,62,56,0,70,64,50,57,67,55],
[54,55,55,60,0,56,49,58,61,57],
[58,72,68,66,74,0,63,67,73,63],
[72,64,65,80,81,67,0,63,71,67],
[72,68,64,73,72,63,67,0,72,69],
[59,61,59,63,69,57,59,58,0,61],
[71,73,67,75,73,67,63,61,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,75,64,68,68,67,69,63,73],
[65,0,64,65,64,64,66,69,66,70],
[55,66,0,59,67,67,67,72,58,72],
[66,65,71,0,63,72,72,68,57,71],
[62,66,63,67,0,61,70,69,59,65],
[62,66,63,58,69,0,66,66,52,73],
[63,64,63,58,60,64,0,63,53,62],
[61,61,58,62,61,64,67,0,52,68],
[67,64,72,73,71,78,77,78,0,75],
[57,60,58,59,65,57,68,62,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,56,76,48,48,54,54,62,50],
[84,0,81,84,69,60,71,74,65,66],
[74,49,0,86,71,65,77,67,72,75],
[54,46,44,0,46,47,56,62,52,48],
[82,61,59,84,0,54,53,65,68,50],
[82,70,65,83,76,0,63,74,69,59],
[76,59,53,74,77,67,0,60,71,56],
[76,56,63,68,65,56,70,0,58,66],
[68,65,58,78,62,61,59,72,0,55],
[80,64,55,82,80,71,74,64,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,62,66,68,66,62,77,77,71],
[70,0,68,61,61,66,69,57,73,64],
[68,62,0,53,68,57,65,70,73,66],
[64,69,77,0,80,61,69,78,79,57],
[62,69,62,50,0,56,53,76,57,63],
[64,64,73,69,74,0,78,82,69,51],
[68,61,65,61,77,52,0,74,73,68],
[53,73,60,52,54,48,56,0,64,54],
[53,57,57,51,73,61,57,66,0,52],
[59,66,64,73,67,79,62,76,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,68,67,63,67,68,69,57,71],
[71,0,66,67,58,67,63,71,59,76],
[62,64,0,66,53,71,64,66,62,64],
[63,63,64,0,63,61,69,78,71,74],
[67,72,77,67,0,73,68,76,64,72],
[63,63,59,69,57,0,59,57,60,64],
[62,67,66,61,62,71,0,64,62,75],
[61,59,64,52,54,73,66,0,57,71],
[73,71,68,59,66,70,68,73,0,76],
[59,54,66,56,58,66,55,59,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,53,82,72,63,67,54,75],
[68,0,63,50,63,81,71,61,74,82],
[68,67,0,69,95,80,56,70,57,70],
[77,80,61,0,74,80,78,79,39,81],
[48,67,35,56,0,58,71,66,56,70],
[58,49,50,50,72,0,54,60,55,64],
[67,59,74,52,59,76,0,75,51,74],
[63,69,60,51,64,70,55,0,54,69],
[76,56,73,91,74,75,79,76,0,91],
[55,48,60,49,60,66,56,61,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,51,76,67,59,70,52,78,53],
[58,0,61,57,60,74,73,65,74,64],
[79,69,0,65,66,67,79,64,85,59],
[54,73,65,0,45,65,73,70,75,61],
[63,70,64,85,0,77,65,61,78,69],
[71,56,63,65,53,0,62,70,68,59],
[60,57,51,57,65,68,0,64,74,58],
[78,65,66,60,69,60,66,0,66,58],
[52,56,45,55,52,62,56,64,0,57],
[77,66,71,69,61,71,72,72,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,59,63,66,66,46,58,76,55],
[80,0,58,51,74,62,48,66,75,60],
[71,72,0,63,70,64,66,74,75,61],
[67,79,67,0,59,68,62,59,77,72],
[64,56,60,71,0,57,45,70,67,60],
[64,68,66,62,73,0,58,63,68,66],
[84,82,64,68,85,72,0,62,81,85],
[72,64,56,71,60,67,68,0,71,63],
[54,55,55,53,63,62,49,59,0,52],
[75,70,69,58,70,64,45,67,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,66,67,68,83,72,65,70,59],
[58,0,64,62,52,71,64,75,69,74],
[64,66,0,61,68,85,64,66,64,65],
[63,68,69,0,62,85,74,62,70,63],
[62,78,62,68,0,91,78,70,78,71],
[47,59,45,45,39,0,48,47,53,54],
[58,66,66,56,52,82,0,65,76,59],
[65,55,64,68,60,83,65,0,74,58],
[60,61,66,60,52,77,54,56,0,63],
[71,56,65,67,59,76,71,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,63,53,50,75,67,58,56,54],
[69,0,69,64,73,72,66,78,56,71],
[67,61,0,65,65,53,75,74,65,72],
[77,66,65,0,65,61,78,59,45,61],
[80,57,65,65,0,70,77,59,75,66],
[55,58,77,69,60,0,62,67,48,68],
[63,64,55,52,53,68,0,55,62,50],
[72,52,56,71,71,63,75,0,71,78],
[74,74,65,85,55,82,68,59,0,64],
[76,59,58,69,64,62,80,52,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,73,69,58,71,73,67,68,63],
[48,0,65,54,62,68,67,61,59,62],
[57,65,0,62,63,69,63,65,61,58],
[61,76,68,0,57,71,69,76,63,63],
[72,68,67,73,0,77,76,64,71,60],
[59,62,61,59,53,0,63,68,59,53],
[57,63,67,61,54,67,0,63,55,55],
[63,69,65,54,66,62,67,0,60,55],
[62,71,69,67,59,71,75,70,0,70],
[67,68,72,67,70,77,75,75,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,78,68,58,57,54,60,63,60],
[73,0,74,84,62,65,63,70,54,71],
[52,56,0,66,68,61,67,71,51,59],
[62,46,64,0,47,47,60,48,54,44],
[72,68,62,83,0,78,68,57,75,70],
[73,65,69,83,52,0,76,55,60,71],
[76,67,63,70,62,54,0,60,58,68],
[70,60,59,82,73,75,70,0,61,69],
[67,76,79,76,55,70,72,69,0,77],
[70,59,71,86,60,59,62,61,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,61,70,76,59,69,63,74,78],
[58,0,60,65,62,63,73,51,60,73],
[69,70,0,69,55,54,69,62,59,65],
[60,65,61,0,53,60,70,49,68,67],
[54,68,75,77,0,72,75,65,73,85],
[71,67,76,70,58,0,78,63,66,84],
[61,57,61,60,55,52,0,52,66,61],
[67,79,68,81,65,67,78,0,72,83],
[56,70,71,62,57,64,64,58,0,68],
[52,57,65,63,45,46,69,47,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,61,60,67,64,69,67,74,63],
[60,0,71,60,60,61,64,61,75,62],
[69,59,0,65,63,58,63,60,64,63],
[70,70,65,0,67,59,72,69,70,65],
[63,70,67,63,0,67,66,61,65,67],
[66,69,72,71,63,0,65,66,72,73],
[61,66,67,58,64,65,0,62,71,61],
[63,69,70,61,69,64,68,0,70,61],
[56,55,66,60,65,58,59,60,0,62],
[67,68,67,65,63,57,69,69,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,60,60,62,66,62,61,65,63],
[59,0,63,58,58,67,65,65,71,67],
[70,67,0,65,58,69,67,62,75,65],
[70,72,65,0,69,73,70,73,72,70],
[68,72,72,61,0,69,72,63,70,75],
[64,63,61,57,61,0,60,67,68,65],
[68,65,63,60,58,70,0,68,67,70],
[69,65,68,57,67,63,62,0,65,67],
[65,59,55,58,60,62,63,65,0,63],
[67,63,65,60,55,65,60,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,87,65,96,72,85,102,89,97],
[58,0,48,60,64,62,64,97,68,70],
[43,82,0,65,88,58,71,115,83,99],
[65,70,65,0,90,76,79,106,65,90],
[34,66,42,40,0,38,42,81,37,63],
[58,68,72,54,92,0,35,98,93,87],
[45,66,59,51,88,95,0,109,90,74],
[28,33,15,24,49,32,21,0,33,31],
[41,62,47,65,93,37,40,97,0,87],
[33,60,31,40,67,43,56,99,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,69,64,89,57,67,70,81,66],
[68,0,75,60,86,73,82,76,77,60],
[61,55,0,54,76,64,72,77,71,60],
[66,70,76,0,87,62,76,89,79,69],
[41,44,54,43,0,47,55,70,51,46],
[73,57,66,68,83,0,74,79,83,78],
[63,48,58,54,75,56,0,76,66,55],
[60,54,53,41,60,51,54,0,53,61],
[49,53,59,51,79,47,64,77,0,45],
[64,70,70,61,84,52,75,69,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,69,70,66,69,73,58,71,72],
[64,0,54,67,57,59,75,61,58,68],
[61,76,0,70,63,67,69,64,67,61],
[60,63,60,0,63,77,76,64,58,76],
[64,73,67,67,0,76,75,71,65,82],
[61,71,63,53,54,0,59,58,48,66],
[57,55,61,54,55,71,0,60,55,59],
[72,69,66,66,59,72,70,0,69,76],
[59,72,63,72,65,82,75,61,0,76],
[58,62,69,54,48,64,71,54,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,62,55,63,52,64,40,57,58],
[75,0,76,64,67,65,81,67,79,81],
[68,54,0,59,55,48,64,63,71,68],
[75,66,71,0,78,54,76,63,75,73],
[67,63,75,52,0,65,64,54,81,71],
[78,65,82,76,65,0,70,57,79,84],
[66,49,66,54,66,60,0,66,68,86],
[90,63,67,67,76,73,64,0,62,85],
[73,51,59,55,49,51,62,68,0,59],
[72,49,62,57,59,46,44,45,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,42,63,54,65,54,64,72,45],
[69,0,58,58,54,64,70,68,78,72],
[88,72,0,69,62,62,72,71,72,61],
[67,72,61,0,61,86,59,75,76,68],
[76,76,68,69,0,73,60,62,68,85],
[65,66,68,44,57,0,70,84,66,47],
[76,60,58,71,70,60,0,67,69,64],
[66,62,59,55,68,46,63,0,63,63],
[58,52,58,54,62,64,61,67,0,51],
[85,58,69,62,45,83,66,67,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,56,75,62,60,65,73,69,63],
[66,0,69,71,65,71,71,78,65,71],
[74,61,0,71,65,73,60,68,71,69],
[55,59,59,0,54,69,56,67,52,68],
[68,65,65,76,0,72,74,86,68,74],
[70,59,57,61,58,0,64,71,65,68],
[65,59,70,74,56,66,0,68,57,68],
[57,52,62,63,44,59,62,0,54,58],
[61,65,59,78,62,65,73,76,0,72],
[67,59,61,62,56,62,62,72,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,67,70,68,67,59,67,64,78],
[60,0,63,70,71,63,54,66,63,69],
[63,67,0,77,71,67,59,67,61,73],
[60,60,53,0,62,57,63,62,65,68],
[62,59,59,68,0,65,50,68,57,71],
[63,67,63,73,65,0,67,66,64,73],
[71,76,71,67,80,63,0,76,59,76],
[63,64,63,68,62,64,54,0,62,74],
[66,67,69,65,73,66,71,68,0,75],
[52,61,57,62,59,57,54,56,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,75,58,64,71,76,65,59,65],
[66,0,80,76,70,71,79,59,65,66],
[55,50,0,56,66,67,67,70,60,58],
[72,54,74,0,66,72,75,67,72,56],
[66,60,64,64,0,63,76,63,70,73],
[59,59,63,58,67,0,70,57,54,67],
[54,51,63,55,54,60,0,50,62,48],
[65,71,60,63,67,73,80,0,62,60],
[71,65,70,58,60,76,68,68,0,63],
[65,64,72,74,57,63,82,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,78,82,65,73,61,68,75,70],
[54,0,50,59,49,61,54,59,68,35],
[52,80,0,79,57,69,72,69,78,58],
[48,71,51,0,54,70,60,80,74,52],
[65,81,73,76,0,67,74,65,81,65],
[57,69,61,60,63,0,58,60,61,48],
[69,76,58,70,56,72,0,81,71,57],
[62,71,61,50,65,70,49,0,65,52],
[55,62,52,56,49,69,59,65,0,64],
[60,95,72,78,65,82,73,78,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,60,66,55,70,85,79,86,65],
[51,0,40,75,67,64,66,53,55,65],
[70,90,0,76,56,83,93,67,88,82],
[64,55,54,0,64,63,78,76,67,78],
[75,63,74,66,0,78,89,65,74,67],
[60,66,47,67,52,0,83,49,75,77],
[45,64,37,52,41,47,0,57,50,53],
[51,77,63,54,65,81,73,0,65,67],
[44,75,42,63,56,55,80,65,0,75],
[65,65,48,52,63,53,77,63,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,68,69,62,66,67,63,58,60],
[74,0,75,75,67,69,72,68,65,65],
[62,55,0,68,59,60,62,53,60,56],
[61,55,62,0,57,64,73,60,57,55],
[68,63,71,73,0,71,73,67,70,72],
[64,61,70,66,59,0,70,62,58,59],
[63,58,68,57,57,60,0,54,57,57],
[67,62,77,70,63,68,76,0,65,66],
[72,65,70,73,60,72,73,65,0,64],
[70,65,74,75,58,71,73,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,57,64,72,72,57,62,69,65],
[69,0,73,72,77,70,65,76,66,62],
[73,57,0,66,72,69,58,67,67,57],
[66,58,64,0,65,69,65,64,62,64],
[58,53,58,65,0,58,52,58,60,56],
[58,60,61,61,72,0,50,61,69,62],
[73,65,72,65,78,80,0,68,74,77],
[68,54,63,66,72,69,62,0,62,70],
[61,64,63,68,70,61,56,68,0,61],
[65,68,73,66,74,68,53,60,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,69,64,69,74,72,74,62,74],
[67,0,79,65,68,72,68,72,70,70],
[61,51,0,58,55,65,64,69,63,59],
[66,65,72,0,58,60,63,70,63,61],
[61,62,75,72,0,70,61,72,64,68],
[56,58,65,70,60,0,57,59,66,67],
[58,62,66,67,69,73,0,69,62,63],
[56,58,61,60,58,71,61,0,62,64],
[68,60,67,67,66,64,68,68,0,65],
[56,60,71,69,62,63,67,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,72,75,72,69,74,69,70,68],
[66,0,71,66,62,67,72,68,68,69],
[58,59,0,66,60,59,67,61,59,62],
[55,64,64,0,69,61,68,67,64,66],
[58,68,70,61,0,66,63,74,67,63],
[61,63,71,69,64,0,67,76,67,70],
[56,58,63,62,67,63,0,66,65,63],
[61,62,69,63,56,54,64,0,58,56],
[60,62,71,66,63,63,65,72,0,74],
[62,61,68,64,67,60,67,74,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,53,62,79,58,64,59,81,63],
[62,0,62,75,83,58,42,70,71,74],
[77,68,0,91,84,69,63,84,91,76],
[68,55,39,0,80,50,48,61,78,62],
[51,47,46,50,0,35,49,68,62,61],
[72,72,61,80,95,0,66,77,73,90],
[66,88,67,82,81,64,0,92,83,80],
[71,60,46,69,62,53,38,0,61,48],
[49,59,39,52,68,57,47,69,0,73],
[67,56,54,68,69,40,50,82,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,70,63,61,71,72,61,71],
[60,0,60,65,59,58,61,69,59,62],
[66,70,0,73,66,59,67,72,63,72],
[60,65,57,0,58,56,62,72,64,60],
[67,71,64,72,0,70,65,71,65,69],
[69,72,71,74,60,0,72,66,60,78],
[59,69,63,68,65,58,0,67,64,73],
[58,61,58,58,59,64,63,0,60,60],
[69,71,67,66,65,70,66,70,0,72],
[59,68,58,70,61,52,57,70,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,62,59,67,64,67,69,61],
[65,0,52,59,62,57,65,54,55,61],
[69,78,0,63,66,64,73,72,73,74],
[68,71,67,0,68,62,63,64,76,71],
[71,68,64,62,0,55,66,58,64,61],
[63,73,66,68,75,0,66,74,67,70],
[66,65,57,67,64,64,0,63,65,60],
[63,76,58,66,72,56,67,0,67,63],
[61,75,57,54,66,63,65,63,0,68],
[69,69,56,59,69,60,70,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,66,55,56,62,65,51,67,58],
[69,0,70,68,59,67,73,64,74,68],
[64,60,0,57,60,70,72,66,83,56],
[75,62,73,0,74,72,71,66,70,66],
[74,71,70,56,0,64,75,63,75,72],
[68,63,60,58,66,0,73,66,65,68],
[65,57,58,59,55,57,0,63,66,61],
[79,66,64,64,67,64,67,0,77,67],
[63,56,47,60,55,65,64,53,0,51],
[72,62,74,64,58,62,69,63,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,91,70,76,99,84,82,98,80],
[66,0,90,83,73,87,60,73,67,61],
[39,40,0,69,43,64,44,30,44,60],
[60,47,61,0,49,60,53,46,39,41],
[54,57,87,81,0,104,64,56,72,65],
[31,43,66,70,26,0,67,37,57,47],
[46,70,86,77,66,63,0,70,60,69],
[48,57,100,84,74,93,60,0,83,78],
[32,63,86,91,58,73,70,47,0,72],
[50,69,70,89,65,83,61,52,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,75,71,63,70,73,63,63,67],
[65,0,66,71,64,69,73,63,67,66],
[55,64,0,63,67,65,62,57,58,61],
[59,59,67,0,62,67,66,62,59,65],
[67,66,63,68,0,64,70,58,54,62],
[60,61,65,63,66,0,63,64,68,64],
[57,57,68,64,60,67,0,64,63,63],
[67,67,73,68,72,66,66,0,63,68],
[67,63,72,71,76,62,67,67,0,60],
[63,64,69,65,68,66,67,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,46,46,48,49,70,39,48,49],
[74,0,62,67,75,59,72,68,47,55],
[84,68,0,71,82,83,95,71,67,64],
[84,63,59,0,69,67,75,53,57,58],
[82,55,48,61,0,69,76,57,50,52],
[81,71,47,63,61,0,69,58,61,53],
[60,58,35,55,54,61,0,36,48,41],
[91,62,59,77,73,72,94,0,53,61],
[82,83,63,73,80,69,82,77,0,73],
[81,75,66,72,78,77,89,69,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,71,70,69,70,65,72,69,74],
[57,0,64,57,57,60,77,68,63,73],
[59,66,0,62,54,67,66,55,69,71],
[60,73,68,0,60,59,60,62,69,66],
[61,73,76,70,0,68,73,80,82,77],
[60,70,63,71,62,0,63,73,65,75],
[65,53,64,70,57,67,0,70,71,64],
[58,62,75,68,50,57,60,0,66,69],
[61,67,61,61,48,65,59,64,0,69],
[56,57,59,64,53,55,66,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,59,87,73,75,69,78,71,77],
[60,0,76,82,72,81,72,80,75,86],
[71,54,0,83,75,79,76,70,82,89],
[43,48,47,0,61,73,50,69,68,65],
[57,58,55,69,0,76,73,71,55,68],
[55,49,51,57,54,0,64,64,56,56],
[61,58,54,80,57,66,0,58,72,74],
[52,50,60,61,59,66,72,0,66,79],
[59,55,48,62,75,74,58,64,0,78],
[53,44,41,65,62,74,56,51,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,71,48,56,73,72,49,67,69],
[69,0,77,60,64,76,58,69,66,70],
[59,53,0,67,59,71,53,47,69,57],
[82,70,63,0,66,83,54,59,81,70],
[74,66,71,64,0,69,61,56,80,51],
[57,54,59,47,61,0,44,53,65,44],
[58,72,77,76,69,86,0,62,82,56],
[81,61,83,71,74,77,68,0,73,72],
[63,64,61,49,50,65,48,57,0,57],
[61,60,73,60,79,86,74,58,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,68,44,60,49,50,70,54,58],
[69,0,83,56,60,76,45,46,51,56],
[62,47,0,38,54,49,42,57,33,42],
[86,74,92,0,89,55,59,63,58,70],
[70,70,76,41,0,67,38,59,59,56],
[81,54,81,75,63,0,49,64,53,67],
[80,85,88,71,92,81,0,73,64,86],
[60,84,73,67,71,66,57,0,68,60],
[76,79,97,72,71,77,66,62,0,70],
[72,74,88,60,74,63,44,70,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,59,62,70,59,62,58,75,68],
[54,0,52,57,60,49,49,54,66,61],
[71,78,0,69,74,65,62,61,68,69],
[68,73,61,0,72,55,61,62,63,63],
[60,70,56,58,0,64,56,58,58,57],
[71,81,65,75,66,0,69,66,74,70],
[68,81,68,69,74,61,0,60,62,67],
[72,76,69,68,72,64,70,0,60,71],
[55,64,62,67,72,56,68,70,0,65],
[62,69,61,67,73,60,63,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,65,59,52,61,58,59,65,55],
[68,0,75,61,66,69,63,59,66,59],
[65,55,0,62,56,79,62,62,62,61],
[71,69,68,0,65,73,72,63,72,70],
[78,64,74,65,0,61,66,67,78,65],
[69,61,51,57,69,0,59,47,66,51],
[72,67,68,58,64,71,0,66,75,69],
[71,71,68,67,63,83,64,0,74,69],
[65,64,68,58,52,64,55,56,0,61],
[75,71,69,60,65,79,61,61,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,55,53,65,65,57,60,60,55],
[70,0,56,58,71,71,55,71,64,60],
[75,74,0,65,76,69,65,62,60,64],
[77,72,65,0,74,74,63,63,66,69],
[65,59,54,56,0,65,62,62,57,54],
[65,59,61,56,65,0,65,61,54,57],
[73,75,65,67,68,65,0,66,72,69],
[70,59,68,67,68,69,64,0,55,61],
[70,66,70,64,73,76,58,75,0,67],
[75,70,66,61,76,73,61,69,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,75,63,71,69,55,72,72,66],
[69,0,67,60,70,72,67,76,79,76],
[55,63,0,40,57,50,41,61,58,48],
[67,70,90,0,73,75,64,68,73,69],
[59,60,73,57,0,78,64,62,68,70],
[61,58,80,55,52,0,64,69,63,67],
[75,63,89,66,66,66,0,75,68,72],
[58,54,69,62,68,61,55,0,60,71],
[58,51,72,57,62,67,62,70,0,59],
[64,54,82,61,60,63,58,59,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,68,46,87,73,42,98,19],
[66,0,83,72,28,62,77,69,99,41],
[62,47,0,73,40,55,88,51,99,70],
[62,58,57,0,18,70,76,58,110,19],
[84,102,90,112,0,81,87,62,99,67],
[43,68,75,60,49,0,43,43,73,40],
[57,53,42,54,43,87,0,75,116,30],
[88,61,79,72,68,87,55,0,120,59],
[32,31,31,20,31,57,14,10,0,4],
[111,89,60,111,63,90,100,71,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,59,68,74,63,63,48,67,78],
[62,0,66,72,77,58,45,50,63,88],
[71,64,0,58,68,69,66,67,68,88],
[62,58,72,0,70,76,80,59,81,89],
[56,53,62,60,0,48,58,31,53,69],
[67,72,61,54,82,0,59,70,58,71],
[67,85,64,50,72,71,0,57,60,77],
[82,80,63,71,99,60,73,0,82,90],
[63,67,62,49,77,72,70,48,0,86],
[52,42,42,41,61,59,53,40,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,73,63,60,65,62,49,64,56],
[64,0,70,66,49,70,49,43,67,51],
[57,60,0,58,60,60,45,40,73,39],
[67,64,72,0,67,62,65,58,73,67],
[70,81,70,63,0,56,43,37,65,38],
[65,60,70,68,74,0,47,35,62,47],
[68,81,85,65,87,83,0,74,75,63],
[81,87,90,72,93,95,56,0,90,71],
[66,63,57,57,65,68,55,40,0,52],
[74,79,91,63,92,83,67,59,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,67,59,73,62,57,55,56],
[70,0,72,76,70,66,66,66,65,60],
[70,58,0,71,65,80,72,64,57,67],
[63,54,59,0,59,66,59,57,57,50],
[71,60,65,71,0,77,65,65,65,63],
[57,64,50,64,53,0,55,59,46,49],
[68,64,58,71,65,75,0,57,60,65],
[73,64,66,73,65,71,73,0,55,58],
[75,65,73,73,65,84,70,75,0,74],
[74,70,63,80,67,81,65,72,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,76,69,57,59,58,62,55,56],
[62,0,70,62,62,59,68,62,65,55],
[54,60,0,71,61,58,58,59,54,61],
[61,68,59,0,52,50,60,54,63,51],
[73,68,69,78,0,66,74,63,69,64],
[71,71,72,80,64,0,66,68,65,58],
[72,62,72,70,56,64,0,62,67,62],
[68,68,71,76,67,62,68,0,72,64],
[75,65,76,67,61,65,63,58,0,67],
[74,75,69,79,66,72,68,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,56,45,59,58,60,51,57,61],
[74,0,67,59,82,47,46,43,58,55],
[74,63,0,49,78,77,69,56,58,64],
[85,71,81,0,79,57,86,73,72,68],
[71,48,52,51,0,64,67,68,57,50],
[72,83,53,73,66,0,70,77,72,43],
[70,84,61,44,63,60,0,65,49,43],
[79,87,74,57,62,53,65,0,68,41],
[73,72,72,58,73,58,81,62,0,42],
[69,75,66,62,80,87,87,89,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,69,56,56,63,68,62,64,68],
[70,0,73,65,57,63,66,71,65,67],
[61,57,0,61,61,68,64,71,70,66],
[74,65,69,0,63,68,65,67,72,80],
[74,73,69,67,0,59,63,72,58,69],
[67,67,62,62,71,0,66,70,65,74],
[62,64,66,65,67,64,0,67,65,68],
[68,59,59,63,58,60,63,0,55,66],
[66,65,60,58,72,65,65,75,0,70],
[62,63,64,50,61,56,62,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,74,70,73,59,66,74,73],
[62,0,58,76,72,71,67,54,77,68],
[60,72,0,80,78,63,63,56,71,75],
[56,54,50,0,66,48,58,52,59,53],
[60,58,52,64,0,64,60,51,60,65],
[57,59,67,82,66,0,61,44,57,65],
[71,63,67,72,70,69,0,65,57,77],
[64,76,74,78,79,86,65,0,76,77],
[56,53,59,71,70,73,73,54,0,66],
[57,62,55,77,65,65,53,53,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,57,54,61,66,57,68,58,56],
[67,0,64,51,66,58,55,66,62,63],
[73,66,0,64,68,65,60,70,70,64],
[76,79,66,0,68,71,64,74,63,68],
[69,64,62,62,0,58,59,71,58,59],
[64,72,65,59,72,0,57,68,64,55],
[73,75,70,66,71,73,0,75,65,68],
[62,64,60,56,59,62,55,0,54,61],
[72,68,60,67,72,66,65,76,0,60],
[74,67,66,62,71,75,62,69,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,58,55,66,60,63,54,72,73],
[59,0,55,61,59,71,69,68,57,69],
[72,75,0,70,63,72,71,68,64,62],
[75,69,60,0,65,74,67,69,65,82],
[64,71,67,65,0,79,80,72,60,78],
[70,59,58,56,51,0,63,61,58,66],
[67,61,59,63,50,67,0,69,62,71],
[76,62,62,61,58,69,61,0,61,74],
[58,73,66,65,70,72,68,69,0,74],
[57,61,68,48,52,64,59,56,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,64,46,54,57,55,65,61,59],
[76,0,71,62,64,75,63,73,75,82],
[66,59,0,55,59,68,62,65,64,70],
[84,68,75,0,68,63,70,76,78,76],
[76,66,71,62,0,70,59,71,73,76],
[73,55,62,67,60,0,66,69,75,68],
[75,67,68,60,71,64,0,67,75,71],
[65,57,65,54,59,61,63,0,76,75],
[69,55,66,52,57,55,55,54,0,63],
[71,48,60,54,54,62,59,55,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,68,86,100,61,60,98,74,31],
[57,0,68,91,85,53,79,76,104,70],
[62,62,0,87,100,50,77,82,104,60],
[44,39,43,0,70,62,49,60,52,38],
[30,45,30,60,0,48,47,35,66,39],
[69,77,80,68,82,0,56,69,74,52],
[70,51,53,81,83,74,0,84,74,50],
[32,54,48,70,95,61,46,0,72,25],
[56,26,26,78,64,56,56,58,0,42],
[99,60,70,92,91,78,80,105,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,66,72,57,63,73,70,70],
[61,0,67,58,68,54,61,67,59,63],
[63,63,0,60,62,56,54,67,58,66],
[64,72,70,0,77,59,70,74,68,63],
[58,62,68,53,0,54,63,73,69,61],
[73,76,74,71,76,0,68,84,64,66],
[67,69,76,60,67,62,0,77,69,72],
[57,63,63,56,57,46,53,0,54,56],
[60,71,72,62,61,66,61,76,0,59],
[60,67,64,67,69,64,58,74,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,58,58,65,63,64,66,58,66],
[72,0,69,65,62,64,64,71,64,72],
[72,61,0,61,65,61,63,61,54,61],
[72,65,69,0,66,64,65,63,60,65],
[65,68,65,64,0,60,61,71,62,66],
[67,66,69,66,70,0,68,66,62,65],
[66,66,67,65,69,62,0,68,64,75],
[64,59,69,67,59,64,62,0,61,57],
[72,66,76,70,68,68,66,69,0,65],
[64,58,69,65,64,65,55,73,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,60,56,68,66,55,71,58],
[63,0,65,58,62,69,68,62,69,65],
[63,65,0,59,74,71,68,62,74,63],
[70,72,71,0,64,74,87,75,72,68],
[74,68,56,66,0,75,78,64,62,66],
[62,61,59,56,55,0,66,52,63,63],
[64,62,62,43,52,64,0,51,58,52],
[75,68,68,55,66,78,79,0,71,64],
[59,61,56,58,68,67,72,59,0,63],
[72,65,67,62,64,67,78,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,79,61,75,52,52,67,61,61],
[60,0,51,52,67,40,50,62,47,70],
[51,79,0,69,69,53,68,59,72,73],
[69,78,61,0,69,60,71,54,58,82],
[55,63,61,61,0,61,59,52,49,56],
[78,90,77,70,69,0,69,74,65,86],
[78,80,62,59,71,61,0,63,61,66],
[63,68,71,76,78,56,67,0,67,72],
[69,83,58,72,81,65,69,63,0,78],
[69,60,57,48,74,44,64,58,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,62,75,71,71,63,70,71,65],
[59,0,60,68,68,59,52,53,59,63],
[68,70,0,71,71,65,65,70,62,71],
[55,62,59,0,65,69,70,62,64,61],
[59,62,59,65,0,60,59,62,57,65],
[59,71,65,61,70,0,57,60,72,65],
[67,78,65,60,71,73,0,68,70,70],
[60,77,60,68,68,70,62,0,64,68],
[59,71,68,66,73,58,60,66,0,68],
[65,67,59,69,65,65,60,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,71,58,70,58,53,67,69,59],
[66,0,59,60,71,71,59,63,63,56],
[59,71,0,64,73,73,71,78,74,66],
[72,70,66,0,73,70,53,70,59,67],
[60,59,57,57,0,63,59,59,62,58],
[72,59,57,60,67,0,68,63,64,58],
[77,71,59,77,71,62,0,72,71,70],
[63,67,52,60,71,67,58,0,54,72],
[61,67,56,71,68,66,59,76,0,73],
[71,74,64,63,72,72,60,58,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,56,53,63,62,65,76,47,59],
[70,0,69,52,63,74,41,67,48,55],
[74,61,0,82,63,63,73,81,73,67],
[77,78,48,0,76,77,66,70,80,60],
[67,67,67,54,0,54,55,69,51,67],
[68,56,67,53,76,0,37,66,56,57],
[65,89,57,64,75,93,0,71,57,66],
[54,63,49,60,61,64,59,0,60,66],
[83,82,57,50,79,74,73,70,0,67],
[71,75,63,70,63,73,64,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,62,47,53,47,56,57,44,59],
[74,0,77,71,64,61,67,66,57,63],
[68,53,0,47,61,55,58,68,62,63],
[83,59,83,0,75,76,69,70,66,70],
[77,66,69,55,0,60,58,60,52,63],
[83,69,75,54,70,0,65,77,66,75],
[74,63,72,61,72,65,0,62,63,57],
[73,64,62,60,70,53,68,0,64,78],
[86,73,68,64,78,64,67,66,0,83],
[71,67,67,60,67,55,73,52,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,57,70,61,66,79,60,78,77],
[53,0,64,63,51,50,79,61,60,67],
[73,66,0,66,81,51,88,61,65,73],
[60,67,64,0,75,75,86,79,71,75],
[69,79,49,55,0,64,85,53,60,60],
[64,80,79,55,66,0,84,62,71,63],
[51,51,42,44,45,46,0,42,45,44],
[70,69,69,51,77,68,88,0,80,85],
[52,70,65,59,70,59,85,50,0,61],
[53,63,57,55,70,67,86,45,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,69,77,65,56,65,65,61,63],
[71,0,71,71,68,65,69,63,68,67],
[61,59,0,74,69,63,72,64,65,63],
[53,59,56,0,62,58,61,61,62,60],
[65,62,61,68,0,60,61,62,59,59],
[74,65,67,72,70,0,67,66,63,64],
[65,61,58,69,69,63,0,59,60,55],
[65,67,66,69,68,64,71,0,68,69],
[69,62,65,68,71,67,70,62,0,62],
[67,63,67,70,71,66,75,61,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,63,81,68,58,74,76,76,69],
[60,0,65,60,67,58,65,69,69,60],
[67,65,0,83,72,69,72,79,83,82],
[49,70,47,0,63,57,59,60,74,68],
[62,63,58,67,0,57,65,67,77,69],
[72,72,61,73,73,0,71,72,74,69],
[56,65,58,71,65,59,0,69,82,72],
[54,61,51,70,63,58,61,0,77,59],
[54,61,47,56,53,56,48,53,0,55],
[61,70,48,62,61,61,58,71,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,61,61,64,64,67,72,65],
[62,0,66,61,52,51,66,56,68,51],
[64,64,0,69,59,68,69,60,68,65],
[69,69,61,0,65,62,68,66,63,58],
[69,78,71,65,0,69,74,79,71,63],
[66,79,62,68,61,0,80,67,71,61],
[66,64,61,62,56,50,0,61,67,57],
[63,74,70,64,51,63,69,0,65,58],
[58,62,62,67,59,59,63,65,0,62],
[65,79,65,72,67,69,73,72,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,67,65,66,78,80,70,72,68],
[56,0,60,60,65,69,60,59,68,57],
[63,70,0,64,65,71,77,69,73,68],
[65,70,66,0,73,72,69,64,75,68],
[64,65,65,57,0,71,70,68,71,64],
[52,61,59,58,59,0,61,62,59,53],
[50,70,53,61,60,69,0,62,64,60],
[60,71,61,66,62,68,68,0,70,60],
[58,62,57,55,59,71,66,60,0,56],
[62,73,62,62,66,77,70,70,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,69,66,71,75,64,63,63],
[66,0,67,69,65,68,73,67,62,66],
[68,63,0,61,64,57,72,64,60,58],
[61,61,69,0,60,62,67,57,55,62],
[64,65,66,70,0,63,70,73,65,62],
[59,62,73,68,67,0,65,63,60,63],
[55,57,58,63,60,65,0,64,56,56],
[66,63,66,73,57,67,66,0,61,59],
[67,68,70,75,65,70,74,69,0,62],
[67,64,72,68,68,67,74,71,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,54,58,67,66,64,60,57,68],
[73,0,47,60,67,79,70,47,59,64],
[76,83,0,67,80,73,77,57,76,81],
[72,70,63,0,69,79,84,65,79,74],
[63,63,50,61,0,72,65,53,61,62],
[64,51,57,51,58,0,53,50,59,61],
[66,60,53,46,65,77,0,52,58,72],
[70,83,73,65,77,80,78,0,69,76],
[73,71,54,51,69,71,72,61,0,68],
[62,66,49,56,68,69,58,54,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,53,59,69,55,55,58,71,68],
[75,0,65,75,83,72,78,67,72,73],
[77,65,0,71,67,58,66,67,67,81],
[71,55,59,0,69,63,59,55,60,64],
[61,47,63,61,0,62,56,58,61,61],
[75,58,72,67,68,0,63,60,62,64],
[75,52,64,71,74,67,0,53,74,72],
[72,63,63,75,72,70,77,0,84,70],
[59,58,63,70,69,68,56,46,0,62],
[62,57,49,66,69,66,58,60,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,69,78,70,43,72,75,73,55],
[74,0,71,77,82,57,68,88,59,58],
[61,59,0,85,66,48,57,68,71,42],
[52,53,45,0,54,51,66,66,53,46],
[60,48,64,76,0,66,68,68,61,60],
[87,73,82,79,64,0,68,65,68,66],
[58,62,73,64,62,62,0,69,75,63],
[55,42,62,64,62,65,61,0,70,59],
[57,71,59,77,69,62,55,60,0,56],
[75,72,88,84,70,64,67,71,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,69,74,75,70,67,67,61,80],
[53,0,66,66,67,68,59,68,55,59],
[61,64,0,69,60,65,62,63,62,70],
[56,64,61,0,57,61,60,62,67,73],
[55,63,70,73,0,72,58,71,68,73],
[60,62,65,69,58,0,62,66,57,69],
[63,71,68,70,72,68,0,74,71,80],
[63,62,67,68,59,64,56,0,61,66],
[69,75,68,63,62,73,59,69,0,74],
[50,71,60,57,57,61,50,64,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,61,65,69,63,65,59,68,62],
[71,0,58,74,72,58,72,69,79,71],
[69,72,0,76,77,68,78,65,71,73],
[65,56,54,0,63,56,69,57,67,56],
[61,58,53,67,0,68,65,61,70,62],
[67,72,62,74,62,0,67,72,69,72],
[65,58,52,61,65,63,0,61,66,50],
[71,61,65,73,69,58,69,0,78,68],
[62,51,59,63,60,61,64,52,0,58],
[68,59,57,74,68,58,80,62,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,55,59,48,46,45,67,47,66],
[74,0,72,67,74,55,52,72,67,83],
[75,58,0,57,54,59,59,60,36,76],
[71,63,73,0,55,60,47,50,53,70],
[82,56,76,75,0,69,54,52,56,68],
[84,75,71,70,61,0,60,74,62,80],
[85,78,71,83,76,70,0,76,65,86],
[63,58,70,80,78,56,54,0,61,64],
[83,63,94,77,74,68,65,69,0,85],
[64,47,54,60,62,50,44,66,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,86,61,72,60,73,70,64,51],
[48,0,71,71,65,62,71,62,68,61],
[44,59,0,45,57,50,61,54,40,48],
[69,59,85,0,72,72,60,63,70,65],
[58,65,73,58,0,55,61,47,60,56],
[70,68,80,58,75,0,57,78,78,68],
[57,59,69,70,69,73,0,81,72,70],
[60,68,76,67,83,52,49,0,67,63],
[66,62,90,60,70,52,58,63,0,47],
[79,69,82,65,74,62,60,67,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,56,62,53,60,60,64,75,64],
[75,0,63,64,59,60,73,61,74,73],
[74,67,0,67,61,73,66,64,78,71],
[68,66,63,0,64,60,59,59,68,70],
[77,71,69,66,0,62,59,64,69,67],
[70,70,57,70,68,0,61,66,78,69],
[70,57,64,71,71,69,0,62,73,66],
[66,69,66,71,66,64,68,0,75,67],
[55,56,52,62,61,52,57,55,0,58],
[66,57,59,60,63,61,64,63,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,59,59,52,55,73,62,68,66],
[69,0,52,69,78,66,74,73,75,68],
[71,78,0,62,72,67,77,73,80,76],
[71,61,68,0,65,51,60,65,74,60],
[78,52,58,65,0,53,67,59,63,65],
[75,64,63,79,77,0,75,65,69,65],
[57,56,53,70,63,55,0,54,66,58],
[68,57,57,65,71,65,76,0,69,66],
[62,55,50,56,67,61,64,61,0,63],
[64,62,54,70,65,65,72,64,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,65,78,69,56,72,87,73,59],
[79,0,67,76,70,63,70,73,71,65],
[65,63,0,73,60,60,72,76,80,42],
[52,54,57,0,54,55,53,73,69,52],
[61,60,70,76,0,53,72,81,70,52],
[74,67,70,75,77,0,79,83,86,55],
[58,60,58,77,58,51,0,62,75,49],
[43,57,54,57,49,47,68,0,84,47],
[57,59,50,61,60,44,55,46,0,41],
[71,65,88,78,78,75,81,83,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,70,69,62,56,53,58,80,80],
[60,0,49,56,73,60,59,71,69,83],
[60,81,0,79,78,75,87,89,73,75],
[61,74,51,0,63,62,58,85,67,70],
[68,57,52,67,0,63,54,69,53,79],
[74,70,55,68,67,0,55,73,74,68],
[77,71,43,72,76,75,0,85,65,70],
[72,59,41,45,61,57,45,0,67,63],
[50,61,57,63,77,56,65,63,0,79],
[50,47,55,60,51,62,60,67,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,62,67,71,57,63,73,69,66],
[60,0,60,68,66,65,61,71,60,62],
[68,70,0,56,67,58,50,68,62,60],
[63,62,74,0,74,64,65,73,68,66],
[59,64,63,56,0,59,52,63,61,64],
[73,65,72,66,71,0,60,79,62,70],
[67,69,80,65,78,70,0,70,67,79],
[57,59,62,57,67,51,60,0,54,65],
[61,70,68,62,69,68,63,76,0,65],
[64,68,70,64,66,60,51,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,79,69,64,72,67,70,72],
[68,0,64,63,70,61,65,61,65,62],
[67,66,0,78,68,64,62,57,74,60],
[51,67,52,0,63,58,58,62,57,66],
[61,60,62,67,0,71,65,63,58,68],
[66,69,66,72,59,0,71,64,71,63],
[58,65,68,72,65,59,0,66,61,73],
[63,69,73,68,67,66,64,0,65,74],
[60,65,56,73,72,59,69,65,0,67],
[58,68,70,64,62,67,57,56,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,67,61,57,65,79,61,62,74],
[47,0,55,67,61,65,77,63,81,60],
[63,75,0,74,53,66,70,59,73,78],
[69,63,56,0,58,45,69,63,53,82],
[73,69,77,72,0,76,97,61,84,85],
[65,65,64,85,54,0,76,71,66,80],
[51,53,60,61,33,54,0,49,56,46],
[69,67,71,67,69,59,81,0,74,69],
[68,49,57,77,46,64,74,56,0,72],
[56,70,52,48,45,50,84,61,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,71,69,59,66,92,62,63,65],
[47,0,74,47,61,65,60,47,48,52],
[59,56,0,61,53,67,74,60,63,68],
[61,83,69,0,62,56,74,50,61,54],
[71,69,77,68,0,70,78,69,60,65],
[64,65,63,74,60,0,67,56,61,54],
[38,70,56,56,52,63,0,64,58,68],
[68,83,70,80,61,74,66,0,69,57],
[67,82,67,69,70,69,72,61,0,65],
[65,78,62,76,65,76,62,73,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,72,75,77,82,72,69,59,74],
[72,0,72,67,70,76,76,74,74,63],
[58,58,0,58,58,58,61,61,60,54],
[55,63,72,0,67,68,76,66,63,62],
[53,60,72,63,0,75,60,71,66,62],
[48,54,72,62,55,0,66,53,62,69],
[58,54,69,54,70,64,0,58,64,61],
[61,56,69,64,59,77,72,0,64,68],
[71,56,70,67,64,68,66,66,0,71],
[56,67,76,68,68,61,69,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,55,57,56,52,46,52,55,71],
[71,0,75,50,64,38,67,47,63,61],
[75,55,0,67,39,58,74,66,49,60],
[73,80,63,0,54,70,75,52,47,61],
[74,66,91,76,0,48,82,60,82,56],
[78,92,72,60,82,0,57,76,59,85],
[84,63,56,55,48,73,0,62,55,68],
[78,83,64,78,70,54,68,0,75,92],
[75,67,81,83,48,71,75,55,0,81],
[59,69,70,69,74,45,62,38,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,57,60,62,59,63,67,58,52],
[71,0,64,61,71,65,70,62,58,61],
[73,66,0,76,72,74,67,56,65,64],
[70,69,54,0,66,74,59,56,64,53],
[68,59,58,64,0,61,58,54,67,60],
[71,65,56,56,69,0,52,58,57,62],
[67,60,63,71,72,78,0,62,63,61],
[63,68,74,74,76,72,68,0,68,66],
[72,72,65,66,63,73,67,62,0,57],
[78,69,66,77,70,68,69,64,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,57,76,73,67,64,61,67],
[66,0,63,72,66,78,71,68,74,69],
[63,67,0,60,73,76,73,67,69,70],
[73,58,70,0,69,86,75,59,62,65],
[54,64,57,61,0,77,67,58,64,63],
[57,52,54,44,53,0,55,58,47,47],
[63,59,57,55,63,75,0,63,53,59],
[66,62,63,71,72,72,67,0,61,54],
[69,56,61,68,66,83,77,69,0,72],
[63,61,60,65,67,83,71,76,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,67,60,65,64,64,59,61],
[66,0,74,64,65,72,69,68,60,72],
[61,56,0,61,65,65,57,63,58,67],
[63,66,69,0,62,70,71,72,62,74],
[70,65,65,68,0,71,68,67,66,73],
[65,58,65,60,59,0,56,61,52,63],
[66,61,73,59,62,74,0,67,59,69],
[66,62,67,58,63,69,63,0,61,64],
[71,70,72,68,64,78,71,69,0,71],
[69,58,63,56,57,67,61,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,69,65,66,68,66,72,68,62],
[69,0,65,59,62,68,58,70,71,59],
[61,65,0,64,66,71,63,63,64,65],
[65,71,66,0,68,70,70,64,75,63],
[64,68,64,62,0,60,57,74,69,58],
[62,62,59,60,70,0,62,67,64,60],
[64,72,67,60,73,68,0,80,67,62],
[58,60,67,66,56,63,50,0,63,57],
[62,59,66,55,61,66,63,67,0,53],
[68,71,65,67,72,70,68,73,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,66,72,55,66,68,55,80,75],
[41,0,42,36,34,40,50,45,32,63],
[64,88,0,75,67,89,82,62,66,56],
[58,94,55,0,34,59,74,51,66,58],
[75,96,63,96,0,79,80,47,83,71],
[64,90,41,71,51,0,78,41,60,62],
[62,80,48,56,50,52,0,66,62,68],
[75,85,68,79,83,89,64,0,86,78],
[50,98,64,64,47,70,68,44,0,64],
[55,67,74,72,59,68,62,52,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,68,69,68,75,71,63,64],
[66,0,66,68,68,68,70,63,69,70],
[65,64,0,70,67,65,71,58,61,70],
[62,62,60,0,70,61,66,65,65,64],
[61,62,63,60,0,64,68,62,64,63],
[62,62,65,69,66,0,76,62,63,72],
[55,60,59,64,62,54,0,64,61,63],
[59,67,72,65,68,68,66,0,62,63],
[67,61,69,65,66,67,69,68,0,69],
[66,60,60,66,67,58,67,67,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,78,72,66,64,71,69,78,67],
[56,0,57,61,59,61,63,73,74,64],
[52,73,0,62,64,64,68,73,76,67],
[58,69,68,0,64,66,63,72,80,66],
[64,71,66,66,0,65,58,74,70,66],
[66,69,66,64,65,0,64,78,74,69],
[59,67,62,67,72,66,0,69,75,60],
[61,57,57,58,56,52,61,0,71,51],
[52,56,54,50,60,56,55,59,0,56],
[63,66,63,64,64,61,70,79,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,56,59,53,63,58,68,51,58],
[74,0,65,74,74,63,68,82,58,61],
[74,65,0,74,64,71,59,84,60,60],
[71,56,56,0,52,69,68,72,63,67],
[77,56,66,78,0,70,72,85,52,76],
[67,67,59,61,60,0,66,77,61,69],
[72,62,71,62,58,64,0,72,68,71],
[62,48,46,58,45,53,58,0,41,45],
[79,72,70,67,78,69,62,89,0,76],
[72,69,70,63,54,61,59,85,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,49,69,76,60,67,66,69,81],
[63,0,54,74,72,72,62,72,77,74],
[81,76,0,77,80,74,67,70,75,61],
[61,56,53,0,68,71,63,50,68,67],
[54,58,50,62,0,64,36,56,57,57],
[70,58,56,59,66,0,69,63,63,73],
[63,68,63,67,94,61,0,62,67,71],
[64,58,60,80,74,67,68,0,73,75],
[61,53,55,62,73,67,63,57,0,46],
[49,56,69,63,73,57,59,55,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,58,53,67,70,69,77,79,91],
[48,0,55,49,65,55,64,90,82,75],
[72,75,0,60,72,56,67,88,80,99],
[77,81,70,0,73,60,84,85,77,90],
[63,65,58,57,0,63,68,68,75,100],
[60,75,74,70,67,0,87,76,85,86],
[61,66,63,46,62,43,0,68,71,69],
[53,40,42,45,62,54,62,0,70,72],
[51,48,50,53,55,45,59,60,0,64],
[39,55,31,40,30,44,61,58,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,51,63,61,54,66,66,64,68],
[65,0,62,62,62,51,64,62,57,63],
[79,68,0,70,64,68,73,64,62,75],
[67,68,60,0,62,62,65,63,55,64],
[69,68,66,68,0,64,60,66,57,65],
[76,79,62,68,66,0,81,68,69,71],
[64,66,57,65,70,49,0,61,53,66],
[64,68,66,67,64,62,69,0,63,61],
[66,73,68,75,73,61,77,67,0,69],
[62,67,55,66,65,59,64,69,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,61,68,87,61,48,107,61,70],
[69,0,52,117,87,71,87,116,41,86],
[69,78,0,85,64,48,55,84,9,47],
[62,13,45,0,32,9,36,91,36,22],
[43,43,66,98,0,68,62,111,66,77],
[69,59,82,121,62,0,82,111,82,88],
[82,43,75,94,68,48,0,121,65,42],
[23,14,46,39,19,19,9,0,32,9],
[69,89,121,94,64,48,65,98,0,84],
[60,44,83,108,53,42,88,121,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,62,60,57,55,62,60,64,60],
[73,0,64,66,59,67,71,67,74,66],
[68,66,0,59,60,54,59,68,66,69],
[70,64,71,0,59,57,65,63,67,66],
[73,71,70,71,0,67,65,69,70,68],
[75,63,76,73,63,0,69,67,65,63],
[68,59,71,65,65,61,0,71,67,67],
[70,63,62,67,61,63,59,0,60,63],
[66,56,64,63,60,65,63,70,0,65],
[70,64,61,64,62,67,63,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,56,58,63,56,53,49,45,69],
[70,0,62,74,71,73,68,69,65,78],
[74,68,0,80,72,72,70,77,63,73],
[72,56,50,0,64,53,47,59,50,62],
[67,59,58,66,0,67,67,72,58,70],
[74,57,58,77,63,0,67,69,56,65],
[77,62,60,83,63,63,0,65,58,64],
[81,61,53,71,58,61,65,0,57,67],
[85,65,67,80,72,74,72,73,0,71],
[61,52,57,68,60,65,66,63,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,75,63,63,70,60,60,64,74],
[58,0,72,57,56,66,56,60,61,60],
[55,58,0,52,50,60,45,49,60,56],
[67,73,78,0,70,62,66,62,65,74],
[67,74,80,60,0,63,63,63,70,73],
[60,64,70,68,67,0,53,63,66,66],
[70,74,85,64,67,77,0,67,72,67],
[70,70,81,68,67,67,63,0,72,65],
[66,69,70,65,60,64,58,58,0,66],
[56,70,74,56,57,64,63,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,59,50,73,58,62,75,67],
[68,0,51,64,75,76,66,67,68,85],
[67,79,0,69,40,83,52,48,70,61],
[71,66,61,0,65,80,56,75,72,86],
[80,55,90,65,0,90,61,61,81,70],
[57,54,47,50,40,0,57,56,68,60],
[72,64,78,74,69,73,0,83,90,90],
[68,63,82,55,69,74,47,0,65,65],
[55,62,60,58,49,62,40,65,0,67],
[63,45,69,44,60,70,40,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,64,70,64,73,78,62,65,70],
[57,0,59,59,58,65,65,53,55,58],
[66,71,0,69,59,74,73,68,68,61],
[60,71,61,0,54,64,61,55,61,51],
[66,72,71,76,0,70,76,64,63,71],
[57,65,56,66,60,0,66,56,56,58],
[52,65,57,69,54,64,0,54,59,62],
[68,77,62,75,66,74,76,0,72,64],
[65,75,62,69,67,74,71,58,0,65],
[60,72,69,79,59,72,68,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,37,84,85,57,72,78,91,77],
[71,0,66,89,74,83,57,84,71,88],
[93,64,0,100,80,75,69,79,82,81],
[46,41,30,0,41,61,50,63,61,69],
[45,56,50,89,0,89,43,43,79,72],
[73,47,55,69,41,0,52,52,83,72],
[58,73,61,80,87,78,0,79,79,68],
[52,46,51,67,87,78,51,0,68,71],
[39,59,48,69,51,47,51,62,0,71],
[53,42,49,61,58,58,62,59,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,59,68,64,65,64,60,63,61],
[60,0,61,75,62,67,63,72,62,59],
[71,69,0,79,69,68,63,67,77,72],
[62,55,51,0,64,63,55,57,69,55],
[66,68,61,66,0,67,64,60,75,60],
[65,63,62,67,63,0,60,66,73,55],
[66,67,67,75,66,70,0,70,71,62],
[70,58,63,73,70,64,60,0,72,60],
[67,68,53,61,55,57,59,58,0,58],
[69,71,58,75,70,75,68,70,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,50,64,52,54,53,53,54,56],
[76,0,65,73,64,67,71,61,66,71],
[80,65,0,80,66,71,73,65,67,66],
[66,57,50,0,59,64,59,57,65,59],
[78,66,64,71,0,68,68,65,70,68],
[76,63,59,66,62,0,64,51,64,61],
[77,59,57,71,62,66,0,53,64,68],
[77,69,65,73,65,79,77,0,73,62],
[76,64,63,65,60,66,66,57,0,62],
[74,59,64,71,62,69,62,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,64,66,63,60,68,74,69,58],
[52,0,52,59,59,52,56,63,60,51],
[66,78,0,63,57,67,68,77,67,63],
[64,71,67,0,66,66,66,74,78,65],
[67,71,73,64,0,66,63,67,75,58],
[70,78,63,64,64,0,70,72,66,61],
[62,74,62,64,67,60,0,67,68,60],
[56,67,53,56,63,58,63,0,71,58],
[61,70,63,52,55,64,62,59,0,54],
[72,79,67,65,72,69,70,72,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,93,76,48,64,76,76,76,115],
[21,0,87,64,42,58,70,31,54,103],
[37,43,0,64,64,43,76,37,64,88],
[54,66,66,0,66,66,78,33,66,51],
[82,88,66,64,0,49,43,49,115,88],
[66,72,87,64,81,0,48,64,81,87],
[54,60,54,52,87,82,0,43,87,72],
[54,99,93,97,81,66,87,0,99,72],
[54,76,66,64,15,49,43,31,0,103],
[15,27,42,79,42,43,58,58,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,66,61,71,60,68,63,56,66],
[80,0,74,83,78,70,79,75,73,62],
[64,56,0,74,65,53,67,57,64,63],
[69,47,56,0,73,59,71,63,59,63],
[59,52,65,57,0,72,64,54,56,53],
[70,60,77,71,58,0,68,79,70,51],
[62,51,63,59,66,62,0,59,59,46],
[67,55,73,67,76,51,71,0,66,63],
[74,57,66,71,74,60,71,64,0,59],
[64,68,67,67,77,79,84,67,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,66,76,78,65,63,82,66,84],
[38,0,64,58,48,68,51,50,61,51],
[64,66,0,52,61,61,57,75,62,80],
[54,72,78,0,56,72,62,58,70,64],
[52,82,69,74,0,65,67,84,77,61],
[65,62,69,58,65,0,56,76,60,71],
[67,79,73,68,63,74,0,63,67,75],
[48,80,55,72,46,54,67,0,59,65],
[64,69,68,60,53,70,63,71,0,68],
[46,79,50,66,69,59,55,65,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,77,68,63,78,82,66,79,61],
[54,0,42,46,53,59,67,61,57,52],
[53,88,0,61,59,79,75,70,66,66],
[62,84,69,0,73,86,80,68,73,70],
[67,77,71,57,0,84,82,71,82,67],
[52,71,51,44,46,0,64,54,66,56],
[48,63,55,50,48,66,0,39,76,59],
[64,69,60,62,59,76,91,0,70,71],
[51,73,64,57,48,64,54,60,0,61],
[69,78,64,60,63,74,71,59,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,72,70,56,61,63,68,62,68],
[64,0,76,70,58,61,70,69,70,67],
[58,54,0,67,51,61,56,59,58,63],
[60,60,63,0,61,65,66,69,69,72],
[74,72,79,69,0,67,65,75,67,73],
[69,69,69,65,63,0,65,64,67,72],
[67,60,74,64,65,65,0,68,64,65],
[62,61,71,61,55,66,62,0,55,58],
[68,60,72,61,63,63,66,75,0,65],
[62,63,67,58,57,58,65,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,57,59,52,61,62,68,67,64],
[71,0,73,73,62,68,70,73,67,62],
[73,57,0,74,55,72,69,76,71,65],
[71,57,56,0,59,61,67,66,67,57],
[78,68,75,71,0,68,73,72,62,66],
[69,62,58,69,62,0,66,65,60,59],
[68,60,61,63,57,64,0,71,63,61],
[62,57,54,64,58,65,59,0,64,60],
[63,63,59,63,68,70,67,66,0,63],
[66,68,65,73,64,71,69,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,75,63,70,66,63,66,47,68],
[80,0,83,76,79,105,78,82,64,58],
[55,47,0,58,39,63,61,58,40,57],
[67,54,72,0,54,70,69,50,36,53],
[60,51,91,76,0,71,87,62,62,53],
[64,25,67,60,59,0,59,48,39,40],
[67,52,69,61,43,71,0,48,60,53],
[64,48,72,80,68,82,82,0,66,69],
[83,66,90,94,68,91,70,64,0,64],
[62,72,73,77,77,90,77,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,60,56,74,52,64,66,55,60],
[86,0,84,65,74,66,73,72,79,63],
[70,46,0,59,67,61,55,63,64,55],
[74,65,71,0,73,68,68,77,70,70],
[56,56,63,57,0,50,44,60,60,52],
[78,64,69,62,80,0,65,71,70,63],
[66,57,75,62,86,65,0,67,71,55],
[64,58,67,53,70,59,63,0,70,63],
[75,51,66,60,70,60,59,60,0,55],
[70,67,75,60,78,67,75,67,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,74,75,59,87,82,76,62,81],
[61,0,70,78,66,77,76,74,63,67],
[56,60,0,62,58,69,62,70,56,52],
[55,52,68,0,48,76,65,58,50,60],
[71,64,72,82,0,86,75,75,76,73],
[43,53,61,54,44,0,55,57,58,56],
[48,54,68,65,55,75,0,60,66,61],
[54,56,60,72,55,73,70,0,57,58],
[68,67,74,80,54,72,64,73,0,64],
[49,63,78,70,57,74,69,72,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,71,65,59,59,50,62,58,52],
[85,0,72,83,74,74,66,67,63,82],
[59,58,0,73,79,74,57,73,64,69],
[65,47,57,0,45,56,45,73,53,70],
[71,56,51,85,0,56,71,71,45,78],
[71,56,56,74,74,0,61,74,74,76],
[80,64,73,85,59,69,0,78,58,75],
[68,63,57,57,59,56,52,0,60,67],
[72,67,66,77,85,56,72,70,0,64],
[78,48,61,60,52,54,55,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,64,53,56,57,75,58,78,68],
[55,0,46,42,35,43,47,38,47,52],
[66,84,0,48,80,83,70,68,84,68],
[77,88,82,0,78,87,81,65,70,53],
[74,95,50,52,0,48,54,68,67,71],
[73,87,47,43,82,0,66,72,65,74],
[55,83,60,49,76,64,0,65,69,59],
[72,92,62,65,62,58,65,0,65,77],
[52,83,46,60,63,65,61,65,0,43],
[62,78,62,77,59,56,71,53,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,84,78,64,69,63,69,63,78],
[72,0,70,63,69,67,79,65,89,77],
[46,60,0,70,73,71,73,70,74,87],
[52,67,60,0,59,45,63,61,50,66],
[66,61,57,71,0,63,63,64,68,77],
[61,63,59,85,67,0,68,68,68,85],
[67,51,57,67,67,62,0,67,70,77],
[61,65,60,69,66,62,63,0,62,73],
[67,41,56,80,62,62,60,68,0,72],
[52,53,43,64,53,45,53,57,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,64,58,74,59,63,75,71],
[65,0,76,62,62,68,68,68,70,69],
[60,54,0,60,57,66,63,63,66,64],
[66,68,70,0,59,76,71,65,67,69],
[72,68,73,71,0,77,72,65,75,71],
[56,62,64,54,53,0,66,65,66,61],
[71,62,67,59,58,64,0,60,72,61],
[67,62,67,65,65,65,70,0,68,71],
[55,60,64,63,55,64,58,62,0,58],
[59,61,66,61,59,69,69,59,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,65,40,61,79,100,66,71,52],
[42,0,16,51,51,61,47,50,49,36],
[65,114,0,72,72,92,72,68,74,61],
[90,79,58,0,59,62,79,64,64,57],
[69,79,58,71,0,72,72,47,72,40],
[51,69,38,68,58,0,54,65,55,57],
[30,83,58,51,58,76,0,52,43,38],
[64,80,62,66,83,65,78,0,50,54],
[59,81,56,66,58,75,87,80,0,67],
[78,94,69,73,90,73,92,76,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,66,71,76,83,77,77,84,43],
[61,0,73,68,76,61,67,93,105,61],
[64,57,0,55,88,67,44,73,74,48],
[59,62,75,0,102,71,109,109,104,68],
[54,54,42,28,0,46,44,76,48,45],
[47,69,63,59,84,0,66,59,88,63],
[53,63,86,21,86,64,0,69,91,79],
[53,37,57,21,54,71,61,0,56,62],
[46,25,56,26,82,42,39,74,0,21],
[87,69,82,62,85,67,51,68,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,37,31,66,76,75,88,70,42],
[65,0,71,67,71,73,61,79,70,65],
[93,59,0,55,53,75,65,59,85,67],
[99,63,75,0,55,79,64,93,81,58],
[64,59,77,75,0,67,75,95,68,58],
[54,57,55,51,63,0,53,62,46,40],
[55,69,65,66,55,77,0,103,79,56],
[42,51,71,37,35,68,27,0,54,38],
[60,60,45,49,62,84,51,76,0,65],
[88,65,63,72,72,90,74,92,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,83,63,72,70,75,67,74,67],
[67,0,73,61,79,64,73,62,76,66],
[47,57,0,55,64,54,61,51,51,56],
[67,69,75,0,73,57,71,58,74,66],
[58,51,66,57,0,53,59,42,59,52],
[60,66,76,73,77,0,70,64,72,72],
[55,57,69,59,71,60,0,53,57,53],
[63,68,79,72,88,66,77,0,69,69],
[56,54,79,56,71,58,73,61,0,64],
[63,64,74,64,78,58,77,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,54,68,91,102,80,84,88,112],
[28,0,60,58,85,80,61,67,63,46],
[76,70,0,63,81,69,73,73,76,67],
[62,72,67,0,104,84,59,83,63,72],
[39,45,49,26,0,35,36,43,46,29],
[28,50,61,46,95,0,52,46,54,47],
[50,69,57,71,94,78,0,61,53,50],
[46,63,57,47,87,84,69,0,59,85],
[42,67,54,67,84,76,77,71,0,72],
[18,84,63,58,101,83,80,45,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,67,62,71,58,63,68,64,66],
[68,0,56,57,61,52,58,66,57,66],
[63,74,0,70,67,59,62,70,59,68],
[68,73,60,0,71,64,60,68,64,59],
[59,69,63,59,0,58,66,65,64,57],
[72,78,71,66,72,0,64,73,64,69],
[67,72,68,70,64,66,0,75,65,69],
[62,64,60,62,65,57,55,0,52,61],
[66,73,71,66,66,66,65,78,0,78],
[64,64,62,71,73,61,61,69,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,74,62,59,72,66,67,71],
[63,0,52,73,58,69,72,65,72,65],
[63,78,0,79,66,72,68,70,75,76],
[56,57,51,0,64,63,63,68,65,65],
[68,72,64,66,0,73,73,67,82,81],
[71,61,58,67,57,0,72,60,61,64],
[58,58,62,67,57,58,0,58,61,64],
[64,65,60,62,63,70,72,0,74,72],
[63,58,55,65,48,69,69,56,0,72],
[59,65,54,65,49,66,66,58,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,63,66,67,66,57,70,69,58],
[75,0,64,64,68,67,60,77,69,61],
[67,66,0,71,72,71,64,70,71,70],
[64,66,59,0,63,64,58,69,72,65],
[63,62,58,67,0,63,61,77,60,56],
[64,63,59,66,67,0,60,75,70,59],
[73,70,66,72,69,70,0,75,70,64],
[60,53,60,61,53,55,55,0,56,51],
[61,61,59,58,70,60,60,74,0,57],
[72,69,60,65,74,71,66,79,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,67,70,63,65,57,86,68,65],
[75,0,67,61,62,75,54,70,58,58],
[63,63,0,62,60,81,64,76,65,58],
[60,69,68,0,75,84,69,95,90,73],
[67,68,70,55,0,76,55,79,65,61],
[65,55,49,46,54,0,33,75,46,63],
[73,76,66,61,75,97,0,78,73,71],
[44,60,54,35,51,55,52,0,50,48],
[62,72,65,40,65,84,57,80,0,60],
[65,72,72,57,69,67,59,82,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,52,53,50,39,66,41,73,65],
[63,0,50,67,71,68,61,53,57,64],
[78,80,0,66,80,66,59,55,76,65],
[77,63,64,0,62,73,54,55,73,56],
[80,59,50,68,0,52,67,67,60,51],
[91,62,64,57,78,0,71,70,70,82],
[64,69,71,76,63,59,0,65,74,56],
[89,77,75,75,63,60,65,0,74,70],
[57,73,54,57,70,60,56,56,0,55],
[65,66,65,74,79,48,74,60,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,65,62,53,57,61,63,64],
[66,0,67,63,64,54,63,64,61,67],
[70,63,0,65,65,63,65,61,64,61],
[65,67,65,0,63,62,64,62,68,69],
[68,66,65,67,0,68,62,61,59,64],
[77,76,67,68,62,0,68,65,75,73],
[73,67,65,66,68,62,0,66,65,72],
[69,66,69,68,69,65,64,0,67,66],
[67,69,66,62,71,55,65,63,0,64],
[66,63,69,61,66,57,58,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,51,65,62,62,61,66,58,37],
[55,0,41,73,65,71,56,64,88,64],
[79,89,0,66,82,65,70,80,78,65],
[65,57,64,0,66,50,59,56,71,52],
[68,65,48,64,0,63,54,72,58,56],
[68,59,65,80,67,0,49,78,86,57],
[69,74,60,71,76,81,0,73,76,63],
[64,66,50,74,58,52,57,0,66,65],
[72,42,52,59,72,44,54,64,0,54],
[93,66,65,78,74,73,67,65,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,73,60,71,68,70,65,62,71],
[67,0,70,62,70,66,66,69,66,76],
[57,60,0,56,62,63,63,61,60,70],
[70,68,74,0,76,63,64,71,67,69],
[59,60,68,54,0,61,59,58,61,68],
[62,64,67,67,69,0,65,66,65,71],
[60,64,67,66,71,65,0,64,66,66],
[65,61,69,59,72,64,66,0,67,74],
[68,64,70,63,69,65,64,63,0,76],
[59,54,60,61,62,59,64,56,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,72,66,65,68,57,35,75,70],
[60,0,64,47,60,69,48,46,56,60],
[58,66,0,55,55,65,61,51,64,55],
[64,83,75,0,65,69,63,56,74,63],
[65,70,75,65,0,60,71,63,63,62],
[62,61,65,61,70,0,64,56,53,62],
[73,82,69,67,59,66,0,66,62,68],
[95,84,79,74,67,74,64,0,83,74],
[55,74,66,56,67,77,68,47,0,55],
[60,70,75,67,68,68,62,56,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,71,67,60,74,53,63,59,66],
[72,0,70,70,60,75,68,64,66,66],
[59,60,0,55,59,62,59,62,58,58],
[63,60,75,0,66,77,58,65,64,66],
[70,70,71,64,0,78,63,75,59,69],
[56,55,68,53,52,0,49,63,51,59],
[77,62,71,72,67,81,0,72,58,68],
[67,66,68,65,55,67,58,0,56,62],
[71,64,72,66,71,79,72,74,0,73],
[64,64,72,64,61,71,62,68,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,65,62,61,65,59,56,64,64],
[64,0,65,66,65,65,57,53,64,60],
[65,65,0,62,65,62,57,54,57,57],
[68,64,68,0,66,61,61,58,65,61],
[69,65,65,64,0,56,55,60,64,58],
[65,65,68,69,74,0,66,60,67,61],
[71,73,73,69,75,64,0,63,68,69],
[74,77,76,72,70,70,67,0,71,65],
[66,66,73,65,66,63,62,59,0,62],
[66,70,73,69,72,69,61,65,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,55,63,56,71,62,63,59,53],
[68,0,74,61,63,62,75,63,60,73],
[75,56,0,59,62,67,70,69,54,59],
[67,69,71,0,55,69,66,60,57,61],
[74,67,68,75,0,73,69,67,66,53],
[59,68,63,61,57,0,77,60,50,65],
[68,55,60,64,61,53,0,63,58,67],
[67,67,61,70,63,70,67,0,61,63],
[71,70,76,73,64,80,72,69,0,65],
[77,57,71,69,77,65,63,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,73,67,72,59,50,61,61,68],
[71,0,71,59,65,71,53,65,60,50],
[57,59,0,54,54,61,48,49,51,45],
[63,71,76,0,60,65,56,55,53,57],
[58,65,76,70,0,67,50,56,68,49],
[71,59,69,65,63,0,54,65,58,65],
[80,77,82,74,80,76,0,74,66,65],
[69,65,81,75,74,65,56,0,60,59],
[69,70,79,77,62,72,64,70,0,74],
[62,80,85,73,81,65,65,71,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,49,62,54,61,60,52,59,59],
[69,0,55,68,65,56,53,54,55,55],
[81,75,0,61,68,60,61,63,61,67],
[68,62,69,0,50,63,62,63,59,62],
[76,65,62,80,0,62,52,70,58,63],
[69,74,70,67,68,0,66,66,61,65],
[70,77,69,68,78,64,0,74,69,66],
[78,76,67,67,60,64,56,0,62,69],
[71,75,69,71,72,69,61,68,0,78],
[71,75,63,68,67,65,64,61,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,54,51,55,52,61,64,56,64],
[72,0,73,66,62,58,61,70,70,52],
[76,57,0,60,68,61,69,65,74,71],
[79,64,70,0,76,70,70,78,75,74],
[75,68,62,54,0,61,71,66,73,62],
[78,72,69,60,69,0,79,67,65,72],
[69,69,61,60,59,51,0,71,65,53],
[66,60,65,52,64,63,59,0,59,74],
[74,60,56,55,57,65,65,71,0,65],
[66,78,59,56,68,58,77,56,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,67,72,70,77,70,61,85,69],
[48,0,44,54,51,69,57,50,67,49],
[63,86,0,67,77,76,76,65,79,71],
[58,76,63,0,69,69,71,67,84,68],
[60,79,53,61,0,74,63,59,82,51],
[53,61,54,61,56,0,58,54,64,54],
[60,73,54,59,67,72,0,64,77,60],
[69,80,65,63,71,76,66,0,82,72],
[45,63,51,46,48,66,53,48,0,52],
[61,81,59,62,79,76,70,58,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,84,40,73,82,86,68,48,60],
[60,0,46,67,59,47,79,67,61,58],
[46,84,0,52,102,98,80,84,64,98],
[90,63,78,0,80,90,79,111,78,60],
[57,71,28,50,0,104,68,76,56,40],
[48,83,32,40,26,0,58,80,61,48],
[44,51,50,51,62,72,0,56,46,61],
[62,63,46,19,54,50,74,0,47,30],
[82,69,66,52,74,69,84,83,0,56],
[70,72,32,70,90,82,69,100,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,80,73,68,73,68,75,64,72],
[62,0,67,62,68,66,68,66,68,74],
[50,63,0,60,57,62,64,61,65,63],
[57,68,70,0,67,69,57,57,66,66],
[62,62,73,63,0,58,67,62,72,76],
[57,64,68,61,72,0,65,64,62,71],
[62,62,66,73,63,65,0,74,71,77],
[55,64,69,73,68,66,56,0,68,77],
[66,62,65,64,58,68,59,62,0,61],
[58,56,67,64,54,59,53,53,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,93,76,66,89,85,86,87,62],
[65,0,85,85,76,82,87,87,89,71],
[37,45,0,36,55,69,66,68,62,34],
[54,45,94,0,57,72,69,82,70,67],
[64,54,75,73,0,75,76,70,77,60],
[41,48,61,58,55,0,50,68,76,35],
[45,43,64,61,54,80,0,70,81,42],
[44,43,62,48,60,62,60,0,77,52],
[43,41,68,60,53,54,49,53,0,26],
[68,59,96,63,70,95,88,78,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,74,67,63,67,67,63,54,61],
[60,0,62,58,59,67,54,62,62,56],
[56,68,0,59,58,66,65,56,52,61],
[63,72,71,0,69,75,68,70,61,70],
[67,71,72,61,0,61,60,64,67,66],
[63,63,64,55,69,0,63,58,54,56],
[63,76,65,62,70,67,0,59,55,66],
[67,68,74,60,66,72,71,0,59,68],
[76,68,78,69,63,76,75,71,0,68],
[69,74,69,60,64,74,64,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,62,61,56,51,61,66,55,70],
[72,0,50,50,50,46,62,66,46,55],
[68,80,0,56,62,55,60,63,57,54],
[69,80,74,0,66,66,67,68,60,73],
[74,80,68,64,0,59,63,74,62,66],
[79,84,75,64,71,0,58,69,65,71],
[69,68,70,63,67,72,0,75,76,62],
[64,64,67,62,56,61,55,0,67,57],
[75,84,73,70,68,65,54,63,0,63],
[60,75,76,57,64,59,68,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,70,62,64,82,76,71,70,61],
[66,0,70,66,66,76,65,73,71,69],
[60,60,0,64,62,77,63,60,67,54],
[68,64,66,0,66,74,67,74,69,50],
[66,64,68,64,0,74,73,71,67,54],
[48,54,53,56,56,0,70,57,54,56],
[54,65,67,63,57,60,0,61,54,58],
[59,57,70,56,59,73,69,0,68,51],
[60,59,63,61,63,76,76,62,0,57],
[69,61,76,80,76,74,72,79,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,27,27,40,45,50,62,61,31],
[90,0,42,79,73,94,58,67,69,43],
[103,88,0,77,89,94,40,67,87,89],
[103,51,53,0,91,73,55,50,81,68],
[90,57,41,39,0,74,55,68,98,43],
[85,36,36,57,56,0,21,61,68,27],
[80,72,90,75,75,109,0,51,72,80],
[68,63,63,80,62,69,79,0,46,55],
[69,61,43,49,32,62,58,84,0,34],
[99,87,41,62,87,103,50,75,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,62,66,71,56,70,75,74,68],
[65,0,73,71,69,70,75,81,79,64],
[68,57,0,68,60,66,59,75,80,55],
[64,59,62,0,51,65,59,75,71,66],
[59,61,70,79,0,69,65,72,80,67],
[74,60,64,65,61,0,57,75,68,67],
[60,55,71,71,65,73,0,71,80,56],
[55,49,55,55,58,55,59,0,72,60],
[56,51,50,59,50,62,50,58,0,47],
[62,66,75,64,63,63,74,70,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,64,61,74,68,67,53,72,52],
[69,0,69,59,63,72,66,58,63,59],
[66,61,0,59,66,68,79,63,65,57],
[69,71,71,0,64,65,72,67,72,65],
[56,67,64,66,0,72,70,55,70,60],
[62,58,62,65,58,0,63,54,60,59],
[63,64,51,58,60,67,0,50,61,53],
[77,72,67,63,75,76,80,0,75,64],
[58,67,65,58,60,70,69,55,0,49],
[78,71,73,65,70,71,77,66,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,58,66,54,54,50,51,101,65],
[75,0,46,46,68,10,31,25,123,46],
[72,84,0,70,102,87,79,54,105,87],
[64,84,60,0,54,54,86,61,101,64],
[76,62,28,76,0,36,86,7,86,61],
[76,120,43,76,94,0,86,22,123,47],
[80,99,51,44,44,44,0,44,120,51],
[79,105,76,69,123,108,86,0,105,64],
[29,7,25,29,44,7,10,25,0,14],
[65,84,43,66,69,83,79,66,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,66,81,64,41,49,79,56,69],
[71,0,72,89,80,55,48,75,56,62],
[64,58,0,78,70,41,36,67,50,54],
[49,41,52,0,61,42,23,46,48,27],
[66,50,60,69,0,50,47,51,59,35],
[89,75,89,88,80,0,69,85,62,80],
[81,82,94,107,83,61,0,84,69,82],
[51,55,63,84,79,45,46,0,66,67],
[74,74,80,82,71,68,61,64,0,63],
[61,68,76,103,95,50,48,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,58,58,50,64,64,47,46,62],
[71,0,51,73,70,73,71,64,59,58],
[72,79,0,58,62,75,65,60,55,55],
[72,57,72,0,63,51,71,67,69,53],
[80,60,68,67,0,56,71,65,61,59],
[66,57,55,79,74,0,56,63,76,55],
[66,59,65,59,59,74,0,57,48,55],
[83,66,70,63,65,67,73,0,74,73],
[84,71,75,61,69,54,82,56,0,63],
[68,72,75,77,71,75,75,57,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,59,61,64,51,46,53,58,59],
[78,0,65,56,53,63,54,60,52,66],
[71,65,0,62,62,61,64,58,54,64],
[69,74,68,0,60,56,66,62,52,66],
[66,77,68,70,0,59,58,62,69,59],
[79,67,69,74,71,0,60,66,66,71],
[84,76,66,64,72,70,0,67,71,80],
[77,70,72,68,68,64,63,0,67,68],
[72,78,76,78,61,64,59,63,0,69],
[71,64,66,64,71,59,50,62,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,61,67,70,67,69,64,71,70],
[66,0,66,64,76,73,73,70,72,67],
[69,64,0,61,71,71,70,67,64,67],
[63,66,69,0,71,71,68,63,73,74],
[60,54,59,59,0,65,58,60,64,69],
[63,57,59,59,65,0,61,67,66,74],
[61,57,60,62,72,69,0,62,65,76],
[66,60,63,67,70,63,68,0,65,72],
[59,58,66,57,66,64,65,65,0,70],
[60,63,63,56,61,56,54,58,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,69,50,63,67,52,81,59,70],
[71,0,80,63,61,59,64,64,45,76],
[61,50,0,36,50,65,75,64,52,51],
[80,67,94,0,62,87,69,75,61,72],
[67,69,80,68,0,69,80,65,58,72],
[63,71,65,43,61,0,83,65,54,73],
[78,66,55,61,50,47,0,69,71,60],
[49,66,66,55,65,65,61,0,48,80],
[71,85,78,69,72,76,59,82,0,83],
[60,54,79,58,58,57,70,50,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,58,52,75,66,76,67,60,73],
[56,0,45,61,62,61,60,65,57,70],
[72,85,0,65,71,66,76,72,70,64],
[78,69,65,0,75,70,69,73,66,69],
[55,68,59,55,0,60,70,58,67,67],
[64,69,64,60,70,0,75,67,69,71],
[54,70,54,61,60,55,0,64,55,66],
[63,65,58,57,72,63,66,0,57,61],
[70,73,60,64,63,61,75,73,0,67],
[57,60,66,61,63,59,64,69,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,72,70,80,72,63,69,71,60],
[63,0,81,92,67,83,57,60,75,54],
[58,49,0,73,69,66,60,45,71,56],
[60,38,57,0,54,59,50,52,72,49],
[50,63,61,76,0,69,60,70,73,53],
[58,47,64,71,61,0,53,52,81,57],
[67,73,70,80,70,77,0,65,77,68],
[61,70,85,78,60,78,65,0,77,61],
[59,55,59,58,57,49,53,53,0,54],
[70,76,74,81,77,73,62,69,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,71,67,60,59,60,62,61,69],
[71,0,60,63,62,56,56,61,53,66],
[59,70,0,69,66,62,58,58,54,63],
[63,67,61,0,68,70,64,64,57,65],
[70,68,64,62,0,66,70,64,56,63],
[71,74,68,60,64,0,63,71,71,63],
[70,74,72,66,60,67,0,64,61,72],
[68,69,72,66,66,59,66,0,60,60],
[69,77,76,73,74,59,69,70,0,69],
[61,64,67,65,67,67,58,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,80,80,40,84,86,119,107,69],
[44,0,46,24,38,79,89,51,43,53],
[50,84,0,48,80,79,87,77,75,82],
[50,106,82,0,68,85,109,81,43,88],
[90,92,50,62,0,121,107,91,89,77],
[46,51,51,45,9,0,50,41,69,38],
[44,41,43,21,23,80,0,48,39,82],
[11,79,53,49,39,89,82,0,79,49],
[23,87,55,87,41,61,91,51,0,61],
[61,77,48,42,53,92,48,81,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,80,130,80,130,92,126,126,46],
[50,0,50,92,92,92,50,50,92,92],
[50,80,0,96,96,130,50,50,92,46],
[0,38,34,0,4,130,50,50,0,46],
[50,38,34,126,0,126,50,50,50,42],
[0,38,0,0,4,0,50,50,0,0],
[38,80,80,80,80,80,0,38,80,80],
[4,80,80,80,80,80,92,0,46,46],
[4,38,38,130,80,130,50,84,0,46],
[84,38,84,84,88,130,50,84,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,72,68,70,66,72,63,64,79],
[55,0,70,58,63,64,66,63,55,73],
[58,60,0,53,57,74,69,59,59,66],
[62,72,77,0,63,66,78,64,69,74],
[60,67,73,67,0,74,81,69,65,74],
[64,66,56,64,56,0,71,69,67,65],
[58,64,61,52,49,59,0,50,52,58],
[67,67,71,66,61,61,80,0,67,71],
[66,75,71,61,65,63,78,63,0,82],
[51,57,64,56,56,65,72,59,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,88,80,66,81,64,83,76,65],
[64,0,74,85,58,79,84,92,77,82],
[42,56,0,60,55,77,63,63,56,31],
[50,45,70,0,29,52,74,60,91,51],
[64,72,75,101,0,68,79,80,93,63],
[49,51,53,78,62,0,57,86,74,35],
[66,46,67,56,51,73,0,76,65,44],
[47,38,67,70,50,44,54,0,56,38],
[54,53,74,39,37,56,65,74,0,43],
[65,48,99,79,67,95,86,92,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,61,68,64,64,54,60,58,56],
[73,0,55,76,68,68,64,74,59,66],
[69,75,0,89,77,70,63,64,65,74],
[62,54,41,0,54,56,49,60,55,53],
[66,62,53,76,0,61,58,65,57,53],
[66,62,60,74,69,0,48,65,51,61],
[76,66,67,81,72,82,0,75,63,69],
[70,56,66,70,65,65,55,0,61,61],
[72,71,65,75,73,79,67,69,0,75],
[74,64,56,77,77,69,61,69,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,55,64,73,56,75,70,66,64],
[65,0,58,46,78,60,76,80,71,64],
[75,72,0,60,63,69,77,71,64,71],
[66,84,70,0,74,66,79,67,66,62],
[57,52,67,56,0,50,80,71,59,62],
[74,70,61,64,80,0,86,70,82,75],
[55,54,53,51,50,44,0,58,46,42],
[60,50,59,63,59,60,72,0,55,57],
[64,59,66,64,71,48,84,75,0,60],
[66,66,59,68,68,55,88,73,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,67,68,58,77,67,67,82],
[66,0,72,82,69,61,79,70,66,80],
[62,58,0,65,63,54,74,47,57,72],
[63,48,65,0,69,70,80,68,61,84],
[62,61,67,61,0,64,79,65,60,78],
[72,69,76,60,66,0,77,70,63,72],
[53,51,56,50,51,53,0,46,54,63],
[63,60,83,62,65,60,84,0,69,74],
[63,64,73,69,70,67,76,61,0,81],
[48,50,58,46,52,58,67,56,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,46,57,43,47,54,73,55,75],
[76,0,62,80,50,58,56,56,56,59],
[84,68,0,62,71,71,55,54,82,74],
[73,50,68,0,55,53,64,40,69,66],
[87,80,59,75,0,59,70,70,65,75],
[83,72,59,77,71,0,60,82,64,92],
[76,74,75,66,60,70,0,74,72,67],
[57,74,76,90,60,48,56,0,67,71],
[75,74,48,61,65,66,58,63,0,79],
[55,71,56,64,55,38,63,59,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,51,59,49,38,57,70,51,50],
[93,0,53,85,69,67,82,82,87,85],
[79,77,0,65,77,73,91,68,81,78],
[71,45,65,0,62,60,61,83,63,67],
[81,61,53,68,0,74,71,65,64,63],
[92,63,57,70,56,0,78,83,80,55],
[73,48,39,69,59,52,0,75,56,59],
[60,48,62,47,65,47,55,0,50,49],
[79,43,49,67,66,50,74,80,0,74],
[80,45,52,63,67,75,71,81,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,70,68,73,68,64,60,78,77],
[74,0,72,67,74,73,65,71,77,65],
[60,58,0,79,76,66,64,67,72,75],
[62,63,51,0,72,54,50,63,57,63],
[57,56,54,58,0,53,67,62,61,62],
[62,57,64,76,77,0,64,65,68,66],
[66,65,66,80,63,66,0,64,73,70],
[70,59,63,67,68,65,66,0,63,73],
[52,53,58,73,69,62,57,67,0,64],
[53,65,55,67,68,64,60,57,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,69,71,57,65,53,59,70],
[68,0,65,61,67,67,67,60,65,72],
[69,65,0,60,58,53,72,62,63,65],
[61,69,70,0,67,65,67,73,58,70],
[59,63,72,63,0,58,69,66,57,65],
[73,63,77,65,72,0,72,63,56,83],
[65,63,58,63,61,58,0,66,48,61],
[77,70,68,57,64,67,64,0,52,62],
[71,65,67,72,73,74,82,78,0,68],
[60,58,65,60,65,47,69,68,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,69,75,69,84,79,72,65,75],
[52,0,53,65,69,67,69,57,59,62],
[61,77,0,72,74,74,69,77,70,75],
[55,65,58,0,65,74,69,61,66,57],
[61,61,56,65,0,70,64,66,58,67],
[46,63,56,56,60,0,70,62,64,66],
[51,61,61,61,66,60,0,61,66,70],
[58,73,53,69,64,68,69,0,53,57],
[65,71,60,64,72,66,64,77,0,74],
[55,68,55,73,63,64,60,73,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,65,75,83,69,81,85,83,65],
[50,0,54,71,63,56,72,72,71,53],
[65,76,0,75,79,56,80,78,89,64],
[55,59,55,0,62,52,75,70,83,58],
[47,67,51,68,0,47,68,62,81,61],
[61,74,74,78,83,0,85,79,83,69],
[49,58,50,55,62,45,0,71,73,58],
[45,58,52,60,68,51,59,0,78,49],
[47,59,41,47,49,47,57,52,0,54],
[65,77,66,72,69,61,72,81,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,52,52,63,75,54,54,59,57],
[69,0,65,65,74,70,64,61,67,66],
[78,65,0,69,71,82,63,72,65,72],
[78,65,61,0,74,83,61,66,68,80],
[67,56,59,56,0,74,59,63,71,64],
[55,60,48,47,56,0,48,56,60,60],
[76,66,67,69,71,82,0,68,65,68],
[76,69,58,64,67,74,62,0,66,73],
[71,63,65,62,59,70,65,64,0,61],
[73,64,58,50,66,70,62,57,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,65,67,62,60,64,61,71,72],
[68,0,64,74,76,71,71,68,74,82],
[65,66,0,72,66,67,67,60,69,82],
[63,56,58,0,62,60,58,49,66,67],
[68,54,64,68,0,61,69,65,64,73],
[70,59,63,70,69,0,66,60,69,78],
[66,59,63,72,61,64,0,57,67,70],
[69,62,70,81,65,70,73,0,71,83],
[59,56,61,64,66,61,63,59,0,76],
[58,48,48,63,57,52,60,47,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,52,55,59,45,51,73,65,58],
[73,0,74,53,59,55,62,75,63,56],
[78,56,0,56,60,51,71,80,61,60],
[75,77,74,0,60,53,67,76,78,73],
[71,71,70,70,0,62,67,71,70,71],
[85,75,79,77,68,0,73,74,72,65],
[79,68,59,63,63,57,0,63,62,55],
[57,55,50,54,59,56,67,0,60,60],
[65,67,69,52,60,58,68,70,0,64],
[72,74,70,57,59,65,75,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,71,67,64,69,69,68,71,66],
[54,0,63,56,62,59,60,66,65,60],
[59,67,0,64,64,70,67,67,68,63],
[63,74,66,0,72,73,68,71,68,70],
[66,68,66,58,0,68,64,71,69,60],
[61,71,60,57,62,0,60,68,66,61],
[61,70,63,62,66,70,0,67,66,62],
[62,64,63,59,59,62,63,0,66,62],
[59,65,62,62,61,64,64,64,0,56],
[64,70,67,60,70,69,68,68,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,59,69,57,63,72,64,53,72],
[59,0,55,65,59,60,73,62,65,69],
[71,75,0,72,58,66,65,65,71,62],
[61,65,58,0,55,63,62,61,53,69],
[73,71,72,75,0,64,86,75,62,70],
[67,70,64,67,66,0,75,69,66,63],
[58,57,65,68,44,55,0,57,57,63],
[66,68,65,69,55,61,73,0,58,55],
[77,65,59,77,68,64,73,72,0,84],
[58,61,68,61,60,67,67,75,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,55,59,63,60,65,50,53],
[62,0,55,58,55,59,67,58,53,60],
[66,75,0,68,67,68,71,69,65,59],
[75,72,62,0,73,67,66,76,62,61],
[71,75,63,57,0,65,63,73,60,50],
[67,71,62,63,65,0,60,74,54,57],
[70,63,59,64,67,70,0,71,52,63],
[65,72,61,54,57,56,59,0,55,51],
[80,77,65,68,70,76,78,75,0,68],
[77,70,71,69,80,73,67,79,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,59,59,61,48,60,64,57,66],
[72,0,60,61,68,60,72,69,58,61],
[71,70,0,67,71,66,72,76,66,63],
[71,69,63,0,68,68,79,74,63,67],
[69,62,59,62,0,63,69,72,64,62],
[82,70,64,62,67,0,73,77,60,66],
[70,58,58,51,61,57,0,67,59,61],
[66,61,54,56,58,53,63,0,59,67],
[73,72,64,67,66,70,71,71,0,77],
[64,69,67,63,68,64,69,63,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,66,82,62,66,71,64,69],
[62,0,67,75,86,59,65,71,68,64],
[66,63,0,70,82,68,59,73,58,63],
[64,55,60,0,78,53,56,70,60,65],
[48,44,48,52,0,40,46,59,46,52],
[68,71,62,77,90,0,62,83,68,66],
[64,65,71,74,84,68,0,71,72,72],
[59,59,57,60,71,47,59,0,63,62],
[66,62,72,70,84,62,58,67,0,64],
[61,66,67,65,78,64,58,68,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,58,64,62,64,74,70,66,63],
[61,0,55,55,61,66,68,63,59,69],
[72,75,0,65,68,69,80,70,68,73],
[66,75,65,0,58,65,76,66,68,63],
[68,69,62,72,0,65,72,75,59,67],
[66,64,61,65,65,0,70,71,56,67],
[56,62,50,54,58,60,0,60,48,67],
[60,67,60,64,55,59,70,0,57,73],
[64,71,62,62,71,74,82,73,0,75],
[67,61,57,67,63,63,63,57,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,86,42,84,61,71,71,65,74],
[60,0,65,63,67,63,62,64,46,62],
[44,65,0,48,54,53,49,51,39,55],
[88,67,82,0,74,76,64,66,58,70],
[46,63,76,56,0,61,65,59,51,63],
[69,67,77,54,69,0,70,68,59,67],
[59,68,81,66,65,60,0,69,66,70],
[59,66,79,64,71,62,61,0,59,54],
[65,84,91,72,79,71,64,71,0,74],
[56,68,75,60,67,63,60,76,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,58,82,60,73,54,73,69,60],
[42,0,59,68,66,63,59,51,41,65],
[72,71,0,91,64,52,62,75,64,74],
[48,62,39,0,40,56,65,51,53,69],
[70,64,66,90,0,67,54,73,51,76],
[57,67,78,74,63,0,60,71,66,50],
[76,71,68,65,76,70,0,71,61,74],
[57,79,55,79,57,59,59,0,83,56],
[61,89,66,77,79,64,69,47,0,92],
[70,65,56,61,54,80,56,74,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,56,58,58,70,67,66,62,64],
[77,0,64,73,76,73,82,71,76,78],
[74,66,0,69,60,71,76,76,72,69],
[72,57,61,0,62,81,79,65,61,74],
[72,54,70,68,0,70,73,66,72,73],
[60,57,59,49,60,0,67,67,64,65],
[63,48,54,51,57,63,0,58,54,49],
[64,59,54,65,64,63,72,0,59,64],
[68,54,58,69,58,66,76,71,0,72],
[66,52,61,56,57,65,81,66,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,61,61,65,60,57,61,62,63],
[69,0,64,60,59,55,61,64,66,68],
[69,66,0,63,62,65,64,67,62,72],
[69,70,67,0,66,64,64,69,70,67],
[65,71,68,64,0,60,62,72,69,64],
[70,75,65,66,70,0,70,75,68,78],
[73,69,66,66,68,60,0,64,71,75],
[69,66,63,61,58,55,66,0,62,66],
[68,64,68,60,61,62,59,68,0,65],
[67,62,58,63,66,52,55,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,75,81,85,69,68,64,58,72],
[74,0,63,94,66,68,70,47,75,61],
[55,67,0,71,61,64,72,47,56,52],
[49,36,59,0,54,55,71,26,46,22],
[45,64,69,76,0,74,75,48,56,55],
[61,62,66,75,56,0,81,37,61,44],
[62,60,58,59,55,49,0,29,48,45],
[66,83,83,104,82,93,101,0,71,63],
[72,55,74,84,74,69,82,59,0,50],
[58,69,78,108,75,86,85,67,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,67,63,56,71,54,61,62,51],
[59,0,67,53,51,55,52,51,50,42],
[63,63,0,47,60,67,64,58,62,52],
[67,77,83,0,76,63,50,70,68,56],
[74,79,70,54,0,76,56,65,57,65],
[59,75,63,67,54,0,50,66,74,50],
[76,78,66,80,74,80,0,69,72,62],
[69,79,72,60,65,64,61,0,73,60],
[68,80,68,62,73,56,58,57,0,61],
[79,88,78,74,65,80,68,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,68,69,67,64,68,77,68,73],
[67,0,68,59,71,55,62,64,60,62],
[62,62,0,52,58,50,54,63,59,53],
[61,71,78,0,73,60,65,56,65,67],
[63,59,72,57,0,62,58,56,56,56],
[66,75,80,70,68,0,68,67,70,61],
[62,68,76,65,72,62,0,60,70,50],
[53,66,67,74,74,63,70,0,65,65],
[62,70,71,65,74,60,60,65,0,61],
[57,68,77,63,74,69,80,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,54,61,65,58,58,59,57,73],
[63,0,59,70,65,63,57,61,60,64],
[76,71,0,67,79,69,60,63,73,72],
[69,60,63,0,73,63,62,63,60,71],
[65,65,51,57,0,61,59,60,60,67],
[72,67,61,67,69,0,69,58,59,72],
[72,73,70,68,71,61,0,66,65,69],
[71,69,67,67,70,72,64,0,68,72],
[73,70,57,70,70,71,65,62,0,73],
[57,66,58,59,63,58,61,58,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,48,61,60,54,65,52,57,65],
[61,0,39,64,76,60,66,62,56,66],
[82,91,0,79,78,59,87,66,68,64],
[69,66,51,0,74,66,66,55,68,48],
[70,54,52,56,0,45,58,41,57,46],
[76,70,71,64,85,0,73,60,75,59],
[65,64,43,64,72,57,0,64,61,58],
[78,68,64,75,89,70,66,0,72,64],
[73,74,62,62,73,55,69,58,0,70],
[65,64,66,82,84,71,72,66,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,80,59,56,67,71,63,60,62],
[63,0,50,40,35,54,66,62,53,43],
[50,80,0,64,71,70,63,63,49,63],
[71,90,66,0,66,63,70,52,43,48],
[74,95,59,64,0,74,85,78,71,86],
[63,76,60,67,56,0,63,68,80,52],
[59,64,67,60,45,67,0,50,38,55],
[67,68,67,78,52,62,80,0,49,56],
[70,77,81,87,59,50,92,81,0,74],
[68,87,67,82,44,78,75,74,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,78,66,66,62,71,75,61],
[62,0,58,68,71,77,57,75,69,64],
[64,72,0,71,61,63,67,76,61,61],
[52,62,59,0,65,59,57,83,62,72],
[64,59,69,65,0,59,57,73,63,66],
[64,53,67,71,71,0,61,75,64,71],
[68,73,63,73,73,69,0,70,73,63],
[59,55,54,47,57,55,60,0,63,57],
[55,61,69,68,67,66,57,67,0,70],
[69,66,69,58,64,59,67,73,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,59,65,64,64,58,65,57],
[68,0,55,62,61,75,67,61,73,70],
[69,75,0,63,67,72,74,67,71,61],
[71,68,67,0,69,77,77,69,76,60],
[65,69,63,61,0,72,71,66,67,61],
[66,55,58,53,58,0,67,61,59,54],
[66,63,56,53,59,63,0,67,66,53],
[72,69,63,61,64,69,63,0,65,62],
[65,57,59,54,63,71,64,65,0,62],
[73,60,69,70,69,76,77,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,70,70,69,59,63,74,65],
[63,0,54,50,60,53,50,66,64,70],
[66,76,0,65,65,59,66,66,67,67],
[60,80,65,0,72,64,65,64,75,59],
[60,70,65,58,0,56,69,70,65,64],
[61,77,71,66,74,0,73,75,70,72],
[71,80,64,65,61,57,0,77,78,69],
[67,64,64,66,60,55,53,0,69,60],
[56,66,63,55,65,60,52,61,0,51],
[65,60,63,71,66,58,61,70,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,58,78,76,64,66,91,61,81],
[71,0,70,51,99,54,56,74,64,68],
[72,60,0,57,88,59,67,70,60,79],
[52,79,73,0,78,60,71,77,67,68],
[54,31,42,52,0,40,54,62,48,60],
[66,76,71,70,90,0,72,69,57,77],
[64,74,63,59,76,58,0,65,45,75],
[39,56,60,53,68,61,65,0,53,66],
[69,66,70,63,82,73,85,77,0,84],
[49,62,51,62,70,53,55,64,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,60,58,54,63,72,62,54,57],
[74,0,69,62,64,80,77,65,64,70],
[70,61,0,66,60,78,78,62,57,72],
[72,68,64,0,58,65,69,59,55,65],
[76,66,70,72,0,75,77,60,66,62],
[67,50,52,65,55,0,76,52,49,55],
[58,53,52,61,53,54,0,49,56,50],
[68,65,68,71,70,78,81,0,57,66],
[76,66,73,75,64,81,74,73,0,71],
[73,60,58,65,68,75,80,64,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,67,66,71,75,64,77,68,65],
[59,0,59,66,72,65,63,72,63,68],
[63,71,0,73,73,74,68,75,70,68],
[64,64,57,0,63,72,59,68,69,64],
[59,58,57,67,0,76,63,73,62,68],
[55,65,56,58,54,0,52,67,60,62],
[66,67,62,71,67,78,0,73,66,67],
[53,58,55,62,57,63,57,0,58,55],
[62,67,60,61,68,70,64,72,0,59],
[65,62,62,66,62,68,63,75,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,65,61,66,60,67,64,60,67],
[69,0,71,74,69,69,61,68,61,67],
[65,59,0,72,77,63,66,70,68,59],
[69,56,58,0,61,64,57,55,63,55],
[64,61,53,69,0,59,53,58,64,55],
[70,61,67,66,71,0,58,61,63,61],
[63,69,64,73,77,72,0,67,60,60],
[66,62,60,75,72,69,63,0,68,60],
[70,69,62,67,66,67,70,62,0,67],
[63,63,71,75,75,69,70,70,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,55,57,69,57,75,61,69,54],
[73,0,59,76,81,58,79,72,64,63],
[75,71,0,64,70,65,79,73,76,65],
[73,54,66,0,72,65,82,68,66,65],
[61,49,60,58,0,40,79,58,61,43],
[73,72,65,65,90,0,75,72,66,64],
[55,51,51,48,51,55,0,61,59,41],
[69,58,57,62,72,58,69,0,72,57],
[61,66,54,64,69,64,71,58,0,52],
[76,67,65,65,87,66,89,73,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,74,63,60,68,54,82,61,68],
[72,0,66,63,74,62,59,59,71,58],
[56,64,0,69,69,63,52,57,64,69],
[67,67,61,0,66,59,47,56,60,51],
[70,56,61,64,0,70,57,68,62,63],
[62,68,67,71,60,0,66,63,57,59],
[76,71,78,83,73,64,0,86,63,69],
[48,71,73,74,62,67,44,0,66,61],
[69,59,66,70,68,73,67,64,0,77],
[62,72,61,79,67,71,61,69,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,53,55,54,62,56,56,61],
[67,0,62,57,60,53,60,54,56,63],
[66,68,0,59,64,54,65,55,70,81],
[77,73,71,0,66,66,76,65,71,76],
[75,70,66,64,0,58,66,65,63,73],
[76,77,76,64,72,0,66,65,63,78],
[68,70,65,54,64,64,0,67,61,77],
[74,76,75,65,65,65,63,0,65,74],
[74,74,60,59,67,67,69,65,0,68],
[69,67,49,54,57,52,53,56,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,71,72,72,65,66,69,69,68],
[63,0,68,65,62,59,58,64,61,65],
[59,62,0,75,74,74,69,62,64,67],
[58,65,55,0,68,62,71,62,65,69],
[58,68,56,62,0,67,73,52,56,63],
[65,71,56,68,63,0,64,67,63,74],
[64,72,61,59,57,66,0,64,61,57],
[61,66,68,68,78,63,66,0,60,77],
[61,69,66,65,74,67,69,70,0,72],
[62,65,63,61,67,56,73,53,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,67,57,70,51,61,67,64],
[60,0,59,63,65,63,59,65,67,62],
[65,71,0,66,62,63,66,65,68,66],
[63,67,64,0,60,65,63,67,66,67],
[73,65,68,70,0,67,65,72,70,65],
[60,67,67,65,63,0,56,69,70,71],
[79,71,64,67,65,74,0,71,70,68],
[69,65,65,63,58,61,59,0,66,63],
[63,63,62,64,60,60,60,64,0,60],
[66,68,64,63,65,59,62,67,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,57,74,67,66,68,64,67],
[65,0,51,61,69,67,73,56,57,61],
[63,79,0,63,78,82,70,78,71,63],
[73,69,67,0,76,72,70,73,57,62],
[56,61,52,54,0,60,53,59,51,51],
[63,63,48,58,70,0,59,61,54,56],
[64,57,60,60,77,71,0,65,64,60],
[62,74,52,57,71,69,65,0,57,53],
[66,73,59,73,79,76,66,73,0,65],
[63,69,67,68,79,74,70,77,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,69,83,59,66,65,64,66,61],
[59,0,60,69,59,66,61,59,65,58],
[61,70,0,75,71,76,69,72,75,56],
[47,61,55,0,56,62,44,50,52,44],
[71,71,59,74,0,62,69,80,68,65],
[64,64,54,68,68,0,54,64,58,49],
[65,69,61,86,61,76,0,66,68,63],
[66,71,58,80,50,66,64,0,71,52],
[64,65,55,78,62,72,62,59,0,68],
[69,72,74,86,65,81,67,78,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,58,66,79,74,70,66,68,69],
[59,0,52,75,75,66,55,70,74,62],
[72,78,0,74,71,63,66,75,73,67],
[64,55,56,0,84,64,49,73,66,70],
[51,55,59,46,0,61,49,66,54,58],
[56,64,67,66,69,0,60,69,68,76],
[60,75,64,81,81,70,0,73,77,77],
[64,60,55,57,64,61,57,0,59,65],
[62,56,57,64,76,62,53,71,0,65],
[61,68,63,60,72,54,53,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,68,69,81,68,69,83,75,59],
[68,0,66,71,79,68,80,81,70,63],
[62,64,0,68,77,71,77,80,66,72],
[61,59,62,0,79,58,69,73,70,64],
[49,51,53,51,0,54,62,70,60,69],
[62,62,59,72,76,0,73,79,80,63],
[61,50,53,61,68,57,0,69,57,62],
[47,49,50,57,60,51,61,0,56,58],
[55,60,64,60,70,50,73,74,0,57],
[71,67,58,66,61,67,68,72,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,55,51,46,50,55,58,59,38],
[98,0,76,90,62,63,82,77,86,61],
[75,54,0,72,55,77,46,66,53,55],
[79,40,58,0,68,57,51,76,64,58],
[84,68,75,62,0,65,60,89,82,66],
[80,67,53,73,65,0,53,63,61,48],
[75,48,84,79,70,77,0,69,72,53],
[72,53,64,54,41,67,61,0,57,50],
[71,44,77,66,48,69,58,73,0,42],
[92,69,75,72,64,82,77,80,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,57,69,61,94,39,74,72,76],
[61,0,65,50,43,63,32,47,39,55],
[73,65,0,55,54,76,72,67,77,86],
[61,80,75,0,80,85,38,59,70,80],
[69,87,76,50,0,90,47,66,70,78],
[36,67,54,45,40,0,23,70,47,60],
[91,98,58,92,83,107,0,70,74,97],
[56,83,63,71,64,60,60,0,64,80],
[58,91,53,60,60,83,56,66,0,91],
[54,75,44,50,52,70,33,50,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,60,47,60,58,61,55,60,59],
[62,0,64,55,63,74,60,67,60,75],
[70,66,0,67,60,74,66,78,60,68],
[83,75,63,0,67,70,73,75,65,78],
[70,67,70,63,0,75,76,64,78,80],
[72,56,56,60,55,0,71,54,66,65],
[69,70,64,57,54,59,0,59,66,68],
[75,63,52,55,66,76,71,0,65,76],
[70,70,70,65,52,64,64,65,0,70],
[71,55,62,52,50,65,62,54,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,73,73,70,72,66,58,65,66],
[67,0,64,69,59,72,67,70,43,78],
[57,66,0,85,62,56,57,64,71,76],
[57,61,45,0,48,54,55,57,46,57],
[60,71,68,82,0,57,69,55,57,75],
[58,58,74,76,73,0,60,64,46,56],
[64,63,73,75,61,70,0,63,58,68],
[72,60,66,73,75,66,67,0,53,84],
[65,87,59,84,73,84,72,77,0,77],
[64,52,54,73,55,74,62,46,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,83,79,73,76,61,63,78],
[57,0,61,77,75,59,68,67,68,75],
[61,69,0,72,72,63,70,60,68,68],
[47,53,58,0,62,55,59,59,59,58],
[51,55,58,68,0,53,53,61,62,69],
[57,71,67,75,77,0,78,66,65,67],
[54,62,60,71,77,52,0,59,62,65],
[69,63,70,71,69,64,71,0,67,72],
[67,62,62,71,68,65,68,63,0,67],
[52,55,62,72,61,63,65,58,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,80,60,69,73,74,54,78],
[67,0,64,72,61,43,55,67,63,73],
[64,66,0,62,55,46,60,51,46,61],
[50,58,68,0,56,46,59,56,59,64],
[70,69,75,74,0,66,74,59,66,83],
[61,87,84,84,64,0,76,75,62,82],
[57,75,70,71,56,54,0,65,56,76],
[56,63,79,74,71,55,65,0,54,76],
[76,67,84,71,64,68,74,76,0,74],
[52,57,69,66,47,48,54,54,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,46,48,50,46,64,51,45,75],
[81,0,71,65,69,65,69,74,62,84],
[84,59,0,56,47,57,61,60,58,68],
[82,65,74,0,76,78,71,81,65,92],
[80,61,83,54,0,63,66,77,67,82],
[84,65,73,52,67,0,70,71,57,71],
[66,61,69,59,64,60,0,78,55,74],
[79,56,70,49,53,59,52,0,71,68],
[85,68,72,65,63,73,75,59,0,77],
[55,46,62,38,48,59,56,62,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,51,43,50,62,50,55,40,59],
[88,0,64,56,57,65,69,64,56,60],
[79,66,0,72,68,75,71,64,64,61],
[87,74,58,0,75,76,78,69,67,62],
[80,73,62,55,0,57,59,63,60,57],
[68,65,55,54,73,0,53,57,58,60],
[80,61,59,52,71,77,0,66,51,61],
[75,66,66,61,67,73,64,0,62,64],
[90,74,66,63,70,72,79,68,0,65],
[71,70,69,68,73,70,69,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,81,63,63,65,81,63,71,76],
[60,0,60,69,72,62,67,69,73,72],
[49,70,0,64,57,64,57,54,89,73],
[67,61,66,0,65,48,61,65,69,77],
[67,58,73,65,0,56,61,68,80,68],
[65,68,66,82,74,0,66,61,86,75],
[49,63,73,69,69,64,0,65,75,69],
[67,61,76,65,62,69,65,0,73,85],
[59,57,41,61,50,44,55,57,0,63],
[54,58,57,53,62,55,61,45,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,70,58,67,59,61,67,65,67],
[69,0,57,51,64,59,62,58,66,66],
[60,73,0,54,58,63,61,66,62,73],
[72,79,76,0,74,68,67,78,65,78],
[63,66,72,56,0,58,62,64,64,67],
[71,71,67,62,72,0,72,77,74,71],
[69,68,69,63,68,58,0,75,72,65],
[63,72,64,52,66,53,55,0,69,65],
[65,64,68,65,66,56,58,61,0,66],
[63,64,57,52,63,59,65,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,78,52,65,66,78,54,63,42],
[59,0,59,56,48,56,68,49,64,56],
[52,71,0,48,59,64,77,58,66,57],
[78,74,82,0,66,74,82,69,74,63],
[65,82,71,64,0,70,84,71,85,70],
[64,74,66,56,60,0,83,69,70,65],
[52,62,53,48,46,47,0,50,60,56],
[76,81,72,61,59,61,80,0,69,67],
[67,66,64,56,45,60,70,61,0,60],
[88,74,73,67,60,65,74,63,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,59,62,69,69,68,61,65,60],
[72,0,67,65,64,72,67,64,67,62],
[71,63,0,68,78,69,79,72,62,68],
[68,65,62,0,66,60,74,74,60,58],
[61,66,52,64,0,59,71,66,54,65],
[61,58,61,70,71,0,71,62,55,65],
[62,63,51,56,59,59,0,56,50,54],
[69,66,58,56,64,68,74,0,60,61],
[65,63,68,70,76,75,80,70,0,65],
[70,68,62,72,65,65,76,69,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,48,63,62,47,53,76,67,77],
[56,0,50,70,61,47,56,69,43,55],
[82,80,0,62,80,64,69,78,73,78],
[67,60,68,0,64,53,71,85,46,85],
[68,69,50,66,0,61,49,80,54,81],
[83,83,66,77,69,0,51,92,63,90],
[77,74,61,59,81,79,0,87,58,81],
[54,61,52,45,50,38,43,0,40,59],
[63,87,57,84,76,67,72,90,0,97],
[53,75,52,45,49,40,49,71,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,70,70,69,94,72,84,54,46],
[58,0,59,75,64,75,50,56,54,58],
[60,71,0,70,66,85,71,71,59,55],
[60,55,60,0,50,63,50,50,65,53],
[61,66,64,80,0,74,69,64,57,74],
[36,55,45,67,56,0,43,61,53,55],
[58,80,59,80,61,87,0,64,57,75],
[46,74,59,80,66,69,66,0,47,57],
[76,76,71,65,73,77,73,83,0,63],
[84,72,75,77,56,75,55,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,56,62,57,71,51,65,63,65],
[75,0,61,65,60,78,59,70,65,65],
[74,69,0,67,65,77,69,77,70,66],
[68,65,63,0,62,65,57,65,65,65],
[73,70,65,68,0,75,57,76,72,63],
[59,52,53,65,55,0,52,56,61,55],
[79,71,61,73,73,78,0,69,72,69],
[65,60,53,65,54,74,61,0,58,55],
[67,65,60,65,58,69,58,72,0,62],
[65,65,64,65,67,75,61,75,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,68,64,65,63,64,65,65],
[65,0,72,62,64,68,62,70,65,62],
[60,58,0,62,58,57,60,62,69,52],
[62,68,68,0,55,61,66,67,64,61],
[66,66,72,75,0,79,71,70,65,66],
[65,62,73,69,51,0,57,69,64,59],
[67,68,70,64,59,73,0,70,69,65],
[66,60,68,63,60,61,60,0,62,58],
[65,65,61,66,65,66,61,68,0,59],
[65,68,78,69,64,71,65,72,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,67,67,71,59,80,65,76,66],
[70,0,70,68,67,68,66,73,72,65],
[63,60,0,63,68,54,67,56,62,62],
[63,62,67,0,65,65,71,63,63,64],
[59,63,62,65,0,56,72,59,63,64],
[71,62,76,65,74,0,78,74,80,72],
[50,64,63,59,58,52,0,61,57,53],
[65,57,74,67,71,56,69,0,70,68],
[54,58,68,67,67,50,73,60,0,57],
[64,65,68,66,66,58,77,62,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,69,76,75,31,96,70,71,96],
[81,0,74,72,101,81,89,58,91,74],
[61,56,0,51,75,67,74,64,91,77],
[54,58,79,0,58,79,121,55,71,106],
[55,29,55,72,0,54,96,31,64,75],
[99,49,63,51,76,0,89,79,91,115],
[34,41,56,9,34,41,0,62,70,83],
[60,72,66,75,99,51,68,0,93,78],
[59,39,39,59,66,39,60,37,0,66],
[34,56,53,24,55,15,47,52,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,62,66,64,61,66,66,64,64],
[65,0,62,74,71,64,61,72,64,73],
[68,68,0,69,63,61,71,69,63,66],
[64,56,61,0,59,63,60,66,63,66],
[66,59,67,71,0,72,65,65,64,65],
[69,66,69,67,58,0,72,65,65,68],
[64,69,59,70,65,58,0,67,61,68],
[64,58,61,64,65,65,63,0,60,64],
[66,66,67,67,66,65,69,70,0,73],
[66,57,64,64,65,62,62,66,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,54,59,62,62,64,55,60,63],
[64,0,61,59,60,55,71,66,64,60],
[76,69,0,68,65,71,71,59,63,62],
[71,71,62,0,49,62,71,59,61,56],
[68,70,65,81,0,65,75,64,68,64],
[68,75,59,68,65,0,77,60,65,64],
[66,59,59,59,55,53,0,58,56,58],
[75,64,71,71,66,70,72,0,62,60],
[70,66,67,69,62,65,74,68,0,74],
[67,70,68,74,66,66,72,70,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,58,62,64,61,68,53,68,61],
[54,0,50,50,38,48,53,53,52,63],
[72,80,0,61,54,54,72,74,64,67],
[68,80,69,0,73,77,81,57,72,65],
[66,92,76,57,0,61,79,66,67,79],
[69,82,76,53,69,0,73,61,61,70],
[62,77,58,49,51,57,0,63,64,69],
[77,77,56,73,64,69,67,0,66,56],
[62,78,66,58,63,69,66,64,0,67],
[69,67,63,65,51,60,61,74,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,57,72,64,60,67,58,61,66],
[69,0,62,78,63,60,68,62,60,73],
[73,68,0,72,69,61,70,69,62,73],
[58,52,58,0,55,61,67,52,64,60],
[66,67,61,75,0,65,66,65,61,68],
[70,70,69,69,65,0,68,59,62,67],
[63,62,60,63,64,62,0,61,55,60],
[72,68,61,78,65,71,69,0,75,75],
[69,70,68,66,69,68,75,55,0,72],
[64,57,57,70,62,63,70,55,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,93,78,65,76,55,94,90,79],
[46,0,87,65,55,52,73,52,79,84],
[37,43,0,52,70,62,50,53,76,71],
[52,65,78,0,55,70,65,61,76,67],
[65,75,60,75,0,65,69,65,90,70],
[54,78,68,60,65,0,79,58,70,80],
[75,57,80,65,61,51,0,65,91,83],
[36,78,77,69,65,72,65,0,73,85],
[40,51,54,54,40,60,39,57,0,58],
[51,46,59,63,60,50,47,45,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,64,67,67,71,66,74,72,55],
[58,0,63,61,63,57,57,58,68,57],
[66,67,0,62,66,65,65,59,73,56],
[63,69,68,0,65,74,62,62,66,60],
[63,67,64,65,0,65,60,67,62,58],
[59,73,65,56,65,0,61,58,63,60],
[64,73,65,68,70,69,0,77,66,70],
[56,72,71,68,63,72,53,0,69,65],
[58,62,57,64,68,67,64,61,0,54],
[75,73,74,70,72,70,60,65,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,55,54,59,55,52,67,53,59],
[72,0,59,70,74,64,53,53,65,62],
[75,71,0,68,74,60,49,68,70,62],
[76,60,62,0,82,66,60,76,62,67],
[71,56,56,48,0,51,47,62,49,55],
[75,66,70,64,79,0,53,63,61,67],
[78,77,81,70,83,77,0,77,65,72],
[63,77,62,54,68,67,53,0,63,68],
[77,65,60,68,81,69,65,67,0,73],
[71,68,68,63,75,63,58,62,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,54,67,49,68,69,79,69,101],
[48,0,21,70,33,60,53,47,54,106],
[76,109,0,66,82,76,74,51,75,109],
[63,60,64,0,82,59,70,64,112,78],
[81,97,48,48,0,64,39,74,49,81],
[62,70,54,71,66,0,29,55,61,81],
[61,77,56,60,91,101,0,36,76,94],
[51,83,79,66,56,75,94,0,75,108],
[61,76,55,18,81,69,54,55,0,60],
[29,24,21,52,49,49,36,22,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,68,66,68,75,72,70,74,64],
[59,0,69,70,71,70,75,65,68,66],
[62,61,0,66,62,70,63,62,67,71],
[64,60,64,0,55,74,62,63,65,59],
[62,59,68,75,0,79,71,61,74,74],
[55,60,60,56,51,0,61,59,65,69],
[58,55,67,68,59,69,0,59,66,72],
[60,65,68,67,69,71,71,0,73,65],
[56,62,63,65,56,65,64,57,0,63],
[66,64,59,71,56,61,58,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,55,48,51,49,57,59,53,51],
[74,0,69,52,60,68,73,67,63,66],
[75,61,0,55,62,60,82,67,64,66],
[82,78,75,0,65,66,79,71,76,72],
[79,70,68,65,0,73,68,74,78,82],
[81,62,70,64,57,0,68,71,75,67],
[73,57,48,51,62,62,0,71,62,54],
[71,63,63,59,56,59,59,0,73,57],
[77,67,66,54,52,55,68,57,0,55],
[79,64,64,58,48,63,76,73,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,77,73,65,60,63,51,63,85],
[78,0,85,91,79,64,76,65,76,86],
[53,45,0,71,69,51,68,54,60,65],
[57,39,59,0,60,61,55,51,44,69],
[65,51,61,70,0,55,59,43,48,49],
[70,66,79,69,75,0,49,57,62,53],
[67,54,62,75,71,81,0,62,62,83],
[79,65,76,79,87,73,68,0,70,86],
[67,54,70,86,82,68,68,60,0,69],
[45,44,65,61,81,77,47,44,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,73,68,65,66,76,60,63,62],
[64,0,56,74,68,70,76,73,78,67],
[57,74,0,70,63,59,77,66,66,70],
[62,56,60,0,62,59,64,72,69,58],
[65,62,67,68,0,60,69,66,64,64],
[64,60,71,71,70,0,77,74,73,72],
[54,54,53,66,61,53,0,58,59,55],
[70,57,64,58,64,56,72,0,66,63],
[67,52,64,61,66,57,71,64,0,66],
[68,63,60,72,66,58,75,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,59,65,63,75,64,59,51,73],
[79,0,74,66,72,77,61,71,70,65],
[71,56,0,73,66,76,61,61,64,60],
[65,64,57,0,71,74,64,59,63,57],
[67,58,64,59,0,69,65,72,60,61],
[55,53,54,56,61,0,47,57,55,53],
[66,69,69,66,65,83,0,67,61,61],
[71,59,69,71,58,73,63,0,59,65],
[79,60,66,67,70,75,69,71,0,64],
[57,65,70,73,69,77,69,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,64,66,62,65,61,60,54,49],
[77,0,84,68,58,72,79,72,60,66],
[66,46,0,56,55,60,63,74,64,53],
[64,62,74,0,58,67,67,64,58,59],
[68,72,75,72,0,70,73,63,59,64],
[65,58,70,63,60,0,69,66,54,53],
[69,51,67,63,57,61,0,57,58,52],
[70,58,56,66,67,64,73,0,71,63],
[76,70,66,72,71,76,72,59,0,68],
[81,64,77,71,66,77,78,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,77,84,79,53,71,75,60,65],
[58,0,70,64,62,46,58,74,71,59],
[53,60,0,70,50,56,57,68,41,70],
[46,66,60,0,53,60,61,79,48,67],
[51,68,80,77,0,66,77,105,72,78],
[77,84,74,70,64,0,67,79,70,79],
[59,72,73,69,53,63,0,62,51,78],
[55,56,62,51,25,51,68,0,49,60],
[70,59,89,82,58,60,79,81,0,73],
[65,71,60,63,52,51,52,70,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,68,79,67,70,70,64,61],
[62,0,53,59,79,68,69,69,72,63],
[64,77,0,71,75,75,69,82,67,72],
[62,71,59,0,77,61,71,68,73,70],
[51,51,55,53,0,56,55,60,55,52],
[63,62,55,69,74,0,67,72,64,60],
[60,61,61,59,75,63,0,70,65,69],
[60,61,48,62,70,58,60,0,61,57],
[66,58,63,57,75,66,65,69,0,67],
[69,67,58,60,78,70,61,73,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,57,60,86,67,62,60,58,50],
[66,0,59,63,67,60,63,59,67,57],
[73,71,0,60,84,71,58,63,65,53],
[70,67,70,0,74,65,60,57,75,63],
[44,63,46,56,0,55,56,42,59,38],
[63,70,59,65,75,0,63,50,72,54],
[68,67,72,70,74,67,0,67,65,59],
[70,71,67,73,88,80,63,0,70,65],
[72,63,65,55,71,58,65,60,0,55],
[80,73,77,67,92,76,71,65,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,70,77,51,76,56,63,73,58],
[69,0,49,69,45,63,36,36,35,53],
[60,81,0,92,58,75,51,63,59,52],
[53,61,38,0,34,63,41,60,37,54],
[79,85,72,96,0,83,80,81,63,64],
[54,67,55,67,47,0,43,48,54,43],
[74,94,79,89,50,87,0,66,61,63],
[67,94,67,70,49,82,64,0,57,71],
[57,95,71,93,67,76,69,73,0,83],
[72,77,78,76,66,87,67,59,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,56,87,83,72,63,59,58,72],
[86,0,37,113,112,68,85,66,99,70],
[74,93,0,108,97,55,92,74,89,92],
[43,17,22,0,56,45,46,16,26,50],
[47,18,33,74,0,48,51,47,70,51],
[58,62,75,85,82,0,74,94,58,78],
[67,45,38,84,79,56,0,67,66,63],
[71,64,56,114,83,36,63,0,66,72],
[72,31,41,104,60,72,64,64,0,58],
[58,60,38,80,79,52,67,58,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,65,71,61,67,81,65,61,70],
[64,0,66,64,62,70,71,70,77,72],
[65,64,0,62,59,61,73,63,62,67],
[59,66,68,0,65,64,69,64,67,66],
[69,68,71,65,0,64,74,61,64,66],
[63,60,69,66,66,0,65,64,67,70],
[49,59,57,61,56,65,0,59,56,64],
[65,60,67,66,69,66,71,0,64,76],
[69,53,68,63,66,63,74,66,0,62],
[60,58,63,64,64,60,66,54,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,33,57,58,60,46,62,33,60],
[78,0,59,61,54,98,82,81,67,80],
[97,71,0,63,77,76,75,76,74,75],
[73,69,67,0,74,63,85,72,77,70],
[72,76,53,56,0,61,78,67,59,64],
[70,32,54,67,69,0,65,44,50,55],
[84,48,55,45,52,65,0,65,53,70],
[68,49,54,58,63,86,65,0,50,53],
[97,63,56,53,71,80,77,80,0,81],
[70,50,55,60,66,75,60,77,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,67,70,66,78,69,67,65,67],
[57,0,64,62,60,57,58,68,52,60],
[63,66,0,65,62,63,69,72,54,66],
[60,68,65,0,64,66,56,67,64,59],
[64,70,68,66,0,65,75,77,63,60],
[52,73,67,64,65,0,63,74,55,58],
[61,72,61,74,55,67,0,67,64,63],
[63,62,58,63,53,56,63,0,55,63],
[65,78,76,66,67,75,66,75,0,66],
[63,70,64,71,70,72,67,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,55,66,60,64,66,59,64,42],
[70,0,54,74,60,63,60,66,69,45],
[75,76,0,65,65,56,68,72,87,73],
[64,56,65,0,51,69,61,61,61,60],
[70,70,65,79,0,54,72,60,87,53],
[66,67,74,61,76,0,71,61,75,55],
[64,70,62,69,58,59,0,70,79,58],
[71,64,58,69,70,69,60,0,74,58],
[66,61,43,69,43,55,51,56,0,46],
[88,85,57,70,77,75,72,72,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,64,53,67,67,82,57,61,82],
[58,0,65,57,67,71,69,64,52,58],
[66,65,0,56,76,77,66,58,71,67],
[77,73,74,0,71,77,74,58,73,80],
[63,63,54,59,0,63,68,66,63,66],
[63,59,53,53,67,0,65,51,65,70],
[48,61,64,56,62,65,0,62,56,61],
[73,66,72,72,64,79,68,0,71,76],
[69,78,59,57,67,65,74,59,0,77],
[48,72,63,50,64,60,69,54,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,62,86,70,56,59,57,76,72],
[74,0,71,94,75,67,63,78,68,75],
[68,59,0,62,54,65,56,50,65,47],
[44,36,68,0,67,47,47,73,67,50],
[60,55,76,63,0,73,61,68,71,61],
[74,63,65,83,57,0,85,52,65,82],
[71,67,74,83,69,45,0,50,63,76],
[73,52,80,57,62,78,80,0,52,74],
[54,62,65,63,59,65,67,78,0,42],
[58,55,83,80,69,48,54,56,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,47,72,50,53,44,61,71],
[64,0,74,69,64,63,64,65,43,69],
[60,56,0,59,56,53,56,48,55,57],
[83,61,71,0,73,59,55,65,45,71],
[58,66,74,57,0,54,43,55,47,74],
[80,67,77,71,76,0,67,59,79,80],
[77,66,74,75,87,63,0,68,62,73],
[86,65,82,65,75,71,62,0,66,86],
[69,87,75,85,83,51,68,64,0,73],
[59,61,73,59,56,50,57,44,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,72,70,73,52,61,60,63,46],
[68,0,66,66,75,61,56,55,68,60],
[58,64,0,65,74,56,68,68,64,53],
[60,64,65,0,87,58,64,69,71,64],
[57,55,56,43,0,58,57,51,59,45],
[78,69,74,72,72,0,63,69,76,59],
[69,74,62,66,73,67,0,60,72,64],
[70,75,62,61,79,61,70,0,66,59],
[67,62,66,59,71,54,58,64,0,65],
[84,70,77,66,85,71,66,71,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,76,66,74,66,65,69,81,61],
[53,0,63,62,59,64,61,61,69,43],
[54,67,0,68,60,68,63,52,76,55],
[64,68,62,0,66,65,61,59,79,62],
[56,71,70,64,0,61,68,55,67,62],
[64,66,62,65,69,0,60,61,74,60],
[65,69,67,69,62,70,0,59,72,61],
[61,69,78,71,75,69,71,0,83,69],
[49,61,54,51,63,56,58,47,0,35],
[69,87,75,68,68,70,69,61,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,60,60,66,60,60,60,61,64],
[68,0,68,63,72,72,75,67,70,71],
[70,62,0,58,70,73,72,62,64,68],
[70,67,72,0,69,69,64,61,68,68],
[64,58,60,61,0,65,65,62,57,65],
[70,58,57,61,65,0,64,60,61,66],
[70,55,58,66,65,66,0,55,63,66],
[70,63,68,69,68,70,75,0,68,70],
[69,60,66,62,73,69,67,62,0,69],
[66,59,62,62,65,64,64,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,54,73,52,43,47,54,84,73],
[74,0,64,82,56,52,76,77,79,64],
[76,66,0,70,62,66,67,72,71,80],
[57,48,60,0,53,53,56,58,65,60],
[78,74,68,77,0,41,62,71,71,66],
[87,78,64,77,89,0,73,79,85,89],
[83,54,63,74,68,57,0,72,66,66],
[76,53,58,72,59,51,58,0,72,64],
[46,51,59,65,59,45,64,58,0,70],
[57,66,50,70,64,41,64,66,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,63,62,68,72,61,87,79,75],
[73,0,80,65,74,88,75,92,81,79],
[67,50,0,55,59,74,66,85,69,70],
[68,65,75,0,57,77,72,81,85,69],
[62,56,71,73,0,68,66,76,75,76],
[58,42,56,53,62,0,56,77,75,64],
[69,55,64,58,64,74,0,75,70,69],
[43,38,45,49,54,53,55,0,56,61],
[51,49,61,45,55,55,60,74,0,63],
[55,51,60,61,54,66,61,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,79,48,62,63,60,69,71,77],
[68,0,93,63,57,68,52,75,71,65],
[51,37,0,61,42,50,35,60,61,65],
[82,67,69,0,59,53,70,71,79,79],
[68,73,88,71,0,62,71,74,73,86],
[67,62,80,77,68,0,75,75,78,75],
[70,78,95,60,59,55,0,71,81,80],
[61,55,70,59,56,55,59,0,74,77],
[59,59,69,51,57,52,49,56,0,63],
[53,65,65,51,44,55,50,53,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,64,43,61,60,54,44,64,58],
[77,0,68,46,63,59,71,59,60,82],
[66,62,0,54,60,58,51,52,71,76],
[87,84,76,0,80,70,80,61,66,70],
[69,67,70,50,0,64,67,59,68,70],
[70,71,72,60,66,0,69,67,74,73],
[76,59,79,50,63,61,0,58,68,75],
[86,71,78,69,71,63,72,0,76,93],
[66,70,59,64,62,56,62,54,0,64],
[72,48,54,60,60,57,55,37,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,58,66,61,64,77,69,65],
[63,0,62,69,70,70,64,77,68,63],
[63,68,0,63,64,65,66,77,70,59],
[72,61,67,0,66,61,64,79,73,67],
[64,60,66,64,0,62,69,78,63,66],
[69,60,65,69,68,0,65,77,65,64],
[66,66,64,66,61,65,0,80,71,64],
[53,53,53,51,52,53,50,0,54,54],
[61,62,60,57,67,65,59,76,0,62],
[65,67,71,63,64,66,66,76,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,26,62,10,16,46,29,46,26],
[100,0,26,62,26,35,65,74,46,26],
[104,104,0,100,39,64,84,58,75,39],
[68,68,30,0,10,55,39,78,30,59],
[120,104,91,120,0,91,104,104,56,84],
[114,95,66,75,39,0,94,114,66,59],
[84,65,46,91,26,36,0,94,66,75],
[101,56,72,52,26,16,36,0,46,16],
[84,84,55,100,74,64,64,84,0,84],
[104,104,91,71,46,71,55,114,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,82,82,67,58,66,77,68,79],
[71,0,69,78,70,57,80,51,67,57],
[48,61,0,65,55,57,81,70,81,74],
[48,52,65,0,55,48,65,57,74,64],
[63,60,75,75,0,66,71,61,62,78],
[72,73,73,82,64,0,76,74,74,81],
[64,50,49,65,59,54,0,61,68,84],
[53,79,60,73,69,56,69,0,78,79],
[62,63,49,56,68,56,62,52,0,68],
[51,73,56,66,52,49,46,51,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,58,55,60,40,56,68,45,53],
[58,0,51,46,52,56,58,68,49,55],
[72,79,0,62,64,65,66,77,60,71],
[75,84,68,0,61,72,67,85,67,82],
[70,78,66,69,0,64,78,86,60,81],
[90,74,65,58,66,0,75,78,57,74],
[74,72,64,63,52,55,0,75,64,61],
[62,62,53,45,44,52,55,0,42,53],
[85,81,70,63,70,73,66,88,0,69],
[77,75,59,48,49,56,69,77,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,69,66,68,82,74,60,70,69],
[44,0,38,59,65,78,73,58,69,59],
[61,92,0,84,78,86,84,67,70,85],
[64,71,46,0,61,81,73,61,63,68],
[62,65,52,69,0,79,62,74,73,80],
[48,52,44,49,51,0,46,42,46,51],
[56,57,46,57,68,84,0,67,68,75],
[70,72,63,69,56,88,63,0,63,70],
[60,61,60,67,57,84,62,67,0,67],
[61,71,45,62,50,79,55,60,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,50,69,51,44,56,58,56,50],
[61,0,41,57,50,59,57,50,72,53],
[80,89,0,72,67,67,71,69,64,65],
[61,73,58,0,54,46,79,47,66,57],
[79,80,63,76,0,64,69,70,69,72],
[86,71,63,84,66,0,70,77,81,60],
[74,73,59,51,61,60,0,60,67,63],
[72,80,61,83,60,53,70,0,74,70],
[74,58,66,64,61,49,63,56,0,67],
[80,77,65,73,58,70,67,60,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,63,67,57,67,69,59,58,69],
[61,0,64,60,69,58,55,49,54,54],
[67,66,0,80,65,71,68,64,62,62],
[63,70,50,0,45,33,58,50,56,66],
[73,61,65,85,0,69,71,69,81,74],
[63,72,59,97,61,0,72,58,65,64],
[61,75,62,72,59,58,0,56,79,70],
[71,81,66,80,61,72,74,0,66,67],
[72,76,68,74,49,65,51,64,0,61],
[61,76,68,64,56,66,60,63,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,61,35,78,41,45,69,94,60],
[48,0,53,34,60,47,25,47,36,56],
[69,77,0,73,62,65,67,77,100,89],
[95,96,57,0,60,58,34,65,130,69],
[52,70,68,70,0,69,64,74,83,73],
[89,83,65,72,61,0,65,93,105,69],
[85,105,63,96,66,65,0,105,123,86],
[61,83,53,65,56,37,25,0,85,75],
[36,94,30,0,47,25,7,45,0,45],
[70,74,41,61,57,61,44,55,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,74,87,74,76,84,68,66,65],
[45,0,54,75,54,57,54,61,53,64],
[56,76,0,86,64,72,83,65,82,94],
[43,55,44,0,58,60,68,60,60,62],
[56,76,66,72,0,54,69,48,65,70],
[54,73,58,70,76,0,77,69,67,75],
[46,76,47,62,61,53,0,39,55,51],
[62,69,65,70,82,61,91,0,63,72],
[64,77,48,70,65,63,75,67,0,71],
[65,66,36,68,60,55,79,58,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,75,80,75,57,68,72,71,53],
[60,0,67,64,49,52,79,63,57,53],
[55,63,0,69,63,41,63,57,56,55],
[50,66,61,0,54,50,63,55,58,51],
[55,81,67,76,0,59,83,68,61,61],
[73,78,89,80,71,0,73,72,62,80],
[62,51,67,67,47,57,0,63,61,58],
[58,67,73,75,62,58,67,0,61,55],
[59,73,74,72,69,68,69,69,0,66],
[77,77,75,79,69,50,72,75,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,74,67,69,69,70,70,71,61],
[64,0,77,75,71,65,72,79,71,67],
[56,53,0,59,61,53,62,58,58,48],
[63,55,71,0,62,53,58,71,71,57],
[61,59,69,68,0,57,63,63,64,64],
[61,65,77,77,73,0,74,65,80,62],
[60,58,68,72,67,56,0,71,60,58],
[60,51,72,59,67,65,59,0,71,57],
[59,59,72,59,66,50,70,59,0,45],
[69,63,82,73,66,68,72,73,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,75,74,64,76,75,72,73,55],
[65,0,77,82,67,76,77,72,79,55],
[55,53,0,72,53,65,69,69,80,57],
[56,48,58,0,70,59,72,63,70,56],
[66,63,77,60,0,85,85,82,74,66],
[54,54,65,71,45,0,78,67,74,55],
[55,53,61,58,45,52,0,58,61,42],
[58,58,61,67,48,63,72,0,67,42],
[57,51,50,60,56,56,69,63,0,60],
[75,75,73,74,64,75,88,88,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,73,57,64,71,68,62,67,70],
[63,0,77,59,61,59,64,60,60,65],
[57,53,0,58,56,63,65,58,64,56],
[73,71,72,0,59,67,67,55,71,62],
[66,69,74,71,0,71,68,64,69,61],
[59,71,67,63,59,0,69,61,63,64],
[62,66,65,63,62,61,0,63,65,64],
[68,70,72,75,66,69,67,0,65,66],
[63,70,66,59,61,67,65,65,0,65],
[60,65,74,68,69,66,66,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,61,57,51,63,57,68,63,57],
[64,0,57,56,50,60,58,71,51,59],
[69,73,0,66,56,67,63,69,69,63],
[73,74,64,0,66,73,65,75,65,64],
[79,80,74,64,0,85,69,87,72,72],
[67,70,63,57,45,0,58,74,65,64],
[73,72,67,65,61,72,0,76,67,69],
[62,59,61,55,43,56,54,0,58,54],
[67,79,61,65,58,65,63,72,0,70],
[73,71,67,66,58,66,61,76,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,67,67,61,58,58,60,70,68],
[70,0,62,83,66,69,63,61,71,57],
[63,68,0,61,67,57,62,54,70,60],
[63,47,69,0,63,59,57,61,71,57],
[69,64,63,67,0,63,52,62,73,61],
[72,61,73,71,67,0,61,71,76,60],
[72,67,68,73,78,69,0,70,78,59],
[70,69,76,69,68,59,60,0,80,66],
[60,59,60,59,57,54,52,50,0,49],
[62,73,70,73,69,70,71,64,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,75,63,77,70,76,74,63,63],
[63,0,63,63,73,67,67,61,62,52],
[55,67,0,57,62,60,58,66,55,60],
[67,67,73,0,65,68,65,64,53,60],
[53,57,68,65,0,52,57,63,48,48],
[60,63,70,62,78,0,66,52,60,65],
[54,63,72,65,73,64,0,68,67,67],
[56,69,64,66,67,78,62,0,59,67],
[67,68,75,77,82,70,63,71,0,62],
[67,78,70,70,82,65,63,63,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,71,62,63,71,54,65,72,54],
[72,0,84,72,53,68,75,56,65,58],
[59,46,0,63,41,67,38,24,64,52],
[68,58,67,0,63,92,52,54,78,64],
[67,77,89,67,0,64,58,58,75,83],
[59,62,63,38,66,0,57,46,77,50],
[76,55,92,78,72,73,0,60,74,72],
[65,74,106,76,72,84,70,0,84,67],
[58,65,66,52,55,53,56,46,0,56],
[76,72,78,66,47,80,58,63,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,85,70,49,69,61,66,64,53],
[65,0,61,85,61,53,63,58,73,48],
[45,69,0,69,46,58,74,51,61,62],
[60,45,61,0,65,44,43,45,59,60],
[81,69,84,65,0,77,72,73,90,75],
[61,77,72,86,53,0,65,72,58,47],
[69,67,56,87,58,65,0,58,53,45],
[64,72,79,85,57,58,72,0,53,46],
[66,57,69,71,40,72,77,77,0,62],
[77,82,68,70,55,83,85,84,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,61,67,65,71,56,61,65],
[68,0,58,72,67,65,74,61,61,73],
[69,72,0,83,74,62,77,76,65,83],
[69,58,47,0,67,66,73,58,65,70],
[63,63,56,63,0,67,69,48,60,63],
[65,65,68,64,63,0,65,57,56,67],
[59,56,53,57,61,65,0,53,51,71],
[74,69,54,72,82,73,77,0,65,65],
[69,69,65,65,70,74,79,65,0,77],
[65,57,47,60,67,63,59,65,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,68,62,56,50,59,71,72,62],
[77,0,69,72,76,87,66,75,74,65],
[62,61,0,59,56,54,65,71,78,62],
[68,58,71,0,69,71,74,80,77,66],
[74,54,74,61,0,65,61,61,75,67],
[80,43,76,59,65,0,71,72,73,58],
[71,64,65,56,69,59,0,64,68,58],
[59,55,59,50,69,58,66,0,74,48],
[58,56,52,53,55,57,62,56,0,66],
[68,65,68,64,63,72,72,82,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,62,66,62,62,70,67,78,57],
[57,0,56,73,59,63,62,57,66,58],
[68,74,0,68,55,59,73,71,74,68],
[64,57,62,0,54,64,70,68,71,55],
[68,71,75,76,0,69,74,63,69,67],
[68,67,71,66,61,0,76,77,81,62],
[60,68,57,60,56,54,0,60,71,51],
[63,73,59,62,67,53,70,0,72,61],
[52,64,56,59,61,49,59,58,0,54],
[73,72,62,75,63,68,79,69,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,92,73,58,54,82,58,72,73],
[58,0,102,79,47,68,57,52,67,64],
[38,28,0,59,36,69,68,43,52,48],
[57,51,71,0,43,60,70,52,61,71],
[72,83,94,87,0,58,62,61,42,96],
[76,62,61,70,72,0,45,68,46,58],
[48,73,62,60,68,85,0,47,65,79],
[72,78,87,78,69,62,83,0,63,80],
[58,63,78,69,88,84,65,67,0,67],
[57,66,82,59,34,72,51,50,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,74,83,80,75,75,90,56,68],
[38,0,53,56,53,39,68,73,39,37],
[56,77,0,65,71,61,71,81,55,44],
[47,74,65,0,64,57,70,65,46,59],
[50,77,59,66,0,50,58,71,54,56],
[55,91,69,73,80,0,83,81,65,58],
[55,62,59,60,72,47,0,62,57,50],
[40,57,49,65,59,49,68,0,49,46],
[74,91,75,84,76,65,73,81,0,72],
[62,93,86,71,74,72,80,84,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,55,57,63,66,63,58,54,68],
[64,0,55,58,66,73,59,57,61,62],
[75,75,0,59,75,65,66,63,62,72],
[73,72,71,0,75,73,68,66,64,76],
[67,64,55,55,0,63,58,58,49,65],
[64,57,65,57,67,0,67,54,63,65],
[67,71,64,62,72,63,0,64,59,67],
[72,73,67,64,72,76,66,0,67,72],
[76,69,68,66,81,67,71,63,0,74],
[62,68,58,54,65,65,63,58,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,64,63,80,69,66,66,61,68],
[56,0,62,62,63,60,63,53,55,67],
[66,68,0,64,70,62,67,65,61,66],
[67,68,66,0,75,65,64,64,57,74],
[50,67,60,55,0,59,54,50,46,58],
[61,70,68,65,71,0,54,60,58,73],
[64,67,63,66,76,76,0,59,60,70],
[64,77,65,66,80,70,71,0,65,74],
[69,75,69,73,84,72,70,65,0,77],
[62,63,64,56,72,57,60,56,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,79,60,59,70,57,71,65],
[65,0,68,76,62,72,71,64,66,68],
[64,62,0,74,63,56,63,58,68,61],
[51,54,56,0,60,52,56,55,60,60],
[70,68,67,70,0,66,68,60,66,67],
[71,58,74,78,64,0,69,60,67,68],
[60,59,67,74,62,61,0,50,68,64],
[73,66,72,75,70,70,80,0,66,62],
[59,64,62,70,64,63,62,64,0,68],
[65,62,69,70,63,62,66,68,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,45,52,65,54,54,64,64,64],
[71,0,55,58,61,58,51,71,60,67],
[85,75,0,64,85,68,66,80,65,67],
[78,72,66,0,79,63,62,75,59,74],
[65,69,45,51,0,49,45,58,54,55],
[76,72,62,67,81,0,64,79,75,71],
[76,79,64,68,85,66,0,69,62,75],
[66,59,50,55,72,51,61,0,61,58],
[66,70,65,71,76,55,68,69,0,64],
[66,63,63,56,75,59,55,72,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,52,58,68,53,59,64,54],
[66,0,50,47,58,56,51,59,66,52],
[64,80,0,58,61,52,62,57,67,63],
[78,83,72,0,69,76,64,68,67,59],
[72,72,69,61,0,70,65,71,69,69],
[62,74,78,54,60,0,66,68,68,71],
[77,79,68,66,65,64,0,64,66,63],
[71,71,73,62,59,62,66,0,64,67],
[66,64,63,63,61,62,64,66,0,66],
[76,78,67,71,61,59,67,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,51,68,68,61,70,69,38,53],
[68,0,79,83,79,67,76,80,47,51],
[79,51,0,57,61,58,56,80,55,48],
[62,47,73,0,63,66,73,74,57,52],
[62,51,69,67,0,72,70,79,27,52],
[69,63,72,64,58,0,63,75,53,70],
[60,54,74,57,60,67,0,67,40,55],
[61,50,50,56,51,55,63,0,46,40],
[92,83,75,73,103,77,90,84,0,65],
[77,79,82,78,78,60,75,90,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,72,72,63,68,65,69,70,68],
[70,0,69,66,64,65,68,69,72,63],
[58,61,0,65,64,55,65,67,64,57],
[58,64,65,0,62,54,64,67,79,70],
[67,66,66,68,0,62,69,73,82,68],
[62,65,75,76,68,0,59,65,70,71],
[65,62,65,66,61,71,0,67,67,66],
[61,61,63,63,57,65,63,0,67,65],
[60,58,66,51,48,60,63,63,0,58],
[62,67,73,60,62,59,64,65,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,61,54,64,59,53,66,75],
[64,0,55,62,50,54,50,51,64,62],
[67,75,0,57,61,61,56,61,61,67],
[69,68,73,0,59,57,54,56,63,69],
[76,80,69,71,0,71,73,67,72,64],
[66,76,69,73,59,0,55,60,67,61],
[71,80,74,76,57,75,0,67,75,71],
[77,79,69,74,63,70,63,0,77,76],
[64,66,69,67,58,63,55,53,0,86],
[55,68,63,61,66,69,59,54,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,64,73,68,68,60,68,71],
[63,0,65,66,68,67,69,54,62,68],
[61,65,0,61,67,64,60,58,61,60],
[66,64,69,0,69,73,61,59,64,67],
[57,62,63,61,0,69,55,61,58,68],
[62,63,66,57,61,0,61,48,57,60],
[62,61,70,69,75,69,0,59,70,72],
[70,76,72,71,69,82,71,0,57,68],
[62,68,69,66,72,73,60,73,0,74],
[59,62,70,63,62,70,58,62,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,59,73,76,63,63,65,51,74],
[61,0,61,74,47,68,64,60,44,57],
[71,69,0,78,61,52,45,57,68,70],
[57,56,52,0,66,58,52,50,34,64],
[54,83,69,64,0,61,57,48,63,64],
[67,62,78,72,69,0,53,53,74,72],
[67,66,85,78,73,77,0,66,64,73],
[65,70,73,80,82,77,64,0,54,71],
[79,86,62,96,67,56,66,76,0,54],
[56,73,60,66,66,58,57,59,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,70,73,68,73,63,76,74,76],
[57,0,76,54,31,63,76,62,65,38],
[60,54,0,29,22,58,52,29,49,49],
[57,76,101,0,53,45,39,60,73,48],
[62,99,108,77,0,100,71,77,83,75],
[57,67,72,85,30,0,67,61,67,38],
[67,54,78,91,59,63,0,54,107,66],
[54,68,101,70,53,69,76,0,70,60],
[56,65,81,57,47,63,23,60,0,52],
[54,92,81,82,55,92,64,70,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,65,64,58,67,81,59,63,71],
[72,0,76,66,63,84,82,61,65,76],
[65,54,0,60,61,73,69,62,61,72],
[66,64,70,0,56,65,74,56,57,67],
[72,67,69,74,0,80,70,65,72,70],
[63,46,57,65,50,0,59,50,67,52],
[49,48,61,56,60,71,0,58,63,69],
[71,69,68,74,65,80,72,0,67,79],
[67,65,69,73,58,63,67,63,0,61],
[59,54,58,63,60,78,61,51,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,54,63,62,62,60,59,59,61],
[63,0,50,51,62,58,65,56,67,60],
[76,80,0,72,71,70,76,65,74,67],
[67,79,58,0,66,65,70,60,69,64],
[68,68,59,64,0,66,66,57,69,61],
[68,72,60,65,64,0,67,56,65,60],
[70,65,54,60,64,63,0,56,69,63],
[71,74,65,70,73,74,74,0,69,72],
[71,63,56,61,61,65,61,61,0,56],
[69,70,63,66,69,70,67,58,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,57,55,62,63,61,69,64],
[65,0,86,83,66,63,72,66,72,60],
[67,44,0,51,65,50,47,61,73,57],
[73,47,79,0,70,69,71,64,71,60],
[75,64,65,60,0,58,70,69,58,53],
[68,67,80,61,72,0,80,65,83,66],
[67,58,83,59,60,50,0,57,67,40],
[69,64,69,66,61,65,73,0,64,74],
[61,58,57,59,72,47,63,66,0,60],
[66,70,73,70,77,64,90,56,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,58,61,65,62,64,71,69,72],
[75,0,63,64,65,68,64,69,71,70],
[72,67,0,73,67,70,68,79,76,64],
[69,66,57,0,71,68,65,67,65,79],
[65,65,63,59,0,70,67,74,72,71],
[68,62,60,62,60,0,64,76,71,67],
[66,66,62,65,63,66,0,73,74,63],
[59,61,51,63,56,54,57,0,61,60],
[61,59,54,65,58,59,56,69,0,59],
[58,60,66,51,59,63,67,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,66,68,66,70,74,58,69,66],
[69,0,64,68,64,54,85,70,78,70],
[64,66,0,55,63,60,66,66,67,71],
[62,62,75,0,75,56,62,63,80,70],
[64,66,67,55,0,60,72,59,75,67],
[60,76,70,74,70,0,78,74,80,78],
[56,45,64,68,58,52,0,66,84,64],
[72,60,64,67,71,56,64,0,72,73],
[61,52,63,50,55,50,46,58,0,60],
[64,60,59,60,63,52,66,57,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,74,68,72,65,68,75,67,70],
[70,0,72,62,69,68,66,74,67,74],
[56,58,0,54,70,53,63,74,58,69],
[62,68,76,0,71,67,79,78,73,76],
[58,61,60,59,0,65,61,70,67,70],
[65,62,77,63,65,0,75,76,67,71],
[62,64,67,51,69,55,0,63,61,71],
[55,56,56,52,60,54,67,0,65,65],
[63,63,72,57,63,63,69,65,0,70],
[60,56,61,54,60,59,59,65,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,76,59,59,71,60,71,68,73],
[61,0,73,63,56,49,66,52,68,73],
[54,57,0,65,59,66,58,61,78,74],
[71,67,65,0,67,75,68,77,73,86],
[71,74,71,63,0,75,71,62,68,83],
[59,81,64,55,55,0,68,69,64,66],
[70,64,72,62,59,62,0,60,64,68],
[59,78,69,53,68,61,70,0,72,76],
[62,62,52,57,62,66,66,58,0,80],
[57,57,56,44,47,64,62,54,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,51,72,70,86,51,81,79,65],
[51,0,55,55,69,75,53,68,57,68],
[79,75,0,71,86,92,76,76,75,65],
[58,75,59,0,73,78,52,69,65,69],
[60,61,44,57,0,82,64,88,78,76],
[44,55,38,52,48,0,40,48,45,49],
[79,77,54,78,66,90,0,59,70,63],
[49,62,54,61,42,82,71,0,79,56],
[51,73,55,65,52,85,60,51,0,80],
[65,62,65,61,54,81,67,74,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,52,67,55,58,46,51,62,37],
[70,0,58,76,66,67,60,52,57,66],
[78,72,0,69,50,51,55,57,62,47],
[63,54,61,0,58,67,54,41,55,46],
[75,64,80,72,0,75,63,63,53,50],
[72,63,79,63,55,0,49,58,63,53],
[84,70,75,76,67,81,0,61,66,48],
[79,78,73,89,67,72,69,0,67,57],
[68,73,68,75,77,67,64,63,0,50],
[93,64,83,84,80,77,82,73,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,62,60,67,60,69,64,67,59],
[59,0,73,66,61,56,64,75,69,59],
[68,57,0,54,62,70,66,69,68,63],
[70,64,76,0,64,70,63,74,73,59],
[63,69,68,66,0,70,66,81,66,66],
[70,74,60,60,60,0,66,73,77,59],
[61,66,64,67,64,64,0,74,68,60],
[66,55,61,56,49,57,56,0,58,54],
[63,61,62,57,64,53,62,72,0,66],
[71,71,67,71,64,71,70,76,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,58,62,62,52,59,41,88,82],
[72,0,73,57,65,77,53,78,80,90],
[72,57,0,43,61,71,69,76,72,71],
[68,73,87,0,94,80,60,81,88,86],
[68,65,69,36,0,54,59,65,75,81],
[78,53,59,50,76,0,61,79,77,72],
[71,77,61,70,71,69,0,63,87,81],
[89,52,54,49,65,51,67,0,59,61],
[42,50,58,42,55,53,43,71,0,75],
[48,40,59,44,49,58,49,69,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,64,71,62,71,57,60,56,68],
[68,0,56,66,63,59,53,65,59,68],
[66,74,0,85,70,63,65,67,64,69],
[59,64,45,0,60,55,52,48,50,64],
[68,67,60,70,0,63,55,64,63,64],
[59,71,67,75,67,0,61,56,57,72],
[73,77,65,78,75,69,0,66,60,71],
[70,65,63,82,66,74,64,0,75,74],
[74,71,66,80,67,73,70,55,0,76],
[62,62,61,66,66,58,59,56,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,66,70,53,51,36,67,53,68],
[92,0,90,70,73,80,73,75,63,92],
[64,40,0,72,63,55,52,52,69,53],
[60,60,58,0,56,65,49,33,62,54],
[77,57,67,74,0,60,36,67,52,85],
[79,50,75,65,70,0,45,63,45,95],
[94,57,78,81,94,85,0,86,84,113],
[63,55,78,97,63,67,44,0,68,87],
[77,67,61,68,78,85,46,62,0,66],
[62,38,77,76,45,35,17,43,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,61,57,68,72,68,54,64],
[64,0,68,63,62,69,56,69,65,69],
[68,62,0,58,66,61,66,64,72,74],
[69,67,72,0,67,65,73,65,68,69],
[73,68,64,63,0,63,66,68,66,73],
[62,61,69,65,67,0,61,62,66,74],
[58,74,64,57,64,69,0,73,65,69],
[62,61,66,65,62,68,57,0,65,63],
[76,65,58,62,64,64,65,65,0,67],
[66,61,56,61,57,56,61,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,68,61,67,66,63,59,65,68],
[59,0,57,68,62,62,56,57,53,59],
[62,73,0,64,66,70,69,64,64,59],
[69,62,66,0,60,57,66,55,55,58],
[63,68,64,70,0,59,61,56,63,60],
[64,68,60,73,71,0,60,60,63,73],
[67,74,61,64,69,70,0,68,67,73],
[71,73,66,75,74,70,62,0,65,68],
[65,77,66,75,67,67,63,65,0,66],
[62,71,71,72,70,57,57,62,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,78,91,82,71,59,52,69,63],
[63,0,107,84,84,50,84,75,81,76],
[52,23,0,51,33,45,43,3,39,69],
[39,46,79,0,40,23,31,24,61,62],
[48,46,97,90,0,83,83,68,45,57],
[59,80,85,107,47,0,64,55,83,76],
[71,46,87,99,47,66,0,63,79,77],
[78,55,127,106,62,75,67,0,73,72],
[61,49,91,69,85,47,51,57,0,75],
[67,54,61,68,73,54,53,58,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,51,51,55,54,58,48,61,51],
[74,0,62,63,76,64,74,61,73,74],
[79,68,0,62,66,50,67,69,70,73],
[79,67,68,0,61,62,61,63,64,75],
[75,54,64,69,0,62,57,54,66,70],
[76,66,80,68,68,0,73,62,80,71],
[72,56,63,69,73,57,0,70,60,75],
[82,69,61,67,76,68,60,0,70,66],
[69,57,60,66,64,50,70,60,0,64],
[79,56,57,55,60,59,55,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,57,64,69,59,70,68,66],
[63,0,68,65,62,64,67,62,59,60],
[66,62,0,64,62,56,64,60,65,63],
[73,65,66,0,74,68,68,68,61,68],
[66,68,68,56,0,63,62,68,65,62],
[61,66,74,62,67,0,63,67,71,65],
[71,63,66,62,68,67,0,70,59,61],
[60,68,70,62,62,63,60,0,69,71],
[62,71,65,69,65,59,71,61,0,66],
[64,70,67,62,68,65,69,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,84,77,82,75,59,54,72,71],
[66,0,73,75,67,63,68,65,63,64],
[46,57,0,67,55,66,56,60,52,60],
[53,55,63,0,49,65,57,61,54,68],
[48,63,75,81,0,62,56,55,54,68],
[55,67,64,65,68,0,60,49,54,69],
[71,62,74,73,74,70,0,66,59,58],
[76,65,70,69,75,81,64,0,70,65],
[58,67,78,76,76,76,71,60,0,66],
[59,66,70,62,62,61,72,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,41,67,35,61,63,66,83,72],
[57,0,61,78,61,71,72,78,79,64],
[89,69,0,49,69,84,83,94,72,60],
[63,52,81,0,66,69,83,71,83,45],
[95,69,61,64,0,60,98,95,89,52],
[69,59,46,61,70,0,80,90,77,66],
[67,58,47,47,32,50,0,77,69,40],
[64,52,36,59,35,40,53,0,45,50],
[47,51,58,47,41,53,61,85,0,47],
[58,66,70,85,78,64,90,80,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,67,56,70,64,56,66,69],
[68,0,69,66,63,65,69,71,72,80],
[67,61,0,64,60,64,61,57,62,63],
[63,64,66,0,53,66,64,63,64,75],
[74,67,70,77,0,77,80,65,84,76],
[60,65,66,64,53,0,73,56,71,75],
[66,61,69,66,50,57,0,62,65,73],
[74,59,73,67,65,74,68,0,69,75],
[64,58,68,66,46,59,65,61,0,66],
[61,50,67,55,54,55,57,55,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,55,64,61,62,61,69,62,58],
[65,0,59,70,68,58,61,72,60,66],
[75,71,0,81,71,68,73,80,61,74],
[66,60,49,0,66,56,67,61,56,54],
[69,62,59,64,0,65,68,76,59,68],
[68,72,62,74,65,0,67,79,67,74],
[69,69,57,63,62,63,0,71,55,61],
[61,58,50,69,54,51,59,0,57,54],
[68,70,69,74,71,63,75,73,0,65],
[72,64,56,76,62,56,69,76,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,62,55,52,41,38,43,65,47],
[86,0,69,71,49,56,55,58,59,78],
[68,61,0,49,48,53,46,64,56,54],
[75,59,81,0,71,71,61,56,80,64],
[78,81,82,59,0,74,58,81,67,71],
[89,74,77,59,56,0,75,70,78,76],
[92,75,84,69,72,55,0,78,85,73],
[87,72,66,74,49,60,52,0,86,77],
[65,71,74,50,63,52,45,44,0,58],
[83,52,76,66,59,54,57,53,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,60,90,68,50,61,54,79,38],
[74,0,42,77,46,57,46,45,71,53],
[70,88,0,72,55,55,58,71,73,55],
[40,53,58,0,39,47,53,16,51,48],
[62,84,75,91,0,73,75,65,67,71],
[80,73,75,83,57,0,78,63,60,53],
[69,84,72,77,55,52,0,57,69,50],
[76,85,59,114,65,67,73,0,76,70],
[51,59,57,79,63,70,61,54,0,52],
[92,77,75,82,59,77,80,60,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,71,62,71,69,78,69,74,70],
[56,0,64,64,65,62,61,72,64,70],
[59,66,0,68,63,70,67,70,68,63],
[68,66,62,0,67,69,71,74,69,69],
[59,65,67,63,0,66,68,75,72,69],
[61,68,60,61,64,0,70,68,64,65],
[52,69,63,59,62,60,0,74,64,71],
[61,58,60,56,55,62,56,0,62,55],
[56,66,62,61,58,66,66,68,0,70],
[60,60,67,61,61,65,59,75,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,54,59,56,53,64,50,53,66],
[68,0,69,61,73,63,67,68,70,74],
[76,61,0,68,67,68,70,66,66,73],
[71,69,62,0,61,55,64,67,56,70],
[74,57,63,69,0,67,63,67,64,63],
[77,67,62,75,63,0,73,66,67,74],
[66,63,60,66,67,57,0,60,63,73],
[80,62,64,63,63,64,70,0,72,75],
[77,60,64,74,66,63,67,58,0,68],
[64,56,57,60,67,56,57,55,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,64,75,58,59,68,59,57,68],
[68,0,67,57,67,60,66,52,66,72],
[66,63,0,58,69,48,63,56,58,72],
[55,73,72,0,62,53,61,57,59,65],
[72,63,61,68,0,65,75,62,71,64],
[71,70,82,77,65,0,74,70,70,81],
[62,64,67,69,55,56,0,52,67,70],
[71,78,74,73,68,60,78,0,67,72],
[73,64,72,71,59,60,63,63,0,74],
[62,58,58,65,66,49,60,58,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,60,61,63,57,63,68,63],
[63,0,69,60,58,69,64,68,67,57],
[60,61,0,63,62,59,63,64,60,68],
[70,70,67,0,63,71,76,78,68,73],
[69,72,68,67,0,62,73,69,72,69],
[67,61,71,59,68,0,70,70,65,60],
[73,66,67,54,57,60,0,63,64,63],
[67,62,66,52,61,60,67,0,68,62],
[62,63,70,62,58,65,66,62,0,61],
[67,73,62,57,61,70,67,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,53,47,68,52,49,73,68,56],
[55,0,52,47,57,52,52,62,62,55],
[77,78,0,50,68,61,66,79,71,84],
[83,83,80,0,76,71,60,72,92,92],
[62,73,62,54,0,45,55,53,77,58],
[78,78,69,59,85,0,65,77,88,86],
[81,78,64,70,75,65,0,78,87,76],
[57,68,51,58,77,53,52,0,85,72],
[62,68,59,38,53,42,43,45,0,68],
[74,75,46,38,72,44,54,58,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,64,60,55,45,53,60,63,52],
[75,0,61,73,69,51,69,66,73,71],
[66,69,0,69,53,50,62,66,65,58],
[70,57,61,0,54,48,60,60,65,62],
[75,61,77,76,0,63,63,68,70,61],
[85,79,80,82,67,0,75,75,81,63],
[77,61,68,70,67,55,0,68,76,63],
[70,64,64,70,62,55,62,0,73,64],
[67,57,65,65,60,49,54,57,0,59],
[78,59,72,68,69,67,67,66,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,71,64,75,67,60,68,68,64],
[56,0,67,54,76,68,64,62,55,61],
[59,63,0,58,71,58,58,62,64,61],
[66,76,72,0,82,70,58,63,69,70],
[55,54,59,48,0,60,46,52,57,61],
[63,62,72,60,70,0,61,66,67,67],
[70,66,72,72,84,69,0,69,65,66],
[62,68,68,67,78,64,61,0,64,61],
[62,75,66,61,73,63,65,66,0,59],
[66,69,69,60,69,63,64,69,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,62,69,72,77,68,77,59,80],
[63,0,56,73,72,66,60,73,68,74],
[68,74,0,70,66,76,64,77,65,68],
[61,57,60,0,60,65,58,71,58,74],
[58,58,64,70,0,67,60,63,63,89],
[53,64,54,65,63,0,53,68,63,69],
[62,70,66,72,70,77,0,71,64,81],
[53,57,53,59,67,62,59,0,64,79],
[71,62,65,72,67,67,66,66,0,77],
[50,56,62,56,41,61,49,51,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,47,51,38,44,59,48,49,58],
[74,0,67,64,59,60,77,75,47,74],
[83,63,0,59,60,69,76,68,69,77],
[79,66,71,0,63,66,80,77,66,70],
[92,71,70,67,0,71,79,83,65,68],
[86,70,61,64,59,0,81,70,53,64],
[71,53,54,50,51,49,0,48,50,72],
[82,55,62,53,47,60,82,0,65,69],
[81,83,61,64,65,77,80,65,0,75],
[72,56,53,60,62,66,58,61,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,66,53,68,76,65,78,73],
[64,0,81,68,64,65,68,68,77,71],
[64,49,0,50,70,62,73,68,78,65],
[64,62,80,0,59,70,70,61,69,71],
[77,66,60,71,0,66,57,59,72,76],
[62,65,68,60,64,0,64,64,78,75],
[54,62,57,60,73,66,0,62,68,71],
[65,62,62,69,71,66,68,0,68,64],
[52,53,52,61,58,52,62,62,0,60],
[57,59,65,59,54,55,59,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,60,73,76,66,64,61,72,73],
[56,0,60,57,67,74,59,63,62,71],
[70,70,0,61,74,65,54,67,62,80],
[57,73,69,0,70,63,62,64,53,74],
[54,63,56,60,0,59,53,55,58,58],
[64,56,65,67,71,0,51,53,61,64],
[66,71,76,68,77,79,0,69,62,84],
[69,67,63,66,75,77,61,0,63,69],
[58,68,68,77,72,69,68,67,0,73],
[57,59,50,56,72,66,46,61,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,50,45,58,45,72,35,79,79],
[74,0,70,53,7,72,86,48,89,81],
[80,60,0,44,34,51,62,51,45,68],
[85,77,86,0,65,84,113,73,97,106],
[72,123,96,65,0,78,97,54,93,80],
[85,58,79,46,52,0,92,55,50,66],
[58,44,68,17,33,38,0,51,58,54],
[95,82,79,57,76,75,79,0,61,106],
[51,41,85,33,37,80,72,69,0,74],
[51,49,62,24,50,64,76,24,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,48,37,55,57,59,49,37,53],
[92,0,77,58,87,68,81,78,72,73],
[82,53,0,59,79,61,75,59,48,58],
[93,72,71,0,77,73,69,65,67,74],
[75,43,51,53,0,50,67,56,47,56],
[73,62,69,57,80,0,62,75,63,64],
[71,49,55,61,63,68,0,51,44,54],
[81,52,71,65,74,55,79,0,57,57],
[93,58,82,63,83,67,86,73,0,65],
[77,57,72,56,74,66,76,73,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,74,68,59,61,63,70,67,60],
[63,0,78,83,70,72,73,68,77,68],
[56,52,0,63,52,69,66,62,58,60],
[62,47,67,0,62,65,62,66,59,67],
[71,60,78,68,0,66,62,59,59,58],
[69,58,61,65,64,0,64,69,67,68],
[67,57,64,68,68,66,0,65,66,67],
[60,62,68,64,71,61,65,0,70,61],
[63,53,72,71,71,63,64,60,0,59],
[70,62,70,63,72,62,63,69,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,49,62,42,62,62,63,55,61],
[75,0,66,71,67,69,96,62,58,63],
[81,64,0,68,57,63,62,72,63,76],
[68,59,62,0,61,59,73,60,50,64],
[88,63,73,69,0,73,76,82,77,72],
[68,61,67,71,57,0,80,68,55,71],
[68,34,68,57,54,50,0,60,57,64],
[67,68,58,70,48,62,70,0,69,69],
[75,72,67,80,53,75,73,61,0,62],
[69,67,54,66,58,59,66,61,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,57,62,53,76,70,64,55,60],
[65,0,64,63,64,70,62,57,60,64],
[73,66,0,68,77,90,74,65,53,74],
[68,67,62,0,60,79,67,63,60,71],
[77,66,53,70,0,69,71,75,65,72],
[54,60,40,51,61,0,65,60,46,52],
[60,68,56,63,59,65,0,63,50,58],
[66,73,65,67,55,70,67,0,55,69],
[75,70,77,70,65,84,80,75,0,80],
[70,66,56,59,58,78,72,61,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,71,63,71,76,60,60,60,71],
[64,0,69,72,71,80,66,67,66,69],
[59,61,0,67,70,77,70,70,70,65],
[67,58,63,0,70,69,72,69,62,74],
[59,59,60,60,0,71,49,66,70,59],
[54,50,53,61,59,0,61,63,54,59],
[70,64,60,58,81,69,0,69,59,63],
[70,63,60,61,64,67,61,0,63,63],
[70,64,60,68,60,76,71,67,0,69],
[59,61,65,56,71,71,67,67,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,91,72,94,52,77,72,73,63],
[34,0,63,68,88,70,42,89,76,56],
[39,67,0,54,67,43,63,43,68,50],
[58,62,76,0,104,76,23,80,73,108],
[36,42,63,26,0,55,35,19,51,62],
[78,60,87,54,75,0,55,40,76,78],
[53,88,67,107,95,75,0,87,86,85],
[58,41,87,50,111,90,43,0,55,80],
[57,54,62,57,79,54,44,75,0,61],
[67,74,80,22,68,52,45,50,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,72,55,62,67,61,62,57,68],
[74,0,77,61,56,65,67,61,58,68],
[58,53,0,51,53,46,56,55,50,53],
[75,69,79,0,65,67,71,70,67,67],
[68,74,77,65,0,52,73,76,60,64],
[63,65,84,63,78,0,68,62,71,69],
[69,63,74,59,57,62,0,54,56,64],
[68,69,75,60,54,68,76,0,50,66],
[73,72,80,63,70,59,74,80,0,69],
[62,62,77,63,66,61,66,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,66,69,71,70,67,68,68,63],
[58,0,65,61,64,70,60,62,62,60],
[64,65,0,73,59,72,61,66,62,65],
[61,69,57,0,59,73,69,63,56,60],
[59,66,71,71,0,72,67,67,59,72],
[60,60,58,57,58,0,61,59,61,59],
[63,70,69,61,63,69,0,72,57,72],
[62,68,64,67,63,71,58,0,56,61],
[62,68,68,74,71,69,73,74,0,70],
[67,70,65,70,58,71,58,69,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,54,70,69,62,61,67,57,65],
[55,0,55,60,61,57,62,64,54,57],
[76,75,0,72,74,77,64,71,68,67],
[60,70,58,0,61,58,62,68,57,62],
[61,69,56,69,0,56,58,61,58,65],
[68,73,53,72,74,0,63,60,55,61],
[69,68,66,68,72,67,0,72,60,69],
[63,66,59,62,69,70,58,0,58,52],
[73,76,62,73,72,75,70,72,0,77],
[65,73,63,68,65,69,61,78,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,56,53,48,61,62,62,67,58],
[70,0,65,74,68,70,73,64,69,77],
[74,65,0,68,57,64,69,56,69,63],
[77,56,62,0,52,54,54,56,65,51],
[82,62,73,78,0,68,73,65,78,67],
[69,60,66,76,62,0,69,62,61,64],
[68,57,61,76,57,61,0,66,65,64],
[68,66,74,74,65,68,64,0,66,62],
[63,61,61,65,52,69,65,64,0,69],
[72,53,67,79,63,66,66,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,61,62,77,72,71,66,75,63],
[58,0,66,51,66,51,57,47,69,57],
[69,64,0,56,70,71,70,70,68,60],
[68,79,74,0,76,71,75,61,69,64],
[53,64,60,54,0,58,64,56,59,45],
[58,79,59,59,72,0,67,65,71,65],
[59,73,60,55,66,63,0,52,65,53],
[64,83,60,69,74,65,78,0,75,64],
[55,61,62,61,71,59,65,55,0,53],
[67,73,70,66,85,65,77,66,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,64,68,64,65,72,81,76],
[60,0,79,59,63,66,68,69,66,64],
[66,51,0,53,57,62,59,59,62,75],
[66,71,77,0,77,60,75,66,74,76],
[62,67,73,53,0,62,61,74,82,83],
[66,64,68,70,68,0,73,66,69,73],
[65,62,71,55,69,57,0,79,65,77],
[58,61,71,64,56,64,51,0,64,71],
[49,64,68,56,48,61,65,66,0,70],
[54,66,55,54,47,57,53,59,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,88,63,78,71,68,68,60,70],
[57,0,61,69,59,55,59,48,54,54],
[42,69,0,65,53,50,60,58,46,57],
[67,61,65,0,65,61,64,65,57,56],
[52,71,77,65,0,60,64,61,54,60],
[59,75,80,69,70,0,63,65,57,52],
[62,71,70,66,66,67,0,68,58,60],
[62,82,72,65,69,65,62,0,64,64],
[70,76,84,73,76,73,72,66,0,62],
[60,76,73,74,70,78,70,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,61,56,59,59,62,59,66,58],
[77,0,71,64,66,72,67,69,74,62],
[69,59,0,54,56,63,67,63,72,59],
[74,66,76,0,65,72,62,62,78,71],
[71,64,74,65,0,66,70,68,72,68],
[71,58,67,58,64,0,65,63,75,56],
[68,63,63,68,60,65,0,62,68,62],
[71,61,67,68,62,67,68,0,71,63],
[64,56,58,52,58,55,62,59,0,60],
[72,68,71,59,62,74,68,67,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,78,56,66,77,66,110,65,77],
[43,0,66,32,63,54,45,75,41,43],
[52,64,0,34,85,42,32,77,32,54],
[74,98,96,0,94,62,77,96,72,53],
[64,67,45,36,0,65,68,76,65,45],
[53,76,88,68,65,0,45,99,46,55],
[64,85,98,53,62,85,0,107,61,33],
[20,55,53,34,54,31,23,0,34,45],
[65,89,98,58,65,84,69,96,0,66],
[53,87,76,77,85,75,97,85,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,79,56,72,80,70,57,72,64],
[66,0,71,65,60,72,71,85,59,73],
[51,59,0,50,45,53,59,71,43,50],
[74,65,80,0,52,60,57,56,59,65],
[58,70,85,78,0,77,73,93,64,87],
[50,58,77,70,53,0,73,64,64,60],
[60,59,71,73,57,57,0,65,64,57],
[73,45,59,74,37,66,65,0,54,59],
[58,71,87,71,66,66,66,76,0,57],
[66,57,80,65,43,70,73,71,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,71,65,69,75,71,74,69,65],
[59,0,57,64,65,61,73,66,65,64],
[59,73,0,64,69,76,74,72,68,66],
[65,66,66,0,70,67,76,64,71,68],
[61,65,61,60,0,61,68,67,66,54],
[55,69,54,63,69,0,82,62,68,61],
[59,57,56,54,62,48,0,61,60,60],
[56,64,58,66,63,68,69,0,69,55],
[61,65,62,59,64,62,70,61,0,57],
[65,66,64,62,76,69,70,75,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,59,56,55,62,59,65,58,42],
[70,0,61,54,62,60,61,71,57,52],
[71,69,0,60,64,67,78,70,62,59],
[74,76,70,0,63,75,70,70,61,60],
[75,68,66,67,0,75,71,84,64,56],
[68,70,63,55,55,0,52,70,59,51],
[71,69,52,60,59,78,0,61,67,59],
[65,59,60,60,46,60,69,0,48,38],
[72,73,68,69,66,71,63,82,0,70],
[88,78,71,70,74,79,71,92,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,58,66,78,76,70,66,67,69],
[78,0,75,78,84,72,78,62,77,69],
[72,55,0,72,85,72,70,61,63,69],
[64,52,58,0,77,69,56,48,59,57],
[52,46,45,53,0,50,62,42,62,48],
[54,58,58,61,80,0,56,46,61,53],
[60,52,60,74,68,74,0,43,59,63],
[64,68,69,82,88,84,87,0,80,81],
[63,53,67,71,68,69,71,50,0,58],
[61,61,61,73,82,77,67,49,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,79,79,42,79,70,57,71,81],
[61,0,38,41,72,79,62,48,71,59],
[51,92,0,62,53,78,62,47,83,49],
[51,89,68,0,62,79,90,67,82,49],
[88,58,77,68,0,88,68,77,70,49],
[51,51,52,51,42,0,62,39,42,39],
[60,68,68,40,62,68,0,68,70,60],
[73,82,83,63,53,91,62,0,83,51],
[59,59,47,48,60,88,60,47,0,29],
[49,71,81,81,81,91,70,79,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,75,76,68,68,55,66,65,73],
[55,0,72,58,60,67,57,64,44,71],
[55,58,0,53,47,60,52,62,48,62],
[54,72,77,0,66,57,61,67,50,66],
[62,70,83,64,0,62,62,62,42,72],
[62,63,70,73,68,0,60,75,57,64],
[75,73,78,69,68,70,0,69,65,65],
[64,66,68,63,68,55,61,0,43,72],
[65,86,82,80,88,73,65,87,0,71],
[57,59,68,64,58,66,65,58,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,70,72,59,62,62,61,62,62],
[59,0,71,67,66,75,69,61,78,59],
[60,59,0,70,63,84,74,67,73,56],
[58,63,60,0,60,54,57,71,70,76],
[71,64,67,70,0,64,67,79,74,60],
[68,55,46,76,66,0,58,66,65,52],
[68,61,56,73,63,72,0,72,83,69],
[69,69,63,59,51,64,58,0,66,60],
[68,52,57,60,56,65,47,64,0,51],
[68,71,74,54,70,78,61,70,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,62,55,51,56,56,68,57,64],
[73,0,65,54,59,58,59,65,51,52],
[68,65,0,62,60,68,62,67,60,74],
[75,76,68,0,68,69,71,71,70,65],
[79,71,70,62,0,66,70,72,64,64],
[74,72,62,61,64,0,67,66,63,66],
[74,71,68,59,60,63,0,78,62,66],
[62,65,63,59,58,64,52,0,50,61],
[73,79,70,60,66,67,68,80,0,63],
[66,78,56,65,66,64,64,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,75,84,74,67,92,46,47,71],
[46,0,47,64,64,55,94,55,55,44],
[55,83,0,64,66,46,81,44,67,80],
[46,66,66,0,55,48,104,48,46,56],
[56,66,64,75,0,58,92,56,66,71],
[63,75,84,82,72,0,104,55,73,63],
[38,36,49,26,38,26,0,25,29,45],
[84,75,86,82,74,75,105,0,65,102],
[83,75,63,84,64,57,101,65,0,72],
[59,86,50,74,59,67,85,28,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,66,64,64,69,68,63,75],
[61,0,69,68,71,69,81,68,73,57],
[62,61,0,76,76,77,78,69,71,68],
[64,62,54,0,81,74,75,64,62,65],
[66,59,54,49,0,66,71,65,64,60],
[66,61,53,56,64,0,65,58,59,64],
[61,49,52,55,59,65,0,58,52,54],
[62,62,61,66,65,72,72,0,56,67],
[67,57,59,68,66,71,78,74,0,61],
[55,73,62,65,70,66,76,63,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,61,74,74,67,60,68,64,72],
[76,0,72,77,64,77,60,76,83,73],
[69,58,0,75,65,70,76,78,64,66],
[56,53,55,0,62,49,54,64,62,63],
[56,66,65,68,0,55,53,67,67,70],
[63,53,60,81,75,0,52,71,77,61],
[70,70,54,76,77,78,0,61,68,63],
[62,54,52,66,63,59,69,0,60,66],
[66,47,66,68,63,53,62,70,0,70],
[58,57,64,67,60,69,67,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,67,55,64,57,57,61,68,53],
[72,0,73,57,61,61,64,56,65,58],
[63,57,0,61,61,52,59,54,62,51],
[75,73,69,0,64,65,74,66,73,58],
[66,69,69,66,0,65,60,68,59,63],
[73,69,78,65,65,0,67,62,71,59],
[73,66,71,56,70,63,0,61,71,60],
[69,74,76,64,62,68,69,0,71,65],
[62,65,68,57,71,59,59,59,0,55],
[77,72,79,72,67,71,70,65,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,72,63,76,68,60,60,69,69],
[78,0,85,63,72,66,66,78,92,65],
[58,45,0,73,52,59,67,59,73,62],
[67,67,57,0,62,60,54,52,67,65],
[54,58,78,68,0,78,77,52,83,75],
[62,64,71,70,52,0,53,54,69,60],
[70,64,63,76,53,77,0,74,88,64],
[70,52,71,78,78,76,56,0,79,68],
[61,38,57,63,47,61,42,51,0,57],
[61,65,68,65,55,70,66,62,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,64,74,65,66,59,67,59],
[70,0,56,61,62,61,64,59,60,60],
[67,74,0,72,71,73,65,69,66,66],
[66,69,58,0,65,72,62,61,68,58],
[56,68,59,65,0,64,65,52,64,52],
[65,69,57,58,66,0,57,51,63,58],
[64,66,65,68,65,73,0,51,69,61],
[71,71,61,69,78,79,79,0,70,62],
[63,70,64,62,66,67,61,60,0,70],
[71,70,64,72,78,72,69,68,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,66,74,70,68,70,58,73,75],
[56,0,50,64,66,58,55,60,62,67],
[64,80,0,81,63,75,69,72,67,75],
[56,66,49,0,61,60,60,64,60,61],
[60,64,67,69,0,66,58,54,79,70],
[62,72,55,70,64,0,62,57,66,61],
[60,75,61,70,72,68,0,67,78,77],
[72,70,58,66,76,73,63,0,63,68],
[57,68,63,70,51,64,52,67,0,56],
[55,63,55,69,60,69,53,62,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,74,69,72,65,70,72,60,85],
[76,0,75,74,70,61,72,65,61,84],
[56,55,0,68,52,61,71,69,50,72],
[61,56,62,0,62,55,64,64,58,69],
[58,60,78,68,0,69,73,56,67,84],
[65,69,69,75,61,0,73,82,52,79],
[60,58,59,66,57,57,0,58,59,76],
[58,65,61,66,74,48,72,0,58,79],
[70,69,80,72,63,78,71,72,0,76],
[45,46,58,61,46,51,54,51,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,46,64,66,72,63,70,60,67],
[64,0,64,68,66,65,68,57,59,65],
[84,66,0,68,63,75,68,63,63,68],
[66,62,62,0,68,73,57,57,64,64],
[64,64,67,62,0,75,65,63,63,60],
[58,65,55,57,55,0,55,53,60,61],
[67,62,62,73,65,75,0,68,69,63],
[60,73,67,73,67,77,62,0,65,66],
[70,71,67,66,67,70,61,65,0,69],
[63,65,62,66,70,69,67,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,64,66,60,60,67,71,62,66],
[69,0,67,66,63,62,66,73,67,68],
[66,63,0,73,67,68,76,79,67,62],
[64,64,57,0,59,59,63,71,53,56],
[70,67,63,71,0,63,66,79,62,72],
[70,68,62,71,67,0,73,77,62,66],
[63,64,54,67,64,57,0,74,63,65],
[59,57,51,59,51,53,56,0,58,62],
[68,63,63,77,68,68,67,72,0,65],
[64,62,68,74,58,64,65,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,70,65,80,70,68,70,69,63],
[57,0,58,64,70,59,57,70,58,54],
[60,72,0,55,68,56,65,73,63,58],
[65,66,75,0,71,66,62,76,70,72],
[50,60,62,59,0,57,53,59,60,55],
[60,71,74,64,73,0,59,72,65,54],
[62,73,65,68,77,71,0,69,67,59],
[60,60,57,54,71,58,61,0,55,52],
[61,72,67,60,70,65,63,75,0,59],
[67,76,72,58,75,76,71,78,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,49,53,56,54,64,53,55,65],
[84,0,53,63,79,72,74,70,65,81],
[81,77,0,69,69,63,71,78,70,93],
[77,67,61,0,66,66,79,76,72,96],
[74,51,61,64,0,56,61,67,62,85],
[76,58,67,64,74,0,82,78,68,83],
[66,56,59,51,69,48,0,63,52,77],
[77,60,52,54,63,52,67,0,68,86],
[75,65,60,58,68,62,78,62,0,74],
[65,49,37,34,45,47,53,44,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,62,59,54,62,52,58,59,50],
[73,0,62,52,53,65,66,65,60,53],
[68,68,0,68,68,64,67,68,70,62],
[71,78,62,0,66,76,63,59,60,56],
[76,77,62,64,0,73,76,65,71,68],
[68,65,66,54,57,0,49,54,66,51],
[78,64,63,67,54,81,0,71,69,55],
[72,65,62,71,65,76,59,0,61,65],
[71,70,60,70,59,64,61,69,0,63],
[80,77,68,74,62,79,75,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,73,68,74,69,66,66,70],
[64,0,67,60,57,71,61,53,65,55],
[68,63,0,66,64,76,70,64,72,62],
[57,70,64,0,68,79,71,58,69,61],
[62,73,66,62,0,67,72,66,63,66],
[56,59,54,51,63,0,61,53,60,57],
[61,69,60,59,58,69,0,56,60,60],
[64,77,66,72,64,77,74,0,70,64],
[64,65,58,61,67,70,70,60,0,54],
[60,75,68,69,64,73,70,66,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,58,77,75,63,65,79,67,70],
[59,0,60,70,63,66,75,68,51,71],
[72,70,0,78,88,63,84,80,70,78],
[53,60,52,0,60,54,54,69,59,61],
[55,67,42,70,0,54,69,78,60,74],
[67,64,67,76,76,0,70,75,65,78],
[65,55,46,76,61,60,0,74,58,66],
[51,62,50,61,52,55,56,0,55,57],
[63,79,60,71,70,65,72,75,0,84],
[60,59,52,69,56,52,64,73,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,70,65,59,57,60,61,68,61],
[74,0,82,65,73,74,77,68,76,76],
[60,48,0,61,62,65,68,68,65,65],
[65,65,69,0,60,65,77,69,68,73],
[71,57,68,70,0,74,70,67,77,79],
[73,56,65,65,56,0,57,62,67,69],
[70,53,62,53,60,73,0,67,60,69],
[69,62,62,61,63,68,63,0,67,69],
[62,54,65,62,53,63,70,63,0,63],
[69,54,65,57,51,61,61,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,70,70,70,73,74,64,74,64],
[55,0,60,72,54,57,71,53,45,52],
[60,70,0,66,61,60,66,66,64,58],
[60,58,64,0,56,50,63,57,59,59],
[60,76,69,74,0,73,77,54,71,65],
[57,73,70,80,57,0,74,62,57,73],
[56,59,64,67,53,56,0,44,52,54],
[66,77,64,73,76,68,86,0,64,67],
[56,85,66,71,59,73,78,66,0,72],
[66,78,72,71,65,57,76,63,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,65,78,65,62,59,68,65],
[68,0,64,69,76,67,68,63,72,70],
[67,66,0,57,79,63,63,70,67,63],
[65,61,73,0,75,71,70,66,66,77],
[52,54,51,55,0,56,52,54,57,62],
[65,63,67,59,74,0,70,63,72,64],
[68,62,67,60,78,60,0,68,62,67],
[71,67,60,64,76,67,62,0,67,61],
[62,58,63,64,73,58,68,63,0,70],
[65,60,67,53,68,66,63,69,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,66,65,65,63,59,57,64],
[72,0,72,70,74,73,67,68,64,76],
[69,58,0,67,76,71,67,76,70,70],
[64,60,63,0,66,73,58,67,61,67],
[65,56,54,64,0,64,54,65,57,59],
[65,57,59,57,66,0,57,62,60,62],
[67,63,63,72,76,73,0,68,72,73],
[71,62,54,63,65,68,62,0,68,62],
[73,66,60,69,73,70,58,62,0,69],
[66,54,60,63,71,68,57,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,68,53,52,59,56,66,68],
[66,0,63,62,50,59,69,65,63,72],
[63,67,0,64,55,57,64,68,75,82],
[62,68,66,0,64,64,69,71,69,79],
[77,80,75,66,0,62,67,68,69,76],
[78,71,73,66,68,0,67,65,64,81],
[71,61,66,61,63,63,0,70,59,67],
[74,65,62,59,62,65,60,0,70,63],
[64,67,55,61,61,66,71,60,0,78],
[62,58,48,51,54,49,63,67,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,63,60,74,64,63,69,58,42],
[74,0,74,53,75,70,80,81,61,61],
[67,56,0,76,82,63,76,81,63,63],
[70,77,54,0,74,62,71,75,62,42],
[56,55,48,56,0,71,63,65,39,54],
[66,60,67,68,59,0,44,74,47,59],
[67,50,54,59,67,86,0,71,67,67],
[61,49,49,55,65,56,59,0,57,55],
[72,69,67,68,91,83,63,73,0,73],
[88,69,67,88,76,71,63,75,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,74,58,63,70,59,64,76,69],
[66,0,62,61,69,61,64,63,71,70],
[56,68,0,58,53,59,56,64,71,65],
[72,69,72,0,58,66,58,60,66,75],
[67,61,77,72,0,58,63,58,65,72],
[60,69,71,64,72,0,65,63,71,75],
[71,66,74,72,67,65,0,66,70,72],
[66,67,66,70,72,67,64,0,76,72],
[54,59,59,64,65,59,60,54,0,54],
[61,60,65,55,58,55,58,58,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,76,48,68,51,61,51,59,65],
[70,0,67,59,54,64,68,48,63,51],
[54,63,0,51,59,50,62,47,53,60],
[82,71,79,0,61,69,73,68,64,75],
[62,76,71,69,0,49,67,62,66,77],
[79,66,80,61,81,0,75,68,64,93],
[69,62,68,57,63,55,0,46,66,59],
[79,82,83,62,68,62,84,0,69,77],
[71,67,77,66,64,66,64,61,0,75],
[65,79,70,55,53,37,71,53,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,71,74,63,72,74,72,74,66],
[63,0,58,57,56,65,61,67,70,58],
[59,72,0,62,65,68,69,61,72,68],
[56,73,68,0,59,75,69,71,72,68],
[67,74,65,71,0,74,73,68,73,65],
[58,65,62,55,56,0,64,61,62,60],
[56,69,61,61,57,66,0,62,63,62],
[58,63,69,59,62,69,68,0,71,58],
[56,60,58,58,57,68,67,59,0,63],
[64,72,62,62,65,70,68,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,62,78,85,77,80,71,77,68],
[42,0,24,34,44,44,38,22,40,42],
[68,106,0,65,76,66,60,74,79,73],
[52,96,65,0,87,62,58,46,69,68],
[45,86,54,43,0,62,62,49,66,53],
[53,86,64,68,68,0,78,58,69,86],
[50,92,70,72,68,52,0,57,56,71],
[59,108,56,84,81,72,73,0,85,80],
[53,90,51,61,64,61,74,45,0,63],
[62,88,57,62,77,44,59,50,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,52,72,60,54,61,62,51,64],
[84,0,76,80,63,71,78,76,63,69],
[78,54,0,64,72,66,67,70,64,61],
[58,50,66,0,68,56,66,63,67,59],
[70,67,58,62,0,67,62,59,64,61],
[76,59,64,74,63,0,68,65,55,67],
[69,52,63,64,68,62,0,66,62,58],
[68,54,60,67,71,65,64,0,55,59],
[79,67,66,63,66,75,68,75,0,66],
[66,61,69,71,69,63,72,71,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,76,44,55,74,64,57,67,66],
[74,0,75,64,77,84,78,71,75,64],
[54,55,0,47,51,56,51,76,63,60],
[86,66,83,0,59,76,66,80,74,71],
[75,53,79,71,0,77,68,65,75,61],
[56,46,74,54,53,0,59,55,67,52],
[66,52,79,64,62,71,0,75,71,58],
[73,59,54,50,65,75,55,0,77,71],
[63,55,67,56,55,63,59,53,0,49],
[64,66,70,59,69,78,72,59,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,67,65,75,67,65,67,66,68],
[67,0,67,73,85,64,66,64,70,72],
[63,63,0,58,73,74,61,61,67,72],
[65,57,72,0,79,72,54,62,71,63],
[55,45,57,51,0,62,53,52,60,54],
[63,66,56,58,68,0,53,67,59,62],
[65,64,69,76,77,77,0,62,74,68],
[63,66,69,68,78,63,68,0,68,67],
[64,60,63,59,70,71,56,62,0,66],
[62,58,58,67,76,68,62,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,57,75,72,69,74,61,84,73],
[52,0,63,57,71,62,62,52,67,66],
[73,67,0,68,71,71,65,72,68,69],
[55,73,62,0,73,67,65,70,67,68],
[58,59,59,57,0,64,67,57,67,55],
[61,68,59,63,66,0,62,63,72,73],
[56,68,65,65,63,68,0,57,78,66],
[69,78,58,60,73,67,73,0,83,68],
[46,63,62,63,63,58,52,47,0,59],
[57,64,61,62,75,57,64,62,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,64,68,67,83,65,74,69,72],
[68,0,65,70,73,76,69,70,78,69],
[66,65,0,77,71,81,74,63,72,77],
[62,60,53,0,71,70,61,60,59,63],
[63,57,59,59,0,72,58,57,58,64],
[47,54,49,60,58,0,53,59,60,64],
[65,61,56,69,72,77,0,72,75,74],
[56,60,67,70,73,71,58,0,63,77],
[61,52,58,71,72,70,55,67,0,64],
[58,61,53,67,66,66,56,53,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,63,68,77,86,72,67,65],
[63,0,78,71,65,70,73,66,69,64],
[63,52,0,61,62,74,61,55,52,54],
[67,59,69,0,57,67,60,67,51,58],
[62,65,68,73,0,79,72,69,58,60],
[53,60,56,63,51,0,52,42,49,52],
[44,57,69,70,58,78,0,69,63,54],
[58,64,75,63,61,88,61,0,55,58],
[63,61,78,79,72,81,67,75,0,72],
[65,66,76,72,70,78,76,72,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,58,69,79,57,66,62,51,60],
[74,0,70,72,85,64,69,74,72,55],
[72,60,0,68,82,64,65,70,64,53],
[61,58,62,0,67,57,62,70,61,53],
[51,45,48,63,0,53,36,52,50,45],
[73,66,66,73,77,0,55,71,67,51],
[64,61,65,68,94,75,0,79,73,66],
[68,56,60,60,78,59,51,0,64,56],
[79,58,66,69,80,63,57,66,0,59],
[70,75,77,77,85,79,64,74,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,68,69,67,64,60,64,65],
[61,0,68,70,58,71,61,58,73,66],
[62,62,0,63,64,63,62,55,62,64],
[62,60,67,0,71,63,67,67,69,82],
[61,72,66,59,0,66,66,58,65,73],
[63,59,67,67,64,0,68,62,63,68],
[66,69,68,63,64,62,0,71,64,64],
[70,72,75,63,72,68,59,0,68,68],
[66,57,68,61,65,67,66,62,0,64],
[65,64,66,48,57,62,66,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,56,79,59,90,76,64,77,66],
[54,0,56,68,80,86,64,67,81,63],
[74,74,0,65,66,70,45,66,55,52],
[51,62,65,0,65,84,57,72,69,54],
[71,50,64,65,0,77,79,59,72,35],
[40,44,60,46,53,0,39,47,61,38],
[54,66,85,73,51,91,0,64,68,54],
[66,63,64,58,71,83,66,0,73,49],
[53,49,75,61,58,69,62,57,0,46],
[64,67,78,76,95,92,76,81,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,66,67,67,75,69,70,59,69],
[56,0,54,54,61,68,67,57,57,69],
[64,76,0,71,65,76,74,74,59,80],
[63,76,59,0,60,75,68,69,62,67],
[63,69,65,70,0,70,70,68,54,67],
[55,62,54,55,60,0,69,56,61,62],
[61,63,56,62,60,61,0,60,55,65],
[60,73,56,61,62,74,70,0,65,70],
[71,73,71,68,76,69,75,65,0,77],
[61,61,50,63,63,68,65,60,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,43,42,86,86,65,43,86,86],
[44,0,44,64,86,64,43,65,65,86],
[87,86,0,64,86,86,108,43,86,86],
[88,66,66,0,87,87,88,44,109,109],
[44,44,44,43,0,65,44,22,65,65],
[44,66,44,43,65,0,87,65,87,66],
[65,87,22,42,86,43,0,22,65,65],
[87,65,87,86,108,65,108,0,87,87],
[44,65,44,21,65,43,65,43,0,65],
[44,44,44,21,65,64,65,43,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,20,57,38,57,38,57,38,39],
[74,0,75,76,75,75,94,112,57,76],
[110,55,0,93,55,76,75,75,93,94],
[73,54,37,0,54,55,74,112,92,55],
[92,55,75,76,0,94,75,112,75,58],
[73,55,54,75,36,0,75,93,93,75],
[92,36,55,56,55,55,0,112,73,56],
[73,18,55,18,18,37,18,0,18,19],
[92,73,37,38,55,37,57,112,0,37],
[91,54,36,75,72,55,74,111,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,66,67,62,60,66,67,59,55],
[55,0,63,65,51,65,71,63,61,61],
[64,67,0,65,62,69,72,64,67,66],
[63,65,65,0,59,74,67,68,59,53],
[68,79,68,71,0,69,75,71,68,58],
[70,65,61,56,61,0,69,65,59,54],
[64,59,58,63,55,61,0,66,51,56],
[63,67,66,62,59,65,64,0,63,56],
[71,69,63,71,62,71,79,67,0,62],
[75,69,64,77,72,76,74,74,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,80,65,70,66,76,69,68,66],
[60,0,64,68,59,64,74,67,57,61],
[50,66,0,59,56,62,63,60,54,54],
[65,62,71,0,61,62,62,59,62,52],
[60,71,74,69,0,70,70,70,67,64],
[64,66,68,68,60,0,66,63,61,58],
[54,56,67,68,60,64,0,63,57,58],
[61,63,70,71,60,67,67,0,62,62],
[62,73,76,68,63,69,73,68,0,55],
[64,69,76,78,66,72,72,68,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,55,65,62,51,62,65,62,63],
[66,0,52,59,61,50,60,62,53,57],
[75,78,0,68,71,71,71,77,65,76],
[65,71,62,0,71,60,64,60,64,67],
[68,69,59,59,0,55,64,68,66,60],
[79,80,59,70,75,0,68,76,68,68],
[68,70,59,66,66,62,0,70,60,66],
[65,68,53,70,62,54,60,0,57,68],
[68,77,65,66,64,62,70,73,0,79],
[67,73,54,63,70,62,64,62,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,61,73,76,60,65,56,68],
[57,0,53,57,71,58,45,55,44,45],
[61,77,0,66,73,83,69,88,65,59],
[69,73,64,0,60,70,61,69,59,65],
[57,59,57,70,0,48,48,67,53,51],
[54,72,47,60,82,0,42,71,53,51],
[70,85,61,69,82,88,0,80,76,69],
[65,75,42,61,63,59,50,0,57,56],
[74,86,65,71,77,77,54,73,0,50],
[62,85,71,65,79,79,61,74,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,77,25,52,25,103,77,51,26],
[79,0,130,52,79,52,78,104,78,53],
[53,0,0,27,53,52,52,26,0,53],
[105,78,103,0,79,78,78,78,26,79],
[78,51,77,51,0,51,77,51,25,77],
[105,78,78,52,79,0,78,78,52,52],
[27,52,78,52,53,52,0,78,52,27],
[53,26,104,52,79,52,52,0,26,53],
[79,52,130,104,105,78,78,104,0,79],
[104,77,77,51,53,78,103,77,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,57,74,61,70,63,56,63],
[70,0,67,65,73,63,70,69,70,86],
[67,63,0,69,68,66,68,63,68,78],
[73,65,61,0,74,57,67,57,61,67],
[56,57,62,56,0,63,61,59,56,58],
[69,67,64,73,67,0,68,66,64,69],
[60,60,62,63,69,62,0,69,64,72],
[67,61,67,73,71,64,61,0,57,77],
[74,60,62,69,74,66,66,73,0,68],
[67,44,52,63,72,61,58,53,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,72,69,88,54,69,59,80,71],
[54,0,70,56,78,77,62,86,105,95],
[58,60,0,84,64,61,86,67,67,94],
[61,74,46,0,78,74,71,73,80,76],
[42,52,66,52,0,61,73,56,68,71],
[76,53,69,56,69,0,82,58,75,82],
[61,68,44,59,57,48,0,65,59,70],
[71,44,63,57,74,72,65,0,83,89],
[50,25,63,50,62,55,71,47,0,80],
[59,35,36,54,59,48,60,41,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,74,41,51,93,57,75,76,64],
[59,0,77,60,65,78,52,54,60,60],
[56,53,0,60,53,70,56,61,69,60],
[89,70,70,0,64,79,59,95,71,70],
[79,65,77,66,0,96,81,84,77,65],
[37,52,60,51,34,0,52,63,87,44],
[73,78,74,71,49,78,0,72,97,71],
[55,76,69,35,46,67,58,0,59,59],
[54,70,61,59,53,43,33,71,0,70],
[66,70,70,60,65,86,59,71,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,69,58,72,65,60,63,55,51],
[59,0,73,65,64,73,63,68,60,57],
[61,57,0,62,63,68,56,61,61,56],
[72,65,68,0,67,72,60,59,58,65],
[58,66,67,63,0,70,65,49,62,59],
[65,57,62,58,60,0,60,51,64,58],
[70,67,74,70,65,70,0,62,64,70],
[67,62,69,71,81,79,68,0,66,60],
[75,70,69,72,68,66,66,64,0,62],
[79,73,74,65,71,72,60,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,64,60,66,69,57,71,55],
[65,0,67,61,69,68,71,69,66,69],
[67,63,0,64,64,65,74,67,72,63],
[66,69,66,0,70,77,68,61,70,64],
[70,61,66,60,0,72,73,71,64,69],
[64,62,65,53,58,0,62,63,65,60],
[61,59,56,62,57,68,0,64,68,65],
[73,61,63,69,59,67,66,0,70,66],
[59,64,58,60,66,65,62,60,0,58],
[75,61,67,66,61,70,65,64,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,52,76,52,60,53,63,52,65],
[71,0,42,63,50,55,59,62,49,65],
[78,88,0,86,69,56,67,79,68,87],
[54,67,44,0,56,64,69,48,47,68],
[78,80,61,74,0,54,65,68,71,62],
[70,75,74,66,76,0,81,61,57,81],
[77,71,63,61,65,49,0,79,70,76],
[67,68,51,82,62,69,51,0,52,72],
[78,81,62,83,59,73,60,78,0,83],
[65,65,43,62,68,49,54,58,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,67,81,58,57,71,78,68,92],
[77,0,66,77,59,64,50,73,80,72],
[63,64,0,67,69,43,51,62,63,68],
[49,53,63,0,41,53,58,56,55,58],
[72,71,61,89,0,68,55,80,77,93],
[73,66,87,77,62,0,69,79,71,75],
[59,80,79,72,75,61,0,68,69,72],
[52,57,68,74,50,51,62,0,66,66],
[62,50,67,75,53,59,61,64,0,74],
[38,58,62,72,37,55,58,64,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,60,51,66,74,82,56,72,64],
[62,0,61,58,58,74,69,52,70,55],
[70,69,0,73,72,72,79,58,68,81],
[79,72,57,0,69,83,75,68,59,78],
[64,72,58,61,0,75,74,67,60,85],
[56,56,58,47,55,0,60,58,56,48],
[48,61,51,55,56,70,0,52,61,53],
[74,78,72,62,63,72,78,0,67,60],
[58,60,62,71,70,74,69,63,0,73],
[66,75,49,52,45,82,77,70,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,53,74,66,66,72,72,72,65],
[52,0,66,67,49,55,47,54,65,43],
[77,64,0,70,58,64,76,61,50,44],
[56,63,60,0,47,57,59,47,58,50],
[64,81,72,83,0,66,66,59,66,50],
[64,75,66,73,64,0,81,72,58,52],
[58,83,54,71,64,49,0,58,61,40],
[58,76,69,83,71,58,72,0,63,47],
[58,65,80,72,64,72,69,67,0,37],
[65,87,86,80,80,78,90,83,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,73,68,86,87,75,69,65,64],
[65,0,74,72,66,57,59,67,52,73],
[57,56,0,63,78,77,66,73,61,69],
[62,58,67,0,69,60,66,63,64,70],
[44,64,52,61,0,65,52,37,59,58],
[43,73,53,70,65,0,68,65,69,70],
[55,71,64,64,78,62,0,65,64,73],
[61,63,57,67,93,65,65,0,72,69],
[65,78,69,66,71,61,66,58,0,60],
[66,57,61,60,72,60,57,61,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,64,71,82,78,84,81,83,78],
[46,0,50,42,64,71,63,58,47,51],
[66,80,0,43,57,59,62,57,58,62],
[59,88,87,0,68,75,54,60,71,80],
[48,66,73,62,0,52,58,70,71,57],
[52,59,71,55,78,0,63,69,62,70],
[46,67,68,76,72,67,0,64,74,51],
[49,72,73,70,60,61,66,0,71,65],
[47,83,72,59,59,68,56,59,0,60],
[52,79,68,50,73,60,79,65,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,74,69,70,73,69,56,79,68],
[62,0,58,66,57,62,62,52,66,61],
[56,72,0,59,61,60,69,56,67,65],
[61,64,71,0,71,71,63,59,73,67],
[60,73,69,59,0,64,59,58,67,60],
[57,68,70,59,66,0,75,65,69,69],
[61,68,61,67,71,55,0,59,69,66],
[74,78,74,71,72,65,71,0,71,73],
[51,64,63,57,63,61,61,59,0,56],
[62,69,65,63,70,61,64,57,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,56,64,56,49,62,53,55,60],
[64,0,55,67,63,52,64,54,64,64],
[74,75,0,71,59,59,59,66,69,73],
[66,63,59,0,57,57,66,58,45,59],
[74,67,71,73,0,53,69,61,64,61],
[81,78,71,73,77,0,79,63,70,69],
[68,66,71,64,61,51,0,57,56,63],
[77,76,64,72,69,67,73,0,59,68],
[75,66,61,85,66,60,74,71,0,60],
[70,66,57,71,69,61,67,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,84,94,101,97,65,79,86,85],
[77,0,80,83,99,87,67,80,73,64],
[46,50,0,76,77,72,66,58,59,57],
[36,47,54,0,74,59,45,55,40,47],
[29,31,53,56,0,62,40,48,44,39],
[33,43,58,71,68,0,51,56,55,49],
[65,63,64,85,90,79,0,69,65,60],
[51,50,72,75,82,74,61,0,69,52],
[44,57,71,90,86,75,65,61,0,50],
[45,66,73,83,91,81,70,78,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,60,52,60,48,67,60,60,77],
[64,0,65,59,68,63,56,71,66,70],
[70,65,0,65,62,67,70,67,72,75],
[78,71,65,0,62,53,65,68,66,77],
[70,62,68,68,0,56,69,72,72,65],
[82,67,63,77,74,0,68,76,72,74],
[63,74,60,65,61,62,0,70,64,69],
[70,59,63,62,58,54,60,0,65,67],
[70,64,58,64,58,58,66,65,0,68],
[53,60,55,53,65,56,61,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,48,51,49,69,55,61,74],
[64,0,56,40,49,58,54,54,44,70],
[64,74,0,71,56,71,74,78,62,75],
[82,90,59,0,69,86,96,88,72,83],
[79,81,74,61,0,74,87,66,56,70],
[81,72,59,44,56,0,73,72,45,77],
[61,76,56,34,43,57,0,58,41,54],
[75,76,52,42,64,58,72,0,54,62],
[69,86,68,58,74,85,89,76,0,88],
[56,60,55,47,60,53,76,68,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,65,70,80,77,74,68,68,77],
[55,0,57,60,59,59,62,53,57,57],
[65,73,0,60,64,69,65,71,60,60],
[60,70,70,0,72,70,82,57,66,68],
[50,71,66,58,0,68,75,54,58,62],
[53,71,61,60,62,0,64,55,69,62],
[56,68,65,48,55,66,0,61,58,58],
[62,77,59,73,76,75,69,0,70,74],
[62,73,70,64,72,61,72,60,0,64],
[53,73,70,62,68,68,72,56,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,51,61,78,76,48,50,51,44],
[72,0,70,66,81,72,59,72,63,64],
[79,60,0,78,77,71,62,55,63,56],
[69,64,52,0,72,64,61,53,62,52],
[52,49,53,58,0,64,50,46,54,54],
[54,58,59,66,66,0,55,51,55,57],
[82,71,68,69,80,75,0,67,69,65],
[80,58,75,77,84,79,63,0,75,57],
[79,67,67,68,76,75,61,55,0,65],
[86,66,74,78,76,73,65,73,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,55,64,60,58,55,65,53],
[70,0,53,59,61,61,64,62,66,53],
[70,77,0,58,67,69,64,73,67,59],
[75,71,72,0,69,73,61,70,74,71],
[66,69,63,61,0,71,65,62,60,57],
[70,69,61,57,59,0,65,52,59,52],
[72,66,66,69,65,65,0,72,66,67],
[75,68,57,60,68,78,58,0,66,61],
[65,64,63,56,70,71,64,64,0,62],
[77,77,71,59,73,78,63,69,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,59,62,70,67,71,65,63,52],
[63,0,63,65,64,64,70,59,64,58],
[71,67,0,66,62,67,70,66,58,53],
[68,65,64,0,59,63,72,60,55,57],
[60,66,68,71,0,61,64,53,62,52],
[63,66,63,67,69,0,71,54,61,47],
[59,60,60,58,66,59,0,60,60,49],
[65,71,64,70,77,76,70,0,70,66],
[67,66,72,75,68,69,70,60,0,59],
[78,72,77,73,78,83,81,64,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,76,66,58,67,65,60,71,80],
[66,0,72,68,58,62,58,68,70,82],
[54,58,0,56,54,52,42,47,66,62],
[64,62,74,0,67,65,64,66,70,70],
[72,72,76,63,0,61,66,61,70,79],
[63,68,78,65,69,0,60,76,76,78],
[65,72,88,66,64,70,0,71,69,70],
[70,62,83,64,69,54,59,0,70,74],
[59,60,64,60,60,54,61,60,0,69],
[50,48,68,60,51,52,60,56,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,66,52,62,65,66,62,66,57],
[75,0,70,72,64,76,75,73,75,77],
[64,60,0,53,64,68,62,60,59,61],
[78,58,77,0,66,76,76,70,68,73],
[68,66,66,64,0,68,60,68,58,63],
[65,54,62,54,62,0,70,59,62,67],
[64,55,68,54,70,60,0,66,60,56],
[68,57,70,60,62,71,64,0,56,67],
[64,55,71,62,72,68,70,74,0,71],
[73,53,69,57,67,63,74,63,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,70,64,72,70,70,58,68,52],
[80,0,79,81,72,70,79,64,76,67],
[60,51,0,62,71,72,91,67,63,56],
[66,49,68,0,61,69,71,56,57,52],
[58,58,59,69,0,65,79,54,67,58],
[60,60,58,61,65,0,77,57,71,54],
[60,51,39,59,51,53,0,50,53,40],
[72,66,63,74,76,73,80,0,63,64],
[62,54,67,73,63,59,77,67,0,49],
[78,63,74,78,72,76,90,66,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,54,67,65,59,63,54,72],
[71,0,65,66,72,65,64,62,75,69],
[65,65,0,62,68,72,67,69,63,77],
[76,64,68,0,71,68,66,70,68,81],
[63,58,62,59,0,60,56,56,73,69],
[65,65,58,62,70,0,60,60,64,74],
[71,66,63,64,74,70,0,66,69,77],
[67,68,61,60,74,70,64,0,63,73],
[76,55,67,62,57,66,61,67,0,75],
[58,61,53,49,61,56,53,57,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,73,74,67,71,63,72,67,74],
[62,0,71,73,65,77,68,68,69,70],
[57,59,0,68,51,61,59,64,54,65],
[56,57,62,0,49,57,53,59,58,62],
[63,65,79,81,0,71,68,64,65,75],
[59,53,69,73,59,0,57,62,60,69],
[67,62,71,77,62,73,0,64,64,72],
[58,62,66,71,66,68,66,0,59,71],
[63,61,76,72,65,70,66,71,0,69],
[56,60,65,68,55,61,58,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,53,68,60,66,62,70,65,48],
[76,0,64,83,78,64,67,82,75,68],
[77,66,0,78,84,56,69,70,64,65],
[62,47,52,0,65,47,58,61,56,53],
[70,52,46,65,0,59,78,64,56,53],
[64,66,74,83,71,0,80,80,66,62],
[68,63,61,72,52,50,0,77,67,56],
[60,48,60,69,66,50,53,0,63,64],
[65,55,66,74,74,64,63,67,0,59],
[82,62,65,77,77,68,74,66,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,54,60,55,62,48,70,60,50],
[66,0,61,51,43,65,58,62,53,46],
[76,69,0,61,61,66,54,58,70,68],
[70,79,69,0,46,52,46,67,65,54],
[75,87,69,84,0,58,61,68,66,65],
[68,65,64,78,72,0,61,81,67,64],
[82,72,76,84,69,69,0,80,69,54],
[60,68,72,63,62,49,50,0,65,46],
[70,77,60,65,64,63,61,65,0,45],
[80,84,62,76,65,66,76,84,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,75,71,64,53,66,80,77,63],
[59,0,45,55,70,39,57,64,70,50],
[55,85,0,77,65,64,69,69,80,53],
[59,75,53,0,66,51,59,80,80,46],
[66,60,65,64,0,50,59,77,72,56],
[77,91,66,79,80,0,71,83,78,65],
[64,73,61,71,71,59,0,71,78,65],
[50,66,61,50,53,47,59,0,58,50],
[53,60,50,50,58,52,52,72,0,43],
[67,80,77,84,74,65,65,80,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,77,104,51,51,77,104,77,77],
[53,0,51,79,78,77,104,78,77,26],
[53,79,0,53,52,78,79,52,104,79],
[26,51,77,0,25,51,77,78,51,77],
[79,52,78,105,0,77,105,130,77,78],
[79,53,52,79,53,0,79,104,51,52],
[53,26,51,53,25,51,0,52,51,52],
[26,52,78,52,0,26,78,0,52,78],
[53,53,26,79,53,79,79,78,0,79],
[53,104,51,53,52,78,78,52,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,68,56,73,65,69,75,67,76],
[56,0,64,60,62,59,64,65,55,53],
[62,66,0,69,70,61,66,75,70,70],
[74,70,61,0,72,66,67,80,67,67],
[57,68,60,58,0,66,64,64,60,62],
[65,71,69,64,64,0,66,66,69,66],
[61,66,64,63,66,64,0,67,67,73],
[55,65,55,50,66,64,63,0,59,60],
[63,75,60,63,70,61,63,71,0,69],
[54,77,60,63,68,64,57,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,73,69,71,66,62,72,78,68],
[65,0,69,70,66,73,64,68,66,71],
[57,61,0,59,60,69,57,70,59,67],
[61,60,71,0,59,63,52,64,63,62],
[59,64,70,71,0,68,70,64,68,64],
[64,57,61,67,62,0,47,67,64,60],
[68,66,73,78,60,83,0,78,70,76],
[58,62,60,66,66,63,52,0,64,59],
[52,64,71,67,62,66,60,66,0,63],
[62,59,63,68,66,70,54,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,71,72,72,71,64,67,62,66],
[68,0,77,71,56,64,58,71,61,65],
[59,53,0,71,52,52,60,66,64,63],
[58,59,59,0,49,66,63,66,65,57],
[58,74,78,81,0,77,78,76,77,82],
[59,66,78,64,53,0,63,71,65,62],
[66,72,70,67,52,67,0,72,65,63],
[63,59,64,64,54,59,58,0,62,62],
[68,69,66,65,53,65,65,68,0,69],
[64,65,67,73,48,68,67,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,74,62,65,88,80,57,73,77],
[53,0,65,68,57,63,67,65,58,75],
[56,65,0,64,46,67,70,50,57,60],
[68,62,66,0,51,74,75,60,50,64],
[65,73,84,79,0,79,94,76,64,81],
[42,67,63,56,51,0,55,48,58,70],
[50,63,60,55,36,75,0,59,55,56],
[73,65,80,70,54,82,71,0,61,78],
[57,72,73,80,66,72,75,69,0,74],
[53,55,70,66,49,60,74,52,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,66,60,70,61,75,62,67,65],
[53,0,63,56,66,56,65,60,58,49],
[64,67,0,60,74,61,67,63,66,55],
[70,74,70,0,74,64,82,66,71,62],
[60,64,56,56,0,59,69,53,63,54],
[69,74,69,66,71,0,68,67,63,55],
[55,65,63,48,61,62,0,58,63,59],
[68,70,67,64,77,63,72,0,68,60],
[63,72,64,59,67,67,67,62,0,61],
[65,81,75,68,76,75,71,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,56,69,64,60,91,60,88,86],
[68,0,63,59,64,55,74,58,86,74],
[74,67,0,54,65,79,72,61,95,73],
[61,71,76,0,65,62,71,71,82,71],
[66,66,65,65,0,67,72,64,71,67],
[70,75,51,68,63,0,76,66,102,78],
[39,56,58,59,58,54,0,54,67,50],
[70,72,69,59,66,64,76,0,87,78],
[42,44,35,48,59,28,63,43,0,45],
[44,56,57,59,63,52,80,52,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,58,62,63,72,46,62,56,90],
[65,0,54,53,55,69,59,55,51,78],
[72,76,0,68,68,88,65,64,62,66],
[68,77,62,0,59,76,79,71,51,69],
[67,75,62,71,0,64,65,64,71,87],
[58,61,42,54,66,0,52,49,53,67],
[84,71,65,51,65,78,0,75,68,74],
[68,75,66,59,66,81,55,0,68,78],
[74,79,68,79,59,77,62,62,0,76],
[40,52,64,61,43,63,56,52,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,73,93,87,72,61,86,84,74],
[50,0,69,63,74,69,63,60,61,60],
[57,61,0,68,79,58,50,64,60,63],
[37,67,62,0,77,58,58,66,62,64],
[43,56,51,53,0,50,45,55,62,62],
[58,61,72,72,80,0,69,69,78,65],
[69,67,80,72,85,61,0,79,74,68],
[44,70,66,64,75,61,51,0,69,55],
[46,69,70,68,68,52,56,61,0,64],
[56,70,67,66,68,65,62,75,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,98,96,96,64,98,66,98],
[66,0,66,66,66,66,66,34,34,66],
[66,64,0,98,130,96,96,98,66,98],
[32,64,32,0,64,64,32,66,66,98],
[34,64,0,66,0,32,64,66,34,98],
[34,64,34,66,98,0,66,66,34,66],
[66,64,34,98,66,64,0,98,66,98],
[32,96,32,64,64,64,32,0,0,64],
[64,96,64,64,96,96,64,130,0,96],
[32,64,32,32,32,64,32,66,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,53,52,73,70,62,59,51,67],
[73,0,71,67,86,75,77,69,59,76],
[77,59,0,64,71,74,76,63,66,75],
[78,63,66,0,76,76,71,55,67,69],
[57,44,59,54,0,64,62,51,51,70],
[60,55,56,54,66,0,70,56,53,65],
[68,53,54,59,68,60,0,51,59,64],
[71,61,67,75,79,74,79,0,62,82],
[79,71,64,63,79,77,71,68,0,81],
[63,54,55,61,60,65,66,48,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,60,67,67,67,50,63,76,57],
[64,0,53,65,76,73,61,58,72,56],
[70,77,0,53,68,74,58,65,70,70],
[63,65,77,0,73,68,66,67,74,59],
[63,54,62,57,0,64,54,66,63,59],
[63,57,56,62,66,0,47,53,69,52],
[80,69,72,64,76,83,0,78,87,63],
[67,72,65,63,64,77,52,0,64,62],
[54,58,60,56,67,61,43,66,0,61],
[73,74,60,71,71,78,67,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,54,63,58,58,61,78,70,70],
[57,0,66,67,54,52,61,57,64,57],
[76,64,0,71,63,70,59,69,65,64],
[67,63,59,0,54,51,59,61,66,61],
[72,76,67,76,0,65,60,63,71,72],
[72,78,60,79,65,0,72,56,69,73],
[69,69,71,71,70,58,0,71,53,59],
[52,73,61,69,67,74,59,0,67,63],
[60,66,65,64,59,61,77,63,0,60],
[60,73,66,69,58,57,71,67,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,75,69,71,60,73,67,77,71],
[57,0,65,69,62,61,59,63,62,68],
[55,65,0,69,54,59,61,58,70,60],
[61,61,61,0,64,56,54,66,64,62],
[59,68,76,66,0,68,59,67,79,68],
[70,69,71,74,62,0,59,64,75,77],
[57,71,69,76,71,71,0,68,69,72],
[63,67,72,64,63,66,62,0,71,66],
[53,68,60,66,51,55,61,59,0,64],
[59,62,70,68,62,53,58,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,71,67,81,66,70,77,65,75],
[63,0,72,65,81,67,73,68,67,76],
[59,58,0,62,69,57,62,54,51,73],
[63,65,68,0,71,72,78,68,62,81],
[49,49,61,59,0,51,60,63,67,72],
[64,63,73,58,79,0,77,65,64,81],
[60,57,68,52,70,53,0,68,68,64],
[53,62,76,62,67,65,62,0,69,70],
[65,63,79,68,63,66,62,61,0,73],
[55,54,57,49,58,49,66,60,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,49,50,54,65,62,69,62,64],
[66,0,74,64,72,68,82,77,73,64],
[81,56,0,73,60,68,77,71,59,72],
[80,66,57,0,71,79,82,74,71,72],
[76,58,70,59,0,78,78,75,72,72],
[65,62,62,51,52,0,63,70,62,72],
[68,48,53,48,52,67,0,68,60,56],
[61,53,59,56,55,60,62,0,64,57],
[68,57,71,59,58,68,70,66,0,63],
[66,66,58,58,58,58,74,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,73,80,73,64,75,57,82,65],
[44,0,48,48,44,55,60,54,70,64],
[57,82,0,65,66,72,65,76,85,69],
[50,82,65,0,80,61,70,60,72,57],
[57,86,64,50,0,73,64,52,67,58],
[66,75,58,69,57,0,62,66,68,58],
[55,70,65,60,66,68,0,67,61,64],
[73,76,54,70,78,64,63,0,75,60],
[48,60,45,58,63,62,69,55,0,58],
[65,66,61,73,72,72,66,70,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,68,60,56,51,65,62,56,71],
[59,0,66,69,57,56,59,61,61,69],
[62,64,0,58,43,54,61,62,52,65],
[70,61,72,0,55,61,63,70,61,69],
[74,73,87,75,0,60,66,77,63,82],
[79,74,76,69,70,0,67,79,65,74],
[65,71,69,67,64,63,0,65,66,72],
[68,69,68,60,53,51,65,0,56,63],
[74,69,78,69,67,65,64,74,0,81],
[59,61,65,61,48,56,58,67,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,59,62,62,60,68,58,66,61],
[70,0,63,76,69,69,75,67,75,73],
[71,67,0,67,61,68,69,62,68,64],
[68,54,63,0,56,61,59,59,64,59],
[68,61,69,74,0,66,67,69,67,66],
[70,61,62,69,64,0,68,56,72,66],
[62,55,61,71,63,62,0,63,66,59],
[72,63,68,71,61,74,67,0,70,70],
[64,55,62,66,63,58,64,60,0,62],
[69,57,66,71,64,64,71,60,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,66,62,79,62,65,65,59,66],
[70,0,71,75,72,73,76,65,70,77],
[64,59,0,69,78,69,66,63,64,73],
[68,55,61,0,66,62,57,58,62,65],
[51,58,52,64,0,60,65,52,64,63],
[68,57,61,68,70,0,62,64,66,70],
[65,54,64,73,65,68,0,67,69,67],
[65,65,67,72,78,66,63,0,71,72],
[71,60,66,68,66,64,61,59,0,74],
[64,53,57,65,67,60,63,58,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,69,71,76,66,76,70,60,69],
[49,0,64,65,76,55,62,62,53,58],
[61,66,0,66,67,64,63,68,57,55],
[59,65,64,0,67,63,62,68,63,59],
[54,54,63,63,0,57,56,62,59,54],
[64,75,66,67,73,0,66,74,64,60],
[54,68,67,68,74,64,0,69,57,56],
[60,68,62,62,68,56,61,0,55,54],
[70,77,73,67,71,66,73,75,0,65],
[61,72,75,71,76,70,74,76,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,62,61,74,69,68,79,52,77],
[56,0,64,50,58,61,58,52,68,67],
[68,66,0,64,70,64,68,66,44,74],
[69,80,66,0,56,79,80,74,73,83],
[56,72,60,74,0,77,60,67,68,71],
[61,69,66,51,53,0,67,58,51,82],
[62,72,62,50,70,63,0,63,62,69],
[51,78,64,56,63,72,67,0,63,75],
[78,62,86,57,62,79,68,67,0,74],
[53,63,56,47,59,48,61,55,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,63,57,69,58,56,68,74,57],
[58,0,59,64,66,57,56,55,68,55],
[67,71,0,65,63,57,59,62,64,63],
[73,66,65,0,62,60,63,64,59,56],
[61,64,67,68,0,56,66,62,66,62],
[72,73,73,70,74,0,72,63,74,67],
[74,74,71,67,64,58,0,61,76,62],
[62,75,68,66,68,67,69,0,63,64],
[56,62,66,71,64,56,54,67,0,56],
[73,75,67,74,68,63,68,66,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,74,60,71,71,66,80,84,75],
[62,0,82,69,75,77,74,78,92,66],
[56,48,0,47,56,60,60,50,68,51],
[70,61,83,0,78,77,79,71,68,65],
[59,55,74,52,0,71,54,48,61,55],
[59,53,70,53,59,0,61,64,48,43],
[64,56,70,51,76,69,0,72,73,64],
[50,52,80,59,82,66,58,0,74,59],
[46,38,62,62,69,82,57,56,0,51],
[55,64,79,65,75,87,66,71,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,74,64,68,79,61,64,71,68],
[64,0,80,61,67,76,73,68,68,60],
[56,50,0,57,54,71,61,57,60,55],
[66,69,73,0,69,76,59,65,89,71],
[62,63,76,61,0,66,63,67,80,68],
[51,54,59,54,64,0,63,62,67,58],
[69,57,69,71,67,67,0,65,73,69],
[66,62,73,65,63,68,65,0,67,66],
[59,62,70,41,50,63,57,63,0,66],
[62,70,75,59,62,72,61,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,97,130,97,97,65,97,96,96],
[33,0,65,67,98,33,98,96,64,33],
[33,65,0,67,33,33,67,65,33,33],
[0,63,63,0,31,63,31,63,96,32],
[33,32,97,99,0,65,98,63,96,65],
[33,97,97,67,65,0,98,97,64,33],
[65,32,63,99,32,32,0,32,96,65],
[33,34,65,67,67,33,98,0,64,33],
[34,66,97,34,34,66,34,66,0,66],
[34,97,97,98,65,97,65,97,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,71,74,48,56,55,77,70,68],
[59,0,75,57,55,47,43,54,52,58],
[59,55,0,57,56,64,42,71,55,58],
[56,73,73,0,57,64,53,77,67,57],
[82,75,74,73,0,55,70,75,64,61],
[74,83,66,66,75,0,54,80,67,74],
[75,87,88,77,60,76,0,77,72,65],
[53,76,59,53,55,50,53,0,59,56],
[60,78,75,63,66,63,58,71,0,55],
[62,72,72,73,69,56,65,74,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,59,86,55,71,81,64,64,79],
[70,0,77,80,67,70,91,84,62,74],
[71,53,0,69,67,71,78,68,73,80],
[44,50,61,0,54,59,74,60,58,79],
[75,63,63,76,0,78,79,82,72,81],
[59,60,59,71,52,0,74,65,70,71],
[49,39,52,56,51,56,0,53,47,61],
[66,46,62,70,48,65,77,0,49,65],
[66,68,57,72,58,60,83,81,0,83],
[51,56,50,51,49,59,69,65,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,70,84,71,73,61,63,68,71],
[66,0,70,71,69,73,66,64,74,67],
[60,60,0,78,63,62,55,74,72,70],
[46,59,52,0,62,52,45,56,65,50],
[59,61,67,68,0,70,56,60,75,65],
[57,57,68,78,60,0,57,62,77,63],
[69,64,75,85,74,73,0,75,72,72],
[67,66,56,74,70,68,55,0,68,55],
[62,56,58,65,55,53,58,62,0,61],
[59,63,60,80,65,67,58,75,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,61,54,54,55,69,56,58,60],
[63,0,58,60,53,60,62,61,61,51],
[69,72,0,60,58,77,62,68,65,68],
[76,70,70,0,72,63,72,60,73,75],
[76,77,72,58,0,72,62,54,59,66],
[75,70,53,67,58,0,57,49,61,60],
[61,68,68,58,68,73,0,56,67,80],
[74,69,62,70,76,81,74,0,75,72],
[72,69,65,57,71,69,63,55,0,66],
[70,79,62,55,64,70,50,58,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,57,74,53,77,71,63,65,59],
[60,0,65,67,64,64,70,61,60,66],
[73,65,0,74,63,69,68,64,64,71],
[56,63,56,0,57,61,68,59,64,58],
[77,66,67,73,0,79,76,63,72,72],
[53,66,61,69,51,0,64,59,64,61],
[59,60,62,62,54,66,0,64,58,59],
[67,69,66,71,67,71,66,0,63,60],
[65,70,66,66,58,66,72,67,0,66],
[71,64,59,72,58,69,71,70,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,58,57,61,60,61,61,73,73],
[82,0,77,64,58,60,69,53,61,86],
[72,53,0,63,61,57,68,51,54,71],
[73,66,67,0,60,67,67,66,67,70],
[69,72,69,70,0,61,58,66,72,74],
[70,70,73,63,69,0,66,57,65,79],
[69,61,62,63,72,64,0,74,73,87],
[69,77,79,64,64,73,56,0,78,88],
[57,69,76,63,58,65,57,52,0,61],
[57,44,59,60,56,51,43,42,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,79,72,74,65,59,82,73,64],
[64,0,70,58,67,65,59,63,79,58],
[51,60,0,57,56,52,53,62,59,44],
[58,72,73,0,60,65,57,71,61,67],
[56,63,74,70,0,65,70,71,65,58],
[65,65,78,65,65,0,69,72,66,55],
[71,71,77,73,60,61,0,82,72,59],
[48,67,68,59,59,58,48,0,53,50],
[57,51,71,69,65,64,58,77,0,54],
[66,72,86,63,72,75,71,80,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,84,79,68,63,67,68,74,77],
[55,0,66,60,65,58,49,48,69,65],
[46,64,0,58,64,37,46,36,66,55],
[51,70,72,0,53,52,52,61,63,74],
[62,65,66,77,0,64,56,51,69,67],
[67,72,93,78,66,0,63,68,68,80],
[63,81,84,78,74,67,0,57,69,82],
[62,82,94,69,79,62,73,0,70,75],
[56,61,64,67,61,62,61,60,0,77],
[53,65,75,56,63,50,48,55,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,68,62,74,67,71,57,62,68],
[76,0,80,68,81,62,77,63,65,74],
[62,50,0,57,73,59,76,52,61,74],
[68,62,73,0,76,71,80,59,67,72],
[56,49,57,54,0,55,70,54,49,63],
[63,68,71,59,75,0,65,58,72,78],
[59,53,54,50,60,65,0,53,57,68],
[73,67,78,71,76,72,77,0,62,82],
[68,65,69,63,81,58,73,68,0,64],
[62,56,56,58,67,52,62,48,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,88,62,72,69,68,63,63],
[68,0,64,80,74,72,76,67,68,66],
[67,66,0,80,63,62,67,71,62,65],
[42,50,50,0,47,56,59,51,45,48],
[68,56,67,83,0,58,73,69,55,58],
[58,58,68,74,72,0,74,67,69,62],
[61,54,63,71,57,56,0,73,61,60],
[62,63,59,79,61,63,57,0,60,56],
[67,62,68,85,75,61,69,70,0,59],
[67,64,65,82,72,68,70,74,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,73,75,80,68,62,62,74,65],
[63,0,77,73,78,73,71,62,69,66],
[57,53,0,74,67,61,61,49,57,64],
[55,57,56,0,64,61,59,54,50,58],
[50,52,63,66,0,54,61,54,57,59],
[62,57,69,69,76,0,60,64,66,64],
[68,59,69,71,69,70,0,55,70,62],
[68,68,81,76,76,66,75,0,65,73],
[56,61,73,80,73,64,60,65,0,64],
[65,64,66,72,71,66,68,57,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,68,47,54,65,78,67,64,56],
[52,0,58,50,55,53,68,58,51,64],
[62,72,0,67,56,68,83,77,58,66],
[83,80,63,0,58,67,72,62,62,56],
[76,75,74,72,0,65,85,71,69,63],
[65,77,62,63,65,0,74,54,69,70],
[52,62,47,58,45,56,0,59,45,49],
[63,72,53,68,59,76,71,0,58,56],
[66,79,72,68,61,61,85,72,0,59],
[74,66,64,74,67,60,81,74,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,56,74,61,73,55,62,65,72],
[57,0,58,69,55,64,60,73,69,77],
[74,72,0,87,64,75,64,78,59,81],
[56,61,43,0,46,50,56,52,53,58],
[69,75,66,84,0,60,65,73,71,71],
[57,66,55,80,70,0,76,62,70,68],
[75,70,66,74,65,54,0,61,61,78],
[68,57,52,78,57,68,69,0,51,78],
[65,61,71,77,59,60,69,79,0,74],
[58,53,49,72,59,62,52,52,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,60,67,69,67,66,60,72,68],
[67,0,68,75,79,68,71,75,63,73],
[70,62,0,80,75,71,68,73,71,70],
[63,55,50,0,71,71,60,67,71,69],
[61,51,55,59,0,70,61,65,75,68],
[63,62,59,59,60,0,74,75,56,73],
[64,59,62,70,69,56,0,69,66,71],
[70,55,57,63,65,55,61,0,56,65],
[58,67,59,59,55,74,64,74,0,73],
[62,57,60,61,62,57,59,65,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,70,57,63,66,71,67,75,76],
[53,0,59,62,65,53,60,54,63,64],
[60,71,0,56,62,66,67,57,64,68],
[73,68,74,0,79,71,77,62,74,73],
[67,65,68,51,0,69,71,59,64,72],
[64,77,64,59,61,0,72,66,69,67],
[59,70,63,53,59,58,0,58,58,64],
[63,76,73,68,71,64,72,0,72,68],
[55,67,66,56,66,61,72,58,0,67],
[54,66,62,57,58,63,66,62,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,63,76,62,73,47,74,76,73],
[60,0,66,70,58,64,57,77,59,64],
[67,64,0,67,66,74,60,78,76,75],
[54,60,63,0,57,74,63,82,71,65],
[68,72,64,73,0,74,58,72,80,63],
[57,66,56,56,56,0,55,77,66,65],
[83,73,70,67,72,75,0,78,81,61],
[56,53,52,48,58,53,52,0,63,46],
[54,71,54,59,50,64,49,67,0,62],
[57,66,55,65,67,65,69,84,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,76,71,66,54,59,60,56,57],
[63,0,71,63,67,45,56,64,59,48],
[54,59,0,58,57,40,49,59,54,45],
[59,67,72,0,63,47,59,71,52,48],
[64,63,73,67,0,55,57,68,59,59],
[76,85,90,83,75,0,65,76,68,68],
[71,74,81,71,73,65,0,73,66,64],
[70,66,71,59,62,54,57,0,59,52],
[74,71,76,78,71,62,64,71,0,59],
[73,82,85,82,71,62,66,78,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,74,70,57,60,61,51,52,55],
[67,0,76,58,57,63,62,60,60,59],
[56,54,0,59,52,61,56,53,57,64],
[60,72,71,0,53,73,71,55,62,58],
[73,73,78,77,0,69,78,72,59,67],
[70,67,69,57,61,0,68,69,59,65],
[69,68,74,59,52,62,0,66,66,65],
[79,70,77,75,58,61,64,0,64,70],
[78,70,73,68,71,71,64,66,0,72],
[75,71,66,72,63,65,65,60,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,59,45,62,59,54,66,50,46],
[86,0,71,70,64,85,75,72,78,70],
[71,59,0,60,62,64,59,69,66,62],
[85,60,70,0,61,66,67,68,59,59],
[68,66,68,69,0,67,57,60,61,63],
[71,45,66,64,63,0,67,54,56,53],
[76,55,71,63,73,63,0,58,61,51],
[64,58,61,62,70,76,72,0,56,61],
[80,52,64,71,69,74,69,74,0,58],
[84,60,68,71,67,77,79,69,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,64,64,73,67,68,69,68],
[67,0,64,59,61,64,71,67,65,59],
[66,66,0,62,61,77,67,69,71,69],
[66,71,68,0,66,67,65,64,65,61],
[66,69,69,64,0,70,63,68,71,63],
[57,66,53,63,60,0,69,64,60,62],
[63,59,63,65,67,61,0,65,67,64],
[62,63,61,66,62,66,65,0,68,65],
[61,65,59,65,59,70,63,62,0,63],
[62,71,61,69,67,68,66,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,70,81,79,60,61,59,71],
[70,0,80,60,81,60,50,60,50,91],
[70,50,0,39,51,58,49,60,49,69],
[60,70,91,0,81,110,80,62,71,81],
[49,49,79,49,0,59,39,51,58,80],
[51,70,72,20,71,0,81,41,41,91],
[70,80,81,50,91,49,0,71,60,90],
[69,70,70,68,79,89,59,0,59,90],
[71,80,81,59,72,89,70,71,0,101],
[59,39,61,49,50,39,40,40,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,68,63,66,61,63,53,58],
[66,0,73,69,63,75,59,67,69,67],
[64,57,0,63,62,70,54,56,58,62],
[62,61,67,0,60,67,52,68,53,57],
[67,67,68,70,0,75,60,72,68,66],
[64,55,60,63,55,0,55,64,60,57],
[69,71,76,78,70,75,0,77,71,65],
[67,63,74,62,58,66,53,0,59,62],
[77,61,72,77,62,70,59,71,0,60],
[72,63,68,73,64,73,65,68,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,81,82,107,67,84,63,74,56],
[49,0,75,64,89,41,62,55,81,65],
[49,55,0,72,96,33,62,71,78,64],
[48,66,58,0,82,56,68,70,41,58],
[23,41,34,48,0,40,35,38,58,41],
[63,89,97,74,90,0,82,88,74,65],
[46,68,68,62,95,48,0,53,61,64],
[67,75,59,60,92,42,77,0,60,68],
[56,49,52,89,72,56,69,70,0,72],
[74,65,66,72,89,65,66,62,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,49,64,36,62,56,58,51,60],
[75,0,62,50,61,73,79,77,60,58],
[81,68,0,53,59,81,77,67,68,66],
[66,80,77,0,68,79,69,85,84,61],
[94,69,71,62,0,93,96,73,75,76],
[68,57,49,51,37,0,73,60,49,50],
[74,51,53,61,34,57,0,61,47,51],
[72,53,63,45,57,70,69,0,58,59],
[79,70,62,46,55,81,83,72,0,73],
[70,72,64,69,54,80,79,71,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,74,71,62,58,68,68,69,64],
[69,0,68,73,71,65,63,76,62,69],
[56,62,0,65,66,53,61,65,62,52],
[59,57,65,0,65,63,58,72,67,57],
[68,59,64,65,0,51,57,74,64,55],
[72,65,77,67,79,0,54,80,77,63],
[62,67,69,72,73,76,0,77,68,66],
[62,54,65,58,56,50,53,0,63,57],
[61,68,68,63,66,53,62,67,0,48],
[66,61,78,73,75,67,64,73,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,73,67,69,73,65,83,71,70],
[57,0,66,60,63,59,55,73,65,63],
[57,64,0,65,61,55,62,65,63,68],
[63,70,65,0,70,58,56,73,61,63],
[61,67,69,60,0,53,61,71,67,63],
[57,71,75,72,77,0,63,74,70,64],
[65,75,68,74,69,67,0,73,66,69],
[47,57,65,57,59,56,57,0,60,63],
[59,65,67,69,63,60,64,70,0,65],
[60,67,62,67,67,66,61,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,73,72,71,70,63,69,74,71],
[60,0,69,72,71,62,67,72,62,69],
[57,61,0,59,68,57,60,52,60,64],
[58,58,71,0,65,59,62,62,66,71],
[59,59,62,65,0,63,58,59,61,67],
[60,68,73,71,67,0,63,59,60,63],
[67,63,70,68,72,67,0,68,67,73],
[61,58,78,68,71,71,62,0,62,66],
[56,68,70,64,69,70,63,68,0,61],
[59,61,66,59,63,67,57,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,58,66,53,64,64,64,69,62],
[67,0,63,76,56,71,76,71,77,78],
[72,67,0,77,74,72,76,61,65,80],
[64,54,53,0,56,62,59,41,54,69],
[77,74,56,74,0,74,64,64,59,81],
[66,59,58,68,56,0,63,54,54,80],
[66,54,54,71,66,67,0,64,59,76],
[66,59,69,89,66,76,66,0,72,76],
[61,53,65,76,71,76,71,58,0,77],
[68,52,50,61,49,50,54,54,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,66,63,52,55,71,74,60,64],
[70,0,59,76,61,61,62,63,61,65],
[64,71,0,70,57,59,77,69,75,67],
[67,54,60,0,58,55,62,72,54,57],
[78,69,73,72,0,70,77,79,76,63],
[75,69,71,75,60,0,69,78,77,72],
[59,68,53,68,53,61,0,65,49,73],
[56,67,61,58,51,52,65,0,64,63],
[70,69,55,76,54,53,81,66,0,68],
[66,65,63,73,67,58,57,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,73,64,58,75,72,62,76,66],
[42,0,67,62,58,71,70,65,66,52],
[57,63,0,58,65,77,60,64,67,58],
[66,68,72,0,59,68,73,61,73,62],
[72,72,65,71,0,73,72,60,71,64],
[55,59,53,62,57,0,58,48,61,59],
[58,60,70,57,58,72,0,56,67,51],
[68,65,66,69,70,82,74,0,71,68],
[54,64,63,57,59,69,63,59,0,65],
[64,78,72,68,66,71,79,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,56,62,60,65,84,76,69,68],
[69,0,59,75,64,63,84,73,68,78],
[74,71,0,84,71,64,82,74,70,80],
[68,55,46,0,61,61,79,46,52,57],
[70,66,59,69,0,66,82,60,70,72],
[65,67,66,69,64,0,86,64,69,73],
[46,46,48,51,48,44,0,51,66,57],
[54,57,56,84,70,66,79,0,62,71],
[61,62,60,78,60,61,64,68,0,61],
[62,52,50,73,58,57,73,59,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,59,84,67,62,76,74,60,71],
[75,0,68,88,62,79,71,75,72,83],
[71,62,0,72,62,64,57,70,76,50],
[46,42,58,0,54,44,63,59,69,62],
[63,68,68,76,0,69,60,65,77,67],
[68,51,66,86,61,0,68,63,74,56],
[54,59,73,67,70,62,0,62,67,61],
[56,55,60,71,65,67,68,0,64,69],
[70,58,54,61,53,56,63,66,0,62],
[59,47,80,68,63,74,69,61,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,65,67,67,62,61,60,60,75],
[75,0,76,73,71,70,74,72,65,86],
[65,54,0,62,58,60,62,60,58,68],
[63,57,68,0,65,65,55,64,63,72],
[63,59,72,65,0,69,63,63,61,71],
[68,60,70,65,61,0,54,55,58,71],
[69,56,68,75,67,76,0,71,67,81],
[70,58,70,66,67,75,59,0,65,74],
[70,65,72,67,69,72,63,65,0,78],
[55,44,62,58,59,59,49,56,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,70,58,45,69,64,76,63,52],
[42,0,65,53,31,33,32,45,56,47],
[60,65,0,71,67,72,73,71,67,73],
[72,77,59,0,69,56,71,59,70,68],
[85,99,63,61,0,54,84,69,57,81],
[61,97,58,74,76,0,52,72,58,65],
[66,98,57,59,46,78,0,77,56,80],
[54,85,59,71,61,58,53,0,58,66],
[67,74,63,60,73,72,74,72,0,71],
[78,83,57,62,49,65,50,64,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,58,65,63,66,59,53,56,46],
[69,0,60,72,82,67,56,63,57,62],
[72,70,0,72,78,71,64,61,65,69],
[65,58,58,0,71,67,61,60,55,61],
[67,48,52,59,0,56,48,49,50,58],
[64,63,59,63,74,0,58,62,63,65],
[71,74,66,69,82,72,0,64,64,71],
[77,67,69,70,81,68,66,0,69,62],
[74,73,65,75,80,67,66,61,0,62],
[84,68,61,69,72,65,59,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,53,65,55,71,65,70,65,55],
[66,0,55,63,61,68,66,71,61,55],
[77,75,0,75,62,76,84,76,77,64],
[65,67,55,0,50,67,70,62,72,66],
[75,69,68,80,0,69,83,78,75,64],
[59,62,54,63,61,0,65,70,64,66],
[65,64,46,60,47,65,0,65,69,56],
[60,59,54,68,52,60,65,0,64,59],
[65,69,53,58,55,66,61,66,0,63],
[75,75,66,64,66,64,74,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,79,67,56,57,59,55,61,54],
[69,0,67,74,56,56,57,62,57,53],
[51,63,0,65,54,56,50,52,61,50],
[63,56,65,0,47,57,59,65,62,53],
[74,74,76,83,0,66,67,67,66,58],
[73,74,74,73,64,0,68,62,72,67],
[71,73,80,71,63,62,0,74,75,64],
[75,68,78,65,63,68,56,0,64,57],
[69,73,69,68,64,58,55,66,0,63],
[76,77,80,77,72,63,66,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,63,77,52,67,70,70,55],
[60,0,65,60,68,61,59,71,64,58],
[64,65,0,66,68,56,65,70,66,56],
[67,70,64,0,79,69,68,67,69,70],
[53,62,62,51,0,48,55,72,58,50],
[78,69,74,61,82,0,68,69,64,64],
[63,71,65,62,75,62,0,68,72,68],
[60,59,60,63,58,61,62,0,61,65],
[60,66,64,61,72,66,58,69,0,55],
[75,72,74,60,80,66,62,65,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,66,52,62,59,66,51,58,46],
[55,0,58,63,58,47,47,31,64,44],
[64,72,0,57,74,56,62,56,70,56],
[78,67,73,0,78,70,57,64,54,46],
[68,72,56,52,0,62,71,60,70,42],
[71,83,74,60,68,0,69,69,59,61],
[64,83,68,73,59,61,0,64,76,51],
[79,99,74,66,70,61,66,0,80,67],
[72,66,60,76,60,71,54,50,0,51],
[84,86,74,84,88,69,79,63,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,62,61,66,67,67,69,62,52],
[72,0,74,76,66,79,71,76,59,59],
[68,56,0,68,60,70,78,75,64,59],
[69,54,62,0,75,67,68,70,61,67],
[64,64,70,55,0,75,70,58,59,62],
[63,51,60,63,55,0,60,62,66,52],
[63,59,52,62,60,70,0,63,54,50],
[61,54,55,60,72,68,67,0,51,49],
[68,71,66,69,71,64,76,79,0,68],
[78,71,71,63,68,78,80,81,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,76,76,64,63,67,65,74],
[60,0,51,65,65,55,59,65,69,57],
[64,79,0,70,74,70,66,68,72,73],
[54,65,60,0,64,52,56,68,67,61],
[54,65,56,66,0,57,61,66,61,61],
[66,75,60,78,73,0,61,74,72,76],
[67,71,64,74,69,69,0,66,70,70],
[63,65,62,62,64,56,64,0,65,62],
[65,61,58,63,69,58,60,65,0,60],
[56,73,57,69,69,54,60,68,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,54,73,62,60,58,53,57,63],
[61,0,67,73,70,56,68,53,61,58],
[76,63,0,74,65,60,66,70,62,64],
[57,57,56,0,49,45,54,49,56,55],
[68,60,65,81,0,61,64,53,57,62],
[70,74,70,85,69,0,79,72,63,68],
[72,62,64,76,66,51,0,57,61,60],
[77,77,60,81,77,58,73,0,61,71],
[73,69,68,74,73,67,69,69,0,64],
[67,72,66,75,68,62,70,59,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,69,68,79,73,74,72,72],
[66,0,77,67,83,73,72,64,75,71],
[61,53,0,48,60,63,76,61,70,75],
[61,63,82,0,76,69,78,64,67,77],
[62,47,70,54,0,60,71,54,56,80],
[51,57,67,61,70,0,64,56,72,68],
[57,58,54,52,59,66,0,61,59,76],
[56,66,69,66,76,74,69,0,71,74],
[58,55,60,63,74,58,71,59,0,79],
[58,59,55,53,50,62,54,56,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,64,67,58,61,62,65,57,67],
[72,0,71,72,65,75,71,67,62,75],
[66,59,0,63,58,62,62,55,61,58],
[63,58,67,0,65,66,63,64,58,73],
[72,65,72,65,0,61,68,57,60,67],
[69,55,68,64,69,0,64,53,63,62],
[68,59,68,67,62,66,0,64,59,66],
[65,63,75,66,73,77,66,0,65,72],
[73,68,69,72,70,67,71,65,0,70],
[63,55,72,57,63,68,64,58,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,63,69,44,72,57,75,83,59],
[58,0,72,62,32,66,54,71,66,74],
[67,58,0,65,42,71,71,73,83,69],
[61,68,65,0,64,62,79,71,85,74],
[86,98,88,66,0,65,76,71,88,73],
[58,64,59,68,65,0,67,60,71,63],
[73,76,59,51,54,63,0,61,62,51],
[55,59,57,59,59,70,69,0,71,59],
[47,64,47,45,42,59,68,59,0,44],
[71,56,61,56,57,67,79,71,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,64,56,62,72,86,57,68,57],
[70,0,85,79,69,79,77,59,77,86],
[66,45,0,52,83,83,81,51,70,58],
[74,51,78,0,68,68,66,54,72,53],
[68,61,47,62,0,59,66,68,84,57],
[58,51,47,62,71,0,72,46,61,58],
[44,53,49,64,64,58,0,54,54,78],
[73,71,79,76,62,84,76,0,71,81],
[62,53,60,58,46,69,76,59,0,56],
[73,44,72,77,73,72,52,49,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,58,66,56,68,59,54,70,62],
[73,0,67,69,77,81,63,66,59,70],
[72,63,0,69,75,78,71,68,60,65],
[64,61,61,0,62,69,66,58,59,55],
[74,53,55,68,0,67,62,61,57,47],
[62,49,52,61,63,0,67,62,47,58],
[71,67,59,64,68,63,0,63,51,54],
[76,64,62,72,69,68,67,0,66,72],
[60,71,70,71,73,83,79,64,0,67],
[68,60,65,75,83,72,76,58,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,61,58,58,62,60,61,59,67],
[54,0,64,61,63,55,60,60,60,64],
[69,66,0,68,64,69,66,70,67,71],
[72,69,62,0,70,66,72,69,54,70],
[72,67,66,60,0,66,62,66,60,70],
[68,75,61,64,64,0,75,68,69,74],
[70,70,64,58,68,55,0,65,67,72],
[69,70,60,61,64,62,65,0,62,74],
[71,70,63,76,70,61,63,68,0,72],
[63,66,59,60,60,56,58,56,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,54,60,51,53,51,48,54,50],
[77,0,70,72,67,56,66,63,63,68],
[76,60,0,62,71,67,64,54,67,61],
[70,58,68,0,60,63,57,57,65,62],
[79,63,59,70,0,67,72,67,67,68],
[77,74,63,67,63,0,64,57,60,64],
[79,64,66,73,58,66,0,66,74,67],
[82,67,76,73,63,73,64,0,60,65],
[76,67,63,65,63,70,56,70,0,62],
[80,62,69,68,62,66,63,65,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,75,65,70,60,57,85,65,74],
[66,0,61,54,54,56,62,82,72,66],
[55,69,0,41,61,50,44,66,63,61],
[65,76,89,0,66,65,63,88,76,69],
[60,76,69,64,0,68,76,78,66,61],
[70,74,80,65,62,0,55,84,70,73],
[73,68,86,67,54,75,0,95,67,70],
[45,48,64,42,52,46,35,0,58,45],
[65,58,67,54,64,60,63,72,0,66],
[56,64,69,61,69,57,60,85,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,52,64,74,66,53,59,54,72],
[75,0,80,86,70,66,65,72,62,73],
[78,50,0,67,72,77,60,64,62,75],
[66,44,63,0,69,62,64,72,69,70],
[56,60,58,61,0,58,46,71,54,59],
[64,64,53,68,72,0,56,51,60,56],
[77,65,70,66,84,74,0,79,86,83],
[71,58,66,58,59,79,51,0,66,61],
[76,68,68,61,76,70,44,64,0,74],
[58,57,55,60,71,74,47,69,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,72,60,57,64,63,68,64,59],
[51,0,59,53,56,50,69,54,48,64],
[58,71,0,61,60,60,60,62,62,65],
[70,77,69,0,57,60,68,65,66,68],
[73,74,70,73,0,74,71,68,60,76],
[66,80,70,70,56,0,64,81,68,73],
[67,61,70,62,59,66,0,70,69,60],
[62,76,68,65,62,49,60,0,57,68],
[66,82,68,64,70,62,61,73,0,75],
[71,66,65,62,54,57,70,62,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,72,75,72,61,75,68,74,60],
[55,0,74,71,61,54,69,73,61,56],
[58,56,0,65,68,60,56,64,61,61],
[55,59,65,0,59,56,49,65,51,58],
[58,69,62,71,0,52,66,69,71,59],
[69,76,70,74,78,0,66,80,77,62],
[55,61,74,81,64,64,0,71,65,67],
[62,57,66,65,61,50,59,0,51,56],
[56,69,69,79,59,53,65,79,0,62],
[70,74,69,72,71,68,63,74,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,66,69,54,71,61,63,69,66],
[75,0,74,77,64,77,64,69,72,66],
[64,56,0,65,59,76,54,64,69,56],
[61,53,65,0,58,71,55,54,66,63],
[76,66,71,72,0,82,61,64,75,72],
[59,53,54,59,48,0,48,56,60,62],
[69,66,76,75,69,82,0,63,76,71],
[67,61,66,76,66,74,67,0,73,68],
[61,58,61,64,55,70,54,57,0,54],
[64,64,74,67,58,68,59,62,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,82,89,77,82,85,82,82,77],
[65,0,75,67,64,77,75,73,76,72],
[48,55,0,77,55,81,69,79,59,58],
[41,63,53,0,55,41,62,65,61,69],
[53,66,75,75,0,73,69,89,85,79],
[48,53,49,89,57,0,59,56,56,60],
[45,55,61,68,61,71,0,60,65,68],
[48,57,51,65,41,74,70,0,62,70],
[48,54,71,69,45,74,65,68,0,65],
[53,58,72,61,51,70,62,60,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,82,64,69,76,86,85,67,73],
[50,0,66,68,66,62,68,81,61,56],
[48,64,0,55,59,66,82,73,71,69],
[66,62,75,0,80,74,71,83,57,63],
[61,64,71,50,0,83,79,74,61,59],
[54,68,64,56,47,0,71,67,67,58],
[44,62,48,59,51,59,0,65,52,55],
[45,49,57,47,56,63,65,0,52,44],
[63,69,59,73,69,63,78,78,0,56],
[57,74,61,67,71,72,75,86,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,75,64,65,67,73,54,74,72],
[47,0,49,50,43,63,47,44,50,41],
[55,81,0,56,46,67,54,60,63,53],
[66,80,74,0,60,68,65,66,64,64],
[65,87,84,70,0,81,69,60,60,58],
[63,67,63,62,49,0,49,53,64,54],
[57,83,76,65,61,81,0,65,70,67],
[76,86,70,64,70,77,65,0,69,69],
[56,80,67,66,70,66,60,61,0,61],
[58,89,77,66,72,76,63,61,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,57,54,66,52,56,75,53,46],
[52,0,57,46,76,53,65,69,62,50],
[73,73,0,64,81,77,69,75,71,72],
[76,84,66,0,88,67,70,82,62,61],
[64,54,49,42,0,39,53,58,61,40],
[78,77,53,63,91,0,74,83,67,47],
[74,65,61,60,77,56,0,66,61,49],
[55,61,55,48,72,47,64,0,60,41],
[77,68,59,68,69,63,69,70,0,57],
[84,80,58,69,90,83,81,89,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,60,60,57,41,57,57,59,52],
[67,0,67,52,51,61,62,53,70,56],
[70,63,0,49,57,48,51,50,66,49],
[70,78,81,0,74,68,80,61,74,69],
[73,79,73,56,0,60,63,69,74,57],
[89,69,82,62,70,0,60,78,79,68],
[73,68,79,50,67,70,0,57,78,68],
[73,77,80,69,61,52,73,0,72,78],
[71,60,64,56,56,51,52,58,0,50],
[78,74,81,61,73,62,62,52,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,77,61,59,73,70,76,60,62],
[75,0,72,68,65,72,74,88,66,73],
[53,58,0,66,60,59,56,68,57,62],
[69,62,64,0,58,66,59,66,52,77],
[71,65,70,72,0,67,70,70,56,64],
[57,58,71,64,63,0,67,70,63,53],
[60,56,74,71,60,63,0,71,45,62],
[54,42,62,64,60,60,59,0,44,63],
[70,64,73,78,74,67,85,86,0,79],
[68,57,68,53,66,77,68,67,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,59,64,67,64,75,69,79,69],
[61,0,53,64,60,66,78,66,77,60],
[71,77,0,75,64,65,88,72,78,75],
[66,66,55,0,71,63,76,65,75,71],
[63,70,66,59,0,63,78,66,75,57],
[66,64,65,67,67,0,82,77,80,73],
[55,52,42,54,52,48,0,47,54,66],
[61,64,58,65,64,53,83,0,71,63],
[51,53,52,55,55,50,76,59,0,60],
[61,70,55,59,73,57,64,67,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,71,61,77,98,69,82,93,78],
[55,0,57,36,77,89,39,59,78,63],
[59,73,0,52,66,82,54,59,45,60],
[69,94,78,0,92,105,70,84,76,62],
[53,53,64,38,0,75,70,59,67,54],
[32,41,48,25,55,0,39,38,54,40],
[61,91,76,60,60,91,0,61,77,46],
[48,71,71,46,71,92,69,0,85,33],
[37,52,85,54,63,76,53,45,0,46],
[52,67,70,68,76,90,84,97,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,80,69,77,78,74,73,78,70],
[66,0,78,65,73,73,84,72,70,65],
[50,52,0,66,64,66,68,63,73,65],
[61,65,64,0,76,67,81,65,88,67],
[53,57,66,54,0,60,61,50,72,70],
[52,57,64,63,70,0,69,54,77,77],
[56,46,62,49,69,61,0,47,71,68],
[57,58,67,65,80,76,83,0,92,87],
[52,60,57,42,58,53,59,38,0,60],
[60,65,65,63,60,53,62,43,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,65,60,50,56,67,69,67,69],
[74,0,64,73,70,57,69,70,89,70],
[65,66,0,69,64,61,68,74,74,72],
[70,57,61,0,52,63,65,74,68,62],
[80,60,66,78,0,69,62,74,79,72],
[74,73,69,67,61,0,69,61,83,77],
[63,61,62,65,68,61,0,68,70,64],
[61,60,56,56,56,69,62,0,76,63],
[63,41,56,62,51,47,60,54,0,60],
[61,60,58,68,58,53,66,67,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,72,74,73,65,68,62,74,59],
[72,0,74,70,81,64,76,62,82,63],
[58,56,0,65,73,64,52,68,70,65],
[56,60,65,0,72,65,53,57,51,65],
[57,49,57,58,0,59,55,54,61,58],
[65,66,66,65,71,0,67,61,74,65],
[62,54,78,77,75,63,0,78,70,65],
[68,68,62,73,76,69,52,0,64,63],
[56,48,60,79,69,56,60,66,0,63],
[71,67,65,65,72,65,65,67,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,64,58,60,51,56,72,48,72],
[82,0,67,67,67,75,69,78,49,91],
[66,63,0,54,61,63,56,65,60,62],
[72,63,76,0,65,72,71,80,71,77],
[70,63,69,65,0,62,74,67,59,64],
[79,55,67,58,68,0,60,73,60,73],
[74,61,74,59,56,70,0,77,67,81],
[58,52,65,50,63,57,53,0,49,64],
[82,81,70,59,71,70,63,81,0,68],
[58,39,68,53,66,57,49,66,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,62,56,60,66,57,65,65,55],
[78,0,71,63,75,73,67,66,69,74],
[68,59,0,66,59,66,57,55,59,61],
[74,67,64,0,76,73,64,67,65,75],
[70,55,71,54,0,62,55,67,59,52],
[64,57,64,57,68,0,54,66,68,54],
[73,63,73,66,75,76,0,60,62,63],
[65,64,75,63,63,64,70,0,54,66],
[65,61,71,65,71,62,68,76,0,76],
[75,56,69,55,78,76,67,64,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,77,77,69,68,60,73,65,58],
[54,0,69,66,65,60,58,66,59,61],
[53,61,0,61,51,57,58,65,55,51],
[53,64,69,0,66,61,58,50,53,53],
[61,65,79,64,0,63,68,61,61,60],
[62,70,73,69,67,0,56,57,58,66],
[70,72,72,72,62,74,0,63,63,62],
[57,64,65,80,69,73,67,0,69,68],
[65,71,75,77,69,72,67,61,0,57],
[72,69,79,77,70,64,68,62,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,63,70,46,45,34,59,57,41],
[100,0,94,102,59,84,64,90,88,75],
[67,36,0,77,50,35,51,61,59,49],
[60,28,53,0,45,43,35,54,43,43],
[84,71,80,85,0,49,79,82,79,60],
[85,46,95,87,81,0,68,99,65,75],
[96,66,79,95,51,62,0,88,71,62],
[71,40,69,76,48,31,42,0,50,45],
[73,42,71,87,51,65,59,80,0,53],
[89,55,81,87,70,55,68,85,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,52,78,52,52,26,26,26,52],
[78,0,78,78,78,78,0,52,78,52],
[78,52,0,104,52,78,26,78,52,78],
[52,52,26,0,52,52,0,26,52,78],
[78,52,78,78,0,78,0,52,52,78],
[78,52,52,78,52,0,52,26,78,78],
[104,130,104,130,130,78,0,52,130,130],
[104,78,52,104,78,104,78,0,78,78],
[104,52,78,78,78,52,0,52,0,78],
[78,78,52,52,52,52,0,52,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,73,64,73,68,57,51,72],
[67,0,70,68,66,75,75,64,66,74],
[59,60,0,64,68,70,76,62,63,71],
[57,62,66,0,68,74,78,60,60,69],
[66,64,62,62,0,63,80,58,54,62],
[57,55,60,56,67,0,68,60,58,62],
[62,55,54,52,50,62,0,51,42,65],
[73,66,68,70,72,70,79,0,59,67],
[79,64,67,70,76,72,88,71,0,71],
[58,56,59,61,68,68,65,63,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,90,40,51,90,78,40,65,90],
[65,0,64,40,53,91,77,51,53,90],
[40,66,0,53,79,80,53,53,67,79],
[90,90,77,0,91,90,76,65,77,77],
[79,77,51,39,0,90,77,52,52,77],
[40,39,50,40,40,0,52,27,54,39],
[52,53,77,54,53,78,0,65,67,104],
[90,79,77,65,78,103,65,0,79,77],
[65,77,63,53,78,76,63,51,0,77],
[40,40,51,53,53,91,26,53,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,56,66,82,63,63,79,57,64],
[58,0,62,71,80,79,71,104,74,77],
[74,68,0,76,81,62,82,96,84,74],
[64,59,54,0,87,50,54,72,54,46],
[48,50,49,43,0,56,57,64,26,40],
[67,51,68,80,74,0,75,74,77,82],
[67,59,48,76,73,55,0,72,57,82],
[51,26,34,58,66,56,58,0,43,41],
[73,56,46,76,104,53,73,87,0,81],
[66,53,56,84,90,48,48,89,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,80,61,60,68,57,74,64,70],
[67,0,74,70,61,61,64,78,62,67],
[50,56,0,48,59,53,46,52,56,59],
[69,60,82,0,57,67,59,74,73,74],
[70,69,71,73,0,59,65,73,71,77],
[62,69,77,63,71,0,64,72,72,76],
[73,66,84,71,65,66,0,78,73,80],
[56,52,78,56,57,58,52,0,63,65],
[66,68,74,57,59,58,57,67,0,70],
[60,63,71,56,53,54,50,65,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,33,33,33,64,0,31,97,66],
[97,0,33,66,66,97,33,64,97,66],
[97,97,0,64,33,97,33,64,97,97],
[97,64,66,0,66,64,0,31,64,97],
[97,64,97,64,0,97,64,64,64,97],
[66,33,33,66,33,0,66,97,64,66],
[130,97,97,130,66,64,0,130,97,130],
[99,66,66,99,66,33,0,0,66,66],
[33,33,33,66,66,66,33,64,0,99],
[64,64,33,33,33,64,0,64,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,64,57,67,63,64,67,58,62],
[72,0,69,66,74,63,62,70,66,69],
[66,61,0,66,74,58,64,66,57,60],
[73,64,64,0,69,60,68,76,68,66],
[63,56,56,61,0,58,62,63,58,59],
[67,67,72,70,72,0,64,72,71,63],
[66,68,66,62,68,66,0,73,63,65],
[63,60,64,54,67,58,57,0,56,58],
[72,64,73,62,72,59,67,74,0,69],
[68,61,70,64,71,67,65,72,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,60,46,60,63,54,56,63,60],
[68,0,53,61,58,55,61,62,70,55],
[70,77,0,64,52,60,65,59,65,56],
[84,69,66,0,67,66,63,71,74,65],
[70,72,78,63,0,72,64,75,75,68],
[67,75,70,64,58,0,61,61,65,64],
[76,69,65,67,66,69,0,61,67,61],
[74,68,71,59,55,69,69,0,62,67],
[67,60,65,56,55,65,63,68,0,55],
[70,75,74,65,62,66,69,63,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,68,68,67,67,76,78,63,68],
[69,0,52,71,62,72,65,82,58,59],
[62,78,0,79,79,68,74,80,76,63],
[62,59,51,0,57,67,73,79,69,62],
[63,68,51,73,0,55,61,76,61,61],
[63,58,62,63,75,0,67,80,67,63],
[54,65,56,57,69,63,0,73,55,52],
[52,48,50,51,54,50,57,0,61,54],
[67,72,54,61,69,63,75,69,0,69],
[62,71,67,68,69,67,78,76,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,86,65,83,67,98,64,48,65],
[65,0,50,32,53,47,82,84,35,83],
[44,80,0,48,80,49,64,79,48,79],
[65,98,82,0,85,96,99,81,81,97],
[47,77,50,45,0,47,64,47,62,79],
[63,83,81,34,83,0,97,82,33,82],
[32,48,66,31,66,33,0,65,48,80],
[66,46,51,49,83,48,65,0,49,48],
[82,95,82,49,68,97,82,81,0,80],
[65,47,51,33,51,48,50,82,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,66,88,86,77,72,74,64,76],
[42,0,55,66,73,65,60,56,49,59],
[64,75,0,83,96,80,66,90,74,84],
[42,64,47,0,58,71,40,56,45,64],
[44,57,34,72,0,61,32,59,48,69],
[53,65,50,59,69,0,37,66,51,82],
[58,70,64,90,98,93,0,83,75,79],
[56,74,40,74,71,64,47,0,58,66],
[66,81,56,85,82,79,55,72,0,73],
[54,71,46,66,61,48,51,64,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,59,64,73,59,73,67,62,69],
[64,0,53,77,67,59,75,62,58,68],
[71,77,0,72,78,66,83,60,64,71],
[66,53,58,0,69,55,67,67,52,59],
[57,63,52,61,0,50,69,54,53,61],
[71,71,64,75,80,0,79,67,66,61],
[57,55,47,63,61,51,0,55,55,63],
[63,68,70,63,76,63,75,0,56,63],
[68,72,66,78,77,64,75,74,0,66],
[61,62,59,71,69,69,67,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,65,66,60,65,64,55,67,60],
[78,0,69,64,73,68,76,64,67,86],
[65,61,0,54,56,60,59,51,54,59],
[64,66,76,0,64,62,67,63,64,71],
[70,57,74,66,0,69,67,65,65,70],
[65,62,70,68,61,0,65,63,67,63],
[66,54,71,63,63,65,0,50,57,61],
[75,66,79,67,65,67,80,0,75,74],
[63,63,76,66,65,63,73,55,0,66],
[70,44,71,59,60,67,69,56,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,62,57,58,52,49,70,54,65],
[85,0,59,63,57,73,66,65,70,80],
[68,71,0,61,62,64,56,57,61,74],
[73,67,69,0,63,72,51,66,70,80],
[72,73,68,67,0,69,56,65,65,92],
[78,57,66,58,61,0,53,58,53,66],
[81,64,74,79,74,77,0,74,64,87],
[60,65,73,64,65,72,56,0,68,80],
[76,60,69,60,65,77,66,62,0,64],
[65,50,56,50,38,64,43,50,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,84,65,79,85,75,71,78,67],
[55,0,63,43,66,79,79,68,64,50],
[46,67,0,56,68,58,72,65,64,56],
[65,87,74,0,83,77,79,89,73,67],
[51,64,62,47,0,76,77,68,84,58],
[45,51,72,53,54,0,54,52,69,63],
[55,51,58,51,53,76,0,54,71,66],
[59,62,65,41,62,78,76,0,67,60],
[52,66,66,57,46,61,59,63,0,56],
[63,80,74,63,72,67,64,70,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,65,66,71,69,61,56,60],
[63,0,69,60,59,62,67,63,59,53],
[66,61,0,64,59,64,65,63,62,58],
[65,70,66,0,67,71,72,62,68,70],
[64,71,71,63,0,67,69,61,66,64],
[59,68,66,59,63,0,67,53,62,56],
[61,63,65,58,61,63,0,58,62,57],
[69,67,67,68,69,77,72,0,67,55],
[74,71,68,62,64,68,68,63,0,70],
[70,77,72,60,66,74,73,75,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,60,62,69,61,54,62,75,92],
[75,0,74,74,64,74,82,69,70,85],
[70,56,0,62,68,68,65,59,62,84],
[68,56,68,0,74,65,60,58,63,81],
[61,66,62,56,0,72,69,65,65,79],
[69,56,62,65,58,0,53,59,63,82],
[76,48,65,70,61,77,0,73,63,80],
[68,61,71,72,65,71,57,0,71,85],
[55,60,68,67,65,67,67,59,0,71],
[38,45,46,49,51,48,50,45,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,90,63,70,63,72,57,70,67],
[78,0,84,56,71,61,77,67,76,82],
[40,46,0,58,69,41,45,53,58,75],
[67,74,72,0,68,63,72,77,64,89],
[60,59,61,62,0,69,69,47,64,74],
[67,69,89,67,61,0,68,51,79,80],
[58,53,85,58,61,62,0,49,73,79],
[73,63,77,53,83,79,81,0,74,82],
[60,54,72,66,66,51,57,56,0,81],
[63,48,55,41,56,50,51,48,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,63,79,86,87,67,85,96,77],
[48,0,57,83,62,65,62,68,78,55],
[67,73,0,85,65,84,74,82,81,76],
[51,47,45,0,46,67,49,81,73,41],
[44,68,65,84,0,75,71,89,83,55],
[43,65,46,63,55,0,41,70,74,59],
[63,68,56,81,59,89,0,69,83,65],
[45,62,48,49,41,60,61,0,65,50],
[34,52,49,57,47,56,47,65,0,37],
[53,75,54,89,75,71,65,80,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,78,62,63,69,73,65,65,74],
[53,0,61,66,61,64,58,61,56,67],
[52,69,0,61,63,58,70,63,59,61],
[68,64,69,0,66,72,71,69,65,72],
[67,69,67,64,0,65,64,70,65,62],
[61,66,72,58,65,0,61,63,65,72],
[57,72,60,59,66,69,0,69,65,67],
[65,69,67,61,60,67,61,0,67,68],
[65,74,71,65,65,65,65,63,0,69],
[56,63,69,58,68,58,63,62,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,58,54,63,51,53,55,74,55],
[82,0,83,60,73,66,66,61,82,69],
[72,47,0,45,79,54,63,62,65,71],
[76,70,85,0,86,63,89,68,72,82],
[67,57,51,44,0,45,46,45,53,60],
[79,64,76,67,85,0,64,73,87,74],
[77,64,67,41,84,66,0,42,55,45],
[75,69,68,62,85,57,88,0,73,73],
[56,48,65,58,77,43,75,57,0,53],
[75,61,59,48,70,56,85,57,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,78,74,71,67,82,76,66,60],
[73,0,83,70,76,59,84,84,73,71],
[52,47,0,64,72,58,70,66,55,56],
[56,60,66,0,72,55,68,52,68,59],
[59,54,58,58,0,54,64,62,71,60],
[63,71,72,75,76,0,80,67,79,68],
[48,46,60,62,66,50,0,56,64,44],
[54,46,64,78,68,63,74,0,59,58],
[64,57,75,62,59,51,66,71,0,53],
[70,59,74,71,70,62,86,72,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,68,76,73,85,69,60,56,58],
[70,0,64,65,75,79,66,62,67,68],
[62,66,0,61,67,86,71,62,62,60],
[54,65,69,0,56,78,64,58,48,58],
[57,55,63,74,0,92,70,44,58,73],
[45,51,44,52,38,0,51,45,36,51],
[61,64,59,66,60,79,0,42,65,57],
[70,68,68,72,86,85,88,0,67,57],
[74,63,68,82,72,94,65,63,0,72],
[72,62,70,72,57,79,73,73,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,65,67,64,64,80,80,65,68],
[56,0,62,73,63,67,68,71,57,62],
[65,68,0,78,65,68,73,77,64,68],
[63,57,52,0,61,54,63,73,60,62],
[66,67,65,69,0,71,79,78,68,71],
[66,63,62,76,59,0,74,80,62,65],
[50,62,57,67,51,56,0,69,58,60],
[50,59,53,57,52,50,61,0,52,51],
[65,73,66,70,62,68,72,78,0,59],
[62,68,62,68,59,65,70,79,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,58,60,64,59,52,62,64,54],
[75,0,61,65,69,68,59,75,69,61],
[72,69,0,71,74,69,68,75,72,57],
[70,65,59,0,67,57,63,65,73,66],
[66,61,56,63,0,63,52,66,61,57],
[71,62,61,73,67,0,62,70,72,56],
[78,71,62,67,78,68,0,75,69,56],
[68,55,55,65,64,60,55,0,57,52],
[66,61,58,57,69,58,61,73,0,58],
[76,69,73,64,73,74,74,78,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,63,66,74,71,78,67,61,70],
[59,0,60,65,65,61,69,68,59,70],
[67,70,0,72,65,75,65,75,62,56],
[64,65,58,0,67,58,67,58,59,47],
[56,65,65,63,0,59,67,73,63,58],
[59,69,55,72,71,0,61,58,68,55],
[52,61,65,63,63,69,0,65,53,52],
[63,62,55,72,57,72,65,0,61,56],
[69,71,68,71,67,62,77,69,0,48],
[60,60,74,83,72,75,78,74,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,80,86,89,54,72,85,86,78],
[63,0,50,78,81,57,54,64,76,67],
[50,80,0,72,72,54,64,60,77,60],
[44,52,58,0,54,44,52,67,59,60],
[41,49,58,76,0,54,62,58,56,53],
[76,73,76,86,76,0,60,66,80,76],
[58,76,66,78,68,70,0,70,76,67],
[45,66,70,63,72,64,60,0,67,67],
[44,54,53,71,74,50,54,63,0,60],
[52,63,70,70,77,54,63,63,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,57,64,60,72,67,62,60],
[70,0,74,78,73,65,80,78,67,74],
[67,56,0,62,61,62,74,66,54,60],
[73,52,68,0,62,58,70,71,60,66],
[66,57,69,68,0,58,72,65,68,69],
[70,65,68,72,72,0,76,73,59,68],
[58,50,56,60,58,54,0,61,62,59],
[63,52,64,59,65,57,69,0,56,63],
[68,63,76,70,62,71,68,74,0,70],
[70,56,70,64,61,62,71,67,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,71,66,68,71,62,69,69,47],
[73,0,59,69,54,71,58,62,61,54],
[59,71,0,69,67,73,55,52,71,57],
[64,61,61,0,57,72,60,57,72,54],
[62,76,63,73,0,70,58,63,67,56],
[59,59,57,58,60,0,57,55,58,54],
[68,72,75,70,72,73,0,69,74,65],
[61,68,78,73,67,75,61,0,76,60],
[61,69,59,58,63,72,56,54,0,53],
[83,76,73,76,74,76,65,70,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,48,44,58,60,56,65,53,43],
[73,0,56,58,65,63,64,66,51,52],
[82,74,0,61,65,72,76,79,67,60],
[86,72,69,0,64,78,73,85,74,65],
[72,65,65,66,0,76,66,74,68,66],
[70,67,58,52,54,0,62,66,52,59],
[74,66,54,57,64,68,0,75,61,67],
[65,64,51,45,56,64,55,0,54,52],
[77,79,63,56,62,78,69,76,0,61],
[87,78,70,65,64,71,63,78,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,59,56,58,68,72,72,67,79],
[55,0,46,52,52,60,47,47,59,58],
[71,84,0,69,58,73,77,67,65,68],
[74,78,61,0,61,75,72,70,74,85],
[72,78,72,69,0,84,73,63,61,80],
[62,70,57,55,46,0,57,52,61,79],
[58,83,53,58,57,73,0,62,66,62],
[58,83,63,60,67,78,68,0,70,79],
[63,71,65,56,69,69,64,60,0,71],
[51,72,62,45,50,51,68,51,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,75,67,73,70,77,69,82],
[69,0,56,75,70,71,70,67,64,75],
[63,74,0,68,73,78,65,71,69,77],
[55,55,62,0,68,68,61,60,62,65],
[63,60,57,62,0,65,63,60,59,74],
[57,59,52,62,65,0,60,62,58,71],
[60,60,65,69,67,70,0,67,67,72],
[53,63,59,70,70,68,63,0,68,70],
[61,66,61,68,71,72,63,62,0,76],
[48,55,53,65,56,59,58,60,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,58,58,62,54,69,69,61,48],
[73,0,68,64,69,65,62,71,66,58],
[72,62,0,65,70,55,61,68,58,59],
[72,66,65,0,64,54,66,75,58,53],
[68,61,60,66,0,52,60,66,53,49],
[76,65,75,76,78,0,67,78,63,65],
[61,68,69,64,70,63,0,70,68,60],
[61,59,62,55,64,52,60,0,61,46],
[69,64,72,72,77,67,62,69,0,57],
[82,72,71,77,81,65,70,84,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,69,61,65,72,69,71,79,69],
[56,0,60,65,56,60,58,59,67,59],
[61,70,0,62,54,67,59,73,63,72],
[69,65,68,0,60,60,50,74,73,65],
[65,74,76,70,0,72,64,73,77,62],
[58,70,63,70,58,0,56,73,70,64],
[61,72,71,80,66,74,0,70,75,70],
[59,71,57,56,57,57,60,0,65,57],
[51,63,67,57,53,60,55,65,0,67],
[61,71,58,65,68,66,60,73,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,54,62,59,59,66,59,82,66],
[69,0,65,80,64,75,80,75,80,68],
[76,65,0,86,74,78,78,70,84,70],
[68,50,44,0,59,66,68,57,71,62],
[71,66,56,71,0,63,62,66,82,62],
[71,55,52,64,67,0,66,60,70,58],
[64,50,52,62,68,64,0,65,73,68],
[71,55,60,73,64,70,65,0,76,68],
[48,50,46,59,48,60,57,54,0,66],
[64,62,60,68,68,72,62,62,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,82,80,79,103,42,74,95,83],
[33,0,41,67,32,77,31,55,40,38],
[48,89,0,74,48,90,26,62,59,55],
[50,63,56,0,43,76,42,62,47,52],
[51,98,82,87,0,97,65,61,74,85],
[27,53,40,54,33,0,41,46,45,54],
[88,99,104,88,65,89,0,74,80,93],
[56,75,68,68,69,84,56,0,66,82],
[35,90,71,83,56,85,50,64,0,73],
[47,92,75,78,45,76,37,48,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,65,70,70,68,56,57,74,81],
[68,0,59,63,64,71,51,53,67,79],
[65,71,0,73,75,75,59,63,83,81],
[60,67,57,0,68,74,65,69,84,77],
[60,66,55,62,0,66,55,55,58,70],
[62,59,55,56,64,0,50,64,72,69],
[74,79,71,65,75,80,0,77,82,76],
[73,77,67,61,75,66,53,0,81,83],
[56,63,47,46,72,58,48,49,0,64],
[49,51,49,53,60,61,54,47,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,47,45,60,62,45,68,60,57],
[68,0,54,51,70,52,63,56,67,57],
[83,76,0,65,78,62,55,64,87,71],
[85,79,65,0,85,84,72,79,66,71],
[70,60,52,45,0,51,53,56,66,50],
[68,78,68,46,79,0,66,74,76,69],
[85,67,75,58,77,64,0,69,78,71],
[62,74,66,51,74,56,61,0,68,68],
[70,63,43,64,64,54,52,62,0,54],
[73,73,59,59,80,61,59,62,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,60,76,65,74,69,68,69],
[65,0,60,61,70,71,72,72,65,71],
[61,70,0,60,73,65,61,69,62,67],
[70,69,70,0,79,68,75,75,65,78],
[54,60,57,51,0,62,58,60,51,63],
[65,59,65,62,68,0,70,70,68,78],
[56,58,69,55,72,60,0,62,56,70],
[61,58,61,55,70,60,68,0,59,71],
[62,65,68,65,79,62,74,71,0,71],
[61,59,63,52,67,52,60,59,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,64,49,61,69,61,54,61,66],
[72,0,76,68,75,73,71,64,72,76],
[66,54,0,54,60,65,53,51,50,60],
[81,62,76,0,63,73,72,73,76,78],
[69,55,70,67,0,74,72,64,73,70],
[61,57,65,57,56,0,67,61,57,67],
[69,59,77,58,58,63,0,56,57,61],
[76,66,79,57,66,69,74,0,72,74],
[69,58,80,54,57,73,73,58,0,67],
[64,54,70,52,60,63,69,56,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,71,74,76,76,62,58,62,68],
[51,0,51,58,57,47,55,41,54,52],
[59,79,0,68,66,72,57,52,65,65],
[56,72,62,0,58,60,61,50,52,63],
[54,73,64,72,0,60,67,50,56,66],
[54,83,58,70,70,0,63,57,64,65],
[68,75,73,69,63,67,0,65,64,69],
[72,89,78,80,80,73,65,0,68,89],
[68,76,65,78,74,66,66,62,0,69],
[62,78,65,67,64,65,61,41,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,64,54,60,51,71,60,62,46],
[70,0,56,76,66,53,59,57,52,45],
[66,74,0,84,58,62,73,72,64,77],
[76,54,46,0,69,59,65,65,67,52],
[70,64,72,61,0,65,72,72,71,62],
[79,77,68,71,65,0,70,72,57,63],
[59,71,57,65,58,60,0,58,70,48],
[70,73,58,65,58,58,72,0,62,57],
[68,78,66,63,59,73,60,68,0,57],
[84,85,53,78,68,67,82,73,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,74,64,65,62,60,56,60,61],
[67,0,70,67,73,67,64,63,63,58],
[56,60,0,56,65,59,53,59,58,51],
[66,63,74,0,62,72,62,68,68,57],
[65,57,65,68,0,69,62,65,62,53],
[68,63,71,58,61,0,62,63,60,60],
[70,66,77,68,68,68,0,63,64,55],
[74,67,71,62,65,67,67,0,62,54],
[70,67,72,62,68,70,66,68,0,65],
[69,72,79,73,77,70,75,76,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,72,68,69,74,55,58,69,63],
[62,0,66,63,58,62,49,49,64,58],
[58,64,0,66,61,67,59,56,56,65],
[62,67,64,0,66,79,64,55,65,63],
[61,72,69,64,0,73,60,56,64,62],
[56,68,63,51,57,0,53,59,48,59],
[75,81,71,66,70,77,0,65,72,64],
[72,81,74,75,74,71,65,0,67,65],
[61,66,74,65,66,82,58,63,0,67],
[67,72,65,67,68,71,66,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,75,85,65,67,59,67,77,82],
[59,0,72,72,67,61,56,68,68,65],
[55,58,0,82,53,65,57,66,77,69],
[45,58,48,0,60,55,63,61,70,49],
[65,63,77,70,0,64,68,57,58,72],
[63,69,65,75,66,0,57,70,75,76],
[71,74,73,67,62,73,0,63,76,66],
[63,62,64,69,73,60,67,0,64,61],
[53,62,53,60,72,55,54,66,0,60],
[48,65,61,81,58,54,64,69,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,58,65,61,61,57,55,67,70],
[81,0,73,84,62,73,74,67,76,75],
[72,57,0,70,64,64,53,63,74,71],
[65,46,60,0,69,61,55,67,67,75],
[69,68,66,61,0,70,53,57,70,65],
[69,57,66,69,60,0,66,63,62,64],
[73,56,77,75,77,64,0,72,74,77],
[75,63,67,63,73,67,58,0,76,72],
[63,54,56,63,60,68,56,54,0,62],
[60,55,59,55,65,66,53,58,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,54,54,39,56,86,63,40,54],
[72,0,63,39,49,51,71,47,50,64],
[76,67,0,56,51,50,77,60,51,71],
[76,91,74,0,59,68,75,51,63,76],
[91,81,79,71,0,61,89,75,74,71],
[74,79,80,62,69,0,88,61,65,70],
[44,59,53,55,41,42,0,37,44,67],
[67,83,70,79,55,69,93,0,61,68],
[90,80,79,67,56,65,86,69,0,79],
[76,66,59,54,59,60,63,62,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,94,103,69,112,104,87,58,75],
[69,0,85,104,61,86,88,79,78,68],
[36,45,0,75,78,82,55,74,37,56],
[27,26,55,0,31,47,49,57,37,29],
[61,69,52,99,0,90,62,91,80,54],
[18,44,48,83,40,0,37,47,20,39],
[26,42,75,81,68,93,0,84,53,74],
[43,51,56,73,39,83,46,0,45,55],
[72,52,93,93,50,110,77,85,0,57],
[55,62,74,101,76,91,56,75,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,76,60,81,75,72,83,83],
[62,0,60,63,60,82,82,69,72,85],
[66,70,0,73,67,71,82,65,65,79],
[54,67,57,0,65,76,83,64,75,76],
[70,70,63,65,0,72,66,63,77,78],
[49,48,59,54,58,0,59,55,65,70],
[55,48,48,47,64,71,0,55,69,73],
[58,61,65,66,67,75,75,0,80,74],
[47,58,65,55,53,65,61,50,0,72],
[47,45,51,54,52,60,57,56,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,61,74,58,72,64,66,69,64],
[63,0,73,61,62,64,66,69,65,55],
[69,57,0,72,63,63,63,71,65,61],
[56,69,58,0,68,68,67,60,66,60],
[72,68,67,62,0,70,66,61,64,66],
[58,66,67,62,60,0,58,63,65,63],
[66,64,67,63,64,72,0,65,59,75],
[64,61,59,70,69,67,65,0,65,64],
[61,65,65,64,66,65,71,65,0,66],
[66,75,69,70,64,67,55,66,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,55,49,52,49,50,64,55,58],
[88,0,78,69,62,81,74,76,67,81],
[75,52,0,57,48,58,64,67,64,59],
[81,61,73,0,66,79,72,70,70,59],
[78,68,82,64,0,66,77,81,71,83],
[81,49,72,51,64,0,76,60,65,69],
[80,56,66,58,53,54,0,64,69,70],
[66,54,63,60,49,70,66,0,52,64],
[75,63,66,60,59,65,61,78,0,58],
[72,49,71,71,47,61,60,66,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,49,67,61,51,52,61,62,58],
[67,0,62,61,63,67,54,68,65,64],
[81,68,0,74,70,67,61,62,74,65],
[63,69,56,0,56,59,64,61,67,63],
[69,67,60,74,0,59,62,62,68,72],
[79,63,63,71,71,0,65,70,67,66],
[78,76,69,66,68,65,0,70,69,76],
[69,62,68,69,68,60,60,0,74,62],
[68,65,56,63,62,63,61,56,0,67],
[72,66,65,67,58,64,54,68,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,68,63,71,74,70,65,68],
[63,0,64,67,69,67,75,65,75,75],
[60,66,0,60,63,70,68,66,69,67],
[62,63,70,0,66,68,76,62,73,70],
[67,61,67,64,0,65,77,61,74,67],
[59,63,60,62,65,0,70,59,66,66],
[56,55,62,54,53,60,0,57,65,59],
[60,65,64,68,69,71,73,0,72,70],
[65,55,61,57,56,64,65,58,0,65],
[62,55,63,60,63,64,71,60,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,63,67,69,69,72,71,56,68],
[53,0,64,64,65,66,71,57,48,63],
[67,66,0,77,69,74,74,63,58,65],
[63,66,53,0,58,68,70,62,56,75],
[61,65,61,72,0,70,71,67,56,71],
[61,64,56,62,60,0,65,66,46,65],
[58,59,56,60,59,65,0,62,48,69],
[59,73,67,68,63,64,68,0,71,68],
[74,82,72,74,74,84,82,59,0,74],
[62,67,65,55,59,65,61,62,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,61,64,61,64,62,59,59,58],
[74,0,62,67,67,68,59,66,69,74],
[69,68,0,70,67,69,74,64,69,78],
[66,63,60,0,55,60,59,64,63,61],
[69,63,63,75,0,64,68,64,80,69],
[66,62,61,70,66,0,64,61,74,68],
[68,71,56,71,62,66,0,69,69,65],
[71,64,66,66,66,69,61,0,73,67],
[71,61,61,67,50,56,61,57,0,66],
[72,56,52,69,61,62,65,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,69,76,61,78,75,65,79,68],
[58,0,57,58,43,59,57,55,63,51],
[61,73,0,66,46,70,62,63,64,60],
[54,72,64,0,55,66,65,52,69,61],
[69,87,84,75,0,85,68,77,83,61],
[52,71,60,64,45,0,62,51,63,57],
[55,73,68,65,62,68,0,60,70,60],
[65,75,67,78,53,79,70,0,72,58],
[51,67,66,61,47,67,60,58,0,62],
[62,79,70,69,69,73,70,72,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,51,57,46,72,47,52,62,56],
[53,0,64,57,49,68,70,55,58,61],
[79,66,0,53,49,63,64,49,68,55],
[73,73,77,0,54,73,62,74,70,73],
[84,81,81,76,0,81,58,54,75,69],
[58,62,67,57,49,0,60,62,50,47],
[83,60,66,68,72,70,0,62,76,59],
[78,75,81,56,76,68,68,0,79,64],
[68,72,62,60,55,80,54,51,0,62],
[74,69,75,57,61,83,71,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,71,51,59,66,64,58,57,63],
[57,0,69,50,58,61,66,54,62,60],
[59,61,0,57,58,65,72,58,71,55],
[79,80,73,0,69,68,80,71,62,65],
[71,72,72,61,0,65,68,58,64,64],
[64,69,65,62,65,0,67,57,52,57],
[66,64,58,50,62,63,0,53,57,44],
[72,76,72,59,72,73,77,0,61,74],
[73,68,59,68,66,78,73,69,0,63],
[67,70,75,65,66,73,86,56,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,66,71,55,61,62,73,64,71],
[71,0,77,77,81,79,65,65,76,67],
[64,53,0,57,57,51,51,51,51,53],
[59,53,73,0,76,65,57,66,56,58],
[75,49,73,54,0,62,62,76,54,58],
[69,51,79,65,68,0,59,67,47,57],
[68,65,79,73,68,71,0,68,53,59],
[57,65,79,64,54,63,62,0,58,55],
[66,54,79,74,76,83,77,72,0,74],
[59,63,77,72,72,73,71,75,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,67,49,53,50,50,52,57,52],
[76,0,62,65,63,71,61,65,72,78],
[63,68,0,65,52,62,54,64,67,73],
[81,65,65,0,67,59,62,53,78,65],
[77,67,78,63,0,63,55,72,69,66],
[80,59,68,71,67,0,65,68,82,64],
[80,69,76,68,75,65,0,69,75,72],
[78,65,66,77,58,62,61,0,66,62],
[73,58,63,52,61,48,55,64,0,67],
[78,52,57,65,64,66,58,68,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,57,65,56,49,57,52,61,51],
[70,0,62,74,68,69,65,75,76,59],
[73,68,0,68,60,62,74,64,74,71],
[65,56,62,0,64,47,71,61,67,63],
[74,62,70,66,0,60,72,61,72,67],
[81,61,68,83,70,0,71,74,80,80],
[73,65,56,59,58,59,0,60,75,62],
[78,55,66,69,69,56,70,0,75,59],
[69,54,56,63,58,50,55,55,0,70],
[79,71,59,67,63,50,68,71,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,63,66,75,68,79,70,68],
[66,0,69,66,64,73,66,74,63,68],
[62,61,0,58,64,64,61,67,62,65],
[67,64,72,0,69,77,74,67,68,71],
[64,66,66,61,0,75,65,75,68,70],
[55,57,66,53,55,0,63,65,57,63],
[62,64,69,56,65,67,0,70,63,73],
[51,56,63,63,55,65,60,0,58,66],
[60,67,68,62,62,73,67,72,0,70],
[62,62,65,59,60,67,57,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,57,63,58,62,63,66,69,64],
[75,0,70,64,61,68,71,66,67,68],
[73,60,0,62,64,63,77,64,63,59],
[67,66,68,0,58,64,68,66,64,56],
[72,69,66,72,0,76,74,70,67,63],
[68,62,67,66,54,0,69,66,66,64],
[67,59,53,62,56,61,0,59,56,53],
[64,64,66,64,60,64,71,0,65,64],
[61,63,67,66,63,64,74,65,0,61],
[66,62,71,74,67,66,77,66,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,49,44,52,43,40,47,51,44],
[73,0,59,55,66,55,48,60,58,58],
[81,71,0,63,57,55,67,66,63,59],
[86,75,67,0,75,64,65,70,66,72],
[78,64,73,55,0,52,60,67,60,66],
[87,75,75,66,78,0,67,68,64,73],
[90,82,63,65,70,63,0,60,59,66],
[83,70,64,60,63,62,70,0,55,62],
[79,72,67,64,70,66,71,75,0,66],
[86,72,71,58,64,57,64,68,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,65,66,67,63,59,67,64,66],
[58,0,51,52,57,60,59,50,59,63],
[65,79,0,54,69,70,70,69,65,56],
[64,78,76,0,70,78,61,68,77,64],
[63,73,61,60,0,58,59,61,56,57],
[67,70,60,52,72,0,60,59,57,60],
[71,71,60,69,71,70,0,71,67,66],
[63,80,61,62,69,71,59,0,57,63],
[66,71,65,53,74,73,63,73,0,68],
[64,67,74,66,73,70,64,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,61,75,70,64,66,82,87],
[65,0,67,52,70,57,65,57,71,71],
[62,63,0,49,69,65,58,64,71,73],
[69,78,81,0,73,75,65,65,84,83],
[55,60,61,57,0,59,57,58,67,62],
[60,73,65,55,71,0,58,56,77,76],
[66,65,72,65,73,72,0,74,87,79],
[64,73,66,65,72,74,56,0,81,78],
[48,59,59,46,63,53,43,49,0,61],
[43,59,57,47,68,54,51,52,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,56,67,66,67,78,59,78,71],
[63,0,51,55,52,75,61,43,61,48],
[74,79,0,67,59,67,68,67,70,58],
[63,75,63,0,71,78,83,70,74,75],
[64,78,71,59,0,76,67,58,74,76],
[63,55,63,52,54,0,59,55,76,52],
[52,69,62,47,63,71,0,50,70,61],
[71,87,63,60,72,75,80,0,72,62],
[52,69,60,56,56,54,60,58,0,60],
[59,82,72,55,54,78,69,68,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,71,69,74,98,63,56,74,72],
[38,0,62,42,35,59,33,51,60,39],
[59,68,0,73,68,71,50,57,66,53],
[61,88,57,0,60,74,61,58,69,85],
[56,95,62,70,0,78,68,66,63,66],
[32,71,59,56,52,0,44,57,66,48],
[67,97,80,69,62,86,0,62,72,77],
[74,79,73,72,64,73,68,0,70,64],
[56,70,64,61,67,64,58,60,0,64],
[58,91,77,45,64,82,53,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,60,68,69,62,70,66,71,68],
[65,0,65,60,70,62,66,64,71,64],
[70,65,0,64,69,63,63,60,69,69],
[62,70,66,0,71,61,70,67,67,67],
[61,60,61,59,0,58,67,58,62,55],
[68,68,67,69,72,0,69,60,66,73],
[60,64,67,60,63,61,0,67,60,64],
[64,66,70,63,72,70,63,0,68,73],
[59,59,61,63,68,64,70,62,0,65],
[62,66,61,63,75,57,66,57,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,59,54,59,68,55,61,69,62],
[68,0,69,70,69,78,63,72,75,74],
[71,61,0,63,65,69,61,63,71,81],
[76,60,67,0,68,68,62,67,71,74],
[71,61,65,62,0,74,70,70,73,73],
[62,52,61,62,56,0,60,61,62,68],
[75,67,69,68,60,70,0,71,63,68],
[69,58,67,63,60,69,59,0,66,73],
[61,55,59,59,57,68,67,64,0,60],
[68,56,49,56,57,62,62,57,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,73,74,61,69,66,79,67,81],
[65,0,69,75,60,75,67,67,73,74],
[57,61,0,68,56,65,57,63,59,73],
[56,55,62,0,55,64,58,62,61,68],
[69,70,74,75,0,79,67,74,65,78],
[61,55,65,66,51,0,64,70,57,67],
[64,63,73,72,63,66,0,70,72,77],
[51,63,67,68,56,60,60,0,54,73],
[63,57,71,69,65,73,58,76,0,74],
[49,56,57,62,52,63,53,57,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,71,69,66,74,63,65,61,59],
[60,0,59,66,62,71,49,69,63,62],
[59,71,0,67,68,77,71,68,64,72],
[61,64,63,0,56,64,52,69,65,65],
[64,68,62,74,0,72,55,66,64,63],
[56,59,53,66,58,0,45,61,58,56],
[67,81,59,78,75,85,0,72,73,71],
[65,61,62,61,64,69,58,0,58,59],
[69,67,66,65,66,72,57,72,0,64],
[71,68,58,65,67,74,59,71,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,82,73,73,65,76,68,72,78],
[60,0,77,65,72,62,69,63,67,64],
[48,53,0,61,67,47,64,62,57,56],
[57,65,69,0,58,62,67,64,70,65],
[57,58,63,72,0,64,59,63,54,59],
[65,68,83,68,66,0,72,59,71,64],
[54,61,66,63,71,58,0,65,62,57],
[62,67,68,66,67,71,65,0,63,70],
[58,63,73,60,76,59,68,67,0,66],
[52,66,74,65,71,66,73,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,61,63,64,64,67,65,69],
[66,0,59,64,62,69,66,58,60,73],
[62,71,0,62,58,54,65,51,59,57],
[69,66,68,0,68,64,74,62,73,66],
[67,68,72,62,0,63,61,60,70,73],
[66,61,76,66,67,0,68,58,64,62],
[66,64,65,56,69,62,0,60,64,62],
[63,72,79,68,70,72,70,0,74,69],
[65,70,71,57,60,66,66,56,0,69],
[61,57,73,64,57,68,68,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,79,79,80,27,53,53,77,53],
[77,0,77,53,77,51,77,77,77,53],
[51,53,0,27,54,27,54,51,104,27],
[51,77,103,0,78,78,78,51,104,27],
[50,53,76,52,0,0,52,24,50,79],
[103,79,103,52,130,0,106,103,130,79],
[77,53,76,52,78,24,0,24,50,53],
[77,53,79,79,106,27,106,0,104,79],
[53,53,26,26,80,0,80,26,0,53],
[77,77,103,103,51,51,77,51,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,59,75,58,59,61,60,64,85],
[69,0,54,66,64,61,55,65,56,78],
[71,76,0,71,67,59,65,64,70,77],
[55,64,59,0,67,54,63,58,63,74],
[72,66,63,63,0,66,57,58,52,75],
[71,69,71,76,64,0,67,65,69,85],
[69,75,65,67,73,63,0,72,64,78],
[70,65,66,72,72,65,58,0,62,82],
[66,74,60,67,78,61,66,68,0,80],
[45,52,53,56,55,45,52,48,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,62,70,69,57,74,59,56,59],
[71,0,75,78,74,59,75,63,57,71],
[68,55,0,65,65,53,61,60,61,66],
[60,52,65,0,69,54,70,60,63,73],
[61,56,65,61,0,57,72,49,51,55],
[73,71,77,76,73,0,85,68,64,79],
[56,55,69,60,58,45,0,52,41,55],
[71,67,70,70,81,62,78,0,73,60],
[74,73,69,67,79,66,89,57,0,62],
[71,59,64,57,75,51,75,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,63,58,68,50,61,75,61,63],
[71,0,56,58,60,64,66,66,60,67],
[67,74,0,73,65,64,76,75,63,74],
[72,72,57,0,59,58,71,69,63,66],
[62,70,65,71,0,57,55,65,51,70],
[80,66,66,72,73,0,63,64,65,82],
[69,64,54,59,75,67,0,66,64,69],
[55,64,55,61,65,66,64,0,61,71],
[69,70,67,67,79,65,66,69,0,77],
[67,63,56,64,60,48,61,59,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,81,85,72,72,65,67,60,66],
[63,0,82,81,59,74,52,60,62,61],
[49,48,0,71,71,59,57,54,58,70],
[45,49,59,0,58,54,37,69,44,55],
[58,71,59,72,0,72,57,63,53,57],
[58,56,71,76,58,0,44,56,39,67],
[65,78,73,93,73,86,0,74,74,71],
[63,70,76,61,67,74,56,0,64,60],
[70,68,72,86,77,91,56,66,0,87],
[64,69,60,75,73,63,59,70,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,92,92,40,52,105,80,67,53],
[52,0,54,52,39,53,80,92,41,65],
[38,76,0,64,52,64,65,65,40,65],
[38,78,66,0,26,52,54,79,54,52],
[90,91,78,104,0,52,78,91,78,104],
[78,77,66,78,78,0,91,91,66,65],
[25,50,65,76,52,39,0,79,41,78],
[50,38,65,51,39,39,51,0,27,52],
[63,89,90,76,52,64,89,103,0,91],
[77,65,65,78,26,65,52,78,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,55,48,50,42,56,55,50,29],
[88,0,84,74,76,67,85,74,71,58],
[75,46,0,53,55,50,67,63,49,56],
[82,56,77,0,79,63,76,70,64,65],
[80,54,75,51,0,69,65,57,59,48],
[88,63,80,67,61,0,74,72,64,64],
[74,45,63,54,65,56,0,62,61,35],
[75,56,67,60,73,58,68,0,64,48],
[80,59,81,66,71,66,69,66,0,52],
[101,72,74,65,82,66,95,82,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,70,56,67,70,77,76,65,56],
[68,0,71,73,62,74,75,75,63,60],
[60,59,0,63,69,67,72,61,67,64],
[74,57,67,0,64,72,83,78,68,66],
[63,68,61,66,0,65,70,73,61,67],
[60,56,63,58,65,0,64,72,67,58],
[53,55,58,47,60,66,0,60,52,52],
[54,55,69,52,57,58,70,0,55,50],
[65,67,63,62,69,63,78,75,0,62],
[74,70,66,64,63,72,78,80,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,67,74,63,74,62,69,61],
[61,0,76,64,73,61,62,65,70,61],
[65,54,0,67,67,58,67,56,68,55],
[63,66,63,0,72,59,69,65,70,54],
[56,57,63,58,0,55,61,61,68,56],
[67,69,72,71,75,0,68,63,73,63],
[56,68,63,61,69,62,0,60,73,55],
[68,65,74,65,69,67,70,0,68,66],
[61,60,62,60,62,57,57,62,0,52],
[69,69,75,76,74,67,75,64,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,64,57,58,71,65,65,82],
[63,0,51,63,56,59,72,58,57,65],
[66,79,0,73,59,60,83,73,57,74],
[66,67,57,0,57,59,58,56,57,62],
[73,74,71,73,0,65,70,76,71,71],
[72,71,70,71,65,0,78,63,70,81],
[59,58,47,72,60,52,0,51,59,67],
[65,72,57,74,54,67,79,0,66,70],
[65,73,73,73,59,60,71,64,0,77],
[48,65,56,68,59,49,63,60,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,99,67,65,65,99,99,34],
[63,0,64,130,98,32,96,130,130,31],
[63,66,0,97,34,32,32,99,99,31],
[31,0,33,0,67,0,33,99,67,31],
[63,32,96,63,0,32,32,130,130,63],
[65,98,98,130,98,0,130,130,130,65],
[65,34,98,97,98,0,0,130,98,65],
[31,0,31,31,0,0,0,0,0,31],
[31,0,31,63,0,0,32,130,0,31],
[96,99,99,99,67,65,65,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,72,66,64,70,71,59,71,60],
[74,0,68,74,63,64,78,62,65,65],
[58,62,0,64,64,55,69,67,68,63],
[64,56,66,0,68,55,74,55,67,60],
[66,67,66,62,0,59,73,55,69,63],
[60,66,75,75,71,0,75,62,68,68],
[59,52,61,56,57,55,0,47,55,50],
[71,68,63,75,75,68,83,0,76,61],
[59,65,62,63,61,62,75,54,0,61],
[70,65,67,70,67,62,80,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,74,61,71,69,65,66,70,66],
[69,0,62,70,79,60,67,67,67,73],
[56,68,0,63,73,60,59,67,61,53],
[69,60,67,0,78,72,64,51,59,70],
[59,51,57,52,0,56,54,60,56,57],
[61,70,70,58,74,0,60,57,69,60],
[65,63,71,66,76,70,0,71,67,66],
[64,63,63,79,70,73,59,0,67,72],
[60,63,69,71,74,61,63,63,0,63],
[64,57,77,60,73,70,64,58,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,69,67,70,87,65,70,81,59],
[67,0,67,78,74,94,58,73,73,82],
[61,63,0,74,66,90,50,52,68,64],
[63,52,56,0,59,74,60,76,62,58],
[60,56,64,71,0,75,69,60,72,65],
[43,36,40,56,55,0,47,48,60,54],
[65,72,80,70,61,83,0,67,88,71],
[60,57,78,54,70,82,63,0,83,65],
[49,57,62,68,58,70,42,47,0,61],
[71,48,66,72,65,76,59,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,76,66,69,61,71,69,64,74],
[68,0,65,62,64,61,69,64,65,68],
[54,65,0,65,66,65,60,63,61,65],
[64,68,65,0,69,70,76,68,59,77],
[61,66,64,61,0,69,71,66,64,66],
[69,69,65,60,61,0,60,68,65,66],
[59,61,70,54,59,70,0,68,70,71],
[61,66,67,62,64,62,62,0,62,72],
[66,65,69,71,66,65,60,68,0,65],
[56,62,65,53,64,64,59,58,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,52,82,60,52,70,54,73,67],
[61,0,56,72,62,50,58,54,63,66],
[78,74,0,88,67,69,79,65,92,83],
[48,58,42,0,57,50,55,51,65,57],
[70,68,63,73,0,74,72,59,70,72],
[78,80,61,80,56,0,65,57,81,70],
[60,72,51,75,58,65,0,60,74,65],
[76,76,65,79,71,73,70,0,87,79],
[57,67,38,65,60,49,56,43,0,63],
[63,64,47,73,58,60,65,51,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,61,67,54,67,60,73,68,56],
[66,0,61,61,58,66,57,64,71,56],
[69,69,0,72,60,70,63,69,75,65],
[63,69,58,0,54,70,67,74,69,64],
[76,72,70,76,0,74,68,78,78,64],
[63,64,60,60,56,0,59,63,62,59],
[70,73,67,63,62,71,0,73,67,61],
[57,66,61,56,52,67,57,0,57,53],
[62,59,55,61,52,68,63,73,0,58],
[74,74,65,66,66,71,69,77,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,72,72,96,84,48,95,72],
[70,0,106,82,58,95,72,59,82,82],
[70,24,0,59,47,83,60,47,71,59],
[58,48,71,0,82,72,83,60,59,81],
[58,72,83,48,0,60,72,35,59,58],
[34,35,47,58,70,0,83,70,71,58],
[46,58,70,47,58,47,0,58,83,82],
[82,71,83,70,95,60,72,0,59,70],
[35,48,59,71,71,59,47,71,0,71],
[58,48,71,49,72,72,48,60,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,75,63,75,79,76,81,94,75],
[62,0,77,76,66,86,77,83,76,80],
[55,53,0,61,66,64,54,66,70,74],
[67,54,69,0,62,72,71,77,67,68],
[55,64,64,68,0,76,75,61,73,73],
[51,44,66,58,54,0,64,74,63,60],
[54,53,76,59,55,66,0,64,76,54],
[49,47,64,53,69,56,66,0,72,73],
[36,54,60,63,57,67,54,58,0,54],
[55,50,56,62,57,70,76,57,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,65,71,57,63,63,59,59,60],
[67,0,66,64,59,58,66,60,54,55],
[65,64,0,66,53,68,63,64,64,67],
[59,66,64,0,54,66,68,58,62,62],
[73,71,77,76,0,79,72,67,65,73],
[67,72,62,64,51,0,69,61,55,69],
[67,64,67,62,58,61,0,62,62,63],
[71,70,66,72,63,69,68,0,61,74],
[71,76,66,68,65,75,68,69,0,68],
[70,75,63,68,57,61,67,56,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,50,66,56,66,54,62,60,52],
[79,0,58,69,63,67,67,69,66,57],
[80,72,0,70,70,71,70,74,73,63],
[64,61,60,0,61,59,66,65,60,52],
[74,67,60,69,0,61,65,65,60,58],
[64,63,59,71,69,0,63,65,66,63],
[76,63,60,64,65,67,0,70,67,62],
[68,61,56,65,65,65,60,0,64,60],
[70,64,57,70,70,64,63,66,0,65],
[78,73,67,78,72,67,68,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,58,75,62,53,59,61,59,68],
[58,0,67,65,57,56,56,61,51,55],
[72,63,0,76,69,50,62,66,55,63],
[55,65,54,0,56,52,57,56,51,54],
[68,73,61,74,0,57,55,70,67,63],
[77,74,80,78,73,0,65,70,63,72],
[71,74,68,73,75,65,0,74,68,75],
[69,69,64,74,60,60,56,0,68,61],
[71,79,75,79,63,67,62,62,0,74],
[62,75,67,76,67,58,55,69,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,56,69,66,56,54,48,57,62],
[72,0,70,65,63,62,70,60,71,74],
[74,60,0,67,62,61,64,58,62,67],
[61,65,63,0,56,57,59,49,63,74],
[64,67,68,74,0,56,62,61,65,69],
[74,68,69,73,74,0,65,66,68,75],
[76,60,66,71,68,65,0,64,69,71],
[82,70,72,81,69,64,66,0,68,78],
[73,59,68,67,65,62,61,62,0,69],
[68,56,63,56,61,55,59,52,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,50,73,66,73,69,65,70,72],
[64,0,55,65,61,74,61,61,73,60],
[80,75,0,70,57,86,67,71,73,76],
[57,65,60,0,60,78,55,60,66,58],
[64,69,73,70,0,67,67,68,71,80],
[57,56,44,52,63,0,51,56,54,56],
[61,69,63,75,63,79,0,64,74,72],
[65,69,59,70,62,74,66,0,65,64],
[60,57,57,64,59,76,56,65,0,55],
[58,70,54,72,50,74,58,66,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,58,64,64,60,75,67,63,49],
[75,0,70,64,77,74,74,72,73,62],
[72,60,0,69,70,64,68,65,70,65],
[66,66,61,0,73,82,80,72,70,66],
[66,53,60,57,0,64,59,74,65,56],
[70,56,66,48,66,0,66,59,62,51],
[55,56,62,50,71,64,0,65,63,50],
[63,58,65,58,56,71,65,0,73,57],
[67,57,60,60,65,68,67,57,0,63],
[81,68,65,64,74,79,80,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,41,65,44,59,57,68,95,59],
[85,0,62,78,71,86,62,89,75,79],
[89,68,0,53,41,90,79,79,95,72],
[65,52,77,0,56,76,60,62,65,72],
[86,59,89,74,0,79,71,96,80,83],
[71,44,40,54,51,0,47,66,62,71],
[73,68,51,70,59,83,0,100,88,90],
[62,41,51,68,34,64,30,0,62,73],
[35,55,35,65,50,68,42,68,0,63],
[71,51,58,58,47,59,40,57,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,80,74,71,71,70,58,63,63],
[58,0,75,63,66,66,67,50,64,65],
[50,55,0,61,61,49,47,49,62,40],
[56,67,69,0,65,56,74,52,70,61],
[59,64,69,65,0,63,62,48,70,57],
[59,64,81,74,67,0,65,64,63,61],
[60,63,83,56,68,65,0,55,75,53],
[72,80,81,78,82,66,75,0,77,65],
[67,66,68,60,60,67,55,53,0,44],
[67,65,90,69,73,69,77,65,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,72,86,71,58,64,71,74,87],
[57,0,56,50,63,58,48,71,57,57],
[58,74,0,94,87,57,71,87,82,81],
[44,80,36,0,51,38,55,58,43,57],
[59,67,43,79,0,74,63,72,74,72],
[72,72,73,92,56,0,72,73,80,79],
[66,82,59,75,67,58,0,79,75,73],
[59,59,43,72,58,57,51,0,68,74],
[56,73,48,87,56,50,55,62,0,72],
[43,73,49,73,58,51,57,56,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,65,73,69,68,72,74,71,58],
[62,0,73,68,71,68,74,73,71,62],
[65,57,0,79,65,69,59,71,71,62],
[57,62,51,0,57,67,59,63,59,53],
[61,59,65,73,0,63,72,77,75,65],
[62,62,61,63,67,0,64,67,60,62],
[58,56,71,71,58,66,0,72,59,55],
[56,57,59,67,53,63,58,0,65,60],
[59,59,59,71,55,70,71,65,0,66],
[72,68,68,77,65,68,75,70,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,58,66,66,68,58,61,66],
[71,0,74,62,73,82,80,67,70,67],
[65,56,0,59,61,73,70,62,64,60],
[72,68,71,0,70,74,76,64,68,65],
[64,57,69,60,0,65,74,68,67,64],
[64,48,57,56,65,0,72,55,57,62],
[62,50,60,54,56,58,0,47,58,63],
[72,63,68,66,62,75,83,0,66,67],
[69,60,66,62,63,73,72,64,0,67],
[64,63,70,65,66,68,67,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,74,65,60,71,72,66,60,71],
[53,0,54,59,56,58,52,52,47,63],
[56,76,0,67,59,62,71,59,53,75],
[65,71,63,0,65,71,64,70,57,66],
[70,74,71,65,0,71,66,66,55,75],
[59,72,68,59,59,0,64,69,59,67],
[58,78,59,66,64,66,0,64,59,72],
[64,78,71,60,64,61,66,0,66,67],
[70,83,77,73,75,71,71,64,0,69],
[59,67,55,64,55,63,58,63,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,72,62,69,64,71,60,65],
[69,0,65,68,67,63,62,70,65,67],
[63,65,0,75,56,58,64,72,67,63],
[58,62,55,0,63,60,62,66,65,61],
[68,63,74,67,0,64,67,70,65,67],
[61,67,72,70,66,0,63,73,68,64],
[66,68,66,68,63,67,0,75,60,69],
[59,60,58,64,60,57,55,0,56,62],
[70,65,63,65,65,62,70,74,0,69],
[65,63,67,69,63,66,61,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,78,71,76,76,65,65,68,70],
[60,0,71,65,64,72,63,58,65,71],
[52,59,0,72,60,53,59,57,56,50],
[59,65,58,0,69,61,58,55,57,64],
[54,66,70,61,0,61,57,55,69,66],
[54,58,77,69,69,0,62,64,57,59],
[65,67,71,72,73,68,0,65,70,66],
[65,72,73,75,75,66,65,0,64,62],
[62,65,74,73,61,73,60,66,0,58],
[60,59,80,66,64,71,64,68,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,68,68,66,65,72,51,60],
[64,0,63,67,64,66,67,71,53,60],
[68,67,0,80,67,63,67,67,61,58],
[62,63,50,0,60,62,55,62,52,56],
[62,66,63,70,0,61,68,70,65,64],
[64,64,67,68,69,0,71,69,55,63],
[65,63,63,75,62,59,0,62,58,61],
[58,59,63,68,60,61,68,0,52,65],
[79,77,69,78,65,75,72,78,0,66],
[70,70,72,74,66,67,69,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,66,73,76,84,72,75,67],
[67,0,74,69,70,68,76,56,66,70],
[59,56,0,58,66,60,79,52,75,57],
[64,61,72,0,70,66,87,50,75,57],
[57,60,64,60,0,62,75,63,73,56],
[54,62,70,64,68,0,81,47,69,58],
[46,54,51,43,55,49,0,42,43,48],
[58,74,78,80,67,83,88,0,75,64],
[55,64,55,55,57,61,87,55,0,45],
[63,60,73,73,74,72,82,66,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,82,71,69,69,61,64,80,59],
[48,0,81,60,71,66,57,68,78,47],
[48,49,0,43,61,63,38,64,71,48],
[59,70,87,0,68,67,68,72,85,69],
[61,59,69,62,0,73,47,69,69,54],
[61,64,67,63,57,0,48,70,77,51],
[69,73,92,62,83,82,0,62,80,62],
[66,62,66,58,61,60,68,0,86,54],
[50,52,59,45,61,53,50,44,0,47],
[71,83,82,61,76,79,68,76,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,62,57,80,77,85,67,83,81],
[76,0,56,74,83,52,84,73,75,73],
[68,74,0,54,78,50,78,80,78,66],
[73,56,76,0,74,66,89,84,78,67],
[50,47,52,56,0,56,72,60,68,63],
[53,78,80,64,74,0,78,74,78,76],
[45,46,52,41,58,52,0,56,48,48],
[63,57,50,46,70,56,74,0,70,57],
[47,55,52,52,62,52,82,60,0,62],
[49,57,64,63,67,54,82,73,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,56,64,67,50,54,68,69],
[61,0,60,60,69,64,52,62,68,62],
[63,70,0,61,76,68,57,67,69,70],
[74,70,69,0,71,68,52,60,69,76],
[66,61,54,59,0,64,56,58,67,69],
[63,66,62,62,66,0,51,53,65,58],
[80,78,73,78,74,79,0,64,76,80],
[76,68,63,70,72,77,66,0,66,76],
[62,62,61,61,63,65,54,64,0,64],
[61,68,60,54,61,72,50,54,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,60,65,60,56,55,61,61,57],
[67,0,61,67,65,63,66,63,65,62],
[70,69,0,66,64,64,58,62,61,62],
[65,63,64,0,62,60,55,68,61,64],
[70,65,66,68,0,61,63,66,60,61],
[74,67,66,70,69,0,61,64,65,67],
[75,64,72,75,67,69,0,66,63,71],
[69,67,68,62,64,66,64,0,62,62],
[69,65,69,69,70,65,67,68,0,67],
[73,68,68,66,69,63,59,68,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,66,65,64,72,67,64,65],
[61,0,67,66,57,64,65,74,63,56],
[63,63,0,57,60,58,64,62,63,63],
[64,64,73,0,58,68,69,64,68,59],
[65,73,70,72,0,68,69,69,63,63],
[66,66,72,62,62,0,71,64,66,66],
[58,65,66,61,61,59,0,62,58,59],
[63,56,68,66,61,66,68,0,59,66],
[66,67,67,62,67,64,72,71,0,64],
[65,74,67,71,67,64,71,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,57,79,66,74,64,69,65],
[61,0,50,50,74,46,66,69,64,55],
[61,80,0,72,77,67,67,75,61,70],
[73,80,58,0,87,64,71,80,70,72],
[51,56,53,43,0,52,61,66,53,50],
[64,84,63,66,78,0,69,69,71,69],
[56,64,63,59,69,61,0,67,55,54],
[66,61,55,50,64,61,63,0,55,64],
[61,66,69,60,77,59,75,75,0,66],
[65,75,60,58,80,61,76,66,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,18,44,42,51,40,52,47,54],
[70,0,50,63,81,75,72,70,89,61],
[112,80,0,94,92,67,89,71,79,65],
[86,67,36,0,77,42,86,60,77,58],
[88,49,38,53,0,52,59,71,88,42],
[79,55,63,88,78,0,86,55,76,66],
[90,58,41,44,71,44,0,40,89,34],
[78,60,59,70,59,75,90,0,78,59],
[83,41,51,53,42,54,41,52,0,53],
[76,69,65,72,88,64,96,71,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,56,59,58,58,48,61,53,67],
[73,0,62,69,66,61,56,72,61,73],
[74,68,0,69,55,60,54,62,51,62],
[71,61,61,0,48,63,62,70,54,59],
[72,64,75,82,0,67,57,71,57,68],
[72,69,70,67,63,0,68,70,65,63],
[82,74,76,68,73,62,0,67,63,70],
[69,58,68,60,59,60,63,0,58,60],
[77,69,79,76,73,65,67,72,0,72],
[63,57,68,71,62,67,60,70,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,49,70,83,53,67,65,62,50],
[78,0,80,58,82,61,74,85,78,73],
[81,50,0,72,84,60,62,74,73,60],
[60,72,58,0,74,49,69,72,72,57],
[47,48,46,56,0,54,64,62,49,59],
[77,69,70,81,76,0,70,71,81,63],
[63,56,68,61,66,60,0,76,75,59],
[65,45,56,58,68,59,54,0,62,57],
[68,52,57,58,81,49,55,68,0,52],
[80,57,70,73,71,67,71,73,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,70,55,56,60,68,59,63,66],
[74,0,68,66,66,69,71,64,71,72],
[60,62,0,56,60,69,62,60,68,66],
[75,64,74,0,60,66,70,64,65,69],
[74,64,70,70,0,72,71,73,69,73],
[70,61,61,64,58,0,62,65,58,62],
[62,59,68,60,59,68,0,58,61,64],
[71,66,70,66,57,65,72,0,62,67],
[67,59,62,65,61,72,69,68,0,66],
[64,58,64,61,57,68,66,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,59,66,62,76,68,70,62,74],
[73,0,68,71,69,62,79,66,66,80],
[71,62,0,74,75,62,75,73,71,77],
[64,59,56,0,71,63,74,72,56,74],
[68,61,55,59,0,65,77,65,60,69],
[54,68,68,67,65,0,66,68,65,66],
[62,51,55,56,53,64,0,71,51,66],
[60,64,57,58,65,62,59,0,53,62],
[68,64,59,74,70,65,79,77,0,74],
[56,50,53,56,61,64,64,68,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,76,74,75,71,57,51,65,68],
[61,0,73,69,59,58,60,58,65,59],
[54,57,0,42,50,56,50,39,39,37],
[56,61,88,0,68,66,69,62,49,57],
[55,71,80,62,0,63,66,46,53,52],
[59,72,74,64,67,0,58,58,51,56],
[73,70,80,61,64,72,0,65,53,53],
[79,72,91,68,84,72,65,0,57,81],
[65,65,91,81,77,79,77,73,0,66],
[62,71,93,73,78,74,77,49,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,64,69,64,69,75,71,60,71],
[55,0,53,48,53,53,60,55,57,51],
[66,77,0,71,65,62,74,72,63,78],
[61,82,59,0,54,59,71,60,64,62],
[66,77,65,76,0,68,79,69,66,71],
[61,77,68,71,62,0,73,69,66,74],
[55,70,56,59,51,57,0,54,53,61],
[59,75,58,70,61,61,76,0,66,62],
[70,73,67,66,64,64,77,64,0,81],
[59,79,52,68,59,56,69,68,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,63,74,69,65,72,72,73,68],
[71,0,59,59,61,59,67,73,67,58],
[67,71,0,75,69,62,71,79,75,68],
[56,71,55,0,64,62,70,68,74,61],
[61,69,61,66,0,66,65,80,72,68],
[65,71,68,68,64,0,69,78,75,64],
[58,63,59,60,65,61,0,70,72,58],
[58,57,51,62,50,52,60,0,58,60],
[57,63,55,56,58,55,58,72,0,57],
[62,72,62,69,62,66,72,70,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,64,63,52,70,63,67,67,35],
[57,0,45,50,41,52,34,55,53,46],
[66,85,0,66,73,68,66,58,52,62],
[67,80,64,0,50,83,66,53,58,50],
[78,89,57,80,0,90,75,63,62,64],
[60,78,62,47,40,0,61,72,59,37],
[67,96,64,64,55,69,0,66,68,66],
[63,75,72,77,67,58,64,0,65,62],
[63,77,78,72,68,71,62,65,0,50],
[95,84,68,80,66,93,64,68,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,63,45,66,60,53,47,57,50],
[83,0,69,75,69,75,49,64,61,62],
[67,61,0,58,58,70,50,58,57,65],
[85,55,72,0,68,77,51,69,50,59],
[64,61,72,62,0,59,58,60,50,71],
[70,55,60,53,71,0,58,58,57,55],
[77,81,80,79,72,72,0,65,66,72],
[83,66,72,61,70,72,65,0,65,63],
[73,69,73,80,80,73,64,65,0,69],
[80,68,65,71,59,75,58,67,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,79,64,91,78,73,77,69,84],
[61,0,61,64,65,54,78,73,59,70],
[51,69,0,62,74,68,75,65,65,76],
[66,66,68,0,71,75,76,62,63,81],
[39,65,56,59,0,59,62,60,55,70],
[52,76,62,55,71,0,68,68,61,73],
[57,52,55,54,68,62,0,51,53,72],
[53,57,65,68,70,62,79,0,72,78],
[61,71,65,67,75,69,77,58,0,69],
[46,60,54,49,60,57,58,52,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,50,51,89,63,91,65,67,39],
[92,0,54,64,78,62,93,65,64,50],
[80,76,0,64,78,76,102,64,78,52],
[79,66,66,0,90,51,79,39,81,51],
[41,52,52,40,0,54,64,52,54,28],
[67,68,54,79,76,0,79,41,70,41],
[39,37,28,51,66,51,0,52,65,39],
[65,65,66,91,78,89,78,0,65,65],
[63,66,52,49,76,60,65,65,0,36],
[91,80,78,79,102,89,91,65,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,90,90,69,106,65,40,66,66],
[53,0,78,66,68,65,52,51,66,52],
[40,52,0,77,53,66,38,25,53,53],
[40,64,53,0,41,40,25,51,52,40],
[61,62,77,89,0,88,51,50,76,51],
[24,65,64,90,42,0,53,38,53,52],
[65,78,92,105,79,77,0,78,93,66],
[90,79,105,79,80,92,52,0,104,67],
[64,64,77,78,54,77,37,26,0,65],
[64,78,77,90,79,78,64,63,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,75,69,78,67,61,71,60,72],
[68,0,53,56,66,59,55,81,51,51],
[55,77,0,58,65,58,65,73,54,52],
[61,74,72,0,76,57,67,81,59,64],
[52,64,65,54,0,57,58,74,59,59],
[63,71,72,73,73,0,61,75,67,63],
[69,75,65,63,72,69,0,71,65,55],
[59,49,57,49,56,55,59,0,48,52],
[70,79,76,71,71,63,65,82,0,71],
[58,79,78,66,71,67,75,78,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,60,64,70,65,65,60,77,65],
[65,0,60,57,66,62,67,52,70,52],
[70,70,0,69,82,70,73,64,77,74],
[66,73,61,0,70,64,69,57,71,68],
[60,64,48,60,0,75,58,56,71,55],
[65,68,60,66,55,0,69,58,70,56],
[65,63,57,61,72,61,0,63,72,66],
[70,78,66,73,74,72,67,0,65,70],
[53,60,53,59,59,60,58,65,0,64],
[65,78,56,62,75,74,64,60,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,60,52,71,46,68,72,66,61],
[77,0,67,62,62,74,82,62,66,51],
[70,63,0,62,62,73,70,61,55,39],
[78,68,68,0,63,59,68,67,77,67],
[59,68,68,67,0,49,73,68,72,57],
[84,56,57,71,81,0,72,71,60,56],
[62,48,60,62,57,58,0,67,63,62],
[58,68,69,63,62,59,63,0,65,47],
[64,64,75,53,58,70,67,65,0,53],
[69,79,91,63,73,74,68,83,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,66,60,68,63,60,72,69,66],
[72,0,81,70,73,64,83,87,65,76],
[64,49,0,62,67,63,62,72,53,53],
[70,60,68,0,72,65,76,75,74,71],
[62,57,63,58,0,56,66,69,57,62],
[67,66,67,65,74,0,74,74,68,73],
[70,47,68,54,64,56,0,67,63,56],
[58,43,58,55,61,56,63,0,52,55],
[61,65,77,56,73,62,67,78,0,64],
[64,54,77,59,68,57,74,75,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,75,53,71,60,71,70,65,76],
[77,0,69,85,70,65,61,80,51,78],
[55,61,0,57,68,44,54,61,56,79],
[77,45,73,0,74,51,74,71,68,68],
[59,60,62,56,0,35,73,50,45,60],
[70,65,86,79,95,0,72,77,62,70],
[59,69,76,56,57,58,0,60,52,57],
[60,50,69,59,80,53,70,0,65,73],
[65,79,74,62,85,68,78,65,0,79],
[54,52,51,62,70,60,73,57,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,54,51,67,51,66,39,52,52],
[91,0,79,88,80,91,91,79,39,64],
[76,51,0,51,66,38,65,38,51,52],
[79,42,79,0,42,79,67,42,53,79],
[63,50,64,88,0,63,64,25,51,64],
[79,39,92,51,67,0,52,53,53,53],
[64,39,65,63,66,78,0,41,51,52],
[91,51,92,88,105,77,89,0,64,51],
[78,91,79,77,79,77,79,66,0,65],
[78,66,78,51,66,77,78,79,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,70,60,65,68,63,67,68],
[66,0,63,67,64,67,66,74,60,73],
[63,67,0,69,67,69,72,59,71,74],
[60,63,61,0,63,61,63,60,61,62],
[70,66,63,67,0,64,73,63,65,69],
[65,63,61,69,66,0,67,61,69,76],
[62,64,58,67,57,63,0,61,58,68],
[67,56,71,70,67,69,69,0,64,68],
[63,70,59,69,65,61,72,66,0,64],
[62,57,56,68,61,54,62,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,53,68,62,61,57,59,53,70],
[74,0,60,72,64,60,59,69,65,65],
[77,70,0,66,71,67,72,78,65,79],
[62,58,64,0,62,55,68,70,61,69],
[68,66,59,68,0,64,66,70,54,66],
[69,70,63,75,66,0,70,69,72,78],
[73,71,58,62,64,60,0,76,69,84],
[71,61,52,60,60,61,54,0,49,57],
[77,65,65,69,76,58,61,81,0,67],
[60,65,51,61,64,52,46,73,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,51,73,79,75,74,79,68],
[61,0,48,45,48,76,74,63,62,62],
[63,82,0,65,77,72,63,71,79,59],
[79,85,65,0,72,82,72,85,79,76],
[57,82,53,58,0,62,76,73,68,63],
[51,54,58,48,68,0,67,88,64,67],
[55,56,67,58,54,63,0,63,68,57],
[56,67,59,45,57,42,67,0,54,56],
[51,68,51,51,62,66,62,76,0,61],
[62,68,71,54,67,63,73,74,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,95,81,63,59,59,54,75,61],
[71,0,65,80,69,51,85,68,89,59],
[35,65,0,52,56,35,57,36,82,37],
[49,50,78,0,57,56,70,52,71,36],
[67,61,74,73,0,59,66,59,67,59],
[71,79,95,74,71,0,80,62,104,67],
[71,45,73,60,64,50,0,60,75,52],
[76,62,94,78,71,68,70,0,107,70],
[55,41,48,59,63,26,55,23,0,49],
[69,71,93,94,71,63,78,60,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,70,54,65,63,52,67,56],
[66,0,81,83,61,70,84,68,78,64],
[62,49,0,72,50,57,53,53,64,63],
[60,47,58,0,45,52,48,56,58,56],
[76,69,80,85,0,69,66,62,73,80],
[65,60,73,78,61,0,59,54,73,62],
[67,46,77,82,64,71,0,55,75,70],
[78,62,77,74,68,76,75,0,79,70],
[63,52,66,72,57,57,55,51,0,55],
[74,66,67,74,50,68,60,60,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,74,67,66,66,63,62,64,63],
[65,0,59,66,64,54,64,64,66,68],
[56,71,0,65,70,55,61,57,72,64],
[63,64,65,0,68,62,68,64,69,65],
[64,66,60,62,0,60,58,69,61,64],
[64,76,75,68,70,0,70,71,74,67],
[67,66,69,62,72,60,0,72,67,65],
[68,66,73,66,61,59,58,0,57,59],
[66,64,58,61,69,56,63,73,0,59],
[67,62,66,65,66,63,65,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,65,62,71,53,75,67,54,60],
[59,0,58,55,55,65,64,67,53,64],
[65,72,0,64,57,64,72,63,59,72],
[68,75,66,0,71,71,74,62,68,79],
[59,75,73,59,0,69,64,62,57,76],
[77,65,66,59,61,0,71,62,72,69],
[55,66,58,56,66,59,0,58,59,69],
[63,63,67,68,68,68,72,0,69,61],
[76,77,71,62,73,58,71,61,0,71],
[70,66,58,51,54,61,61,69,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,59,45,66,67,61,59,61,59],
[90,0,91,60,78,76,89,76,68,76],
[71,39,0,46,57,57,62,50,49,58],
[85,70,84,0,80,79,81,62,70,87],
[64,52,73,50,0,54,73,65,57,58],
[63,54,73,51,76,0,67,51,52,63],
[69,41,68,49,57,63,0,63,53,56],
[71,54,80,68,65,79,67,0,64,65],
[69,62,81,60,73,78,77,66,0,61],
[71,54,72,43,72,67,74,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,59,66,51,60,62,60,67,54],
[73,0,60,69,61,68,74,65,70,78],
[71,70,0,65,67,70,73,70,67,67],
[64,61,65,0,63,65,69,65,70,63],
[79,69,63,67,0,66,71,68,70,73],
[70,62,60,65,64,0,69,64,63,60],
[68,56,57,61,59,61,0,55,68,63],
[70,65,60,65,62,66,75,0,71,64],
[63,60,63,60,60,67,62,59,0,57],
[76,52,63,67,57,70,67,66,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,52,35,65,44,54,55,57,63],
[86,0,56,65,81,70,74,81,62,80],
[78,74,0,52,92,63,77,95,56,75],
[95,65,78,0,96,76,80,89,70,85],
[65,49,38,34,0,58,70,73,61,82],
[86,60,67,54,72,0,68,82,68,73],
[76,56,53,50,60,62,0,75,73,66],
[75,49,35,41,57,48,55,0,56,63],
[73,68,74,60,69,62,57,74,0,85],
[67,50,55,45,48,57,64,67,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,48,83,71,58,48,46,58,70],
[59,0,49,35,72,48,47,35,35,34],
[82,81,0,46,72,71,71,69,46,57],
[47,95,84,0,72,59,49,23,82,71],
[59,58,58,58,0,58,72,58,33,57],
[72,82,59,71,72,0,48,59,35,35],
[82,83,59,81,58,82,0,47,45,57],
[84,95,61,107,72,71,83,0,71,71],
[72,95,84,48,97,95,85,59,0,70],
[60,96,73,59,73,95,73,59,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,56,63,61,66,64,59,67,62],
[64,0,63,66,69,66,73,72,68,70],
[74,67,0,62,67,68,70,77,67,73],
[67,64,68,0,66,70,60,61,65,64],
[69,61,63,64,0,63,66,64,64,75],
[64,64,62,60,67,0,64,64,63,60],
[66,57,60,70,64,66,0,62,65,59],
[71,58,53,69,66,66,68,0,65,66],
[63,62,63,65,66,67,65,65,0,56],
[68,60,57,66,55,70,71,64,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,55,58,72,65,75,67,67,80],
[58,0,58,59,67,64,67,63,64,67],
[75,72,0,59,74,65,72,72,71,87],
[72,71,71,0,71,67,84,63,70,77],
[58,63,56,59,0,67,65,61,69,80],
[65,66,65,63,63,0,78,66,71,73],
[55,63,58,46,65,52,0,54,55,67],
[63,67,58,67,69,64,76,0,61,74],
[63,66,59,60,61,59,75,69,0,66],
[50,63,43,53,50,57,63,56,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,67,45,58,58,59,56,65,63],
[74,0,74,65,70,69,72,78,82,70],
[63,56,0,50,57,59,58,59,72,61],
[85,65,80,0,72,77,74,69,80,75],
[72,60,73,58,0,60,65,72,68,58],
[72,61,71,53,70,0,60,66,70,63],
[71,58,72,56,65,70,0,68,81,61],
[74,52,71,61,58,64,62,0,67,63],
[65,48,58,50,62,60,49,63,0,59],
[67,60,69,55,72,67,69,67,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,59,70,71,65,68,66,66,72],
[64,0,60,69,61,61,63,63,60,73],
[71,70,0,69,64,68,68,61,67,72],
[60,61,61,0,56,54,55,59,64,67],
[59,69,66,74,0,65,69,57,67,68],
[65,69,62,76,65,0,69,63,62,68],
[62,67,62,75,61,61,0,63,62,68],
[64,67,69,71,73,67,67,0,72,71],
[64,70,63,66,63,68,68,58,0,76],
[58,57,58,63,62,62,62,59,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,74,61,68,62,69,71,64],
[65,0,70,75,64,71,63,66,74,69],
[63,60,0,72,58,60,60,62,66,67],
[56,55,58,0,57,64,53,60,69,58],
[69,66,72,73,0,72,65,70,75,72],
[62,59,70,66,58,0,64,62,76,63],
[68,67,70,77,65,66,0,74,72,68],
[61,64,68,70,60,68,56,0,71,67],
[59,56,64,61,55,54,58,59,0,58],
[66,61,63,72,58,67,62,63,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,62,65,58,61,61,60,62],
[71,0,72,62,76,64,70,65,69,65],
[65,58,0,60,65,64,61,63,59,67],
[68,68,70,0,59,56,65,63,65,69],
[65,54,65,71,0,52,61,59,59,68],
[72,66,66,74,78,0,65,68,67,66],
[69,60,69,65,69,65,0,62,66,74],
[69,65,67,67,71,62,68,0,65,69],
[70,61,71,65,71,63,64,65,0,65],
[68,65,63,61,62,64,56,61,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,77,67,73,53,68,57,65,61],
[94,0,83,72,83,61,63,68,92,76],
[53,47,0,57,70,49,47,60,65,55],
[63,58,73,0,71,54,60,65,74,57],
[57,47,60,59,0,47,53,48,71,57],
[77,69,81,76,83,0,72,57,87,76],
[62,67,83,70,77,58,0,72,79,66],
[73,62,70,65,82,73,58,0,76,64],
[65,38,65,56,59,43,51,54,0,59],
[69,54,75,73,73,54,64,66,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,68,39,77,56,66,49,55,54],
[49,0,59,70,72,52,82,50,65,78],
[62,71,0,55,61,63,87,78,66,61],
[91,60,75,0,65,65,82,73,73,72],
[53,58,69,65,0,56,66,64,65,49],
[74,78,67,65,74,0,81,54,79,42],
[64,48,43,48,64,49,0,34,63,55],
[81,80,52,57,66,76,96,0,81,64],
[75,65,64,57,65,51,67,49,0,42],
[76,52,69,58,81,88,75,66,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,73,69,86,71,74,63,62,74],
[46,0,52,57,59,67,61,51,53,60],
[57,78,0,44,69,67,71,56,63,68],
[61,73,86,0,93,88,69,48,78,77],
[44,71,61,37,0,56,62,47,38,71],
[59,63,63,42,74,0,67,55,66,56],
[56,69,59,61,68,63,0,64,58,82],
[67,79,74,82,83,75,66,0,61,87],
[68,77,67,52,92,64,72,69,0,58],
[56,70,62,53,59,74,48,43,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,56,59,63,59,59,65,49,55],
[74,0,64,54,57,63,62,68,57,58],
[74,66,0,68,70,72,67,66,56,74],
[71,76,62,0,68,64,61,67,67,69],
[67,73,60,62,0,66,63,67,59,61],
[71,67,58,66,64,0,64,62,61,65],
[71,68,63,69,67,66,0,65,57,67],
[65,62,64,63,63,68,65,0,60,61],
[81,73,74,63,71,69,73,70,0,64],
[75,72,56,61,69,65,63,69,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,60,62,65,60,61,67,56,54],
[67,0,59,63,60,60,61,55,59,60],
[70,71,0,60,62,66,67,73,65,67],
[68,67,70,0,71,60,70,70,66,61],
[65,70,68,59,0,65,71,61,64,63],
[70,70,64,70,65,0,71,66,59,57],
[69,69,63,60,59,59,0,65,57,59],
[63,75,57,60,69,64,65,0,60,59],
[74,71,65,64,66,71,73,70,0,63],
[76,70,63,69,67,73,71,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,59,70,48,71,53,55,43,57],
[80,0,85,79,69,88,70,66,79,63],
[71,45,0,63,62,73,59,62,56,71],
[60,51,67,0,44,62,50,63,67,53],
[82,61,68,86,0,83,69,74,80,84],
[59,42,57,68,47,0,55,50,55,49],
[77,60,71,80,61,75,0,71,66,61],
[75,64,68,67,56,80,59,0,78,57],
[87,51,74,63,50,75,64,52,0,59],
[73,67,59,77,46,81,69,73,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,72,59,68,58,56,66,72],
[66,0,77,76,67,72,64,64,73,66],
[61,53,0,64,58,61,56,54,63,66],
[58,54,66,0,60,72,51,54,62,63],
[71,63,72,70,0,67,66,60,66,71],
[62,58,69,58,63,0,56,54,59,64],
[72,66,74,79,64,74,0,65,73,71],
[74,66,76,76,70,76,65,0,76,76],
[64,57,67,68,64,71,57,54,0,69],
[58,64,64,67,59,66,59,54,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,57,61,60,53,59,46,66,54],
[79,0,59,74,64,65,64,66,70,70],
[73,71,0,67,65,60,77,61,73,62],
[69,56,63,0,64,55,58,59,73,61],
[70,66,65,66,0,63,71,61,68,61],
[77,65,70,75,67,0,68,73,79,69],
[71,66,53,72,59,62,0,70,73,66],
[84,64,69,71,69,57,60,0,65,62],
[64,60,57,57,62,51,57,65,0,63],
[76,60,68,69,69,61,64,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,67,62,77,67,54,70,62],
[72,0,76,83,77,74,79,63,68,69],
[69,54,0,46,60,58,56,53,55,55],
[63,47,84,0,77,79,78,61,64,67],
[68,53,70,53,0,66,72,54,74,67],
[53,56,72,51,64,0,68,58,57,51],
[63,51,74,52,58,62,0,62,55,60],
[76,67,77,69,76,72,68,0,63,63],
[60,62,75,66,56,73,75,67,0,68],
[68,61,75,63,63,79,70,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,55,55,61,64,71,73,54,54],
[64,0,62,66,59,57,64,74,47,63],
[75,68,0,62,64,68,74,73,57,70],
[75,64,68,0,69,73,66,75,64,67],
[69,71,66,61,0,67,69,65,64,67],
[66,73,62,57,63,0,67,63,65,67],
[59,66,56,64,61,63,0,57,59,70],
[57,56,57,55,65,67,73,0,55,66],
[76,83,73,66,66,65,71,75,0,81],
[76,67,60,63,63,63,60,64,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,55,61,65,65,74,64,68,50],
[77,0,61,62,73,69,87,74,83,80],
[75,69,0,64,71,76,82,72,80,69],
[69,68,66,0,71,67,69,62,67,67],
[65,57,59,59,0,61,71,55,61,66],
[65,61,54,63,69,0,67,79,75,68],
[56,43,48,61,59,63,0,66,65,47],
[66,56,58,68,75,51,64,0,73,67],
[62,47,50,63,69,55,65,57,0,58],
[80,50,61,63,64,62,83,63,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,65,58,65,70,63,71,71,74],
[68,0,72,55,72,64,64,63,71,70],
[65,58,0,58,71,69,52,60,72,70],
[72,75,72,0,64,66,71,73,76,70],
[65,58,59,66,0,71,60,61,65,58],
[60,66,61,64,59,0,61,61,70,69],
[67,66,78,59,70,69,0,66,73,76],
[59,67,70,57,69,69,64,0,66,69],
[59,59,58,54,65,60,57,64,0,70],
[56,60,60,60,72,61,54,61,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,57,58,64,48,41,43,55,64],
[62,0,67,65,75,60,71,62,75,68],
[73,63,0,65,77,49,55,56,80,70],
[72,65,65,0,73,63,62,64,77,73],
[66,55,53,57,0,54,50,54,68,65],
[82,70,81,67,76,0,63,68,77,78],
[89,59,75,68,80,67,0,66,87,78],
[87,68,74,66,76,62,64,0,81,73],
[75,55,50,53,62,53,43,49,0,60],
[66,62,60,57,65,52,52,57,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,72,68,72,79,68,66,65,65],
[61,0,71,70,68,73,66,68,67,68],
[58,59,0,59,65,68,63,67,57,58],
[62,60,71,0,63,71,64,72,56,61],
[58,62,65,67,0,71,65,65,71,58],
[51,57,62,59,59,0,63,63,53,55],
[62,64,67,66,65,67,0,59,61,58],
[64,62,63,58,65,67,71,0,59,61],
[65,63,73,74,59,77,69,71,0,56],
[65,62,72,69,72,75,72,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,68,66,82,77,63,65,86,77],
[48,0,65,49,62,55,62,57,74,67],
[62,65,0,63,74,60,66,51,74,65],
[64,81,67,0,79,63,63,59,70,74],
[48,68,56,51,0,55,61,53,72,59],
[53,75,70,67,75,0,72,67,68,69],
[67,68,64,67,69,58,0,59,74,66],
[65,73,79,71,77,63,71,0,76,69],
[44,56,56,60,58,62,56,54,0,60],
[53,63,65,56,71,61,64,61,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,66,0,23,44,87,21,21,43],
[85,0,64,64,65,64,65,42,42,64],
[64,66,0,43,66,66,44,43,43,22],
[130,66,87,0,44,65,87,65,44,87],
[107,65,64,86,0,86,87,64,64,43],
[86,66,64,65,44,0,66,43,43,43],
[43,65,86,43,43,64,0,43,43,22],
[109,88,87,65,66,87,87,0,86,43],
[109,88,87,86,66,87,87,44,0,66],
[87,66,108,43,87,87,108,87,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,65,0,0,0,0,65],
[130,0,65,65,65,0,0,0,130,65],
[130,65,0,65,65,65,65,65,65,65],
[130,65,65,0,65,65,0,0,130,130],
[65,65,65,65,0,65,0,0,65,130],
[130,130,65,65,65,0,65,65,130,130],
[130,130,65,130,130,65,0,0,130,130],
[130,130,65,130,130,65,130,0,130,130],
[130,0,65,0,65,0,0,0,0,65],
[65,65,65,0,0,0,0,0,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,75,67,77,70,64,69,72,65],
[62,0,51,65,68,62,59,60,71,72],
[55,79,0,68,64,59,59,64,65,70],
[63,65,62,0,68,63,56,59,65,59],
[53,62,66,62,0,59,55,62,71,61],
[60,68,71,67,71,0,64,64,68,61],
[66,71,71,74,75,66,0,61,74,66],
[61,70,66,71,68,66,69,0,78,64],
[58,59,65,65,59,62,56,52,0,65],
[65,58,60,71,69,69,64,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,55,76,78,76,64,68,61,54],
[65,0,68,72,80,70,66,70,60,66],
[75,62,0,77,75,70,57,65,67,50],
[54,58,53,0,74,61,59,66,60,38],
[52,50,55,56,0,59,51,58,45,49],
[54,60,60,69,71,0,47,75,47,58],
[66,64,73,71,79,83,0,74,66,52],
[62,60,65,64,72,55,56,0,56,53],
[69,70,63,70,85,83,64,74,0,57],
[76,64,80,92,81,72,78,77,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,50,68,61,61,53,58,67,56],
[58,0,59,65,57,66,61,61,67,68],
[80,71,0,67,59,70,65,62,65,65],
[62,65,63,0,56,62,68,62,56,64],
[69,73,71,74,0,65,65,69,59,58],
[69,64,60,68,65,0,59,65,74,67],
[77,69,65,62,65,71,0,72,62,70],
[72,69,68,68,61,65,58,0,63,71],
[63,63,65,74,71,56,68,67,0,65],
[74,62,65,66,72,63,60,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,67,68,72,61,70,69,63,65],
[71,0,59,66,78,69,74,86,73,67],
[63,71,0,79,79,75,73,79,73,73],
[62,64,51,0,78,61,70,81,69,60],
[58,52,51,52,0,53,56,60,65,51],
[69,61,55,69,77,0,63,73,74,63],
[60,56,57,60,74,67,0,77,72,59],
[61,44,51,49,70,57,53,0,62,54],
[67,57,57,61,65,56,58,68,0,63],
[65,63,57,70,79,67,71,76,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,68,66,71,64,67,83,72],
[63,0,71,71,66,59,72,66,85,68],
[66,59,0,60,65,59,57,55,89,67],
[62,59,70,0,73,47,68,67,83,64],
[64,64,65,57,0,54,62,59,70,74],
[59,71,71,83,76,0,73,73,82,74],
[66,58,73,62,68,57,0,63,88,73],
[63,64,75,63,71,57,67,0,91,68],
[47,45,41,47,60,48,42,39,0,59],
[58,62,63,66,56,56,57,62,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,59,66,69,66,66,66,65,64],
[57,0,53,44,60,54,61,61,67,70],
[71,77,0,64,71,70,70,70,69,66],
[64,86,66,0,77,74,73,73,75,70],
[61,70,59,53,0,68,64,72,66,70],
[64,76,60,56,62,0,69,58,65,68],
[64,69,60,57,66,61,0,56,67,68],
[64,69,60,57,58,72,74,0,59,64],
[65,63,61,55,64,65,63,71,0,67],
[66,60,64,60,60,62,62,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,64,70,71,68,70,77,73],
[64,0,61,64,71,70,62,67,75,72],
[60,69,0,69,72,66,61,64,67,59],
[66,66,61,0,68,67,64,56,73,63],
[60,59,58,62,0,59,61,57,65,58],
[59,60,64,63,71,0,63,67,66,63],
[62,68,69,66,69,67,0,68,69,71],
[60,63,66,74,73,63,62,0,69,63],
[53,55,63,57,65,64,61,61,0,56],
[57,58,71,67,72,67,59,67,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,71,64,63,69,65,60,68,68],
[62,0,67,56,66,65,68,58,67,66],
[59,63,0,55,64,67,69,60,66,67],
[66,74,75,0,68,74,72,63,74,73],
[67,64,66,62,0,63,70,60,64,67],
[61,65,63,56,67,0,69,64,63,69],
[65,62,61,58,60,61,0,60,61,63],
[70,72,70,67,70,66,70,0,64,69],
[62,63,64,56,66,67,69,66,0,71],
[62,64,63,57,63,61,67,61,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,49,67,64,49,70,61,51,46],
[93,0,80,77,84,76,99,76,88,65],
[81,50,0,69,56,61,74,62,50,54],
[63,53,61,0,68,65,86,76,55,58],
[66,46,74,62,0,58,84,68,60,58],
[81,54,69,65,72,0,80,70,77,65],
[60,31,56,44,46,50,0,49,38,41],
[69,54,68,54,62,60,81,0,50,58],
[79,42,80,75,70,53,92,80,0,62],
[84,65,76,72,72,65,89,72,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,51,52,63,62,56,49,65,55],
[56,0,46,52,54,63,54,57,72,59],
[79,84,0,67,82,76,75,64,90,69],
[78,78,63,0,80,67,64,67,79,74],
[67,76,48,50,0,70,70,58,67,53],
[68,67,54,63,60,0,62,55,71,53],
[74,76,55,66,60,68,0,64,66,62],
[81,73,66,63,72,75,66,0,74,70],
[65,58,40,51,63,59,64,56,0,55],
[75,71,61,56,77,77,68,60,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,74,69,59,70,70,65,75,69],
[56,0,77,77,69,74,70,70,74,65],
[56,53,0,51,50,66,64,55,51,63],
[61,53,79,0,76,81,71,62,76,62],
[71,61,80,54,0,72,63,60,58,62],
[60,56,64,49,58,0,53,58,65,63],
[60,60,66,59,67,77,0,58,69,59],
[65,60,75,68,70,72,72,0,65,67],
[55,56,79,54,72,65,61,65,0,72],
[61,65,67,68,68,67,71,63,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,50,50,47,81,48,67,67,66],
[64,0,32,65,61,81,31,49,66,48],
[80,98,0,47,64,81,48,113,98,81],
[80,65,83,0,46,98,65,66,66,65],
[83,69,66,84,0,84,51,84,66,69],
[49,49,49,32,46,0,49,49,81,49],
[82,99,82,65,79,81,0,116,116,96],
[63,81,17,64,46,81,14,0,83,49],
[63,64,32,64,64,49,14,47,0,64],
[64,82,49,65,61,81,34,81,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,65,53,75,38,78,54,67,82],
[86,0,63,67,81,70,84,55,65,89],
[65,67,0,73,82,88,105,69,81,91],
[77,63,57,0,91,76,99,56,60,93],
[55,49,48,39,0,45,63,71,60,70],
[92,60,42,54,85,0,70,58,59,85],
[52,46,25,31,67,60,0,45,59,67],
[76,75,61,74,59,72,85,0,72,79],
[63,65,49,70,70,71,71,58,0,74],
[48,41,39,37,60,45,63,51,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,77,59,82,71,77,75,67],
[66,0,68,65,69,67,67,74,59,56],
[62,62,0,71,46,71,54,70,71,66],
[53,65,59,0,56,74,62,60,57,58],
[71,61,84,74,0,81,66,68,68,67],
[48,63,59,56,49,0,57,73,60,52],
[59,63,76,68,64,73,0,79,65,63],
[53,56,60,70,62,57,51,0,61,56],
[55,71,59,73,62,70,65,69,0,62],
[63,74,64,72,63,78,67,74,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,58,69,69,52,56,51,61,60],
[83,0,68,67,79,58,59,60,75,85],
[72,62,0,69,71,66,58,58,64,69],
[61,63,61,0,66,61,65,51,61,60],
[61,51,59,64,0,54,62,51,56,58],
[78,72,64,69,76,0,60,64,66,69],
[74,71,72,65,68,70,0,66,66,70],
[79,70,72,79,79,66,64,0,72,69],
[69,55,66,69,74,64,64,58,0,55],
[70,45,61,70,72,61,60,61,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,76,70,63,75,56,74,54,70],
[48,0,65,60,61,64,54,57,49,70],
[54,65,0,55,70,63,58,75,57,68],
[60,70,75,0,69,64,59,73,61,71],
[67,69,60,61,0,73,47,66,63,59],
[55,66,67,66,57,0,56,73,52,55],
[74,76,72,71,83,74,0,73,63,72],
[56,73,55,57,64,57,57,0,57,59],
[76,81,73,69,67,78,67,73,0,65],
[60,60,62,59,71,75,58,71,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,61,71,69,78,60,68,62,67],
[58,0,56,66,63,70,57,57,56,64],
[69,74,0,62,74,67,72,63,67,68],
[59,64,68,0,63,73,66,60,56,65],
[61,67,56,67,0,72,61,61,65,62],
[52,60,63,57,58,0,68,66,62,62],
[70,73,58,64,69,62,0,64,62,61],
[62,73,67,70,69,64,66,0,64,67],
[68,74,63,74,65,68,68,66,0,64],
[63,66,62,65,68,68,69,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,73,56,71,70,66,66,69,69],
[51,0,52,49,63,63,57,56,64,52],
[57,78,0,50,72,60,57,64,65,64],
[74,81,80,0,80,79,67,65,78,69],
[59,67,58,50,0,57,65,56,53,61],
[60,67,70,51,73,0,69,62,68,64],
[64,73,73,63,65,61,0,65,72,66],
[64,74,66,65,74,68,65,0,73,67],
[61,66,65,52,77,62,58,57,0,68],
[61,78,66,61,69,66,64,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,51,50,52,59,38,69,78,70],
[73,0,61,75,65,60,67,61,75,80],
[79,69,0,72,66,60,78,51,74,72],
[80,55,58,0,38,62,71,48,75,68],
[78,65,64,92,0,85,84,97,86,90],
[71,70,70,68,45,0,75,62,65,75],
[92,63,52,59,46,55,0,52,73,77],
[61,69,79,82,33,68,78,0,83,78],
[52,55,56,55,44,65,57,47,0,74],
[60,50,58,62,40,55,53,52,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,48,53,47,47,47,47,60,57],
[64,0,62,62,56,53,68,69,75,56],
[82,68,0,82,70,54,70,65,77,66],
[77,68,48,0,61,63,58,62,67,46],
[83,74,60,69,0,65,66,74,73,66],
[83,77,76,67,65,0,77,76,76,60],
[83,62,60,72,64,53,0,65,72,66],
[83,61,65,68,56,54,65,0,83,61],
[70,55,53,63,57,54,58,47,0,47],
[73,74,64,84,64,70,64,69,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,73,79,89,80,74,82,51,79],
[58,0,67,63,92,78,78,76,59,71],
[57,63,0,55,81,51,71,72,65,63],
[51,67,75,0,74,76,83,77,75,72],
[41,38,49,56,0,57,63,66,64,65],
[50,52,79,54,73,0,66,66,53,77],
[56,52,59,47,67,64,0,48,48,63],
[48,54,58,53,64,64,82,0,61,55],
[79,71,65,55,66,77,82,69,0,76],
[51,59,67,58,65,53,67,75,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,65,78,100,71,81,75,86,76],
[41,0,53,66,80,65,60,79,78,66],
[65,77,0,59,82,64,77,73,79,63],
[52,64,71,0,87,73,55,73,81,84],
[30,50,48,43,0,62,51,69,71,56],
[59,65,66,57,68,0,58,65,52,64],
[49,70,53,75,79,72,0,60,66,72],
[55,51,57,57,61,65,70,0,68,70],
[44,52,51,49,59,78,64,62,0,62],
[54,64,67,46,74,66,58,60,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,59,68,72,67,73,84,76,73],
[42,0,50,48,61,57,68,59,56,55],
[71,80,0,74,67,82,71,75,85,59],
[62,82,56,0,78,79,72,70,74,64],
[58,69,63,52,0,71,57,82,59,50],
[63,73,48,51,59,0,64,76,59,53],
[57,62,59,58,73,66,0,78,62,62],
[46,71,55,60,48,54,52,0,61,64],
[54,74,45,56,71,71,68,69,0,65],
[57,75,71,66,80,77,68,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,76,70,61,50,58,57,65,56],
[93,0,80,79,65,60,61,55,75,54],
[54,50,0,74,60,53,66,61,56,32],
[60,51,56,0,47,29,32,24,46,29],
[69,65,70,83,0,63,69,69,64,64],
[80,70,77,101,67,0,78,77,66,51],
[72,69,64,98,61,52,0,51,57,53],
[73,75,69,106,61,53,79,0,81,79],
[65,55,74,84,66,64,73,49,0,60],
[74,76,98,101,66,79,77,51,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,65,62,67,75,70,74,70],
[62,0,53,73,71,69,75,68,67,70],
[64,77,0,68,75,73,76,84,72,77],
[65,57,62,0,65,71,64,58,57,57],
[68,59,55,65,0,64,68,64,56,61],
[63,61,57,59,66,0,73,63,63,67],
[55,55,54,66,62,57,0,63,54,54],
[60,62,46,72,66,67,67,0,65,59],
[56,63,58,73,74,67,76,65,0,66],
[60,60,53,73,69,63,76,71,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,53,59,47,54,66,54,58,61],
[78,0,77,68,55,72,74,66,73,68],
[77,53,0,62,53,70,74,70,75,72],
[71,62,68,0,58,52,55,70,62,66],
[83,75,77,72,0,76,77,71,80,63],
[76,58,60,78,54,0,62,60,63,69],
[64,56,56,75,53,68,0,62,64,74],
[76,64,60,60,59,70,68,0,67,68],
[72,57,55,68,50,67,66,63,0,65],
[69,62,58,64,67,61,56,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,78,72,73,69,76,73,74,62],
[55,0,68,57,50,62,66,61,47,55],
[52,62,0,64,68,62,58,66,48,58],
[58,73,66,0,77,77,75,64,62,70],
[57,80,62,53,0,60,71,61,65,53],
[61,68,68,53,70,0,65,62,55,65],
[54,64,72,55,59,65,0,63,60,66],
[57,69,64,66,69,68,67,0,51,65],
[56,83,82,68,65,75,70,79,0,74],
[68,75,72,60,77,65,64,65,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,62,68,80,66,69,67,69],
[61,0,67,64,67,81,67,67,67,72],
[60,63,0,63,67,66,57,57,63,55],
[68,66,67,0,55,73,59,64,64,69],
[62,63,63,75,0,72,64,68,60,76],
[50,49,64,57,58,0,55,56,51,62],
[64,63,73,71,66,75,0,61,67,74],
[61,63,73,66,62,74,69,0,57,68],
[63,63,67,66,70,79,63,73,0,68],
[61,58,75,61,54,68,56,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,74,68,72,67,63,74,74,73],
[53,0,63,58,56,59,53,69,64,68],
[56,67,0,62,60,67,56,70,60,68],
[62,72,68,0,66,69,66,69,64,68],
[58,74,70,64,0,69,61,64,67,67],
[63,71,63,61,61,0,62,70,67,69],
[67,77,74,64,69,68,0,74,72,84],
[56,61,60,61,66,60,56,0,56,71],
[56,66,70,66,63,63,58,74,0,64],
[57,62,62,62,63,61,46,59,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,64,66,58,61,69,56,69,62],
[76,0,67,79,72,70,78,68,78,58],
[66,63,0,69,68,61,76,61,69,63],
[64,51,61,0,55,57,67,57,70,61],
[72,58,62,75,0,63,69,65,81,67],
[69,60,69,73,67,0,67,65,76,62],
[61,52,54,63,61,63,0,60,68,57],
[74,62,69,73,65,65,70,0,78,64],
[61,52,61,60,49,54,62,52,0,57],
[68,72,67,69,63,68,73,66,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,42,55,45,53,61,75,62,71],
[93,0,46,41,61,59,47,68,76,73],
[88,84,0,65,76,84,85,89,89,79],
[75,89,65,0,75,77,86,81,94,80],
[85,69,54,55,0,53,69,71,66,62],
[77,71,46,53,77,0,73,83,89,84],
[69,83,45,44,61,57,0,70,78,69],
[55,62,41,49,59,47,60,0,72,70],
[68,54,41,36,64,41,52,58,0,57],
[59,57,51,50,68,46,61,60,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,76,82,60,64,60,70,57],
[63,0,59,72,67,58,52,61,59,47],
[66,71,0,77,77,66,61,69,69,67],
[54,58,53,0,73,60,53,56,50,53],
[48,63,53,57,0,46,58,54,63,51],
[70,72,64,70,84,0,64,76,69,68],
[66,78,69,77,72,66,0,71,61,71],
[70,69,61,74,76,54,59,0,58,76],
[60,71,61,80,67,61,69,72,0,67],
[73,83,63,77,79,62,59,54,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,63,71,63,59,66,60,64],
[66,0,65,60,66,64,58,61,56,64],
[63,65,0,55,62,59,62,55,63,64],
[67,70,75,0,67,65,68,61,58,62],
[59,64,68,63,0,63,55,58,57,62],
[67,66,71,65,67,0,72,58,67,71],
[71,72,68,62,75,58,0,67,55,68],
[64,69,75,69,72,72,63,0,62,69],
[70,74,67,72,73,63,75,68,0,71],
[66,66,66,68,68,59,62,61,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,60,70,61,69,75,59,67,83],
[62,0,62,63,57,62,68,50,72,75],
[70,68,0,70,63,68,70,68,70,78],
[60,67,60,0,63,60,69,52,74,76],
[69,73,67,67,0,74,71,63,74,88],
[61,68,62,70,56,0,72,52,64,77],
[55,62,60,61,59,58,0,52,60,76],
[71,80,62,78,67,78,78,0,73,90],
[63,58,60,56,56,66,70,57,0,82],
[47,55,52,54,42,53,54,40,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,61,49,59,48,57,63,57,46],
[76,0,75,56,71,63,64,70,62,69],
[69,55,0,49,63,57,72,69,56,62],
[81,74,81,0,76,61,69,68,72,74],
[71,59,67,54,0,57,63,59,52,68],
[82,67,73,69,73,0,75,66,61,69],
[73,66,58,61,67,55,0,68,55,69],
[67,60,61,62,71,64,62,0,61,54],
[73,68,74,58,78,69,75,69,0,66],
[84,61,68,56,62,61,61,76,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,62,67,69,75,70,61,67],
[63,0,73,66,57,62,60,63,62,64],
[60,57,0,52,65,65,53,58,57,66],
[68,64,78,0,67,68,69,76,69,69],
[63,73,65,63,0,67,70,68,68,74],
[61,68,65,62,63,0,65,68,57,67],
[55,70,77,61,60,65,0,67,62,67],
[60,67,72,54,62,62,63,0,66,63],
[69,68,73,61,62,73,68,64,0,74],
[63,66,64,61,56,63,63,67,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,66,68,70,72,72,71,59,66],
[44,0,70,66,54,59,63,57,60,70],
[64,60,0,65,58,58,72,56,45,71],
[62,64,65,0,63,55,65,70,53,65],
[60,76,72,67,0,77,68,71,64,69],
[58,71,72,75,53,0,63,69,70,72],
[58,67,58,65,62,67,0,64,64,63],
[59,73,74,60,59,61,66,0,53,62],
[71,70,85,77,66,60,66,77,0,73],
[64,60,59,65,61,58,67,68,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,58,86,57,45,74,71,60,102],
[86,0,42,84,54,73,72,99,59,72],
[72,88,0,101,102,103,116,99,61,103],
[44,46,29,0,46,46,45,56,32,60],
[73,76,28,84,0,76,58,85,47,89],
[85,57,27,84,54,0,70,40,74,116],
[56,58,14,85,72,60,0,40,45,101],
[59,31,31,74,45,90,90,0,61,90],
[70,71,69,98,83,56,85,69,0,84],
[28,58,27,70,41,14,29,40,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,63,65,58,60,60,60,84,55],
[69,0,59,52,57,54,56,53,73,52],
[67,71,0,73,64,69,66,67,82,64],
[65,78,57,0,71,61,64,67,73,65],
[72,73,66,59,0,54,69,75,82,69],
[70,76,61,69,76,0,70,67,86,69],
[70,74,64,66,61,60,0,66,81,75],
[70,77,63,63,55,63,64,0,78,66],
[46,57,48,57,48,44,49,52,0,50],
[75,78,66,65,61,61,55,64,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,74,64,63,74,57,83,61,53],
[66,0,44,67,55,73,56,76,82,64],
[56,86,0,58,56,84,48,77,91,74],
[66,63,72,0,64,72,65,67,70,89],
[67,75,74,66,0,84,45,66,73,53],
[56,57,46,58,46,0,45,66,72,64],
[73,74,82,65,85,85,0,94,74,74],
[47,54,53,63,64,64,36,0,80,72],
[69,48,39,60,57,58,56,50,0,46],
[77,66,56,41,77,66,56,58,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,79,72,67,70,69,70,63],
[64,0,64,73,71,58,71,68,67,64],
[63,66,0,64,64,60,53,55,59,54],
[51,57,66,0,62,64,63,45,56,56],
[58,59,66,68,0,70,56,53,54,63],
[63,72,70,66,60,0,65,63,71,71],
[60,59,77,67,74,65,0,65,69,66],
[61,62,75,85,77,67,65,0,65,67],
[60,63,71,74,76,59,61,65,0,52],
[67,66,76,74,67,59,64,63,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,102,40,56,64,66,48,57,65],
[48,0,60,51,66,58,64,41,52,55],
[28,70,0,25,55,39,48,37,49,65],
[90,79,105,0,88,89,82,80,64,73],
[74,64,75,42,0,33,75,64,42,58],
[66,72,91,41,97,0,67,75,82,70],
[64,66,82,48,55,63,0,57,58,72],
[82,89,93,50,66,55,73,0,75,71],
[73,78,81,66,88,48,72,55,0,95],
[65,75,65,57,72,60,58,59,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,71,64,95,73,69,74,64,62],
[63,0,80,82,87,81,92,85,85,76],
[59,50,0,72,74,37,60,70,60,55],
[66,48,58,0,72,56,67,71,76,66],
[35,43,56,58,0,61,57,66,67,61],
[57,49,93,74,69,0,64,83,80,86],
[61,38,70,63,73,66,0,66,64,50],
[56,45,60,59,64,47,64,0,63,56],
[66,45,70,54,63,50,66,67,0,61],
[68,54,75,64,69,44,80,74,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,79,62,62,69,80,80,61,51],
[80,0,68,48,71,56,89,67,68,49],
[51,62,0,63,53,52,59,81,58,69],
[68,82,67,0,61,67,87,78,76,68],
[68,59,77,69,0,77,87,77,75,78],
[61,74,78,63,53,0,80,91,59,80],
[50,41,71,43,43,50,0,50,42,43],
[50,63,49,52,53,39,80,0,60,41],
[69,62,72,54,55,71,88,70,0,61],
[79,81,61,62,52,50,87,89,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,66,64,74,69,79,74,69,76],
[46,0,57,55,60,56,66,58,60,58],
[64,73,0,73,74,64,76,65,65,74],
[66,75,57,0,67,60,77,67,68,66],
[56,70,56,63,0,65,71,64,68,65],
[61,74,66,70,65,0,69,64,71,70],
[51,64,54,53,59,61,0,57,63,70],
[56,72,65,63,66,66,73,0,63,72],
[61,70,65,62,62,59,67,67,0,68],
[54,72,56,64,65,60,60,58,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,51,73,62,64,57,75,64,75],
[65,0,50,68,56,60,50,55,56,75],
[79,80,0,75,73,64,72,79,69,78],
[57,62,55,0,65,60,53,72,56,62],
[68,74,57,65,0,57,63,73,64,74],
[66,70,66,70,73,0,71,80,65,73],
[73,80,58,77,67,59,0,74,66,74],
[55,75,51,58,57,50,56,0,43,67],
[66,74,61,74,66,65,64,87,0,74],
[55,55,52,68,56,57,56,63,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,67,62,74,70,69,62,70,64],
[54,0,63,62,72,64,62,62,76,55],
[63,67,0,61,73,63,63,67,66,72],
[68,68,69,0,70,70,71,67,80,64],
[56,58,57,60,0,57,56,60,64,51],
[60,66,67,60,73,0,66,73,68,62],
[61,68,67,59,74,64,0,62,62,70],
[68,68,63,63,70,57,68,0,68,62],
[60,54,64,50,66,62,68,62,0,64],
[66,75,58,66,79,68,60,68,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,58,64,60,59,58,64,70,62],
[76,0,65,71,71,69,69,69,75,77],
[72,65,0,72,67,70,61,67,73,76],
[66,59,58,0,64,67,58,72,66,71],
[70,59,63,66,0,61,57,69,65,66],
[71,61,60,63,69,0,57,59,60,67],
[72,61,69,72,73,73,0,72,72,78],
[66,61,63,58,61,71,58,0,67,62],
[60,55,57,64,65,70,58,63,0,68],
[68,53,54,59,64,63,52,68,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,92,76,84,77,59,60,60,85],
[37,0,67,59,51,51,59,50,51,59],
[38,63,0,80,64,37,53,44,37,65],
[54,71,50,0,71,62,53,60,44,63],
[46,79,66,59,0,61,44,60,50,51],
[53,79,93,68,69,0,59,70,76,77],
[71,71,77,77,86,71,0,79,53,53],
[70,80,86,70,70,60,51,0,71,71],
[70,79,93,86,80,54,77,59,0,72],
[45,71,65,67,79,53,77,59,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,64,53,63,57,63,53,50,63],
[79,0,68,63,63,72,78,65,60,71],
[66,62,0,57,62,66,66,52,62,62],
[77,67,73,0,66,69,68,63,62,66],
[67,67,68,64,0,73,74,65,68,70],
[73,58,64,61,57,0,72,51,58,70],
[67,52,64,62,56,58,0,64,52,69],
[77,65,78,67,65,79,66,0,67,68],
[80,70,68,68,62,72,78,63,0,70],
[67,59,68,64,60,60,61,62,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,76,71,54,73,66,61,59,71],
[68,0,75,58,51,69,74,68,58,66],
[54,55,0,63,53,62,64,52,65,58],
[59,72,67,0,46,64,70,64,61,62],
[76,79,77,84,0,70,72,73,60,76],
[57,61,68,66,60,0,66,59,58,70],
[64,56,66,60,58,64,0,62,60,64],
[69,62,78,66,57,71,68,0,74,63],
[71,72,65,69,70,72,70,56,0,68],
[59,64,72,68,54,60,66,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,61,63,54,54,55,67,69,74],
[67,0,65,58,66,59,68,75,63,70],
[69,65,0,61,67,51,54,62,60,61],
[67,72,69,0,69,61,73,57,63,61],
[76,64,63,61,0,55,62,63,64,62],
[76,71,79,69,75,0,74,64,71,74],
[75,62,76,57,68,56,0,61,62,73],
[63,55,68,73,67,66,69,0,59,65],
[61,67,70,67,66,59,68,71,0,75],
[56,60,69,69,68,56,57,65,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,49,60,61,58,53,50,56,60],
[84,0,70,86,79,69,59,76,69,61],
[81,60,0,79,71,74,71,78,74,68],
[70,44,51,0,57,57,55,66,55,59],
[69,51,59,73,0,64,55,60,61,63],
[72,61,56,73,66,0,62,65,64,58],
[77,71,59,75,75,68,0,83,64,64],
[80,54,52,64,70,65,47,0,62,60],
[74,61,56,75,69,66,66,68,0,66],
[70,69,62,71,67,72,66,70,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,78,60,69,80,59,100,80,60],
[39,0,69,29,57,67,50,77,38,48],
[52,61,0,41,30,61,42,60,61,30],
[70,101,89,0,67,87,69,88,49,67],
[61,73,100,63,0,91,70,118,70,69],
[50,63,69,43,39,0,51,70,50,39],
[71,80,88,61,60,79,0,99,62,41],
[30,53,70,42,12,60,31,0,41,40],
[50,92,69,81,60,80,68,89,0,47],
[70,82,100,63,61,91,89,90,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,65,65,0,0,65,0,0,0],
[130,0,65,130,65,65,65,65,65,130],
[65,65,0,65,0,65,65,65,65,65],
[65,0,65,0,0,0,65,0,0,0],
[130,65,130,130,0,130,130,130,65,130],
[130,65,65,130,0,0,65,130,65,130],
[65,65,65,65,0,65,0,65,65,65],
[130,65,65,130,0,0,65,0,0,65],
[130,65,65,130,65,65,65,130,0,130],
[130,0,65,130,0,0,65,65,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,45,60,49,50,74,66,46],
[63,0,78,49,67,72,66,60,65,62],
[62,52,0,56,52,41,65,79,62,69],
[85,81,74,0,72,76,86,90,87,63],
[70,63,78,58,0,64,79,74,65,64],
[81,58,89,54,66,0,87,77,69,77],
[80,64,65,44,51,43,0,69,67,67],
[56,70,51,40,56,53,61,0,57,53],
[64,65,68,43,65,61,63,73,0,53],
[84,68,61,67,66,53,63,77,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,64,53,68,68,60,69,60,56],
[55,0,58,52,63,59,58,67,56,57],
[66,72,0,69,65,64,62,74,67,78],
[77,78,61,0,78,78,67,74,66,75],
[62,67,65,52,0,55,78,67,65,79],
[62,71,66,52,75,0,71,67,66,69],
[70,72,68,63,52,59,0,68,67,77],
[61,63,56,56,63,63,62,0,56,70],
[70,74,63,64,65,64,63,74,0,68],
[74,73,52,55,51,61,53,60,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,58,55,64,61,62,60,67,59],
[74,0,68,55,68,70,66,60,62,61],
[72,62,0,57,62,65,63,64,64,57],
[75,75,73,0,74,63,79,66,67,71],
[66,62,68,56,0,67,72,65,68,65],
[69,60,65,67,63,0,70,68,66,69],
[68,64,67,51,58,60,0,58,59,64],
[70,70,66,64,65,62,72,0,68,67],
[63,68,66,63,62,64,71,62,0,68],
[71,69,73,59,65,61,66,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,67,68,73,68,64,55,61,67],
[62,0,70,64,69,74,69,45,57,67],
[63,60,0,54,64,65,67,51,67,67],
[62,66,76,0,71,73,71,55,64,70],
[57,61,66,59,0,60,71,66,54,56],
[62,56,65,57,70,0,65,58,56,59],
[66,61,63,59,59,65,0,59,57,62],
[75,85,79,75,64,72,71,0,68,69],
[69,73,63,66,76,74,73,62,0,75],
[63,63,63,60,74,71,68,61,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,59,56,64,65,61,69,70,56],
[80,0,67,69,68,78,67,61,83,67],
[71,63,0,63,65,70,72,63,81,61],
[74,61,67,0,64,75,51,72,62,60],
[66,62,65,66,0,55,52,71,72,57],
[65,52,60,55,75,0,54,59,60,59],
[69,63,58,79,78,76,0,73,78,66],
[61,69,67,58,59,71,57,0,62,47],
[60,47,49,68,58,70,52,68,0,48],
[74,63,69,70,73,71,64,83,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,58,69,75,76,71,80,86,65],
[55,0,39,55,59,64,65,82,58,52],
[72,91,0,79,63,67,67,75,72,69],
[61,75,51,0,71,71,66,72,57,62],
[55,71,67,59,0,70,62,75,76,50],
[54,66,63,59,60,0,59,66,69,66],
[59,65,63,64,68,71,0,69,48,69],
[50,48,55,58,55,64,61,0,58,51],
[44,72,58,73,54,61,82,72,0,63],
[65,78,61,68,80,64,61,79,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,79,56,51,65,50,65,42,52],
[80,0,77,68,64,71,74,70,60,83],
[51,53,0,39,48,64,58,59,45,55],
[74,62,91,0,64,69,78,63,60,69],
[79,66,82,66,0,62,73,66,63,59],
[65,59,66,61,68,0,70,65,51,71],
[80,56,72,52,57,60,0,64,51,61],
[65,60,71,67,64,65,66,0,75,74],
[88,70,85,70,67,79,79,55,0,73],
[78,47,75,61,71,59,69,56,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,59,61,50,58,64,68,64,63],
[75,0,64,70,63,55,72,76,76,80],
[71,66,0,69,59,69,63,72,62,73],
[69,60,61,0,49,61,64,71,66,74],
[80,67,71,81,0,77,63,87,74,79],
[72,75,61,69,53,0,67,72,73,73],
[66,58,67,66,67,63,0,74,72,76],
[62,54,58,59,43,58,56,0,72,67],
[66,54,68,64,56,57,58,58,0,72],
[67,50,57,56,51,57,54,63,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,73,72,70,86,74,68,78,64],
[58,0,62,60,62,71,56,61,76,67],
[57,68,0,53,54,66,55,57,72,56],
[58,70,77,0,67,81,73,65,80,67],
[60,68,76,63,0,70,70,66,66,69],
[44,59,64,49,60,0,54,62,70,55],
[56,74,75,57,60,76,0,58,74,61],
[62,69,73,65,64,68,72,0,72,67],
[52,54,58,50,64,60,56,58,0,53],
[66,63,74,63,61,75,69,63,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,74,98,87,101,90,79,55,74],
[59,0,54,96,89,91,77,51,53,60],
[56,76,0,91,72,92,78,48,69,75],
[32,34,39,0,74,60,75,48,49,38],
[43,41,58,56,0,84,61,81,69,57],
[29,39,38,70,46,0,58,52,44,60],
[40,53,52,55,69,72,0,38,43,46],
[51,79,82,82,49,78,92,0,63,45],
[75,77,61,81,61,86,87,67,0,63],
[56,70,55,92,73,70,84,85,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,74,79,64,72,66,62,72,81],
[55,0,66,60,62,60,53,50,65,70],
[56,64,0,63,59,66,58,45,61,65],
[51,70,67,0,64,73,57,47,68,66],
[66,68,71,66,0,64,52,54,70,67],
[58,70,64,57,66,0,49,53,72,65],
[64,77,72,73,78,81,0,65,78,80],
[68,80,85,83,76,77,65,0,82,83],
[58,65,69,62,60,58,52,48,0,68],
[49,60,65,64,63,65,50,47,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,45,65,72,70,63,54,69,60],
[69,0,61,80,72,65,70,67,69,55],
[85,69,0,68,76,72,80,62,74,60],
[65,50,62,0,64,70,59,70,67,49],
[58,58,54,66,0,62,47,57,59,44],
[60,65,58,60,68,0,59,64,69,70],
[67,60,50,71,83,71,0,58,65,46],
[76,63,68,60,73,66,72,0,83,69],
[61,61,56,63,71,61,65,47,0,58],
[70,75,70,81,86,60,84,61,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,56,65,69,62,70,65,66,69],
[68,0,60,62,65,71,65,68,76,70],
[74,70,0,60,69,66,77,70,72,76],
[65,68,70,0,70,65,78,65,66,72],
[61,65,61,60,0,63,60,54,64,68],
[68,59,64,65,67,0,59,63,68,67],
[60,65,53,52,70,71,0,74,64,69],
[65,62,60,65,76,67,56,0,62,66],
[64,54,58,64,66,62,66,68,0,61],
[61,60,54,58,62,63,61,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,62,61,62,69,64,61,60,69],
[65,0,69,64,58,70,61,68,63,65],
[68,61,0,64,56,69,70,68,66,67],
[69,66,66,0,66,74,76,74,69,64],
[68,72,74,64,0,75,64,66,64,84],
[61,60,61,56,55,0,63,66,59,60],
[66,69,60,54,66,67,0,63,66,58],
[69,62,62,56,64,64,67,0,59,65],
[70,67,64,61,66,71,64,71,0,65],
[61,65,63,66,46,70,72,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,49,57,28,51,57,76,61,60],
[90,0,67,89,60,75,71,78,62,63],
[81,63,0,73,50,66,56,70,63,71],
[73,41,57,0,49,52,70,55,55,71],
[102,70,80,81,0,72,50,83,61,86],
[79,55,64,78,58,0,69,82,66,78],
[73,59,74,60,80,61,0,82,61,71],
[54,52,60,75,47,48,48,0,54,36],
[69,68,67,75,69,64,69,76,0,73],
[70,67,59,59,44,52,59,94,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,60,69,63,58,57,59,72],
[69,0,60,65,66,63,59,53,56,68],
[63,70,0,57,68,61,62,56,68,69],
[70,65,73,0,71,68,76,56,66,76],
[61,64,62,59,0,64,70,61,65,71],
[67,67,69,62,66,0,72,68,59,74],
[72,71,68,54,60,58,0,67,61,74],
[73,77,74,74,69,62,63,0,75,82],
[71,74,62,64,65,71,69,55,0,78],
[58,62,61,54,59,56,56,48,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,77,91,85,83,84,70,86,64],
[73,0,70,66,60,81,66,70,72,68],
[53,60,0,60,67,85,65,83,66,65],
[39,64,70,0,57,71,71,63,72,53],
[45,70,63,73,0,77,63,62,91,64],
[47,49,45,59,53,0,58,36,73,48],
[46,64,65,59,67,72,0,63,81,49],
[60,60,47,67,68,94,67,0,79,62],
[44,58,64,58,39,57,49,51,0,45],
[66,62,65,77,66,82,81,68,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,55,46,53,59,52,52,48,68],
[72,0,57,52,57,59,54,61,53,73],
[75,73,0,60,63,64,61,66,67,78],
[84,78,70,0,74,75,53,82,59,78],
[77,73,67,56,0,68,62,73,57,80],
[71,71,66,55,62,0,64,63,59,73],
[78,76,69,77,68,66,0,78,59,91],
[78,69,64,48,57,67,52,0,52,74],
[82,77,63,71,73,71,71,78,0,97],
[62,57,52,52,50,57,39,56,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,66,73,72,65,67,54,62],
[61,0,57,61,63,67,58,55,54,63],
[60,73,0,59,63,67,64,58,58,60],
[64,69,71,0,66,79,55,62,54,59],
[57,67,67,64,0,71,56,63,59,63],
[58,63,63,51,59,0,55,58,53,61],
[65,72,66,75,74,75,0,67,68,76],
[63,75,72,68,67,72,63,0,64,65],
[76,76,72,76,71,77,62,66,0,71],
[68,67,70,71,67,69,54,65,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,74,65,67,63,67,70,66,71],
[61,0,62,53,70,63,70,70,69,66],
[56,68,0,45,69,60,64,56,66,61],
[65,77,85,0,90,73,84,78,83,70],
[63,60,61,40,0,53,62,57,61,63],
[67,67,70,57,77,0,78,73,72,72],
[63,60,66,46,68,52,0,53,55,60],
[60,60,74,52,73,57,77,0,67,65],
[64,61,64,47,69,58,75,63,0,59],
[59,64,69,60,67,58,70,65,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,59,67,58,61,52,64,60,61],
[68,0,60,67,55,64,55,62,66,56],
[71,70,0,70,66,67,64,70,73,70],
[63,63,60,0,61,64,63,68,64,56],
[72,75,64,69,0,69,67,73,63,65],
[69,66,63,66,61,0,58,55,64,60],
[78,75,66,67,63,72,0,71,68,71],
[66,68,60,62,57,75,59,0,64,64],
[70,64,57,66,67,66,62,66,0,66],
[69,74,60,74,65,70,59,66,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,80,73,73,68,80,70,58,58],
[71,0,79,80,61,69,86,78,76,60],
[50,51,0,68,58,43,53,80,49,41],
[57,50,62,0,55,36,51,52,54,29],
[57,69,72,75,0,81,80,70,56,67],
[62,61,87,94,49,0,95,84,68,59],
[50,44,77,79,50,35,0,55,72,29],
[60,52,50,78,60,46,75,0,57,50],
[72,54,81,76,74,62,58,73,0,59],
[72,70,89,101,63,71,101,80,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,65,66,56,59,62,70,64,68],
[69,0,70,65,63,63,62,58,65,68],
[65,60,0,54,65,65,55,53,59,69],
[64,65,76,0,70,64,64,61,56,67],
[74,67,65,60,0,65,65,57,69,67],
[71,67,65,66,65,0,58,58,63,67],
[68,68,75,66,65,72,0,59,62,71],
[60,72,77,69,73,72,71,0,63,69],
[66,65,71,74,61,67,68,67,0,69],
[62,62,61,63,63,63,59,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,67,68,86,84,73,62,92,75],
[56,0,68,74,74,79,85,61,87,69],
[63,62,0,88,72,80,86,68,80,56],
[62,56,42,0,55,61,63,68,81,55],
[44,56,58,75,0,72,87,68,81,74],
[46,51,50,69,58,0,77,59,81,64],
[57,45,44,67,43,53,0,63,73,69],
[68,69,62,62,62,71,67,0,86,63],
[38,43,50,49,49,49,57,44,0,56],
[55,61,74,75,56,66,61,67,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,68,69,72,68,67,63,76],
[61,0,64,65,64,59,50,52,59,66],
[63,66,0,64,64,67,63,59,58,68],
[62,65,66,0,69,68,57,61,58,65],
[61,66,66,61,0,75,59,63,52,70],
[58,71,63,62,55,0,66,64,55,62],
[62,80,67,73,71,64,0,64,67,74],
[63,78,71,69,67,66,66,0,62,71],
[67,71,72,72,78,75,63,68,0,69],
[54,64,62,65,60,68,56,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,59,57,69,63,72,63,69,72],
[65,0,87,80,88,72,85,72,78,83],
[71,43,0,68,76,64,76,74,54,71],
[73,50,62,0,64,65,69,60,74,67],
[61,42,54,66,0,80,66,80,57,71],
[67,58,66,65,50,0,68,70,62,64],
[58,45,54,61,64,62,0,76,59,65],
[67,58,56,70,50,60,54,0,60,59],
[61,52,76,56,73,68,71,70,0,81],
[58,47,59,63,59,66,65,71,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,57,74,62,65,61,61,60],
[66,0,70,65,65,68,71,62,72,62],
[64,60,0,56,73,70,68,56,61,63],
[73,65,74,0,64,70,72,66,63,63],
[56,65,57,66,0,62,69,61,61,59],
[68,62,60,60,68,0,56,53,62,52],
[65,59,62,58,61,74,0,57,63,60],
[69,68,74,64,69,77,73,0,70,64],
[69,58,69,67,69,68,67,60,0,68],
[70,68,67,67,71,78,70,66,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,79,69,59,61,64,52,78,60],
[59,0,64,54,61,65,59,56,57,36],
[51,66,0,67,56,60,52,58,65,53],
[61,76,63,0,70,58,79,63,61,54],
[71,69,74,60,0,65,60,69,76,60],
[69,65,70,72,65,0,77,60,62,59],
[66,71,78,51,70,53,0,58,55,55],
[78,74,72,67,61,70,72,0,88,54],
[52,73,65,69,54,68,75,42,0,66],
[70,94,77,76,70,71,75,76,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,59,63,63,64,61,55,52],
[63,0,54,55,66,68,58,63,60,59],
[62,76,0,62,63,71,62,69,64,69],
[71,75,68,0,63,66,62,72,62,63],
[67,64,67,67,0,63,54,59,61,56],
[67,62,59,64,67,0,58,53,60,54],
[66,72,68,68,76,72,0,65,71,66],
[69,67,61,58,71,77,65,0,67,55],
[75,70,66,68,69,70,59,63,0,56],
[78,71,61,67,74,76,64,75,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,78,64,87,84,84,78,74,82],
[54,0,57,58,63,68,78,75,66,63],
[52,73,0,62,77,73,86,70,76,61],
[66,72,68,0,67,70,86,66,59,62],
[43,67,53,63,0,60,93,71,58,56],
[46,62,57,60,70,0,75,64,60,57],
[46,52,44,44,37,55,0,55,50,42],
[52,55,60,64,59,66,75,0,64,68],
[56,64,54,71,72,70,80,66,0,55],
[48,67,69,68,74,73,88,62,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,66,71,66,65,67,74,69,70],
[58,0,65,65,57,57,64,69,62,63],
[64,65,0,67,65,59,63,69,61,58],
[59,65,63,0,72,65,63,74,60,64],
[64,73,65,58,0,62,62,72,64,68],
[65,73,71,65,68,0,67,67,72,70],
[63,66,67,67,68,63,0,65,61,55],
[56,61,61,56,58,63,65,0,59,61],
[61,68,69,70,66,58,69,71,0,64],
[60,67,72,66,62,60,75,69,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,67,60,55,58,52,65,57,52],
[68,0,79,61,67,63,48,72,63,61],
[63,51,0,73,71,58,48,66,68,62],
[70,69,57,0,74,56,51,67,59,62],
[75,63,59,56,0,67,51,60,56,56],
[72,67,72,74,63,0,68,60,62,66],
[78,82,82,79,79,62,0,73,75,69],
[65,58,64,63,70,70,57,0,61,67],
[73,67,62,71,74,68,55,69,0,73],
[78,69,68,68,74,64,61,63,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,56,55,65,69,55,65,67],
[65,0,77,66,57,64,69,68,80,75],
[61,53,0,59,60,57,65,59,60,53],
[74,64,71,0,63,56,77,59,66,66],
[75,73,70,67,0,58,65,56,64,60],
[65,66,73,74,72,0,69,62,69,72],
[61,61,65,53,65,61,0,58,58,70],
[75,62,71,71,74,68,72,0,70,62],
[65,50,70,64,66,61,72,60,0,62],
[63,55,77,64,70,58,60,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,50,48,41,56,57,57,48,54],
[70,0,65,67,51,61,59,68,61,68],
[80,65,0,62,57,71,70,73,64,69],
[82,63,68,0,73,79,72,85,70,87],
[89,79,73,57,0,81,68,83,63,82],
[74,69,59,51,49,0,57,66,59,64],
[73,71,60,58,62,73,0,85,60,69],
[73,62,57,45,47,64,45,0,47,51],
[82,69,66,60,67,71,70,83,0,77],
[76,62,61,43,48,66,61,79,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,62,58,58,63,61,72,54],
[67,0,66,67,69,62,59,51,72,61],
[64,64,0,61,68,57,61,53,71,63],
[68,63,69,0,60,65,55,58,61,63],
[72,61,62,70,0,58,54,62,69,53],
[72,68,73,65,72,0,59,65,70,63],
[67,71,69,75,76,71,0,53,76,70],
[69,79,77,72,68,65,77,0,76,66],
[58,58,59,69,61,60,54,54,0,58],
[76,69,67,67,77,67,60,64,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,77,60,72,56,49,67,44,78],
[74,0,82,76,77,80,65,68,69,63],
[53,48,0,49,64,54,49,64,51,58],
[70,54,81,0,74,50,67,60,63,60],
[58,53,66,56,0,50,58,63,64,65],
[74,50,76,80,80,0,58,69,65,68],
[81,65,81,63,72,72,0,66,71,60],
[63,62,66,70,67,61,64,0,59,65],
[86,61,79,67,66,65,59,71,0,74],
[52,67,72,70,65,62,70,65,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,56,55,49,44,45,61,54],
[63,0,67,54,57,56,48,62,72,57],
[67,63,0,61,64,50,61,52,76,69],
[74,76,69,0,59,58,62,70,74,65],
[75,73,66,71,0,63,57,60,70,58],
[81,74,80,72,67,0,73,64,76,63],
[86,82,69,68,73,57,0,61,77,77],
[85,68,78,60,70,66,69,0,82,71],
[69,58,54,56,60,54,53,48,0,63],
[76,73,61,65,72,67,53,59,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,76,61,71,67,51,66,69,68],
[68,0,65,66,73,59,52,71,72,65],
[54,65,0,59,69,57,51,49,65,65],
[69,64,71,0,76,69,57,63,78,71],
[59,57,61,54,0,62,49,60,62,64],
[63,71,73,61,68,0,53,67,70,66],
[79,78,79,73,81,77,0,65,77,72],
[64,59,81,67,70,63,65,0,80,70],
[61,58,65,52,68,60,53,50,0,62],
[62,65,65,59,66,64,58,60,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,66,68,67,66,55,57,49,58],
[80,0,61,67,73,74,65,67,59,63],
[64,69,0,71,65,65,67,66,57,76],
[62,63,59,0,63,56,68,68,49,56],
[63,57,65,67,0,64,59,62,60,51],
[64,56,65,74,66,0,59,67,49,64],
[75,65,63,62,71,71,0,68,55,64],
[73,63,64,62,68,63,62,0,67,62],
[81,71,73,81,70,81,75,63,0,79],
[72,67,54,74,79,66,66,68,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,51,64,55,54,64,55,63,60],
[62,0,57,60,59,47,59,67,67,53],
[79,73,0,75,61,62,69,78,66,64],
[66,70,55,0,56,49,53,60,67,51],
[75,71,69,74,0,63,64,76,72,59],
[76,83,68,81,67,0,65,80,76,67],
[66,71,61,77,66,65,0,73,80,62],
[75,63,52,70,54,50,57,0,62,56],
[67,63,64,63,58,54,50,68,0,68],
[70,77,66,79,71,63,68,74,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,67,67,67,61,65,70,68,75],
[58,0,71,60,63,60,67,65,63,73],
[63,59,0,63,72,63,59,75,68,65],
[63,70,67,0,67,63,56,62,63,67],
[63,67,58,63,0,65,62,78,60,63],
[69,70,67,67,65,0,67,77,63,65],
[65,63,71,74,68,63,0,69,65,67],
[60,65,55,68,52,53,61,0,50,54],
[62,67,62,67,70,67,65,80,0,68],
[55,57,65,63,67,65,63,76,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,65,69,65,70,54,68,66,64],
[68,0,68,71,99,75,69,75,65,64],
[65,62,0,50,75,60,74,59,54,67],
[61,59,80,0,62,58,72,58,50,76],
[65,31,55,68,0,53,67,64,52,57],
[60,55,70,72,77,0,58,66,52,72],
[76,61,56,58,63,72,0,61,60,58],
[62,55,71,72,66,64,69,0,49,65],
[64,65,76,80,78,78,70,81,0,72],
[66,66,63,54,73,58,72,65,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,71,66,58,79,70,72,62,79],
[68,0,64,73,58,59,57,48,59,69],
[59,66,0,66,56,48,61,63,45,69],
[64,57,64,0,62,57,63,58,59,76],
[72,72,74,68,0,62,90,61,74,106],
[51,71,82,73,68,0,74,55,69,69],
[60,73,69,67,40,56,0,49,59,63],
[58,82,67,72,69,75,81,0,64,82],
[68,71,85,71,56,61,71,66,0,77],
[51,61,61,54,24,61,67,48,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,75,57,47,56,69,58,62,61],
[79,0,71,61,67,70,80,53,69,85],
[55,59,0,56,53,66,77,54,68,72],
[73,69,74,0,52,57,77,50,64,64],
[83,63,77,78,0,70,80,65,73,72],
[74,60,64,73,60,0,75,58,59,75],
[61,50,53,53,50,55,0,48,65,73],
[72,77,76,80,65,72,82,0,78,76],
[68,61,62,66,57,71,65,52,0,72],
[69,45,58,66,58,55,57,54,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,64,61,71,62,67,69,67,71],
[76,0,63,70,75,70,58,63,58,73],
[66,67,0,56,63,59,52,61,54,67],
[69,60,74,0,77,68,73,66,76,76],
[59,55,67,53,0,58,54,60,56,60],
[68,60,71,62,72,0,65,59,60,70],
[63,72,78,57,76,65,0,65,67,73],
[61,67,69,64,70,71,65,0,58,70],
[63,72,76,54,74,70,63,72,0,71],
[59,57,63,54,70,60,57,60,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,53,45,77,57,64,70,74,64],
[39,0,39,32,48,47,56,31,41,49],
[77,91,0,75,61,70,78,77,78,78],
[85,98,55,0,85,71,71,78,100,95],
[53,82,69,45,0,46,70,52,61,53],
[73,83,60,59,84,0,68,60,52,70],
[66,74,52,59,60,62,0,54,75,56],
[60,99,53,52,78,70,76,0,67,70],
[56,89,52,30,69,78,55,63,0,57],
[66,81,52,35,77,60,74,60,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,75,93,37,93,93,74,74,74],
[56,0,75,74,55,74,74,56,56,74],
[55,55,0,37,18,37,56,37,37,36],
[37,56,93,0,37,55,74,19,55,37],
[93,75,112,93,0,74,111,74,55,93],
[37,56,93,75,56,0,75,56,56,75],
[37,56,74,56,19,55,0,37,18,37],
[56,74,93,111,56,74,93,0,111,75],
[56,74,93,75,75,74,112,19,0,75],
[56,56,94,93,37,55,93,55,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,70,62,50,53,58,53,63,59],
[66,0,63,62,52,54,58,59,63,69],
[60,67,0,61,59,59,67,55,65,68],
[68,68,69,0,60,69,72,68,66,66],
[80,78,71,70,0,69,59,71,73,80],
[77,76,71,61,61,0,75,71,72,73],
[72,72,63,58,71,55,0,59,60,74],
[77,71,75,62,59,59,71,0,67,80],
[67,67,65,64,57,58,70,63,0,68],
[71,61,62,64,50,57,56,50,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,61,68,71,72,62,75,73,66],
[62,0,53,61,60,62,58,61,67,58],
[69,77,0,67,68,78,60,70,65,69],
[62,69,63,0,69,59,70,65,61,64],
[59,70,62,61,0,65,59,73,71,70],
[58,68,52,71,65,0,60,63,71,62],
[68,72,70,60,71,70,0,68,70,64],
[55,69,60,65,57,67,62,0,70,61],
[57,63,65,69,59,59,60,60,0,62],
[64,72,61,66,60,68,66,69,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,60,60,54,63,65,70,58,72],
[67,0,68,55,60,68,64,72,54,77],
[70,62,0,58,60,52,72,78,59,65],
[70,75,72,0,73,64,75,75,73,81],
[76,70,70,57,0,75,74,84,67,71],
[67,62,78,66,55,0,67,67,62,69],
[65,66,58,55,56,63,0,68,58,65],
[60,58,52,55,46,63,62,0,54,57],
[72,76,71,57,63,68,72,76,0,73],
[58,53,65,49,59,61,65,73,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,50,43,51,63,76,63,61,57],
[81,0,48,61,59,65,69,59,62,75],
[80,82,0,73,58,95,75,73,77,80],
[87,69,57,0,66,63,74,67,60,86],
[79,71,72,64,0,73,83,67,78,68],
[67,65,35,67,57,0,76,53,79,67],
[54,61,55,56,47,54,0,50,59,70],
[67,71,57,63,63,77,80,0,75,69],
[69,68,53,70,52,51,71,55,0,68],
[73,55,50,44,62,63,60,61,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,67,58,67,61,70,71,76,61],
[68,0,69,57,73,60,75,74,75,53],
[63,61,0,53,63,67,63,71,64,70],
[72,73,77,0,67,55,65,73,62,70],
[63,57,67,63,0,69,65,63,71,43],
[69,70,63,75,61,0,81,83,73,65],
[60,55,67,65,65,49,0,72,53,51],
[59,56,59,57,67,47,58,0,58,70],
[54,55,66,68,59,57,77,72,0,53],
[69,77,60,60,87,65,79,60,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,65,65,67,54,65,71,54,49],
[81,0,63,72,75,61,83,71,64,59],
[65,67,0,71,76,69,65,73,67,61],
[65,58,59,0,69,58,62,73,52,49],
[63,55,54,61,0,55,63,67,50,51],
[76,69,61,72,75,0,65,67,67,68],
[65,47,65,68,67,65,0,64,54,43],
[59,59,57,57,63,63,66,0,53,44],
[76,66,63,78,80,63,76,77,0,52],
[81,71,69,81,79,62,87,86,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,69,77,59,78,71,76,73,75],
[75,0,75,71,73,75,65,82,64,73],
[61,55,0,69,67,68,63,82,61,78],
[53,59,61,0,70,77,73,79,71,87],
[71,57,63,60,0,63,55,70,61,73],
[52,55,62,53,67,0,60,70,64,73],
[59,65,67,57,75,70,0,75,57,73],
[54,48,48,51,60,60,55,0,57,64],
[57,66,69,59,69,66,73,73,0,80],
[55,57,52,43,57,57,57,66,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,79,61,58,65,74,62,67,61],
[64,0,73,65,59,68,66,70,75,66],
[51,57,0,50,57,61,64,63,64,61],
[69,65,80,0,71,71,73,66,79,70],
[72,71,73,59,0,71,68,69,73,70],
[65,62,69,59,59,0,68,71,61,67],
[56,64,66,57,62,62,0,63,66,61],
[68,60,67,64,61,59,67,0,68,64],
[63,55,66,51,57,69,64,62,0,57],
[69,64,69,60,60,63,69,66,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,86,62,67,87,68,74,79,75],
[52,0,61,46,51,64,53,56,49,61],
[44,69,0,43,60,74,52,77,71,62],
[68,84,87,0,77,78,61,85,76,67],
[63,79,70,53,0,84,55,68,60,59],
[43,66,56,52,46,0,55,61,56,57],
[62,77,78,69,75,75,0,73,71,71],
[56,74,53,45,62,69,57,0,43,67],
[51,81,59,54,70,74,59,87,0,53],
[55,69,68,63,71,73,59,63,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,80,70,72,62,74,64,68],
[61,0,62,73,64,67,60,72,66,59],
[65,68,0,81,66,75,68,75,72,73],
[50,57,49,0,58,57,51,58,56,59],
[60,66,64,72,0,63,60,69,63,61],
[58,63,55,73,67,0,59,67,65,66],
[68,70,62,79,70,71,0,72,71,66],
[56,58,55,72,61,63,58,0,61,63],
[66,64,58,74,67,65,59,69,0,65],
[62,71,57,71,69,64,64,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,26,54,51,42,53,52,82,42],
[76,0,52,41,77,80,40,63,90,91],
[104,78,0,66,51,66,91,77,106,65],
[76,89,64,0,63,77,74,49,76,63],
[79,53,79,67,0,55,53,93,81,68],
[88,50,64,53,75,0,63,75,104,50],
[77,90,39,56,77,67,0,91,105,78],
[78,67,53,81,37,55,39,0,81,55],
[48,40,24,54,49,26,25,49,0,51],
[88,39,65,67,62,80,52,75,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,26,104,79,53,79,79,104,104],
[26,0,26,78,105,26,26,79,77,104],
[104,104,0,104,130,104,53,104,104,104],
[26,52,26,0,105,52,26,79,77,52],
[51,25,0,25,0,0,26,26,51,77],
[77,104,26,78,130,0,26,79,51,104],
[51,104,77,104,104,104,0,104,130,104],
[51,51,26,51,104,51,26,0,77,77],
[26,53,26,53,79,79,0,53,0,79],
[26,26,26,78,53,26,26,53,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,65,64,58,65,61,65,74,67],
[52,0,51,59,50,62,58,58,49,58],
[65,79,0,72,58,65,61,74,67,68],
[66,71,58,0,51,63,60,70,63,77],
[72,80,72,79,0,64,65,72,77,82],
[65,68,65,67,66,0,69,69,70,79],
[69,72,69,70,65,61,0,72,67,66],
[65,72,56,60,58,61,58,0,50,76],
[56,81,63,67,53,60,63,80,0,79],
[63,72,62,53,48,51,64,54,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,55,61,57,53,65,66,64,65],
[66,0,68,69,64,67,62,72,71,67],
[75,62,0,68,64,60,66,62,71,61],
[69,61,62,0,60,59,64,57,66,62],
[73,66,66,70,0,64,64,73,77,64],
[77,63,70,71,66,0,71,73,71,69],
[65,68,64,66,66,59,0,69,69,69],
[64,58,68,73,57,57,61,0,71,69],
[66,59,59,64,53,59,61,59,0,66],
[65,63,69,68,66,61,61,61,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,73,75,93,77,71,82,74,77],
[65,0,58,78,90,73,70,63,69,83],
[57,72,0,66,75,94,76,61,69,79],
[55,52,64,0,90,62,74,65,62,76],
[37,40,55,40,0,44,34,34,51,52],
[53,57,36,68,86,0,58,62,62,60],
[59,60,54,56,96,72,0,57,44,78],
[48,67,69,65,96,68,73,0,63,88],
[56,61,61,68,79,68,86,67,0,82],
[53,47,51,54,78,70,52,42,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,59,59,87,62,73,65,83,88],
[52,0,57,58,71,59,80,56,76,80],
[71,73,0,66,80,69,62,51,68,83],
[71,72,64,0,90,66,80,65,66,73],
[43,59,50,40,0,38,72,48,62,60],
[68,71,61,64,92,0,90,74,72,82],
[57,50,68,50,58,40,0,46,47,66],
[65,74,79,65,82,56,84,0,65,77],
[47,54,62,64,68,58,83,65,0,74],
[42,50,47,57,70,48,64,53,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,50,64,73,59,76,72,77,72],
[66,0,61,67,73,61,72,72,70,80],
[80,69,0,66,78,65,71,75,76,69],
[66,63,64,0,61,58,53,71,58,76],
[57,57,52,69,0,60,52,65,72,62],
[71,69,65,72,70,0,67,84,75,80],
[54,58,59,77,78,63,0,68,71,77],
[58,58,55,59,65,46,62,0,62,50],
[53,60,54,72,58,55,59,68,0,72],
[58,50,61,54,68,50,53,80,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,79,50,67,66,65,80,73],
[68,0,73,76,54,74,67,65,75,72],
[69,57,0,83,64,69,68,70,76,66],
[51,54,47,0,43,61,54,61,68,67],
[80,76,66,87,0,75,80,63,80,77],
[63,56,61,69,55,0,67,60,71,69],
[64,63,62,76,50,63,0,66,65,77],
[65,65,60,69,67,70,64,0,64,65],
[50,55,54,62,50,59,65,66,0,63],
[57,58,64,63,53,61,53,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,67,65,63,54,70,66,55,58],
[62,0,68,58,66,55,72,65,58,62],
[63,62,0,67,66,65,68,74,70,64],
[65,72,63,0,66,61,62,65,63,63],
[67,64,64,64,0,57,67,70,65,57],
[76,75,65,69,73,0,74,78,64,70],
[60,58,62,68,63,56,0,59,59,57],
[64,65,56,65,60,52,71,0,56,60],
[75,72,60,67,65,66,71,74,0,65],
[72,68,66,67,73,60,73,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,61,77,65,60,59,68,74,50],
[81,0,67,75,85,84,101,70,76,58],
[69,63,0,99,71,74,89,58,72,71],
[53,55,31,0,40,60,66,57,31,22],
[65,45,59,90,0,76,81,74,70,63],
[70,46,56,70,54,0,88,74,63,63],
[71,29,41,64,49,42,0,58,50,64],
[62,60,72,73,56,56,72,0,38,52],
[56,54,58,99,60,67,80,92,0,72],
[80,72,59,108,67,67,66,78,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,73,77,78,53,66,68,70,68],
[63,0,70,62,52,50,58,49,69,58],
[57,60,0,74,66,45,65,45,50,58],
[53,68,56,0,66,46,51,48,60,40],
[52,78,64,64,0,52,70,74,65,59],
[77,80,85,84,78,0,66,74,74,61],
[64,72,65,79,60,64,0,64,72,67],
[62,81,85,82,56,56,66,0,72,54],
[60,61,80,70,65,56,58,58,0,61],
[62,72,72,90,71,69,63,76,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,52,64,60,70,63,73,67,47],
[91,0,73,62,63,79,84,75,65,57],
[78,57,0,64,70,61,70,74,74,76],
[66,68,66,0,86,70,78,65,87,83],
[70,67,60,44,0,53,65,71,75,71],
[60,51,69,60,77,0,62,51,52,52],
[67,46,60,52,65,68,0,62,58,48],
[57,55,56,65,59,79,68,0,62,58],
[63,65,56,43,55,78,72,68,0,72],
[83,73,54,47,59,78,82,72,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,67,64,60,62,60,66,70,58],
[73,0,70,72,67,63,61,68,71,71],
[63,60,0,65,69,72,60,59,68,65],
[66,58,65,0,64,65,62,63,66,62],
[70,63,61,66,0,69,52,65,68,64],
[68,67,58,65,61,0,58,64,66,65],
[70,69,70,68,78,72,0,68,80,63],
[64,62,71,67,65,66,62,0,71,61],
[60,59,62,64,62,64,50,59,0,56],
[72,59,65,68,66,65,67,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,68,64,58,68,60,67,69,70],
[57,0,70,62,65,74,63,61,70,65],
[62,60,0,68,59,70,70,68,66,59],
[66,68,62,0,61,62,61,61,61,65],
[72,65,71,69,0,69,67,66,76,70],
[62,56,60,68,61,0,62,63,68,63],
[70,67,60,69,63,68,0,69,73,72],
[63,69,62,69,64,67,61,0,73,61],
[61,60,64,69,54,62,57,57,0,61],
[60,65,71,65,60,67,58,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,82,64,66,67,65,65,64,32],
[31,0,48,64,32,49,48,64,47,48],
[48,82,0,63,66,98,64,97,32,49],
[66,66,67,0,83,67,81,99,49,66],
[64,98,64,47,0,81,64,97,64,80],
[63,81,32,63,49,0,47,48,47,64],
[65,82,66,49,66,83,0,98,65,82],
[65,66,33,31,33,82,32,0,65,66],
[66,83,98,81,66,83,65,65,0,82],
[98,82,81,64,50,66,48,64,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,82,69,73,78,56,68,87,68],
[66,0,72,71,68,85,65,66,71,76],
[48,58,0,49,51,78,55,50,65,57],
[61,59,81,0,60,77,63,62,80,63],
[57,62,79,70,0,74,70,67,78,70],
[52,45,52,53,56,0,54,58,53,55],
[74,65,75,67,60,76,0,63,76,62],
[62,64,80,68,63,72,67,0,76,65],
[43,59,65,50,52,77,54,54,0,63],
[62,54,73,67,60,75,68,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,60,69,74,53,67,62,59,56],
[73,0,59,70,73,61,70,82,64,65],
[70,71,0,72,82,60,72,78,62,74],
[61,60,58,0,72,59,53,61,57,54],
[56,57,48,58,0,53,60,58,59,51],
[77,69,70,71,77,0,71,73,81,63],
[63,60,58,77,70,59,0,68,66,57],
[68,48,52,69,72,57,62,0,67,56],
[71,66,68,73,71,49,64,63,0,66],
[74,65,56,76,79,67,73,74,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,71,60,70,59,75,60,51,71],
[54,0,51,56,57,58,48,48,53,54],
[59,79,0,71,70,52,69,63,58,64],
[70,74,59,0,63,48,66,54,48,62],
[60,73,60,67,0,52,67,59,56,62],
[71,72,78,82,78,0,67,75,60,73],
[55,82,61,64,63,63,0,65,63,57],
[70,82,67,76,71,55,65,0,67,79],
[79,77,72,82,74,70,67,63,0,67],
[59,76,66,68,68,57,73,51,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,70,66,77,73,79,59,56,63],
[74,0,61,79,71,70,83,67,66,70],
[60,69,0,71,74,70,84,57,65,68],
[64,51,59,0,70,62,67,46,48,51],
[53,59,56,60,0,67,70,50,61,59],
[57,60,60,68,63,0,75,45,60,58],
[51,47,46,63,60,55,0,41,52,47],
[71,63,73,84,80,85,89,0,72,68],
[74,64,65,82,69,70,78,58,0,67],
[67,60,62,79,71,72,83,62,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,57,76,57,62,59,58,69,62],
[74,0,72,83,70,81,74,65,77,69],
[73,58,0,72,64,75,73,71,67,67],
[54,47,58,0,53,61,61,50,66,63],
[73,60,66,77,0,75,78,73,73,69],
[68,49,55,69,55,0,60,62,68,64],
[71,56,57,69,52,70,0,64,61,53],
[72,65,59,80,57,68,66,0,69,71],
[61,53,63,64,57,62,69,61,0,63],
[68,61,63,67,61,66,77,59,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,72,76,75,59,69,74,78,71],
[52,0,57,64,63,64,62,65,65,65],
[58,73,0,61,71,60,73,72,70,72],
[54,66,69,0,65,59,61,70,64,55],
[55,67,59,65,0,66,67,71,67,62],
[71,66,70,71,64,0,71,67,75,71],
[61,68,57,69,63,59,0,70,56,62],
[56,65,58,60,59,63,60,0,66,65],
[52,65,60,66,63,55,74,64,0,62],
[59,65,58,75,68,59,68,65,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,48,47,55,50,71,53,62,55],
[79,0,54,57,47,55,68,62,66,65],
[82,76,0,82,62,65,79,65,79,68],
[83,73,48,0,61,52,81,58,79,69],
[75,83,68,69,0,57,67,63,65,74],
[80,75,65,78,73,0,87,66,70,79],
[59,62,51,49,63,43,0,49,66,59],
[77,68,65,72,67,64,81,0,65,68],
[68,64,51,51,65,60,64,65,0,68],
[75,65,62,61,56,51,71,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,72,61,66,64,63,73,65,66],
[62,0,65,67,64,67,55,71,59,65],
[58,65,0,57,56,56,56,60,45,61],
[69,63,73,0,68,59,57,66,65,75],
[64,66,74,62,0,57,58,69,57,67],
[66,63,74,71,73,0,74,80,63,75],
[67,75,74,73,72,56,0,70,56,72],
[57,59,70,64,61,50,60,0,56,63],
[65,71,85,65,73,67,74,74,0,76],
[64,65,69,55,63,55,58,67,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,59,70,69,67,65,65,67,76],
[58,0,52,57,65,65,63,60,64,63],
[71,78,0,72,76,72,71,61,76,74],
[60,73,58,0,71,58,63,54,71,69],
[61,65,54,59,0,62,54,56,59,63],
[63,65,58,72,68,0,62,56,67,67],
[65,67,59,67,76,68,0,62,71,74],
[65,70,69,76,74,74,68,0,72,72],
[63,66,54,59,71,63,59,58,0,61],
[54,67,56,61,67,63,56,58,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,56,70,75,64,44,60,39],
[69,0,76,65,69,72,74,58,61,73],
[63,54,0,63,76,67,67,57,46,40],
[74,65,67,0,74,73,62,63,67,53],
[60,61,54,56,0,64,48,52,57,43],
[55,58,63,57,66,0,58,53,59,57],
[66,56,63,68,82,72,0,59,67,61],
[86,72,73,67,78,77,71,0,58,55],
[70,69,84,63,73,71,63,72,0,52],
[91,57,90,77,87,73,69,75,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,69,54,65,82,56,63,70,63],
[62,0,62,47,57,97,63,55,58,82],
[61,68,0,66,55,83,69,62,57,76],
[76,83,64,0,51,77,62,62,71,63],
[65,73,75,79,0,88,83,75,84,76],
[48,33,47,53,42,0,47,35,48,48],
[74,67,61,68,47,83,0,62,76,84],
[67,75,68,68,55,95,68,0,64,84],
[60,72,73,59,46,82,54,66,0,72],
[67,48,54,67,54,82,46,46,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,78,71,74,91,65,71,90,64],
[61,0,67,82,61,93,60,66,80,70],
[52,63,0,64,68,74,61,77,87,64],
[59,48,66,0,55,66,59,66,72,55],
[56,69,62,75,0,66,61,70,83,53],
[39,37,56,64,64,0,23,55,67,43],
[65,70,69,71,69,107,0,83,74,69],
[59,64,53,64,60,75,47,0,78,63],
[40,50,43,58,47,63,56,52,0,48],
[66,60,66,75,77,87,61,67,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,60,72,87,101,57,58,59,57],
[72,0,73,85,86,87,86,43,85,70],
[70,57,0,57,71,71,87,71,72,41],
[58,45,73,0,86,87,100,72,72,84],
[43,44,59,44,0,75,87,58,89,74],
[29,43,59,43,55,0,86,43,58,73],
[73,44,43,30,43,44,0,58,61,58],
[72,87,59,58,72,87,72,0,74,56],
[71,45,58,58,41,72,69,56,0,99],
[73,60,89,46,56,57,72,74,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,61,69,61,69,72,80,60,60],
[55,0,63,55,50,59,72,69,58,66],
[69,67,0,68,65,73,71,71,59,59],
[61,75,62,0,57,68,68,76,57,59],
[69,80,65,73,0,74,69,70,67,71],
[61,71,57,62,56,0,67,84,58,63],
[58,58,59,62,61,63,0,80,59,59],
[50,61,59,54,60,46,50,0,49,52],
[70,72,71,73,63,72,71,81,0,52],
[70,64,71,71,59,67,71,78,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,59,62,50,58,56,55,52,51],
[69,0,57,68,45,58,54,68,48,34],
[71,73,0,50,51,47,58,47,57,39],
[68,62,80,0,34,71,52,56,51,49],
[80,85,79,96,0,62,83,91,77,51],
[72,72,83,59,68,0,64,65,57,54],
[74,76,72,78,47,66,0,72,40,56],
[75,62,83,74,39,65,58,0,56,58],
[78,82,73,79,53,73,90,74,0,71],
[79,96,91,81,79,76,74,72,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,67,57,59,54,54,64,64],
[63,0,66,62,65,74,59,52,65,66],
[66,64,0,65,70,75,75,59,63,66],
[63,68,65,0,67,68,57,70,68,70],
[73,65,60,63,0,80,68,61,63,70],
[71,56,55,62,50,0,46,53,71,45],
[76,71,55,73,62,84,0,69,68,71],
[76,78,71,60,69,77,61,0,83,68],
[66,65,67,62,67,59,62,47,0,58],
[66,64,64,60,60,85,59,62,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,62,65,59,60,73,59,61,65],
[76,0,62,78,63,75,75,68,64,78],
[68,68,0,62,62,62,74,59,58,65],
[65,52,68,0,54,55,58,59,48,68],
[71,67,68,76,0,62,81,74,66,79],
[70,55,68,75,68,0,89,80,68,75],
[57,55,56,72,49,41,0,49,55,67],
[71,62,71,71,56,50,81,0,61,66],
[69,66,72,82,64,62,75,69,0,73],
[65,52,65,62,51,55,63,64,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,59,65,58,64,52,59,58,71],
[71,0,56,49,43,56,58,49,58,53],
[71,74,0,62,52,61,71,69,71,71],
[65,81,68,0,70,63,70,90,80,72],
[72,87,78,60,0,73,73,59,69,66],
[66,74,69,67,57,0,62,73,70,74],
[78,72,59,60,57,68,0,75,64,67],
[71,81,61,40,71,57,55,0,48,58],
[72,72,59,50,61,60,66,82,0,57],
[59,77,59,58,64,56,63,72,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,58,67,77,73,64,63,68,68],
[69,0,63,66,63,63,57,67,60,67],
[72,67,0,66,61,54,72,60,78,70],
[63,64,64,0,58,60,70,61,62,67],
[53,67,69,72,0,66,72,66,67,68],
[57,67,76,70,64,0,67,59,67,73],
[66,73,58,60,58,63,0,61,59,65],
[67,63,70,69,64,71,69,0,64,59],
[62,70,52,68,63,63,71,66,0,64],
[62,63,60,63,62,57,65,71,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,70,64,57,65,62,63,57,61],
[68,0,68,61,61,65,65,61,59,54],
[60,62,0,66,66,55,69,64,61,58],
[66,69,64,0,73,62,67,62,66,62],
[73,69,64,57,0,61,70,57,60,63],
[65,65,75,68,69,0,68,67,69,62],
[68,65,61,63,60,62,0,62,69,53],
[67,69,66,68,73,63,68,0,70,72],
[73,71,69,64,70,61,61,60,0,59],
[69,76,72,68,67,68,77,58,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,70,73,55,72,64,63,67,66],
[67,0,71,73,58,66,66,67,66,65],
[60,59,0,72,50,64,69,64,62,66],
[57,57,58,0,57,62,53,60,58,68],
[75,72,80,73,0,69,64,68,70,71],
[58,64,66,68,61,0,62,72,67,61],
[66,64,61,77,66,68,0,76,72,64],
[67,63,66,70,62,58,54,0,71,69],
[63,64,68,72,60,63,58,59,0,67],
[64,65,64,62,59,69,66,61,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,59,55,63,62,67,58,69],
[67,0,55,62,53,59,56,67,57,71],
[66,75,0,57,60,61,68,65,69,68],
[71,68,73,0,60,64,66,68,64,72],
[75,77,70,70,0,73,65,76,63,78],
[67,71,69,66,57,0,73,70,56,76],
[68,74,62,64,65,57,0,61,61,70],
[63,63,65,62,54,60,69,0,63,65],
[72,73,61,66,67,74,69,67,0,68],
[61,59,62,58,52,54,60,65,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,66,73,69,63,73,67,70,65],
[61,0,63,65,60,56,60,61,69,65],
[64,67,0,63,60,71,51,64,70,68],
[57,65,67,0,62,53,60,53,58,63],
[61,70,70,68,0,56,66,64,72,66],
[67,74,59,77,74,0,66,67,74,73],
[57,70,79,70,64,64,0,70,68,68],
[63,69,66,77,66,63,60,0,71,76],
[60,61,60,72,58,56,62,59,0,62],
[65,65,62,67,64,57,62,54,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,62,58,56,50,39,58,46,47],
[73,0,66,62,65,47,56,78,71,55],
[68,64,0,44,63,54,56,58,57,62],
[72,68,86,0,76,68,65,66,55,54],
[74,65,67,54,0,57,58,51,62,60],
[80,83,76,62,73,0,72,71,63,61],
[91,74,74,65,72,58,0,69,61,67],
[72,52,72,64,79,59,61,0,56,60],
[84,59,73,75,68,67,69,74,0,55],
[83,75,68,76,70,69,63,70,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,59,56,43,61,67,62,52,60],
[84,0,80,60,65,80,71,76,75,75],
[71,50,0,52,53,57,65,65,49,65],
[74,70,78,0,62,69,68,77,67,67],
[87,65,77,68,0,82,64,76,66,64],
[69,50,73,61,48,0,43,55,50,48],
[63,59,65,62,66,87,0,78,62,77],
[68,54,65,53,54,75,52,0,62,50],
[78,55,81,63,64,80,68,68,0,71],
[70,55,65,63,66,82,53,80,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,73,73,65,59,67,73,66,61],
[69,0,69,68,69,63,65,65,60,65],
[57,61,0,64,66,62,71,67,63,61],
[57,62,66,0,75,61,62,60,64,67],
[65,61,64,55,0,57,68,67,74,65],
[71,67,68,69,73,0,69,60,71,67],
[63,65,59,68,62,61,0,60,68,61],
[57,65,63,70,63,70,70,0,73,68],
[64,70,67,66,56,59,62,57,0,66],
[69,65,69,63,65,63,69,62,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,98,65,32,65,97,32,32,97],
[65,0,98,97,32,97,65,65,32,65],
[32,32,0,97,64,97,97,64,32,97],
[65,33,33,0,33,66,98,65,33,65],
[98,98,66,97,0,98,65,65,33,65],
[65,33,33,64,32,0,32,32,0,32],
[33,65,33,32,65,98,0,33,33,32],
[98,65,66,65,65,98,97,0,0,65],
[98,98,98,97,97,130,97,130,0,65],
[33,65,33,65,65,98,98,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,46,56,63,56,59,53,59,73],
[63,0,56,55,54,58,53,57,66,72],
[84,74,0,61,70,61,61,66,67,67],
[74,75,69,0,85,61,63,77,77,78],
[67,76,60,45,0,52,62,66,78,74],
[74,72,69,69,78,0,64,69,76,77],
[71,77,69,67,68,66,0,59,69,75],
[77,73,64,53,64,61,71,0,71,80],
[71,64,63,53,52,54,61,59,0,68],
[57,58,63,52,56,53,55,50,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,67,69,65,59,61,67,66,72],
[51,0,60,56,68,67,58,61,68,67],
[63,70,0,77,70,70,69,66,67,80],
[61,74,53,0,68,71,63,76,72,76],
[65,62,60,62,0,68,56,65,62,67],
[71,63,60,59,62,0,63,69,74,71],
[69,72,61,67,74,67,0,73,72,77],
[63,69,64,54,65,61,57,0,72,67],
[64,62,63,58,68,56,58,58,0,62],
[58,63,50,54,63,59,53,63,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,26,79,51,25,26,26,26,51],
[51,0,0,54,50,50,26,26,0,51],
[104,130,0,105,78,78,79,54,25,104],
[51,76,25,0,50,50,26,26,0,51],
[79,80,52,80,0,25,26,26,0,51],
[105,80,52,80,105,0,54,80,26,80],
[104,104,51,104,104,76,0,26,50,76],
[104,104,76,104,104,50,104,0,76,50],
[104,130,105,130,130,104,80,54,0,104],
[79,79,26,79,79,50,54,80,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,68,61,58,60,70,79,58,58],
[80,0,81,100,80,100,58,70,77,109],
[62,49,0,79,67,100,59,70,77,78],
[69,30,51,0,59,61,51,71,77,70],
[72,50,63,71,0,81,71,71,69,82],
[70,30,30,69,49,0,59,51,78,70],
[60,72,71,79,59,71,0,62,57,88],
[51,60,60,59,59,79,68,0,56,79],
[72,53,53,53,61,52,73,74,0,85],
[72,21,52,60,48,60,42,51,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,63,57,71,56,59,69,64,58],
[58,0,75,70,77,74,78,73,82,72],
[67,55,0,47,54,51,59,68,71,49],
[73,60,83,0,73,54,53,68,62,69],
[59,53,76,57,0,56,63,64,75,52],
[74,56,79,76,74,0,76,85,72,57],
[71,52,71,77,67,54,0,81,68,74],
[61,57,62,62,66,45,49,0,69,69],
[66,48,59,68,55,58,62,61,0,53],
[72,58,81,61,78,73,56,61,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,65,39,39,64,79,66,64,50],
[79,0,65,26,51,64,66,66,66,64],
[65,65,0,52,53,104,93,93,65,77],
[91,104,78,0,66,103,66,79,79,64],
[91,79,77,64,0,89,79,92,77,89],
[66,66,26,27,41,0,41,54,39,26],
[51,64,37,64,51,89,0,64,37,76],
[64,64,37,51,38,76,66,0,64,62],
[66,64,65,51,53,91,93,66,0,65],
[80,66,53,66,41,104,54,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,68,64,63,66,71,49,53,58],
[68,0,70,62,71,72,59,54,45,65],
[62,60,0,67,80,84,73,77,65,71],
[66,68,63,0,74,76,64,67,55,62],
[67,59,50,56,0,70,53,54,55,53],
[64,58,46,54,60,0,41,58,58,51],
[59,71,57,66,77,89,0,79,63,64],
[81,76,53,63,76,72,51,0,52,51],
[77,85,65,75,75,72,67,78,0,70],
[72,65,59,68,77,79,66,79,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,65,56,56,58,57,60,56,56],
[69,0,72,66,65,65,58,71,68,55],
[65,58,0,44,58,57,54,65,61,55],
[74,64,86,0,65,74,79,81,63,66],
[74,65,72,65,0,55,67,64,72,52],
[72,65,73,56,75,0,62,71,61,56],
[73,72,76,51,63,68,0,60,67,66],
[70,59,65,49,66,59,70,0,71,60],
[74,62,69,67,58,69,63,59,0,59],
[74,75,75,64,78,74,64,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,56,47,60,53,58,59,63,68],
[61,0,56,55,65,54,54,60,57,71],
[74,74,0,69,62,61,65,70,71,67],
[83,75,61,0,65,55,67,67,61,82],
[70,65,68,65,0,58,59,60,66,72],
[77,76,69,75,72,0,68,71,64,72],
[72,76,65,63,71,62,0,64,64,76],
[71,70,60,63,70,59,66,0,62,72],
[67,73,59,69,64,66,66,68,0,74],
[62,59,63,48,58,58,54,58,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,76,64,64,69,61,60,55],
[63,0,57,67,72,62,67,60,61,58],
[66,73,0,76,68,67,71,65,66,65],
[54,63,54,0,66,62,62,59,58,54],
[66,58,62,64,0,60,66,62,63,61],
[66,68,63,68,70,0,72,60,64,61],
[61,63,59,68,64,58,0,52,60,60],
[69,70,65,71,68,70,78,0,69,66],
[70,69,64,72,67,66,70,61,0,67],
[75,72,65,76,69,69,70,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,57,61,53,56,48,45,40,60],
[78,0,81,61,75,66,53,56,68,60],
[73,49,0,66,77,64,59,52,52,75],
[69,69,64,0,74,67,62,57,61,80],
[77,55,53,56,0,54,61,59,58,73],
[74,64,66,63,76,0,54,59,50,67],
[82,77,71,68,69,76,0,55,56,85],
[85,74,78,73,71,71,75,0,58,77],
[90,62,78,69,72,80,74,72,0,86],
[70,70,55,50,57,63,45,53,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,67,81,67,65,78,70,68,78],
[52,0,65,70,61,71,73,65,65,73],
[63,65,0,70,65,69,67,76,68,71],
[49,60,60,0,67,60,63,54,61,60],
[63,69,65,63,0,74,64,63,73,71],
[65,59,61,70,56,0,59,60,66,66],
[52,57,63,67,66,71,0,55,61,68],
[60,65,54,76,67,70,75,0,64,65],
[62,65,62,69,57,64,69,66,0,70],
[52,57,59,70,59,64,62,65,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,59,60,57,61,56,70,46,45],
[66,0,54,63,55,55,63,68,59,54],
[71,76,0,62,62,74,68,69,66,68],
[70,67,68,0,71,67,70,71,64,63],
[73,75,68,59,0,74,57,71,62,59],
[69,75,56,63,56,0,62,59,63,58],
[74,67,62,60,73,68,0,69,68,60],
[60,62,61,59,59,71,61,0,55,58],
[84,71,64,66,68,67,62,75,0,63],
[85,76,62,67,71,72,70,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,54,63,64,54,67,61,66,49],
[79,0,68,68,79,73,75,72,66,59],
[76,62,0,70,71,63,73,60,63,53],
[67,62,60,0,67,57,56,56,54,58],
[66,51,59,63,0,60,62,79,66,50],
[76,57,67,73,70,0,72,77,60,70],
[63,55,57,74,68,58,0,62,54,60],
[69,58,70,74,51,53,68,0,61,63],
[64,64,67,76,64,70,76,69,0,63],
[81,71,77,72,80,60,70,67,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,72,59,65,56,60,58,64,61],
[76,0,82,63,73,56,67,57,67,57],
[58,48,0,56,51,51,73,57,63,47],
[71,67,74,0,67,68,58,63,73,61],
[65,57,79,63,0,59,70,60,74,57],
[74,74,79,62,71,0,71,60,68,67],
[70,63,57,72,60,59,0,58,74,65],
[72,73,73,67,70,70,72,0,76,62],
[66,63,67,57,56,62,56,54,0,48],
[69,73,83,69,73,63,65,68,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,70,63,59,58,73,56,83],
[62,0,65,58,65,56,61,60,52,72],
[62,65,0,70,62,64,73,77,59,78],
[60,72,60,0,68,58,81,76,71,76],
[67,65,68,62,0,63,55,76,55,73],
[71,74,66,72,67,0,56,69,66,86],
[72,69,57,49,75,74,0,62,47,76],
[57,70,53,54,54,61,68,0,46,66],
[74,78,71,59,75,64,83,84,0,78],
[47,58,52,54,57,44,54,64,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,71,71,75,66,70,76,68,65],
[62,0,70,70,69,64,62,68,66,59],
[59,60,0,64,66,65,60,60,60,59],
[59,60,66,0,65,68,61,57,67,59],
[55,61,64,65,0,56,57,58,60,57],
[64,66,65,62,74,0,60,74,62,66],
[60,68,70,69,73,70,0,76,70,74],
[54,62,70,73,72,56,54,0,62,55],
[62,64,70,63,70,68,60,68,0,62],
[65,71,71,71,73,64,56,75,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,67,71,68,72,81,75,69,65],
[60,0,68,75,59,66,72,72,65,62],
[63,62,0,64,65,68,66,75,76,69],
[59,55,66,0,67,68,74,73,64,57],
[62,71,65,63,0,66,65,74,65,55],
[58,64,62,62,64,0,70,72,68,61],
[49,58,64,56,65,60,0,70,59,57],
[55,58,55,57,56,58,60,0,55,51],
[61,65,54,66,65,62,71,75,0,63],
[65,68,61,73,75,69,73,79,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,69,69,65,73,62,64,60,66],
[75,0,71,70,67,71,64,66,69,66],
[61,59,0,62,64,71,46,72,66,63],
[61,60,68,0,66,68,52,69,63,67],
[65,63,66,64,0,72,65,68,71,65],
[57,59,59,62,58,0,42,58,63,55],
[68,66,84,78,65,88,0,73,71,74],
[66,64,58,61,62,72,57,0,64,66],
[70,61,64,67,59,67,59,66,0,70],
[64,64,67,63,65,75,56,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,71,67,77,77,59,62,61,67],
[58,0,65,57,69,82,60,68,47,61],
[59,65,0,55,65,68,61,60,54,60],
[63,73,75,0,78,72,67,70,70,73],
[53,61,65,52,0,61,56,58,55,48],
[53,48,62,58,69,0,52,65,51,60],
[71,70,69,63,74,78,0,74,70,55],
[68,62,70,60,72,65,56,0,58,58],
[69,83,76,60,75,79,60,72,0,69],
[63,69,70,57,82,70,75,72,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,78,67,63,67,63,67,63],
[65,0,68,63,64,63,66,65,67,60],
[61,62,0,65,65,59,67,65,65,67],
[52,67,65,0,62,67,56,58,58,58],
[63,66,65,68,0,77,65,70,68,64],
[67,67,71,63,53,0,66,70,67,62],
[63,64,63,74,65,64,0,65,67,63],
[67,65,65,72,60,60,65,0,67,58],
[63,63,65,72,62,63,63,63,0,65],
[67,70,63,72,66,68,67,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,44,78,49,65,63,59,50,55],
[73,0,56,73,67,68,71,67,65,59],
[86,74,0,72,61,66,77,70,72,59],
[52,57,58,0,47,55,60,59,49,49],
[81,63,69,83,0,76,83,72,73,68],
[65,62,64,75,54,0,62,55,55,60],
[67,59,53,70,47,68,0,70,63,63],
[71,63,60,71,58,75,60,0,55,62],
[80,65,58,81,57,75,67,75,0,46],
[75,71,71,81,62,70,67,68,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,49,48,42,60,48,61,41,63],
[76,0,60,57,54,70,62,63,60,70],
[81,70,0,69,62,66,57,70,59,72],
[82,73,61,0,71,78,74,74,70,91],
[88,76,68,59,0,72,72,69,66,81],
[70,60,64,52,58,0,69,69,59,70],
[82,68,73,56,58,61,0,74,52,58],
[69,67,60,56,61,61,56,0,62,77],
[89,70,71,60,64,71,78,68,0,89],
[67,60,58,39,49,60,72,53,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,60,67,61,71,75,71,78],
[64,0,61,63,67,65,71,84,69,73],
[67,69,0,64,72,62,78,76,70,73],
[70,67,66,0,62,56,62,69,60,59],
[63,63,58,68,0,54,71,69,62,69],
[69,65,68,74,76,0,75,84,68,70],
[59,59,52,68,59,55,0,69,66,68],
[55,46,54,61,61,46,61,0,52,63],
[59,61,60,70,68,62,64,78,0,70],
[52,57,57,71,61,60,62,67,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,59,56,70,64,67,66,55,65],
[55,0,52,60,56,59,63,61,61,52],
[71,78,0,72,72,86,82,73,63,71],
[74,70,58,0,72,70,70,77,65,64],
[60,74,58,58,0,54,54,69,56,61],
[66,71,44,60,76,0,59,65,51,55],
[63,67,48,60,76,71,0,73,61,65],
[64,69,57,53,61,65,57,0,59,59],
[75,69,67,65,74,79,69,71,0,67],
[65,78,59,66,69,75,65,71,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,61,72,56,54,68,70,66,91],
[60,0,65,73,57,50,78,64,78,78],
[69,65,0,69,55,53,50,63,71,56],
[58,57,61,0,67,62,70,63,70,68],
[74,73,75,63,0,65,88,74,75,79],
[76,80,77,68,65,0,81,83,70,69],
[62,52,80,60,42,49,0,65,53,57],
[60,66,67,67,56,47,65,0,64,63],
[64,52,59,60,55,60,77,66,0,70],
[39,52,74,62,51,61,73,67,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,50,66,69,72,65,58,62,56],
[69,0,51,55,67,59,69,63,60,51],
[80,79,0,66,73,65,74,75,72,79],
[64,75,64,0,79,74,72,63,76,61],
[61,63,57,51,0,61,61,69,72,57],
[58,71,65,56,69,0,71,55,52,57],
[65,61,56,58,69,59,0,61,64,65],
[72,67,55,67,61,75,69,0,68,69],
[68,70,58,54,58,78,66,62,0,55],
[74,79,51,69,73,73,65,61,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,69,58,62,71,60,82,67,63],
[48,0,64,63,70,61,51,73,65,66],
[61,66,0,68,54,61,61,84,67,53],
[72,67,62,0,65,55,54,79,67,62],
[68,60,76,65,0,85,87,84,65,57],
[59,69,69,75,45,0,59,76,58,75],
[70,79,69,76,43,71,0,99,86,74],
[48,57,46,51,46,54,31,0,55,55],
[63,65,63,63,65,72,44,75,0,46],
[67,64,77,68,73,55,56,75,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,73,60,73,70,70,70,67,60],
[65,0,79,69,69,65,62,65,62,66],
[57,51,0,63,66,47,62,55,60,51],
[70,61,67,0,72,75,62,68,72,64],
[57,61,64,58,0,53,53,63,58,54],
[60,65,83,55,77,0,70,73,72,58],
[60,68,68,68,77,60,0,70,68,54],
[60,65,75,62,67,57,60,0,68,53],
[63,68,70,58,72,58,62,62,0,60],
[70,64,79,66,76,72,76,77,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,76,60,72,63,70,71,58,63],
[69,0,77,67,80,76,62,68,64,66],
[54,53,0,60,60,62,67,48,54,55],
[70,63,70,0,78,68,60,64,65,66],
[58,50,70,52,0,53,65,53,60,58],
[67,54,68,62,77,0,76,67,69,67],
[60,68,63,70,65,54,0,67,61,71],
[59,62,82,66,77,63,63,0,59,64],
[72,66,76,65,70,61,69,71,0,72],
[67,64,75,64,72,63,59,66,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,61,51,57,65,51,59,45,53],
[60,0,70,67,66,62,60,59,49,60],
[69,60,0,74,62,59,64,67,49,54],
[79,63,56,0,58,66,63,67,43,62],
[73,64,68,72,0,70,61,60,53,63],
[65,68,71,64,60,0,69,65,54,59],
[79,70,66,67,69,61,0,72,64,62],
[71,71,63,63,70,65,58,0,58,68],
[85,81,81,87,77,76,66,72,0,63],
[77,70,76,68,67,71,68,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,62,57,56,71,58,68,75,58],
[45,0,41,59,55,61,51,55,70,54],
[68,89,0,62,67,86,76,67,86,73],
[73,71,68,0,62,71,61,53,76,68],
[74,75,63,68,0,76,68,70,75,53],
[59,69,44,59,54,0,60,69,78,67],
[72,79,54,69,62,70,0,61,80,71],
[62,75,63,77,60,61,69,0,84,82],
[55,60,44,54,55,52,50,46,0,42],
[72,76,57,62,77,63,59,48,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,69,61,58,65,71,62,67],
[61,0,69,65,71,68,69,61,67,64],
[60,61,0,63,52,62,63,64,61,59],
[61,65,67,0,60,63,68,60,62,63],
[69,59,78,70,0,61,71,68,61,66],
[72,62,68,67,69,0,66,59,68,65],
[65,61,67,62,59,64,0,56,59,69],
[59,69,66,70,62,71,74,0,61,71],
[68,63,69,68,69,62,71,69,0,68],
[63,66,71,67,64,65,61,59,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,70,74,66,59,66,66,75,66],
[68,0,60,63,61,64,62,68,70,66],
[60,70,0,68,64,69,59,72,66,63],
[56,67,62,0,68,56,66,69,65,70],
[64,69,66,62,0,67,66,69,74,70],
[71,66,61,74,63,0,69,66,71,72],
[64,68,71,64,64,61,0,73,72,69],
[64,62,58,61,61,64,57,0,60,66],
[55,60,64,65,56,59,58,70,0,63],
[64,64,67,60,60,58,61,64,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,56,50,69,71,68,64,60,66],
[67,0,58,66,70,74,76,57,65,65],
[74,72,0,79,77,68,74,63,75,71],
[80,64,51,0,63,63,76,61,68,64],
[61,60,53,67,0,65,60,60,61,65],
[59,56,62,67,65,0,74,58,66,62],
[62,54,56,54,70,56,0,53,57,66],
[66,73,67,69,70,72,77,0,68,60],
[70,65,55,62,69,64,73,62,0,63],
[64,65,59,66,65,68,64,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,65,66,77,53,57,56,54,55],
[68,0,67,63,73,69,62,67,60,52],
[65,63,0,64,69,73,77,72,61,62],
[64,67,66,0,74,56,68,69,53,65],
[53,57,61,56,0,71,49,55,56,42],
[77,61,57,74,59,0,60,58,58,67],
[73,68,53,62,81,70,0,67,69,65],
[74,63,58,61,75,72,63,0,64,64],
[76,70,69,77,74,72,61,66,0,66],
[75,78,68,65,88,63,65,66,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,69,60,71,66,62,68,65,67],
[62,0,61,59,64,55,64,64,62,64],
[61,69,0,69,71,65,67,64,69,67],
[70,71,61,0,69,61,57,73,64,77],
[59,66,59,61,0,63,61,60,67,62],
[64,75,65,69,67,0,68,73,79,83],
[68,66,63,73,69,62,0,63,64,66],
[62,66,66,57,70,57,67,0,67,65],
[65,68,61,66,63,51,66,63,0,63],
[63,66,63,53,68,47,64,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,62,65,60,67,64,70,62,81],
[72,0,82,72,93,58,67,61,62,85],
[68,48,0,53,49,67,60,64,73,92],
[65,58,77,0,79,63,79,53,65,75],
[70,37,81,51,0,56,62,50,41,76],
[63,72,63,67,74,0,74,75,64,82],
[66,63,70,51,68,56,0,60,56,88],
[60,69,66,77,80,55,70,0,67,85],
[68,68,57,65,89,66,74,63,0,80],
[49,45,38,55,54,48,42,45,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,60,44,57,60,49,60,66,74],
[73,0,85,73,72,65,57,73,78,86],
[70,45,0,53,80,56,60,62,73,87],
[86,57,77,0,82,77,75,69,77,100],
[73,58,50,48,0,57,62,47,55,78],
[70,65,74,53,73,0,65,64,77,86],
[81,73,70,55,68,65,0,63,75,98],
[70,57,68,61,83,66,67,0,65,86],
[64,52,57,53,75,53,55,65,0,89],
[56,44,43,30,52,44,32,44,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,57,54,62,65,63,59,55,67],
[68,0,63,59,68,77,63,59,69,71],
[73,67,0,60,70,71,72,52,64,67],
[76,71,70,0,62,77,62,59,67,70],
[68,62,60,68,0,83,59,62,62,64],
[65,53,59,53,47,0,58,53,47,57],
[67,67,58,68,71,72,0,65,60,62],
[71,71,78,71,68,77,65,0,65,64],
[75,61,66,63,68,83,70,65,0,75],
[63,59,63,60,66,73,68,66,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,75,67,83,64,72,71,68,64],
[59,0,73,67,75,60,64,61,73,64],
[55,57,0,61,68,53,57,53,58,59],
[63,63,69,0,71,56,60,63,68,63],
[47,55,62,59,0,48,57,48,55,50],
[66,70,77,74,82,0,64,64,70,62],
[58,66,73,70,73,66,0,61,70,65],
[59,69,77,67,82,66,69,0,70,65],
[62,57,72,62,75,60,60,60,0,55],
[66,66,71,67,80,68,65,65,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,71,53,71,77,60,56,69,69],
[69,0,76,61,68,82,64,73,81,67],
[59,54,0,46,66,66,52,59,71,69],
[77,69,84,0,76,84,64,68,75,67],
[59,62,64,54,0,75,68,59,75,69],
[53,48,64,46,55,0,63,56,56,59],
[70,66,78,66,62,67,0,59,78,78],
[74,57,71,62,71,74,71,0,74,69],
[61,49,59,55,55,74,52,56,0,61],
[61,63,61,63,61,71,52,61,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,69,52,63,80,64,70,64],
[63,0,73,57,59,59,68,51,65,61],
[60,57,0,71,68,67,78,71,75,70],
[61,73,59,0,68,71,72,70,71,66],
[78,71,62,62,0,69,71,66,69,56],
[67,71,63,59,61,0,75,59,72,55],
[50,62,52,58,59,55,0,51,55,47],
[66,79,59,60,64,71,79,0,83,78],
[60,65,55,59,61,58,75,47,0,53],
[66,69,60,64,74,75,83,52,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,80,71,76,62,66,54,73,60],
[65,0,74,69,77,64,65,57,61,70],
[50,56,0,59,71,50,61,61,53,73],
[59,61,71,0,62,62,63,50,58,61],
[54,53,59,68,0,42,52,49,45,70],
[68,66,80,68,88,0,81,68,63,86],
[64,65,69,67,78,49,0,63,54,76],
[76,73,69,80,81,62,67,0,67,70],
[57,69,77,72,85,67,76,63,0,82],
[70,60,57,69,60,44,54,60,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,73,58,59,67,59,71,60],
[71,0,60,73,61,62,70,73,78,68],
[65,70,0,64,70,62,73,68,78,67],
[57,57,66,0,59,59,71,60,67,63],
[72,69,60,71,0,61,62,63,68,58],
[71,68,68,71,69,0,61,78,59,55],
[63,60,57,59,68,69,0,61,64,55],
[71,57,62,70,67,52,69,0,71,66],
[59,52,52,63,62,71,66,59,0,61],
[70,62,63,67,72,75,75,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,64,60,60,70,67,61,64],
[67,0,65,62,55,69,64,61,69,61],
[64,65,0,63,62,70,60,75,65,65],
[66,68,67,0,69,75,65,73,68,73],
[70,75,68,61,0,73,60,71,71,71],
[70,61,60,55,57,0,62,71,66,56],
[60,66,70,65,70,68,0,67,64,69],
[63,69,55,57,59,59,63,0,60,70],
[69,61,65,62,59,64,66,70,0,65],
[66,69,65,57,59,74,61,60,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,56,63,63,83,62,64,71],
[60,0,59,68,58,56,70,53,61,68],
[66,71,0,65,56,68,80,53,70,73],
[74,62,65,0,57,65,75,53,74,68],
[67,72,74,73,0,68,76,62,69,74],
[67,74,62,65,62,0,78,68,73,74],
[47,60,50,55,54,52,0,45,56,60],
[68,77,77,77,68,62,85,0,76,82],
[66,69,60,56,61,57,74,54,0,69],
[59,62,57,62,56,56,70,48,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,60,70,77,61,54,54,76,55],
[59,0,45,78,70,62,74,45,76,52],
[70,85,0,78,77,74,76,55,84,71],
[60,52,52,0,76,54,68,52,62,41],
[53,60,53,54,0,43,56,50,58,62],
[69,68,56,76,87,0,68,54,87,59],
[76,56,54,62,74,62,0,60,75,55],
[76,85,75,78,80,76,70,0,76,61],
[54,54,46,68,72,43,55,54,0,56],
[75,78,59,89,68,71,75,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,65,65,0,65,65,32,65,0],
[130,0,97,98,0,65,98,65,65,32],
[65,33,0,98,0,65,98,65,65,0],
[65,32,32,0,32,65,32,32,64,32],
[130,130,130,98,0,65,130,98,130,97],
[65,65,65,65,65,0,65,33,97,65],
[65,32,32,98,0,65,0,65,32,32],
[98,65,65,98,32,97,65,0,97,32],
[65,65,65,66,0,33,98,33,0,0],
[130,98,130,98,33,65,98,98,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,40,45,40,46,60,64,47,76],
[94,0,68,56,75,54,84,100,82,65],
[90,62,0,93,65,99,81,109,88,64],
[85,74,37,0,76,56,76,85,56,66],
[90,55,65,54,0,64,80,90,71,63],
[84,76,31,74,66,0,66,91,57,55],
[70,46,49,54,50,64,0,82,46,64],
[66,30,21,45,40,39,48,0,39,45],
[83,48,42,74,59,73,84,91,0,54],
[54,65,66,64,67,75,66,85,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,72,64,64,64,57,62,56,65],
[68,0,73,62,62,67,50,61,65,70],
[58,57,0,67,62,64,54,65,58,56],
[66,68,63,0,54,59,49,64,58,56],
[66,68,68,76,0,61,69,74,62,63],
[66,63,66,71,69,0,76,71,79,82],
[73,80,76,81,61,54,0,69,64,59],
[68,69,65,66,56,59,61,0,81,62],
[74,65,72,72,68,51,66,49,0,62],
[65,60,74,74,67,48,71,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,65,78,67,75,72,68,64,69],
[58,0,66,72,60,59,53,61,64,80],
[65,64,0,63,71,65,54,59,63,71],
[52,58,67,0,68,59,76,64,61,66],
[63,70,59,62,0,64,59,57,59,67],
[55,71,65,71,66,0,64,65,62,71],
[58,77,76,54,71,66,0,67,58,69],
[62,69,71,66,73,65,63,0,66,68],
[66,66,67,69,71,68,72,64,0,70],
[61,50,59,64,63,59,61,62,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,58,49,70,59,56,80,60,58],
[46,0,54,40,58,56,56,61,43,48],
[72,76,0,65,72,55,52,81,63,53],
[81,90,65,0,81,66,69,90,75,66],
[60,72,58,49,0,65,57,71,53,53],
[71,74,75,64,65,0,61,73,58,54],
[74,74,78,61,73,69,0,82,71,64],
[50,69,49,40,59,57,48,0,49,46],
[70,87,67,55,77,72,59,81,0,65],
[72,82,77,64,77,76,66,84,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,55,53,67,65,87,64,94,73],
[64,0,53,62,70,66,63,65,77,68],
[75,77,0,85,70,57,79,61,87,93],
[77,68,45,0,61,55,83,72,82,58],
[63,60,60,69,0,67,68,64,77,66],
[65,64,73,75,63,0,76,65,85,70],
[43,67,51,47,62,54,0,45,71,55],
[66,65,69,58,66,65,85,0,79,84],
[36,53,43,48,53,45,59,51,0,59],
[57,62,37,72,64,60,75,46,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,60,71,65,73,63,69,57,60],
[59,0,64,59,54,64,64,45,42,61],
[70,66,0,70,77,67,64,55,59,62],
[59,71,60,0,73,70,63,61,66,63],
[65,76,53,57,0,69,59,57,63,56],
[57,66,63,60,61,0,64,60,54,62],
[67,66,66,67,71,66,0,57,61,70],
[61,85,75,69,73,70,73,0,63,67],
[73,88,71,64,67,76,69,67,0,64],
[70,69,68,67,74,68,60,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,80,66,70,70,59,62,65],
[63,0,56,61,58,68,63,67,59,58],
[60,74,0,68,54,65,63,69,60,58],
[50,69,62,0,60,66,54,57,56,61],
[64,72,76,70,0,74,68,69,67,57],
[60,62,65,64,56,0,66,63,53,67],
[60,67,67,76,62,64,0,72,66,60],
[71,63,61,73,61,67,58,0,60,66],
[68,71,70,74,63,77,64,70,0,63],
[65,72,72,69,73,63,70,64,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,45,73,72,86,57,87,57,69],
[30,0,31,45,45,57,58,46,15,57],
[85,99,0,58,72,85,68,86,54,54],
[57,85,72,0,56,85,57,71,42,84],
[58,85,58,74,0,71,57,73,55,72],
[44,73,45,45,59,0,44,44,45,55],
[73,72,62,73,73,86,0,74,59,69],
[43,84,44,59,57,86,56,0,28,69],
[73,115,76,88,75,85,71,102,0,57],
[61,73,76,46,58,75,61,61,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,70,60,57,55,56,52,58,62],
[66,0,71,67,71,62,72,61,62,73],
[60,59,0,62,60,58,69,63,63,64],
[70,63,68,0,69,67,67,61,71,75],
[73,59,70,61,0,57,68,50,62,68],
[75,68,72,63,73,0,75,67,75,73],
[74,58,61,63,62,55,0,57,63,62],
[78,69,67,69,80,63,73,0,75,71],
[72,68,67,59,68,55,67,55,0,72],
[68,57,66,55,62,57,68,59,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,62,51,63,75,61,57,49,52],
[69,0,70,75,57,72,83,63,60,63],
[68,60,0,68,49,59,60,68,57,66],
[79,55,62,0,49,69,61,59,42,51],
[67,73,81,81,0,73,84,63,72,76],
[55,58,71,61,57,0,70,57,56,57],
[69,47,70,69,46,60,0,54,57,56],
[73,67,62,71,67,73,76,0,59,67],
[81,70,73,88,58,74,73,71,0,66],
[78,67,64,79,54,73,74,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,63,70,77,75,66,78,68,68],
[67,0,67,65,67,69,71,68,62,62],
[67,63,0,68,81,79,76,74,70,61],
[60,65,62,0,70,66,62,69,60,61],
[53,63,49,60,0,66,56,66,63,64],
[55,61,51,64,64,0,68,67,63,58],
[64,59,54,68,74,62,0,75,58,59],
[52,62,56,61,64,63,55,0,64,49],
[62,68,60,70,67,67,72,66,0,54],
[62,68,69,69,66,72,71,81,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,85,75,89,78,61,85,92,80],
[68,0,86,61,79,67,67,65,79,84],
[45,44,0,56,54,58,48,56,54,68],
[55,69,74,0,67,62,65,76,84,86],
[41,51,76,63,0,62,59,66,60,69],
[52,63,72,68,68,0,47,60,59,76],
[69,63,82,65,71,83,0,75,72,87],
[45,65,74,54,64,70,55,0,76,71],
[38,51,76,46,70,71,58,54,0,68],
[50,46,62,44,61,54,43,59,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,60,61,62,61,59,56,57],
[64,0,70,69,59,66,60,68,68,71],
[64,60,0,61,57,56,62,58,63,61],
[70,61,69,0,58,67,65,65,67,63],
[69,71,73,72,0,71,72,70,67,65],
[68,64,74,63,59,0,65,68,65,64],
[69,70,68,65,58,65,0,65,74,62],
[71,62,72,65,60,62,65,0,68,67],
[74,62,67,63,63,65,56,62,0,64],
[73,59,69,67,65,66,68,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,67,45,87,45,87,87,67,44],
[22,0,67,67,67,67,45,87,45,44],
[63,63,0,108,64,65,65,64,43,44],
[85,63,22,0,64,42,64,64,42,44],
[43,63,66,66,0,23,43,42,23,44],
[85,63,65,88,107,0,64,107,108,87],
[43,85,65,66,87,66,0,63,44,65],
[43,43,66,66,88,23,67,0,45,44],
[63,85,87,88,107,22,86,85,0,44],
[86,86,86,86,86,43,65,86,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,94,79,71,97,55,70,70,70],
[41,0,86,57,44,61,50,46,62,59],
[36,44,0,54,39,61,42,50,46,52],
[51,73,76,0,47,71,47,56,65,56],
[59,86,91,83,0,85,72,72,72,67],
[33,69,69,59,45,0,55,57,45,57],
[75,80,88,83,58,75,0,63,65,77],
[60,84,80,74,58,73,67,0,74,63],
[60,68,84,65,58,85,65,56,0,58],
[60,71,78,74,63,73,53,67,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,72,66,58,65,61,65,60],
[65,0,62,56,68,62,62,65,67,61],
[67,68,0,68,63,66,66,60,69,65],
[58,74,62,0,60,62,66,60,68,56],
[64,62,67,70,0,67,78,71,65,60],
[72,68,64,68,63,0,68,62,68,66],
[65,68,64,64,52,62,0,55,71,64],
[69,65,70,70,59,68,75,0,62,65],
[65,63,61,62,65,62,59,68,0,56],
[70,69,65,74,70,64,66,65,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,73,69,68,70,76,70,60,61],
[68,0,63,75,71,81,78,74,75,71],
[57,67,0,81,72,73,82,72,68,63],
[61,55,49,0,64,67,61,56,62,48],
[62,59,58,66,0,70,68,74,67,65],
[60,49,57,63,60,0,65,61,66,55],
[54,52,48,69,62,65,0,66,63,62],
[60,56,58,74,56,69,64,0,60,66],
[70,55,62,68,63,64,67,70,0,61],
[69,59,67,82,65,75,68,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,54,65,73,64,71,71,57,67],
[64,0,57,63,64,63,63,59,51,58],
[76,73,0,68,70,71,66,73,55,68],
[65,67,62,0,75,66,72,68,54,62],
[57,66,60,55,0,56,66,61,54,55],
[66,67,59,64,74,0,66,68,57,69],
[59,67,64,58,64,64,0,66,59,65],
[59,71,57,62,69,62,64,0,58,61],
[73,79,75,76,76,73,71,72,0,65],
[63,72,62,68,75,61,65,69,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,46,65,54,53,40,63,47,58],
[70,0,41,53,73,71,47,62,57,76],
[84,89,0,69,77,87,60,65,66,71],
[65,77,61,0,69,69,54,69,65,76],
[76,57,53,61,0,72,65,64,76,61],
[77,59,43,61,58,0,42,53,56,53],
[90,83,70,76,65,88,0,75,70,85],
[67,68,65,61,66,77,55,0,56,57],
[83,73,64,65,54,74,60,74,0,57],
[72,54,59,54,69,77,45,73,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,44,81,71,79,79,57,63,51],
[61,0,55,79,80,88,73,53,67,67],
[86,75,0,90,80,69,53,74,68,71],
[49,51,40,0,39,60,49,44,43,39],
[59,50,50,91,0,77,72,49,54,57],
[51,42,61,70,53,0,39,47,63,49],
[51,57,77,81,58,91,0,62,69,72],
[73,77,56,86,81,83,68,0,69,64],
[67,63,62,87,76,67,61,61,0,63],
[79,63,59,91,73,81,58,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,82,70,51,60,69,76,76,67],
[55,0,69,69,57,55,55,62,62,61],
[48,61,0,68,66,55,67,50,52,76],
[60,61,62,0,58,69,77,62,74,75],
[79,73,64,72,0,76,86,78,73,82],
[70,75,75,61,54,0,75,77,80,64],
[61,75,63,53,44,55,0,76,75,81],
[54,68,80,68,52,53,54,0,57,79],
[54,68,78,56,57,50,55,73,0,64],
[63,69,54,55,48,66,49,51,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,72,75,63,68,69,72,76,69],
[60,0,75,68,57,65,60,61,69,70],
[58,55,0,63,60,53,54,66,64,67],
[55,62,67,0,59,61,57,67,63,67],
[67,73,70,71,0,64,60,62,69,67],
[62,65,77,69,66,0,62,71,67,67],
[61,70,76,73,70,68,0,74,77,73],
[58,69,64,63,68,59,56,0,69,61],
[54,61,66,67,61,63,53,61,0,71],
[61,60,63,63,63,63,57,69,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,74,70,70,60,69,69,82,69],
[72,0,63,63,61,76,68,60,62,64],
[56,67,0,78,70,69,68,76,84,79],
[60,67,52,0,63,61,53,70,61,62],
[60,69,60,67,0,69,77,54,69,75],
[70,54,61,69,61,0,67,61,61,70],
[61,62,62,77,53,63,0,57,54,77],
[61,70,54,60,76,69,73,0,52,63],
[48,68,46,69,61,69,76,78,0,47],
[61,66,51,68,55,60,53,67,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,82,62,70,72,61,65,65,56],
[64,0,79,65,70,71,66,67,59,72],
[48,51,0,47,56,64,53,57,41,45],
[68,65,83,0,64,74,62,67,57,63],
[60,60,74,66,0,67,59,61,66,57],
[58,59,66,56,63,0,54,48,63,51],
[69,64,77,68,71,76,0,59,66,59],
[65,63,73,63,69,82,71,0,72,51],
[65,71,89,73,64,67,64,58,0,57],
[74,58,85,67,73,79,71,79,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,73,65,77,68,75,70,75],
[65,0,68,73,69,79,69,76,62,65],
[61,62,0,65,67,73,68,71,62,66],
[57,57,65,0,65,68,59,72,60,57],
[65,61,63,65,0,69,64,67,65,62],
[53,51,57,62,61,0,62,61,63,59],
[62,61,62,71,66,68,0,72,66,63],
[55,54,59,58,63,69,58,0,61,64],
[60,68,68,70,65,67,64,69,0,64],
[55,65,64,73,68,71,67,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,55,41,54,57,48,55,47,51],
[87,0,79,81,68,61,73,64,77,69],
[75,51,0,57,62,61,42,62,65,58],
[89,49,73,0,67,53,58,45,70,73],
[76,62,68,63,0,61,67,64,70,72],
[73,69,69,77,69,0,72,72,60,68],
[82,57,88,72,63,58,0,79,74,77],
[75,66,68,85,66,58,51,0,63,61],
[83,53,65,60,60,70,56,67,0,60],
[79,61,72,57,58,62,53,69,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,66,63,67,58,62,56,50,61],
[59,0,61,65,60,64,51,46,45,55],
[64,69,0,58,66,54,67,44,56,60],
[67,65,72,0,61,68,59,55,55,69],
[63,70,64,69,0,68,61,53,54,66],
[72,66,76,62,62,0,67,52,57,69],
[68,79,63,71,69,63,0,54,60,69],
[74,84,86,75,77,78,76,0,65,72],
[80,85,74,75,76,73,70,65,0,71],
[69,75,70,61,64,61,61,58,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,58,69,51,49,59,70,70,89],
[71,0,50,40,50,61,60,60,69,50],
[72,80,0,72,71,81,51,72,80,60],
[61,90,58,0,71,59,51,61,80,80],
[79,80,59,59,0,80,71,59,78,69],
[81,69,49,71,50,0,70,50,69,88],
[71,70,79,79,59,60,0,60,80,80],
[60,70,58,69,71,80,70,0,70,80],
[60,61,50,50,52,61,50,60,0,61],
[41,80,70,50,61,42,50,50,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,61,56,81,76,76,71,69,80],
[50,0,68,56,75,60,60,51,76,80],
[69,62,0,65,79,75,76,79,72,88],
[74,74,65,0,84,80,71,67,73,82],
[49,55,51,46,0,62,57,56,56,70],
[54,70,55,50,68,0,59,53,66,71],
[54,70,54,59,73,71,0,56,48,76],
[59,79,51,63,74,77,74,0,78,100],
[61,54,58,57,74,64,82,52,0,88],
[50,50,42,48,60,59,54,30,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,51,54,50,57,50,43,45],
[66,0,65,60,60,46,79,60,49,51],
[62,65,0,57,36,46,63,60,41,52],
[79,70,73,0,67,63,69,48,55,54],
[76,70,94,63,0,76,93,78,61,77],
[80,84,84,67,54,0,76,64,71,69],
[73,51,67,61,37,54,0,45,28,43],
[80,70,70,82,52,66,85,0,56,64],
[87,81,89,75,69,59,102,74,0,65],
[85,79,78,76,53,61,87,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,67,60,59,63,56,65,67,64],
[58,0,66,58,59,59,56,63,75,62],
[63,64,0,54,58,61,62,66,62,62],
[70,72,76,0,72,68,67,68,70,64],
[71,71,72,58,0,71,63,74,73,68],
[67,71,69,62,59,0,64,67,77,72],
[74,74,68,63,67,66,0,70,70,66],
[65,67,64,62,56,63,60,0,73,57],
[63,55,68,60,57,53,60,57,0,51],
[66,68,68,66,62,58,64,73,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,58,61,52,61,65,53,58,61],
[71,0,71,54,57,64,51,67,57,65],
[72,59,0,65,58,73,63,60,60,66],
[69,76,65,0,55,67,62,61,59,59],
[78,73,72,75,0,71,66,72,62,74],
[69,66,57,63,59,0,57,61,55,72],
[65,79,67,68,64,73,0,66,67,62],
[77,63,70,69,58,69,64,0,74,58],
[72,73,70,71,68,75,63,56,0,70],
[69,65,64,71,56,58,68,72,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,61,61,57,67,60,56,63,65],
[62,0,55,60,49,60,50,50,53,51],
[69,75,0,70,51,62,67,61,63,64],
[69,70,60,0,55,63,62,59,56,59],
[73,81,79,75,0,73,68,65,69,65],
[63,70,68,67,57,0,61,62,59,64],
[70,80,63,68,62,69,0,67,69,68],
[74,80,69,71,65,68,63,0,69,65],
[67,77,67,74,61,71,61,61,0,54],
[65,79,66,71,65,66,62,65,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,58,55,59,59,63,58,65,56],
[77,0,67,58,68,77,67,73,68,70],
[72,63,0,65,77,72,72,70,64,72],
[75,72,65,0,70,80,66,66,67,70],
[71,62,53,60,0,67,67,60,63,69],
[71,53,58,50,63,0,60,56,54,59],
[67,63,58,64,63,70,0,67,67,58],
[72,57,60,64,70,74,63,0,69,64],
[65,62,66,63,67,76,63,61,0,69],
[74,60,58,60,61,71,72,66,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,62,63,59,60,59,70,68,63],
[62,0,59,53,56,62,60,61,58,58],
[68,71,0,71,64,63,61,71,66,64],
[67,77,59,0,62,65,62,64,61,62],
[71,74,66,68,0,66,64,66,67,66],
[70,68,67,65,64,0,63,68,67,67],
[71,70,69,68,66,67,0,64,67,63],
[60,69,59,66,64,62,66,0,65,66],
[62,72,64,69,63,63,63,65,0,58],
[67,72,66,68,64,63,67,64,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,71,70,74,66,80,80,57,70],
[64,0,72,66,73,64,85,79,66,72],
[59,58,0,61,76,65,79,69,57,63],
[60,64,69,0,72,68,89,74,61,69],
[56,57,54,58,0,53,81,71,60,65],
[64,66,65,62,77,0,91,68,68,85],
[50,45,51,41,49,39,0,42,44,48],
[50,51,61,56,59,62,88,0,51,63],
[73,64,73,69,70,62,86,79,0,73],
[60,58,67,61,65,45,82,67,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,55,59,53,61,57,57,73,67],
[55,0,54,56,46,56,51,42,56,63],
[75,76,0,71,69,64,65,65,89,67],
[71,74,59,0,74,74,72,66,79,68],
[77,84,61,56,0,74,64,60,84,69],
[69,74,66,56,56,0,65,50,70,65],
[73,79,65,58,66,65,0,60,92,64],
[73,88,65,64,70,80,70,0,82,75],
[57,74,41,51,46,60,38,48,0,62],
[63,67,63,62,61,65,66,55,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,98,130,33,65,97,130,98,97],
[65,0,65,65,33,65,65,65,33,65],
[32,65,0,130,65,65,65,130,98,65],
[0,65,0,0,0,65,65,32,32,0],
[97,97,65,130,0,97,97,130,130,97],
[65,65,65,65,33,0,65,65,65,32],
[33,65,65,65,33,65,0,97,65,33],
[0,65,0,98,0,65,33,0,65,33],
[32,97,32,98,0,65,65,65,0,32],
[33,65,65,130,33,98,97,97,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,64,65,63,65,60,67,64,62],
[70,0,73,61,71,78,70,80,78,68],
[66,57,0,56,69,69,71,78,66,61],
[65,69,74,0,66,68,67,68,62,63],
[67,59,61,64,0,71,66,79,61,61],
[65,52,61,62,59,0,56,67,57,54],
[70,60,59,63,64,74,0,70,64,61],
[63,50,52,62,51,63,60,0,58,52],
[66,52,64,68,69,73,66,72,0,58],
[68,62,69,67,69,76,69,78,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,69,57,61,71,64,68,64,64],
[58,0,62,56,61,63,65,66,65,59],
[61,68,0,67,72,66,75,65,55,68],
[73,74,63,0,70,78,61,77,73,75],
[69,69,58,60,0,73,62,68,66,67],
[59,67,64,52,57,0,60,73,61,61],
[66,65,55,69,68,70,0,71,67,73],
[62,64,65,53,62,57,59,0,58,68],
[66,65,75,57,64,69,63,72,0,74],
[66,71,62,55,63,69,57,62,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,51,62,56,62,65,54,58],
[72,0,60,66,68,72,72,76,65,65],
[69,70,0,72,73,74,60,76,58,68],
[79,64,58,0,63,66,61,72,64,62],
[68,62,57,67,0,68,65,58,60,64],
[74,58,56,64,62,0,57,72,58,67],
[68,58,70,69,65,73,0,68,56,61],
[65,54,54,58,72,58,62,0,52,56],
[76,65,72,66,70,72,74,78,0,65],
[72,65,62,68,66,63,69,74,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,66,71,61,71,36,74,46,61],
[70,0,65,52,50,59,71,84,40,51],
[64,65,0,54,62,35,54,65,25,61],
[59,78,76,0,61,63,53,67,40,33],
[69,80,68,69,0,55,97,85,51,36],
[59,71,95,67,75,0,61,91,74,49],
[94,59,76,77,33,69,0,76,67,59],
[56,46,65,63,45,39,54,0,47,38],
[84,90,105,90,79,56,63,83,0,70],
[69,79,69,97,94,81,71,92,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,63,47,64,71,61,73,54,63],
[60,0,43,43,63,62,60,54,66,63],
[67,87,0,66,80,71,72,69,61,73],
[83,87,64,0,79,75,75,84,77,77],
[66,67,50,51,0,83,57,62,68,65],
[59,68,59,55,47,0,59,63,75,68],
[69,70,58,55,73,71,0,79,67,60],
[57,76,61,46,68,67,51,0,62,57],
[76,64,69,53,62,55,63,68,0,67],
[67,67,57,53,65,62,70,73,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,54,68,60,62,63,66,63,64],
[65,0,47,59,62,62,71,61,60,65],
[76,83,0,76,69,77,77,65,63,77],
[62,71,54,0,64,68,69,61,60,65],
[70,68,61,66,0,63,70,72,68,61],
[68,68,53,62,67,0,59,64,59,61],
[67,59,53,61,60,71,0,52,54,54],
[64,69,65,69,58,66,78,0,68,62],
[67,70,67,70,62,71,76,62,0,68],
[66,65,53,65,69,69,76,68,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,63,73,56,62,77,64,67,73],
[57,0,65,72,69,73,65,70,57,55],
[67,65,0,75,71,67,72,64,65,65],
[57,58,55,0,58,61,69,55,61,62],
[74,61,59,72,0,77,64,58,64,65],
[68,57,63,69,53,0,69,68,63,63],
[53,65,58,61,66,61,0,66,60,55],
[66,60,66,75,72,62,64,0,70,65],
[63,73,65,69,66,67,70,60,0,75],
[57,75,65,68,65,67,75,65,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,63,63,56,58,58,55,56,56],
[74,0,74,65,64,66,65,75,66,72],
[67,56,0,65,64,59,74,64,62,62],
[67,65,65,0,61,57,63,62,64,65],
[74,66,66,69,0,63,72,71,68,69],
[72,64,71,73,67,0,69,68,64,66],
[72,65,56,67,58,61,0,70,63,63],
[75,55,66,68,59,62,60,0,66,61],
[74,64,68,66,62,66,67,64,0,71],
[74,58,68,65,61,64,67,69,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,88,88,66,87,74,72,87,73],
[65,0,79,80,75,79,65,71,63,66],
[42,51,0,70,50,79,60,65,55,57],
[42,50,60,0,36,83,63,45,64,58],
[64,55,80,94,0,87,80,92,71,80],
[43,51,51,47,43,0,66,65,63,44],
[56,65,70,67,50,64,0,78,79,79],
[58,59,65,85,38,65,52,0,64,67],
[43,67,75,66,59,67,51,66,0,59],
[57,64,73,72,50,86,51,63,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,65,77,87,77,73,77,69,73],
[58,0,65,69,69,72,63,58,65,66],
[65,65,0,69,74,66,68,70,62,59],
[53,61,61,0,67,64,52,57,53,61],
[43,61,56,63,0,65,51,63,54,61],
[53,58,64,66,65,0,54,61,52,62],
[57,67,62,78,79,76,0,64,68,70],
[53,72,60,73,67,69,66,0,62,63],
[61,65,68,77,76,78,62,68,0,72],
[57,64,71,69,69,68,60,67,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,57,66,56,69,68,55,45,36],
[66,0,69,71,65,64,67,54,66,59],
[73,61,0,57,61,70,55,67,57,54],
[64,59,73,0,61,75,56,65,60,59],
[74,65,69,69,0,79,68,65,62,53],
[61,66,60,55,51,0,63,62,54,50],
[62,63,75,74,62,67,0,50,60,59],
[75,76,63,65,65,68,80,0,54,56],
[85,64,73,70,68,76,70,76,0,66],
[94,71,76,71,77,80,71,74,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,65,0,65,64,0,32,65,32],
[64,0,65,64,65,64,64,32,97,32],
[65,65,0,32,33,32,32,32,65,32],
[130,66,98,0,98,64,65,98,98,65],
[65,65,97,32,0,64,32,32,65,32],
[66,66,98,66,66,0,33,98,98,33],
[130,66,98,65,98,97,0,65,98,65],
[98,98,98,32,98,32,65,0,130,65],
[65,33,65,32,65,32,32,0,0,0],
[98,98,98,65,98,97,65,65,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,59,55,69,67,59,61,46,55],
[69,0,44,50,65,57,53,47,49,52],
[71,86,0,70,63,68,73,77,71,56],
[75,80,60,0,62,66,74,66,60,69],
[61,65,67,68,0,79,73,68,56,72],
[63,73,62,64,51,0,72,59,57,55],
[71,77,57,56,57,58,0,62,67,64],
[69,83,53,64,62,71,68,0,71,66],
[84,81,59,70,74,73,63,59,0,68],
[75,78,74,61,58,75,66,64,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,56,73,70,64,69,66,63,53],
[69,0,60,71,59,53,59,58,70,70],
[74,70,0,70,63,60,64,77,73,62],
[57,59,60,0,69,59,53,67,60,67],
[60,71,67,61,0,69,70,58,78,65],
[66,77,70,71,61,0,76,61,78,71],
[61,71,66,77,60,54,0,54,71,60],
[64,72,53,63,72,69,76,0,66,57],
[67,60,57,70,52,52,59,64,0,63],
[77,60,68,63,65,59,70,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,81,48,63,31,40,47,33,62],
[58,0,81,67,65,48,56,48,41,71],
[49,49,0,51,48,49,42,39,35,47],
[82,63,79,0,48,54,63,56,39,69],
[67,65,82,82,0,58,65,59,42,64],
[99,82,81,76,72,0,75,73,65,82],
[90,74,88,67,65,55,0,82,33,95],
[83,82,91,74,71,57,48,0,50,56],
[97,89,95,91,88,65,97,80,0,105],
[68,59,83,61,66,48,35,74,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,60,65,69,67,73,72,62],
[65,0,73,61,62,75,78,70,78,71],
[60,57,0,67,52,56,66,68,68,56],
[70,69,63,0,55,66,71,72,72,76],
[65,68,78,75,0,74,78,73,78,70],
[61,55,74,64,56,0,70,59,69,67],
[63,52,64,59,52,60,0,69,68,58],
[57,60,62,58,57,71,61,0,68,54],
[58,52,62,58,52,61,62,62,0,59],
[68,59,74,54,60,63,72,76,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,53,65,64,65,59,54,65,59],
[65,0,50,73,58,56,50,59,69,55],
[77,80,0,72,72,63,69,68,69,53],
[65,57,58,0,55,73,45,60,65,55],
[66,72,58,75,0,78,68,75,83,50],
[65,74,67,57,52,0,68,57,72,59],
[71,80,61,85,62,62,0,69,71,68],
[76,71,62,70,55,73,61,0,78,60],
[65,61,61,65,47,58,59,52,0,54],
[71,75,77,75,80,71,62,70,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,36,54,50,53,57,46,49,62],
[77,0,70,87,67,66,67,66,80,65],
[94,60,0,86,56,74,77,56,62,68],
[76,43,44,0,43,57,56,44,46,60],
[80,63,74,87,0,70,69,58,61,59],
[77,64,56,73,60,0,58,55,67,66],
[73,63,53,74,61,72,0,51,59,59],
[84,64,74,86,72,75,79,0,65,68],
[81,50,68,84,69,63,71,65,0,66],
[68,65,62,70,71,64,71,62,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,77,74,63,89,74,81,72],
[61,0,77,68,54,56,83,65,73,58],
[61,53,0,68,61,54,73,68,65,58],
[53,62,62,0,65,62,74,62,54,53],
[56,76,69,65,0,60,70,63,68,59],
[67,74,76,68,70,0,71,74,69,57],
[41,47,57,56,60,59,0,46,49,54],
[56,65,62,68,67,56,84,0,70,61],
[49,57,65,76,62,61,81,60,0,68],
[58,72,72,77,71,73,76,69,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,69,58,63,64,61,52,60,64],
[67,0,86,61,67,70,87,69,62,77],
[61,44,0,51,55,64,71,55,49,55],
[72,69,79,0,65,51,85,71,67,72],
[67,63,75,65,0,65,65,52,60,64],
[66,60,66,79,65,0,76,55,65,62],
[69,43,59,45,65,54,0,45,49,61],
[78,61,75,59,78,75,85,0,77,73],
[70,68,81,63,70,65,81,53,0,66],
[66,53,75,58,66,68,69,57,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,67,71,62,68,63,60,72,65],
[59,0,60,62,54,64,71,74,68,56],
[63,70,0,82,77,63,66,66,89,63],
[59,68,48,0,55,53,61,67,81,53],
[68,76,53,75,0,63,63,69,81,63],
[62,66,67,77,67,0,68,71,87,65],
[67,59,64,69,67,62,0,61,68,56],
[70,56,64,63,61,59,69,0,77,59],
[58,62,41,49,49,43,62,53,0,51],
[65,74,67,77,67,65,74,71,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,55,59,67,52,55,58,63,68],
[63,0,67,57,61,56,59,68,68,69],
[75,63,0,61,65,60,53,71,75,62],
[71,73,69,0,65,61,71,75,76,74],
[63,69,65,65,0,59,60,70,73,71],
[78,74,70,69,71,0,62,81,78,78],
[75,71,77,59,70,68,0,77,78,74],
[72,62,59,55,60,49,53,0,74,66],
[67,62,55,54,57,52,52,56,0,49],
[62,61,68,56,59,52,56,64,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,69,71,62,75,73,67,62,63],
[59,0,65,69,60,72,66,66,56,68],
[61,65,0,74,70,70,70,81,68,67],
[59,61,56,0,62,61,68,67,59,57],
[68,70,60,68,0,70,70,74,75,66],
[55,58,60,69,60,0,61,61,60,60],
[57,64,60,62,60,69,0,61,59,59],
[63,64,49,63,56,69,69,0,55,50],
[68,74,62,71,55,70,71,75,0,58],
[67,62,63,73,64,70,71,80,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,62,97,97,80,80,97,34,80],
[99,0,48,98,115,83,65,115,99,115],
[68,82,0,98,100,82,98,115,51,98],
[33,32,32,0,65,32,47,49,17,48],
[33,15,30,65,0,33,49,99,51,66],
[50,47,48,98,97,0,80,114,51,83],
[50,65,32,83,81,50,0,99,68,84],
[33,15,15,81,31,16,31,0,18,34],
[96,31,79,113,79,79,62,112,0,114],
[50,15,32,82,64,47,46,96,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,64,59,74,61,64,65,56],
[63,0,63,72,58,83,67,71,61,60],
[66,67,0,71,61,84,72,73,56,62],
[66,58,59,0,58,74,62,56,48,51],
[71,72,69,72,0,68,64,70,53,59],
[56,47,46,56,62,0,48,55,39,49],
[69,63,58,68,66,82,0,66,57,52],
[66,59,57,74,60,75,64,0,57,55],
[65,69,74,82,77,91,73,73,0,72],
[74,70,68,79,71,81,78,75,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,73,79,88,79,66,80,67,64],
[56,0,45,58,68,67,50,61,54,48],
[57,85,0,76,71,83,68,75,67,74],
[51,72,54,0,69,79,67,77,54,79],
[42,62,59,61,0,61,59,79,61,57],
[51,63,47,51,69,0,62,70,45,64],
[64,80,62,63,71,68,0,78,61,74],
[50,69,55,53,51,60,52,0,49,63],
[63,76,63,76,69,85,69,81,0,80],
[66,82,56,51,73,66,56,67,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,66,60,54,57,73,70,68,55],
[76,0,75,67,56,72,80,75,78,74],
[64,55,0,68,55,63,80,66,72,54],
[70,63,62,0,54,72,82,61,67,58],
[76,74,75,76,0,65,85,74,81,65],
[73,58,67,58,65,0,71,62,68,69],
[57,50,50,48,45,59,0,45,53,57],
[60,55,64,69,56,68,85,0,73,73],
[62,52,58,63,49,62,77,57,0,66],
[75,56,76,72,65,61,73,57,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,75,64,58,80,71,66,85,81],
[61,0,75,44,59,67,52,62,71,66],
[55,55,0,36,52,50,47,57,71,43],
[66,86,94,0,62,79,75,84,83,77],
[72,71,78,68,0,65,63,59,71,76],
[50,63,80,51,65,0,58,67,65,47],
[59,78,83,55,67,72,0,58,74,66],
[64,68,73,46,71,63,72,0,81,73],
[45,59,59,47,59,65,56,49,0,63],
[49,64,87,53,54,83,64,57,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,78,91,58,69,73,79,67,77],
[61,0,64,76,70,63,78,78,69,69],
[52,66,0,64,60,60,90,63,57,66],
[39,54,66,0,62,53,73,64,61,67],
[72,60,70,68,0,61,71,74,69,63],
[61,67,70,77,69,0,87,50,63,70],
[57,52,40,57,59,43,0,53,55,50],
[51,52,67,66,56,80,77,0,65,64],
[63,61,73,69,61,67,75,65,0,74],
[53,61,64,63,67,60,80,66,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,60,63,74,68,71,64,62],
[67,0,63,60,66,73,59,66,61,59],
[59,67,0,52,62,68,57,65,59,60],
[70,70,78,0,71,72,61,78,69,69],
[67,64,68,59,0,69,64,71,64,61],
[56,57,62,58,61,0,63,60,57,57],
[62,71,73,69,66,67,0,72,63,59],
[59,64,65,52,59,70,58,0,56,58],
[66,69,71,61,66,73,67,74,0,57],
[68,71,70,61,69,73,71,72,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,55,72,64,65,54,61,54],
[66,0,61,70,62,68,75,51,67,57],
[65,69,0,67,74,63,63,71,77,74],
[75,60,63,0,59,64,57,72,45,63],
[58,68,56,71,0,58,65,59,68,68],
[66,62,67,66,72,0,64,61,64,59],
[65,55,67,73,65,66,0,57,58,52],
[76,79,59,58,71,69,73,0,69,61],
[69,63,53,85,62,66,72,61,0,56],
[76,73,56,67,62,71,78,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,46,53,52,58,66,50,65,42],
[74,0,63,75,78,70,73,56,76,68],
[84,67,0,75,70,78,57,72,79,70],
[77,55,55,0,55,61,61,51,63,56],
[78,52,60,75,0,73,66,65,70,61],
[72,60,52,69,57,0,64,57,57,48],
[64,57,73,69,64,66,0,53,70,55],
[80,74,58,79,65,73,77,0,83,62],
[65,54,51,67,60,73,60,47,0,55],
[88,62,60,74,69,82,75,68,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,90,94,39,75,103,74,62],
[22,0,66,53,51,29,64,68,52,40],
[14,64,0,49,66,29,44,66,58,47],
[40,77,81,0,72,36,57,81,58,58],
[36,79,64,58,0,45,57,87,79,62],
[91,101,101,94,85,0,85,103,58,73],
[55,66,86,73,73,45,0,81,58,46],
[27,62,64,49,43,27,49,0,31,38],
[56,78,72,72,51,72,72,99,0,69],
[68,90,83,72,68,57,84,92,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,77,62,66,65,67,64,73,73],
[60,0,66,65,66,58,69,65,61,68],
[53,64,0,66,57,58,68,64,58,69],
[68,65,64,0,62,61,72,61,68,69],
[64,64,73,68,0,63,78,63,66,73],
[65,72,72,69,67,0,73,68,65,69],
[63,61,62,58,52,57,0,67,57,67],
[66,65,66,69,67,62,63,0,62,72],
[57,69,72,62,64,65,73,68,0,71],
[57,62,61,61,57,61,63,58,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,73,55,57,65,68,67,61],
[67,0,66,71,53,60,68,64,57,64],
[68,64,0,72,59,55,68,64,58,64],
[57,59,58,0,58,62,61,56,66,63],
[75,77,71,72,0,61,78,64,69,67],
[73,70,75,68,69,0,67,71,61,78],
[65,62,62,69,52,63,0,62,56,60],
[62,66,66,74,66,59,68,0,61,71],
[63,73,72,64,61,69,74,69,0,68],
[69,66,66,67,63,52,70,59,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,74,79,66,71,80,76,70,71],
[68,0,74,73,59,71,78,68,62,65],
[56,56,0,73,66,64,75,63,56,64],
[51,57,57,0,53,62,66,59,51,66],
[64,71,64,77,0,71,77,67,65,69],
[59,59,66,68,59,0,71,68,68,67],
[50,52,55,64,53,59,0,57,52,51],
[54,62,67,71,63,62,73,0,64,65],
[60,68,74,79,65,62,78,66,0,61],
[59,65,66,64,61,63,79,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,65,60,76,74,71,72,69,67],
[63,0,63,58,68,78,73,67,61,65],
[65,67,0,67,66,81,71,61,59,61],
[70,72,63,0,78,84,87,85,71,68],
[54,62,64,52,0,70,61,66,68,56],
[56,52,49,46,60,0,64,59,60,55],
[59,57,59,43,69,66,0,60,60,53],
[58,63,69,45,64,71,70,0,61,57],
[61,69,71,59,62,70,70,69,0,61],
[63,65,69,62,74,75,77,73,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,55,71,71,53,67,65,67,68],
[62,0,73,68,74,56,76,63,58,51],
[75,57,0,69,81,68,74,60,53,69],
[59,62,61,0,71,46,59,51,59,65],
[59,56,49,59,0,46,57,54,63,62],
[77,74,62,84,84,0,69,73,68,71],
[63,54,56,71,73,61,0,52,53,49],
[65,67,70,79,76,57,78,0,64,62],
[63,72,77,71,67,62,77,66,0,69],
[62,79,61,65,68,59,81,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,61,62,69,78,63,83,63,66],
[50,0,51,64,48,52,59,51,61,53],
[69,79,0,64,72,78,57,66,67,74],
[68,66,66,0,67,66,59,70,61,50],
[61,82,58,63,0,76,56,65,61,59],
[52,78,52,64,54,0,61,70,57,57],
[67,71,73,71,74,69,0,76,54,51],
[47,79,64,60,65,60,54,0,59,72],
[67,69,63,69,69,73,76,71,0,59],
[64,77,56,80,71,73,79,58,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,60,58,56,92,63,51,70,55],
[68,0,80,68,66,73,65,63,66,50],
[70,50,0,68,45,73,67,81,62,73],
[72,62,62,0,66,86,70,89,72,76],
[74,64,85,64,0,85,80,66,61,48],
[38,57,57,44,45,0,50,39,41,42],
[67,65,63,60,50,80,0,67,58,72],
[79,67,49,41,64,91,63,0,76,56],
[60,64,68,58,69,89,72,54,0,50],
[75,80,57,54,82,88,58,74,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,58,76,67,72,72,75,64,70],
[67,0,60,62,56,73,61,77,61,62],
[72,70,0,73,67,87,58,80,71,71],
[54,68,57,0,53,77,53,69,48,60],
[63,74,63,77,0,71,55,78,59,58],
[58,57,43,53,59,0,53,72,60,55],
[58,69,72,77,75,77,0,80,67,66],
[55,53,50,61,52,58,50,0,54,46],
[66,69,59,82,71,70,63,76,0,80],
[60,68,59,70,72,75,64,84,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,73,84,85,88,78,85,79,61],
[37,0,50,49,60,49,57,69,46,45],
[57,80,0,72,78,83,85,73,68,48],
[46,81,58,0,82,82,75,63,58,64],
[45,70,52,48,0,73,65,62,60,34],
[42,81,47,48,57,0,56,66,49,39],
[52,73,45,55,65,74,0,67,64,55],
[45,61,57,67,68,64,63,0,55,41],
[51,84,62,72,70,81,66,75,0,69],
[69,85,82,66,96,91,75,89,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,66,65,63,71,61,77,62,63],
[71,0,63,64,69,70,71,74,55,64],
[64,67,0,69,59,65,63,63,50,66],
[65,66,61,0,57,69,69,68,65,62],
[67,61,71,73,0,68,70,77,68,73],
[59,60,65,61,62,0,63,76,50,65],
[69,59,67,61,60,67,0,65,47,69],
[53,56,67,62,53,54,65,0,55,61],
[68,75,80,65,62,80,83,75,0,67],
[67,66,64,68,57,65,61,69,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,65,57,55,71,63,69,45,71],
[70,0,62,45,49,49,67,57,65,63],
[65,68,0,62,67,55,83,71,62,69],
[73,85,68,0,56,59,77,60,49,59],
[75,81,63,74,0,71,81,79,69,91],
[59,81,75,71,59,0,72,72,66,78],
[67,63,47,53,49,58,0,63,51,57],
[61,73,59,70,51,58,67,0,59,77],
[85,65,68,81,61,64,79,71,0,69],
[59,67,61,71,39,52,73,53,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,56,68,54,60,65,87,63,52],
[69,0,60,81,60,64,67,94,77,77],
[74,70,0,68,61,75,74,75,83,72],
[62,49,62,0,66,68,75,83,71,60],
[76,70,69,64,0,72,70,89,70,71],
[70,66,55,62,58,0,70,83,71,57],
[65,63,56,55,60,60,0,72,69,60],
[43,36,55,47,41,47,58,0,58,43],
[67,53,47,59,60,59,61,72,0,63],
[78,53,58,70,59,73,70,87,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,48,30,54,64,55,53,51,76],
[77,0,72,43,67,76,60,59,52,94],
[82,58,0,36,62,77,63,53,53,94],
[100,87,94,0,80,86,75,66,62,114],
[76,63,68,50,0,84,59,54,60,80],
[66,54,53,44,46,0,33,50,55,78],
[75,70,67,55,71,97,0,65,61,81],
[77,71,77,64,76,80,65,0,72,93],
[79,78,77,68,70,75,69,58,0,88],
[54,36,36,16,50,52,49,37,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,78,71,66,64,63,70,64,70],
[58,0,67,65,65,47,61,62,63,62],
[52,63,0,60,63,51,56,55,59,57],
[59,65,70,0,57,62,59,61,67,62],
[64,65,67,73,0,61,61,69,61,62],
[66,83,79,68,69,0,68,64,70,74],
[67,69,74,71,69,62,0,68,66,72],
[60,68,75,69,61,66,62,0,79,67],
[66,67,71,63,69,60,64,51,0,63],
[60,68,73,68,68,56,58,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,64,54,77,69,67,65,59,61],
[68,0,57,63,67,68,59,62,58,55],
[66,73,0,61,80,73,64,67,72,64],
[76,67,69,0,82,70,61,73,70,60],
[53,63,50,48,0,53,58,55,57,53],
[61,62,57,60,77,0,68,72,70,62],
[63,71,66,69,72,62,0,66,64,65],
[65,68,63,57,75,58,64,0,62,56],
[71,72,58,60,73,60,66,68,0,64],
[69,75,66,70,77,68,65,74,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,64,67,68,68,63,70,71],
[67,0,69,67,69,72,67,66,70,63],
[68,61,0,62,66,64,65,64,65,63],
[66,63,68,0,72,70,66,72,74,69],
[63,61,64,58,0,68,65,64,70,65],
[62,58,66,60,62,0,67,68,69,59],
[62,63,65,64,65,63,0,62,72,70],
[67,64,66,58,66,62,68,0,71,62],
[60,60,65,56,60,61,58,59,0,59],
[59,67,67,61,65,71,60,68,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,70,59,72,85,70,95,72,62],
[48,0,59,23,71,35,70,48,84,58],
[60,71,0,59,84,71,81,74,74,60],
[71,107,71,0,94,61,72,96,84,84],
[58,59,46,36,0,59,70,36,59,71],
[45,95,59,69,71,0,60,81,71,84],
[60,60,49,58,60,70,0,60,48,60],
[35,82,56,34,94,49,70,0,72,61],
[58,46,56,46,71,59,82,58,0,50],
[68,72,70,46,59,46,70,69,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,61,50,64,48,66,66,57,65],
[70,0,72,66,61,73,64,66,70,66],
[69,58,0,72,68,73,59,61,74,65],
[80,64,58,0,64,71,55,69,63,80],
[66,69,62,66,0,66,54,68,72,65],
[82,57,57,59,64,0,66,71,59,71],
[64,66,71,75,76,64,0,76,69,73],
[64,64,69,61,62,59,54,0,62,70],
[73,60,56,67,58,71,61,68,0,70],
[65,64,65,50,65,59,57,60,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,80,80,114,64,97,65,81,48],
[65,0,80,47,113,47,63,64,80,31],
[50,50,0,47,81,48,50,50,50,64],
[50,83,83,0,98,49,83,67,67,65],
[16,17,49,32,0,33,16,17,49,16],
[66,83,82,81,97,0,82,50,82,50],
[33,67,80,47,114,48,0,50,66,31],
[65,66,80,63,113,80,80,0,65,64],
[49,50,80,63,81,48,64,65,0,31],
[82,99,66,65,114,80,99,66,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,56,60,51,57,58,59,62,60],
[73,0,60,68,65,60,62,63,60,56],
[74,70,0,62,57,64,61,58,59,61],
[70,62,68,0,56,66,67,65,62,70],
[79,65,73,74,0,71,65,74,72,73],
[73,70,66,64,59,0,61,67,58,63],
[72,68,69,63,65,69,0,61,63,64],
[71,67,72,65,56,63,69,0,68,66],
[68,70,71,68,58,72,67,62,0,71],
[70,74,69,60,57,67,66,64,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,84,60,64,73,74,75,75,65],
[46,0,67,55,64,61,58,58,57,57],
[46,63,0,56,54,54,68,52,51,52],
[70,75,74,0,72,67,66,72,66,60],
[66,66,76,58,0,52,56,56,66,64],
[57,69,76,63,78,0,57,78,64,57],
[56,72,62,64,74,73,0,60,70,65],
[55,72,78,58,74,52,70,0,73,57],
[55,73,79,64,64,66,60,57,0,60],
[65,73,78,70,66,73,65,73,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,65,69,73,70,70,82,79,76],
[58,0,66,58,74,56,60,71,71,69],
[65,64,0,71,75,73,63,63,55,74],
[61,72,59,0,66,73,61,70,65,81],
[57,56,55,64,0,68,64,59,50,75],
[60,74,57,57,62,0,53,72,63,74],
[60,70,67,69,66,77,0,61,64,68],
[48,59,67,60,71,58,69,0,67,76],
[51,59,75,65,80,67,66,63,0,70],
[54,61,56,49,55,56,62,54,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,64,58,72,72,60,62,63,59],
[72,0,63,70,74,73,63,61,66,54],
[66,67,0,68,71,72,66,70,62,65],
[72,60,62,0,78,76,62,65,58,63],
[58,56,59,52,0,67,56,53,61,52],
[58,57,58,54,63,0,59,52,53,53],
[70,67,64,68,74,71,0,60,67,69],
[68,69,60,65,77,78,70,0,68,69],
[67,64,68,72,69,77,63,62,0,60],
[71,76,65,67,78,77,61,61,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,64,60,71,68,67,55,66,71],
[70,0,72,72,67,74,59,60,77,73],
[66,58,0,73,70,79,68,64,77,76],
[70,58,57,0,67,64,61,58,82,67],
[59,63,60,63,0,65,55,57,73,65],
[62,56,51,66,65,0,79,62,68,65],
[63,71,62,69,75,51,0,69,76,75],
[75,70,66,72,73,68,61,0,82,72],
[64,53,53,48,57,62,54,48,0,66],
[59,57,54,63,65,65,55,58,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,56,67,56,63,57,71,72,54],
[65,0,63,65,62,70,64,70,65,64],
[74,67,0,72,60,70,66,66,72,68],
[63,65,58,0,57,64,62,71,64,72],
[74,68,70,73,0,64,67,72,63,78],
[67,60,60,66,66,0,64,79,68,70],
[73,66,64,68,63,66,0,74,72,62],
[59,60,64,59,58,51,56,0,69,59],
[58,65,58,66,67,62,58,61,0,63],
[76,66,62,58,52,60,68,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,68,63,59,67,71,61,82,60],
[59,0,50,67,64,66,59,48,56,47],
[62,80,0,65,71,71,70,60,71,67],
[67,63,65,0,70,73,53,65,78,59],
[71,66,59,60,0,71,71,63,61,58],
[63,64,59,57,59,0,63,58,66,50],
[59,71,60,77,59,67,0,55,74,57],
[69,82,70,65,67,72,75,0,84,65],
[48,74,59,52,69,64,56,46,0,66],
[70,83,63,71,72,80,73,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,85,89,87,86,88,102,60,87],
[24,0,64,51,49,43,51,73,37,67],
[45,66,0,68,50,52,74,81,60,75],
[41,79,62,0,47,63,73,78,43,80],
[43,81,80,83,0,59,80,74,72,83],
[44,87,78,67,71,0,80,66,51,69],
[42,79,56,57,50,50,0,67,65,83],
[28,57,49,52,56,64,63,0,49,65],
[70,93,70,87,58,79,65,81,0,74],
[43,63,55,50,47,61,47,65,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,61,69,68,66,57,62,75,60],
[77,0,68,66,64,62,66,60,65,67],
[69,62,0,70,65,57,63,62,65,62],
[61,64,60,0,41,57,53,55,56,52],
[62,66,65,89,0,69,64,65,81,66],
[64,68,73,73,61,0,60,60,62,71],
[73,64,67,77,66,70,0,69,69,80],
[68,70,68,75,65,70,61,0,67,68],
[55,65,65,74,49,68,61,63,0,60],
[70,63,68,78,64,59,50,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,72,70,66,68,75,66,65,71],
[65,0,74,68,65,70,67,69,63,65],
[58,56,0,64,60,62,56,59,58,54],
[60,62,66,0,63,62,62,59,60,56],
[64,65,70,67,0,62,71,73,64,66],
[62,60,68,68,68,0,64,65,64,64],
[55,63,74,68,59,66,0,71,58,59],
[64,61,71,71,57,65,59,0,63,62],
[65,67,72,70,66,66,72,67,0,67],
[59,65,76,74,64,66,71,68,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,58,70,60,73,74,84,75,71],
[68,0,65,76,69,73,72,83,71,73],
[72,65,0,58,60,62,65,72,63,64],
[60,54,72,0,63,68,69,71,63,65],
[70,61,70,67,0,59,76,70,73,73],
[57,57,68,62,71,0,74,78,66,65],
[56,58,65,61,54,56,0,59,68,65],
[46,47,58,59,60,52,71,0,66,62],
[55,59,67,67,57,64,62,64,0,57],
[59,57,66,65,57,65,65,68,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,63,56,62,59,78,64,71,66],
[57,0,56,57,53,42,49,55,58,66],
[67,74,0,56,82,69,68,75,75,70],
[74,73,74,0,61,58,66,73,69,74],
[68,77,48,69,0,63,83,74,61,67],
[71,88,61,72,67,0,65,74,72,76],
[52,81,62,64,47,65,0,53,71,68],
[66,75,55,57,56,56,77,0,77,68],
[59,72,55,61,69,58,59,53,0,60],
[64,64,60,56,63,54,62,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,65,70,71,67,77,64,73,69],
[56,0,56,58,49,57,54,71,60,58],
[65,74,0,70,65,70,71,70,77,54],
[60,72,60,0,68,74,64,79,73,62],
[59,81,65,62,0,72,69,65,66,54],
[63,73,60,56,58,0,53,70,58,66],
[53,76,59,66,61,77,0,74,61,70],
[66,59,60,51,65,60,56,0,66,60],
[57,70,53,57,64,72,69,64,0,51],
[61,72,76,68,76,64,60,70,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,50,58,58,63,62,61,52,68],
[72,0,61,69,67,69,70,70,63,77],
[80,69,0,90,64,78,73,74,76,76],
[72,61,40,0,48,58,54,62,52,70],
[72,63,66,82,0,72,61,75,68,81],
[67,61,52,72,58,0,67,71,68,75],
[68,60,57,76,69,63,0,74,68,73],
[69,60,56,68,55,59,56,0,60,79],
[78,67,54,78,62,62,62,70,0,83],
[62,53,54,60,49,55,57,51,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,66,69,70,61,63,71,57],
[67,0,74,75,70,65,62,65,70,76],
[64,56,0,74,68,76,65,72,72,63],
[64,55,56,0,59,77,58,67,71,53],
[61,60,62,71,0,73,64,53,70,54],
[60,65,54,53,57,0,57,62,68,57],
[69,68,65,72,66,73,0,58,56,63],
[67,65,58,63,77,68,72,0,76,63],
[59,60,58,59,60,62,74,54,0,50],
[73,54,67,77,76,73,67,67,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,68,70,69,58,63,63,60,68],
[77,0,78,83,82,66,68,81,64,79],
[62,52,0,68,65,60,61,71,66,63],
[60,47,62,0,55,52,54,62,57,56],
[61,48,65,75,0,59,71,58,58,62],
[72,64,70,78,71,0,67,68,64,68],
[67,62,69,76,59,63,0,59,67,64],
[67,49,59,68,72,62,71,0,57,76],
[70,66,64,73,72,66,63,73,0,68],
[62,51,67,74,68,62,66,54,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,69,67,65,67,52,62,63,70],
[71,0,69,75,71,76,66,64,83,70],
[61,61,0,58,60,68,57,62,68,63],
[63,55,72,0,66,74,58,63,70,69],
[65,59,70,64,0,70,60,67,72,65],
[63,54,62,56,60,0,48,56,62,53],
[78,64,73,72,70,82,0,75,75,69],
[68,66,68,67,63,74,55,0,66,59],
[67,47,62,60,58,68,55,64,0,59],
[60,60,67,61,65,77,61,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,62,73,67,65,73,58,72,67],
[58,0,54,54,58,57,56,57,54,61],
[68,76,0,69,72,64,63,68,66,74],
[57,76,61,0,65,63,62,60,66,63],
[63,72,58,65,0,69,64,61,66,70],
[65,73,66,67,61,0,73,61,62,69],
[57,74,67,68,66,57,0,59,73,64],
[72,73,62,70,69,69,71,0,65,65],
[58,76,64,64,64,68,57,65,0,62],
[63,69,56,67,60,61,66,65,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,58,60,66,65,66,74,72],
[61,0,61,66,54,57,56,62,66,55],
[59,69,0,54,63,66,75,55,63,62],
[72,64,76,0,65,73,69,59,75,68],
[70,76,67,65,0,60,74,64,73,63],
[64,73,64,57,70,0,66,63,68,63],
[65,74,55,61,56,64,0,57,54,59],
[64,68,75,71,66,67,73,0,71,66],
[56,64,67,55,57,62,76,59,0,65],
[58,75,68,62,67,67,71,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,68,72,69,68,63,82,58,54],
[46,0,69,68,62,55,48,67,55,51],
[62,61,0,68,74,64,54,67,49,53],
[58,62,62,0,69,49,45,56,60,49],
[61,68,56,61,0,62,50,68,62,58],
[62,75,66,81,68,0,51,75,66,67],
[67,82,76,85,80,79,0,69,71,58],
[48,63,63,74,62,55,61,0,65,62],
[72,75,81,70,68,64,59,65,0,63],
[76,79,77,81,72,63,72,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,69,57,73,67,58,60,58],
[62,0,69,55,57,60,66,68,68,66],
[66,61,0,67,63,72,71,74,62,66],
[61,75,63,0,67,75,62,75,68,68],
[73,73,67,63,0,69,60,79,70,70],
[57,70,58,55,61,0,63,54,64,58],
[63,64,59,68,70,67,0,74,69,67],
[72,62,56,55,51,76,56,0,63,57],
[70,62,68,62,60,66,61,67,0,62],
[72,64,64,62,60,72,63,73,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,81,81,93,70,82,71,59],
[61,0,94,81,70,105,70,72,58,73],
[61,36,0,48,61,83,59,73,71,36],
[49,49,82,0,70,94,61,36,71,61],
[49,60,69,60,0,82,60,59,72,37],
[37,25,47,36,48,0,48,35,36,49],
[60,60,71,69,70,82,0,59,72,49],
[48,58,57,94,71,95,71,0,47,60],
[59,72,59,59,58,94,58,83,0,60],
[71,57,94,69,93,81,81,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,82,84,72,96,78,80,73,58],
[56,0,46,48,50,71,56,53,53,54],
[48,84,0,61,64,65,63,52,59,59],
[46,82,69,0,79,75,81,53,73,51],
[58,80,66,51,0,66,64,54,58,46],
[34,59,65,55,64,0,64,70,54,49],
[52,74,67,49,66,66,0,72,78,46],
[50,77,78,77,76,60,58,0,56,63],
[57,77,71,57,72,76,52,74,0,71],
[72,76,71,79,84,81,84,67,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,71,63,68,74,70,65,70,71],
[52,0,60,63,60,66,63,63,61,71],
[59,70,0,65,67,73,64,65,64,71],
[67,67,65,0,67,69,68,65,65,73],
[62,70,63,63,0,67,71,66,69,74],
[56,64,57,61,63,0,64,63,56,71],
[60,67,66,62,59,66,0,62,64,67],
[65,67,65,65,64,67,68,0,60,73],
[60,69,66,65,61,74,66,70,0,73],
[59,59,59,57,56,59,63,57,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,68,68,67,77,77,76,69,75],
[67,0,75,62,69,73,80,67,69,69],
[62,55,0,59,56,67,54,76,61,62],
[62,68,71,0,70,81,64,76,66,68],
[63,61,74,60,0,73,52,79,67,77],
[53,57,63,49,57,0,67,62,60,71],
[53,50,76,66,78,63,0,74,64,76],
[54,63,54,54,51,68,56,0,62,58],
[61,61,69,64,63,70,66,68,0,79],
[55,61,68,62,53,59,54,72,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,66,64,68,64,59,68,63,62],
[69,0,56,67,68,72,69,68,65,70],
[64,74,0,70,70,71,67,69,65,73],
[66,63,60,0,66,68,75,73,56,67],
[62,62,60,64,0,61,59,66,59,69],
[66,58,59,62,69,0,62,71,54,67],
[71,61,63,55,71,68,0,63,60,67],
[62,62,61,57,64,59,67,0,58,63],
[67,65,65,74,71,76,70,72,0,67],
[68,60,57,63,61,63,63,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,55,77,70,39,55,55,37,42],
[58,0,66,60,74,55,73,50,61,68],
[75,64,0,62,72,43,60,55,47,62],
[53,70,68,0,70,28,63,71,61,63],
[60,56,58,60,0,35,66,66,41,55],
[91,75,87,102,95,0,89,73,46,76],
[75,57,70,67,64,41,0,83,63,76],
[75,80,75,59,64,57,47,0,73,87],
[93,69,83,69,89,84,67,57,0,93],
[88,62,68,67,75,54,54,43,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,65,73,65,65,83,56,54,56],
[83,0,84,83,84,92,92,84,83,64],
[65,46,0,44,66,75,53,53,64,45],
[57,47,86,0,85,76,65,48,64,65],
[65,46,64,45,0,67,37,45,54,27],
[65,38,55,54,63,0,73,54,53,46],
[47,38,77,65,93,57,0,57,73,55],
[74,46,77,82,85,76,73,0,92,65],
[76,47,66,66,76,77,57,38,0,66],
[74,66,85,65,103,84,75,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,71,64,52,67,43,62,68,53],
[74,0,64,66,58,69,59,68,82,59],
[59,66,0,71,61,74,67,70,72,87],
[66,64,59,0,68,80,62,61,55,83],
[78,72,69,62,0,71,58,77,75,78],
[63,61,56,50,59,0,55,56,80,57],
[87,71,63,68,72,75,0,73,78,73],
[68,62,60,69,53,74,57,0,74,68],
[62,48,58,75,55,50,52,56,0,57],
[77,71,43,47,52,73,57,62,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,73,67,64,73,69,73,61,72],
[59,0,70,64,56,64,54,64,61,58],
[57,60,0,66,60,69,59,64,51,68],
[63,66,64,0,66,68,58,67,50,59],
[66,74,70,64,0,67,61,65,49,61],
[57,66,61,62,63,0,64,67,56,62],
[61,76,71,72,69,66,0,78,72,70],
[57,66,66,63,65,63,52,0,50,59],
[69,69,79,80,81,74,58,80,0,67],
[58,72,62,71,69,68,60,71,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,45,43,53,59,64,52,52,51],
[76,0,61,68,66,67,70,69,65,60],
[85,69,0,64,63,73,81,74,63,68],
[87,62,66,0,68,68,77,78,61,73],
[77,64,67,62,0,68,69,66,67,60],
[71,63,57,62,62,0,74,67,69,61],
[66,60,49,53,61,56,0,60,67,60],
[78,61,56,52,64,63,70,0,66,60],
[78,65,67,69,63,61,63,64,0,65],
[79,70,62,57,70,69,70,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,60,57,59,57,62,64,55],
[65,0,75,73,64,59,69,69,74,60],
[62,55,0,59,62,55,55,57,60,56],
[70,57,71,0,59,55,58,71,64,59],
[73,66,68,71,0,60,64,68,70,66],
[71,71,75,75,70,0,64,71,77,64],
[73,61,75,72,66,66,0,72,79,63],
[68,61,73,59,62,59,58,0,67,65],
[66,56,70,66,60,53,51,63,0,59],
[75,70,74,71,64,66,67,65,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,58,59,59,68,91,64,65,73],
[52,0,50,70,63,40,39,55,56,48],
[72,80,0,70,73,64,64,69,64,60],
[71,60,60,0,50,59,50,76,65,70],
[71,67,57,80,0,45,71,71,62,62],
[62,90,66,71,85,0,84,69,78,74],
[39,91,66,80,59,46,0,79,63,72],
[66,75,61,54,59,61,51,0,55,78],
[65,74,66,65,68,52,67,75,0,68],
[57,82,70,60,68,56,58,52,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,56,63,60,63,57,66,58,74],
[64,0,60,60,69,72,48,73,64,73],
[74,70,0,72,69,62,67,68,68,77],
[67,70,58,0,69,58,51,70,53,67],
[70,61,61,61,0,63,58,74,62,65],
[67,58,68,72,67,0,53,66,72,73],
[73,82,63,79,72,77,0,77,70,72],
[64,57,62,60,56,64,53,0,59,74],
[72,66,62,77,68,58,60,71,0,76],
[56,57,53,63,65,57,58,56,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,63,55,59,58,52,64,58,63],
[79,0,72,69,69,66,67,65,67,71],
[67,58,0,67,67,55,62,71,65,68],
[75,61,63,0,63,61,51,60,67,68],
[71,61,63,67,0,62,60,68,59,68],
[72,64,75,69,68,0,68,69,67,83],
[78,63,68,79,70,62,0,72,68,81],
[66,65,59,70,62,61,58,0,55,58],
[72,63,65,63,71,63,62,75,0,65],
[67,59,62,62,62,47,49,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,57,82,70,34,67,59,64,58],
[77,0,76,79,50,66,83,73,87,84],
[73,54,0,66,66,26,48,65,59,70],
[48,51,64,0,69,39,60,39,75,61],
[60,80,64,61,0,46,73,56,75,74],
[96,64,104,91,84,0,95,79,103,103],
[63,47,82,70,57,35,0,53,90,58],
[71,57,65,91,74,51,77,0,92,76],
[66,43,71,55,55,27,40,38,0,60],
[72,46,60,69,56,27,72,54,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,59,79,69,71,67,72,64,82],
[52,0,65,63,68,76,60,77,63,72],
[71,65,0,77,62,74,72,77,64,74],
[51,67,53,0,53,63,58,57,56,63],
[61,62,68,77,0,70,70,71,65,72],
[59,54,56,67,60,0,65,72,53,76],
[63,70,58,72,60,65,0,75,65,76],
[58,53,53,73,59,58,55,0,65,68],
[66,67,66,74,65,77,65,65,0,71],
[48,58,56,67,58,54,54,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,60,64,54,59,67,60,55,62],
[67,0,62,70,63,67,70,62,69,71],
[70,68,0,70,61,66,68,64,70,70],
[66,60,60,0,62,63,69,63,64,62],
[76,67,69,68,0,69,72,62,70,75],
[71,63,64,67,61,0,71,66,68,69],
[63,60,62,61,58,59,0,63,65,64],
[70,68,66,67,68,64,67,0,68,68],
[75,61,60,66,60,62,65,62,0,65],
[68,59,60,68,55,61,66,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,54,53,26,0,26,54,28],
[102,0,51,52,51,51,25,52,52,52],
[104,79,0,80,104,51,53,77,54,54],
[76,78,50,0,78,76,50,51,79,28],
[77,79,26,52,0,77,25,77,80,54],
[104,79,79,54,53,0,53,54,54,54],
[130,105,77,80,105,77,0,52,80,80],
[104,78,53,79,53,76,78,0,79,28],
[76,78,76,51,50,76,50,51,0,26],
[102,78,76,102,76,76,50,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,73,72,64,64,75,79,73,67],
[61,0,58,63,53,55,63,79,69,57],
[57,72,0,67,60,64,72,77,79,62],
[58,67,63,0,54,56,64,70,69,60],
[66,77,70,76,0,68,77,86,76,64],
[66,75,66,74,62,0,71,76,69,67],
[55,67,58,66,53,59,0,74,57,56],
[51,51,53,60,44,54,56,0,63,58],
[57,61,51,61,54,61,73,67,0,63],
[63,73,68,70,66,63,74,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,72,62,64,57,84,73,79,47],
[73,0,87,75,57,68,88,80,81,73],
[58,43,0,54,72,67,67,75,69,56],
[68,55,76,0,63,70,77,83,72,65],
[66,73,58,67,0,68,78,85,89,73],
[73,62,63,60,62,0,67,77,78,57],
[46,42,63,53,52,63,0,70,55,48],
[57,50,55,47,45,53,60,0,70,37],
[51,49,61,58,41,52,75,60,0,47],
[83,57,74,65,57,73,82,93,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,75,68,66,65,72,67,69,70],
[59,0,72,70,65,65,57,68,67,64],
[55,58,0,58,59,56,58,53,67,57],
[62,60,72,0,63,59,58,56,58,62],
[64,65,71,67,0,63,66,66,61,72],
[65,65,74,71,67,0,61,59,63,63],
[58,73,72,72,64,69,0,64,70,57],
[63,62,77,74,64,71,66,0,64,68],
[61,63,63,72,69,67,60,66,0,69],
[60,66,73,68,58,67,73,62,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,72,65,78,66,70,63,64],
[64,0,66,72,61,64,65,63,63,53],
[68,64,0,59,56,70,61,65,67,58],
[58,58,71,0,51,56,61,53,53,59],
[65,69,74,79,0,70,68,73,71,69],
[52,66,60,74,60,0,58,63,62,65],
[64,65,69,69,62,72,0,64,63,62],
[60,67,65,77,57,67,66,0,63,55],
[67,67,63,77,59,68,67,67,0,68],
[66,77,72,71,61,65,68,75,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,73,75,71,63,55,66,75,68],
[68,0,74,61,71,60,69,53,69,68],
[57,56,0,59,66,64,60,65,69,71],
[55,69,71,0,80,63,56,60,63,73],
[59,59,64,50,0,65,63,62,63,58],
[67,70,66,67,65,0,72,54,66,67],
[75,61,70,74,67,58,0,63,72,77],
[64,77,65,70,68,76,67,0,62,59],
[55,61,61,67,67,64,58,68,0,67],
[62,62,59,57,72,63,53,71,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,59,71,67,57,60,63,63,63],
[75,0,69,69,61,60,60,60,69,67],
[71,61,0,68,75,65,58,70,68,74],
[59,61,62,0,61,56,51,59,55,66],
[63,69,55,69,0,75,61,57,64,62],
[73,70,65,74,55,0,71,72,76,72],
[70,70,72,79,69,59,0,73,75,70],
[67,70,60,71,73,58,57,0,65,60],
[67,61,62,75,66,54,55,65,0,56],
[67,63,56,64,68,58,60,70,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,63,70,60,68,65,61,74,67],
[61,0,64,69,59,75,60,61,69,71],
[67,66,0,67,66,60,59,63,75,74],
[60,61,63,0,59,66,58,56,74,72],
[70,71,64,71,0,66,70,71,78,66],
[62,55,70,64,64,0,68,62,77,68],
[65,70,71,72,60,62,0,61,76,69],
[69,69,67,74,59,68,69,0,82,70],
[56,61,55,56,52,53,54,48,0,55],
[63,59,56,58,64,62,61,60,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,51,79,36,47,53,51,44,58],
[65,0,48,48,28,52,46,55,47,60],
[79,82,0,67,72,56,71,83,73,70],
[51,82,63,0,54,47,61,77,54,70],
[94,102,58,76,0,73,70,63,56,86],
[83,78,74,83,57,0,68,68,64,94],
[77,84,59,69,60,62,0,83,65,81],
[79,75,47,53,67,62,47,0,54,62],
[86,83,57,76,74,66,65,76,0,65],
[72,70,60,60,44,36,49,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,64,46,31,35,47,31,46,37],
[75,0,70,68,37,66,66,61,83,75],
[66,60,0,60,53,58,66,53,74,64],
[84,62,70,0,52,58,74,68,76,77],
[99,93,77,78,0,77,85,62,85,92],
[95,64,72,72,53,0,78,39,86,92],
[83,64,64,56,45,52,0,41,76,68],
[99,69,77,62,68,91,89,0,91,76],
[84,47,56,54,45,44,54,39,0,61],
[93,55,66,53,38,38,62,54,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,72,63,66,51,74,65,65,53],
[70,0,74,76,83,63,69,70,63,63],
[58,56,0,66,54,49,68,66,60,51],
[67,54,64,0,66,46,62,66,59,51],
[64,47,76,64,0,50,63,63,49,47],
[79,67,81,84,80,0,68,74,62,71],
[56,61,62,68,67,62,0,68,59,57],
[65,60,64,64,67,56,62,0,59,65],
[65,67,70,71,81,68,71,71,0,56],
[77,67,79,79,83,59,73,65,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,82,72,78,82,60,75,68,75],
[59,0,74,64,68,71,51,74,73,56],
[48,56,0,58,69,68,50,72,52,56],
[58,66,72,0,71,64,61,69,61,57],
[52,62,61,59,0,62,50,69,53,57],
[48,59,62,66,68,0,58,65,54,57],
[70,79,80,69,80,72,0,70,67,63],
[55,56,58,61,61,65,60,0,64,49],
[62,57,78,69,77,76,63,66,0,62],
[55,74,74,73,73,73,67,81,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,58,58,81,63,70,64,74,67],
[81,0,68,64,78,63,80,75,74,98],
[72,62,0,74,73,59,85,70,87,71],
[72,66,56,0,83,70,75,73,85,70],
[49,52,57,47,0,46,60,69,64,46],
[67,67,71,60,84,0,75,78,80,70],
[60,50,45,55,70,55,0,66,58,53],
[66,55,60,57,61,52,64,0,66,66],
[56,56,43,45,66,50,72,64,0,52],
[63,32,59,60,84,60,77,64,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,70,46,62,61,60,73,63],
[66,0,66,72,62,66,65,59,74,69],
[63,64,0,57,58,62,59,54,65,59],
[60,58,73,0,57,61,65,54,66,60],
[84,68,72,73,0,53,63,68,79,64],
[68,64,68,69,77,0,71,64,71,60],
[69,65,71,65,67,59,0,59,67,64],
[70,71,76,76,62,66,71,0,82,62],
[57,56,65,64,51,59,63,48,0,52],
[67,61,71,70,66,70,66,68,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,55,60,49,49,58,51,59,68],
[71,0,67,69,55,64,69,65,69,74],
[75,63,0,60,65,58,59,52,69,77],
[70,61,70,0,56,63,57,64,60,67],
[81,75,65,74,0,65,64,67,68,79],
[81,66,72,67,65,0,66,80,75,79],
[72,61,71,73,66,64,0,65,59,65],
[79,65,78,66,63,50,65,0,71,79],
[71,61,61,70,62,55,71,59,0,67],
[62,56,53,63,51,51,65,51,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,70,74,65,72,71,76,70,73],
[57,0,67,66,68,69,71,77,69,68],
[60,63,0,70,59,68,61,71,75,71],
[56,64,60,0,61,67,61,68,70,63],
[65,62,71,69,0,65,78,70,70,70],
[58,61,62,63,65,0,69,66,70,62],
[59,59,69,69,52,61,0,62,61,64],
[54,53,59,62,60,64,68,0,67,58],
[60,61,55,60,60,60,69,63,0,61],
[57,62,59,67,60,68,66,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,58,50,61,63,72,65,63],
[61,0,77,75,58,76,75,88,72,81],
[61,53,0,73,56,74,59,78,67,69],
[72,55,57,0,58,63,55,74,69,62],
[80,72,74,72,0,67,63,78,73,68],
[69,54,56,67,63,0,53,77,61,62],
[67,55,71,75,67,77,0,78,79,68],
[58,42,52,56,52,53,52,0,59,45],
[65,58,63,61,57,69,51,71,0,61],
[67,49,61,68,62,68,62,85,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,58,92,56,69,68,72,81,61],
[59,0,70,73,69,54,60,75,72,51],
[72,60,0,71,77,64,57,73,66,70],
[38,57,59,0,51,46,48,60,51,56],
[74,61,53,79,0,57,56,75,56,62],
[61,76,66,84,73,0,57,77,71,76],
[62,70,73,82,74,73,0,87,71,81],
[58,55,57,70,55,53,43,0,49,49],
[49,58,64,79,74,59,59,81,0,64],
[69,79,60,74,68,54,49,81,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,57,73,78,72,69,65,66,75],
[59,0,69,70,68,65,74,60,71,70],
[73,61,0,74,69,75,71,61,60,78],
[57,60,56,0,78,74,72,61,52,73],
[52,62,61,52,0,60,65,64,68,78],
[58,65,55,56,70,0,66,77,69,79],
[61,56,59,58,65,64,0,52,71,66],
[65,70,69,69,66,53,78,0,61,67],
[64,59,70,78,62,61,59,69,0,84],
[55,60,52,57,52,51,64,63,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,55,79,64,66,60,70,63,60],
[67,0,54,68,62,45,64,67,63,69],
[75,76,0,72,68,61,62,78,79,77],
[51,62,58,0,58,54,54,62,61,62],
[66,68,62,72,0,54,71,79,70,78],
[64,85,69,76,76,0,75,77,69,76],
[70,66,68,76,59,55,0,70,80,72],
[60,63,52,68,51,53,60,0,63,64],
[67,67,51,69,60,61,50,67,0,56],
[70,61,53,68,52,54,58,66,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,61,56,52,53,53,61,53,63],
[79,0,83,64,61,52,58,75,59,79],
[69,47,0,46,51,67,57,64,55,53],
[74,66,84,0,70,76,71,81,64,72],
[78,69,79,60,0,71,64,67,64,72],
[77,78,63,54,59,0,70,65,58,71],
[77,72,73,59,66,60,0,70,65,74],
[69,55,66,49,63,65,60,0,61,62],
[77,71,75,66,66,72,65,69,0,73],
[67,51,77,58,58,59,56,68,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,84,65,68,67,65,57,75,66],
[63,0,72,56,64,68,65,62,78,56],
[46,58,0,48,59,61,59,57,70,58],
[65,74,82,0,75,69,64,75,76,77],
[62,66,71,55,0,64,73,64,80,66],
[63,62,69,61,66,0,60,61,67,62],
[65,65,71,66,57,70,0,70,76,66],
[73,68,73,55,66,69,60,0,72,69],
[55,52,60,54,50,63,54,58,0,57],
[64,74,72,53,64,68,64,61,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,69,75,72,72,79,62,57],
[61,0,68,77,71,74,69,83,65,66],
[65,62,0,72,71,61,64,78,60,66],
[61,53,58,0,64,55,56,72,57,54],
[55,59,59,66,0,55,57,72,63,57],
[58,56,69,75,75,0,65,74,56,53],
[58,61,66,74,73,65,0,87,60,60],
[51,47,52,58,58,56,43,0,55,58],
[68,65,70,73,67,74,70,75,0,63],
[73,64,64,76,73,77,70,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,75,67,58,67,84,60,64,61],
[68,0,66,73,69,66,82,62,67,62],
[55,64,0,74,58,65,84,69,62,68],
[63,57,56,0,66,68,90,73,62,70],
[72,61,72,64,0,57,84,60,73,65],
[63,64,65,62,73,0,84,63,68,72],
[46,48,46,40,46,46,0,45,49,55],
[70,68,61,57,70,67,85,0,61,74],
[66,63,68,68,57,62,81,69,0,71],
[69,68,62,60,65,58,75,56,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,70,58,70,56,61,70,70],
[60,0,53,64,50,68,56,61,64,70],
[65,77,0,68,63,74,68,58,70,68],
[60,66,62,0,70,65,67,58,66,69],
[72,80,67,60,0,76,59,68,77,75],
[60,62,56,65,54,0,52,52,55,67],
[74,74,62,63,71,78,0,69,71,73],
[69,69,72,72,62,78,61,0,68,73],
[60,66,60,64,53,75,59,62,0,75],
[60,60,62,61,55,63,57,57,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,78,50,63,47,46,61,75,58],
[74,0,77,59,74,63,59,80,84,79],
[52,53,0,49,67,52,48,61,74,61],
[80,71,81,0,75,65,59,78,83,65],
[67,56,63,55,0,57,57,61,74,62],
[83,67,78,65,73,0,65,79,83,74],
[84,71,82,71,73,65,0,72,85,75],
[69,50,69,52,69,51,58,0,76,57],
[55,46,56,47,56,47,45,54,0,53],
[72,51,69,65,68,56,55,73,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,61,69,58,63,59,73,66],
[65,0,65,62,69,65,62,58,73,67],
[61,65,0,60,68,59,61,56,68,63],
[69,68,70,0,71,65,65,61,73,67],
[61,61,62,59,0,61,52,55,71,61],
[72,65,71,65,69,0,64,66,74,72],
[67,68,69,65,78,66,0,64,77,69],
[71,72,74,69,75,64,66,0,79,70],
[57,57,62,57,59,56,53,51,0,63],
[64,63,67,63,69,58,61,60,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,72,50,51,62,72,78,63,51],
[67,0,71,54,52,63,65,72,63,66],
[58,59,0,45,51,54,58,73,61,61],
[80,76,85,0,67,68,75,97,78,57],
[79,78,79,63,0,72,75,67,79,74],
[68,67,76,62,58,0,73,74,69,59],
[58,65,72,55,55,57,0,66,64,53],
[52,58,57,33,63,56,64,0,67,60],
[67,67,69,52,51,61,66,63,0,52],
[79,64,69,73,56,71,77,70,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,70,68,62,67,72,72,62,67],
[66,0,60,63,68,77,78,74,69,75],
[60,70,0,60,57,71,75,70,64,63],
[62,67,70,0,62,83,75,77,66,63],
[68,62,73,68,0,69,79,63,65,63],
[63,53,59,47,61,0,66,62,51,52],
[58,52,55,55,51,64,0,70,51,64],
[58,56,60,53,67,68,60,0,53,55],
[68,61,66,64,65,79,79,77,0,76],
[63,55,67,67,67,78,66,75,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,78,73,72,83,66,61,74,70],
[45,0,64,55,62,49,53,56,53,52],
[52,66,0,53,66,51,58,54,64,63],
[57,75,77,0,80,72,72,59,78,78],
[58,68,64,50,0,54,68,52,57,66],
[47,81,79,58,76,0,71,59,61,68],
[64,77,72,58,62,59,0,70,66,68],
[69,74,76,71,78,71,60,0,71,80],
[56,77,66,52,73,69,64,59,0,71],
[60,78,67,52,64,62,62,50,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,66,56,57,63,69,66,64,65],
[68,0,61,57,60,67,73,64,62,62],
[64,69,0,64,64,66,70,58,69,64],
[74,73,66,0,65,69,66,64,66,67],
[73,70,66,65,0,65,70,61,70,65],
[67,63,64,61,65,0,74,55,66,67],
[61,57,60,64,60,56,0,61,67,56],
[64,66,72,66,69,75,69,0,72,68],
[66,68,61,64,60,64,63,58,0,59],
[65,68,66,63,65,63,74,62,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,65,70,63,73,70,68,63],
[64,0,64,76,74,77,68,77,71,75],
[67,66,0,66,65,73,65,60,64,65],
[65,54,64,0,67,66,74,71,65,70],
[60,56,65,63,0,67,69,67,66,70],
[67,53,57,64,63,0,61,69,66,68],
[57,62,65,56,61,69,0,61,59,62],
[60,53,70,59,63,61,69,0,60,57],
[62,59,66,65,64,64,71,70,0,68],
[67,55,65,60,60,62,68,73,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,48,65,61,59,56,62,67,60],
[74,0,68,74,86,65,63,79,64,62],
[82,62,0,80,86,61,63,77,71,69],
[65,56,50,0,58,58,47,75,62,59],
[69,44,44,72,0,51,62,73,57,65],
[71,65,69,72,79,0,69,63,74,65],
[74,67,67,83,68,61,0,77,63,65],
[68,51,53,55,57,67,53,0,54,66],
[63,66,59,68,73,56,67,76,0,67],
[70,68,61,71,65,65,65,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,69,73,62,76,66,64,70,60],
[62,0,63,65,62,74,60,68,59,55],
[61,67,0,61,68,71,65,58,62,57],
[57,65,69,0,63,80,63,62,64,66],
[68,68,62,67,0,79,61,66,66,63],
[54,56,59,50,51,0,51,51,56,52],
[64,70,65,67,69,79,0,61,69,65],
[66,62,72,68,64,79,69,0,72,66],
[60,71,68,66,64,74,61,58,0,63],
[70,75,73,64,67,78,65,64,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,56,63,67,59,60,69,66,68],
[68,0,62,62,63,58,65,61,63,63],
[74,68,0,76,73,65,63,73,71,72],
[67,68,54,0,71,51,58,67,55,60],
[63,67,57,59,0,55,58,65,55,67],
[71,72,65,79,75,0,65,74,68,74],
[70,65,67,72,72,65,0,65,69,74],
[61,69,57,63,65,56,65,0,56,64],
[64,67,59,75,75,62,61,74,0,77],
[62,67,58,70,63,56,56,66,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,48,47,62,68,64,81,65,72],
[67,0,64,48,77,72,59,80,76,65],
[82,66,0,56,65,68,64,81,77,79],
[83,82,74,0,77,88,63,80,93,82],
[68,53,65,53,0,66,55,71,57,75],
[62,58,62,42,64,0,54,78,60,65],
[66,71,66,67,75,76,0,78,57,74],
[49,50,49,50,59,52,52,0,69,54],
[65,54,53,37,73,70,73,61,0,64],
[58,65,51,48,55,65,56,76,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,71,60,62,68,68,64,76],
[66,0,70,68,59,70,73,67,72,78],
[68,60,0,78,68,71,67,68,68,75],
[59,62,52,0,54,62,61,64,68,65],
[70,71,62,76,0,66,62,71,78,70],
[68,60,59,68,64,0,64,68,67,73],
[62,57,63,69,68,66,0,64,65,71],
[62,63,62,66,59,62,66,0,61,70],
[66,58,62,62,52,63,65,69,0,71],
[54,52,55,65,60,57,59,60,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,66,67,68,76,60,72,61,64],
[49,0,57,57,47,64,64,55,55,53],
[64,73,0,59,69,74,61,61,51,61],
[63,73,71,0,69,79,56,58,54,67],
[62,83,61,61,0,73,56,62,49,68],
[54,66,56,51,57,0,55,51,50,50],
[70,66,69,74,74,75,0,67,68,59],
[58,75,69,72,68,79,63,0,73,63],
[69,75,79,76,81,80,62,57,0,69],
[66,77,69,63,62,80,71,67,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,61,60,65,66,59,70,72,78],
[69,0,61,57,56,65,61,68,70,64],
[69,69,0,65,69,66,69,74,68,69],
[70,73,65,0,69,68,69,70,80,73],
[65,74,61,61,0,71,66,74,67,72],
[64,65,64,62,59,0,65,60,62,66],
[71,69,61,61,64,65,0,73,70,69],
[60,62,56,60,56,70,57,0,67,65],
[58,60,62,50,63,68,60,63,0,64],
[52,66,61,57,58,64,61,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,69,62,59,74,67,55,71,65],
[62,0,65,62,64,66,63,56,64,59],
[61,65,0,66,62,71,70,68,65,67],
[68,68,64,0,66,78,70,68,76,63],
[71,66,68,64,0,78,75,72,63,70],
[56,64,59,52,52,0,62,55,59,59],
[63,67,60,60,55,68,0,58,68,59],
[75,74,62,62,58,75,72,0,67,67],
[59,66,65,54,67,71,62,63,0,66],
[65,71,63,67,60,71,71,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,68,55,66,72,76,60,60],
[66,0,66,62,69,64,66,75,60,71],
[62,64,0,58,52,58,65,59,55,64],
[62,68,72,0,62,66,70,65,60,70],
[75,61,78,68,0,74,74,79,69,76],
[64,66,72,64,56,0,70,67,63,69],
[58,64,65,60,56,60,0,61,60,64],
[54,55,71,65,51,63,69,0,56,60],
[70,70,75,70,61,67,70,74,0,68],
[70,59,66,60,54,61,66,70,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,59,62,69,54,60,63,66],
[65,0,68,55,65,70,58,69,68,67],
[62,62,0,62,69,64,58,67,70,68],
[71,75,68,0,65,77,66,75,70,72],
[68,65,61,65,0,62,56,69,60,66],
[61,60,66,53,68,0,58,62,67,64],
[76,72,72,64,74,72,0,77,69,79],
[70,61,63,55,61,68,53,0,62,60],
[67,62,60,60,70,63,61,68,0,73],
[64,63,62,58,64,66,51,70,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,61,70,75,67,66,70,62,64],
[67,0,64,69,63,66,62,69,69,59],
[69,66,0,74,74,61,66,71,69,65],
[60,61,56,0,63,56,54,70,59,55],
[55,67,56,67,0,59,65,66,56,61],
[63,64,69,74,71,0,65,69,74,65],
[64,68,64,76,65,65,0,72,65,65],
[60,61,59,60,64,61,58,0,64,52],
[68,61,61,71,74,56,65,66,0,58],
[66,71,65,75,69,65,65,78,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,77,65,64,66,69,67,62,63],
[60,0,77,63,68,65,67,70,71,71],
[53,53,0,58,50,55,56,61,55,58],
[65,67,72,0,56,64,68,77,60,68],
[66,62,80,74,0,68,66,75,64,76],
[64,65,75,66,62,0,68,71,65,68],
[61,63,74,62,64,62,0,72,59,59],
[63,60,69,53,55,59,58,0,55,59],
[68,59,75,70,66,65,71,75,0,68],
[67,59,72,62,54,62,71,71,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,67,57,49,72,56,67,71,49],
[59,0,47,59,78,81,79,90,89,59],
[63,83,0,50,81,64,80,80,91,71],
[73,71,80,0,59,53,58,79,59,71],
[81,52,49,71,0,60,40,68,60,70],
[58,49,66,77,70,0,36,76,37,58],
[74,51,50,72,90,94,0,79,73,71],
[63,40,50,51,62,54,51,0,54,51],
[59,41,39,71,70,93,57,76,0,70],
[81,71,59,59,60,72,59,79,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,65,81,79,80,80,53,65,66],
[63,0,63,80,53,77,65,65,38,52],
[65,67,0,81,68,79,79,80,68,68],
[49,50,49,0,39,62,50,62,37,37],
[51,77,62,91,0,64,64,79,37,40],
[50,53,51,68,66,0,78,64,64,78],
[50,65,51,80,66,52,0,64,52,53],
[77,65,50,68,51,66,66,0,12,52],
[65,92,62,93,93,66,78,118,0,81],
[64,78,62,93,90,52,77,78,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,64,65,61,66,69,61,63,68],
[57,0,58,71,49,62,60,63,53,61],
[66,72,0,56,54,61,68,66,60,69],
[65,59,74,0,63,64,74,62,60,68],
[69,81,76,67,0,65,73,69,65,67],
[64,68,69,66,65,0,74,69,62,61],
[61,70,62,56,57,56,0,62,61,70],
[69,67,64,68,61,61,68,0,65,61],
[67,77,70,70,65,68,69,65,0,65],
[62,69,61,62,63,69,60,69,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,76,82,57,71,76,88,73,56],
[65,0,62,68,52,48,75,76,70,54],
[54,68,0,78,65,66,68,90,66,65],
[48,62,52,0,63,51,67,78,60,50],
[73,78,65,67,0,58,75,95,66,70],
[59,82,64,79,72,0,85,90,73,51],
[54,55,62,63,55,45,0,73,64,57],
[42,54,40,52,35,40,57,0,57,49],
[57,60,64,70,64,57,66,73,0,62],
[74,76,65,80,60,79,73,81,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,67,70,71,70,71,60,69],
[63,0,73,65,61,75,81,65,72,70],
[60,57,0,61,55,68,75,58,57,62],
[63,65,69,0,70,77,79,71,67,65],
[60,69,75,60,0,69,74,65,63,67],
[59,55,62,53,61,0,80,67,62,61],
[60,49,55,51,56,50,0,50,48,52],
[59,65,72,59,65,63,80,0,68,63],
[70,58,73,63,67,68,82,62,0,65],
[61,60,68,65,63,69,78,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,61,73,62,77,76,64,64],
[62,0,66,65,62,59,66,63,65,58],
[60,64,0,59,71,50,69,70,65,55],
[69,65,71,0,69,65,69,81,75,60],
[57,68,59,61,0,56,59,65,62,54],
[68,71,80,65,74,0,74,75,66,68],
[53,64,61,61,71,56,0,62,60,44],
[54,67,60,49,65,55,68,0,65,51],
[66,65,65,55,68,64,70,65,0,55],
[66,72,75,70,76,62,86,79,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,57,73,69,65,66,55,61,66],
[56,0,58,64,70,66,55,64,56,63],
[73,72,0,68,68,74,67,65,70,66],
[57,66,62,0,68,53,48,53,66,58],
[61,60,62,62,0,61,53,61,58,59],
[65,64,56,77,69,0,57,69,68,67],
[64,75,63,82,77,73,0,68,62,74],
[75,66,65,77,69,61,62,0,76,59],
[69,74,60,64,72,62,68,54,0,58],
[64,67,64,72,71,63,56,71,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,63,57,53,69,62,48,59,62],
[77,0,66,70,64,72,64,53,68,71],
[67,64,0,63,67,83,64,61,65,74],
[73,60,67,0,54,66,62,55,61,68],
[77,66,63,76,0,73,66,66,68,72],
[61,58,47,64,57,0,63,60,55,64],
[68,66,66,68,64,67,0,51,66,72],
[82,77,69,75,64,70,79,0,63,74],
[71,62,65,69,62,75,64,67,0,70],
[68,59,56,62,58,66,58,56,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,46,51,65,29,37,64,53,73],
[82,0,85,76,67,61,65,65,58,71],
[84,45,0,62,79,59,34,56,60,59],
[79,54,68,0,64,38,72,52,59,68],
[65,63,51,66,0,43,60,43,67,67],
[101,69,71,92,87,0,63,59,89,76],
[93,65,96,58,70,67,0,54,79,75],
[66,65,74,78,87,71,76,0,72,81],
[77,72,70,71,63,41,51,58,0,79],
[57,59,71,62,63,54,55,49,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,77,72,76,58,58,68,67,78],
[66,0,70,62,59,65,59,67,58,56],
[53,60,0,54,69,48,49,63,53,60],
[58,68,76,0,62,55,55,69,55,64],
[54,71,61,68,0,57,55,68,53,58],
[72,65,82,75,73,0,65,89,67,71],
[72,71,81,75,75,65,0,69,59,70],
[62,63,67,61,62,41,61,0,61,67],
[63,72,77,75,77,63,71,69,0,60],
[52,74,70,66,72,59,60,63,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,67,43,60,49,70,64,54,72],
[70,0,70,52,67,60,73,73,60,74],
[63,60,0,52,54,57,71,67,54,70],
[87,78,78,0,61,69,69,68,70,83],
[70,63,76,69,0,63,69,70,69,73],
[81,70,73,61,67,0,74,61,68,82],
[60,57,59,61,61,56,0,73,60,67],
[66,57,63,62,60,69,57,0,58,64],
[76,70,76,60,61,62,70,72,0,73],
[58,56,60,47,57,48,63,66,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,64,72,70,60,66,66,62],
[60,0,70,65,73,62,60,70,63,64],
[64,60,0,69,62,68,61,68,63,67],
[66,65,61,0,71,75,64,76,62,63],
[58,57,68,59,0,71,62,68,57,59],
[60,68,62,55,59,0,58,66,51,62],
[70,70,69,66,68,72,0,69,61,66],
[64,60,62,54,62,64,61,0,56,58],
[64,67,67,68,73,79,69,74,0,60],
[68,66,63,67,71,68,64,72,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,62,65,68,61,71,60,70,63],
[62,0,58,49,65,64,52,55,55,59],
[68,72,0,65,68,73,65,59,67,59],
[65,81,65,0,72,68,57,66,74,66],
[62,65,62,58,0,63,60,65,65,66],
[69,66,57,62,67,0,64,57,68,53],
[59,78,65,73,70,66,0,64,68,59],
[70,75,71,64,65,73,66,0,66,69],
[60,75,63,56,65,62,62,64,0,59],
[67,71,71,64,64,77,71,61,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,68,61,66,73,75,62,61,65],
[49,0,77,63,77,71,47,51,60,52],
[62,53,0,73,53,73,63,59,68,52],
[69,67,57,0,55,77,63,67,72,71],
[64,53,77,75,0,63,66,62,66,63],
[57,59,57,53,67,0,56,59,57,63],
[55,83,67,67,64,74,0,65,62,64],
[68,79,71,63,68,71,65,0,63,77],
[69,70,62,58,64,73,68,67,0,73],
[65,78,78,59,67,67,66,53,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,73,66,64,85,87,71,73,64],
[57,0,68,63,55,73,71,74,77,44],
[57,62,0,72,70,79,73,61,72,61],
[64,67,58,0,68,65,57,56,71,59],
[66,75,60,62,0,74,75,70,61,55],
[45,57,51,65,56,0,59,66,51,49],
[43,59,57,73,55,71,0,70,59,54],
[59,56,69,74,60,64,60,0,66,56],
[57,53,58,59,69,79,71,64,0,66],
[66,86,69,71,75,81,76,74,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,67,85,90,58,90,76,81,75],
[29,0,58,73,51,44,81,51,66,41],
[63,72,0,72,84,52,75,62,60,57],
[45,57,58,0,57,29,65,50,43,35],
[40,79,46,73,0,41,58,52,53,36],
[72,86,78,101,89,0,74,55,71,72],
[40,49,55,65,72,56,0,49,50,48],
[54,79,68,80,78,75,81,0,62,49],
[49,64,70,87,77,59,80,68,0,47],
[55,89,73,95,94,58,82,81,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,75,62,76,66,68,72,81,69],
[64,0,76,74,69,67,74,76,79,73],
[55,54,0,68,56,54,67,62,72,59],
[68,56,62,0,63,57,56,80,69,63],
[54,61,74,67,0,68,81,63,81,74],
[64,63,76,73,62,0,66,56,90,64],
[62,56,63,74,49,64,0,79,81,77],
[58,54,68,50,67,74,51,0,71,63],
[49,51,58,61,49,40,49,59,0,48],
[61,57,71,67,56,66,53,67,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,72,55,54,106,71,69,72,79],
[39,0,61,24,59,72,37,12,61,71],
[58,69,0,34,44,62,73,46,27,69],
[75,106,96,0,83,118,83,58,86,118],
[76,71,86,47,0,84,74,71,86,86],
[24,58,68,12,46,0,46,24,34,56],
[59,93,57,47,56,84,0,71,59,91],
[61,118,84,72,59,106,59,0,96,106],
[58,69,103,44,44,96,71,34,0,79],
[51,59,61,12,44,74,39,24,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,58,28,28,58,43,57,57,57],
[116,0,87,58,86,87,86,87,115,87],
[72,43,0,58,42,43,57,57,86,43],
[102,72,72,0,71,87,86,86,86,58],
[102,44,88,59,0,87,72,73,72,72],
[72,43,87,43,43,0,86,57,87,57],
[87,44,73,44,58,44,0,43,71,58],
[73,43,73,44,57,73,87,0,58,72],
[73,15,44,44,58,43,59,72,0,29],
[73,43,87,72,58,73,72,58,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,72,74,65,66,70,72,77,70],
[58,0,72,64,49,64,64,68,69,64],
[58,58,0,61,51,66,55,56,67,47],
[56,66,69,0,51,69,60,59,67,62],
[65,81,79,79,0,73,67,69,78,61],
[64,66,64,61,57,0,52,65,72,63],
[60,66,75,70,63,78,0,68,76,68],
[58,62,74,71,61,65,62,0,77,56],
[53,61,63,63,52,58,54,53,0,55],
[60,66,83,68,69,67,62,74,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,70,68,61,58,69,67,61,69],
[60,0,69,67,64,56,53,75,61,54],
[60,61,0,57,63,66,67,60,67,70],
[62,63,73,0,55,59,59,62,63,61],
[69,66,67,75,0,70,63,70,65,64],
[72,74,64,71,60,0,61,64,77,67],
[61,77,63,71,67,69,0,68,71,78],
[63,55,70,68,60,66,62,0,65,58],
[69,69,63,67,65,53,59,65,0,62],
[61,76,60,69,66,63,52,72,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,71,62,63,69,72,69,71],
[63,0,57,65,63,61,59,66,62,51],
[61,73,0,71,56,63,64,68,72,74],
[59,65,59,0,57,61,58,61,56,51],
[68,67,74,73,0,70,70,77,62,71],
[67,69,67,69,60,0,61,70,63,72],
[61,71,66,72,60,69,0,73,66,64],
[58,64,62,69,53,60,57,0,60,63],
[61,68,58,74,68,67,64,70,0,81],
[59,79,56,79,59,58,66,67,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,70,75,64,55,61,64,61,69],
[59,0,72,61,66,63,51,62,66,65],
[60,58,0,69,59,53,49,58,66,59],
[55,69,61,0,67,55,61,56,73,59],
[66,64,71,63,0,70,53,64,62,62],
[75,67,77,75,60,0,67,73,71,72],
[69,79,81,69,77,63,0,71,76,71],
[66,68,72,74,66,57,59,0,76,68],
[69,64,64,57,68,59,54,54,0,60],
[61,65,71,71,68,58,59,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,57,64,64,71,65,72,74,73],
[66,0,48,59,64,67,70,64,72,77],
[73,82,0,59,64,70,68,73,71,79],
[66,71,71,0,66,75,68,61,69,73],
[66,66,66,64,0,77,71,56,70,68],
[59,63,60,55,53,0,66,62,67,59],
[65,60,62,62,59,64,0,61,72,60],
[58,66,57,69,74,68,69,0,82,77],
[56,58,59,61,60,63,58,48,0,72],
[57,53,51,57,62,71,70,53,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,67,69,81,64,73,78,76,71],
[60,0,62,59,70,65,75,78,72,58],
[63,68,0,67,75,59,74,77,72,69],
[61,71,63,0,70,67,86,73,68,65],
[49,60,55,60,0,51,65,58,59,57],
[66,65,71,63,79,0,80,68,77,58],
[57,55,56,44,65,50,0,56,56,54],
[52,52,53,57,72,62,74,0,68,58],
[54,58,58,62,71,53,74,62,0,63],
[59,72,61,65,73,72,76,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,52,55,64,69,52,63,74,67],
[56,0,62,74,69,66,72,66,71,65],
[78,68,0,60,73,66,62,71,75,72],
[75,56,70,0,75,76,71,69,80,74],
[66,61,57,55,0,64,56,57,77,62],
[61,64,64,54,66,0,57,62,64,73],
[78,58,68,59,74,73,0,79,76,64],
[67,64,59,61,73,68,51,0,78,70],
[56,59,55,50,53,66,54,52,0,45],
[63,65,58,56,68,57,66,60,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,65,29,58,58,54,68,68,47],
[53,0,66,27,58,27,36,57,47,36],
[65,64,0,35,57,54,62,65,58,65],
[101,103,95,0,77,49,84,77,77,76],
[72,72,73,53,0,73,53,74,57,63],
[72,103,76,81,57,0,75,75,57,76],
[76,94,68,46,77,55,0,75,49,85],
[62,73,65,53,56,55,55,0,38,66],
[62,83,72,53,73,73,81,92,0,74],
[83,94,65,54,67,54,45,64,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,83,75,76,75,59,67,80,71],
[44,0,56,42,63,56,64,48,48,50],
[47,74,0,64,77,73,73,63,64,68],
[55,88,66,0,75,82,64,67,69,64],
[54,67,53,55,0,68,49,55,52,49],
[55,74,57,48,62,0,54,63,65,68],
[71,66,57,66,81,76,0,67,69,80],
[63,82,67,63,75,67,63,0,58,71],
[50,82,66,61,78,65,61,72,0,66],
[59,80,62,66,81,62,50,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,67,77,50,66,53,76,51,41],
[79,0,55,91,91,79,79,76,92,68],
[63,75,0,76,75,77,50,76,50,26],
[53,39,54,0,76,66,79,89,77,67],
[80,39,55,54,0,53,67,38,41,55],
[64,51,53,64,77,0,51,63,51,54],
[77,51,80,51,63,79,0,76,37,67],
[54,54,54,41,92,67,54,0,67,67],
[79,38,80,53,89,79,93,63,0,93],
[89,62,104,63,75,76,63,63,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,59,73,80,103,97,73,72,57],
[73,0,66,73,80,85,102,63,76,67],
[71,64,0,79,64,97,104,72,79,71],
[57,57,51,0,46,78,82,54,52,52],
[50,50,66,84,0,79,85,38,58,55],
[27,45,33,52,51,0,52,40,48,33],
[33,28,26,48,45,78,0,41,48,49],
[57,67,58,76,92,90,89,0,72,60],
[58,54,51,78,72,82,82,58,0,67],
[73,63,59,78,75,97,81,70,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,62,68,60,67,63,66,59,70],
[50,0,48,51,49,41,43,49,46,55],
[68,82,0,64,56,58,65,64,64,72],
[62,79,66,0,56,59,71,66,60,59],
[70,81,74,74,0,64,71,59,60,73],
[63,89,72,71,66,0,67,58,61,83],
[67,87,65,59,59,63,0,57,64,71],
[64,81,66,64,71,72,73,0,68,81],
[71,84,66,70,70,69,66,62,0,90],
[60,75,58,71,57,47,59,49,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,63,65,68,59,66,65,61],
[66,0,65,70,69,63,62,62,65,61],
[61,65,0,65,69,72,58,70,58,61],
[67,60,65,0,63,63,65,69,59,58],
[65,61,61,67,0,64,58,65,56,57],
[62,67,58,67,66,0,57,71,51,62],
[71,68,72,65,72,73,0,64,65,72],
[64,68,60,61,65,59,66,0,61,58],
[65,65,72,71,74,79,65,69,0,65],
[69,69,69,72,73,68,58,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,69,80,72,66,71,69,64,75],
[52,0,66,66,66,52,63,61,56,64],
[61,64,0,80,64,54,64,63,53,70],
[50,64,50,0,62,49,62,56,50,65],
[58,64,66,68,0,60,73,69,62,60],
[64,78,76,81,70,0,74,69,68,65],
[59,67,66,68,57,56,0,62,58,70],
[61,69,67,74,61,61,68,0,60,63],
[66,74,77,80,68,62,72,70,0,72],
[55,66,60,65,70,65,60,67,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,64,83,68,68,57,76,77],
[68,0,62,74,85,66,71,63,78,80],
[67,68,0,59,82,62,69,67,66,89],
[66,56,71,0,91,68,66,69,76,81],
[47,45,48,39,0,59,51,49,71,64],
[62,64,68,62,71,0,67,69,70,64],
[62,59,61,64,79,63,0,56,76,77],
[73,67,63,61,81,61,74,0,69,75],
[54,52,64,54,59,60,54,61,0,64],
[53,50,41,49,66,66,53,55,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,61,73,62,71,66,73,68,68],
[61,0,53,56,60,65,54,69,54,59],
[69,77,0,67,64,73,80,69,72,59],
[57,74,63,0,72,75,73,71,70,67],
[68,70,66,58,0,69,68,70,67,78],
[59,65,57,55,61,0,56,62,62,63],
[64,76,50,57,62,74,0,58,62,54],
[57,61,61,59,60,68,72,0,61,61],
[62,76,58,60,63,68,68,69,0,61],
[62,71,71,63,52,67,76,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,72,59,43,67,72,79,62,50],
[69,0,66,59,66,74,65,84,83,73],
[58,64,0,49,65,80,59,75,68,53],
[71,71,81,0,63,77,76,80,67,63],
[87,64,65,67,0,69,68,88,68,57],
[63,56,50,53,61,0,66,77,63,64],
[58,65,71,54,62,64,0,66,72,55],
[51,46,55,50,42,53,64,0,62,65],
[68,47,62,63,62,67,58,68,0,60],
[80,57,77,67,73,66,75,65,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,53,68,29,53,41,39,42,26],
[80,0,79,78,68,79,79,65,54,80],
[77,51,0,51,55,54,67,77,52,53],
[62,52,79,0,52,39,79,64,52,50],
[101,62,75,78,0,79,64,49,78,37],
[77,51,76,91,51,0,76,62,79,37],
[89,51,63,51,66,54,0,50,64,65],
[91,65,53,66,81,68,80,0,54,40],
[88,76,78,78,52,51,66,76,0,64],
[104,50,77,80,93,93,65,90,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,59,71,52,55,57,66,52,66],
[74,0,63,64,68,64,58,68,72,68],
[71,67,0,75,59,60,62,74,61,77],
[59,66,55,0,60,60,66,72,59,67],
[78,62,71,70,0,67,69,68,65,67],
[75,66,70,70,63,0,57,72,57,73],
[73,72,68,64,61,73,0,78,63,72],
[64,62,56,58,62,58,52,0,62,62],
[78,58,69,71,65,73,67,68,0,75],
[64,62,53,63,63,57,58,68,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,58,75,78,69,61,69,63,70],
[67,0,62,69,59,57,64,69,67,66],
[72,68,0,59,67,61,54,56,64,72],
[55,61,71,0,74,57,64,64,67,74],
[52,71,63,56,0,69,68,64,66,75],
[61,73,69,73,61,0,60,70,59,86],
[69,66,76,66,62,70,0,62,55,75],
[61,61,74,66,66,60,68,0,48,75],
[67,63,66,63,64,71,75,82,0,63],
[60,64,58,56,55,44,55,55,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,56,57,59,52,55,50,57,56],
[80,0,63,69,70,61,59,60,71,68],
[74,67,0,66,69,63,66,67,69,67],
[73,61,64,0,65,63,61,60,73,66],
[71,60,61,65,0,57,61,62,62,63],
[78,69,67,67,73,0,69,70,73,62],
[75,71,64,69,69,61,0,68,68,74],
[80,70,63,70,68,60,62,0,67,61],
[73,59,61,57,68,57,62,63,0,59],
[74,62,63,64,67,68,56,69,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,66,64,65,64,44,43,44,66],
[87,0,66,108,108,64,87,64,44,66],
[64,64,0,107,86,107,64,64,42,66],
[66,22,23,0,86,65,66,43,23,66],
[65,22,44,44,0,65,43,43,22,66],
[66,66,23,65,65,0,65,87,44,66],
[86,43,66,64,87,65,0,64,44,66],
[87,66,66,87,87,43,66,0,66,66],
[86,86,88,107,108,86,86,64,0,66],
[64,64,64,64,64,64,64,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,87,57,74,70,58,61,89,67],
[62,0,94,75,64,56,65,65,74,75],
[43,36,0,39,59,43,44,40,68,53],
[73,55,91,0,61,68,60,63,76,61],
[56,66,71,69,0,57,65,64,78,71],
[60,74,87,62,73,0,56,66,92,69],
[72,65,86,70,65,74,0,63,75,74],
[69,65,90,67,66,64,67,0,88,77],
[41,56,62,54,52,38,55,42,0,58],
[63,55,77,69,59,61,56,53,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,62,62,66,77,71,82,65,72],
[55,0,49,57,58,59,54,70,57,60],
[68,81,0,68,70,66,64,74,60,66],
[68,73,62,0,75,57,74,73,62,67],
[64,72,60,55,0,56,61,67,55,65],
[53,71,64,73,74,0,67,72,61,70],
[59,76,66,56,69,63,0,77,57,65],
[48,60,56,57,63,58,53,0,48,56],
[65,73,70,68,75,69,73,82,0,70],
[58,70,64,63,65,60,65,74,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,72,63,69,74,41,61,52,63],
[47,0,77,90,77,91,79,80,88,71],
[58,53,0,101,78,84,41,71,59,72],
[67,40,29,0,59,60,30,71,67,70],
[61,53,52,71,0,64,32,82,50,73],
[56,39,46,70,66,0,19,90,49,78],
[89,51,89,100,98,111,0,80,80,81],
[69,50,59,59,48,40,50,0,60,69],
[78,42,71,63,80,81,50,70,0,71],
[67,59,58,60,57,52,49,61,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,50,53,56,57,54,65,61,62],
[70,0,55,58,57,60,67,65,63,64],
[80,75,0,68,67,71,74,72,57,72],
[77,72,62,0,69,58,74,75,70,71],
[74,73,63,61,0,63,72,68,65,65],
[73,70,59,72,67,0,72,79,67,69],
[76,63,56,56,58,58,0,76,61,66],
[65,65,58,55,62,51,54,0,58,64],
[69,67,73,60,65,63,69,72,0,66],
[68,66,58,59,65,61,64,66,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,65,33,65,65,32,67,65],
[65,0,34,34,65,65,66,34,34,65],
[64,96,0,96,64,31,65,33,64,31],
[65,96,34,0,65,65,99,34,67,65],
[97,65,66,65,0,97,65,66,99,65],
[65,65,99,65,33,0,65,65,99,67],
[65,64,65,31,65,65,0,65,65,65],
[98,96,97,96,64,65,65,0,98,65],
[63,96,66,63,31,31,65,32,0,31],
[65,65,99,65,65,63,65,65,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,62,77,67,63,64,70,80,67],
[55,0,75,75,54,50,59,62,79,68],
[68,55,0,77,51,69,62,68,63,70],
[53,55,53,0,55,58,50,58,71,72],
[63,76,79,75,0,59,69,73,76,73],
[67,80,61,72,71,0,66,67,71,65],
[66,71,68,80,61,64,0,70,74,70],
[60,68,62,72,57,63,60,0,66,75],
[50,51,67,59,54,59,56,64,0,68],
[63,62,60,58,57,65,60,55,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,59,65,52,68,54,70,63,64],
[78,0,68,69,66,72,71,71,65,71],
[71,62,0,61,71,70,63,80,77,63],
[65,61,69,0,67,65,64,65,68,62],
[78,64,59,63,0,64,65,65,84,66],
[62,58,60,65,66,0,73,67,74,64],
[76,59,67,66,65,57,0,71,74,63],
[60,59,50,65,65,63,59,0,70,64],
[67,65,53,62,46,56,56,60,0,62],
[66,59,67,68,64,66,67,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,68,59,70,78,64,61,66,62],
[77,0,73,59,62,73,68,68,69,70],
[62,57,0,59,62,67,68,67,76,68],
[71,71,71,0,63,72,65,66,71,70],
[60,68,68,67,0,72,67,74,65,71],
[52,57,63,58,58,0,60,66,58,60],
[66,62,62,65,63,70,0,69,65,69],
[69,62,63,64,56,64,61,0,67,70],
[64,61,54,59,65,72,65,63,0,67],
[68,60,62,60,59,70,61,60,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,70,61,66,63,66,65,70,66],
[58,0,56,68,72,63,62,64,57,64],
[60,74,0,64,68,62,70,70,72,62],
[69,62,66,0,71,69,79,68,71,65],
[64,58,62,59,0,63,67,64,70,67],
[67,67,68,61,67,0,72,69,66,69],
[64,68,60,51,63,58,0,58,61,64],
[65,66,60,62,66,61,72,0,68,63],
[60,73,58,59,60,64,69,62,0,67],
[64,66,68,65,63,61,66,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,73,65,71,79,69,67,72,62],
[59,0,59,58,63,74,58,54,61,51],
[57,71,0,65,59,72,73,64,66,62],
[65,72,65,0,60,66,70,66,71,66],
[59,67,71,70,0,73,83,76,71,65],
[51,56,58,64,57,0,65,64,54,61],
[61,72,57,60,47,65,0,59,59,56],
[63,76,66,64,54,66,71,0,69,56],
[58,69,64,59,59,76,71,61,0,58],
[68,79,68,64,65,69,74,74,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,62,62,68,67,60,82,70,63],
[71,0,70,82,69,72,64,85,70,78],
[68,60,0,78,76,64,66,72,67,76],
[68,48,52,0,51,58,57,67,52,60],
[62,61,54,79,0,60,57,76,57,61],
[63,58,66,72,70,0,62,78,62,69],
[70,66,64,73,73,68,0,80,70,66],
[48,45,58,63,54,52,50,0,44,54],
[60,60,63,78,73,68,60,86,0,69],
[67,52,54,70,69,61,64,76,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,65,76,57,74,66,58,66,57],
[76,0,74,63,63,74,67,71,80,68],
[65,56,0,68,48,55,50,67,62,48],
[54,67,62,0,50,68,66,55,66,57],
[73,67,82,80,0,77,62,69,65,63],
[56,56,75,62,53,0,58,65,76,67],
[64,63,80,64,68,72,0,61,81,65],
[72,59,63,75,61,65,69,0,71,66],
[64,50,68,64,65,54,49,59,0,55],
[73,62,82,73,67,63,65,64,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,67,54,79,66,60,80,60,67],
[67,0,58,60,65,67,65,83,74,66],
[63,72,0,65,76,75,62,62,72,70],
[76,70,65,0,74,78,65,73,61,73],
[51,65,54,56,0,69,54,66,57,57],
[64,63,55,52,61,0,52,64,52,54],
[70,65,68,65,76,78,0,79,63,68],
[50,47,68,57,64,66,51,0,63,56],
[70,56,58,69,73,78,67,67,0,62],
[63,64,60,57,73,76,62,74,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,67,53,73,74,80,88,67,63],
[52,0,60,53,59,56,66,66,52,61],
[63,70,0,59,64,61,76,72,58,65],
[77,77,71,0,68,82,82,84,64,71],
[57,71,66,62,0,70,73,63,65,65],
[56,74,69,48,60,0,85,74,54,64],
[50,64,54,48,57,45,0,54,51,57],
[42,64,58,46,67,56,76,0,55,63],
[63,78,72,66,65,76,79,75,0,67],
[67,69,65,59,65,66,73,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,58,67,64,60,72,64,79,72],
[67,0,65,67,74,69,65,64,76,71],
[72,65,0,57,69,67,79,68,71,76],
[63,63,73,0,72,62,65,64,75,70],
[66,56,61,58,0,56,72,61,77,75],
[70,61,63,68,74,0,75,70,79,72],
[58,65,51,65,58,55,0,62,74,72],
[66,66,62,66,69,60,68,0,74,69],
[51,54,59,55,53,51,56,56,0,66],
[58,59,54,60,55,58,58,61,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,64,70,70,77,73,69,73,63],
[55,0,62,62,63,62,72,66,61,67],
[66,68,0,74,77,71,76,81,67,63],
[60,68,56,0,61,66,60,67,70,52],
[60,67,53,69,0,68,71,84,72,55],
[53,68,59,64,62,0,66,72,60,59],
[57,58,54,70,59,64,0,70,63,60],
[61,64,49,63,46,58,60,0,69,53],
[57,69,63,60,58,70,67,61,0,60],
[67,63,67,78,75,71,70,77,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,64,54,63,48,80,69,61,68],
[68,0,66,53,75,58,72,62,54,61],
[66,64,0,53,68,53,70,59,55,52],
[76,77,77,0,81,60,86,72,69,81],
[67,55,62,49,0,49,70,60,45,56],
[82,72,77,70,81,0,82,71,62,66],
[50,58,60,44,60,48,0,56,48,52],
[61,68,71,58,70,59,74,0,61,67],
[69,76,75,61,85,68,82,69,0,67],
[62,69,78,49,74,64,78,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,83,80,74,85,82,75,82],
[62,0,55,63,67,71,63,52,62,62],
[72,75,0,71,67,79,64,57,68,67],
[47,67,59,0,54,42,55,44,58,67],
[50,63,63,76,0,62,63,41,68,68],
[56,59,51,88,68,0,66,44,54,61],
[45,67,66,75,67,64,0,66,49,74],
[48,78,73,86,89,86,64,0,81,75],
[55,68,62,72,62,76,81,49,0,75],
[48,68,63,63,62,69,56,55,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,63,72,78,70,76,76,68],
[63,0,65,62,66,76,77,84,78,81],
[63,65,0,66,66,77,80,80,82,78],
[67,68,64,0,65,69,68,72,89,70],
[58,64,64,65,0,60,62,67,72,62],
[52,54,53,61,70,0,65,67,74,73],
[60,53,50,62,68,65,0,75,76,64],
[54,46,50,58,63,63,55,0,67,66],
[54,52,48,41,58,56,54,63,0,59],
[62,49,52,60,68,57,66,64,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,71,76,67,79,72,63,66,63],
[56,0,67,68,57,71,64,55,62,54],
[59,63,0,78,66,64,65,56,65,64],
[54,62,52,0,57,65,57,60,54,55],
[63,73,64,73,0,70,67,70,67,73],
[51,59,66,65,60,0,61,52,58,63],
[58,66,65,73,63,69,0,62,65,66],
[67,75,74,70,60,78,68,0,65,71],
[64,68,65,76,63,72,65,65,0,64],
[67,76,66,75,57,67,64,59,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,61,78,71,70,70,60,71,62],
[57,0,78,78,77,61,53,72,81,53],
[69,52,0,71,58,69,48,64,65,57],
[52,52,59,0,48,53,38,40,56,45],
[59,53,72,82,0,62,66,70,68,59],
[60,69,61,77,68,0,53,65,56,51],
[60,77,82,92,64,77,0,65,65,75],
[70,58,66,90,60,65,65,0,65,72],
[59,49,65,74,62,74,65,65,0,59],
[68,77,73,85,71,79,55,58,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,69,63,56,58,69,69,70,68],
[68,0,70,68,66,57,70,67,71,64],
[61,60,0,63,60,59,57,64,62,55],
[67,62,67,0,56,66,69,72,73,66],
[74,64,70,74,0,68,77,73,77,70],
[72,73,71,64,62,0,68,66,67,64],
[61,60,73,61,53,62,0,62,64,50],
[61,63,66,58,57,64,68,0,64,62],
[60,59,68,57,53,63,66,66,0,61],
[62,66,75,64,60,66,80,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,65,55,56,63,69,69,67,70],
[73,0,74,67,67,72,70,67,77,59],
[65,56,0,64,52,55,51,59,62,52],
[75,63,66,0,55,58,66,63,67,65],
[74,63,78,75,0,70,63,74,65,66],
[67,58,75,72,60,0,58,73,58,57],
[61,60,79,64,67,72,0,66,56,64],
[61,63,71,67,56,57,64,0,56,67],
[63,53,68,63,65,72,74,74,0,70],
[60,71,78,65,64,73,66,63,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,68,69,68,73,70,69,71,64],
[64,0,67,61,54,68,62,60,63,61],
[62,63,0,65,58,59,60,65,57,60],
[61,69,65,0,71,71,69,77,65,67],
[62,76,72,59,0,71,65,57,68,71],
[57,62,71,59,59,0,61,65,63,57],
[60,68,70,61,65,69,0,61,54,66],
[61,70,65,53,73,65,69,0,63,66],
[59,67,73,65,62,67,76,67,0,60],
[66,69,70,63,59,73,64,64,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,55,64,56,69,72,62,61,58],
[62,0,70,62,61,73,69,66,60,61],
[75,60,0,57,60,71,80,67,60,56],
[66,68,73,0,73,82,79,74,66,63],
[74,69,70,57,0,68,75,60,61,59],
[61,57,59,48,62,0,73,52,55,49],
[58,61,50,51,55,57,0,51,48,47],
[68,64,63,56,70,78,79,0,60,65],
[69,70,70,64,69,75,82,70,0,60],
[72,69,74,67,71,81,83,65,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,65,75,68,60,61,68,73],
[64,0,65,60,69,68,56,57,63,65],
[68,65,0,63,66,65,63,47,66,64],
[65,70,67,0,65,70,59,57,65,63],
[55,61,64,65,0,70,57,51,54,59],
[62,62,65,60,60,0,60,45,62,61],
[70,74,67,71,73,70,0,67,76,65],
[69,73,83,73,79,85,63,0,79,72],
[62,67,64,65,76,68,54,51,0,68],
[57,65,66,67,71,69,65,58,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,54,64,50,62,50,50,61,48],
[69,0,62,69,69,68,52,59,67,61],
[76,68,0,77,72,71,54,74,71,67],
[66,61,53,0,62,63,52,66,61,62],
[80,61,58,68,0,58,61,66,65,66],
[68,62,59,67,72,0,57,71,60,58],
[80,78,76,78,69,73,0,73,71,64],
[80,71,56,64,64,59,57,0,62,60],
[69,63,59,69,65,70,59,68,0,69],
[82,69,63,68,64,72,66,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,72,74,75,90,88,65,80,86],
[62,0,80,72,66,72,80,72,73,74],
[58,50,0,57,75,77,77,68,57,71],
[56,58,73,0,63,83,75,73,57,72],
[55,64,55,67,0,61,61,61,53,68],
[40,58,53,47,69,0,72,66,47,59],
[42,50,53,55,69,58,0,50,53,57],
[65,58,62,57,69,64,80,0,57,64],
[50,57,73,73,77,83,77,73,0,76],
[44,56,59,58,62,71,73,66,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,73,78,65,76,81,79,78,65],
[65,0,69,68,59,63,80,70,61,62],
[57,61,0,73,62,59,74,70,61,55],
[52,62,57,0,51,61,68,63,61,48],
[65,71,68,79,0,71,74,76,70,65],
[54,67,71,69,59,0,69,75,64,53],
[49,50,56,62,56,61,0,61,61,49],
[51,60,60,67,54,55,69,0,68,57],
[52,69,69,69,60,66,69,62,0,54],
[65,68,75,82,65,77,81,73,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,76,63,57,64,62,65,72],
[66,0,76,66,65,67,72,68,72,77],
[65,54,0,77,69,68,66,65,66,69],
[54,64,53,0,69,58,61,65,61,69],
[67,65,61,61,0,55,61,69,63,72],
[73,63,62,72,75,0,76,72,70,75],
[66,58,64,69,69,54,0,65,68,77],
[68,62,65,65,61,58,65,0,62,66],
[65,58,64,69,67,60,62,68,0,74],
[58,53,61,61,58,55,53,64,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,67,78,59,74,69,60,67,62],
[58,0,82,61,54,77,72,68,79,67],
[63,48,0,78,67,68,70,73,72,56],
[52,69,52,0,64,73,62,78,60,44],
[71,76,63,66,0,66,82,80,75,63],
[56,53,62,57,64,0,66,70,50,65],
[61,58,60,68,48,64,0,67,58,52],
[70,62,57,52,50,60,63,0,54,54],
[63,51,58,70,55,80,72,76,0,51],
[68,63,74,86,67,65,78,76,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,74,77,81,89,58,82,65,93],
[41,0,67,64,67,75,52,66,57,69],
[56,63,0,66,86,66,60,74,57,86],
[53,66,64,0,81,67,67,58,60,83],
[49,63,44,49,0,61,47,64,48,66],
[41,55,64,63,69,0,51,53,54,75],
[72,78,70,63,83,79,0,77,63,92],
[48,64,56,72,66,77,53,0,63,72],
[65,73,73,70,82,76,67,67,0,86],
[37,61,44,47,64,55,38,58,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,74,60,58,48,54,70,57,70],
[75,0,62,42,58,55,45,61,50,51],
[56,68,0,60,59,52,66,61,54,65],
[70,88,70,0,74,60,74,68,59,66],
[72,72,71,56,0,57,57,57,62,60],
[82,75,78,70,73,0,55,61,66,53],
[76,85,64,56,73,75,0,64,65,56],
[60,69,69,62,73,69,66,0,57,72],
[73,80,76,71,68,64,65,73,0,59],
[60,79,65,64,70,77,74,58,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,61,66,67,69,68,58,61],
[71,0,72,68,71,64,67,68,62,68],
[65,58,0,61,68,58,66,67,63,67],
[69,62,69,0,76,68,79,65,72,70],
[64,59,62,54,0,60,68,69,68,62],
[63,66,72,62,70,0,72,71,54,68],
[61,63,64,51,62,58,0,60,57,66],
[62,62,63,65,61,59,70,0,61,64],
[72,68,67,58,62,76,73,69,0,67],
[69,62,63,60,68,62,64,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,83,73,82,71,82,75,90,63],
[53,0,62,64,51,62,64,56,72,74],
[47,68,0,64,62,64,82,59,62,76],
[57,66,66,0,83,57,71,73,68,71],
[48,79,68,47,0,54,80,54,56,48],
[59,68,66,73,76,0,75,70,71,57],
[48,66,48,59,50,55,0,63,67,63],
[55,74,71,57,76,60,67,0,68,63],
[40,58,68,62,74,59,63,62,0,64],
[67,56,54,59,82,73,67,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,74,71,73,64,76,67,80,67],
[61,0,78,70,66,64,76,58,70,59],
[56,52,0,58,60,53,68,61,62,63],
[59,60,72,0,69,49,75,62,70,57],
[57,64,70,61,0,53,66,55,71,62],
[66,66,77,81,77,0,83,71,87,63],
[54,54,62,55,64,47,0,60,71,56],
[63,72,69,68,75,59,70,0,77,63],
[50,60,68,60,59,43,59,53,0,52],
[63,71,67,73,68,67,74,67,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,59,58,52,61,60,68,66,56],
[61,0,49,59,44,57,68,62,57,49],
[71,81,0,63,55,68,75,74,66,62],
[72,71,67,0,58,68,73,66,66,62],
[78,86,75,72,0,80,85,68,74,65],
[69,73,62,62,50,0,72,62,66,48],
[70,62,55,57,45,58,0,55,63,65],
[62,68,56,64,62,68,75,0,68,52],
[64,73,64,64,56,64,67,62,0,54],
[74,81,68,68,65,82,65,78,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,84,103,67,68,84,59,87,86],
[28,0,45,53,51,62,42,35,53,26],
[46,85,0,85,59,59,59,60,69,58],
[27,77,45,0,69,78,77,60,52,51],
[63,79,71,61,0,53,70,52,52,53],
[62,68,71,52,77,0,44,69,50,59],
[46,88,71,53,60,86,0,72,78,52],
[71,95,70,70,78,61,58,0,62,43],
[43,77,61,78,78,80,52,68,0,69],
[44,104,72,79,77,71,78,87,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,42,55,54,57,57,67,49,50],
[84,0,65,76,61,60,69,77,60,68],
[88,65,0,78,67,78,78,78,68,70],
[75,54,52,0,64,62,55,60,51,53],
[76,69,63,66,0,73,67,72,66,72],
[73,70,52,68,57,0,62,66,59,69],
[73,61,52,75,63,68,0,76,55,68],
[63,53,52,70,58,64,54,0,49,58],
[81,70,62,79,64,71,75,81,0,80],
[80,62,60,77,58,61,62,72,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,70,74,58,56,62,78,77,59],
[56,0,57,66,52,52,53,55,63,62],
[60,73,0,63,57,67,59,73,67,52],
[56,64,67,0,50,63,51,71,56,55],
[72,78,73,80,0,73,65,67,63,66],
[74,78,63,67,57,0,58,69,64,61],
[68,77,71,79,65,72,0,70,71,60],
[52,75,57,59,63,61,60,0,70,53],
[53,67,63,74,67,66,59,60,0,57],
[71,68,78,75,64,69,70,77,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,57,75,78,67,60,61,65],
[66,0,73,53,66,67,63,58,64,65],
[66,57,0,56,62,61,58,63,61,56],
[73,77,74,0,74,77,65,71,66,70],
[55,64,68,56,0,67,59,58,57,68],
[52,63,69,53,63,0,62,63,59,60],
[63,67,72,65,71,68,0,66,67,69],
[70,72,67,59,72,67,64,0,65,68],
[69,66,69,64,73,71,63,65,0,72],
[65,65,74,60,62,70,61,62,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,72,77,76,62,55,69,76],
[68,0,72,74,79,70,73,65,73,74],
[67,58,0,75,75,72,59,60,69,75],
[58,56,55,0,66,66,63,58,68,79],
[53,51,55,64,0,57,61,48,59,63],
[54,60,58,64,73,0,66,50,64,78],
[68,57,71,67,69,64,0,55,58,79],
[75,65,70,72,82,80,75,0,69,77],
[61,57,61,62,71,66,72,61,0,74],
[54,56,55,51,67,52,51,53,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,71,74,78,62,53,79,35,66],
[79,0,70,80,89,66,61,75,65,63],
[59,60,0,69,81,63,44,73,46,65],
[56,50,61,0,69,60,58,59,42,65],
[52,41,49,61,0,62,60,81,40,72],
[68,64,67,70,68,0,76,75,47,72],
[77,69,86,72,70,54,0,74,51,76],
[51,55,57,71,49,55,56,0,40,65],
[95,65,84,88,90,83,79,90,0,78],
[64,67,65,65,58,58,54,65,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,70,93,64,82,84,77,83,72],
[56,0,64,76,73,78,85,72,79,71],
[60,66,0,77,62,79,77,71,83,76],
[37,54,53,0,56,72,65,64,64,55],
[66,57,68,74,0,70,66,61,70,75],
[48,52,51,58,60,0,61,62,62,59],
[46,45,53,65,64,69,0,61,54,57],
[53,58,59,66,69,68,69,0,66,67],
[47,51,47,66,60,68,76,64,0,64],
[58,59,54,75,55,71,73,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,53,54,61,54,64,50,72,37],
[77,0,87,83,64,69,76,78,63,67],
[77,43,0,57,48,60,59,68,62,48],
[76,47,73,0,61,70,65,61,55,68],
[69,66,82,69,0,73,59,79,80,71],
[76,61,70,60,57,0,68,72,56,58],
[66,54,71,65,71,62,0,58,70,59],
[80,52,62,69,51,58,72,0,68,55],
[58,67,68,75,50,74,60,62,0,66],
[93,63,82,62,59,72,71,75,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,46,63,61,52,53,55,58,55],
[76,0,69,77,79,68,67,70,60,72],
[84,61,0,67,78,70,73,73,70,69],
[67,53,63,0,69,57,66,66,63,57],
[69,51,52,61,0,51,65,63,59,48],
[78,62,60,73,79,0,73,60,65,59],
[77,63,57,64,65,57,0,67,55,60],
[75,60,57,64,67,70,63,0,60,59],
[72,70,60,67,71,65,75,70,0,60],
[75,58,61,73,82,71,70,71,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,54,58,64,69,59,61,66,39],
[87,0,96,86,63,75,76,67,71,59],
[76,34,0,39,51,49,71,67,59,44],
[72,44,91,0,79,68,54,62,64,62],
[66,67,79,51,0,67,62,78,67,69],
[61,55,81,62,63,0,58,70,60,57],
[71,54,59,76,68,72,0,73,57,39],
[69,63,63,68,52,60,57,0,57,54],
[64,59,71,66,63,70,73,73,0,60],
[91,71,86,68,61,73,91,76,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,102,88,45,88,73,73,88,87],
[42,0,101,87,45,73,56,72,58,87],
[28,29,0,73,29,43,28,28,43,57],
[42,43,57,0,28,44,43,57,57,28],
[85,85,101,102,0,72,99,87,87,58],
[42,57,87,86,58,0,56,58,59,44],
[57,74,102,87,31,74,0,44,88,73],
[57,58,102,73,43,72,86,0,102,73],
[42,72,87,73,43,71,42,28,0,57],
[43,43,73,102,72,86,57,57,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,63,68,66,62,71,75,69,63],
[61,0,65,67,64,66,62,72,75,64],
[67,65,0,58,68,67,63,78,70,58],
[62,63,72,0,73,76,69,70,84,66],
[64,66,62,57,0,64,71,66,75,55],
[68,64,63,54,66,0,68,71,68,58],
[59,68,67,61,59,62,0,66,74,58],
[55,58,52,60,64,59,64,0,60,61],
[61,55,60,46,55,62,56,70,0,66],
[67,66,72,64,75,72,72,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,68,64,75,72,58,76,73,84],
[41,0,39,32,48,59,40,36,34,56],
[62,91,0,46,68,59,49,55,60,66],
[66,98,84,0,73,75,54,48,58,61],
[55,82,62,57,0,70,39,44,66,54],
[58,71,71,55,60,0,62,79,61,67],
[72,90,81,76,91,68,0,70,65,80],
[54,94,75,82,86,51,60,0,73,81],
[57,96,70,72,64,69,65,57,0,83],
[46,74,64,69,76,63,50,49,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,77,74,74,72,62,71,69,66],
[54,0,72,68,73,57,63,72,69,73],
[53,58,0,55,64,58,61,59,69,54],
[56,62,75,0,75,58,70,60,70,73],
[56,57,66,55,0,69,64,54,72,70],
[58,73,72,72,61,0,62,61,70,72],
[68,67,69,60,66,68,0,52,65,65],
[59,58,71,70,76,69,78,0,59,68],
[61,61,61,60,58,60,65,71,0,59],
[64,57,76,57,60,58,65,62,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,66,86,72,70,59,62,76,75],
[51,0,59,67,71,67,49,59,74,72],
[64,71,0,81,74,80,68,59,86,75],
[44,63,49,0,60,67,40,52,61,72],
[58,59,56,70,0,62,39,59,64,72],
[60,63,50,63,68,0,48,48,57,61],
[71,81,62,90,91,82,0,66,88,80],
[68,71,71,78,71,82,64,0,78,83],
[54,56,44,69,66,73,42,52,0,59],
[55,58,55,58,58,69,50,47,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,60,57,57,39,39,61,69,69],
[69,0,85,70,72,47,61,72,74,85],
[70,45,0,59,61,39,56,61,64,66],
[73,60,71,0,62,45,57,66,67,70],
[73,58,69,68,0,43,59,70,64,63],
[91,83,91,85,87,0,65,90,78,85],
[91,69,74,73,71,65,0,73,71,88],
[69,58,69,64,60,40,57,0,68,68],
[61,56,66,63,66,52,59,62,0,68],
[61,45,64,60,67,45,42,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,63,66,67,68,65,60,59,68],
[62,0,60,62,71,67,56,58,59,60],
[67,70,0,60,60,70,56,65,45,61],
[64,68,70,0,62,77,55,70,55,67],
[63,59,70,68,0,63,65,73,57,66],
[62,63,60,53,67,0,60,63,56,64],
[65,74,74,75,65,70,0,71,67,75],
[70,72,65,60,57,67,59,0,67,74],
[71,71,85,75,73,74,63,63,0,68],
[62,70,69,63,64,66,55,56,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,69,66,68,57,66,68,72,49],
[87,0,70,64,57,56,68,64,69,65],
[61,60,0,40,49,56,86,82,76,58],
[64,66,90,0,51,72,86,94,84,65],
[62,73,81,79,0,61,91,73,79,69],
[73,74,74,58,69,0,78,70,83,64],
[64,62,44,44,39,52,0,63,63,44],
[62,66,48,36,57,60,67,0,64,48],
[58,61,54,46,51,47,67,66,0,54],
[81,65,72,65,61,66,86,82,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,74,66,66,66,67,68,62,63],
[60,0,69,62,61,53,66,67,56,61],
[56,61,0,58,63,57,61,63,53,55],
[64,68,72,0,68,59,63,72,56,59],
[64,69,67,62,0,71,65,70,54,64],
[64,77,73,71,59,0,67,79,69,69],
[63,64,69,67,65,63,0,71,61,72],
[62,63,67,58,60,51,59,0,55,58],
[68,74,77,74,76,61,69,75,0,69],
[67,69,75,71,66,61,58,72,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,70,54,73,64,51,57,61,66],
[81,0,80,65,83,68,76,71,72,72],
[60,50,0,45,69,47,49,50,50,54],
[76,65,85,0,70,65,81,60,69,50],
[57,47,61,60,0,62,51,53,56,61],
[66,62,83,65,68,0,69,59,65,63],
[79,54,81,49,79,61,0,65,64,56],
[73,59,80,70,77,71,65,0,79,57],
[69,58,80,61,74,65,66,51,0,59],
[64,58,76,80,69,67,74,73,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,76,64,72,60,81,70,70,66],
[59,0,73,65,61,54,83,70,63,70],
[54,57,0,65,77,59,69,65,72,69],
[66,65,65,0,67,77,80,67,84,84],
[58,69,53,63,0,65,72,60,63,65],
[70,76,71,53,65,0,77,62,81,65],
[49,47,61,50,58,53,0,42,49,46],
[60,60,65,63,70,68,88,0,58,55],
[60,67,58,46,67,49,81,72,0,67],
[64,60,61,46,65,65,84,75,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,75,78,66,77,58,56,70,72],
[85,0,86,69,75,78,69,61,73,86],
[55,44,0,58,64,70,43,52,66,58],
[52,61,72,0,63,67,50,53,65,67],
[64,55,66,67,0,63,59,49,60,64],
[53,52,60,63,67,0,54,41,57,61],
[72,61,87,80,71,76,0,71,72,88],
[74,69,78,77,81,89,59,0,73,77],
[60,57,64,65,70,73,58,57,0,73],
[58,44,72,63,66,69,42,53,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,63,63,77,72,63,63,61],
[59,0,74,64,65,72,65,70,61,55],
[66,56,0,68,66,63,66,57,67,59],
[67,66,62,0,63,76,64,74,57,64],
[67,65,64,67,0,84,75,71,64,67],
[53,58,67,54,46,0,64,56,54,56],
[58,65,64,66,55,66,0,64,57,62],
[67,60,73,56,59,74,66,0,61,65],
[67,69,63,73,66,76,73,69,0,61],
[69,75,71,66,63,74,68,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,76,55,53,67,85,57,61,74],
[50,0,58,64,50,49,49,48,52,60],
[54,72,0,70,53,59,92,59,68,90],
[75,66,60,0,54,65,76,59,62,89],
[77,80,77,76,0,70,88,61,64,88],
[63,81,71,65,60,0,78,54,71,76],
[45,81,38,54,42,52,0,59,58,55],
[73,82,71,71,69,76,71,0,58,76],
[69,78,62,68,66,59,72,72,0,73],
[56,70,40,41,42,54,75,54,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,71,71,64,69,70,81,86,73],
[49,0,57,60,47,57,58,59,65,62],
[59,73,0,62,52,65,59,82,62,61],
[59,70,68,0,53,60,61,69,67,69],
[66,83,78,77,0,69,65,78,76,69],
[61,73,65,70,61,0,66,77,75,70],
[60,72,71,69,65,64,0,66,76,71],
[49,71,48,61,52,53,64,0,69,59],
[44,65,68,63,54,55,54,61,0,56],
[57,68,69,61,61,60,59,71,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,67,55,59,50,57,62,64,68],
[73,0,67,68,71,59,60,57,65,67],
[63,63,0,62,59,63,60,60,73,68],
[75,62,68,0,64,61,63,55,62,74],
[71,59,71,66,0,53,56,60,61,67],
[80,71,67,69,77,0,71,58,75,74],
[73,70,70,67,74,59,0,65,70,72],
[68,73,70,75,70,72,65,0,78,81],
[66,65,57,68,69,55,60,52,0,66],
[62,63,62,56,63,56,58,49,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,58,62,67,81,67,75,59,72],
[56,0,80,91,57,67,81,62,60,67],
[72,50,0,57,69,81,64,83,74,60],
[68,39,73,0,42,83,49,75,48,51],
[63,73,61,88,0,89,95,90,69,60],
[49,63,49,47,41,0,53,70,50,48],
[63,49,66,81,35,77,0,56,56,53],
[55,68,47,55,40,60,74,0,56,62],
[71,70,56,82,61,80,74,74,0,72],
[58,63,70,79,70,82,77,68,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,54,50,66,47,58,46,51,56],
[87,0,65,68,71,62,72,62,64,66],
[76,65,0,66,79,61,71,59,81,61],
[80,62,64,0,68,65,72,55,58,64],
[64,59,51,62,0,50,74,54,60,52],
[83,68,69,65,80,0,74,69,72,71],
[72,58,59,58,56,56,0,62,61,63],
[84,68,71,75,76,61,68,0,68,72],
[79,66,49,72,70,58,69,62,0,63],
[74,64,69,66,78,59,67,58,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,43,32,20,43,32,53,64,64],
[54,0,85,64,64,53,52,64,53,74],
[87,45,0,45,43,42,75,65,65,85],
[98,66,85,0,65,64,74,76,64,107],
[110,66,87,65,0,77,96,75,75,86],
[87,77,88,66,53,0,63,97,87,98],
[98,78,55,56,34,67,0,66,67,86],
[77,66,65,54,55,33,64,0,74,76],
[66,77,65,66,55,43,63,56,0,86],
[66,56,45,23,44,32,44,54,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,71,61,75,46,62,70,71,62],
[75,0,73,81,76,58,66,68,93,86],
[59,57,0,68,68,44,60,70,77,62],
[69,49,62,0,62,48,63,63,84,70],
[55,54,62,68,0,42,49,65,69,66],
[84,72,86,82,88,0,63,72,85,88],
[68,64,70,67,81,67,0,70,76,62],
[60,62,60,67,65,58,60,0,77,64],
[59,37,53,46,61,45,54,53,0,59],
[68,44,68,60,64,42,68,66,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,52,45,60,46,44,71,50,46],
[80,0,61,57,74,74,60,79,67,61],
[78,69,0,62,79,75,74,83,69,58],
[85,73,68,0,74,64,58,76,74,65],
[70,56,51,56,0,52,44,68,56,41],
[84,56,55,66,78,0,46,82,68,55],
[86,70,56,72,86,84,0,80,74,57],
[59,51,47,54,62,48,50,0,65,54],
[80,63,61,56,74,62,56,65,0,55],
[84,69,72,65,89,75,73,76,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,64,91,74,76,70,68,81,86],
[49,0,51,67,61,55,50,54,60,59],
[66,79,0,82,79,70,68,63,78,78],
[39,63,48,0,53,56,59,50,71,55],
[56,69,51,77,0,67,60,69,62,76],
[54,75,60,74,63,0,68,61,63,63],
[60,80,62,71,70,62,0,68,78,70],
[62,76,67,80,61,69,62,0,67,66],
[49,70,52,59,68,67,52,63,0,71],
[44,71,52,75,54,67,60,64,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,61,67,64,65,67,58,67,71],
[67,0,58,65,69,55,61,62,74,69],
[69,72,0,74,76,64,74,72,75,75],
[63,65,56,0,61,63,61,65,69,73],
[66,61,54,69,0,59,67,69,69,75],
[65,75,66,67,71,0,80,69,77,80],
[63,69,56,69,63,50,0,64,72,72],
[72,68,58,65,61,61,66,0,71,69],
[63,56,55,61,61,53,58,59,0,69],
[59,61,55,57,55,50,58,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,72,69,69,73,71,78,64,67],
[82,0,81,64,82,63,81,76,72,71],
[58,49,0,66,75,55,68,71,64,67],
[61,66,64,0,64,63,62,65,56,65],
[61,48,55,66,0,54,60,67,60,58],
[57,67,75,67,76,0,77,72,64,72],
[59,49,62,68,70,53,0,67,59,51],
[52,54,59,65,63,58,63,0,49,62],
[66,58,66,74,70,66,71,81,0,60],
[63,59,63,65,72,58,79,68,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,80,79,79,53,77,79,80,53],
[26,0,53,52,26,26,24,79,26,53],
[50,77,0,26,26,50,50,26,50,53],
[51,78,104,0,53,51,51,80,78,77],
[51,104,104,77,0,51,51,104,78,77],
[77,104,80,79,79,0,77,106,80,53],
[53,106,80,79,79,53,0,79,79,79],
[51,51,104,50,26,24,51,0,51,77],
[50,104,80,52,52,50,51,79,0,53],
[77,77,77,53,53,77,51,53,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,51,81,78,53,41,47,59,52],
[65,0,64,72,60,71,70,47,47,45],
[79,66,0,84,62,50,57,43,58,60],
[49,58,46,0,61,47,59,47,48,65],
[52,70,68,69,0,42,40,53,57,41],
[77,59,80,83,88,0,60,64,69,54],
[89,60,73,71,90,70,0,65,76,66],
[83,83,87,83,77,66,65,0,64,71],
[71,83,72,82,73,61,54,66,0,65],
[78,85,70,65,89,76,64,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,68,56,62,58,63,71,70,52],
[67,0,72,58,70,63,68,74,68,51],
[62,58,0,56,60,50,60,66,56,50],
[74,72,74,0,73,71,72,74,67,65],
[68,60,70,57,0,54,64,69,68,52],
[72,67,80,59,76,0,78,71,79,72],
[67,62,70,58,66,52,0,61,61,60],
[59,56,64,56,61,59,69,0,57,47],
[60,62,74,63,62,51,69,73,0,63],
[78,79,80,65,78,58,70,83,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,50,57,43,51,55,48,47,62],
[92,0,78,86,59,83,78,75,72,66],
[80,52,0,73,57,76,70,57,68,64],
[73,44,57,0,35,55,67,56,61,59],
[87,71,73,95,0,81,80,65,80,74],
[79,47,54,75,49,0,65,52,59,64],
[75,52,60,63,50,65,0,70,57,67],
[82,55,73,74,65,78,60,0,72,68],
[83,58,62,69,50,71,73,58,0,66],
[68,64,66,71,56,66,63,62,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,57,68,70,65,69,76,65],
[65,0,55,65,65,73,64,76,69,72],
[63,75,0,62,65,73,71,68,71,73],
[73,65,68,0,67,76,72,66,75,75],
[62,65,65,63,0,62,71,63,69,63],
[60,57,57,54,68,0,57,56,65,59],
[65,66,59,58,59,73,0,59,66,66],
[61,54,62,64,67,74,71,0,71,70],
[54,61,59,55,61,65,64,59,0,56],
[65,58,57,55,67,71,64,60,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,67,72,63,59,58,65,68,67],
[51,0,62,67,67,58,60,58,65,64],
[63,68,0,65,53,61,62,60,64,63],
[58,63,65,0,65,62,54,60,68,61],
[67,63,77,65,0,65,51,59,66,59],
[71,72,69,68,65,0,50,63,69,65],
[72,70,68,76,79,80,0,66,77,60],
[65,72,70,70,71,67,64,0,75,61],
[62,65,66,62,64,61,53,55,0,58],
[63,66,67,69,71,65,70,69,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,75,61,46,63,54,65,43,57],
[77,0,75,60,59,64,76,64,61,57],
[55,55,0,55,52,59,59,44,53,55],
[69,70,75,0,67,66,68,69,63,65],
[84,71,78,63,0,81,70,66,48,58],
[67,66,71,64,49,0,58,54,50,75],
[76,54,71,62,60,72,0,59,59,65],
[65,66,86,61,64,76,71,0,66,53],
[87,69,77,67,82,80,71,64,0,74],
[73,73,75,65,72,55,65,77,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,56,57,60,58,62,54,56,64],
[74,0,71,65,63,63,70,63,69,67],
[74,59,0,66,65,68,60,55,69,63],
[73,65,64,0,64,72,62,50,74,68],
[70,67,65,66,0,71,60,56,70,63],
[72,67,62,58,59,0,64,56,68,62],
[68,60,70,68,70,66,0,60,68,66],
[76,67,75,80,74,74,70,0,72,63],
[74,61,61,56,60,62,62,58,0,64],
[66,63,67,62,67,68,64,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,57,62,72,66,70,69,69,59],
[63,0,65,68,73,67,66,69,71,65],
[73,65,0,60,71,69,70,74,79,61],
[68,62,70,0,68,71,74,71,74,60],
[58,57,59,62,0,65,67,64,61,58],
[64,63,61,59,65,0,74,64,69,56],
[60,64,60,56,63,56,0,62,63,58],
[61,61,56,59,66,66,68,0,67,59],
[61,59,51,56,69,61,67,63,0,55],
[71,65,69,70,72,74,72,71,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,70,70,74,81,65,77,81,78],
[38,0,57,56,55,58,63,52,51,66],
[60,73,0,66,69,60,62,61,64,72],
[60,74,64,0,70,72,68,70,61,67],
[56,75,61,60,0,60,60,67,61,70],
[49,72,70,58,70,0,61,68,70,60],
[65,67,68,62,70,69,0,69,59,67],
[53,78,69,60,63,62,61,0,69,61],
[49,79,66,69,69,60,71,61,0,65],
[52,64,58,63,60,70,63,69,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,73,67,83,71,73,67,85,68],
[67,0,55,59,68,57,65,61,71,61],
[57,75,0,60,63,70,60,69,83,60],
[63,71,70,0,69,78,57,70,77,65],
[47,62,67,61,0,82,65,71,71,74],
[59,73,60,52,48,0,58,60,77,61],
[57,65,70,73,65,72,0,67,72,66],
[63,69,61,60,59,70,63,0,77,65],
[45,59,47,53,59,53,58,53,0,46],
[62,69,70,65,56,69,64,65,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,69,68,74,65,44,81,63,67],
[67,0,61,52,73,49,63,51,67,58],
[61,69,0,53,78,47,73,56,65,60],
[62,78,77,0,79,52,76,65,77,54],
[56,57,52,51,0,53,65,58,53,51],
[65,81,83,78,77,0,60,70,72,67],
[86,67,57,54,65,70,0,73,71,76],
[49,79,74,65,72,60,57,0,88,55],
[67,63,65,53,77,58,59,42,0,47],
[63,72,70,76,79,63,54,75,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,71,75,66,67,64,61,69,82],
[57,0,78,66,53,64,71,78,52,73],
[59,52,0,65,62,41,67,64,48,62],
[55,64,65,0,54,61,68,74,57,62],
[64,77,68,76,0,71,78,74,61,76],
[63,66,89,69,59,0,70,82,60,61],
[66,59,63,62,52,60,0,74,60,62],
[69,52,66,56,56,48,56,0,59,62],
[61,78,82,73,69,70,70,71,0,78],
[48,57,68,68,54,69,68,68,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,39,38,36,57,64,56,73,56],
[83,0,58,75,74,66,84,58,63,63],
[91,72,0,74,63,81,82,74,70,71],
[92,55,56,0,66,83,75,55,56,64],
[94,56,67,64,0,75,64,75,72,64],
[73,64,49,47,55,0,56,65,44,55],
[66,46,48,55,66,74,0,67,64,54],
[74,72,56,75,55,65,63,0,44,52],
[57,67,60,74,58,86,66,86,0,75],
[74,67,59,66,66,75,76,78,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,51,54,56,52,52,48,57,58],
[79,0,71,60,73,72,63,73,80,62],
[79,59,0,56,62,66,59,60,70,56],
[76,70,74,0,76,70,67,60,79,65],
[74,57,68,54,0,58,42,57,64,52],
[78,58,64,60,72,0,53,60,60,57],
[78,67,71,63,88,77,0,74,80,71],
[82,57,70,70,73,70,56,0,76,67],
[73,50,60,51,66,70,50,54,0,50],
[72,68,74,65,78,73,59,63,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,64,83,65,79,70,77,64,65],
[56,0,57,72,67,52,61,71,71,71],
[66,73,0,67,64,60,66,68,67,66],
[47,58,63,0,57,55,47,62,55,56],
[65,63,66,73,0,67,81,70,60,75],
[51,78,70,75,63,0,70,75,69,68],
[60,69,64,83,49,60,0,62,54,45],
[53,59,62,68,60,55,68,0,59,63],
[66,59,63,75,70,61,76,71,0,78],
[65,59,64,74,55,62,85,67,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,71,55,57,65,59,76,74,68],
[59,0,67,61,58,68,49,70,77,54],
[59,63,0,55,61,59,55,77,67,57],
[75,69,75,0,65,69,64,66,75,71],
[73,72,69,65,0,78,64,82,77,74],
[65,62,71,61,52,0,58,62,66,68],
[71,81,75,66,66,72,0,79,71,59],
[54,60,53,64,48,68,51,0,65,63],
[56,53,63,55,53,64,59,65,0,57],
[62,76,73,59,56,62,71,67,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,67,62,64,66,71,75,70,76],
[71,0,61,73,65,65,65,72,69,68],
[63,69,0,66,59,55,67,68,58,62],
[68,57,64,0,60,69,73,75,65,71],
[66,65,71,70,0,64,76,75,69,72],
[64,65,75,61,66,0,80,77,74,67],
[59,65,63,57,54,50,0,66,50,55],
[55,58,62,55,55,53,64,0,48,61],
[60,61,72,65,61,56,80,82,0,58],
[54,62,68,59,58,63,75,69,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,64,81,72,71,82,78,65,55],
[80,0,64,85,87,76,84,76,70,68],
[66,66,0,74,63,63,70,68,67,59],
[49,45,56,0,55,54,63,57,47,58],
[58,43,67,75,0,63,79,73,70,63],
[59,54,67,76,67,0,68,61,59,60],
[48,46,60,67,51,62,0,67,53,59],
[52,54,62,73,57,69,63,0,53,59],
[65,60,63,83,60,71,77,77,0,61],
[75,62,71,72,67,70,71,71,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,62,57,64,67,44,70,64,68],
[48,0,57,52,51,57,52,68,54,45],
[68,73,0,66,65,62,57,73,56,58],
[73,78,64,0,68,62,66,83,54,47],
[66,79,65,62,0,57,54,75,54,59],
[63,73,68,68,73,0,57,72,57,60],
[86,78,73,64,76,73,0,84,57,74],
[60,62,57,47,55,58,46,0,49,46],
[66,76,74,76,76,73,73,81,0,60],
[62,85,72,83,71,70,56,84,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,74,63,85,69,87,66,64],
[63,0,61,66,59,76,61,75,64,70],
[62,69,0,74,68,78,67,81,58,68],
[56,64,56,0,60,72,67,79,56,52],
[67,71,62,70,0,76,75,79,63,65],
[45,54,52,58,54,0,51,74,52,62],
[61,69,63,63,55,79,0,82,68,58],
[43,55,49,51,51,56,48,0,46,43],
[64,66,72,74,67,78,62,84,0,68],
[66,60,62,78,65,68,72,87,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,61,61,55,55,52,59,52,43],
[56,0,53,61,57,53,64,61,47,53],
[69,77,0,59,65,57,66,51,55,64],
[69,69,71,0,69,59,71,75,66,73],
[75,73,65,61,0,68,79,77,70,77],
[75,77,73,71,62,0,73,73,68,69],
[78,66,64,59,51,57,0,64,67,60],
[71,69,79,55,53,57,66,0,57,66],
[78,83,75,64,60,62,63,73,0,77],
[87,77,66,57,53,61,70,64,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,66,62,65,57,58,63,64],
[63,0,52,67,67,56,58,67,69,70],
[63,78,0,74,75,68,64,69,75,72],
[64,63,56,0,66,59,56,63,68,67],
[68,63,55,64,0,55,49,59,64,63],
[65,74,62,71,75,0,65,67,69,73],
[73,72,66,74,81,65,0,65,73,70],
[72,63,61,67,71,63,65,0,67,69],
[67,61,55,62,66,61,57,63,0,65],
[66,60,58,63,67,57,60,61,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,63,57,73,53,68,60,53,73],
[52,0,48,53,46,45,51,53,49,58],
[67,82,0,64,70,68,76,56,61,74],
[73,77,66,0,70,63,75,56,59,68],
[57,84,60,60,0,64,79,57,61,71],
[77,85,62,67,66,0,81,67,74,77],
[62,79,54,55,51,49,0,56,57,58],
[70,77,74,74,73,63,74,0,74,74],
[77,81,69,71,69,56,73,56,0,60],
[57,72,56,62,59,53,72,56,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,63,70,43,74,71,62,76,62],
[76,0,63,78,85,74,91,83,67,64],
[67,67,0,62,63,67,76,67,73,75],
[60,52,68,0,62,81,59,80,78,71],
[87,45,67,68,0,81,68,66,73,62],
[56,56,63,49,49,0,56,56,71,55],
[59,39,54,71,62,74,0,46,58,62],
[68,47,63,50,64,74,84,0,80,54],
[54,63,57,52,57,59,72,50,0,47],
[68,66,55,59,68,75,68,76,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,70,79,60,48,68,70,67,70],
[51,0,56,62,51,44,59,55,52,44],
[60,74,0,67,57,50,70,63,65,63],
[51,68,63,0,54,54,62,62,59,58],
[70,79,73,76,0,65,70,75,65,67],
[82,86,80,76,65,0,69,69,68,82],
[62,71,60,68,60,61,0,72,57,65],
[60,75,67,68,55,61,58,0,56,64],
[63,78,65,71,65,62,73,74,0,74],
[60,86,67,72,63,48,65,66,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,71,72,64,71,70,80,70,72],
[58,0,55,66,54,49,60,62,55,60],
[59,75,0,67,70,67,63,68,72,65],
[58,64,63,0,53,59,61,57,67,46],
[66,76,60,77,0,77,76,81,74,66],
[59,81,63,71,53,0,71,80,76,62],
[60,70,67,69,54,59,0,68,67,57],
[50,68,62,73,49,50,62,0,61,55],
[60,75,58,63,56,54,63,69,0,61],
[58,70,65,84,64,68,73,75,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,24,50,64,50,53,80,54,64],
[90,0,77,64,90,50,76,80,106,91],
[106,53,0,66,67,65,53,106,79,80],
[80,66,64,0,65,50,53,80,80,66],
[66,40,63,65,0,37,53,66,80,64],
[80,80,65,80,93,0,66,81,81,78],
[77,54,77,77,77,64,0,80,93,90],
[50,50,24,50,64,49,50,0,63,38],
[76,24,51,50,50,49,37,67,0,38],
[66,39,50,64,66,52,40,92,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,61,83,79,79,87,98,105,96],
[40,0,70,91,87,88,77,86,88,78],
[69,60,0,80,78,66,103,78,84,85],
[47,39,50,0,69,59,58,68,78,57],
[51,43,52,61,0,50,70,78,81,43],
[51,42,64,71,80,0,79,72,80,70],
[43,53,27,72,60,51,0,61,79,54],
[32,44,52,62,52,58,69,0,71,61],
[25,42,46,52,49,50,51,59,0,42],
[34,52,45,73,87,60,76,69,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,80,61,74,53,80,83,68,63],
[61,0,58,40,49,52,59,62,64,36],
[50,72,0,62,61,62,73,62,76,56],
[69,90,68,0,66,70,65,80,77,51],
[56,81,69,64,0,55,63,89,71,69],
[77,78,68,60,75,0,60,79,75,64],
[50,71,57,65,67,70,0,71,78,58],
[47,68,68,50,41,51,59,0,60,49],
[62,66,54,53,59,55,52,70,0,44],
[67,94,74,79,61,66,72,81,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,78,70,62,83,73,79,81,67],
[55,0,69,70,62,69,68,64,66,57],
[52,61,0,58,59,60,72,57,64,60],
[60,60,72,0,55,66,65,60,60,70],
[68,68,71,75,0,76,79,64,77,58],
[47,61,70,64,54,0,64,64,63,58],
[57,62,58,65,51,66,0,64,55,55],
[51,66,73,70,66,66,66,0,66,56],
[49,64,66,70,53,67,75,64,0,56],
[63,73,70,60,72,72,75,74,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,69,72,48,80,51,60,71,30],
[50,0,70,38,37,60,47,49,68,39],
[61,60,0,72,39,81,69,61,99,51],
[58,92,58,0,58,91,70,59,100,59],
[82,93,91,72,0,93,71,42,91,71],
[50,70,49,39,37,0,38,29,39,29],
[79,83,61,60,59,92,0,61,82,60],
[70,81,69,71,88,101,69,0,109,60],
[59,62,31,30,39,91,48,21,0,60],
[100,91,79,71,59,101,70,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,67,67,62,58,65,66,64],
[61,0,52,49,58,59,66,63,69,62],
[65,78,0,66,64,73,82,66,75,77],
[63,81,64,0,62,57,62,57,66,76],
[63,72,66,68,0,64,76,74,72,73],
[68,71,57,73,66,0,79,72,68,66],
[72,64,48,68,54,51,0,54,64,62],
[65,67,64,73,56,58,76,0,66,66],
[64,61,55,64,58,62,66,64,0,66],
[66,68,53,54,57,64,68,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,60,59,74,68,71,87,52,77],
[56,0,47,54,61,61,48,74,46,53],
[70,83,0,66,63,68,82,72,57,82],
[71,76,64,0,77,76,86,81,65,84],
[56,69,67,53,0,92,77,80,62,76],
[62,69,62,54,38,0,72,86,36,82],
[59,82,48,44,53,58,0,91,44,67],
[43,56,58,49,50,44,39,0,36,62],
[78,84,73,65,68,94,86,94,0,97],
[53,77,48,46,54,48,63,68,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,61,54,71,51,52,62,64,65],
[47,0,54,52,62,50,52,56,56,54],
[69,76,0,73,87,67,59,73,72,66],
[76,78,57,0,87,69,65,69,73,68],
[59,68,43,43,0,44,59,57,77,48],
[79,80,63,61,86,0,61,64,71,74],
[78,78,71,65,71,69,0,70,81,66],
[68,74,57,61,73,66,60,0,69,62],
[66,74,58,57,53,59,49,61,0,65],
[65,76,64,62,82,56,64,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,57,42,76,66,49,45,57,49],
[73,0,74,52,75,65,63,67,64,58],
[73,56,0,35,73,61,48,65,55,51],
[88,78,95,0,93,83,72,63,86,83],
[54,55,57,37,0,60,46,56,62,42],
[64,65,69,47,70,0,55,57,65,48],
[81,67,82,58,84,75,0,69,76,64],
[85,63,65,67,74,73,61,0,61,66],
[73,66,75,44,68,65,54,69,0,53],
[81,72,79,47,88,82,66,64,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,83,66,73,59,71,71,57,55],
[75,0,74,67,75,60,66,72,70,72],
[47,56,0,64,68,56,67,60,56,54],
[64,63,66,0,60,60,63,63,64,57],
[57,55,62,70,0,61,66,57,55,58],
[71,70,74,70,69,0,77,78,72,64],
[59,64,63,67,64,53,0,74,53,58],
[59,58,70,67,73,52,56,0,55,61],
[73,60,74,66,75,58,77,75,0,59],
[75,58,76,73,72,66,72,69,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,50,35,62,69,53,43,48,70],
[69,0,68,52,50,79,72,77,57,78],
[80,62,0,81,80,81,56,71,71,81],
[95,78,49,0,88,59,61,86,66,77],
[68,80,50,42,0,68,55,67,57,70],
[61,51,49,71,62,0,36,69,59,81],
[77,58,74,69,75,94,0,85,83,87],
[87,53,59,44,63,61,45,0,49,71],
[82,73,59,64,73,71,47,81,0,89],
[60,52,49,53,60,49,43,59,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,67,67,67,66,64,64,56],
[63,0,59,51,71,72,51,53,61,56],
[63,71,0,74,75,83,71,72,76,61],
[63,79,56,0,57,76,64,54,63,53],
[63,59,55,73,0,75,67,64,69,54],
[63,58,47,54,55,0,55,53,60,51],
[64,79,59,66,63,75,0,69,76,59],
[66,77,58,76,66,77,61,0,69,68],
[66,69,54,67,61,70,54,61,0,63],
[74,74,69,77,76,79,71,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,81,53,65,64,73,62,63],
[62,0,77,63,53,63,67,71,67,57],
[60,53,0,39,52,59,34,59,39,43],
[49,67,91,0,51,62,48,59,51,40],
[77,77,78,79,0,81,62,84,72,73],
[65,67,71,68,49,0,64,64,69,44],
[66,63,96,82,68,66,0,70,56,56],
[57,59,71,71,46,66,60,0,44,40],
[68,63,91,79,58,61,74,86,0,59],
[67,73,87,90,57,86,74,90,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,59,68,56,46,86,70,63,80],
[60,0,65,57,54,35,62,59,73,83],
[71,65,0,58,61,66,71,67,77,67],
[62,73,72,0,64,61,78,69,79,70],
[74,76,69,66,0,63,85,82,66,82],
[84,95,64,69,67,0,72,81,77,78],
[44,68,59,52,45,58,0,52,63,68],
[60,71,63,61,48,49,78,0,62,79],
[67,57,53,51,64,53,67,68,0,70],
[50,47,63,60,48,52,62,51,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,44,50,69,43,36,55,50,73],
[80,0,54,64,69,42,47,61,56,91],
[86,76,0,74,79,73,65,63,53,89],
[80,66,56,0,86,44,63,62,60,65],
[61,61,51,44,0,46,62,50,59,68],
[87,88,57,86,84,0,59,85,76,86],
[94,83,65,67,68,71,0,67,67,97],
[75,69,67,68,80,45,63,0,59,92],
[80,74,77,70,71,54,63,71,0,92],
[57,39,41,65,62,44,33,38,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,76,70,75,88,58,82,68,66],
[58,0,74,69,66,58,70,68,77,76],
[54,56,0,51,59,73,57,77,70,60],
[60,61,79,0,62,67,68,82,59,65],
[55,64,71,68,0,68,53,76,71,56],
[42,72,57,63,62,0,59,64,57,56],
[72,60,73,62,77,71,0,80,72,65],
[48,62,53,48,54,66,50,0,60,49],
[62,53,60,71,59,73,58,70,0,72],
[64,54,70,65,74,74,65,81,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,75,72,66,71,80,67,56],
[63,0,71,77,68,74,73,84,64,76],
[61,59,0,64,58,58,64,73,53,62],
[55,53,66,0,61,61,57,68,53,52],
[58,62,72,69,0,54,67,75,53,62],
[64,56,72,69,76,0,67,81,67,58],
[59,57,66,73,63,63,0,73,69,64],
[50,46,57,62,55,49,57,0,57,54],
[63,66,77,77,77,63,61,73,0,63],
[74,54,68,78,68,72,66,76,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,75,62,51,65,63,68,65,64],
[62,0,73,67,60,76,64,67,67,68],
[55,57,0,51,55,59,55,66,59,60],
[68,63,79,0,66,78,59,71,70,71],
[79,70,75,64,0,76,64,70,67,75],
[65,54,71,52,54,0,62,67,59,62],
[67,66,75,71,66,68,0,67,63,69],
[62,63,64,59,60,63,63,0,64,67],
[65,63,71,60,63,71,67,66,0,69],
[66,62,70,59,55,68,61,63,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,54,68,58,67,57,61,63,65],
[79,0,59,68,72,76,65,68,72,73],
[76,71,0,60,71,84,67,64,56,72],
[62,62,70,0,71,66,68,65,61,68],
[72,58,59,59,0,65,57,49,58,60],
[63,54,46,64,65,0,57,60,63,68],
[73,65,63,62,73,73,0,64,65,63],
[69,62,66,65,81,70,66,0,61,59],
[67,58,74,69,72,67,65,69,0,72],
[65,57,58,62,70,62,67,71,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,75,79,76,53,54,73,78,49],
[80,0,77,91,85,67,59,86,67,76],
[55,53,0,101,75,73,64,87,77,65],
[51,39,29,0,56,26,44,66,49,35],
[54,45,55,74,0,36,47,57,55,37],
[77,63,57,104,94,0,71,92,82,73],
[76,71,66,86,83,59,0,74,86,63],
[57,44,43,64,73,38,56,0,59,50],
[52,63,53,81,75,48,44,71,0,36],
[81,54,65,95,93,57,67,80,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,57,63,54,55,64,72,59,59],
[70,0,68,66,68,69,71,82,63,70],
[73,62,0,63,67,59,64,73,64,65],
[67,64,67,0,61,66,56,83,64,61],
[76,62,63,69,0,58,56,68,64,57],
[75,61,71,64,72,0,66,81,68,66],
[66,59,66,74,74,64,0,73,57,66],
[58,48,57,47,62,49,57,0,52,52],
[71,67,66,66,66,62,73,78,0,67],
[71,60,65,69,73,64,64,78,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,58,45,54,70,60,54,60,51],
[71,0,56,54,68,61,59,62,62,57],
[72,74,0,61,63,66,68,60,70,68],
[85,76,69,0,71,78,70,61,66,68],
[76,62,67,59,0,68,65,62,58,57],
[60,69,64,52,62,0,63,63,68,60],
[70,71,62,60,65,67,0,70,67,63],
[76,68,70,69,68,67,60,0,79,64],
[70,68,60,64,72,62,63,51,0,60],
[79,73,62,62,73,70,67,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,67,58,63,64,64,77,66,59],
[54,0,59,59,49,57,51,60,56,56],
[63,71,0,68,67,68,67,71,67,66],
[72,71,62,0,61,66,54,73,58,57],
[67,81,63,69,0,63,79,73,65,81],
[66,73,62,64,67,0,68,70,64,66],
[66,79,63,76,51,62,0,70,73,70],
[53,70,59,57,57,60,60,0,59,67],
[64,74,63,72,65,66,57,71,0,55],
[71,74,64,73,49,64,60,63,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,77,81,65,82,83,60,76,54],
[66,0,66,83,75,53,91,74,100,91],
[53,64,0,60,64,54,65,42,77,58],
[49,47,70,0,73,59,68,58,69,74],
[65,55,66,57,0,71,64,47,79,57],
[48,77,76,71,59,0,59,54,73,69],
[47,39,65,62,66,71,0,56,67,52],
[70,56,88,72,83,76,74,0,69,70],
[54,30,53,61,51,57,63,61,0,77],
[76,39,72,56,73,61,78,60,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,63,71,66,63,69,60,77,64],
[73,0,72,62,53,63,69,59,82,64],
[67,58,0,64,68,65,63,63,88,74],
[59,68,66,0,66,67,58,56,79,68],
[64,77,62,64,0,70,66,68,88,70],
[67,67,65,63,60,0,65,47,76,63],
[61,61,67,72,64,65,0,71,81,65],
[70,71,67,74,62,83,59,0,86,80],
[53,48,42,51,42,54,49,44,0,54],
[66,66,56,62,60,67,65,50,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,69,56,51,56,70,48,65,43],
[69,0,72,85,69,68,69,52,68,60],
[61,58,0,76,53,59,62,50,60,60],
[74,45,54,0,51,70,52,46,64,43],
[79,61,77,79,0,71,74,65,76,55],
[74,62,71,60,59,0,62,54,65,67],
[60,61,68,78,56,68,0,66,73,55],
[82,78,80,84,65,76,64,0,85,64],
[65,62,70,66,54,65,57,45,0,60],
[87,70,70,87,75,63,75,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,55,66,67,63,56,58,60,67],
[75,0,58,64,67,63,72,57,66,69],
[75,72,0,74,66,65,67,64,66,70],
[64,66,56,0,63,72,63,64,74,67],
[63,63,64,67,0,67,66,63,61,68],
[67,67,65,58,63,0,71,66,60,63],
[74,58,63,67,64,59,0,58,65,70],
[72,73,66,66,67,64,72,0,75,69],
[70,64,64,56,69,70,65,55,0,63],
[63,61,60,63,62,67,60,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,26,52,53,78,78,78,53,78],
[52,0,26,52,53,78,78,78,53,78],
[104,104,0,52,79,78,104,78,53,104],
[78,78,78,0,78,79,78,52,78,52],
[77,77,51,52,0,78,51,52,51,51],
[52,52,52,51,52,0,52,52,52,52],
[52,52,26,52,79,78,0,27,0,26],
[52,52,52,78,78,78,103,0,52,26],
[77,77,77,52,79,78,130,78,0,78],
[52,52,26,78,79,78,104,104,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,59,55,36,58,61,66,50],
[65,0,63,71,67,63,74,69,75,56],
[69,67,0,58,56,59,62,68,63,61],
[71,59,72,0,60,61,65,67,77,64],
[75,63,74,70,0,68,61,68,70,61],
[94,67,71,69,62,0,77,80,73,73],
[72,56,68,65,69,53,0,68,74,66],
[69,61,62,63,62,50,62,0,61,60],
[64,55,67,53,60,57,56,69,0,56],
[80,74,69,66,69,57,64,70,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,63,60,71,66,56,73,79,76],
[61,0,67,47,72,61,53,56,75,63],
[67,63,0,63,62,72,58,65,79,78],
[70,83,67,0,78,58,65,71,80,78],
[59,58,68,52,0,64,51,60,73,76],
[64,69,58,72,66,0,60,64,73,63],
[74,77,72,65,79,70,0,82,81,88],
[57,74,65,59,70,66,48,0,64,68],
[51,55,51,50,57,57,49,66,0,62],
[54,67,52,52,54,67,42,62,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,62,67,77,66,69,75,60,81],
[50,0,53,75,65,63,65,58,56,81],
[68,77,0,84,85,63,80,77,64,84],
[63,55,46,0,77,40,65,71,60,66],
[53,65,45,53,0,52,62,66,49,65],
[64,67,67,90,78,0,72,76,78,66],
[61,65,50,65,68,58,0,70,60,78],
[55,72,53,59,64,54,60,0,60,74],
[70,74,66,70,81,52,70,70,0,71],
[49,49,46,64,65,64,52,56,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,70,42,101,84,55,57,70,99],
[58,0,87,42,72,56,58,45,42,57],
[60,43,0,14,72,58,56,43,70,57],
[88,88,116,0,87,100,87,74,85,57],
[29,58,58,43,0,43,43,14,28,44],
[46,74,72,30,87,0,58,60,56,57],
[75,72,74,43,87,72,0,60,43,57],
[73,85,87,56,116,70,70,0,55,100],
[60,88,60,45,102,74,87,75,0,72],
[31,73,73,73,86,73,73,30,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,54,70,57,63,62,61,58,72],
[64,0,51,61,62,64,54,62,53,63],
[76,79,0,80,66,70,63,74,64,72],
[60,69,50,0,60,71,57,56,57,61],
[73,68,64,70,0,66,66,74,69,76],
[67,66,60,59,64,0,69,67,57,71],
[68,76,67,73,64,61,0,66,63,79],
[69,68,56,74,56,63,64,0,66,73],
[72,77,66,73,61,73,67,64,0,74],
[58,67,58,69,54,59,51,57,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,72,64,59,51,59,58,60,60],
[75,0,70,72,71,67,65,71,71,74],
[58,60,0,69,61,54,62,61,64,64],
[66,58,61,0,67,63,61,60,60,70],
[71,59,69,63,0,64,63,55,61,65],
[79,63,76,67,66,0,63,55,58,74],
[71,65,68,69,67,67,0,57,68,68],
[72,59,69,70,75,75,73,0,76,70],
[70,59,66,70,69,72,62,54,0,69],
[70,56,66,60,65,56,62,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,49,64,62,61,55,53,53,58],
[70,0,65,73,58,66,63,60,61,63],
[81,65,0,67,67,66,68,71,61,58],
[66,57,63,0,58,54,67,45,64,59],
[68,72,63,72,0,64,62,66,65,61],
[69,64,64,76,66,0,68,69,66,66],
[75,67,62,63,68,62,0,66,62,60],
[77,70,59,85,64,61,64,0,56,63],
[77,69,69,66,65,64,68,74,0,71],
[72,67,72,71,69,64,70,67,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,79,81,69,63,75,80,72,75],
[63,0,62,61,63,45,58,57,49,59],
[51,68,0,71,53,52,60,65,63,73],
[49,69,59,0,55,50,57,66,56,61],
[61,67,77,75,0,69,70,68,64,76],
[67,85,78,80,61,0,85,84,79,77],
[55,72,70,73,60,45,0,75,64,75],
[50,73,65,64,62,46,55,0,63,64],
[58,81,67,74,66,51,66,67,0,75],
[55,71,57,69,54,53,55,66,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,72,70,63,75,77,68,73,77],
[62,0,66,60,59,62,65,67,63,72],
[58,64,0,73,61,64,61,59,68,64],
[60,70,57,0,60,61,64,70,74,66],
[67,71,69,70,0,63,66,74,74,75],
[55,68,66,69,67,0,72,70,67,67],
[53,65,69,66,64,58,0,62,66,67],
[62,63,71,60,56,60,68,0,65,70],
[57,67,62,56,56,63,64,65,0,69],
[53,58,66,64,55,63,63,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,53,57,57,58,63,50,64,56],
[74,0,65,57,74,55,70,63,68,67],
[77,65,0,63,79,59,76,72,63,73],
[73,73,67,0,85,76,79,65,67,74],
[73,56,51,45,0,53,60,52,63,58],
[72,75,71,54,77,0,79,69,71,72],
[67,60,54,51,70,51,0,51,57,64],
[80,67,58,65,78,61,79,0,72,74],
[66,62,67,63,67,59,73,58,0,67],
[74,63,57,56,72,58,66,56,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,42,52,63,52,58,57,43,55],
[74,0,65,75,67,74,68,74,70,74],
[88,65,0,79,77,70,61,75,74,88],
[78,55,51,0,73,65,53,55,54,65],
[67,63,53,57,0,47,62,63,67,66],
[78,56,60,65,83,0,64,71,56,69],
[72,62,69,77,68,66,0,79,55,77],
[73,56,55,75,67,59,51,0,42,70],
[87,60,56,76,63,74,75,88,0,80],
[75,56,42,65,64,61,53,60,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,69,40,77,53,55,53,56,49],
[90,0,81,72,94,76,88,63,79,73],
[61,49,0,48,71,51,74,55,75,44],
[90,58,82,0,81,78,90,75,84,72],
[53,36,59,49,0,50,60,36,55,43],
[77,54,79,52,80,0,82,54,59,71],
[75,42,56,40,70,48,0,58,66,52],
[77,67,75,55,94,76,72,0,71,78],
[74,51,55,46,75,71,64,59,0,49],
[81,57,86,58,87,59,78,52,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,64,69,60,53,56,64,65,62],
[65,0,73,69,63,61,61,62,59,63],
[66,57,0,63,59,65,63,66,60,67],
[61,61,67,0,63,59,58,60,69,65],
[70,67,71,67,0,63,63,64,67,75],
[77,69,65,71,67,0,75,73,65,67],
[74,69,67,72,67,55,0,65,64,62],
[66,68,64,70,66,57,65,0,68,65],
[65,71,70,61,63,65,66,62,0,69],
[68,67,63,65,55,63,68,65,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,54,69,66,60,65,67,67,66],
[69,0,68,71,70,61,63,72,79,76],
[76,62,0,68,71,67,54,66,70,78],
[61,59,62,0,64,58,60,73,51,63],
[64,60,59,66,0,59,56,65,56,73],
[70,69,63,72,71,0,64,68,57,66],
[65,67,76,70,74,66,0,70,62,68],
[63,58,64,57,65,62,60,0,57,64],
[63,51,60,79,74,73,68,73,0,76],
[64,54,52,67,57,64,62,66,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,60,53,62,60,67,55,56],
[66,0,67,57,59,58,56,58,62,63],
[66,63,0,60,50,50,65,66,60,57],
[70,73,70,0,72,61,76,70,68,64],
[77,71,80,58,0,65,67,69,71,64],
[68,72,80,69,65,0,70,72,70,72],
[70,74,65,54,63,60,0,67,65,65],
[63,72,64,60,61,58,63,0,63,67],
[75,68,70,62,59,60,65,67,0,64],
[74,67,73,66,66,58,65,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,71,56,60,67,54,70,60,57],
[78,0,61,53,67,76,59,70,57,58],
[59,69,0,65,58,62,61,80,51,65],
[74,77,65,0,76,74,68,84,63,61],
[70,63,72,54,0,78,60,81,65,57],
[63,54,68,56,52,0,61,77,60,49],
[76,71,69,62,70,69,0,83,65,63],
[60,60,50,46,49,53,47,0,49,46],
[70,73,79,67,65,70,65,81,0,64],
[73,72,65,69,73,81,67,84,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,72,70,74,79,65,71,75],
[64,0,62,64,70,69,70,62,71,66],
[63,68,0,69,60,64,72,56,66,64],
[58,66,61,0,66,74,73,55,71,70],
[60,60,70,64,0,70,58,60,64,63],
[56,61,66,56,60,0,59,58,63,69],
[51,60,58,57,72,71,0,58,61,65],
[65,68,74,75,70,72,72,0,68,74],
[59,59,64,59,66,67,69,62,0,69],
[55,64,66,60,67,61,65,56,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,68,71,71,85,59,58,56,53],
[55,0,60,49,52,69,49,52,51,50],
[62,70,0,59,42,72,43,51,64,59],
[59,81,71,0,69,78,50,56,57,61],
[59,78,88,61,0,81,54,62,61,66],
[45,61,58,52,49,0,40,53,51,54],
[71,81,87,80,76,90,0,78,61,78],
[72,78,79,74,68,77,52,0,69,61],
[74,79,66,73,69,79,69,61,0,72],
[77,80,71,69,64,76,52,69,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,84,62,62,73,62,47,54,71],
[59,0,78,53,86,81,64,59,59,81],
[46,52,0,62,66,50,50,42,53,74],
[68,77,68,0,65,75,67,58,74,69],
[68,44,64,65,0,54,58,75,73,58],
[57,49,80,55,76,0,42,49,63,64],
[68,66,80,63,72,88,0,56,63,63],
[83,71,88,72,55,81,74,0,86,65],
[76,71,77,56,57,67,67,44,0,74],
[59,49,56,61,72,66,67,65,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,63,61,63,63,71,62,59,66],
[55,0,47,57,53,55,66,51,53,54],
[67,83,0,67,64,74,79,66,61,68],
[69,73,63,0,63,67,76,64,67,63],
[67,77,66,67,0,71,79,62,64,67],
[67,75,56,63,59,0,66,61,60,63],
[59,64,51,54,51,64,0,58,56,65],
[68,79,64,66,68,69,72,0,63,69],
[71,77,69,63,66,70,74,67,0,69],
[64,76,62,67,63,67,65,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,55,73,42,55,73,86,99,40],
[59,0,44,46,31,44,102,46,72,43],
[75,86,0,73,44,71,86,86,85,56],
[57,84,57,0,57,57,87,56,88,43],
[88,99,86,73,0,71,87,99,86,55],
[75,86,59,73,59,0,73,72,57,57],
[57,28,44,43,43,57,0,43,56,55],
[44,84,44,74,31,58,87,0,73,58],
[31,58,45,42,44,73,74,57,0,71],
[90,87,74,87,75,73,75,72,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,37,60,49,59,50,74,60,60],
[79,0,71,62,63,57,72,97,63,81],
[93,59,0,83,79,72,66,91,57,74],
[70,68,47,0,70,65,65,98,65,60],
[81,67,51,60,0,75,67,81,59,42],
[71,73,58,65,55,0,56,79,41,57],
[80,58,64,65,63,74,0,88,67,65],
[56,33,39,32,49,51,42,0,32,48],
[70,67,73,65,71,89,63,98,0,65],
[70,49,56,70,88,73,65,82,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,51,69,61,61,57,52,75,53],
[72,0,54,78,60,71,57,54,80,63],
[79,76,0,98,69,89,75,72,82,61],
[61,52,32,0,46,60,63,45,58,47],
[69,70,61,84,0,73,61,66,67,52],
[69,59,41,70,57,0,60,48,64,60],
[73,73,55,67,69,70,0,58,85,64],
[78,76,58,85,64,82,72,0,82,68],
[55,50,48,72,63,66,45,48,0,50],
[77,67,69,83,78,70,66,62,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,64,61,66,50,53,57,54,54],
[76,0,68,66,81,58,65,73,74,68],
[66,62,0,59,68,56,48,69,61,54],
[69,64,71,0,77,59,58,71,66,72],
[64,49,62,53,0,50,43,62,49,57],
[80,72,74,71,80,0,59,73,77,77],
[77,65,82,72,87,71,0,75,77,74],
[73,57,61,59,68,57,55,0,61,61],
[76,56,69,64,81,53,53,69,0,63],
[76,62,76,58,73,53,56,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,74,54,61,63,68,64,65,68],
[66,0,60,55,69,66,75,69,67,76],
[56,70,0,65,70,59,67,76,68,71],
[76,75,65,0,74,65,70,74,70,84],
[69,61,60,56,0,56,58,64,55,62],
[67,64,71,65,74,0,64,67,57,73],
[62,55,63,60,72,66,0,71,62,72],
[66,61,54,56,66,63,59,0,55,59],
[65,63,62,60,75,73,68,75,0,60],
[62,54,59,46,68,57,58,71,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,66,70,74,68,56,78,67,61],
[59,0,65,66,73,62,54,70,67,63],
[64,65,0,64,69,65,54,70,67,64],
[60,64,66,0,78,72,71,74,64,66],
[56,57,61,52,0,62,50,63,49,52],
[62,68,65,58,68,0,59,73,68,62],
[74,76,76,59,80,71,0,69,66,69],
[52,60,60,56,67,57,61,0,63,56],
[63,63,63,66,81,62,64,67,0,61],
[69,67,66,64,78,68,61,74,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,65,84,75,59,66,64,71,68],
[62,0,47,71,61,51,52,57,50,44],
[65,83,0,72,64,80,53,59,66,65],
[46,59,58,0,58,57,50,48,40,61],
[55,69,66,72,0,75,45,46,57,66],
[71,79,50,73,55,0,54,67,61,58],
[64,78,77,80,85,76,0,75,79,73],
[66,73,71,82,84,63,55,0,75,57],
[59,80,64,90,73,69,51,55,0,59],
[62,86,65,69,64,72,57,73,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,85,62,71,62,59,75,80,75],
[55,0,70,50,63,53,53,57,75,72],
[45,60,0,53,58,56,53,57,63,57],
[68,80,77,0,61,68,63,70,77,61],
[59,67,72,69,0,53,61,65,74,62],
[68,77,74,62,77,0,73,67,70,76],
[71,77,77,67,69,57,0,75,83,70],
[55,73,73,60,65,63,55,0,82,64],
[50,55,67,53,56,60,47,48,0,57],
[55,58,73,69,68,54,60,66,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,90,75,59,51,56,68,62,61],
[74,0,93,64,83,69,72,72,75,71],
[40,37,0,52,46,44,28,32,45,27],
[55,66,78,0,76,65,76,58,79,58],
[71,47,84,54,0,46,54,60,55,48],
[79,61,86,65,84,0,62,61,83,68],
[74,58,102,54,76,68,0,74,60,78],
[62,58,98,72,70,69,56,0,81,74],
[68,55,85,51,75,47,70,49,0,57],
[69,59,103,72,82,62,52,56,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,48,64,74,81,53,72,57,65],
[80,0,62,71,61,54,56,61,66,46],
[82,68,0,56,83,64,76,74,58,62],
[66,59,74,0,73,90,67,81,56,55],
[56,69,47,57,0,47,42,71,42,34],
[49,76,66,40,83,0,50,84,51,41],
[77,74,54,63,88,80,0,70,73,70],
[58,69,56,49,59,46,60,0,65,40],
[73,64,72,74,88,79,57,65,0,60],
[65,84,68,75,96,89,60,90,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,75,59,63,57,68,64,66,59],
[67,0,68,65,63,64,64,59,60,57],
[55,62,0,55,56,59,58,52,63,56],
[71,65,75,0,61,59,69,64,65,59],
[67,67,74,69,0,66,69,70,62,59],
[73,66,71,71,64,0,60,66,64,63],
[62,66,72,61,61,70,0,56,69,66],
[66,71,78,66,60,64,74,0,66,69],
[64,70,67,65,68,66,61,64,0,58],
[71,73,74,71,71,67,64,61,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,63,44,73,52,55,59,62],
[72,0,64,74,63,64,69,64,74,77],
[69,66,0,75,70,65,64,65,72,64],
[67,56,55,0,59,64,59,59,70,59],
[86,67,60,71,0,72,68,65,63,73],
[57,66,65,66,58,0,58,56,71,65],
[78,61,66,71,62,72,0,60,71,63],
[75,66,65,71,65,74,70,0,75,59],
[71,56,58,60,67,59,59,55,0,78],
[68,53,66,71,57,65,67,71,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,64,67,54,61,68,58,68,70],
[79,0,69,72,65,78,76,65,80,78],
[66,61,0,73,63,61,75,70,68,71],
[63,58,57,0,45,64,62,61,52,67],
[76,65,67,85,0,74,76,71,78,76],
[69,52,69,66,56,0,71,67,69,67],
[62,54,55,68,54,59,0,66,71,59],
[72,65,60,69,59,63,64,0,71,67],
[62,50,62,78,52,61,59,59,0,63],
[60,52,59,63,54,63,71,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,71,50,69,57,59,66,61],
[62,0,62,57,62,56,56,66,57,50],
[60,68,0,65,56,61,53,57,64,55],
[59,73,65,0,59,69,60,66,69,56],
[80,68,74,71,0,76,65,55,71,64],
[61,74,69,61,54,0,62,74,69,70],
[73,74,77,70,65,68,0,82,70,75],
[71,64,73,64,75,56,48,0,70,52],
[64,73,66,61,59,61,60,60,0,61],
[69,80,75,74,66,60,55,78,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,58,58,68,47,56,68,58,67],
[81,0,68,65,64,58,77,62,76,58],
[72,62,0,68,75,73,63,70,71,77],
[72,65,62,0,71,72,75,53,61,72],
[62,66,55,59,0,55,58,56,63,77],
[83,72,57,58,75,0,70,67,75,66],
[74,53,67,55,72,60,0,65,53,67],
[62,68,60,77,74,63,65,0,74,72],
[72,54,59,69,67,55,77,56,0,61],
[63,72,53,58,53,64,63,58,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,58,76,73,67,76,67,73],
[62,0,76,56,66,66,75,70,62,69],
[62,54,0,58,70,69,64,66,62,67],
[72,74,72,0,65,78,70,74,63,75],
[54,64,60,65,0,63,71,55,52,76],
[57,64,61,52,67,0,72,61,61,62],
[63,55,66,60,59,58,0,63,57,66],
[54,60,64,56,75,69,67,0,53,67],
[63,68,68,67,78,69,73,77,0,77],
[57,61,63,55,54,68,64,63,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,73,58,65,68,68,54,59],
[66,0,71,76,62,61,67,70,65,53],
[70,59,0,68,57,63,69,64,60,58],
[57,54,62,0,60,61,64,50,60,56],
[72,68,73,70,0,67,68,68,63,69],
[65,69,67,69,63,0,74,69,66,70],
[62,63,61,66,62,56,0,68,53,50],
[62,60,66,80,62,61,62,0,64,52],
[76,65,70,70,67,64,77,66,0,56],
[71,77,72,74,61,60,80,78,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,71,76,60,72,68,71,63,57],
[55,0,49,63,55,56,51,61,48,53],
[59,81,0,75,63,78,60,74,66,56],
[54,67,55,0,53,60,54,61,46,45],
[70,75,67,77,0,64,67,68,55,53],
[58,74,52,70,66,0,61,63,55,52],
[62,79,70,76,63,69,0,71,56,57],
[59,69,56,69,62,67,59,0,56,46],
[67,82,64,84,75,75,74,74,0,66],
[73,77,74,85,77,78,73,84,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,60,62,61,68,60,62,74,59],
[67,0,57,62,58,63,64,62,71,61],
[70,73,0,67,75,73,63,60,70,74],
[68,68,63,0,63,73,75,64,73,67],
[69,72,55,67,0,70,59,70,68,72],
[62,67,57,57,60,0,66,65,71,63],
[70,66,67,55,71,64,0,64,72,69],
[68,68,70,66,60,65,66,0,66,59],
[56,59,60,57,62,59,58,64,0,57],
[71,69,56,63,58,67,61,71,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,56,87,78,63,79,71,78,69],
[51,0,50,42,88,43,89,64,58,70],
[74,80,0,67,94,60,89,80,74,80],
[43,88,63,0,79,65,102,72,57,68],
[52,42,36,51,0,58,61,43,43,50],
[67,87,70,65,72,0,88,71,79,79],
[51,41,41,28,69,42,0,55,49,70],
[59,66,50,58,87,59,75,0,58,79],
[52,72,56,73,87,51,81,72,0,93],
[61,60,50,62,80,51,60,51,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,72,73,63,53,52,70,60,63],
[66,0,65,72,62,73,72,61,60,64],
[58,65,0,71,70,69,58,67,62,75],
[57,58,59,0,44,43,52,51,67,67],
[67,68,60,86,0,66,50,57,66,72],
[77,57,61,87,64,0,67,77,63,73],
[78,58,72,78,80,63,0,63,65,80],
[60,69,63,79,73,53,67,0,67,78],
[70,70,68,63,64,67,65,63,0,66],
[67,66,55,63,58,57,50,52,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,56,81,81,67,59,63,52,63],
[67,0,45,61,55,60,43,64,29,53],
[74,85,0,85,89,67,60,70,65,73],
[49,69,45,0,45,48,52,57,30,53],
[49,75,41,85,0,54,63,53,52,51],
[63,70,63,82,76,0,67,67,53,68],
[71,87,70,78,67,63,0,73,54,66],
[67,66,60,73,77,63,57,0,48,60],
[78,101,65,100,78,77,76,82,0,80],
[67,77,57,77,79,62,64,70,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,63,62,67,69,79,64,60,70],
[62,0,71,69,65,61,68,58,69,57],
[67,59,0,68,51,64,74,56,63,64],
[68,61,62,0,65,73,63,72,66,63],
[63,65,79,65,0,70,77,73,73,69],
[61,69,66,57,60,0,74,67,64,64],
[51,62,56,67,53,56,0,55,65,60],
[66,72,74,58,57,63,75,0,62,62],
[70,61,67,64,57,66,65,68,0,64],
[60,73,66,67,61,66,70,68,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,64,64,65,71,50,66,59,55],
[65,0,71,68,70,75,69,77,65,68],
[66,59,0,73,64,64,67,68,57,60],
[66,62,57,0,55,56,58,63,47,51],
[65,60,66,75,0,62,60,67,61,70],
[59,55,66,74,68,0,67,70,53,65],
[80,61,63,72,70,63,0,71,54,65],
[64,53,62,67,63,60,59,0,48,62],
[71,65,73,83,69,77,76,82,0,73],
[75,62,70,79,60,65,65,68,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,66,60,76,74,79,81,66,99],
[48,0,74,69,76,64,80,78,85,96],
[64,56,0,61,80,74,72,67,79,92],
[70,61,69,0,72,64,72,79,62,75],
[54,54,50,58,0,70,58,59,67,87],
[56,66,56,66,60,0,60,62,43,69],
[51,50,58,58,72,70,0,51,75,82],
[49,52,63,51,71,68,79,0,74,85],
[64,45,51,68,63,87,55,56,0,89],
[31,34,38,55,43,61,48,45,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,51,44,59,57,59,49,53,50],
[73,0,65,62,64,58,66,62,63,57],
[79,65,0,58,66,62,71,59,56,56],
[86,68,72,0,70,62,75,61,64,72],
[71,66,64,60,0,64,65,47,64,56],
[73,72,68,68,66,0,70,65,62,51],
[71,64,59,55,65,60,0,63,57,50],
[81,68,71,69,83,65,67,0,67,48],
[77,67,74,66,66,68,73,63,0,58],
[80,73,74,58,74,79,80,82,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,69,51,54,72,69,81,65,71],
[73,0,80,66,65,79,78,81,65,77],
[61,50,0,58,51,62,64,62,67,58],
[79,64,72,0,61,77,71,78,63,71],
[76,65,79,69,0,74,71,73,62,80],
[58,51,68,53,56,0,59,66,61,75],
[61,52,66,59,59,71,0,71,59,62],
[49,49,68,52,57,64,59,0,50,64],
[65,65,63,67,68,69,71,80,0,71],
[59,53,72,59,50,55,68,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,60,72,52,70,50,60,21,51],
[50,0,69,71,81,60,71,71,50,61],
[70,61,0,80,41,49,50,80,61,70],
[58,59,50,0,40,48,48,68,49,59],
[78,49,89,90,0,69,69,89,50,60],
[60,70,81,82,61,0,60,60,70,72],
[80,59,80,82,61,70,0,69,50,61],
[70,59,50,62,41,70,61,0,60,81],
[109,80,69,81,80,60,80,70,0,80],
[79,69,60,71,70,58,69,49,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,59,71,84,60,71,83,82,72],
[94,0,82,68,106,47,70,83,92,71],
[71,48,0,70,84,58,70,84,104,72],
[59,62,60,0,73,62,70,72,69,36],
[46,24,46,57,0,47,58,59,80,47],
[70,83,72,68,83,0,70,71,57,70],
[59,60,60,60,72,60,0,59,69,47],
[47,47,46,58,71,59,71,0,58,50],
[48,38,26,61,50,73,61,72,0,49],
[58,59,58,94,83,60,83,80,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,63,76,69,75,73,77,64,72],
[58,0,61,64,59,61,61,70,52,65],
[67,69,0,60,60,70,66,64,63,62],
[54,66,70,0,69,64,71,69,70,64],
[61,71,70,61,0,69,66,69,56,66],
[55,69,60,66,61,0,63,72,60,65],
[57,69,64,59,64,67,0,60,62,66],
[53,60,66,61,61,58,70,0,60,60],
[66,78,67,60,74,70,68,70,0,69],
[58,65,68,66,64,65,64,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,80,71,66,72,70,73,75,67],
[66,0,73,81,69,61,64,74,87,65],
[50,57,0,59,54,53,59,73,67,58],
[59,49,71,0,63,49,65,65,65,53],
[64,61,76,67,0,75,71,86,77,79],
[58,69,77,81,55,0,59,75,75,73],
[60,66,71,65,59,71,0,80,74,68],
[57,56,57,65,44,55,50,0,68,43],
[55,43,63,65,53,55,56,62,0,52],
[63,65,72,77,51,57,62,87,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,64,72,61,73,62,75,60,68],
[71,0,69,68,69,64,69,71,65,70],
[66,61,0,70,63,57,65,77,50,61],
[58,62,60,0,65,53,66,68,56,68],
[69,61,67,65,0,70,72,78,68,66],
[57,66,73,77,60,0,62,76,66,70],
[68,61,65,64,58,68,0,66,53,61],
[55,59,53,62,52,54,64,0,56,60],
[70,65,80,74,62,64,77,74,0,66],
[62,60,69,62,64,60,69,70,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,77,71,68,64,68,78,66,72],
[55,0,72,67,76,59,57,67,65,66],
[53,58,0,59,75,63,60,65,56,66],
[59,63,71,0,73,61,58,65,61,66],
[62,54,55,57,0,53,51,59,52,56],
[66,71,67,69,77,0,66,65,65,79],
[62,73,70,72,79,64,0,71,72,70],
[52,63,65,65,71,65,59,0,55,70],
[64,65,74,69,78,65,58,75,0,73],
[58,64,64,64,74,51,60,60,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,64,70,62,56,69,71,66,63],
[58,0,61,71,71,61,66,72,67,61],
[66,69,0,64,68,60,67,73,68,67],
[60,59,66,0,59,53,62,71,61,57],
[68,59,62,71,0,66,69,74,66,71],
[74,69,70,77,64,0,71,84,64,65],
[61,64,63,68,61,59,0,75,68,70],
[59,58,57,59,56,46,55,0,60,53],
[64,63,62,69,64,66,62,70,0,63],
[67,69,63,73,59,65,60,77,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,54,65,67,59,52,75,70],
[62,0,60,56,61,75,49,56,61,62],
[62,70,0,64,70,75,48,53,72,63],
[76,74,66,0,59,70,60,62,74,74],
[65,69,60,71,0,78,57,54,69,58],
[63,55,55,60,52,0,52,55,61,71],
[71,81,82,70,73,78,0,65,66,70],
[78,74,77,68,76,75,65,0,67,74],
[55,69,58,56,61,69,64,63,0,65],
[60,68,67,56,72,59,60,56,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,71,54,69,53,59,55,62,54],
[70,0,72,58,74,69,67,66,70,63],
[59,58,0,51,54,57,58,61,62,53],
[76,72,79,0,73,77,69,76,77,63],
[61,56,76,57,0,60,63,61,55,57],
[77,61,73,53,70,0,66,64,73,57],
[71,63,72,61,67,64,0,68,74,69],
[75,64,69,54,69,66,62,0,67,55],
[68,60,68,53,75,57,56,63,0,50],
[76,67,77,67,73,73,61,75,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,33,69,53,65,58,65,74,52],
[61,0,57,84,47,73,45,67,80,54],
[97,73,0,89,77,49,58,84,74,77],
[61,46,41,0,47,49,41,49,58,57],
[77,83,53,83,0,79,59,69,87,65],
[65,57,81,81,51,0,58,63,87,75],
[72,85,72,89,71,72,0,65,97,73],
[65,63,46,81,61,67,65,0,68,47],
[56,50,56,72,43,43,33,62,0,51],
[78,76,53,73,65,55,57,83,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,53,59,67,39,56,47,69,56],
[60,0,51,66,60,37,76,50,51,48],
[77,79,0,76,85,58,65,56,83,58],
[71,64,54,0,67,43,68,45,57,35],
[63,70,45,63,0,40,63,38,64,43],
[91,93,72,87,90,0,71,70,76,62],
[74,54,65,62,67,59,0,50,73,60],
[83,80,74,85,92,60,80,0,76,70],
[61,79,47,73,66,54,57,54,0,54],
[74,82,72,95,87,68,70,60,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,77,51,58,72,46,79,65,56],
[63,0,65,73,56,68,47,62,58,52],
[53,65,0,54,66,69,49,60,70,51],
[79,57,76,0,48,73,53,73,59,57],
[72,74,64,82,0,69,71,83,79,77],
[58,62,61,57,61,0,48,66,56,56],
[84,83,81,77,59,82,0,84,57,63],
[51,68,70,57,47,64,46,0,63,49],
[65,72,60,71,51,74,73,67,0,50],
[74,78,79,73,53,74,67,81,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,74,66,56,82,71,65,65,67],
[53,0,56,43,55,34,51,61,54,35],
[56,74,0,61,46,43,69,45,64,35],
[64,87,69,0,67,26,81,63,67,36],
[74,75,84,63,0,63,61,72,65,56],
[48,96,87,104,67,0,80,65,76,95],
[59,79,61,49,69,50,0,58,86,67],
[65,69,85,67,58,65,72,0,86,59],
[65,76,66,63,65,54,44,44,0,56],
[63,95,95,94,74,35,63,71,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,61,66,59,60,65,72,64,59],
[77,0,78,77,62,55,69,74,68,67],
[69,52,0,64,63,54,59,65,53,61],
[64,53,66,0,58,58,65,60,63,61],
[71,68,67,72,0,67,69,78,66,64],
[70,75,76,72,63,0,76,77,70,63],
[65,61,71,65,61,54,0,63,55,60],
[58,56,65,70,52,53,67,0,58,60],
[66,62,77,67,64,60,75,72,0,59],
[71,63,69,69,66,67,70,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,66,61,53,68,53,53,59,53],
[59,0,67,61,61,66,59,53,48,61],
[64,63,0,70,68,68,64,61,57,61],
[69,69,60,0,65,62,67,61,61,67],
[77,69,62,65,0,66,64,59,59,65],
[62,64,62,68,64,0,61,59,56,64],
[77,71,66,63,66,69,0,47,66,69],
[77,77,69,69,71,71,83,0,59,72],
[71,82,73,69,71,74,64,71,0,71],
[77,69,69,63,65,66,61,58,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,76,72,53,64,65,70,66],
[63,0,63,66,67,62,59,67,62,69],
[67,67,0,71,75,63,66,69,73,61],
[54,64,59,0,73,60,52,64,61,63],
[58,63,55,57,0,55,46,64,61,60],
[77,68,67,70,75,0,62,65,78,68],
[66,71,64,78,84,68,0,75,74,68],
[65,63,61,66,66,65,55,0,70,65],
[60,68,57,69,69,52,56,60,0,52],
[64,61,69,67,70,62,62,65,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,74,62,73,66,68,62,66,67],
[68,0,75,69,71,66,68,61,69,75],
[56,55,0,59,68,49,61,56,63,61],
[68,61,71,0,65,59,65,62,66,61],
[57,59,62,65,0,60,66,67,64,68],
[64,64,81,71,70,0,77,61,72,61],
[62,62,69,65,64,53,0,54,60,61],
[68,69,74,68,63,69,76,0,72,64],
[64,61,67,64,66,58,70,58,0,70],
[63,55,69,69,62,69,69,66,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,69,71,69,72,64,75,74],
[65,0,70,69,71,66,64,69,69,68],
[60,60,0,57,73,68,67,64,67,60],
[61,61,73,0,66,68,71,61,69,68],
[59,59,57,64,0,60,61,51,64,63],
[61,64,62,62,70,0,64,66,64,59],
[58,66,63,59,69,66,0,60,56,64],
[66,61,66,69,79,64,70,0,69,69],
[55,61,63,61,66,66,74,61,0,59],
[56,62,70,62,67,71,66,61,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,86,79,65,62,73,41,83,70],
[64,0,93,78,68,53,56,63,75,54],
[44,37,0,56,57,41,61,43,61,49],
[51,52,74,0,50,34,60,51,66,49],
[65,62,73,80,0,20,50,60,68,80],
[68,77,89,96,110,0,83,63,91,88],
[57,74,69,70,80,47,0,65,86,71],
[89,67,87,79,70,67,65,0,82,82],
[47,55,69,64,62,39,44,48,0,77],
[60,76,81,81,50,42,59,48,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,69,69,72,73,65,52,61,57],
[58,0,65,64,79,68,88,54,71,59],
[61,65,0,47,60,51,74,58,57,59],
[61,66,83,0,63,77,78,67,71,79],
[58,51,70,67,0,58,80,65,73,65],
[57,62,79,53,72,0,78,57,63,47],
[65,42,56,52,50,52,0,66,43,45],
[78,76,72,63,65,73,64,0,66,64],
[69,59,73,59,57,67,87,64,0,62],
[73,71,71,51,65,83,85,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,56,60,53,66,66,61,69],
[65,0,68,62,67,60,67,71,65,68],
[65,62,0,72,67,67,67,62,69,68],
[74,68,58,0,70,63,65,61,61,73],
[70,63,63,60,0,60,73,64,66,56],
[77,70,63,67,70,0,72,65,67,76],
[64,63,63,65,57,58,0,66,67,64],
[64,59,68,69,66,65,64,0,63,64],
[69,65,61,69,64,63,63,67,0,72],
[61,62,62,57,74,54,66,66,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,46,53,73,46,63,56,60,65],
[62,0,63,44,64,65,67,61,60,59],
[84,67,0,66,77,59,73,65,63,68],
[77,86,64,0,82,71,79,73,73,66],
[57,66,53,48,0,51,67,59,55,68],
[84,65,71,59,79,0,77,58,63,68],
[67,63,57,51,63,53,0,62,58,64],
[74,69,65,57,71,72,68,0,61,63],
[70,70,67,57,75,67,72,69,0,58],
[65,71,62,64,62,62,66,67,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,59,67,65,54,69,67,61,64],
[58,0,56,54,56,55,65,56,64,50],
[71,74,0,68,67,72,80,72,70,65],
[63,76,62,0,64,67,75,64,57,52],
[65,74,63,66,0,65,75,61,62,64],
[76,75,58,63,65,0,76,59,61,62],
[61,65,50,55,55,54,0,53,58,49],
[63,74,58,66,69,71,77,0,59,62],
[69,66,60,73,68,69,72,71,0,55],
[66,80,65,78,66,68,81,68,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,72,71,72,67,64,68,56],
[70,0,70,73,67,67,57,54,66,68],
[70,60,0,85,74,64,65,60,68,64],
[58,57,45,0,59,54,52,50,63,52],
[59,63,56,71,0,54,63,66,58,60],
[58,63,66,76,76,0,69,67,77,54],
[63,73,65,78,67,61,0,55,68,53],
[66,76,70,80,64,63,75,0,79,72],
[62,64,62,67,72,53,62,51,0,61],
[74,62,66,78,70,76,77,58,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,50,51,55,56,61,55,65,55],
[76,0,68,64,71,67,76,67,66,65],
[80,62,0,69,65,62,69,68,76,66],
[79,66,61,0,64,62,67,66,73,76],
[75,59,65,66,0,66,74,65,74,73],
[74,63,68,68,64,0,76,69,70,73],
[69,54,61,63,56,54,0,51,61,59],
[75,63,62,64,65,61,79,0,69,75],
[65,64,54,57,56,60,69,61,0,63],
[75,65,64,54,57,57,71,55,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,56,51,55,57,46,47,52,53],
[83,0,77,75,65,63,51,62,74,60],
[74,53,0,66,73,55,55,62,67,62],
[79,55,64,0,54,52,63,69,61,63],
[75,65,57,76,0,51,44,53,62,47],
[73,67,75,78,79,0,66,76,63,72],
[84,79,75,67,86,64,0,70,76,67],
[83,68,68,61,77,54,60,0,65,59],
[78,56,63,69,68,67,54,65,0,56],
[77,70,68,67,83,58,63,71,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,62,74,70,85,73,67,67,96],
[54,0,48,63,75,68,60,58,57,64],
[68,82,0,63,67,76,69,67,58,71],
[56,67,67,0,73,72,58,60,64,59],
[60,55,63,57,0,64,53,57,55,64],
[45,62,54,58,66,0,66,56,56,65],
[57,70,61,72,77,64,0,60,69,72],
[63,72,63,70,73,74,70,0,58,75],
[63,73,72,66,75,74,61,72,0,81],
[34,66,59,71,66,65,58,55,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,62,74,80,61,66,60,61,62],
[58,0,59,55,65,59,61,49,52,56],
[68,71,0,64,74,60,66,63,59,60],
[56,75,66,0,77,70,69,63,71,64],
[50,65,56,53,0,50,65,60,49,46],
[69,71,70,60,80,0,70,65,72,65],
[64,69,64,61,65,60,0,68,58,62],
[70,81,67,67,70,65,62,0,64,67],
[69,78,71,59,81,58,72,66,0,55],
[68,74,70,66,84,65,68,63,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,66,56,70,59,58,58,60,59],
[72,0,63,60,70,67,67,60,66,65],
[64,67,0,63,60,66,60,55,70,60],
[74,70,67,0,77,66,67,62,76,68],
[60,60,70,53,0,63,58,62,70,57],
[71,63,64,64,67,0,67,59,69,57],
[72,63,70,63,72,63,0,62,67,63],
[72,70,75,68,68,71,68,0,63,63],
[70,64,60,54,60,61,63,67,0,62],
[71,65,70,62,73,73,67,67,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,49,57,52,60,46,66,61,70],
[72,0,49,64,50,56,56,66,67,90],
[81,81,0,76,66,72,62,82,68,91],
[73,66,54,0,56,53,50,71,72,78],
[78,80,64,74,0,78,67,78,71,93],
[70,74,58,77,52,0,57,68,65,77],
[84,74,68,80,63,73,0,78,82,82],
[64,64,48,59,52,62,52,0,59,71],
[69,63,62,58,59,65,48,71,0,80],
[60,40,39,52,37,53,48,59,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,87,87,44,44,87,43,43,130],
[87,0,87,87,44,87,87,87,87,130],
[43,43,0,87,44,44,130,43,43,130],
[43,43,43,0,44,0,86,43,43,86],
[86,86,86,86,0,43,86,86,43,86],
[86,43,86,130,87,0,130,43,43,86],
[43,43,0,44,44,0,0,43,0,43],
[87,43,87,87,44,87,87,0,87,130],
[87,43,87,87,87,87,130,43,0,87],
[0,0,0,44,44,44,87,0,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,62,88,65,74,69,71,75],
[61,0,57,70,91,59,65,67,71,74],
[65,73,0,71,98,78,81,71,72,77],
[68,60,59,0,85,55,70,68,64,68],
[42,39,32,45,0,40,45,39,49,48],
[65,71,52,75,90,0,64,71,72,76],
[56,65,49,60,85,66,0,65,66,80],
[61,63,59,62,91,59,65,0,68,73],
[59,59,58,66,81,58,64,62,0,70],
[55,56,53,62,82,54,50,57,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,61,69,75,58,75,65,76,70],
[69,0,61,62,57,62,67,62,66,78],
[69,69,0,63,57,75,64,64,65,52],
[61,68,67,0,79,70,80,77,66,75],
[55,73,73,51,0,65,68,56,57,70],
[72,68,55,60,65,0,63,58,79,57],
[55,63,66,50,62,67,0,66,59,65],
[65,68,66,53,74,72,64,0,63,63],
[54,64,65,64,73,51,71,67,0,68],
[60,52,78,55,60,73,65,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,57,64,57,58,61,54,66,50],
[67,0,64,68,62,62,62,62,68,63],
[73,66,0,67,69,68,67,60,59,56],
[66,62,63,0,63,63,65,56,68,59],
[73,68,61,67,0,60,66,63,64,61],
[72,68,62,67,70,0,71,60,73,67],
[69,68,63,65,64,59,0,64,62,52],
[76,68,70,74,67,70,66,0,76,59],
[64,62,71,62,66,57,68,54,0,58],
[80,67,74,71,69,63,78,71,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,86,73,64,62,76,69,69,68],
[57,0,68,66,67,55,78,65,54,59],
[44,62,0,61,54,52,67,57,52,66],
[57,64,69,0,57,60,75,69,59,61],
[66,63,76,73,0,60,72,54,70,66],
[68,75,78,70,70,0,70,74,62,76],
[54,52,63,55,58,60,0,58,49,57],
[61,65,73,61,76,56,72,0,68,68],
[61,76,78,71,60,68,81,62,0,79],
[62,71,64,69,64,54,73,62,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,64,74,59,63,66,69,65,64],
[74,0,64,81,64,72,74,68,64,70],
[66,66,0,66,62,62,69,59,64,69],
[56,49,64,0,53,62,66,60,59,56],
[71,66,68,77,0,75,73,67,62,73],
[67,58,68,68,55,0,71,59,53,65],
[64,56,61,64,57,59,0,65,64,55],
[61,62,71,70,63,71,65,0,66,67],
[65,66,66,71,68,77,66,64,0,61],
[66,60,61,74,57,65,75,63,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,60,71,77,58,81,70,59,67],
[59,0,55,60,60,61,69,72,68,59],
[70,75,0,73,75,67,80,80,66,64],
[59,70,57,0,65,66,67,75,66,60],
[53,70,55,65,0,66,70,69,66,60],
[72,69,63,64,64,0,70,73,65,66],
[49,61,50,63,60,60,0,61,53,51],
[60,58,50,55,61,57,69,0,60,52],
[71,62,64,64,64,65,77,70,0,64],
[63,71,66,70,70,64,79,78,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,60,68,65,66,81,60,73,70],
[60,0,58,70,64,74,81,58,66,61],
[70,72,0,73,62,60,80,68,75,73],
[62,60,57,0,65,48,66,54,64,65],
[65,66,68,65,0,55,80,71,61,68],
[64,56,70,82,75,0,82,76,83,85],
[49,49,50,64,50,48,0,46,55,54],
[70,72,62,76,59,54,84,0,64,70],
[57,64,55,66,69,47,75,66,0,69],
[60,69,57,65,62,45,76,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,72,65,62,61,67,80,77,67],
[56,0,67,66,63,65,64,72,73,72],
[58,63,0,63,62,58,60,64,65,68],
[65,64,67,0,66,72,67,71,70,71],
[68,67,68,64,0,71,62,65,61,78],
[69,65,72,58,59,0,63,76,72,69],
[63,66,70,63,68,67,0,75,75,60],
[50,58,66,59,65,54,55,0,57,64],
[53,57,65,60,69,58,55,73,0,64],
[63,58,62,59,52,61,70,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,63,54,59,62,64,54,69],
[65,0,58,60,53,53,63,63,49,65],
[67,72,0,66,63,59,64,73,63,70],
[67,70,64,0,63,64,68,74,61,76],
[76,77,67,67,0,62,68,71,67,70],
[71,77,71,66,68,0,69,75,63,76],
[68,67,66,62,62,61,0,70,61,77],
[66,67,57,56,59,55,60,0,54,64],
[76,81,67,69,63,67,69,76,0,74],
[61,65,60,54,60,54,53,66,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,59,52,61,56,78,64,70,64],
[70,0,63,56,75,72,75,74,70,61],
[71,67,0,64,77,68,70,75,69,69],
[78,74,66,0,79,64,82,71,75,64],
[69,55,53,51,0,53,69,60,63,65],
[74,58,62,66,77,0,75,72,65,69],
[52,55,60,48,61,55,0,59,54,63],
[66,56,55,59,70,58,71,0,59,66],
[60,60,61,55,67,65,76,71,0,68],
[66,69,61,66,65,61,67,64,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,63,65,67,68,68,64,62],
[65,0,73,66,63,65,70,73,62,73],
[62,57,0,61,67,68,67,73,58,59],
[67,64,69,0,71,61,77,66,68,66],
[65,67,63,59,0,60,74,67,62,58],
[63,65,62,69,70,0,70,78,68,60],
[62,60,63,53,56,60,0,68,61,54],
[62,57,57,64,63,52,62,0,51,58],
[66,68,72,62,68,62,69,79,0,72],
[68,57,71,64,72,70,76,72,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,60,59,66,70,60,56,67,56],
[74,0,66,61,76,74,69,70,67,66],
[70,64,0,68,71,78,72,69,76,69],
[71,69,62,0,72,73,67,67,74,62],
[64,54,59,58,0,64,68,66,66,64],
[60,56,52,57,66,0,60,55,57,56],
[70,61,58,63,62,70,0,64,62,59],
[74,60,61,63,64,75,66,0,72,69],
[63,63,54,56,64,73,68,58,0,61],
[74,64,61,68,66,74,71,61,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,55,49,50,54,57,54,67,63],
[73,0,55,42,47,41,57,62,48,65],
[75,75,0,54,63,66,61,65,66,73],
[81,88,76,0,60,62,77,70,68,77],
[80,83,67,70,0,65,65,64,73,67],
[76,89,64,68,65,0,80,79,69,72],
[73,73,69,53,65,50,0,60,63,71],
[76,68,65,60,66,51,70,0,73,65],
[63,82,64,62,57,61,67,57,0,69],
[67,65,57,53,63,58,59,65,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,59,58,64,54,71,65,51,51],
[60,0,62,57,60,59,84,53,53,64],
[71,68,0,62,52,59,65,58,51,66],
[72,73,68,0,70,62,74,62,58,64],
[66,70,78,60,0,69,72,63,60,65],
[76,71,71,68,61,0,65,73,65,61],
[59,46,65,56,58,65,0,56,53,45],
[65,77,72,68,67,57,74,0,47,66],
[79,77,79,72,70,65,77,83,0,70],
[79,66,64,66,65,69,85,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,55,67,59,47,66,69,58,63],
[58,0,47,54,53,41,55,58,57,58],
[75,83,0,68,67,65,64,71,77,68],
[63,76,62,0,61,56,62,60,64,67],
[71,77,63,69,0,50,63,64,64,75],
[83,89,65,74,80,0,74,70,72,84],
[64,75,66,68,67,56,0,63,71,77],
[61,72,59,70,66,60,67,0,71,72],
[72,73,53,66,66,58,59,59,0,70],
[67,72,62,63,55,46,53,58,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,73,81,72,73,81,76,74],
[60,0,53,62,68,71,65,71,70,60],
[65,77,0,74,70,73,74,68,73,74],
[57,68,56,0,77,73,69,76,67,72],
[49,62,60,53,0,66,64,63,61,68],
[58,59,57,57,64,0,56,62,60,63],
[57,65,56,61,66,74,0,75,68,70],
[49,59,62,54,67,68,55,0,62,63],
[54,60,57,63,69,70,62,68,0,68],
[56,70,56,58,62,67,60,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,69,69,73,66,63,66,69,76],
[59,0,57,49,60,66,57,62,66,70],
[61,73,0,76,79,81,70,79,74,81],
[61,81,54,0,65,69,72,65,75,78],
[57,70,51,65,0,64,57,60,66,71],
[64,64,49,61,66,0,58,52,62,66],
[67,73,60,58,73,72,0,69,66,76],
[64,68,51,65,70,78,61,0,67,82],
[61,64,56,55,64,68,64,63,0,80],
[54,60,49,52,59,64,54,48,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,62,68,75,55,76,70,69,64],
[54,0,59,55,71,45,59,58,56,56],
[68,71,0,73,78,56,76,69,58,67],
[62,75,57,0,74,55,80,61,66,58],
[55,59,52,56,0,46,63,55,49,52],
[75,85,74,75,84,0,78,72,60,63],
[54,71,54,50,67,52,0,57,55,56],
[60,72,61,69,75,58,73,0,69,58],
[61,74,72,64,81,70,75,61,0,68],
[66,74,63,72,78,67,74,72,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,75,83,79,65,68,58,71,74],
[73,0,64,86,86,64,65,56,75,60],
[55,66,0,71,75,68,69,63,61,62],
[47,44,59,0,63,62,65,64,52,64],
[51,44,55,67,0,53,71,54,67,56],
[65,66,62,68,77,0,65,57,56,71],
[62,65,61,65,59,65,0,65,53,65],
[72,74,67,66,76,73,65,0,70,82],
[59,55,69,78,63,74,77,60,0,68],
[56,70,68,66,74,59,65,48,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,51,79,48,69,60,56,42,41],
[64,0,55,73,61,70,64,78,71,54],
[79,75,0,67,77,77,68,78,65,67],
[51,57,63,0,52,72,48,73,48,59],
[82,69,53,78,0,68,45,85,44,42],
[61,60,53,58,62,0,58,71,51,55],
[70,66,62,82,85,72,0,80,61,50],
[74,52,52,57,45,59,50,0,45,64],
[88,59,65,82,86,79,69,85,0,74],
[89,76,63,71,88,75,80,66,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,79,67,69,74,79,80,76,75],
[75,0,70,64,67,71,73,83,82,67],
[51,60,0,63,61,56,72,67,60,70],
[63,66,67,0,66,54,62,66,64,69],
[61,63,69,64,0,58,76,75,66,72],
[56,59,74,76,72,0,70,72,71,72],
[51,57,58,68,54,60,0,68,72,65],
[50,47,63,64,55,58,62,0,65,65],
[54,48,70,66,64,59,58,65,0,69],
[55,63,60,61,58,58,65,65,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,73,75,67,57,66,59,52,84],
[64,0,77,70,72,70,70,67,68,86],
[57,53,0,72,60,68,62,56,57,81],
[55,60,58,0,54,51,61,56,49,71],
[63,58,70,76,0,61,68,66,55,73],
[73,60,62,79,69,0,65,62,61,91],
[64,60,68,69,62,65,0,55,62,79],
[71,63,74,74,64,68,75,0,71,88],
[78,62,73,81,75,69,68,59,0,77],
[46,44,49,59,57,39,51,42,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,67,65,65,63,64,68,67,60],
[70,0,75,69,70,67,67,80,63,66],
[63,55,0,64,65,62,64,61,66,60],
[65,61,66,0,70,68,68,64,62,63],
[65,60,65,60,0,61,60,64,64,64],
[67,63,68,62,69,0,63,69,63,62],
[66,63,66,62,70,67,0,67,67,64],
[62,50,69,66,66,61,63,0,66,59],
[63,67,64,68,66,67,63,64,0,59],
[70,64,70,67,66,68,66,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,51,57,61,59,62,59,81,69],
[57,0,46,42,48,57,37,58,82,49],
[79,84,0,65,72,72,79,93,96,66],
[73,88,65,0,71,54,72,86,90,72],
[69,82,58,59,0,57,64,76,76,73],
[71,73,58,76,73,0,62,80,94,60],
[68,93,51,58,66,68,0,71,75,57],
[71,72,37,44,54,50,59,0,64,47],
[49,48,34,40,54,36,55,66,0,57],
[61,81,64,58,57,70,73,83,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,95,85,55,67,70,78,75,73],
[66,0,76,68,68,57,61,59,72,61],
[35,54,0,58,54,50,45,65,53,40],
[45,62,72,0,63,59,58,46,64,59],
[75,62,76,67,0,69,63,78,78,59],
[63,73,80,71,61,0,59,54,73,58],
[60,69,85,72,67,71,0,68,64,73],
[52,71,65,84,52,76,62,0,62,61],
[55,58,77,66,52,57,66,68,0,57],
[57,69,90,71,71,72,57,69,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,74,66,66,66,68,60,62,60],
[60,0,57,64,54,64,64,54,58,59],
[56,73,0,63,63,72,61,58,66,59],
[64,66,67,0,63,70,66,58,60,60],
[64,76,67,67,0,63,67,72,66,59],
[64,66,58,60,67,0,63,52,62,57],
[62,66,69,64,63,67,0,56,61,61],
[70,76,72,72,58,78,74,0,69,62],
[68,72,64,70,64,68,69,61,0,67],
[70,71,71,70,71,73,69,68,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,65,56,66,64,68,70,70,71],
[56,0,64,59,55,55,65,64,61,69],
[65,66,0,65,60,71,60,58,68,69],
[74,71,65,0,59,58,66,70,59,68],
[64,75,70,71,0,69,70,62,71,66],
[66,75,59,72,61,0,67,71,67,69],
[62,65,70,64,60,63,0,69,58,67],
[60,66,72,60,68,59,61,0,67,63],
[60,69,62,71,59,63,72,63,0,77],
[59,61,61,62,64,61,63,67,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,41,58,53,68,54,46,58],
[60,0,60,49,65,47,59,45,48,47],
[65,70,0,44,57,57,54,61,59,71],
[89,81,86,0,70,72,76,75,64,84],
[72,65,73,60,0,51,65,67,64,78],
[77,83,73,58,79,0,63,73,71,77],
[62,71,76,54,65,67,0,71,68,71],
[76,85,69,55,63,57,59,0,59,63],
[84,82,71,66,66,59,62,71,0,61],
[72,83,59,46,52,53,59,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,49,82,76,60,52,75,64,58],
[77,0,67,87,72,67,59,74,86,63],
[81,63,0,76,81,61,66,76,84,79],
[48,43,54,0,55,39,52,67,61,60],
[54,58,49,75,0,50,54,59,73,63],
[70,63,69,91,80,0,77,79,70,87],
[78,71,64,78,76,53,0,69,77,59],
[55,56,54,63,71,51,61,0,66,76],
[66,44,46,69,57,60,53,64,0,54],
[72,67,51,70,67,43,71,54,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,79,79,65,64,66,69,74,87],
[64,0,78,71,59,67,64,65,80,75],
[51,52,0,53,52,51,54,62,54,57],
[51,59,77,0,58,57,62,69,63,69],
[65,71,78,72,0,64,63,72,80,86],
[66,63,79,73,66,0,64,68,73,74],
[64,66,76,68,67,66,0,71,81,73],
[61,65,68,61,58,62,59,0,66,64],
[56,50,76,67,50,57,49,64,0,70],
[43,55,73,61,44,56,57,66,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,71,72,68,65,77,68,71,74],
[65,0,71,69,67,67,75,71,71,63],
[59,59,0,65,64,57,63,56,67,61],
[58,61,65,0,64,57,66,59,58,61],
[62,63,66,66,0,67,76,69,72,64],
[65,63,73,73,63,0,74,64,72,59],
[53,55,67,64,54,56,0,58,68,64],
[62,59,74,71,61,66,72,0,71,62],
[59,59,63,72,58,58,62,59,0,54],
[56,67,69,69,66,71,66,68,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,62,66,57,67,84,59,72,73],
[53,0,57,62,54,43,59,57,73,71],
[68,73,0,69,72,62,67,62,68,68],
[64,68,61,0,59,67,63,53,73,71],
[73,76,58,71,0,74,85,65,76,67],
[63,87,68,63,56,0,66,61,73,79],
[46,71,63,67,45,64,0,53,65,72],
[71,73,68,77,65,69,77,0,75,77],
[58,57,62,57,54,57,65,55,0,64],
[57,59,62,59,63,51,58,53,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 130, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_10_130.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,107,114,102,121,90,118,115],
[103,0,100,93,110,82,96,113],
[96,110,0,108,128,117,105,110],
[108,117,102,0,121,103,110,129],
[89,100,82,89,0,94,103,116],
[120,128,93,107,116,0,120,126],
[92,114,105,100,107,90,0,115],
[95,97,100,81,94,84,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,121,114,119,100,112,102],
[120,0,114,111,104,99,113,102],
[89,96,0,99,101,88,93,88],
[96,99,111,0,115,106,108,100],
[91,106,109,95,0,93,111,91],
[110,111,122,104,117,0,104,107],
[98,97,117,102,99,106,0,108],
[108,108,122,110,119,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,120,102,99,104,95,110],
[96,0,113,107,106,109,111,110],
[90,97,0,100,109,103,97,104],
[108,103,110,0,102,109,109,108],
[111,104,101,108,0,114,91,119],
[106,101,107,101,96,0,91,106],
[115,99,113,101,119,119,0,125],
[100,100,106,102,91,104,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,114,117,114,103,110,107],
[104,0,96,97,98,104,107,94],
[96,114,0,120,111,105,109,110],
[93,113,90,0,106,113,106,105],
[96,112,99,104,0,100,93,102],
[107,106,105,97,110,0,109,84],
[100,103,101,104,117,101,0,96],
[103,116,100,105,108,126,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,152,136,92,115,121,146],
[77,0,111,107,64,70,94,137],
[58,99,0,86,79,67,111,91],
[74,103,124,0,113,90,100,98],
[118,146,131,97,0,110,96,137],
[95,140,143,120,100,0,133,156],
[89,116,99,110,114,77,0,106],
[64,73,119,112,73,54,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,97,94,104,103,98,102],
[122,0,114,109,109,106,108,102],
[113,96,0,106,107,96,98,99],
[116,101,104,0,97,93,100,109],
[106,101,103,113,0,103,103,98],
[107,104,114,117,107,0,88,107],
[112,102,112,110,107,122,0,125],
[108,108,111,101,112,103,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,83,77,67,58,92,67],
[127,0,78,84,133,97,104,119],
[127,132,0,92,126,125,71,118],
[133,126,118,0,148,113,93,119],
[143,77,84,62,0,87,63,76],
[152,113,85,97,123,0,88,100],
[118,106,139,117,147,122,0,98],
[143,91,92,91,134,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,115,97,133,91,106,93],
[85,0,96,101,106,92,100,79],
[95,114,0,74,107,96,86,72],
[113,109,136,0,105,111,113,90],
[77,104,103,105,0,100,62,102],
[119,118,114,99,110,0,111,90],
[104,110,124,97,148,99,0,109],
[117,131,138,120,108,120,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,144,111,111,109,108,117],
[128,0,143,142,123,108,94,132],
[66,67,0,80,54,52,76,77],
[99,68,130,0,74,90,86,114],
[99,87,156,136,0,97,138,101],
[101,102,158,120,113,0,108,119],
[102,116,134,124,72,102,0,113],
[93,78,133,96,109,91,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,76,77,152,83,76,78],
[115,0,131,97,130,99,118,135],
[134,79,0,79,149,125,85,91],
[133,113,131,0,142,113,121,98],
[58,80,61,68,0,59,50,57],
[127,111,85,97,151,0,76,81],
[134,92,125,89,160,134,0,99],
[132,75,119,112,153,129,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,84,107,90,104,102,103],
[90,0,96,103,76,83,92,84],
[126,114,0,110,106,85,103,114],
[103,107,100,0,87,94,95,110],
[120,134,104,123,0,110,116,105],
[106,127,125,116,100,0,103,111],
[108,118,107,115,94,107,0,112],
[107,126,96,100,105,99,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,116,102,111,117,96],
[102,0,102,126,108,106,113,100],
[110,108,0,121,104,102,114,101],
[94,84,89,0,87,110,92,95],
[108,102,106,123,0,120,112,119],
[99,104,108,100,90,0,101,97],
[93,97,96,118,98,109,0,95],
[114,110,109,115,91,113,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,106,107,101,115,105,89],
[121,0,116,104,119,110,115,103],
[104,94,0,84,95,114,97,97],
[103,106,126,0,106,126,113,110],
[109,91,115,104,0,119,101,98],
[95,100,96,84,91,0,96,91],
[105,95,113,97,109,114,0,90],
[121,107,113,100,112,119,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,113,115,117,115,105],
[102,0,111,113,101,111,106,101],
[97,99,0,109,94,106,100,99],
[97,97,101,0,101,104,94,87],
[95,109,116,109,0,110,104,101],
[93,99,104,106,100,0,103,98],
[95,104,110,116,106,107,0,103],
[105,109,111,123,109,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,115,103,119,118,115,106],
[91,0,102,76,95,90,99,97],
[95,108,0,105,96,102,109,95],
[107,134,105,0,120,110,131,107],
[91,115,114,90,0,92,102,109],
[92,120,108,100,118,0,111,103],
[95,111,101,79,108,99,0,101],
[104,113,115,103,101,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,92,96,99,100,105],
[98,0,100,91,89,92,89,105],
[100,110,0,101,102,94,87,103],
[118,119,109,0,109,101,106,120],
[114,121,108,101,0,107,105,121],
[111,118,116,109,103,0,104,106],
[110,121,123,104,105,106,0,114],
[105,105,107,90,89,104,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,102,114,129,117,110],
[107,0,96,95,99,117,108,103],
[106,114,0,108,104,115,105,111],
[108,115,102,0,104,125,101,111],
[96,111,106,106,0,128,127,120],
[81,93,95,85,82,0,90,81],
[93,102,105,109,83,120,0,104],
[100,107,99,99,90,129,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,87,112,95,92,81,81],
[107,0,85,96,95,83,112,82],
[123,125,0,131,119,91,109,99],
[98,114,79,0,116,62,66,83],
[115,115,91,94,0,86,96,87],
[118,127,119,148,124,0,96,109],
[129,98,101,144,114,114,0,106],
[129,128,111,127,123,101,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,115,114,112,135,108],
[107,0,96,131,118,109,116,86],
[110,114,0,103,97,99,110,102],
[95,79,107,0,96,102,100,98],
[96,92,113,114,0,85,100,97],
[98,101,111,108,125,0,132,98],
[75,94,100,110,110,78,0,97],
[102,124,108,112,113,112,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,154,117,115,94,172,142],
[90,0,132,97,100,117,172,132],
[56,78,0,72,98,82,127,108],
[93,113,138,0,127,109,164,136],
[95,110,112,83,0,148,115,139],
[116,93,128,101,62,0,162,126],
[38,38,83,46,95,48,0,81],
[68,78,102,74,71,84,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,113,111,106,105,100,112],
[110,0,123,97,99,111,104,106],
[97,87,0,91,100,111,104,110],
[99,113,119,0,112,112,117,123],
[104,111,110,98,0,111,110,107],
[105,99,99,98,99,0,116,103],
[110,106,106,93,100,94,0,97],
[98,104,100,87,103,107,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,120,113,101,128,112,122],
[93,0,121,111,106,112,110,114],
[90,89,0,95,91,100,93,108],
[97,99,115,0,91,104,101,104],
[109,104,119,119,0,112,110,125],
[82,98,110,106,98,0,97,106],
[98,100,117,109,100,113,0,113],
[88,96,102,106,85,104,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,102,112,112,105,112],
[106,0,122,108,123,112,95,121],
[103,88,0,90,111,99,87,101],
[108,102,120,0,101,112,101,110],
[98,87,99,109,0,103,87,108],
[98,98,111,98,107,0,93,95],
[105,115,123,109,123,117,0,115],
[98,89,109,100,102,115,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,113,103,121,119,114,110],
[95,0,121,94,115,124,118,88],
[97,89,0,100,97,111,118,86],
[107,116,110,0,115,126,128,100],
[89,95,113,95,0,102,116,89],
[91,86,99,84,108,0,106,83],
[96,92,92,82,94,104,0,84],
[100,122,124,110,121,127,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,114,97,96,99,115,102],
[101,0,101,98,88,105,108,91],
[96,109,0,90,94,104,102,105],
[113,112,120,0,101,108,105,97],
[114,122,116,109,0,111,113,101],
[111,105,106,102,99,0,102,92],
[95,102,108,105,97,108,0,91],
[108,119,105,113,109,118,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,107,107,101,116,101],
[101,0,106,106,110,98,105,96],
[101,104,0,95,107,100,100,102],
[103,104,115,0,118,107,117,104],
[103,100,103,92,0,103,89,100],
[109,112,110,103,107,0,116,111],
[94,105,110,93,121,94,0,99],
[109,114,108,106,110,99,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,96,94,99,95,94],
[104,0,91,96,87,83,83,86],
[110,119,0,117,96,107,98,96],
[114,114,93,0,119,96,94,102],
[116,123,114,91,0,97,96,113],
[111,127,103,114,113,0,114,110],
[115,127,112,116,114,96,0,110],
[116,124,114,108,97,100,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,99,95,96,96,62],
[105,0,117,116,102,105,94,79],
[95,93,0,107,76,84,93,83],
[111,94,103,0,91,93,104,76],
[115,108,134,119,0,105,115,97],
[114,105,126,117,105,0,116,110],
[114,116,117,106,95,94,0,81],
[148,131,127,134,113,100,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,113,96,94,104,101,97],
[101,0,116,106,105,110,104,114],
[97,94,0,110,96,98,100,92],
[114,104,100,0,93,103,91,92],
[116,105,114,117,0,103,94,98],
[106,100,112,107,107,0,110,98],
[109,106,110,119,116,100,0,105],
[113,96,118,118,112,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,101,109,108,104,97,99],
[93,0,108,110,115,110,102,99],
[109,102,0,107,101,101,104,108],
[101,100,103,0,113,105,104,97],
[102,95,109,97,0,111,100,100],
[106,100,109,105,99,0,102,93],
[113,108,106,106,110,108,0,105],
[111,111,102,113,110,117,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,96,111,107,104,103],
[109,0,104,108,104,102,104,102],
[107,106,0,105,104,103,104,98],
[114,102,105,0,111,101,103,108],
[99,106,106,99,0,107,109,99],
[103,108,107,109,103,0,102,105],
[106,106,106,107,101,108,0,94],
[107,108,112,102,111,105,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,94,98,98,98,106,104],
[112,0,105,98,105,97,112,105],
[116,105,0,111,99,103,112,111],
[112,112,99,0,98,100,110,101],
[112,105,111,112,0,105,112,110],
[112,113,107,110,105,0,115,106],
[104,98,98,100,98,95,0,102],
[106,105,99,109,100,104,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,210,105,168,186,186,176],
[0,0,123,89,81,63,139,136],
[0,87,0,63,16,110,97,110],
[105,121,147,0,105,97,97,152],
[42,129,194,105,0,152,139,152],
[24,147,100,113,58,0,123,160],
[24,71,113,113,71,87,0,118],
[34,74,100,58,58,50,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,113,99,128,104,107],
[101,0,119,115,107,111,92,105],
[111,91,0,86,95,103,97,89],
[97,95,124,0,105,96,96,94],
[111,103,115,105,0,118,114,98],
[82,99,107,114,92,0,93,93],
[106,118,113,114,96,117,0,101],
[103,105,121,116,112,117,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,114,111,99,115,118,108],
[104,0,98,99,104,111,119,110],
[96,112,0,97,103,117,115,110],
[99,111,113,0,106,116,131,115],
[111,106,107,104,0,112,121,106],
[95,99,93,94,98,0,108,103],
[92,91,95,79,89,102,0,98],
[102,100,100,95,104,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,109,97,100,102,115],
[106,0,100,108,111,97,112,113],
[106,110,0,99,96,105,101,111],
[101,102,111,0,101,103,96,94],
[113,99,114,109,0,105,104,115],
[110,113,105,107,105,0,112,114],
[108,98,109,114,106,98,0,112],
[95,97,99,116,95,96,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,102,126,121,100,93],
[101,0,114,92,112,124,107,86],
[106,96,0,97,115,123,123,105],
[108,118,113,0,113,123,109,91],
[84,98,95,97,0,117,90,93],
[89,86,87,87,93,0,92,80],
[110,103,87,101,120,118,0,109],
[117,124,105,119,117,130,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,109,102,86,118,103,93],
[115,0,115,122,108,121,105,110],
[101,95,0,105,105,118,100,103],
[108,88,105,0,109,106,98,109],
[124,102,105,101,0,119,116,115],
[92,89,92,104,91,0,87,81],
[107,105,110,112,94,123,0,103],
[117,100,107,101,95,129,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,109,98,121,109,97,104],
[121,0,115,99,125,105,106,104],
[101,95,0,109,122,105,98,94],
[112,111,101,0,127,110,98,104],
[89,85,88,83,0,83,80,81],
[101,105,105,100,127,0,98,111],
[113,104,112,112,130,112,0,125],
[106,106,116,106,129,99,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,115,71,109,76,82,102],
[110,0,125,96,126,96,107,98],
[95,85,0,94,99,73,93,97],
[139,114,116,0,138,101,114,111],
[101,84,111,72,0,77,77,73],
[134,114,137,109,133,0,103,102],
[128,103,117,96,133,107,0,99],
[108,112,113,99,137,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,108,110,96,111,104],
[105,0,96,105,113,107,113,98],
[109,114,0,109,101,104,108,112],
[102,105,101,0,110,91,115,95],
[100,97,109,100,0,100,106,95],
[114,103,106,119,110,0,115,105],
[99,97,102,95,104,95,0,99],
[106,112,98,115,115,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,108,110,121,105,130,116],
[94,0,104,109,110,94,103,104],
[102,106,0,109,113,96,113,111],
[100,101,101,0,101,104,116,104],
[89,100,97,109,0,103,105,110],
[105,116,114,106,107,0,113,126],
[80,107,97,94,105,97,0,97],
[94,106,99,106,100,84,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,103,112,108,113,112],
[103,0,100,107,99,101,101,108],
[110,110,0,101,106,106,97,108],
[107,103,109,0,105,100,97,106],
[98,111,104,105,0,105,110,119],
[102,109,104,110,105,0,106,112],
[97,109,113,113,100,104,0,100],
[98,102,102,104,91,98,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,113,111,111,96,136],
[97,0,100,86,87,106,105,101],
[101,110,0,94,102,97,99,109],
[97,124,116,0,111,113,100,122],
[99,123,108,99,0,105,99,129],
[99,104,113,97,105,0,95,125],
[114,105,111,110,111,115,0,123],
[74,109,101,88,81,85,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,98,115,115,102,101],
[102,0,113,107,109,111,105,108],
[106,97,0,89,109,102,105,103],
[112,103,121,0,111,114,108,113],
[95,101,101,99,0,102,92,91],
[95,99,108,96,108,0,100,97],
[108,105,105,102,118,110,0,108],
[109,102,107,97,119,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,116,57,78,81,95,55],
[160,0,157,95,187,131,111,106],
[94,53,0,57,85,60,90,84],
[153,115,153,0,173,146,126,77],
[132,23,125,37,0,81,106,24],
[129,79,150,64,129,0,131,84],
[115,99,120,84,104,79,0,84],
[155,104,126,133,186,126,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,95,101,106,98,97,101],
[110,0,110,97,109,114,101,102],
[115,100,0,102,109,105,106,108],
[109,113,108,0,108,101,111,113],
[104,101,101,102,0,101,103,106],
[112,96,105,109,109,0,102,106],
[113,109,104,99,107,108,0,106],
[109,108,102,97,104,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,97,104,109,101,109],
[106,0,111,87,98,86,94,107],
[101,99,0,92,100,97,94,100],
[113,123,118,0,95,104,109,115],
[106,112,110,115,0,93,102,106],
[101,124,113,106,117,0,93,111],
[109,116,116,101,108,117,0,124],
[101,103,110,95,104,99,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,95,86,88,96,88,88],
[111,0,115,106,112,101,116,104],
[115,95,0,124,114,87,107,102],
[124,104,86,0,106,103,99,93],
[122,98,96,104,0,96,105,107],
[114,109,123,107,114,0,113,105],
[122,94,103,111,105,97,0,103],
[122,106,108,117,103,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,126,117,132,118,100,96],
[95,0,116,100,111,107,92,106],
[84,94,0,110,94,114,80,99],
[93,110,100,0,83,101,86,90],
[78,99,116,127,0,106,92,93],
[92,103,96,109,104,0,96,69],
[110,118,130,124,118,114,0,99],
[114,104,111,120,117,141,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,113,100,101,105,103,104],
[94,0,101,97,93,99,91,92],
[97,109,0,98,110,99,99,95],
[110,113,112,0,116,101,108,103],
[109,117,100,94,0,105,107,97],
[105,111,111,109,105,0,102,93],
[107,119,111,102,103,108,0,105],
[106,118,115,107,113,117,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,112,89,120,97,100],
[104,0,93,104,108,120,107,114],
[106,117,0,113,79,119,106,125],
[98,106,97,0,100,118,84,89],
[121,102,131,110,0,131,100,119],
[90,90,91,92,79,0,91,93],
[113,103,104,126,110,119,0,111],
[110,96,85,121,91,117,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,120,110,101,105,103,119],
[94,0,94,99,98,104,112,90],
[90,116,0,125,100,89,112,115],
[100,111,85,0,90,93,101,92],
[109,112,110,120,0,95,118,100],
[105,106,121,117,115,0,121,128],
[107,98,98,109,92,89,0,100],
[91,120,95,118,110,82,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,115,102,99,100,103,120],
[106,0,100,113,103,99,100,127],
[95,110,0,118,96,98,95,117],
[108,97,92,0,105,94,98,124],
[111,107,114,105,0,109,103,133],
[110,111,112,116,101,0,117,127],
[107,110,115,112,107,93,0,129],
[90,83,93,86,77,83,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,98,94,82,75,69,81],
[118,0,129,113,95,108,113,129],
[112,81,0,105,100,97,101,109],
[116,97,105,0,75,75,67,107],
[128,115,110,135,0,114,104,146],
[135,102,113,135,96,0,100,108],
[141,97,109,143,106,110,0,111],
[129,81,101,103,64,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,150,74,115,121,133,162],
[78,0,86,56,86,103,56,150],
[60,124,0,86,89,113,125,172],
[136,154,124,0,89,47,89,106],
[95,124,121,121,0,113,86,180],
[89,107,97,163,97,0,98,115],
[77,154,85,121,124,112,0,150],
[48,60,38,104,30,95,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,121,109,105,107,108,111],
[111,0,118,108,98,106,126,113],
[89,92,0,99,109,98,109,107],
[101,102,111,0,99,103,108,106],
[105,112,101,111,0,98,106,121],
[103,104,112,107,112,0,114,112],
[102,84,101,102,104,96,0,92],
[99,97,103,104,89,98,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,105,104,90,95,90],
[97,0,94,98,104,96,93,86],
[98,116,0,122,102,105,110,114],
[105,112,88,0,88,94,88,97],
[106,106,108,122,0,112,101,101],
[120,114,105,116,98,0,111,102],
[115,117,100,122,109,99,0,82],
[120,124,96,113,109,108,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,91,94,122,87,104,97],
[109,0,97,93,105,128,104,116],
[119,113,0,111,108,114,82,92],
[116,117,99,0,122,115,119,90],
[88,105,102,88,0,131,73,76],
[123,82,96,95,79,0,105,80],
[106,106,128,91,137,105,0,125],
[113,94,118,120,134,130,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,119,123,115,88,101],
[105,0,122,129,119,107,88,101],
[95,88,0,84,91,96,91,81],
[91,81,126,0,100,77,87,85],
[87,91,119,110,0,95,95,104],
[95,103,114,133,115,0,96,86],
[122,122,119,123,115,114,0,105],
[109,109,129,125,106,124,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,115,102,107,109,104,113],
[102,0,108,107,108,111,111,104],
[95,102,0,94,102,96,95,112],
[108,103,116,0,104,110,107,108],
[103,102,108,106,0,110,103,100],
[101,99,114,100,100,0,103,101],
[106,99,115,103,107,107,0,97],
[97,106,98,102,110,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,116,106,116,91,102],
[110,0,99,103,113,106,104,90],
[108,111,0,104,120,110,115,113],
[94,107,106,0,108,115,108,94],
[104,97,90,102,0,114,117,103],
[94,104,100,95,96,0,107,102],
[119,106,95,102,93,103,0,96],
[108,120,97,116,107,108,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,94,112,99,115,88,101],
[112,0,112,122,101,118,106,114],
[116,98,0,125,121,139,108,88],
[98,88,85,0,119,115,81,84],
[111,109,89,91,0,100,90,76],
[95,92,71,95,110,0,90,69],
[122,104,102,129,120,120,0,97],
[109,96,122,126,134,141,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,101,103,104,103,104,99],
[94,0,99,94,98,95,94,91],
[109,111,0,101,111,98,101,95],
[107,116,109,0,105,102,101,104],
[106,112,99,105,0,107,106,106],
[107,115,112,108,103,0,109,107],
[106,116,109,109,104,101,0,101],
[111,119,115,106,104,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,97,109,95,104,95,105],
[97,0,89,92,99,94,90,93],
[113,121,0,109,105,112,118,105],
[101,118,101,0,100,110,121,113],
[115,111,105,110,0,120,116,109],
[106,116,98,100,90,0,103,93],
[115,120,92,89,94,107,0,103],
[105,117,105,97,101,117,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,122,129,105,109,116,123],
[116,0,121,93,103,126,88,111],
[88,89,0,103,102,116,89,118],
[81,117,107,0,85,97,96,135],
[105,107,108,125,0,106,79,100],
[101,84,94,113,104,0,82,109],
[94,122,121,114,131,128,0,112],
[87,99,92,75,110,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,111,103,120,118,109,126],
[120,0,128,120,126,102,112,127],
[99,82,0,113,107,98,97,120],
[107,90,97,0,109,107,91,115],
[90,84,103,101,0,69,94,100],
[92,108,112,103,141,0,119,153],
[101,98,113,119,116,91,0,113],
[84,83,90,95,110,57,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,104,108,101,103,114],
[112,0,106,102,100,109,110,107],
[103,104,0,104,104,104,95,112],
[106,108,106,0,111,102,105,109],
[102,110,106,99,0,104,104,103],
[109,101,106,108,106,0,117,109],
[107,100,115,105,106,93,0,113],
[96,103,98,101,107,101,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,128,112,123,104,113,125],
[103,0,116,100,119,105,111,116],
[82,94,0,88,102,95,93,112],
[98,110,122,0,123,114,110,120],
[87,91,108,87,0,86,95,105],
[106,105,115,96,124,0,97,120],
[97,99,117,100,115,113,0,118],
[85,94,98,90,105,90,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,82,96,102,99,106,91],
[108,0,107,105,93,100,101,99],
[128,103,0,101,100,118,108,105],
[114,105,109,0,103,91,113,105],
[108,117,110,107,0,113,105,116],
[111,110,92,119,97,0,102,101],
[104,109,102,97,105,108,0,105],
[119,111,105,105,94,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,52,85,86,98,110,135],
[67,0,53,82,78,75,104,58],
[158,157,0,94,126,137,113,157],
[125,128,116,0,135,105,113,96],
[124,132,84,75,0,85,93,130],
[112,135,73,105,125,0,125,168],
[100,106,97,97,117,85,0,112],
[75,152,53,114,80,42,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,96,113,91,87,135,107],
[126,0,91,125,115,110,106,82],
[114,119,0,74,111,104,109,101],
[97,85,136,0,111,111,128,67],
[119,95,99,99,0,91,102,101],
[123,100,106,99,119,0,120,116],
[75,104,101,82,108,90,0,92],
[103,128,109,143,109,94,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,119,113,127,105,110],
[99,0,104,106,99,111,97,103],
[99,106,0,110,96,113,96,108],
[91,104,100,0,99,111,113,98],
[97,111,114,111,0,111,112,115],
[83,99,97,99,99,0,93,104],
[105,113,114,97,98,117,0,108],
[100,107,102,112,95,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,109,108,101,111,118],
[99,0,110,110,97,106,99,114],
[95,100,0,100,85,102,94,109],
[101,100,110,0,93,107,95,109],
[102,113,125,117,0,118,105,121],
[109,104,108,103,92,0,99,115],
[99,111,116,115,105,111,0,118],
[92,96,101,101,89,95,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,132,102,142,96,93,133],
[67,0,84,87,117,63,94,107],
[78,126,0,111,112,94,102,97],
[108,123,99,0,127,109,140,120],
[68,93,98,83,0,86,93,114],
[114,147,116,101,124,0,121,141],
[117,116,108,70,117,89,0,98],
[77,103,113,90,96,69,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,108,191,108,75,66,152],
[54,0,63,194,117,81,81,131],
[102,147,0,162,198,162,162,87],
[19,16,48,0,108,78,79,22],
[102,93,12,102,0,22,76,90],
[135,129,48,132,188,0,183,123],
[144,129,48,131,134,27,0,128],
[58,79,123,188,120,87,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,98,106,111,105,99],
[99,0,112,95,109,93,100,106],
[96,98,0,94,101,102,93,100],
[112,115,116,0,120,115,105,102],
[104,101,109,90,0,100,113,103],
[99,117,108,95,110,0,113,102],
[105,110,117,105,97,97,0,113],
[111,104,110,108,107,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,114,105,119,101,107],
[104,0,115,106,112,130,109,112],
[97,95,0,92,87,115,103,107],
[96,104,118,0,110,116,108,122],
[105,98,123,100,0,112,103,114],
[91,80,95,94,98,0,92,107],
[109,101,107,102,107,118,0,120],
[103,98,103,88,96,103,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,109,104,105,103,103,107],
[111,0,112,105,109,112,107,107],
[101,98,0,97,108,94,101,107],
[106,105,113,0,107,109,97,110],
[105,101,102,103,0,111,101,104],
[107,98,116,101,99,0,98,95],
[107,103,109,113,109,112,0,110],
[103,103,103,100,106,115,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,83,102,101,109,97,103],
[97,0,103,109,92,100,101,96],
[127,107,0,106,95,97,100,111],
[108,101,104,0,100,114,101,103],
[109,118,115,110,0,113,96,103],
[101,110,113,96,97,0,103,99],
[113,109,110,109,114,107,0,101],
[107,114,99,107,107,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,99,100,106,101,116,106],
[117,0,101,105,110,105,119,104],
[111,109,0,98,118,104,119,110],
[110,105,112,0,116,111,120,108],
[104,100,92,94,0,100,106,94],
[109,105,106,99,110,0,106,94],
[94,91,91,90,104,104,0,102],
[104,106,100,102,116,116,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,105,102,99,87,105,107],
[127,0,108,121,105,110,109,107],
[105,102,0,102,120,108,121,104],
[108,89,108,0,93,97,102,113],
[111,105,90,117,0,110,111,112],
[123,100,102,113,100,0,109,99],
[105,101,89,108,99,101,0,98],
[103,103,106,97,98,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,106,104,121,106,94],
[106,0,120,91,107,127,114,96],
[103,90,0,99,109,115,102,89],
[104,119,111,0,103,122,110,106],
[106,103,101,107,0,124,101,95],
[89,83,95,88,86,0,80,97],
[104,96,108,100,109,130,0,113],
[116,114,121,104,115,113,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,89,95,103,117,105,90],
[110,0,109,95,112,117,109,104],
[121,101,0,114,115,114,121,111],
[115,115,96,0,112,111,114,103],
[107,98,95,98,0,108,95,108],
[93,93,96,99,102,0,107,94],
[105,101,89,96,115,103,0,91],
[120,106,99,107,102,116,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,109,91,112,119,106,117],
[113,0,99,109,125,119,113,124],
[101,111,0,99,117,121,120,125],
[119,101,111,0,117,109,124,131],
[98,85,93,93,0,102,111,100],
[91,91,89,101,108,0,103,116],
[104,97,90,86,99,107,0,112],
[93,86,85,79,110,94,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,120,119,103,101,98,112],
[107,0,106,108,107,102,112,103],
[90,104,0,102,105,101,98,98],
[91,102,108,0,111,102,105,89],
[107,103,105,99,0,104,100,105],
[109,108,109,108,106,0,93,113],
[112,98,112,105,110,117,0,100],
[98,107,112,121,105,97,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,108,123,98,116,112,100],
[110,0,108,128,106,121,118,99],
[102,102,0,98,100,105,111,104],
[87,82,112,0,101,113,100,99],
[112,104,110,109,0,111,118,118],
[94,89,105,97,99,0,98,95],
[98,92,99,110,92,112,0,107],
[110,111,106,111,92,115,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,93,121,92,95,90,95],
[107,0,83,124,92,102,102,92],
[117,127,0,128,113,119,123,104],
[89,86,82,0,76,85,88,84],
[118,118,97,134,0,119,111,110],
[115,108,91,125,91,0,125,103],
[120,108,87,122,99,85,0,86],
[115,118,106,126,100,107,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,102,123,120,103,99,119],
[97,0,109,100,108,107,105,103],
[108,101,0,107,110,111,101,104],
[87,110,103,0,109,102,104,103],
[90,102,100,101,0,105,91,104],
[107,103,99,108,105,0,102,106],
[111,105,109,106,119,108,0,113],
[91,107,106,107,106,104,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,118,107,120,95,120,99],
[99,0,98,100,112,101,104,91],
[92,112,0,114,119,105,121,106],
[103,110,96,0,110,106,119,85],
[90,98,91,100,0,111,91,77],
[115,109,105,104,99,0,123,85],
[90,106,89,91,119,87,0,99],
[111,119,104,125,133,125,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,99,104,104,100,96],
[107,0,107,99,112,112,103,99],
[99,103,0,107,119,117,99,106],
[111,111,103,0,115,101,93,105],
[106,98,91,95,0,86,98,94],
[106,98,93,109,124,0,113,109],
[110,107,111,117,112,97,0,111],
[114,111,104,105,116,101,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,104,110,122,94,102],
[105,0,108,103,106,108,108,103],
[99,102,0,92,114,105,95,108],
[106,107,118,0,112,104,104,107],
[100,104,96,98,0,109,96,98],
[88,102,105,106,101,0,90,110],
[116,102,115,106,114,120,0,120],
[108,107,102,103,112,100,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,122,112,112,115,105],
[103,0,109,114,109,109,115,104],
[102,101,0,106,105,108,119,108],
[88,96,104,0,102,103,106,94],
[98,101,105,108,0,112,109,113],
[98,101,102,107,98,0,111,89],
[95,95,91,104,101,99,0,108],
[105,106,102,116,97,121,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,102,93,109,104,106],
[102,0,94,104,99,114,103,94],
[110,116,0,107,102,109,106,111],
[108,106,103,0,108,114,115,102],
[117,111,108,102,0,114,109,105],
[101,96,101,96,96,0,105,96],
[106,107,104,95,101,105,0,108],
[104,116,99,108,105,114,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,120,96,107,93,96,104],
[105,0,112,108,110,112,101,107],
[90,98,0,108,92,92,93,98],
[114,102,102,0,102,101,106,97],
[103,100,118,108,0,97,98,98],
[117,98,118,109,113,0,104,107],
[114,109,117,104,112,106,0,103],
[106,103,112,113,112,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,95,100,85,90,115,88],
[101,0,105,96,106,93,118,96],
[115,105,0,102,87,94,110,93],
[110,114,108,0,113,108,124,98],
[125,104,123,97,0,101,113,99],
[120,117,116,102,109,0,116,107],
[95,92,100,86,97,94,0,81],
[122,114,117,112,111,103,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,112,109,104,103,101],
[97,0,89,105,96,108,124,98],
[99,121,0,111,110,108,114,107],
[98,105,99,0,100,103,106,101],
[101,114,100,110,0,115,119,103],
[106,102,102,107,95,0,110,98],
[107,86,96,104,91,100,0,90],
[109,112,103,109,107,112,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,85,122,87,112,104,100],
[113,0,101,112,96,101,92,102],
[125,109,0,114,87,116,106,96],
[88,98,96,0,107,108,89,80],
[123,114,123,103,0,109,108,108],
[98,109,94,102,101,0,107,97],
[106,118,104,121,102,103,0,106],
[110,108,114,130,102,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,104,111,105,111,111],
[104,0,120,121,108,113,104,114],
[97,90,0,102,100,102,95,108],
[106,89,108,0,108,95,99,111],
[99,102,110,102,0,108,94,114],
[105,97,108,115,102,0,110,108],
[99,106,115,111,116,100,0,105],
[99,96,102,99,96,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,120,93,100,115,103,94],
[106,0,108,110,109,116,108,98],
[90,102,0,103,99,105,97,95],
[117,100,107,0,109,115,107,94],
[110,101,111,101,0,120,116,105],
[95,94,105,95,90,0,101,95],
[107,102,113,103,94,109,0,106],
[116,112,115,116,105,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,104,106,110,115,120,117],
[108,0,105,99,101,113,110,116],
[106,105,0,103,118,109,113,110],
[104,111,107,0,113,112,116,119],
[100,109,92,97,0,105,103,107],
[95,97,101,98,105,0,108,105],
[90,100,97,94,107,102,0,108],
[93,94,100,91,103,105,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,92,85,104,98,114],
[113,0,96,90,106,110,110,128],
[108,114,0,105,112,108,114,127],
[118,120,105,0,112,103,114,126],
[125,104,98,98,0,110,96,122],
[106,100,102,107,100,0,109,117],
[112,100,96,96,114,101,0,120],
[96,82,83,84,88,93,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,125,112,100,118,109,104],
[88,0,108,101,91,98,95,106],
[85,102,0,105,97,99,88,92],
[98,109,105,0,104,108,89,103],
[110,119,113,106,0,120,99,105],
[92,112,111,102,90,0,90,101],
[101,115,122,121,111,120,0,117],
[106,104,118,107,105,109,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,111,107,110,124,104,126],
[114,0,85,98,110,73,109,89],
[99,125,0,103,100,90,120,114],
[103,112,107,0,119,99,128,107],
[100,100,110,91,0,90,108,93],
[86,137,120,111,120,0,116,113],
[106,101,90,82,102,94,0,118],
[84,121,96,103,117,97,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,85,84,120,119,115,100],
[103,0,101,88,123,110,116,96],
[125,109,0,105,121,126,101,99],
[126,122,105,0,114,118,120,108],
[90,87,89,96,0,111,104,85],
[91,100,84,92,99,0,106,90],
[95,94,109,90,106,104,0,109],
[110,114,111,102,125,120,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,110,125,104,108,105,99],
[111,0,105,119,115,106,110,122],
[100,105,0,118,104,117,109,113],
[85,91,92,0,102,111,94,100],
[106,95,106,108,0,108,103,107],
[102,104,93,99,102,0,101,109],
[105,100,101,116,107,109,0,116],
[111,88,97,110,103,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,99,93,104,97,100,97],
[106,0,109,109,113,105,108,108],
[111,101,0,103,106,101,101,106],
[117,101,107,0,109,97,110,107],
[106,97,104,101,0,100,102,95],
[113,105,109,113,110,0,110,107],
[110,102,109,100,108,100,0,105],
[113,102,104,103,115,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,114,115,112,105,95,96],
[111,0,126,113,116,121,105,96],
[96,84,0,99,100,97,90,105],
[95,97,111,0,105,82,103,99],
[98,94,110,105,0,94,100,98],
[105,89,113,128,116,0,107,105],
[115,105,120,107,110,103,0,106],
[114,114,105,111,112,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,106,97,109,100,90,93],
[108,0,108,97,114,101,108,100],
[104,102,0,105,119,106,101,111],
[113,113,105,0,121,103,102,98],
[101,96,91,89,0,97,94,92],
[110,109,104,107,113,0,120,105],
[120,102,109,108,116,90,0,97],
[117,110,99,112,118,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,95,120,92,98,101],
[111,0,113,102,121,109,96,110],
[99,97,0,98,107,100,103,97],
[115,108,112,0,117,111,97,103],
[90,89,103,93,0,93,98,91],
[118,101,110,99,117,0,100,103],
[112,114,107,113,112,110,0,104],
[109,100,113,107,119,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,114,80,93,98,99,94],
[121,0,120,99,131,108,123,89],
[96,90,0,97,132,103,104,108],
[130,111,113,0,122,92,125,112],
[117,79,78,88,0,94,114,97],
[112,102,107,118,116,0,123,99],
[111,87,106,85,96,87,0,86],
[116,121,102,98,113,111,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,110,128,116,105,133],
[102,0,101,99,88,105,100,105],
[99,109,0,119,117,129,122,112],
[100,111,91,0,97,92,108,113],
[82,122,93,113,0,96,95,120],
[94,105,81,118,114,0,110,112],
[105,110,88,102,115,100,0,124],
[77,105,98,97,90,98,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,113,103,100,112,98,119],
[101,0,109,105,109,116,119,114],
[97,101,0,92,98,111,115,104],
[107,105,118,0,114,100,110,117],
[110,101,112,96,0,114,115,102],
[98,94,99,110,96,0,104,111],
[112,91,95,100,95,106,0,119],
[91,96,106,93,108,99,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,114,105,106,107,96,117],
[83,0,107,93,103,101,105,92],
[96,103,0,108,99,115,94,98],
[105,117,102,0,98,109,107,96],
[104,107,111,112,0,117,102,101],
[103,109,95,101,93,0,98,105],
[114,105,116,103,108,112,0,102],
[93,118,112,114,109,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,125,90,85,89,89,108],
[112,0,142,97,115,105,114,109],
[85,68,0,85,66,84,85,105],
[120,113,125,0,101,112,101,107],
[125,95,144,109,0,109,89,107],
[121,105,126,98,101,0,126,126],
[121,96,125,109,121,84,0,112],
[102,101,105,103,103,84,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,104,103,106,110,108,113],
[110,0,111,106,107,114,110,102],
[106,99,0,106,99,110,93,105],
[107,104,104,0,113,117,117,107],
[104,103,111,97,0,101,103,110],
[100,96,100,93,109,0,102,94],
[102,100,117,93,107,108,0,107],
[97,108,105,103,100,116,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,98,77,82,117,100,75],
[102,0,112,99,88,106,120,100],
[112,98,0,95,91,111,115,93],
[133,111,115,0,122,134,127,105],
[128,122,119,88,0,106,127,101],
[93,104,99,76,104,0,113,80],
[110,90,95,83,83,97,0,71],
[135,110,117,105,109,130,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,111,104,101,110,96],
[104,0,108,119,105,111,104,101],
[103,102,0,103,102,89,102,95],
[99,91,107,0,93,100,100,96],
[106,105,108,117,0,117,111,126],
[109,99,121,110,93,0,97,85],
[100,106,108,110,99,113,0,108],
[114,109,115,114,84,125,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,112,143,90,87,109,92],
[84,0,84,107,58,86,94,85],
[98,126,0,125,78,86,102,72],
[67,103,85,0,87,63,86,64],
[120,152,132,123,0,127,122,92],
[123,124,124,147,83,0,122,105],
[101,116,108,124,88,88,0,104],
[118,125,138,146,118,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,94,101,99,103,94],
[106,0,114,107,123,100,109,106],
[105,96,0,91,104,115,110,89],
[116,103,119,0,107,101,107,102],
[109,87,106,103,0,102,102,103],
[111,110,95,109,108,0,113,97],
[107,101,100,103,108,97,0,96],
[116,104,121,108,107,113,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,98,86,114,107,104,102],
[116,0,108,99,115,118,112,107],
[112,102,0,85,103,117,138,119],
[124,111,125,0,125,101,115,113],
[96,95,107,85,0,96,109,99],
[103,92,93,109,114,0,136,98],
[106,98,72,95,101,74,0,92],
[108,103,91,97,111,112,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,50,68,50,144,134,50],
[97,0,81,31,134,121,134,103],
[160,129,0,160,179,160,97,179],
[142,179,50,0,179,210,103,179],
[160,76,31,31,0,107,84,179],
[66,89,50,0,103,0,103,103],
[76,76,113,107,126,107,0,126],
[160,107,31,31,31,107,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,112,112,103,80,103,86],
[116,0,101,109,110,114,116,94],
[98,109,0,111,123,76,100,80],
[98,101,99,0,92,90,113,94],
[107,100,87,118,0,104,96,79],
[130,96,134,120,106,0,118,105],
[107,94,110,97,114,92,0,106],
[124,116,130,116,131,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,105,103,103,107,95],
[107,0,110,103,99,100,111,99],
[103,100,0,102,98,92,102,89],
[105,107,108,0,107,105,116,97],
[107,111,112,103,0,102,115,101],
[107,110,118,105,108,0,110,105],
[103,99,108,94,95,100,0,95],
[115,111,121,113,109,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,109,104,105,110,107],
[100,0,107,106,99,100,108,109],
[102,103,0,98,100,110,103,103],
[101,104,112,0,102,95,106,103],
[106,111,110,108,0,98,104,100],
[105,110,100,115,112,0,112,118],
[100,102,107,104,106,98,0,109],
[103,101,107,107,110,92,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,122,105,109,100,110],
[112,0,108,119,97,109,104,106],
[109,102,0,108,102,89,99,112],
[88,91,102,0,80,94,88,86],
[105,113,108,130,0,114,107,109],
[101,101,121,116,96,0,100,103],
[110,106,111,122,103,110,0,123],
[100,104,98,124,101,107,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,118,105,107,108,111,124],
[98,0,116,100,99,99,96,108],
[92,94,0,109,88,97,97,110],
[105,110,101,0,95,99,106,114],
[103,111,122,115,0,110,109,120],
[102,111,113,111,100,0,110,124],
[99,114,113,104,101,100,0,116],
[86,102,100,96,90,86,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,112,114,107,107,110],
[101,0,116,115,107,99,107,111],
[105,94,0,108,107,98,105,104],
[98,95,102,0,97,95,106,100],
[96,103,103,113,0,101,106,111],
[103,111,112,115,109,0,108,113],
[103,103,105,104,104,102,0,110],
[100,99,106,110,99,97,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,122,107,127,112,100,109],
[106,0,108,100,109,102,88,102],
[88,102,0,100,108,109,105,109],
[103,110,110,0,127,125,104,114],
[83,101,102,83,0,108,89,104],
[98,108,101,85,102,0,104,99],
[110,122,105,106,121,106,0,107],
[101,108,101,96,106,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,157,108,163,119,159,105],
[95,0,146,116,97,106,141,107],
[53,64,0,102,108,50,90,70],
[102,94,108,0,89,82,105,77],
[47,113,102,121,0,55,130,110],
[91,104,160,128,155,0,147,105],
[51,69,120,105,80,63,0,73],
[105,103,140,133,100,105,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,93,98,98,101,95,104],
[119,0,99,113,110,112,109,109],
[117,111,0,113,112,109,105,112],
[112,97,97,0,104,98,105,104],
[112,100,98,106,0,99,97,102],
[109,98,101,112,111,0,104,111],
[115,101,105,105,113,106,0,112],
[106,101,98,106,108,99,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,123,124,107,102,95,94],
[82,0,115,99,91,80,69,80],
[87,95,0,102,107,85,80,90],
[86,111,108,0,87,91,82,87],
[103,119,103,123,0,106,103,99],
[108,130,125,119,104,0,121,106],
[115,141,130,128,107,89,0,105],
[116,130,120,123,111,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,94,99,132,83,100,114],
[121,0,138,123,129,105,121,103],
[116,72,0,82,115,89,94,98],
[111,87,128,0,129,110,110,114],
[78,81,95,81,0,92,84,90],
[127,105,121,100,118,0,106,110],
[110,89,116,100,126,104,0,130],
[96,107,112,96,120,100,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,85,100,85,88,79,110],
[120,0,104,125,100,100,97,146],
[125,106,0,122,93,122,126,124],
[110,85,88,0,84,93,85,94],
[125,110,117,126,0,99,111,137],
[122,110,88,117,111,0,98,124],
[131,113,84,125,99,112,0,145],
[100,64,86,116,73,86,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,94,99,99,105,119],
[98,0,104,84,88,105,90,104],
[100,106,0,82,104,99,98,111],
[116,126,128,0,104,120,113,113],
[111,122,106,106,0,124,105,109],
[111,105,111,90,86,0,101,96],
[105,120,112,97,105,109,0,115],
[91,106,99,97,101,114,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,99,104,106,107,119,111],
[91,0,101,92,87,96,109,90],
[111,109,0,99,105,102,110,91],
[106,118,111,0,99,105,119,99],
[104,123,105,111,0,110,117,109],
[103,114,108,105,100,0,116,103],
[91,101,100,91,93,94,0,97],
[99,120,119,111,101,107,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,113,98,108,110,112],
[103,0,96,115,103,102,99,113],
[108,114,0,113,110,104,101,112],
[97,95,97,0,103,89,98,102],
[112,107,100,107,0,105,107,117],
[102,108,106,121,105,0,99,110],
[100,111,109,112,103,111,0,124],
[98,97,98,108,93,100,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,101,126,127,103,115,116],
[96,0,100,96,116,77,80,116],
[109,110,0,89,99,86,98,88],
[84,114,121,0,125,107,116,135],
[83,94,111,85,0,73,94,99],
[107,133,124,103,137,0,103,126],
[95,130,112,94,116,107,0,114],
[94,94,122,75,111,84,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,105,99,130,105,105,95],
[95,0,107,103,105,99,115,102],
[105,103,0,100,117,113,106,99],
[111,107,110,0,115,119,104,110],
[80,105,93,95,0,93,104,91],
[105,111,97,91,117,0,105,105],
[105,95,104,106,106,105,0,97],
[115,108,111,100,119,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,98,116,93,101,101,101],
[122,0,115,110,100,101,104,106],
[112,95,0,107,109,111,98,107],
[94,100,103,0,100,97,111,100],
[117,110,101,110,0,103,106,112],
[109,109,99,113,107,0,103,102],
[109,106,112,99,104,107,0,106],
[109,104,103,110,98,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,120,108,132,103,107,109],
[115,0,116,106,125,104,122,120],
[90,94,0,78,108,91,109,88],
[102,104,132,0,128,112,108,118],
[78,85,102,82,0,83,98,99],
[107,106,119,98,127,0,121,116],
[103,88,101,102,112,89,0,106],
[101,90,122,92,111,94,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,105,106,99,105,97],
[105,0,92,91,101,87,79,74],
[107,118,0,114,112,100,102,100],
[105,119,96,0,120,114,112,102],
[104,109,98,90,0,92,90,99],
[111,123,110,96,118,0,95,115],
[105,131,108,98,120,115,0,108],
[113,136,110,108,111,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,96,94,97,96,88,98],
[113,0,101,102,112,97,100,94],
[114,109,0,100,102,101,102,112],
[116,108,110,0,104,91,100,107],
[113,98,108,106,0,99,105,105],
[114,113,109,119,111,0,98,105],
[122,110,108,110,105,112,0,113],
[112,116,98,103,105,105,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,92,97,114,108,107],
[97,0,109,87,109,106,100,120],
[99,101,0,84,100,103,104,100],
[118,123,126,0,103,118,123,116],
[113,101,110,107,0,117,117,110],
[96,104,107,92,93,0,109,97],
[102,110,106,87,93,101,0,99],
[103,90,110,94,100,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,111,105,119,122,102,112],
[78,0,117,106,108,143,92,95],
[99,93,0,70,88,127,81,93],
[105,104,140,0,101,127,108,122],
[91,102,122,109,0,137,87,107],
[88,67,83,83,73,0,74,95],
[108,118,129,102,123,136,0,107],
[98,115,117,88,103,115,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,107,51,76,121,87],
[98,0,124,119,65,74,121,87],
[103,86,0,91,118,74,139,91],
[103,91,119,0,58,107,118,77],
[159,145,92,152,0,101,164,84],
[134,136,136,103,109,0,139,113],
[89,89,71,92,46,71,0,61],
[123,123,119,133,126,97,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,105,125,114,105,104,107],
[110,0,105,122,112,109,120,107],
[105,105,0,125,111,107,110,110],
[85,88,85,0,109,103,105,109],
[96,98,99,101,0,103,116,103],
[105,101,103,107,107,0,111,110],
[106,90,100,105,94,99,0,113],
[103,103,100,101,107,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,110,97,78,111,101,108],
[99,0,100,97,97,103,100,113],
[100,110,0,91,95,107,94,104],
[113,113,119,0,98,110,107,129],
[132,113,115,112,0,122,104,122],
[99,107,103,100,88,0,92,116],
[109,110,116,103,106,118,0,126],
[102,97,106,81,88,94,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,105,124,78,97,98,102],
[88,0,84,104,80,104,103,88],
[105,126,0,107,96,113,111,107],
[86,106,103,0,84,82,90,109],
[132,130,114,126,0,109,125,89],
[113,106,97,128,101,0,117,107],
[112,107,99,120,85,93,0,100],
[108,122,103,101,121,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,108,94,103,103,110,104],
[112,0,117,96,104,109,107,110],
[102,93,0,96,97,102,101,94],
[116,114,114,0,104,109,107,111],
[107,106,113,106,0,99,112,112],
[107,101,108,101,111,0,113,103],
[100,103,109,103,98,97,0,108],
[106,100,116,99,98,107,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,118,117,99,113,92],
[100,0,114,98,98,99,110,92],
[107,96,0,107,106,93,106,114],
[92,112,103,0,99,120,102,104],
[93,112,104,111,0,109,124,120],
[111,111,117,90,101,0,108,95],
[97,100,104,108,86,102,0,90],
[118,118,96,106,90,115,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,0,87,87,0,87,87],
[123,0,0,0,0,0,87,0],
[210,210,0,163,163,76,163,163],
[123,210,47,0,123,123,134,210],
[123,210,47,87,0,123,134,134],
[210,210,134,87,87,0,87,87],
[123,123,47,76,76,123,0,123],
[123,210,47,0,76,123,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,90,106,108,112,106,98],
[103,0,101,89,109,103,87,92],
[120,109,0,105,132,104,111,99],
[104,121,105,0,132,108,121,103],
[102,101,78,78,0,93,93,79],
[98,107,106,102,117,0,109,94],
[104,123,99,89,117,101,0,106],
[112,118,111,107,131,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,107,95,93,84,100,94],
[118,0,111,110,106,93,94,93],
[103,99,0,85,95,90,108,114],
[115,100,125,0,133,103,110,109],
[117,104,115,77,0,104,85,111],
[126,117,120,107,106,0,119,100],
[110,116,102,100,125,91,0,117],
[116,117,96,101,99,110,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,113,109,121,114,109,99],
[94,0,112,107,108,100,98,98],
[97,98,0,109,112,102,100,92],
[101,103,101,0,123,106,107,112],
[89,102,98,87,0,95,98,79],
[96,110,108,104,115,0,111,102],
[101,112,110,103,112,99,0,103],
[111,112,118,98,131,108,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,97,118,112,95,112,104],
[110,0,105,109,112,107,108,111],
[113,105,0,104,102,96,105,105],
[92,101,106,0,96,97,106,101],
[98,98,108,114,0,100,103,95],
[115,103,114,113,110,0,117,111],
[98,102,105,104,107,93,0,117],
[106,99,105,109,115,99,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,135,60,52,52,81,103],
[105,0,105,92,105,73,73,124],
[75,105,0,114,84,127,75,135],
[150,118,96,0,150,64,118,64],
[158,105,126,60,0,94,72,81],
[158,137,83,146,116,0,158,167],
[129,137,135,92,138,52,0,103],
[107,86,75,146,129,43,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,107,105,111,103,107,94],
[113,0,92,106,102,91,102,92],
[103,118,0,106,102,98,112,102],
[105,104,104,0,114,90,101,93],
[99,108,108,96,0,95,100,105],
[107,119,112,120,115,0,105,117],
[103,108,98,109,110,105,0,100],
[116,118,108,117,105,93,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,99,102,101,99,97,95],
[99,0,91,101,102,101,97,101],
[111,119,0,109,103,109,110,102],
[108,109,101,0,112,111,97,105],
[109,108,107,98,0,101,98,109],
[111,109,101,99,109,0,100,109],
[113,113,100,113,112,110,0,115],
[115,109,108,105,101,101,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,108,83,98,95,116],
[100,0,100,113,90,88,78,89],
[109,110,0,139,123,98,111,115],
[102,97,71,0,70,48,74,81],
[127,120,87,140,0,113,125,118],
[112,122,112,162,97,0,114,101],
[115,132,99,136,85,96,0,101],
[94,121,95,129,92,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,117,98,113,95,74,108],
[124,0,121,115,91,92,107,129],
[93,89,0,91,112,87,82,101],
[112,95,119,0,115,80,59,113],
[97,119,98,95,0,104,106,91],
[115,118,123,130,106,0,88,119],
[136,103,128,151,104,122,0,127],
[102,81,109,97,119,91,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,104,96,108,103,107],
[105,0,104,108,103,98,122,113],
[101,106,0,104,101,108,114,107],
[106,102,106,0,106,104,116,105],
[114,107,109,104,0,111,108,102],
[102,112,102,106,99,0,111,111],
[107,88,96,94,102,99,0,94],
[103,97,103,105,108,99,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,110,93,89,100,93,113],
[95,0,116,94,106,115,137,108],
[100,94,0,98,78,118,103,98],
[117,116,112,0,88,97,91,111],
[121,104,132,122,0,124,102,125],
[110,95,92,113,86,0,86,117],
[117,73,107,119,108,124,0,114],
[97,102,112,99,85,93,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,108,100,108,89,102,100],
[93,0,126,83,116,107,107,80],
[102,84,0,79,86,90,92,86],
[110,127,131,0,127,95,110,117],
[102,94,124,83,0,101,93,87],
[121,103,120,115,109,0,116,96],
[108,103,118,100,117,94,0,81],
[110,130,124,93,123,114,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,88,114,92,93,99,82],
[139,0,75,102,91,80,96,112],
[122,135,0,124,115,138,108,103],
[96,108,86,0,97,108,89,100],
[118,119,95,113,0,113,81,103],
[117,130,72,102,97,0,107,122],
[111,114,102,121,129,103,0,120],
[128,98,107,110,107,88,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,85,111,86,103,98,103],
[110,0,95,104,89,106,104,88],
[125,115,0,110,92,99,118,98],
[99,106,100,0,95,113,110,102],
[124,121,118,115,0,104,119,106],
[107,104,111,97,106,0,109,94],
[112,106,92,100,91,101,0,93],
[107,122,112,108,104,116,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,110,104,108,109,107],
[102,0,100,103,93,104,106,109],
[110,110,0,101,97,101,116,108],
[100,107,109,0,109,112,116,111],
[106,117,113,101,0,111,109,103],
[102,106,109,98,99,0,102,112],
[101,104,94,94,101,108,0,99],
[103,101,102,99,107,98,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,107,97,98,117,113],
[112,0,104,111,101,105,115,125],
[109,106,0,96,109,101,107,119],
[103,99,114,0,105,100,115,120],
[113,109,101,105,0,105,102,120],
[112,105,109,110,105,0,117,126],
[93,95,103,95,108,93,0,115],
[97,85,91,90,90,84,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,93,101,138,76,136],
[107,0,118,83,78,120,104,99],
[104,92,0,93,126,121,105,121],
[117,127,117,0,119,99,104,118],
[109,132,84,91,0,140,87,118],
[72,90,89,111,70,0,64,137],
[134,106,105,106,123,146,0,142],
[74,111,89,92,92,73,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,98,106,103,105,91],
[99,0,107,111,99,102,121,92],
[104,103,0,104,100,109,102,93],
[112,99,106,0,105,113,114,101],
[104,111,110,105,0,109,115,95],
[107,108,101,97,101,0,105,99],
[105,89,108,96,95,105,0,106],
[119,118,117,109,115,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,102,89,112,114,129,91],
[91,0,96,101,89,123,133,75],
[108,114,0,104,94,107,117,75],
[121,109,106,0,77,114,159,71],
[98,121,116,133,0,116,144,120],
[96,87,103,96,94,0,139,64],
[81,77,93,51,66,71,0,74],
[119,135,135,139,90,146,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,105,84,109,69,57],
[98,0,53,75,88,83,27,44],
[106,157,0,101,99,86,106,81],
[105,135,109,0,90,107,62,79],
[126,122,111,120,0,140,87,105],
[101,127,124,103,70,0,93,75],
[141,183,104,148,123,117,0,117],
[153,166,129,131,105,135,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,115,110,107,111,104,90],
[115,0,116,109,117,100,101,111],
[95,94,0,101,104,110,99,107],
[100,101,109,0,107,105,101,104],
[103,93,106,103,0,96,87,98],
[99,110,100,105,114,0,93,97],
[106,109,111,109,123,117,0,102],
[120,99,103,106,112,113,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,67,93,86,88,79,71],
[120,0,102,136,124,112,140,119],
[143,108,0,110,144,119,101,112],
[117,74,100,0,98,114,115,113],
[124,86,66,112,0,122,102,95],
[122,98,91,96,88,0,108,119],
[131,70,109,95,108,102,0,90],
[139,91,98,97,115,91,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,111,108,116,115,114],
[111,0,110,100,109,103,111,115],
[107,100,0,117,103,105,101,110],
[99,110,93,0,97,99,104,108],
[102,101,107,113,0,97,110,116],
[94,107,105,111,113,0,111,114],
[95,99,109,106,100,99,0,113],
[96,95,100,102,94,96,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,128,108,122,96,110,112],
[97,0,117,113,98,103,112,102],
[82,93,0,96,103,72,79,86],
[102,97,114,0,105,94,98,96],
[88,112,107,105,0,89,94,102],
[114,107,138,116,121,0,104,117],
[100,98,131,112,116,106,0,110],
[98,108,124,114,108,93,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,92,94,112,112,79,85],
[118,0,94,110,112,96,124,92],
[118,116,0,115,108,102,114,69],
[116,100,95,0,108,121,87,83],
[98,98,102,102,0,99,74,86],
[98,114,108,89,111,0,101,80],
[131,86,96,123,136,109,0,112],
[125,118,141,127,124,130,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,102,113,106,111,107,110],
[85,0,106,103,93,108,113,105],
[108,104,0,105,94,102,109,104],
[97,107,105,0,111,111,109,108],
[104,117,116,99,0,117,108,108],
[99,102,108,99,93,0,102,110],
[103,97,101,101,102,108,0,104],
[100,105,106,102,102,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,115,87,107,99,125,103],
[123,0,79,91,96,137,129,105],
[95,131,0,88,114,130,121,134],
[123,119,122,0,135,149,91,140],
[103,114,96,75,0,118,87,105],
[111,73,80,61,92,0,106,88],
[85,81,89,119,123,104,0,125],
[107,105,76,70,105,122,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,102,104,78,81,87,91],
[91,0,85,96,83,102,62,96],
[108,125,0,112,117,104,105,117],
[106,114,98,0,99,104,76,105],
[132,127,93,111,0,135,100,132],
[129,108,106,106,75,0,81,122],
[123,148,105,134,110,129,0,119],
[119,114,93,105,78,88,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,103,116,129,102,96,91],
[143,0,142,126,167,129,162,104],
[107,68,0,92,101,109,88,105],
[94,84,118,0,138,110,113,79],
[81,43,109,72,0,86,95,71],
[108,81,101,100,124,0,88,92],
[114,48,122,97,115,122,0,99],
[119,106,105,131,139,118,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,92,101,111,93,80,87],
[121,0,97,117,114,122,114,100],
[118,113,0,114,117,110,94,100],
[109,93,96,0,113,101,92,107],
[99,96,93,97,0,102,94,89],
[117,88,100,109,108,0,96,98],
[130,96,116,118,116,114,0,111],
[123,110,110,103,121,112,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,105,96,110,113,108],
[104,0,113,104,96,109,102,103],
[98,97,0,102,105,101,105,105],
[105,106,108,0,99,106,106,107],
[114,114,105,111,0,108,111,110],
[100,101,109,104,102,0,108,110],
[97,108,105,104,99,102,0,104],
[102,107,105,103,100,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,90,95,90,88,99],
[106,0,82,106,92,106,103,95],
[107,128,0,118,107,112,98,105],
[120,104,92,0,98,123,91,127],
[115,118,103,112,0,112,101,124],
[120,104,98,87,98,0,102,112],
[122,107,112,119,109,108,0,103],
[111,115,105,83,86,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,130,126,118,125,127],
[101,0,89,112,101,96,87,89],
[111,121,0,122,119,112,104,124],
[80,98,88,0,77,85,75,98],
[84,109,91,133,0,110,109,103],
[92,114,98,125,100,0,99,94],
[85,123,106,135,101,111,0,128],
[83,121,86,112,107,116,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,105,74,59,74,138,115],
[146,0,176,145,104,156,137,145],
[105,34,0,88,81,74,120,66],
[136,65,122,0,73,81,83,91],
[151,106,129,137,0,106,169,89],
[136,54,136,129,104,0,146,137],
[72,73,90,127,41,64,0,92],
[95,65,144,119,121,73,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,106,124,113,106,104],
[103,0,108,114,124,117,114,109],
[107,102,0,116,119,115,119,104],
[104,96,94,0,110,108,105,92],
[86,86,91,100,0,89,101,96],
[97,93,95,102,121,0,106,100],
[104,96,91,105,109,104,0,96],
[106,101,106,118,114,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,121,105,110,105,105,119],
[102,0,116,110,101,103,112,115],
[89,94,0,99,95,94,98,103],
[105,100,111,0,103,103,102,106],
[100,109,115,107,0,105,105,114],
[105,107,116,107,105,0,110,113],
[105,98,112,108,105,100,0,113],
[91,95,107,104,96,97,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,86,87,107,96,99,100],
[115,0,108,113,102,122,121,94],
[124,102,0,108,113,102,102,104],
[123,97,102,0,106,114,103,110],
[103,108,97,104,0,107,105,117],
[114,88,108,96,103,0,85,88],
[111,89,108,107,105,125,0,96],
[110,116,106,100,93,122,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,100,99,103,103,108],
[106,0,107,99,93,106,99,100],
[109,103,0,97,98,106,106,102],
[110,111,113,0,106,117,98,105],
[111,117,112,104,0,108,106,106],
[107,104,104,93,102,0,105,97],
[107,111,104,112,104,105,0,111],
[102,110,108,105,104,113,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,111,94,98,102,100],
[107,0,102,111,98,104,93,103],
[104,108,0,107,98,100,102,93],
[99,99,103,0,86,99,93,94],
[116,112,112,124,0,105,113,107],
[112,106,110,111,105,0,111,108],
[108,117,108,117,97,99,0,109],
[110,107,117,116,103,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,95,104,111,104,106,96],
[110,0,111,109,105,109,111,108],
[115,99,0,106,107,112,120,118],
[106,101,104,0,108,102,119,109],
[99,105,103,102,0,94,120,108],
[106,101,98,108,116,0,110,101],
[104,99,90,91,90,100,0,97],
[114,102,92,101,102,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,102,92,98,91,111,110],
[98,0,99,106,95,102,102,110],
[108,111,0,107,97,103,104,108],
[118,104,103,0,113,108,110,106],
[112,115,113,97,0,98,116,120],
[119,108,107,102,112,0,111,111],
[99,108,106,100,94,99,0,102],
[100,100,102,104,90,99,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,113,81,77,84,120,96],
[106,0,74,61,89,92,103,94],
[97,136,0,134,98,111,110,125],
[129,149,76,0,106,122,122,123],
[133,121,112,104,0,118,130,122],
[126,118,99,88,92,0,128,102],
[90,107,100,88,80,82,0,86],
[114,116,85,87,88,108,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,116,119,111,106,113,102],
[106,0,96,109,104,92,119,100],
[94,114,0,119,112,102,118,95],
[91,101,91,0,108,98,104,91],
[99,106,98,102,0,98,106,111],
[104,118,108,112,112,0,124,104],
[97,91,92,106,104,86,0,102],
[108,110,115,119,99,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,117,99,110,103,102,103],
[80,0,104,95,98,102,93,89],
[93,106,0,86,101,103,99,96],
[111,115,124,0,104,105,110,110],
[100,112,109,106,0,94,91,93],
[107,108,107,105,116,0,118,110],
[108,117,111,100,119,92,0,111],
[107,121,114,100,117,100,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,98,98,107,105,109],
[97,0,94,99,104,98,102,96],
[105,116,0,106,119,108,112,105],
[112,111,104,0,111,101,108,104],
[112,106,91,99,0,97,109,104],
[103,112,102,109,113,0,111,110],
[105,108,98,102,101,99,0,97],
[101,114,105,106,106,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,77,85,88,91,96,75],
[148,0,126,98,106,107,113,126],
[133,84,0,97,106,101,113,123],
[125,112,113,0,104,103,107,109],
[122,104,104,106,0,95,107,100],
[119,103,109,107,115,0,104,90],
[114,97,97,103,103,106,0,109],
[135,84,87,101,110,120,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,130,99,123,111,106,102],
[123,0,120,100,122,90,103,100],
[80,90,0,97,104,93,94,94],
[111,110,113,0,130,107,117,99],
[87,88,106,80,0,98,98,89],
[99,120,117,103,112,0,114,114],
[104,107,116,93,112,96,0,104],
[108,110,116,111,121,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,86,94,97,114,83],
[96,0,86,98,80,110,103,70],
[100,124,0,99,100,93,118,93],
[124,112,111,0,114,123,117,100],
[116,130,110,96,0,125,126,103],
[113,100,117,87,85,0,115,107],
[96,107,92,93,84,95,0,101],
[127,140,117,110,107,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,135,113,119,103,106,118],
[91,0,122,98,98,105,96,112],
[75,88,0,98,92,84,94,98],
[97,112,112,0,100,95,98,101],
[91,112,118,110,0,98,114,117],
[107,105,126,115,112,0,111,123],
[104,114,116,112,96,99,0,114],
[92,98,112,109,93,87,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,98,87,97,94,98],
[106,0,117,103,112,106,119,92],
[105,93,0,99,99,93,116,87],
[112,107,111,0,101,99,107,98],
[123,98,111,109,0,99,113,95],
[113,104,117,111,111,0,119,110],
[116,91,94,103,97,91,0,90],
[112,118,123,112,115,100,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,91,95,92,99,104],
[109,0,95,95,97,96,96,97],
[110,115,0,102,104,104,100,109],
[119,115,108,0,114,105,104,109],
[115,113,106,96,0,112,104,105],
[118,114,106,105,98,0,99,98],
[111,114,110,106,106,111,0,105],
[106,113,101,101,105,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,116,103,103,109,110,97],
[97,0,103,106,92,98,88,82],
[94,107,0,95,103,110,96,92],
[107,104,115,0,117,120,102,99],
[107,118,107,93,0,109,98,89],
[101,112,100,90,101,0,99,93],
[100,122,114,108,112,111,0,105],
[113,128,118,111,121,117,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,93,112,101,96,102],
[111,0,107,97,106,106,102,100],
[105,103,0,94,98,90,84,95],
[117,113,116,0,113,99,103,108],
[98,104,112,97,0,100,98,104],
[109,104,120,111,110,0,105,103],
[114,108,126,107,112,105,0,100],
[108,110,115,102,106,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,99,103,104,111,102,104],
[110,0,117,111,106,108,101,110],
[111,93,0,109,91,95,90,102],
[107,99,101,0,100,99,105,96],
[106,104,119,110,0,107,116,107],
[99,102,115,111,103,0,113,105],
[108,109,120,105,94,97,0,103],
[106,100,108,114,103,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,108,92,112,110,113,106],
[95,0,103,96,97,113,107,88],
[102,107,0,107,102,119,121,124],
[118,114,103,0,106,128,116,104],
[98,113,108,104,0,120,103,105],
[100,97,91,82,90,0,98,105],
[97,103,89,94,107,112,0,107],
[104,122,86,106,105,105,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,110,104,113,114,104],
[100,0,97,109,102,107,97,94],
[104,113,0,114,115,112,107,103],
[100,101,96,0,105,105,111,108],
[106,108,95,105,0,105,104,105],
[97,103,98,105,105,0,107,97],
[96,113,103,99,106,103,0,102],
[106,116,107,102,105,113,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,95,104,99,95,89],
[104,0,103,90,103,93,99,89],
[104,107,0,94,108,108,102,97],
[115,120,116,0,105,104,105,97],
[106,107,102,105,0,106,105,94],
[111,117,102,106,104,0,107,100],
[115,111,108,105,105,103,0,106],
[121,121,113,113,116,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,89,96,97,93,96,94],
[117,0,96,106,107,108,99,108],
[121,114,0,114,118,102,117,122],
[114,104,96,0,103,107,107,104],
[113,103,92,107,0,105,107,110],
[117,102,108,103,105,0,100,110],
[114,111,93,103,103,110,0,109],
[116,102,88,106,100,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,114,99,95,109,101,101],
[106,0,112,103,94,106,99,101],
[96,98,0,114,103,113,98,103],
[111,107,96,0,112,117,105,94],
[115,116,107,98,0,111,103,111],
[101,104,97,93,99,0,93,107],
[109,111,112,105,107,117,0,107],
[109,109,107,116,99,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,108,115,109,111,105,110],
[108,0,100,120,99,109,106,97],
[102,110,0,116,123,123,112,105],
[95,90,94,0,94,100,86,80],
[101,111,87,116,0,124,105,118],
[99,101,87,110,86,0,89,103],
[105,104,98,124,105,121,0,104],
[100,113,105,130,92,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,72,73,75,87,62,71],
[134,0,92,98,125,105,96,119],
[138,118,0,83,120,122,97,104],
[137,112,127,0,117,93,105,111],
[135,85,90,93,0,108,107,104],
[123,105,88,117,102,0,78,96],
[148,114,113,105,103,132,0,95],
[139,91,106,99,106,114,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,106,99,89,100,103,99],
[116,0,107,105,109,105,102,102],
[104,103,0,108,97,101,110,101],
[111,105,102,0,103,97,114,93],
[121,101,113,107,0,100,106,106],
[110,105,109,113,110,0,108,104],
[107,108,100,96,104,102,0,95],
[111,108,109,117,104,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,88,104,98,111,127],
[104,0,125,113,76,111,96,126],
[103,85,0,94,82,85,86,108],
[122,97,116,0,105,114,104,129],
[106,134,128,105,0,106,94,123],
[112,99,125,96,104,0,92,115],
[99,114,124,106,116,118,0,128],
[83,84,102,81,87,95,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,104,95,103,107,100,109],
[111,0,102,97,100,107,101,119],
[106,108,0,95,107,95,104,98],
[115,113,115,0,98,114,105,106],
[107,110,103,112,0,113,102,98],
[103,103,115,96,97,0,94,107],
[110,109,106,105,108,116,0,103],
[101,91,112,104,112,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,127,103,113,111,113,111],
[99,0,105,100,107,91,100,102],
[83,105,0,104,107,88,91,94],
[107,110,106,0,116,107,110,98],
[97,103,103,94,0,87,100,90],
[99,119,122,103,123,0,121,105],
[97,110,119,100,110,89,0,102],
[99,108,116,112,120,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,91,90,100,75,87,90],
[117,0,111,106,125,112,120,95],
[119,99,0,108,129,112,110,94],
[120,104,102,0,122,98,94,112],
[110,85,81,88,0,102,94,104],
[135,98,98,112,108,0,113,108],
[123,90,100,116,116,97,0,97],
[120,115,116,98,106,102,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,86,84,114,92,88,132],
[113,0,110,115,106,89,90,152],
[124,100,0,112,132,121,78,125],
[126,95,98,0,100,103,95,127],
[96,104,78,110,0,73,102,112],
[118,121,89,107,137,0,137,115],
[122,120,132,115,108,73,0,125],
[78,58,85,83,98,95,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,114,100,111,101,95],
[112,0,122,112,105,118,112,107],
[107,88,0,108,103,109,106,98],
[96,98,102,0,97,102,93,103],
[110,105,107,113,0,123,109,104],
[99,92,101,108,87,0,89,100],
[109,98,104,117,101,121,0,105],
[115,103,112,107,106,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,85,111,86,92,96,86],
[118,0,86,125,106,98,120,84],
[125,124,0,134,120,110,107,95],
[99,85,76,0,86,96,88,69],
[124,104,90,124,0,105,128,106],
[118,112,100,114,105,0,109,86],
[114,90,103,122,82,101,0,93],
[124,126,115,141,104,124,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,104,101,97,98,109,115],
[114,0,107,102,107,109,106,113],
[106,103,0,111,102,113,119,112],
[109,108,99,0,94,100,104,113],
[113,103,108,116,0,119,117,120],
[112,101,97,110,91,0,101,103],
[101,104,91,106,93,109,0,117],
[95,97,98,97,90,107,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,101,102,105,100,103],
[110,0,117,116,115,107,104,101],
[109,93,0,100,96,93,96,88],
[109,94,110,0,107,86,99,97],
[108,95,114,103,0,103,107,83],
[105,103,117,124,107,0,112,111],
[110,106,114,111,103,98,0,96],
[107,109,122,113,127,99,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,102,70,76,93,80,109],
[131,0,139,97,109,124,93,96],
[108,71,0,72,91,111,77,92],
[140,113,138,0,101,122,117,107],
[134,101,119,109,0,97,107,115],
[117,86,99,88,113,0,103,109],
[130,117,133,93,103,107,0,100],
[101,114,118,103,95,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,126,97,106,114,105,105],
[103,0,122,92,108,109,103,88],
[84,88,0,93,101,97,84,86],
[113,118,117,0,125,123,115,103],
[104,102,109,85,0,108,102,99],
[96,101,113,87,102,0,96,77],
[105,107,126,95,108,114,0,92],
[105,122,124,107,111,133,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,99,98,91,108,107,90],
[121,0,107,111,99,113,100,117],
[111,103,0,121,108,111,122,93],
[112,99,89,0,81,102,98,93],
[119,111,102,129,0,104,111,111],
[102,97,99,108,106,0,108,102],
[103,110,88,112,99,102,0,99],
[120,93,117,117,99,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,99,91,112,99,106,113],
[97,0,86,96,92,97,98,103],
[111,124,0,103,113,100,99,105],
[119,114,107,0,119,100,103,119],
[98,118,97,91,0,93,102,108],
[111,113,110,110,117,0,96,105],
[104,112,111,107,108,114,0,96],
[97,107,105,91,102,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,113,101,98,104,104,113],
[94,0,110,95,96,108,110,105],
[97,100,0,84,83,85,84,94],
[109,115,126,0,102,127,118,108],
[112,114,127,108,0,104,104,104],
[106,102,125,83,106,0,100,105],
[106,100,126,92,106,110,0,101],
[97,105,116,102,106,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,106,101,120,116,104],
[109,0,103,122,108,111,105,108],
[108,107,0,111,102,114,117,103],
[104,88,99,0,103,103,95,99],
[109,102,108,107,0,113,112,100],
[90,99,96,107,97,0,104,107],
[94,105,93,115,98,106,0,99],
[106,102,107,111,110,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,83,102,102,107,104,104],
[101,0,85,101,103,92,95,103],
[127,125,0,115,131,105,124,119],
[108,109,95,0,113,110,109,112],
[108,107,79,97,0,95,107,96],
[103,118,105,100,115,0,112,116],
[106,115,86,101,103,98,0,95],
[106,107,91,98,114,94,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,101,100,109,103,96,106],
[88,0,100,92,103,99,88,99],
[109,110,0,95,111,98,97,102],
[110,118,115,0,113,101,106,109],
[101,107,99,97,0,92,97,101],
[107,111,112,109,118,0,102,114],
[114,122,113,104,113,108,0,117],
[104,111,108,101,109,96,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,88,128,111,114,78,112],
[110,0,119,132,115,98,116,123],
[122,91,0,114,114,111,99,119],
[82,78,96,0,89,82,97,111],
[99,95,96,121,0,117,85,126],
[96,112,99,128,93,0,103,115],
[132,94,111,113,125,107,0,115],
[98,87,91,99,84,95,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,98,104,118,111,117],
[100,0,104,95,102,116,106,102],
[100,106,0,98,105,101,108,102],
[112,115,112,0,97,119,121,118],
[106,108,105,113,0,115,117,110],
[92,94,109,91,95,0,96,97],
[99,104,102,89,93,114,0,108],
[93,108,108,92,100,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,90,103,106,91,92,102],
[122,0,108,116,103,108,104,115],
[120,102,0,117,105,101,107,102],
[107,94,93,0,99,97,105,113],
[104,107,105,111,0,103,105,121],
[119,102,109,113,107,0,105,116],
[118,106,103,105,105,105,0,113],
[108,95,108,97,89,94,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,98,102,95,108,91],
[106,0,101,108,100,86,109,83],
[100,109,0,103,104,94,90,103],
[112,102,107,0,80,106,93,103],
[108,110,106,130,0,92,106,96],
[115,124,116,104,118,0,108,95],
[102,101,120,117,104,102,0,106],
[119,127,107,107,114,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,112,106,108,105,101,106],
[115,0,112,101,113,108,108,97],
[98,98,0,102,106,109,109,105],
[104,109,108,0,112,109,107,102],
[102,97,104,98,0,108,104,106],
[105,102,101,101,102,0,102,100],
[109,102,101,103,106,108,0,108],
[104,113,105,108,104,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,103,97,100,104,85],
[111,0,104,100,106,99,94,101],
[104,106,0,101,99,93,106,96],
[107,110,109,0,101,105,114,105],
[113,104,111,109,0,104,115,110],
[110,111,117,105,106,0,114,104],
[106,116,104,96,95,96,0,99],
[125,109,114,105,100,106,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,93,84,78,97,82,105],
[104,0,101,88,85,98,87,81],
[117,109,0,82,95,116,125,99],
[126,122,128,0,99,128,127,119],
[132,125,115,111,0,125,119,100],
[113,112,94,82,85,0,107,87],
[128,123,85,83,91,103,0,102],
[105,129,111,91,110,123,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,95,96,96,92,107],
[103,0,102,95,100,91,94,104],
[112,108,0,109,106,95,97,117],
[115,115,101,0,107,91,100,123],
[114,110,104,103,0,98,105,113],
[114,119,115,119,112,0,98,114],
[118,116,113,110,105,112,0,125],
[103,106,93,87,97,96,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,111,140,127,118,136,101],
[63,0,98,115,91,86,128,86],
[99,112,0,112,92,102,122,89],
[70,95,98,0,106,99,105,96],
[83,119,118,104,0,76,114,106],
[92,124,108,111,134,0,109,85],
[74,82,88,105,96,101,0,79],
[109,124,121,114,104,125,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,94,102,96,97,115,86],
[99,0,92,110,86,88,88,109],
[116,118,0,113,90,109,102,110],
[108,100,97,0,85,80,84,111],
[114,124,120,125,0,90,118,110],
[113,122,101,130,120,0,134,113],
[95,122,108,126,92,76,0,114],
[124,101,100,99,100,97,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,100,89,92,84,106,104],
[120,0,118,101,110,107,113,110],
[110,92,0,95,106,95,108,103],
[121,109,115,0,110,101,114,105],
[118,100,104,100,0,100,104,112],
[126,103,115,109,110,0,115,113],
[104,97,102,96,106,95,0,107],
[106,100,107,105,98,97,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,104,117,104,111,149,125],
[97,0,104,114,89,109,111,103],
[106,106,0,102,121,86,138,99],
[93,96,108,0,92,97,122,113],
[106,121,89,118,0,110,131,109],
[99,101,124,113,100,0,137,106],
[61,99,72,88,79,73,0,95],
[85,107,111,97,101,104,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,105,116,110,116,103,99],
[93,0,94,103,92,101,104,99],
[105,116,0,115,91,110,105,115],
[94,107,95,0,94,94,94,104],
[100,118,119,116,0,104,105,106],
[94,109,100,116,106,0,109,102],
[107,106,105,116,105,101,0,101],
[111,111,95,106,104,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,85,120,82,60,85,51],
[141,0,123,124,106,103,78,89],
[125,87,0,85,88,114,74,53],
[90,86,125,0,69,66,76,51],
[128,104,122,141,0,102,112,96],
[150,107,96,144,108,0,141,112],
[125,132,136,134,98,69,0,70],
[159,121,157,159,114,98,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,151,133,109,91,114,111],
[73,0,92,111,89,92,69,88],
[59,118,0,107,123,96,81,95],
[77,99,103,0,109,80,73,75],
[101,121,87,101,0,81,90,102],
[119,118,114,130,129,0,106,102],
[96,141,129,137,120,104,0,107],
[99,122,115,135,108,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,148,119,110,134,118,137],
[112,0,120,113,100,106,110,116],
[62,90,0,93,82,107,92,83],
[91,97,117,0,108,96,89,95],
[100,110,128,102,0,118,121,118],
[76,104,103,114,92,0,97,86],
[92,100,118,121,89,113,0,109],
[73,94,127,115,92,124,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,123,121,121,109,123,138],
[108,0,112,116,108,105,117,111],
[87,98,0,93,119,95,121,110],
[89,94,117,0,106,104,115,103],
[89,102,91,104,0,96,105,104],
[101,105,115,106,114,0,121,114],
[87,93,89,95,105,89,0,110],
[72,99,100,107,106,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,89,96,84,108,105,98],
[97,0,98,98,93,100,105,101],
[121,112,0,109,105,109,113,102],
[114,112,101,0,97,102,119,104],
[126,117,105,113,0,108,125,111],
[102,110,101,108,102,0,113,98],
[105,105,97,91,85,97,0,98],
[112,109,108,106,99,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,106,109,105,118,89,125],
[84,0,106,105,104,98,114,108],
[104,104,0,140,97,92,114,113],
[101,105,70,0,82,90,120,89],
[105,106,113,128,0,104,137,124],
[92,112,118,120,106,0,137,110],
[121,96,96,90,73,73,0,91],
[85,102,97,121,86,100,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,86,85,95,96,113,117],
[116,0,114,116,83,110,122,108],
[124,96,0,120,98,93,106,109],
[125,94,90,0,88,100,106,119],
[115,127,112,122,0,103,121,117],
[114,100,117,110,107,0,115,124],
[97,88,104,104,89,95,0,104],
[93,102,101,91,93,86,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,107,120,100,121,114],
[104,0,107,99,105,98,108,109],
[99,103,0,86,105,105,120,102],
[103,111,124,0,124,120,136,125],
[90,105,105,86,0,106,87,113],
[110,112,105,90,104,0,104,119],
[89,102,90,74,123,106,0,108],
[96,101,108,85,97,91,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,99,111,110,107,108,107],
[106,0,103,109,110,104,111,114],
[111,107,0,103,113,112,119,108],
[99,101,107,0,118,105,121,111],
[100,100,97,92,0,104,107,112],
[103,106,98,105,106,0,112,101],
[102,99,91,89,103,98,0,95],
[103,96,102,99,98,109,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,89,107,95,96,89,112],
[95,0,98,97,94,93,92,107],
[121,112,0,124,136,114,101,122],
[103,113,86,0,108,102,100,109],
[115,116,74,102,0,95,96,98],
[114,117,96,108,115,0,115,116],
[121,118,109,110,114,95,0,110],
[98,103,88,101,112,94,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,87,98,114,111,93,91],
[121,0,94,119,111,120,99,92],
[123,116,0,110,97,94,81,99],
[112,91,100,0,105,113,109,101],
[96,99,113,105,0,103,81,105],
[99,90,116,97,107,0,69,81],
[117,111,129,101,129,141,0,98],
[119,118,111,109,105,129,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,108,102,106,104,106,102],
[92,0,105,119,87,89,79,105],
[102,105,0,130,117,109,90,120],
[108,91,80,0,89,84,98,91],
[104,123,93,121,0,102,90,106],
[106,121,101,126,108,0,79,106],
[104,131,120,112,120,131,0,105],
[108,105,90,119,104,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,90,109,123,116,105],
[104,0,108,94,116,102,94,103],
[104,102,0,93,104,106,90,115],
[120,116,117,0,125,124,100,129],
[101,94,106,85,0,112,131,104],
[87,108,104,86,98,0,112,101],
[94,116,120,110,79,98,0,112],
[105,107,95,81,106,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,101,98,97,114,89,111],
[98,0,96,105,96,97,108,106],
[109,114,0,112,98,107,109,108],
[112,105,98,0,106,110,97,105],
[113,114,112,104,0,107,105,112],
[96,113,103,100,103,0,103,107],
[121,102,101,113,105,107,0,116],
[99,104,102,105,98,103,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,92,85,78,86,91,111],
[125,0,138,100,113,128,109,126],
[118,72,0,115,93,98,104,111],
[125,110,95,0,65,131,101,106],
[132,97,117,145,0,141,116,117],
[124,82,112,79,69,0,94,116],
[119,101,106,109,94,116,0,111],
[99,84,99,104,93,94,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,111,114,103,117,116],
[103,0,106,104,113,103,106,115],
[99,104,0,117,109,107,113,116],
[99,106,93,0,107,102,105,118],
[96,97,101,103,0,86,99,100],
[107,107,103,108,124,0,101,117],
[93,104,97,105,111,109,0,120],
[94,95,94,92,110,93,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,124,111,106,96,106,111],
[115,0,119,123,117,100,104,109],
[86,91,0,99,91,90,83,93],
[99,87,111,0,94,87,99,91],
[104,93,119,116,0,109,93,102],
[114,110,120,123,101,0,102,125],
[104,106,127,111,117,108,0,122],
[99,101,117,119,108,85,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,114,109,130,100,114,105],
[92,0,90,108,119,107,102,112],
[96,120,0,110,122,117,111,103],
[101,102,100,0,117,106,100,94],
[80,91,88,93,0,99,86,94],
[110,103,93,104,111,0,88,104],
[96,108,99,110,124,122,0,87],
[105,98,107,116,116,106,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,93,112,86,104,101],
[110,0,107,116,113,94,96,103],
[109,103,0,104,108,98,91,99],
[117,94,106,0,110,84,99,98],
[98,97,102,100,0,107,112,100],
[124,116,112,126,103,0,104,110],
[106,114,119,111,98,106,0,108],
[109,107,111,112,110,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,99,82,114,109,83,113],
[105,0,92,97,107,103,84,116],
[111,118,0,109,118,111,92,117],
[128,113,101,0,121,104,112,113],
[96,103,92,89,0,91,79,117],
[101,107,99,106,119,0,93,116],
[127,126,118,98,131,117,0,136],
[97,94,93,97,93,94,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,84,104,114,97,110],
[111,0,105,109,98,95,108,99],
[109,105,0,113,123,114,105,91],
[126,101,97,0,130,119,113,93],
[106,112,87,80,0,97,96,109],
[96,115,96,91,113,0,86,99],
[113,102,105,97,114,124,0,98],
[100,111,119,117,101,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,117,110,105,104,88,101],
[91,0,111,99,107,104,101,102],
[93,99,0,96,110,100,72,103],
[100,111,114,0,115,121,105,110],
[105,103,100,95,0,95,108,101],
[106,106,110,89,115,0,97,108],
[122,109,138,105,102,113,0,119],
[109,108,107,100,109,102,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,113,118,116,203,129,113],
[129,0,113,37,208,203,129,113],
[97,97,0,129,129,203,129,124],
[92,173,81,0,208,203,129,113],
[94,2,81,2,0,173,99,2],
[7,7,7,7,37,0,5,2],
[81,81,81,81,111,205,0,81],
[97,97,86,97,208,208,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,116,105,110,106,105,106],
[87,0,111,101,98,93,97,98],
[94,99,0,90,106,100,93,96],
[105,109,120,0,110,105,106,106],
[100,112,104,100,0,99,99,100],
[104,117,110,105,111,0,102,113],
[105,113,117,104,111,108,0,103],
[104,112,114,104,110,97,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,110,94,108,110,109],
[105,0,109,114,115,121,116,116],
[105,101,0,99,113,99,100,107],
[100,96,111,0,106,107,108,105],
[116,95,97,104,0,110,112,102],
[102,89,111,103,100,0,108,102],
[100,94,110,102,98,102,0,99],
[101,94,103,105,108,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,96,99,99,105,101,101],
[109,0,99,95,100,114,112,101],
[114,111,0,108,110,129,104,113],
[111,115,102,0,112,117,113,112],
[111,110,100,98,0,116,103,110],
[105,96,81,93,94,0,98,95],
[109,98,106,97,107,112,0,107],
[109,109,97,98,100,115,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,105,103,108,123,116,122],
[86,0,89,98,80,99,101,109],
[105,121,0,107,101,110,112,123],
[107,112,103,0,105,116,112,117],
[102,130,109,105,0,118,104,121],
[87,111,100,94,92,0,98,114],
[94,109,98,98,106,112,0,116],
[88,101,87,93,89,96,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,122,104,123,124,128,101],
[96,0,118,110,130,102,116,100],
[88,92,0,92,96,87,96,89],
[106,100,118,0,116,119,111,107],
[87,80,114,94,0,105,101,91],
[86,108,123,91,105,0,108,95],
[82,94,114,99,109,102,0,89],
[109,110,121,103,119,115,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,110,101,106,107,114],
[98,0,101,98,96,97,105,101],
[96,109,0,112,99,103,117,110],
[100,112,98,0,101,101,110,107],
[109,114,111,109,0,115,110,103],
[104,113,107,109,95,0,113,112],
[103,105,93,100,100,97,0,101],
[96,109,100,103,107,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,108,106,119,107,89,118],
[91,0,102,96,100,85,76,111],
[102,108,0,100,106,100,107,129],
[104,114,110,0,100,115,99,123],
[91,110,104,110,0,106,83,113],
[103,125,110,95,104,0,100,108],
[121,134,103,111,127,110,0,133],
[92,99,81,87,97,102,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,122,152,146,122,116,117],
[107,0,133,157,105,115,129,141],
[88,77,0,106,86,58,90,122],
[58,53,104,0,96,65,84,73],
[64,105,124,114,0,78,106,107],
[88,95,152,145,132,0,112,82],
[94,81,120,126,104,98,0,128],
[93,69,88,137,103,128,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,110,108,118,111,103],
[103,0,101,99,101,97,99,102],
[98,109,0,111,103,104,105,110],
[100,111,99,0,101,108,108,96],
[102,109,107,109,0,114,115,108],
[92,113,106,102,96,0,108,108],
[99,111,105,102,95,102,0,105],
[107,108,100,114,102,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,92,105,104,105,97,99],
[108,0,101,114,105,108,95,102],
[118,109,0,113,103,112,105,110],
[105,96,97,0,102,99,105,96],
[106,105,107,108,0,103,100,102],
[105,102,98,111,107,0,98,105],
[113,115,105,105,110,112,0,103],
[111,108,100,114,108,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,99,104,122,105,88,103],
[106,0,82,66,103,93,79,76],
[111,128,0,117,124,109,85,131],
[106,144,93,0,108,103,113,96],
[88,107,86,102,0,111,78,116],
[105,117,101,107,99,0,90,102],
[122,131,125,97,132,120,0,116],
[107,134,79,114,94,108,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,120,111,110,108,140,107],
[107,0,128,94,113,102,143,85],
[90,82,0,111,95,116,136,76],
[99,116,99,0,115,107,133,112],
[100,97,115,95,0,85,118,96],
[102,108,94,103,125,0,132,90],
[70,67,74,77,92,78,0,77],
[103,125,134,98,114,120,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,123,125,131,128,119],
[108,0,114,105,120,103,115,124],
[98,96,0,116,118,118,125,129],
[87,105,94,0,107,118,124,121],
[85,90,92,103,0,101,107,110],
[79,107,92,92,109,0,98,114],
[82,95,85,86,103,112,0,112],
[91,86,81,89,100,96,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,110,118,117,101,107,122],
[86,0,96,91,101,84,90,107],
[100,114,0,110,100,89,100,109],
[92,119,100,0,114,101,101,113],
[93,109,110,96,0,86,87,101],
[109,126,121,109,124,0,101,126],
[103,120,110,109,123,109,0,112],
[88,103,101,97,109,84,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,116,108,105,114,110],
[102,0,101,97,94,89,110,101],
[97,109,0,107,109,106,118,110],
[94,113,103,0,119,109,117,115],
[102,116,101,91,0,88,101,114],
[105,121,104,101,122,0,105,123],
[96,100,92,93,109,105,0,109],
[100,109,100,95,96,87,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,118,113,112,108,105],
[106,0,87,101,102,91,92,90],
[98,123,0,122,108,117,101,104],
[92,109,88,0,107,100,87,90],
[97,108,102,103,0,101,91,90],
[98,119,93,110,109,0,105,90],
[102,118,109,123,119,105,0,103],
[105,120,106,120,120,120,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,102,108,102,108,96],
[105,0,98,103,96,107,106,105],
[107,112,0,108,107,109,113,100],
[108,107,102,0,99,99,107,111],
[102,114,103,111,0,108,105,99],
[108,103,101,111,102,0,96,100],
[102,104,97,103,105,114,0,99],
[114,105,110,99,111,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,107,89,110,110,97,92],
[121,0,106,107,122,115,93,98],
[103,104,0,93,114,91,88,104],
[121,103,117,0,120,97,91,92],
[100,88,96,90,0,104,90,93],
[100,95,119,113,106,0,107,114],
[113,117,122,119,120,103,0,104],
[118,112,106,118,117,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,86,91,116,122,122,133],
[118,0,77,98,108,97,122,138],
[124,133,0,118,100,133,144,150],
[119,112,92,0,89,114,125,123],
[94,102,110,121,0,106,136,134],
[88,113,77,96,104,0,115,134],
[88,88,66,85,74,95,0,137],
[77,72,60,87,76,76,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,94,157,116,134,104,104],
[76,0,136,157,108,86,96,96],
[116,74,0,124,84,93,116,84],
[53,53,86,0,76,80,82,82],
[94,102,126,134,0,113,123,123],
[76,124,117,130,97,0,116,117],
[106,114,94,128,87,94,0,41],
[106,114,126,128,87,93,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,125,118,119,102,82,122],
[122,0,123,93,108,102,106,108],
[85,87,0,100,94,87,71,102],
[92,117,110,0,108,79,87,117],
[91,102,116,102,0,104,100,102],
[108,108,123,131,106,0,107,99],
[128,104,139,123,110,103,0,126],
[88,102,108,93,108,111,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,103,98,104,111,100],
[96,0,98,108,98,107,113,101],
[106,112,0,102,98,116,113,109],
[107,102,108,0,107,109,108,110],
[112,112,112,103,0,115,121,104],
[106,103,94,101,95,0,111,109],
[99,97,97,102,89,99,0,96],
[110,109,101,100,106,101,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,97,110,106,97,106,109],
[115,0,103,111,122,113,125,114],
[113,107,0,118,110,114,105,111],
[100,99,92,0,94,108,108,105],
[104,88,100,116,0,106,103,109],
[113,97,96,102,104,0,104,105],
[104,85,105,102,107,106,0,110],
[101,96,99,105,101,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,104,110,97,98,95],
[103,0,108,96,114,109,103,100],
[108,102,0,110,103,102,100,103],
[106,114,100,0,106,101,115,106],
[100,96,107,104,0,96,89,93],
[113,101,108,109,114,0,111,114],
[112,107,110,95,121,99,0,100],
[115,110,107,104,117,96,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,93,94,99,94,107,93],
[115,0,99,101,103,106,109,99],
[117,111,0,101,124,107,128,107],
[116,109,109,0,103,101,113,92],
[111,107,86,107,0,108,107,100],
[116,104,103,109,102,0,113,100],
[103,101,82,97,103,97,0,91],
[117,111,103,118,110,110,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,97,89,92,88,104,101],
[132,0,114,101,108,124,125,104],
[113,96,0,114,115,105,112,98],
[121,109,96,0,116,114,107,112],
[118,102,95,94,0,89,107,101],
[122,86,105,96,121,0,115,115],
[106,85,98,103,103,95,0,91],
[109,106,112,98,109,95,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,125,115,99,109,113,125],
[90,0,97,88,90,96,92,95],
[85,113,0,107,96,109,108,93],
[95,122,103,0,95,109,117,102],
[111,120,114,115,0,105,106,107],
[101,114,101,101,105,0,103,106],
[97,118,102,93,104,107,0,111],
[85,115,117,108,103,104,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,70,94,95,100,87,77],
[125,0,95,130,114,111,122,113],
[140,115,0,134,124,95,123,121],
[116,80,76,0,109,119,82,78],
[115,96,86,101,0,69,104,83],
[110,99,115,91,141,0,109,95],
[123,88,87,128,106,101,0,98],
[133,97,89,132,127,115,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,121,99,112,110,103,102],
[114,0,131,104,114,108,106,114],
[89,79,0,90,93,101,92,89],
[111,106,120,0,113,108,116,102],
[98,96,117,97,0,110,110,105],
[100,102,109,102,100,0,98,107],
[107,104,118,94,100,112,0,109],
[108,96,121,108,105,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,116,112,122,107,108,96],
[99,0,107,114,110,109,104,112],
[94,103,0,110,116,110,99,109],
[98,96,100,0,106,95,96,105],
[88,100,94,104,0,97,99,98],
[103,101,100,115,113,0,109,103],
[102,106,111,114,111,101,0,102],
[114,98,101,105,112,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,79,105,106,89,81,104],
[116,0,80,105,93,119,89,72],
[131,130,0,99,111,131,107,131],
[105,105,111,0,104,129,85,113],
[104,117,99,106,0,107,89,131],
[121,91,79,81,103,0,93,94],
[129,121,103,125,121,117,0,115],
[106,138,79,97,79,116,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,118,98,104,124,124,100],
[94,0,105,94,93,116,99,112],
[92,105,0,97,102,101,92,90],
[112,116,113,0,113,124,96,105],
[106,117,108,97,0,121,126,113],
[86,94,109,86,89,0,102,86],
[86,111,118,114,84,108,0,109],
[110,98,120,105,97,124,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,108,100,85,76,84,100],
[137,0,124,123,115,98,117,96],
[102,86,0,99,88,80,70,86],
[110,87,111,0,81,86,78,78],
[125,95,122,129,0,110,115,92],
[134,112,130,124,100,0,116,119],
[126,93,140,132,95,94,0,88],
[110,114,124,132,118,91,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,160,152,152,154,106],
[107,0,131,140,101,94,151,78],
[106,79,0,111,108,103,140,68],
[50,70,99,0,105,83,131,51],
[58,109,102,105,0,76,140,54],
[58,116,107,127,134,0,106,49],
[56,59,70,79,70,104,0,79],
[104,132,142,159,156,161,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,73,76,132,39,99,110],
[74,0,96,76,61,43,74,85],
[137,114,0,109,109,105,105,92],
[134,134,101,0,129,113,132,112],
[78,149,101,81,0,64,123,86],
[171,167,105,97,146,0,121,115],
[111,136,105,78,87,89,0,115],
[100,125,118,98,124,95,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,90,98,111,94,93,111],
[108,0,106,113,115,112,105,102],
[120,104,0,99,111,98,99,105],
[112,97,111,0,108,104,101,103],
[99,95,99,102,0,93,85,98],
[116,98,112,106,117,0,108,106],
[117,105,111,109,125,102,0,113],
[99,108,105,107,112,104,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,88,101,106,99,110,93],
[120,0,79,107,107,122,118,80],
[122,131,0,91,117,109,123,103],
[109,103,119,0,117,105,111,109],
[104,103,93,93,0,105,92,84],
[111,88,101,105,105,0,107,102],
[100,92,87,99,118,103,0,94],
[117,130,107,101,126,108,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,99,91,109,110,93,110],
[125,0,90,95,126,129,113,99],
[111,120,0,105,106,114,118,88],
[119,115,105,0,116,116,118,94],
[101,84,104,94,0,103,108,105],
[100,81,96,94,107,0,113,98],
[117,97,92,92,102,97,0,91],
[100,111,122,116,105,112,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,84,84,96,102,88,109],
[113,0,110,111,111,111,96,95],
[126,100,0,111,111,114,108,120],
[126,99,99,0,117,117,107,109],
[114,99,99,93,0,107,91,105],
[108,99,96,93,103,0,85,85],
[122,114,102,103,119,125,0,91],
[101,115,90,101,105,125,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,72,102,89,90,88,96],
[111,0,107,114,110,94,107,98],
[138,103,0,119,110,104,112,121],
[108,96,91,0,98,89,99,89],
[121,100,100,112,0,105,115,101],
[120,116,106,121,105,0,123,129],
[122,103,98,111,95,87,0,111],
[114,112,89,121,109,81,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,108,105,102,109,114],
[109,0,101,94,105,93,100,104],
[109,109,0,111,110,103,119,111],
[102,116,99,0,97,101,110,115],
[105,105,100,113,0,105,105,115],
[108,117,107,109,105,0,104,118],
[101,110,91,100,105,106,0,119],
[96,106,99,95,95,92,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,110,103,85,100,85,113],
[111,0,99,93,84,92,104,115],
[100,111,0,107,89,83,103,121],
[107,117,103,0,98,104,108,127],
[125,126,121,112,0,104,106,134],
[110,118,127,106,106,0,105,126],
[125,106,107,102,104,105,0,128],
[97,95,89,83,76,84,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,108,117,102,109,105],
[104,0,85,111,108,87,109,105],
[99,125,0,110,112,97,100,105],
[102,99,100,0,105,112,111,104],
[93,102,98,105,0,103,94,85],
[108,123,113,98,107,0,106,94],
[101,101,110,99,116,104,0,92],
[105,105,105,106,125,116,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,90,124,88,58,89,80],
[101,0,106,129,115,98,97,84],
[120,104,0,147,112,120,90,116],
[86,81,63,0,57,55,53,43],
[122,95,98,153,0,71,123,137],
[152,112,90,155,139,0,127,145],
[121,113,120,157,87,83,0,100],
[130,126,94,167,73,65,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,99,98,95,95,88,105],
[121,0,108,108,105,97,105,115],
[111,102,0,103,97,95,105,114],
[112,102,107,0,109,97,110,114],
[115,105,113,101,0,103,103,112],
[115,113,115,113,107,0,103,108],
[122,105,105,100,107,107,0,121],
[105,95,96,96,98,102,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,109,111,110,112,98],
[105,0,113,120,117,102,108,95],
[99,97,0,110,106,107,106,92],
[101,90,100,0,97,106,95,93],
[99,93,104,113,0,98,104,84],
[100,108,103,104,112,0,98,102],
[98,102,104,115,106,112,0,105],
[112,115,118,117,126,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,91,98,107,110,89,114],
[117,0,101,113,114,124,98,120],
[119,109,0,113,113,129,101,122],
[112,97,97,0,99,110,97,113],
[103,96,97,111,0,105,97,104],
[100,86,81,100,105,0,106,98],
[121,112,109,113,113,104,0,111],
[96,90,88,97,106,112,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,108,111,99,102,102],
[105,0,105,114,106,110,108,107],
[108,105,0,119,100,111,116,112],
[102,96,91,0,95,94,112,96],
[99,104,110,115,0,114,113,105],
[111,100,99,116,96,0,117,94],
[108,102,94,98,97,93,0,101],
[108,103,98,114,105,116,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,115,120,105,99,108],
[108,0,99,106,115,102,108,112],
[117,111,0,103,122,112,103,109],
[95,104,107,0,124,106,103,103],
[90,95,88,86,0,98,83,95],
[105,108,98,104,112,0,96,103],
[111,102,107,107,127,114,0,113],
[102,98,101,107,115,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,100,90,93,91,97,100],
[116,0,122,121,113,98,112,107],
[110,88,0,87,94,92,95,96],
[120,89,123,0,107,98,121,91],
[117,97,116,103,0,105,108,108],
[119,112,118,112,105,0,109,121],
[113,98,115,89,102,101,0,103],
[110,103,114,119,102,89,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,77,115,125,150,80,144],
[68,0,81,41,90,38,51,122],
[133,129,0,125,126,108,76,92],
[95,169,85,0,166,136,120,168],
[85,120,84,44,0,106,78,103],
[60,172,102,74,104,0,104,136],
[130,159,134,90,132,106,0,100],
[66,88,118,42,107,74,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,109,101,99,97,107],
[110,0,102,98,115,104,100,114],
[107,108,0,93,111,103,100,108],
[101,112,117,0,106,102,105,118],
[109,95,99,104,0,96,101,111],
[111,106,107,108,114,0,102,119],
[113,110,110,105,109,108,0,112],
[103,96,102,92,99,91,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,99,119,101,125,111],
[114,0,131,121,95,117,131,110],
[104,79,0,109,85,85,116,99],
[111,89,101,0,82,110,118,123],
[91,115,125,128,0,138,134,98],
[109,93,125,100,72,0,128,84],
[85,79,94,92,76,82,0,91],
[99,100,111,87,112,126,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,123,116,110,103,118],
[109,0,96,133,150,117,119,124],
[101,114,0,114,132,102,88,94],
[87,77,96,0,141,94,109,92],
[94,60,78,69,0,90,94,78],
[100,93,108,116,120,0,111,83],
[107,91,122,101,116,99,0,97],
[92,86,116,118,132,127,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,95,96,105,84,97,104],
[107,0,100,97,114,104,94,100],
[115,110,0,102,99,111,100,107],
[114,113,108,0,118,109,95,105],
[105,96,111,92,0,94,102,111],
[126,106,99,101,116,0,110,106],
[113,116,110,115,108,100,0,106],
[106,110,103,105,99,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,93,110,111,84,99,88],
[104,0,95,122,115,99,107,103],
[117,115,0,119,107,99,118,108],
[100,88,91,0,108,84,107,93],
[99,95,103,102,0,96,95,87],
[126,111,111,126,114,0,116,104],
[111,103,92,103,115,94,0,104],
[122,107,102,117,123,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,113,110,100,112,107],
[98,0,103,102,103,99,104,94],
[97,107,0,99,102,96,102,91],
[97,108,111,0,111,107,112,105],
[100,107,108,99,0,94,103,94],
[110,111,114,103,116,0,103,98],
[98,106,108,98,107,107,0,103],
[103,116,119,105,116,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,89,92,98,99,91,93],
[108,0,105,99,102,100,108,105],
[121,105,0,93,100,102,108,104],
[118,111,117,0,105,113,115,109],
[112,108,110,105,0,107,111,103],
[111,110,108,97,103,0,100,97],
[119,102,102,95,99,110,0,100],
[117,105,106,101,107,113,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,93,104,108,106,111,110],
[92,0,100,93,97,96,99,93],
[117,110,0,102,111,113,109,104],
[106,117,108,0,113,115,114,101],
[102,113,99,97,0,107,102,101],
[104,114,97,95,103,0,108,97],
[99,111,101,96,108,102,0,102],
[100,117,106,109,109,113,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,106,100,112,101,99,110],
[97,0,105,100,104,93,97,103],
[104,105,0,105,113,99,121,112],
[110,110,105,0,120,113,115,108],
[98,106,97,90,0,89,100,105],
[109,117,111,97,121,0,113,116],
[111,113,89,95,110,97,0,105],
[100,107,98,102,105,94,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,92,101,100,101,103],
[113,0,104,102,106,113,117,114],
[108,106,0,104,91,102,104,106],
[118,108,106,0,104,108,109,107],
[109,104,119,106,0,116,115,118],
[110,97,108,102,94,0,104,101],
[109,93,106,101,95,106,0,96],
[107,96,104,103,92,109,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,101,54,92,84,92,81],
[135,0,124,100,110,117,130,119],
[109,86,0,94,93,92,130,107],
[156,110,116,0,119,108,105,110],
[118,100,117,91,0,97,105,118],
[126,93,118,102,113,0,138,127],
[118,80,80,105,105,72,0,95],
[129,91,103,100,92,83,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,110,113,103,97,102,118],
[99,0,114,114,107,108,99,104],
[100,96,0,99,109,90,104,114],
[97,96,111,0,108,92,104,109],
[107,103,101,102,0,90,100,93],
[113,102,120,118,120,0,108,111],
[108,111,106,106,110,102,0,109],
[92,106,96,101,117,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,144,85,146,59,149,146],
[59,0,144,85,59,59,149,144],
[66,66,0,2,2,0,66,66],
[125,125,208,0,61,123,123,210],
[64,151,208,149,0,64,149,208],
[151,151,210,87,146,0,151,210],
[61,61,144,87,61,59,0,146],
[64,66,144,0,2,0,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,103,118,99,113,110,127],
[117,0,105,116,109,112,117,124],
[107,105,0,115,116,119,125,140],
[92,94,95,0,101,110,107,115],
[111,101,94,109,0,122,109,131],
[97,98,91,100,88,0,100,108],
[100,93,85,103,101,110,0,106],
[83,86,70,95,79,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,101,115,111,99,99],
[103,0,120,107,101,124,98,105],
[93,90,0,98,104,97,89,95],
[109,103,112,0,109,107,100,109],
[95,109,106,101,0,115,106,107],
[99,86,113,103,95,0,104,96],
[111,112,121,110,104,106,0,107],
[111,105,115,101,103,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,87,85,121,115,106,129],
[101,0,130,110,134,177,109,194],
[123,80,0,47,81,61,56,96],
[125,100,163,0,132,129,55,98],
[89,76,129,78,0,107,114,84],
[95,33,149,81,103,0,120,86],
[104,101,154,155,96,90,0,90],
[81,16,114,112,126,124,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,85,111,113,112,122,102],
[105,0,111,110,141,125,109,129],
[125,99,0,131,124,131,87,127],
[99,100,79,0,103,93,101,96],
[97,69,86,107,0,97,79,99],
[98,85,79,117,113,0,93,87],
[88,101,123,109,131,117,0,120],
[108,81,83,114,111,123,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,100,93,101,112,91,102],
[108,0,96,94,99,97,107,102],
[110,114,0,119,103,113,113,119],
[117,116,91,0,102,114,114,121],
[109,111,107,108,0,105,107,111],
[98,113,97,96,105,0,105,105],
[119,103,97,96,103,105,0,120],
[108,108,91,89,99,105,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,100,110,131,101,138,108],
[89,0,61,95,103,105,120,84],
[110,149,0,122,114,103,109,114],
[100,115,88,0,94,99,106,109],
[79,107,96,116,0,88,85,94],
[109,105,107,111,122,0,115,109],
[72,90,101,104,125,95,0,100],
[102,126,96,101,116,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,92,99,111,106,104,106],
[93,0,81,87,110,97,104,108],
[118,129,0,105,107,120,110,102],
[111,123,105,0,112,125,113,113],
[99,100,103,98,0,95,93,110],
[104,113,90,85,115,0,113,107],
[106,106,100,97,117,97,0,107],
[104,102,108,97,100,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,97,103,100,98,98,99],
[114,0,104,111,110,92,105,96],
[113,106,0,106,115,105,102,101],
[107,99,104,0,110,94,97,90],
[110,100,95,100,0,99,91,95],
[112,118,105,116,111,0,110,102],
[112,105,108,113,119,100,0,106],
[111,114,109,120,115,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,88,78,97,93,113,71],
[100,0,99,82,103,105,92,91],
[122,111,0,126,104,108,114,119],
[132,128,84,0,91,111,102,113],
[113,107,106,119,0,91,98,118],
[117,105,102,99,119,0,108,124],
[97,118,96,108,112,102,0,112],
[139,119,91,97,92,86,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,99,105,140,138,85],
[107,0,124,108,112,132,100,125],
[100,86,0,101,95,132,91,93],
[111,102,109,0,72,126,118,72],
[105,98,115,138,0,135,113,102],
[70,78,78,84,75,0,46,44],
[72,110,119,92,97,164,0,89],
[125,85,117,138,108,166,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,107,107,98,92,107],
[113,0,108,104,120,97,102,105],
[108,102,0,101,111,99,100,102],
[103,106,109,0,116,105,104,106],
[103,90,99,94,0,104,85,94],
[112,113,111,105,106,0,106,109],
[118,108,110,106,125,104,0,107],
[103,105,108,104,116,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,90,106,96,89,94,84],
[107,0,104,114,115,119,108,107],
[120,106,0,110,98,121,116,111],
[104,96,100,0,116,104,104,106],
[114,95,112,94,0,113,101,112],
[121,91,89,106,97,0,124,105],
[116,102,94,106,109,86,0,101],
[126,103,99,104,98,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,125,109,118,103,107,112],
[71,0,110,71,94,99,85,54],
[85,100,0,77,107,97,89,80],
[101,139,133,0,116,98,93,100],
[92,116,103,94,0,108,111,90],
[107,111,113,112,102,0,120,99],
[103,125,121,117,99,90,0,105],
[98,156,130,110,120,111,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,113,109,115,109,119,102],
[94,0,99,103,115,106,111,104],
[97,111,0,90,110,97,106,88],
[101,107,120,0,111,103,111,104],
[95,95,100,99,0,95,90,93],
[101,104,113,107,115,0,121,105],
[91,99,104,99,120,89,0,96],
[108,106,122,106,117,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,94,92,81,96,101,103],
[116,0,116,119,116,120,103,111],
[116,94,0,110,108,112,109,125],
[118,91,100,0,104,106,113,123],
[129,94,102,106,0,110,96,128],
[114,90,98,104,100,0,100,126],
[109,107,101,97,114,110,0,116],
[107,99,85,87,82,84,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,123,109,100,102,100],
[103,0,111,114,97,99,94,102],
[101,99,0,106,110,99,108,103],
[87,96,104,0,91,101,109,109],
[101,113,100,119,0,104,113,99],
[110,111,111,109,106,0,100,110],
[108,116,102,101,97,110,0,106],
[110,108,107,101,111,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,99,106,98,123,102,119],
[96,0,96,93,94,101,110,109],
[111,114,0,103,104,102,116,115],
[104,117,107,0,107,99,111,105],
[112,116,106,103,0,115,111,127],
[87,109,108,111,95,0,102,111],
[108,100,94,99,99,108,0,121],
[91,101,95,105,83,99,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,114,114,157,115,157,61],
[95,0,53,94,137,156,156,114],
[96,157,0,103,157,157,157,103],
[96,116,107,0,116,157,116,62],
[53,73,53,94,0,114,115,73],
[95,54,53,53,96,0,95,53],
[53,54,53,94,95,115,0,53],
[149,96,107,148,137,157,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,106,133,98,124,90,98],
[115,0,103,133,104,134,96,95],
[104,107,0,101,76,115,101,108],
[77,77,109,0,78,117,72,75],
[112,106,134,132,0,110,102,94],
[86,76,95,93,100,0,88,77],
[120,114,109,138,108,122,0,97],
[112,115,102,135,116,133,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,97,103,107,113,109,109],
[88,0,98,107,99,93,103,110],
[113,112,0,102,104,105,104,114],
[107,103,108,0,103,101,105,107],
[103,111,106,107,0,103,114,114],
[97,117,105,109,107,0,111,104],
[101,107,106,105,96,99,0,108],
[101,100,96,103,96,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,120,110,110,114,113,101],
[105,0,124,112,102,110,127,93],
[90,86,0,96,79,81,87,85],
[100,98,114,0,107,99,93,96],
[100,108,131,103,0,125,110,112],
[96,100,129,111,85,0,95,91],
[97,83,123,117,100,115,0,108],
[109,117,125,114,98,119,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,110,98,99,78,99,87],
[132,0,144,131,126,98,132,111],
[100,66,0,101,97,82,93,92],
[112,79,109,0,95,83,97,81],
[111,84,113,115,0,97,101,103],
[132,112,128,127,113,0,112,102],
[111,78,117,113,109,98,0,104],
[123,99,118,129,107,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,97,100,99,99,97],
[109,0,102,106,104,106,100,99],
[105,108,0,102,106,110,107,103],
[113,104,108,0,98,107,100,103],
[110,106,104,112,0,106,102,101],
[111,104,100,103,104,0,102,110],
[111,110,103,110,108,108,0,108],
[113,111,107,107,109,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,113,127,102,123,111,119],
[101,0,100,109,109,102,100,106],
[97,110,0,119,110,111,117,117],
[83,101,91,0,109,103,95,104],
[108,101,100,101,0,112,107,118],
[87,108,99,107,98,0,89,108],
[99,110,93,115,103,121,0,111],
[91,104,93,106,92,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,97,108,106,98,119],
[99,0,108,93,106,99,98,113],
[104,102,0,108,108,104,116,117],
[113,117,102,0,109,108,100,116],
[102,104,102,101,0,91,95,112],
[104,111,106,102,119,0,104,115],
[112,112,94,110,115,106,0,119],
[91,97,93,94,98,95,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,95,107,101,94,98,94],
[108,0,112,112,109,100,103,105],
[115,98,0,110,105,99,102,103],
[103,98,100,0,97,107,97,99],
[109,101,105,113,0,109,97,102],
[116,110,111,103,101,0,102,109],
[112,107,108,113,113,108,0,100],
[116,105,107,111,108,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,103,107,107,99,113],
[98,0,106,91,109,103,118,119],
[105,104,0,106,100,112,110,126],
[107,119,104,0,105,123,124,122],
[103,101,110,105,0,115,103,115],
[103,107,98,87,95,0,106,108],
[111,92,100,86,107,104,0,106],
[97,91,84,88,95,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,121,101,102,103,107,113],
[92,0,106,88,97,99,99,92],
[89,104,0,88,93,98,91,100],
[109,122,122,0,105,109,104,110],
[108,113,117,105,0,108,108,117],
[107,111,112,101,102,0,102,107],
[103,111,119,106,102,108,0,114],
[97,118,110,100,93,103,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,107,106,124,97,116],
[97,0,105,100,97,114,103,113],
[102,105,0,101,102,127,98,106],
[103,110,109,0,96,110,97,107],
[104,113,108,114,0,127,109,115],
[86,96,83,100,83,0,83,96],
[113,107,112,113,101,127,0,118],
[94,97,104,103,95,114,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,129,81,138,129,148,81],
[86,0,123,112,106,132,165,124],
[81,87,0,81,66,82,133,96],
[129,98,129,0,175,102,152,123],
[72,104,144,35,0,67,143,118],
[81,78,128,108,143,0,145,155],
[62,45,77,58,67,65,0,105],
[129,86,114,87,92,55,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,79,180,78,79,129,176],
[46,0,56,81,40,24,68,57],
[131,154,0,166,110,101,105,150],
[30,129,44,0,40,74,50,57],
[132,170,100,170,0,150,123,188],
[131,186,109,136,60,0,121,166],
[81,142,105,160,87,89,0,138],
[34,153,60,153,22,44,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,101,100,98,101,89,114],
[114,0,103,100,107,106,95,120],
[109,107,0,95,115,109,111,117],
[110,110,115,0,107,114,103,122],
[112,103,95,103,0,105,95,119],
[109,104,101,96,105,0,90,113],
[121,115,99,107,115,120,0,119],
[96,90,93,88,91,97,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,119,108,80,117,137,88],
[73,0,140,96,92,108,113,130],
[91,70,0,102,82,108,99,68],
[102,114,108,0,75,120,102,58],
[130,118,128,135,0,99,113,108],
[93,102,102,90,111,0,90,84],
[73,97,111,108,97,120,0,101],
[122,80,142,152,102,126,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,82,93,93,80,91],
[112,0,122,109,105,103,102,111],
[108,88,0,78,87,80,88,109],
[128,101,132,0,115,103,113,129],
[117,105,123,95,0,98,104,129],
[117,107,130,107,112,0,105,116],
[130,108,122,97,106,105,0,126],
[119,99,101,81,81,94,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,97,104,107,99,103],
[107,0,106,111,103,101,98,106],
[109,104,0,116,107,112,103,101],
[113,99,94,0,106,101,108,91],
[106,107,103,104,0,111,111,95],
[103,109,98,109,99,0,103,111],
[111,112,107,102,99,107,0,104],
[107,104,109,119,115,99,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,106,117,102,89,100,93],
[94,0,103,112,112,98,89,97],
[104,107,0,109,113,110,106,119],
[93,98,101,0,122,99,106,103],
[108,98,97,88,0,85,103,93],
[121,112,100,111,125,0,102,112],
[110,121,104,104,107,108,0,99],
[117,113,91,107,117,98,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,95,79,97,96,99,99],
[118,0,108,103,100,98,99,108],
[115,102,0,103,111,106,112,122],
[131,107,107,0,100,109,110,118],
[113,110,99,110,0,110,100,114],
[114,112,104,101,100,0,96,119],
[111,111,98,100,110,114,0,102],
[111,102,88,92,96,91,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,104,94,87,103,91],
[110,0,105,109,97,99,92,102],
[104,105,0,88,94,94,100,94],
[106,101,122,0,103,106,100,98],
[116,113,116,107,0,117,118,102],
[123,111,116,104,93,0,107,106],
[107,118,110,110,92,103,0,98],
[119,108,116,112,108,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,111,101,103,113,103],
[109,0,115,105,107,111,105,101],
[115,95,0,101,114,92,106,100],
[99,105,109,0,105,90,110,95],
[109,103,96,105,0,109,110,98],
[107,99,118,120,101,0,110,108],
[97,105,104,100,100,100,0,95],
[107,109,110,115,112,102,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,100,93,94,96,90,104],
[122,0,99,109,101,110,111,115],
[110,111,0,109,105,108,106,124],
[117,101,101,0,92,104,105,115],
[116,109,105,118,0,109,106,110],
[114,100,102,106,101,0,100,108],
[120,99,104,105,104,110,0,116],
[106,95,86,95,100,102,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,80,78,70,81,75,88],
[130,0,110,97,94,111,106,120],
[130,100,0,117,108,115,93,128],
[132,113,93,0,92,102,98,95],
[140,116,102,118,0,115,114,122],
[129,99,95,108,95,0,103,128],
[135,104,117,112,96,107,0,127],
[122,90,82,115,88,82,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,121,104,106,107,111,105],
[99,0,94,107,95,105,97,99],
[89,116,0,114,106,117,107,89],
[106,103,96,0,116,102,120,112],
[104,115,104,94,0,116,112,113],
[103,105,93,108,94,0,98,94],
[99,113,103,90,98,112,0,82],
[105,111,121,98,97,116,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,106,104,105,113,101,113],
[95,0,104,98,100,107,98,104],
[104,106,0,110,111,110,103,117],
[106,112,100,0,102,100,95,101],
[105,110,99,108,0,100,117,114],
[97,103,100,110,110,0,103,117],
[109,112,107,115,93,107,0,110],
[97,106,93,109,96,93,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,104,117,103,89,95],
[107,0,107,96,106,117,106,93],
[108,103,0,86,110,97,89,87],
[106,114,124,0,115,105,104,95],
[93,104,100,95,0,96,95,81],
[107,93,113,105,114,0,102,97],
[121,104,121,106,115,108,0,112],
[115,117,123,115,129,113,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,111,94,113,119,111,131],
[91,0,92,92,114,104,100,100],
[99,118,0,83,112,123,109,114],
[116,118,127,0,127,119,102,111],
[97,96,98,83,0,106,122,117],
[91,106,87,91,104,0,99,110],
[99,110,101,108,88,111,0,97],
[79,110,96,99,93,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,110,97,107,112,108],
[96,0,92,103,89,94,107,85],
[103,118,0,110,116,107,119,98],
[100,107,100,0,108,106,104,97],
[113,121,94,102,0,107,112,109],
[103,116,103,104,103,0,121,106],
[98,103,91,106,98,89,0,100],
[102,125,112,113,101,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,110,106,125,102,100,105],
[95,0,102,77,102,84,99,94],
[100,108,0,100,121,96,107,92],
[104,133,110,0,119,106,126,104],
[85,108,89,91,0,73,90,81],
[108,126,114,104,137,0,112,125],
[110,111,103,84,120,98,0,96],
[105,116,118,106,129,85,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,106,123,107,118,98,82],
[79,0,98,115,83,93,84,78],
[104,112,0,114,77,109,89,108],
[87,95,96,0,89,103,82,96],
[103,127,133,121,0,126,136,126],
[92,117,101,107,84,0,94,103],
[112,126,121,128,74,116,0,102],
[128,132,102,114,84,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,106,98,102,98,99],
[102,0,107,100,98,104,110,103],
[109,103,0,103,99,107,105,96],
[104,110,107,0,97,101,105,97],
[112,112,111,113,0,111,119,105],
[108,106,103,109,99,0,112,100],
[112,100,105,105,91,98,0,98],
[111,107,114,113,105,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,115,120,99,105,106,113],
[96,0,102,116,102,102,96,110],
[95,108,0,115,99,91,96,106],
[90,94,95,0,90,90,90,99],
[111,108,111,120,0,102,108,110],
[105,108,119,120,108,0,101,111],
[104,114,114,120,102,109,0,113],
[97,100,104,111,100,99,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,108,96,108,100,101,75],
[115,0,126,97,122,103,116,103],
[102,84,0,81,91,98,101,99],
[114,113,129,0,114,110,109,96],
[102,88,119,96,0,96,111,76],
[110,107,112,100,114,0,124,109],
[109,94,109,101,99,86,0,96],
[135,107,111,114,134,101,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,103,116,66,79,99],
[98,0,109,89,104,105,96,95],
[106,101,0,89,111,83,85,83],
[107,121,121,0,120,91,115,121],
[94,106,99,90,0,66,100,94],
[144,105,127,119,144,0,123,133],
[131,114,125,95,110,87,0,105],
[111,115,127,89,116,77,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,118,115,97,106,118,120],
[83,0,100,117,84,88,93,100],
[92,110,0,128,101,81,99,99],
[95,93,82,0,91,87,95,88],
[113,126,109,119,0,106,113,105],
[104,122,129,123,104,0,131,118],
[92,117,111,115,97,79,0,97],
[90,110,111,122,105,92,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,114,103,96,91,91,96],
[122,0,110,104,106,110,99,109],
[96,100,0,93,96,103,96,110],
[107,106,117,0,106,90,110,112],
[114,104,114,104,0,110,109,124],
[119,100,107,120,100,0,112,115],
[119,111,114,100,101,98,0,130],
[114,101,100,98,86,95,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,102,112,109,100,97,108],
[96,0,103,91,109,94,99,104],
[108,107,0,111,115,98,97,106],
[98,119,99,0,127,97,98,106],
[101,101,95,83,0,98,92,95],
[110,116,112,113,112,0,106,100],
[113,111,113,112,118,104,0,117],
[102,106,104,104,115,110,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,132,107,126,125,112,95],
[99,0,91,74,106,99,104,69],
[78,119,0,101,132,99,81,87],
[103,136,109,0,129,123,110,126],
[84,104,78,81,0,86,91,100],
[85,111,111,87,124,0,101,96],
[98,106,129,100,119,109,0,120],
[115,141,123,84,110,114,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,120,102,109,108,110],
[93,0,124,133,94,117,115,99],
[101,86,0,130,112,108,101,108],
[90,77,80,0,92,93,76,99],
[108,116,98,118,0,111,108,116],
[101,93,102,117,99,0,92,104],
[102,95,109,134,102,118,0,112],
[100,111,102,111,94,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,111,106,98,112,101,112],
[89,0,97,98,92,86,95,96],
[99,113,0,97,99,97,111,99],
[104,112,113,0,113,101,110,103],
[112,118,111,97,0,97,104,97],
[98,124,113,109,113,0,101,110],
[109,115,99,100,106,109,0,103],
[98,114,111,107,113,100,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,102,108,101,101,102,106],
[96,0,103,100,104,91,90,92],
[108,107,0,105,98,106,94,106],
[102,110,105,0,110,111,89,101],
[109,106,112,100,0,123,107,115],
[109,119,104,99,87,0,92,98],
[108,120,116,121,103,118,0,116],
[104,118,104,109,95,112,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,96,112,98,123,113,124],
[98,0,80,107,98,106,92,108],
[114,130,0,106,105,109,112,125],
[98,103,104,0,111,107,90,104],
[112,112,105,99,0,105,104,110],
[87,104,101,103,105,0,96,109],
[97,118,98,120,106,114,0,115],
[86,102,85,106,100,101,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,99,91,107,115,112,95],
[117,0,109,111,123,124,99,108],
[111,101,0,91,104,112,102,110],
[119,99,119,0,107,122,114,123],
[103,87,106,103,0,103,108,117],
[95,86,98,88,107,0,94,108],
[98,111,108,96,102,116,0,113],
[115,102,100,87,93,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,125,106,118,105,106,89],
[115,0,132,110,142,122,100,112],
[85,78,0,68,95,96,88,75],
[104,100,142,0,138,117,96,127],
[92,68,115,72,0,100,97,98],
[105,88,114,93,110,0,101,103],
[104,110,122,114,113,109,0,105],
[121,98,135,83,112,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,110,111,92,111,100],
[99,0,99,111,100,86,101,104],
[103,111,0,109,120,101,116,99],
[100,99,101,0,93,104,103,91],
[99,110,90,117,0,106,110,101],
[118,124,109,106,104,0,108,106],
[99,109,94,107,100,102,0,100],
[110,106,111,119,109,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,111,109,108,116,105],
[102,0,104,117,94,115,102,97],
[102,106,0,114,104,98,113,94],
[99,93,96,0,95,99,100,94],
[101,116,106,115,0,118,116,106],
[102,95,112,111,92,0,99,87],
[94,108,97,110,94,111,0,97],
[105,113,116,116,104,123,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,90,84,96,85,101,88],
[117,0,111,88,120,103,104,109],
[120,99,0,115,107,109,104,108],
[126,122,95,0,120,106,119,113],
[114,90,103,90,0,95,103,92],
[125,107,101,104,115,0,109,107],
[109,106,106,91,107,101,0,104],
[122,101,102,97,118,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,101,93,106,100,84,93],
[117,0,118,110,114,110,103,103],
[109,92,0,94,101,115,103,93],
[117,100,116,0,114,111,108,105],
[104,96,109,96,0,106,104,93],
[110,100,95,99,104,0,101,100],
[126,107,107,102,106,109,0,99],
[117,107,117,105,117,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,107,94,90,99,88],
[111,0,109,120,100,108,113,115],
[109,101,0,100,91,95,93,98],
[103,90,110,0,95,85,113,97],
[116,110,119,115,0,98,102,104],
[120,102,115,125,112,0,109,126],
[111,97,117,97,108,101,0,98],
[122,95,112,113,106,84,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,119,104,96,102,115,102],
[98,0,110,110,97,101,96,110],
[91,100,0,92,105,114,105,90],
[106,100,118,0,115,103,100,94],
[114,113,105,95,0,103,95,95],
[108,109,96,107,107,0,97,87],
[95,114,105,110,115,113,0,98],
[108,100,120,116,115,123,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,140,115,118,134,95,108],
[111,0,130,134,120,129,90,105],
[70,80,0,125,44,130,84,68],
[95,76,85,0,95,143,103,86],
[92,90,166,115,0,130,132,78],
[76,81,80,67,80,0,78,42],
[115,120,126,107,78,132,0,69],
[102,105,142,124,132,168,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,103,103,103,103,111],
[97,0,107,98,92,99,95,97],
[98,103,0,103,91,89,105,107],
[107,112,107,0,95,106,99,103],
[107,118,119,115,0,107,105,104],
[107,111,121,104,103,0,113,106],
[107,115,105,111,105,97,0,113],
[99,113,103,107,106,104,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,98,93,83,116,101,105],
[102,0,84,90,99,107,114,92],
[112,126,0,107,104,138,111,100],
[117,120,103,0,115,127,112,119],
[127,111,106,95,0,113,114,109],
[94,103,72,83,97,0,80,84],
[109,96,99,98,96,130,0,111],
[105,118,110,91,101,126,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,94,99,113,97,103],
[104,0,117,98,104,111,116,91],
[101,93,0,94,104,97,76,96],
[116,112,116,0,114,114,104,98],
[111,106,106,96,0,117,112,93],
[97,99,113,96,93,0,101,97],
[113,94,134,106,98,109,0,105],
[107,119,114,112,117,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,130,107,94,93,81],
[108,0,109,127,121,124,115,98],
[98,101,0,121,93,105,95,93],
[80,83,89,0,74,86,89,101],
[103,89,117,136,0,107,96,99],
[116,86,105,124,103,0,95,106],
[117,95,115,121,114,115,0,89],
[129,112,117,109,111,104,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,69,96,98,117,67,101],
[121,0,103,113,116,135,111,134],
[141,107,0,115,120,126,93,126],
[114,97,95,0,107,122,83,105],
[112,94,90,103,0,131,105,111],
[93,75,84,88,79,0,85,94],
[143,99,117,127,105,125,0,127],
[109,76,84,105,99,116,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,99,110,124,96,130,108],
[89,0,91,112,114,97,109,107],
[111,119,0,113,83,85,143,84],
[100,98,97,0,127,112,122,104],
[86,96,127,83,0,94,123,109],
[114,113,125,98,116,0,114,82],
[80,101,67,88,87,96,0,65],
[102,103,126,106,101,128,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,99,96,103,101,107,113],
[100,0,106,107,92,108,108,117],
[111,104,0,103,91,108,108,122],
[114,103,107,0,105,104,94,98],
[107,118,119,105,0,109,106,118],
[109,102,102,106,101,0,104,107],
[103,102,102,116,104,106,0,114],
[97,93,88,112,92,103,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,93,104,105,111,107,106],
[101,0,94,104,101,114,109,103],
[117,116,0,102,107,113,105,111],
[106,106,108,0,100,118,114,105],
[105,109,103,110,0,119,107,108],
[99,96,97,92,91,0,93,94],
[103,101,105,96,103,117,0,102],
[104,107,99,105,102,116,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,96,92,95,92,89,106],
[102,0,92,87,90,104,107,70],
[114,118,0,84,104,107,101,86],
[118,123,126,0,100,107,119,98],
[115,120,106,110,0,117,102,124],
[118,106,103,103,93,0,93,105],
[121,103,109,91,108,117,0,102],
[104,140,124,112,86,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,103,109,104,104,105,103],
[91,0,116,110,109,107,107,119],
[107,94,0,92,112,108,69,104],
[101,100,118,0,98,110,112,93],
[106,101,98,112,0,90,93,128],
[106,103,102,100,120,0,108,122],
[105,103,141,98,117,102,0,147],
[107,91,106,117,82,88,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,118,104,120,116,113],
[101,0,106,101,100,112,113,100],
[103,104,0,104,106,113,96,103],
[92,109,106,0,99,115,107,105],
[106,110,104,111,0,115,113,112],
[90,98,97,95,95,0,95,106],
[94,97,114,103,97,115,0,102],
[97,110,107,105,98,104,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,120,117,121,102,104,129],
[97,0,110,92,107,97,118,110],
[90,100,0,94,97,102,99,105],
[93,118,116,0,113,96,104,106],
[89,103,113,97,0,93,89,94],
[108,113,108,114,117,0,96,109],
[106,92,111,106,121,114,0,118],
[81,100,105,104,116,101,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,97,105,112,111,107],
[96,0,92,89,94,101,105,94],
[97,118,0,91,99,105,110,103],
[113,121,119,0,106,100,115,109],
[105,116,111,104,0,113,111,105],
[98,109,105,110,97,0,105,104],
[99,105,100,95,99,105,0,98],
[103,116,107,101,105,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,104,108,95,99,95,100],
[120,0,114,110,109,107,104,118],
[106,96,0,127,111,104,113,120],
[102,100,83,0,104,106,108,106],
[115,101,99,106,0,100,105,106],
[111,103,106,104,110,0,111,108],
[115,106,97,102,105,99,0,110],
[110,92,90,104,104,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,122,102,90,118,97,106],
[115,0,135,134,93,142,111,136],
[88,75,0,109,94,123,76,118],
[108,76,101,0,98,118,82,96],
[120,117,116,112,0,136,97,137],
[92,68,87,92,74,0,68,112],
[113,99,134,128,113,142,0,130],
[104,74,92,114,73,98,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,133,122,117,118,128,110],
[105,0,121,114,132,108,121,100],
[77,89,0,98,99,98,110,89],
[88,96,112,0,104,106,101,96],
[93,78,111,106,0,100,113,102],
[92,102,112,104,110,0,101,98],
[82,89,100,109,97,109,0,90],
[100,110,121,114,108,112,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,108,116,112,99,116],
[104,0,110,107,114,117,101,110],
[100,100,0,104,103,123,108,120],
[102,103,106,0,92,114,96,108],
[94,96,107,118,0,119,97,119],
[98,93,87,96,91,0,89,98],
[111,109,102,114,113,121,0,116],
[94,100,90,102,91,112,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,104,109,104,96,102],
[110,0,107,109,97,111,106,97],
[100,103,0,96,100,104,100,101],
[106,101,114,0,104,104,105,97],
[101,113,110,106,0,116,103,106],
[106,99,106,106,94,0,93,102],
[114,104,110,105,107,117,0,110],
[108,113,109,113,104,108,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,108,99,100,95,104],
[106,0,98,99,104,107,93,104],
[102,112,0,104,102,107,101,101],
[102,111,106,0,100,104,97,98],
[111,106,108,110,0,109,112,105],
[110,103,103,106,101,0,100,101],
[115,117,109,113,98,110,0,107],
[106,106,109,112,105,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,91,98,100,133,103,90],
[123,0,101,97,94,117,111,100],
[119,109,0,102,109,126,111,123],
[112,113,108,0,104,118,99,105],
[110,116,101,106,0,118,111,101],
[77,93,84,92,92,0,95,87],
[107,99,99,111,99,115,0,107],
[120,110,87,105,109,123,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,92,95,105,104,97,99],
[107,0,106,89,107,113,115,95],
[118,104,0,118,117,124,117,116],
[115,121,92,0,107,105,118,107],
[105,103,93,103,0,94,97,92],
[106,97,86,105,116,0,118,100],
[113,95,93,92,113,92,0,98],
[111,115,94,103,118,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,108,95,85,95,111,109],
[122,0,128,93,106,116,104,119],
[102,82,0,101,84,95,105,101],
[115,117,109,0,93,116,108,133],
[125,104,126,117,0,104,113,132],
[115,94,115,94,106,0,113,123],
[99,106,105,102,97,97,0,115],
[101,91,109,77,78,87,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,83,85,92,81,90,88],
[98,0,91,87,91,93,88,90],
[127,119,0,98,93,92,104,107],
[125,123,112,0,107,113,100,104],
[118,119,117,103,0,110,114,104],
[129,117,118,97,100,0,117,121],
[120,122,106,110,96,93,0,93],
[122,120,103,106,106,89,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,114,97,93,106,90,85],
[101,0,100,118,107,129,116,118],
[96,110,0,106,119,138,123,97],
[113,92,104,0,133,127,123,94],
[117,103,91,77,0,128,97,64],
[104,81,72,83,82,0,97,82],
[120,94,87,87,113,113,0,82],
[125,92,113,116,146,128,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,107,98,103,108,98],
[102,0,107,104,108,100,112,96],
[106,103,0,115,105,107,112,100],
[103,106,95,0,100,98,102,113],
[112,102,105,110,0,105,108,117],
[107,110,103,112,105,0,112,112],
[102,98,98,108,102,98,0,97],
[112,114,110,97,93,98,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,98,101,106,90,95,98],
[111,0,118,105,119,112,108,112],
[112,92,0,90,120,99,97,113],
[109,105,120,0,111,91,97,121],
[104,91,90,99,0,87,93,103],
[120,98,111,119,123,0,112,119],
[115,102,113,113,117,98,0,112],
[112,98,97,89,107,91,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,111,122,105,118,107,105],
[92,0,112,124,110,113,100,115],
[99,98,0,121,105,114,91,91],
[88,86,89,0,104,109,95,83],
[105,100,105,106,0,114,99,107],
[92,97,96,101,96,0,97,87],
[103,110,119,115,111,113,0,107],
[105,95,119,127,103,123,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,92,87,81,97,97,95],
[126,0,106,104,112,116,110,114],
[118,104,0,105,105,124,93,103],
[123,106,105,0,109,113,105,118],
[129,98,105,101,0,126,116,109],
[113,94,86,97,84,0,94,100],
[113,100,117,105,94,116,0,108],
[115,96,107,92,101,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,80,82,89,89,103,94],
[128,0,97,103,107,114,109,112],
[130,113,0,113,114,104,116,113],
[128,107,97,0,95,103,115,102],
[121,103,96,115,0,117,98,120],
[121,96,106,107,93,0,95,97],
[107,101,94,95,112,115,0,102],
[116,98,97,108,90,113,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,99,94,94,87,101,106],
[117,0,117,97,113,99,116,115],
[111,93,0,94,85,99,118,105],
[116,113,116,0,100,110,117,117],
[116,97,125,110,0,115,118,113],
[123,111,111,100,95,0,120,115],
[109,94,92,93,92,90,0,106],
[104,95,105,93,97,95,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,104,110,94,94,108],
[93,0,104,112,99,70,94,127],
[101,106,0,105,109,117,82,138],
[106,98,105,0,88,86,83,112],
[100,111,101,122,0,87,95,109],
[116,140,93,124,123,0,122,141],
[116,116,128,127,115,88,0,137],
[102,83,72,98,101,69,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,101,100,98,98,98,93],
[97,0,115,108,103,101,107,104],
[109,95,0,96,97,93,98,105],
[110,102,114,0,100,112,110,103],
[112,107,113,110,0,108,112,101],
[112,109,117,98,102,0,111,93],
[112,103,112,100,98,99,0,99],
[117,106,105,107,109,117,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,115,103,107,104,104,95],
[113,0,112,109,111,101,110,104],
[95,98,0,97,102,89,100,96],
[107,101,113,0,112,103,111,99],
[103,99,108,98,0,94,107,99],
[106,109,121,107,116,0,120,105],
[106,100,110,99,103,90,0,100],
[115,106,114,111,111,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,107,108,105,103,100],
[107,0,114,103,115,100,106,101],
[109,96,0,101,94,93,91,98],
[103,107,109,0,112,103,112,109],
[102,95,116,98,0,101,93,99],
[105,110,117,107,109,0,108,112],
[107,104,119,98,117,102,0,105],
[110,109,112,101,111,98,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,104,105,116,112,98],
[102,0,101,115,108,117,117,104],
[110,109,0,103,110,113,112,112],
[106,95,107,0,100,113,97,94],
[105,102,100,110,0,104,111,92],
[94,93,97,97,106,0,100,87],
[98,93,98,113,99,110,0,106],
[112,106,98,116,118,123,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,103,98,98,122,77,114],
[81,0,118,126,118,141,89,131],
[107,92,0,79,113,91,68,105],
[112,84,131,0,92,83,103,101],
[112,92,97,118,0,109,110,120],
[88,69,119,127,101,0,108,107],
[133,121,142,107,100,102,0,116],
[96,79,105,109,90,103,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,111,85,123,80,113,113],
[114,0,115,106,113,95,114,103],
[99,95,0,94,113,73,104,92],
[125,104,116,0,110,112,127,115],
[87,97,97,100,0,95,113,91],
[130,115,137,98,115,0,128,112],
[97,96,106,83,97,82,0,116],
[97,107,118,95,119,98,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,107,102,110,111,109],
[104,0,103,102,98,104,118,107],
[105,107,0,99,104,111,108,114],
[103,108,111,0,115,112,114,117],
[108,112,106,95,0,101,107,114],
[100,106,99,98,109,0,106,107],
[99,92,102,96,103,104,0,103],
[101,103,96,93,96,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,99,110,112,109,100],
[104,0,102,102,96,107,110,95],
[109,108,0,99,101,110,116,97],
[111,108,111,0,107,115,117,101],
[100,114,109,103,0,113,102,108],
[98,103,100,95,97,0,110,98],
[101,100,94,93,108,100,0,103],
[110,115,113,109,102,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,141,111,119,119,120,148],
[116,0,120,139,86,107,135,134],
[69,90,0,101,65,92,76,118],
[99,71,109,0,62,78,71,98],
[91,124,145,148,0,125,127,154],
[91,103,118,132,85,0,107,165],
[90,75,134,139,83,103,0,155],
[62,76,92,112,56,45,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,98,121,98,101,112,113],
[102,0,97,110,103,96,109,103],
[112,113,0,110,98,93,102,99],
[89,100,100,0,101,103,104,112],
[112,107,112,109,0,113,103,116],
[109,114,117,107,97,0,107,93],
[98,101,108,106,107,103,0,114],
[97,107,111,98,94,117,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,144,104,126,99,119,137],
[79,0,117,82,109,94,93,121],
[66,93,0,101,92,98,95,112],
[106,128,109,0,126,111,100,135],
[84,101,118,84,0,98,102,120],
[111,116,112,99,112,0,86,130],
[91,117,115,110,108,124,0,128],
[73,89,98,75,90,80,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,116,114,108,85,109,99],
[109,0,108,120,124,117,103,117],
[94,102,0,107,103,102,98,91],
[96,90,103,0,97,84,97,98],
[102,86,107,113,0,90,94,103],
[125,93,108,126,120,0,106,112],
[101,107,112,113,116,104,0,109],
[111,93,119,112,107,98,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,116,92,107,95,103,95],
[100,0,93,95,100,81,104,103],
[94,117,0,105,82,86,99,95],
[118,115,105,0,105,91,106,99],
[103,110,128,105,0,107,103,102],
[115,129,124,119,103,0,106,117],
[107,106,111,104,107,104,0,101],
[115,107,115,111,108,93,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,117,115,108,104,109],
[98,0,96,99,115,101,106,103],
[102,114,0,110,111,107,104,106],
[93,111,100,0,108,93,106,93],
[95,95,99,102,0,101,109,93],
[102,109,103,117,109,0,106,93],
[106,104,106,104,101,104,0,96],
[101,107,104,117,117,117,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,79,107,108,101,93,100],
[120,0,112,113,120,118,102,110],
[131,98,0,109,121,117,106,114],
[103,97,101,0,105,100,113,101],
[102,90,89,105,0,94,97,106],
[109,92,93,110,116,0,105,101],
[117,108,104,97,113,105,0,105],
[110,100,96,109,104,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,101,107,111,105,92],
[100,0,111,109,112,105,90,84],
[102,99,0,108,110,107,98,92],
[109,101,102,0,105,108,100,109],
[103,98,100,105,0,120,105,79],
[99,105,103,102,90,0,102,80],
[105,120,112,110,105,108,0,85],
[118,126,118,101,131,130,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,113,108,105,92,93],
[108,0,113,108,103,112,111,101],
[105,97,0,101,104,108,102,96],
[97,102,109,0,113,104,103,107],
[102,107,106,97,0,106,106,101],
[105,98,102,106,104,0,98,96],
[118,99,108,107,104,112,0,105],
[117,109,114,103,109,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,40,72,177,96,82,39],
[127,0,128,94,168,200,163,62],
[170,82,0,114,168,119,82,121],
[138,116,96,0,168,129,115,126],
[33,42,42,42,0,42,42,42],
[114,10,91,81,168,0,9,48],
[128,47,128,95,168,201,0,95],
[171,148,89,84,168,162,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,112,114,97,104,105],
[103,0,98,107,105,111,105,101],
[99,112,0,104,110,100,102,94],
[98,103,106,0,100,96,106,95],
[96,105,100,110,0,92,107,99],
[113,99,110,114,118,0,108,100],
[106,105,108,104,103,102,0,95],
[105,109,116,115,111,110,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,97,107,100,115,108],
[105,0,113,92,106,100,109,116],
[107,97,0,100,107,100,103,101],
[113,118,110,0,114,105,109,117],
[103,104,103,96,0,94,99,100],
[110,110,110,105,116,0,101,110],
[95,101,107,101,111,109,0,107],
[102,94,109,93,110,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,81,105,139,113,135,139],
[104,0,105,102,87,93,128,170],
[129,105,0,175,138,152,129,200],
[105,108,35,0,63,86,125,108],
[71,123,72,147,0,114,82,124],
[97,117,58,124,96,0,107,149],
[75,82,81,85,128,103,0,128],
[71,40,10,102,86,61,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,118,108,115,160,75,87],
[97,0,61,58,78,98,65,56],
[92,149,0,50,106,152,81,138],
[102,152,160,0,134,153,57,109],
[95,132,104,76,0,132,106,121],
[50,112,58,57,78,0,78,113],
[135,145,129,153,104,132,0,139],
[123,154,72,101,89,97,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,111,107,110,109,105],
[111,0,95,108,106,98,104,96],
[108,115,0,109,110,97,99,96],
[99,102,101,0,96,84,94,83],
[103,104,100,114,0,112,101,91],
[100,112,113,126,98,0,109,95],
[101,106,111,116,109,101,0,84],
[105,114,114,127,119,115,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,111,105,109,104,101],
[99,0,100,103,100,107,98,97],
[95,110,0,118,108,100,117,95],
[99,107,92,0,100,105,102,93],
[105,110,102,110,0,102,104,102],
[101,103,110,105,108,0,102,102],
[106,112,93,108,106,108,0,108],
[109,113,115,117,108,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,111,108,101,99,115],
[112,0,102,90,99,111,107,99],
[103,108,0,108,113,118,101,114],
[99,120,102,0,103,115,97,109],
[102,111,97,107,0,93,97,114],
[109,99,92,95,117,0,110,109],
[111,103,109,113,113,100,0,115],
[95,111,96,101,96,101,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,107,99,100,106,106],
[109,0,101,101,99,105,104,101],
[105,109,0,102,109,99,107,106],
[103,109,108,0,114,98,91,101],
[111,111,101,96,0,100,100,103],
[110,105,111,112,110,0,117,105],
[104,106,103,119,110,93,0,106],
[104,109,104,109,107,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,136,121,111,125,131,121],
[120,0,128,136,130,150,105,140],
[74,82,0,82,97,115,93,105],
[89,74,128,0,109,127,102,119],
[99,80,113,101,0,107,98,94],
[85,60,95,83,103,0,107,78],
[79,105,117,108,112,103,0,115],
[89,70,105,91,116,132,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,100,118,109,110,97,122],
[93,0,100,90,106,99,97,95],
[110,110,0,103,109,113,106,119],
[92,120,107,0,114,112,117,114],
[101,104,101,96,0,110,105,120],
[100,111,97,98,100,0,106,97],
[113,113,104,93,105,104,0,106],
[88,115,91,96,90,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,99,126,124,118,69,126],
[92,0,181,158,191,207,161,161],
[111,29,0,137,120,54,65,108],
[84,52,73,0,77,70,53,68],
[86,19,90,133,0,50,133,83],
[92,3,156,140,160,0,136,161],
[141,49,145,157,77,74,0,147],
[84,49,102,142,127,49,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,109,117,105,103,113,120],
[112,0,115,100,104,115,109,127],
[101,95,0,102,101,101,110,113],
[93,110,108,0,113,100,101,125],
[105,106,109,97,0,103,102,119],
[107,95,109,110,107,0,109,119],
[97,101,100,109,108,101,0,117],
[90,83,97,85,91,91,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,120,114,102,111,124,106],
[99,0,119,120,115,113,127,107],
[90,91,0,105,96,95,106,98],
[96,90,105,0,85,100,104,95],
[108,95,114,125,0,103,113,94],
[99,97,115,110,107,0,116,105],
[86,83,104,106,97,94,0,94],
[104,103,112,115,116,105,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,119,105,102,113,110,94],
[114,0,119,100,109,108,111,105],
[91,91,0,107,98,94,111,97],
[105,110,103,0,113,106,103,102],
[108,101,112,97,0,103,108,92],
[97,102,116,104,107,0,100,102],
[100,99,99,107,102,110,0,99],
[116,105,113,108,118,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,128,121,118,139,126,130],
[105,0,94,100,100,96,97,108],
[82,116,0,78,117,113,114,124],
[89,110,132,0,118,138,115,116],
[92,110,93,92,0,105,102,123],
[71,114,97,72,105,0,100,98],
[84,113,96,95,108,110,0,108],
[80,102,86,94,87,112,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,95,112,110,103,91,99],
[107,0,105,119,109,105,97,108],
[115,105,0,115,113,101,108,108],
[98,91,95,0,106,100,108,113],
[100,101,97,104,0,106,93,96],
[107,105,109,110,104,0,108,102],
[119,113,102,102,117,102,0,119],
[111,102,102,97,114,108,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,156,156,120,120,8,93],
[117,0,126,161,95,161,81,81],
[54,84,0,139,68,152,35,54],
[54,49,71,0,81,111,0,54],
[90,115,142,129,0,147,35,133],
[90,49,58,99,63,0,0,49],
[202,129,175,210,175,210,0,98],
[117,129,156,156,77,161,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,96,116,112,125,104,107],
[93,0,94,107,103,99,103,95],
[114,116,0,114,99,116,110,105],
[94,103,96,0,105,110,90,102],
[98,107,111,105,0,107,99,94],
[85,111,94,100,103,0,108,91],
[106,107,100,120,111,102,0,101],
[103,115,105,108,116,119,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,123,82,158,154,53,199],
[107,0,178,133,105,139,111,169],
[87,32,0,131,116,116,36,76],
[128,77,79,0,132,195,92,132],
[52,105,94,78,0,119,56,115],
[56,71,94,15,91,0,56,77],
[157,99,174,118,154,154,0,184],
[11,41,134,78,95,133,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,120,114,114,102,116,115],
[76,0,85,92,81,75,94,92],
[90,125,0,104,105,104,104,111],
[96,118,106,0,101,108,100,95],
[96,129,105,109,0,112,103,115],
[108,135,106,102,98,0,107,109],
[94,116,106,110,107,103,0,100],
[95,118,99,115,95,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,118,114,101,125,131,110],
[108,0,109,103,113,108,111,111],
[92,101,0,104,104,118,107,105],
[96,107,106,0,113,121,118,113],
[109,97,106,97,0,120,112,101],
[85,102,92,89,90,0,107,99],
[79,99,103,92,98,103,0,90],
[100,99,105,97,109,111,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,74,88,85,92,85,91],
[123,0,94,98,84,107,85,101],
[136,116,0,113,104,125,114,142],
[122,112,97,0,108,126,117,120],
[125,126,106,102,0,118,98,111],
[118,103,85,84,92,0,106,101],
[125,125,96,93,112,104,0,119],
[119,109,68,90,99,109,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,117,120,99,100,109,119],
[89,0,101,104,105,93,93,93],
[93,109,0,111,105,110,104,104],
[90,106,99,0,109,94,102,101],
[111,105,105,101,0,99,100,107],
[110,117,100,116,111,0,109,106],
[101,117,106,108,110,101,0,104],
[91,117,106,109,103,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,91,99,111,98,109,79],
[118,0,123,99,122,104,137,90],
[119,87,0,85,125,118,129,92],
[111,111,125,0,132,101,140,110],
[99,88,85,78,0,89,119,88],
[112,106,92,109,121,0,130,90],
[101,73,81,70,91,80,0,66],
[131,120,118,100,122,120,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,118,97,110,94,91,94],
[118,0,118,105,119,84,104,108],
[92,92,0,99,93,100,97,89],
[113,105,111,0,109,105,85,119],
[100,91,117,101,0,86,104,93],
[116,126,110,105,124,0,105,110],
[119,106,113,125,106,105,0,119],
[116,102,121,91,117,100,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,96,106,108,117,117,107],
[98,0,88,99,97,103,99,92],
[114,122,0,123,107,118,108,103],
[104,111,87,0,101,106,94,93],
[102,113,103,109,0,107,97,96],
[93,107,92,104,103,0,105,92],
[93,111,102,116,113,105,0,94],
[103,118,107,117,114,118,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,113,111,112,112,106],
[104,0,106,111,109,105,114,113],
[107,104,0,115,114,104,100,111],
[97,99,95,0,91,103,105,88],
[99,101,96,119,0,115,108,103],
[98,105,106,107,95,0,111,106],
[98,96,110,105,102,99,0,110],
[104,97,99,122,107,104,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,96,95,115,96,99,103],
[124,0,118,114,115,87,105,81],
[114,92,0,121,125,92,105,105],
[115,96,89,0,116,87,96,74],
[95,95,85,94,0,88,98,65],
[114,123,118,123,122,0,102,103],
[111,105,105,114,112,108,0,102],
[107,129,105,136,145,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,114,104,104,128,126,99],
[83,0,114,98,100,90,109,100],
[96,96,0,100,83,84,103,85],
[106,112,110,0,102,115,119,92],
[106,110,127,108,0,115,120,91],
[82,120,126,95,95,0,113,109],
[84,101,107,91,90,97,0,101],
[111,110,125,118,119,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,73,67,94,94,100],
[100,0,104,100,75,109,95,106],
[107,106,0,106,88,110,101,107],
[137,110,104,0,90,110,103,125],
[143,135,122,120,0,127,105,125],
[116,101,100,100,83,0,100,91],
[116,115,109,107,105,110,0,115],
[110,104,103,85,85,119,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,106,113,109,121,108],
[102,0,99,106,117,114,118,107],
[110,111,0,93,120,98,119,104],
[104,104,117,0,111,109,122,108],
[97,93,90,99,0,100,117,98],
[101,96,112,101,110,0,109,109],
[89,92,91,88,93,101,0,91],
[102,103,106,102,112,101,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,109,108,103,118,105],
[104,0,112,112,96,88,98,87],
[99,98,0,114,86,95,103,98],
[101,98,96,0,84,108,93,102],
[102,114,124,126,0,105,99,107],
[107,122,115,102,105,0,110,117],
[92,112,107,117,111,100,0,96],
[105,123,112,108,103,93,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,95,78,97,118,93,95],
[102,0,101,95,106,119,85,79],
[115,109,0,92,100,112,102,95],
[132,115,118,0,99,121,104,94],
[113,104,110,111,0,117,109,105],
[92,91,98,89,93,0,95,83],
[117,125,108,106,101,115,0,85],
[115,131,115,116,105,127,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,108,123,118,117,115],
[109,0,116,112,125,118,124,93],
[97,94,0,97,110,107,117,107],
[102,98,113,0,111,115,104,92],
[87,85,100,99,0,111,100,97],
[92,92,103,95,99,0,105,83],
[93,86,93,106,110,105,0,92],
[95,117,103,118,113,127,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,102,111,98,98,91,107],
[117,0,92,112,116,106,110,104],
[108,118,0,107,97,103,107,113],
[99,98,103,0,103,94,107,102],
[112,94,113,107,0,108,100,107],
[112,104,107,116,102,0,105,100],
[119,100,103,103,110,105,0,120],
[103,106,97,108,103,110,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,96,97,104,111,109,95],
[123,0,104,95,120,116,105,114],
[114,106,0,95,108,108,103,106],
[113,115,115,0,113,121,103,105],
[106,90,102,97,0,110,94,98],
[99,94,102,89,100,0,93,88],
[101,105,107,107,116,117,0,97],
[115,96,104,105,112,122,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,117,106,119,93,103,102],
[109,0,135,108,106,119,114,103],
[93,75,0,97,83,113,96,97],
[104,102,113,0,107,119,96,101],
[91,104,127,103,0,92,100,101],
[117,91,97,91,118,0,92,95],
[107,96,114,114,110,118,0,111],
[108,107,113,109,109,115,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,85,111,107,101,76,101],
[121,0,96,135,127,89,95,118],
[125,114,0,114,106,107,101,114],
[99,75,96,0,100,86,77,101],
[103,83,104,110,0,107,99,105],
[109,121,103,124,103,0,108,128],
[134,115,109,133,111,102,0,97],
[109,92,96,109,105,82,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,116,115,110,156,99],
[99,0,118,131,99,100,118,104],
[104,92,0,146,112,130,141,125],
[94,79,64,0,78,91,114,93],
[95,111,98,132,0,121,117,111],
[100,110,80,119,89,0,115,81],
[54,92,69,96,93,95,0,68],
[111,106,85,117,99,129,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,83,94,88,111,107,115],
[89,0,73,93,105,114,101,104],
[127,137,0,122,104,147,141,106],
[116,117,88,0,100,144,110,96],
[122,105,106,110,0,105,98,106],
[99,96,63,66,105,0,96,80],
[103,109,69,100,112,114,0,95],
[95,106,104,114,104,130,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,82,86,97,102,104,87],
[101,0,93,85,111,107,95,93],
[128,117,0,97,122,109,108,114],
[124,125,113,0,129,126,121,94],
[113,99,88,81,0,95,104,74],
[108,103,101,84,115,0,95,91],
[106,115,102,89,106,115,0,101],
[123,117,96,116,136,119,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,109,106,105,104,97,108],
[95,0,117,96,99,100,105,112],
[101,93,0,94,91,94,93,105],
[104,114,116,0,97,109,103,112],
[105,111,119,113,0,103,114,127],
[106,110,116,101,107,0,100,113],
[113,105,117,107,96,110,0,106],
[102,98,105,98,83,97,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,96,108,103,102,90,98],
[120,0,104,108,113,117,97,116],
[114,106,0,110,112,107,101,115],
[102,102,100,0,91,117,105,118],
[107,97,98,119,0,111,90,99],
[108,93,103,93,99,0,88,97],
[120,113,109,105,120,122,0,117],
[112,94,95,92,111,113,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,121,113,116,88,107,109],
[78,0,84,103,98,96,93,93],
[89,126,0,104,89,85,110,97],
[97,107,106,0,102,107,104,99],
[94,112,121,108,0,106,90,94],
[122,114,125,103,104,0,114,121],
[103,117,100,106,120,96,0,109],
[101,117,113,111,116,89,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,107,107,102,109,102,96],
[113,0,116,102,108,108,109,99],
[103,94,0,89,106,99,98,98],
[103,108,121,0,109,108,103,106],
[108,102,104,101,0,103,96,108],
[101,102,111,102,107,0,99,93],
[108,101,112,107,114,111,0,109],
[114,111,112,104,102,117,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,86,88,74,97,92,84],
[95,0,95,102,75,96,82,98],
[124,115,0,103,101,101,91,95],
[122,108,107,0,121,117,105,116],
[136,135,109,89,0,107,102,103],
[113,114,109,93,103,0,87,98],
[118,128,119,105,108,123,0,130],
[126,112,115,94,107,112,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,104,113,98,109,116,114],
[111,0,122,111,100,106,108,114],
[106,88,0,100,101,95,102,110],
[97,99,110,0,94,100,108,106],
[112,110,109,116,0,106,117,102],
[101,104,115,110,104,0,105,117],
[94,102,108,102,93,105,0,107],
[96,96,100,104,108,93,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,95,90,101,118,106,127],
[113,0,97,100,120,97,122,115],
[115,113,0,101,122,104,130,142],
[120,110,109,0,98,114,122,140],
[109,90,88,112,0,108,109,97],
[92,113,106,96,102,0,122,122],
[104,88,80,88,101,88,0,102],
[83,95,68,70,113,88,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,97,95,116,99,95,92],
[110,0,97,119,109,101,105,105],
[113,113,0,104,128,108,105,105],
[115,91,106,0,110,103,97,95],
[94,101,82,100,0,94,91,87],
[111,109,102,107,116,0,93,100],
[115,105,105,113,119,117,0,114],
[118,105,105,115,123,110,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,210,92,177,210,125,125],
[85,0,210,0,85,177,0,92],
[0,0,0,0,85,85,0,0],
[118,210,210,0,85,210,118,210],
[33,125,125,125,0,125,33,125],
[0,33,125,0,85,0,0,92],
[85,210,210,92,177,210,0,177],
[85,118,210,0,85,118,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,137,114,96,117,126,108],
[96,0,83,87,79,82,99,108],
[73,127,0,69,59,108,122,122],
[96,123,141,0,110,101,124,107],
[114,131,151,100,0,128,167,117],
[93,128,102,109,82,0,138,118],
[84,111,88,86,43,72,0,109],
[102,102,88,103,93,92,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,139,131,134,101,117,126],
[77,0,137,136,130,83,124,94],
[71,73,0,119,112,90,83,94],
[79,74,91,0,81,113,107,79],
[76,80,98,129,0,90,93,92],
[109,127,120,97,120,0,108,123],
[93,86,127,103,117,102,0,82],
[84,116,116,131,118,87,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,112,130,114,95,122,103],
[119,0,107,113,121,103,110,90],
[98,103,0,120,122,114,107,108],
[80,97,90,0,110,80,96,88],
[96,89,88,100,0,86,108,97],
[115,107,96,130,124,0,110,113],
[88,100,103,114,102,100,0,100],
[107,120,102,122,113,97,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,105,123,107,107,122,121],
[96,0,91,105,111,99,117,113],
[105,119,0,129,114,107,121,118],
[87,105,81,0,97,96,99,99],
[103,99,96,113,0,97,114,117],
[103,111,103,114,113,0,125,118],
[88,93,89,111,96,85,0,97],
[89,97,92,111,93,92,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,98,102,105,105,132,115],
[126,0,121,119,90,107,123,115],
[112,89,0,122,108,128,104,104],
[108,91,88,0,88,93,115,85],
[105,120,102,122,0,125,140,94],
[105,103,82,117,85,0,117,87],
[78,87,106,95,70,93,0,77],
[95,95,106,125,116,123,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,88,90,96,86,95,90],
[99,0,96,102,104,92,101,105],
[122,114,0,105,105,112,108,116],
[120,108,105,0,109,108,114,106],
[114,106,105,101,0,99,103,99],
[124,118,98,102,111,0,110,115],
[115,109,102,96,107,100,0,110],
[120,105,94,104,111,95,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,97,96,94,99,94,98],
[118,0,113,117,105,113,119,113],
[113,97,0,105,101,118,102,98],
[114,93,105,0,104,106,103,96],
[116,105,109,106,0,106,105,97],
[111,97,92,104,104,0,101,92],
[116,91,108,107,105,109,0,103],
[112,97,112,114,113,118,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,112,130,112,100,112,108],
[94,0,88,109,107,95,107,98],
[98,122,0,122,123,110,122,112],
[80,101,88,0,96,89,106,101],
[98,103,87,114,0,113,119,108],
[110,115,100,121,97,0,117,112],
[98,103,88,104,91,93,0,101],
[102,112,98,109,102,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,95,98,122,92,126,105],
[121,0,112,134,125,104,122,101],
[115,98,0,122,118,104,121,114],
[112,76,88,0,127,93,117,85],
[88,85,92,83,0,77,105,95],
[118,106,106,117,133,0,135,93],
[84,88,89,93,105,75,0,79],
[105,109,96,125,115,117,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,93,102,106,103,102,104],
[122,0,94,114,125,124,122,102],
[117,116,0,108,122,99,117,127],
[108,96,102,0,106,92,120,106],
[104,85,88,104,0,99,115,122],
[107,86,111,118,111,0,108,116],
[108,88,93,90,95,102,0,104],
[106,108,83,104,88,94,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,94,108,91,91,108,101],
[118,0,111,95,110,91,116,116],
[116,99,0,123,117,114,102,107],
[102,115,87,0,111,91,112,109],
[119,100,93,99,0,93,110,103],
[119,119,96,119,117,0,98,106],
[102,94,108,98,100,112,0,114],
[109,94,103,101,107,104,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,112,124,119,115,104],
[103,0,107,114,123,110,129,101],
[112,103,0,122,109,117,126,120],
[98,96,88,0,113,109,111,106],
[86,87,101,97,0,111,105,104],
[91,100,93,101,99,0,116,100],
[95,81,84,99,105,94,0,101],
[106,109,90,104,106,110,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,108,95,117,117,124,115],
[114,0,109,101,107,115,125,117],
[102,101,0,99,105,97,109,104],
[115,109,111,0,117,123,122,104],
[93,103,105,93,0,103,111,97],
[93,95,113,87,107,0,102,94],
[86,85,101,88,99,108,0,96],
[95,93,106,106,113,116,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,101,91,97,106,98,111],
[117,0,114,104,114,116,111,120],
[109,96,0,101,105,112,104,114],
[119,106,109,0,104,123,104,120],
[113,96,105,106,0,117,102,110],
[104,94,98,87,93,0,79,103],
[112,99,106,106,108,131,0,118],
[99,90,96,90,100,107,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,104,106,108,111,115,108],
[93,0,105,95,110,97,108,101],
[106,105,0,103,101,98,115,100],
[104,115,107,0,115,100,99,97],
[102,100,109,95,0,102,109,108],
[99,113,112,110,108,0,104,108],
[95,102,95,111,101,106,0,104],
[102,109,110,113,102,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,88,90,75,87,80,108],
[121,0,97,95,106,86,82,101],
[122,113,0,113,111,114,105,121],
[120,115,97,0,94,119,115,129],
[135,104,99,116,0,111,102,126],
[123,124,96,91,99,0,89,109],
[130,128,105,95,108,121,0,136],
[102,109,89,81,84,101,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,142,141,110,144,159,185],
[105,0,132,156,161,132,159,159],
[68,78,0,113,91,126,118,92],
[69,54,97,0,113,111,77,93],
[100,49,119,97,0,96,118,113],
[66,78,84,99,114,0,118,103],
[51,51,92,133,92,92,0,67],
[25,51,118,117,97,107,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,144,69,144,53,87,117],
[66,0,48,48,114,48,18,48],
[66,162,0,135,162,101,87,53],
[141,162,75,0,194,123,93,75],
[66,96,48,16,0,0,18,0],
[157,162,109,87,210,0,61,64],
[123,192,123,117,192,149,0,48],
[93,162,157,135,210,146,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,108,106,100,107,100,103],
[117,0,100,119,116,113,106,111],
[102,110,0,105,116,112,102,102],
[104,91,105,0,103,100,99,96],
[110,94,94,107,0,105,94,104],
[103,97,98,110,105,0,110,101],
[110,104,108,111,116,100,0,108],
[107,99,108,114,106,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,108,104,104,109,107,106],
[116,0,110,95,98,118,98,107],
[102,100,0,104,93,109,89,105],
[106,115,106,0,107,117,102,108],
[106,112,117,103,0,116,101,116],
[101,92,101,93,94,0,107,93],
[103,112,121,108,109,103,0,108],
[104,103,105,102,94,117,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,108,114,115,109,104],
[99,0,97,116,99,116,99,102],
[108,113,0,115,105,123,108,107],
[102,94,95,0,119,103,101,98],
[96,111,105,91,0,113,104,103],
[95,94,87,107,97,0,99,88],
[101,111,102,109,106,111,0,107],
[106,108,103,112,107,122,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,112,110,112,110,111,119],
[112,0,105,102,118,101,97,109],
[98,105,0,112,107,106,97,108],
[100,108,98,0,107,104,108,107],
[98,92,103,103,0,101,106,110],
[100,109,104,106,109,0,100,109],
[99,113,113,102,104,110,0,122],
[91,101,102,103,100,101,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,100,109,107,112,118,109],
[96,0,94,104,106,101,111,101],
[110,116,0,124,120,105,123,104],
[101,106,86,0,111,101,103,110],
[103,104,90,99,0,107,96,105],
[98,109,105,109,103,0,106,94],
[92,99,87,107,114,104,0,94],
[101,109,106,100,105,116,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,112,98,108,98,93],
[111,0,101,120,96,117,106,109],
[102,109,0,113,105,111,101,100],
[98,90,97,0,108,108,104,94],
[112,114,105,102,0,109,94,101],
[102,93,99,102,101,0,103,102],
[112,104,109,106,116,107,0,97],
[117,101,110,116,109,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,119,134,94,128,108,123],
[97,0,122,120,99,119,72,143],
[91,88,0,107,87,100,72,95],
[76,90,103,0,63,102,45,94],
[116,111,123,147,0,137,92,132],
[82,91,110,108,73,0,61,96],
[102,138,138,165,118,149,0,124],
[87,67,115,116,78,114,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,144,101,81,64,90,154],
[63,0,94,35,60,40,61,85],
[66,116,0,64,55,66,103,130],
[109,175,146,0,123,116,90,165],
[129,150,155,87,0,132,128,176],
[146,170,144,94,78,0,97,147],
[120,149,107,120,82,113,0,168],
[56,125,80,45,34,63,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,97,112,124,96,116],
[104,0,110,111,118,115,116,110],
[105,100,0,103,124,99,94,98],
[113,99,107,0,121,116,108,115],
[98,92,86,89,0,108,91,97],
[86,95,111,94,102,0,93,93],
[114,94,116,102,119,117,0,100],
[94,100,112,95,113,117,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,107,121,118,100,120,74],
[149,0,133,127,125,106,154,96],
[103,77,0,132,92,95,148,93],
[89,83,78,0,84,85,88,91],
[92,85,118,126,0,126,149,122],
[110,104,115,125,84,0,122,69],
[90,56,62,122,61,88,0,81],
[136,114,117,119,88,141,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,64,92,92,93,67,70],
[99,0,77,112,117,116,88,78],
[146,133,0,112,122,131,117,103],
[118,98,98,0,101,124,94,108],
[118,93,88,109,0,117,79,91],
[117,94,79,86,93,0,84,73],
[143,122,93,116,131,126,0,93],
[140,132,107,102,119,137,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,94,98,74,106,113,102],
[122,0,90,113,111,124,122,138],
[116,120,0,122,93,115,112,135],
[112,97,88,0,106,115,118,109],
[136,99,117,104,0,125,132,119],
[104,86,95,95,85,0,116,91],
[97,88,98,92,78,94,0,87],
[108,72,75,101,91,119,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,128,104,114,99,99,112],
[98,0,107,119,120,112,120,109],
[82,103,0,99,104,96,102,91],
[106,91,111,0,97,106,103,106],
[96,90,106,113,0,103,96,105],
[111,98,114,104,107,0,114,102],
[111,90,108,107,114,96,0,116],
[98,101,119,104,105,108,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,116,113,95,118,105],
[104,0,104,91,98,73,96,94],
[104,106,0,89,113,72,92,89],
[94,119,121,0,97,93,118,83],
[97,112,97,113,0,106,105,90],
[115,137,138,117,104,0,120,109],
[92,114,118,92,105,90,0,92],
[105,116,121,127,120,101,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,102,62,102,70,62,101],
[175,0,138,91,138,106,128,73],
[108,72,0,163,137,101,134,108],
[148,119,47,0,113,116,47,145],
[108,72,73,97,0,35,105,108],
[140,104,109,94,175,0,102,111],
[148,82,76,163,105,108,0,108],
[109,137,102,65,102,99,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,92,81,101,104,112],
[115,0,103,117,105,119,115,99],
[112,107,0,109,89,117,105,117],
[118,93,101,0,89,121,124,129],
[129,105,121,121,0,100,110,120],
[109,91,93,89,110,0,104,99],
[106,95,105,86,100,106,0,115],
[98,111,93,81,90,111,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,105,104,116,119,102],
[99,0,100,106,98,108,111,100],
[96,110,0,104,109,109,103,102],
[105,104,106,0,97,115,106,108],
[106,112,101,113,0,108,109,110],
[94,102,101,95,102,0,96,102],
[91,99,107,104,101,114,0,106],
[108,110,108,102,100,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,63,112,94,113,104,101],
[121,0,86,114,90,140,110,138],
[147,124,0,117,91,136,119,139],
[98,96,93,0,72,143,80,89],
[116,120,119,138,0,103,104,126],
[97,70,74,67,107,0,97,87],
[106,100,91,130,106,113,0,121],
[109,72,71,121,84,123,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,105,121,110,100,105,108],
[102,0,107,120,116,96,104,103],
[105,103,0,111,102,94,100,90],
[89,90,99,0,101,86,99,95],
[100,94,108,109,0,100,110,107],
[110,114,116,124,110,0,111,102],
[105,106,110,111,100,99,0,100],
[102,107,120,115,103,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,99,105,108,118,103,86],
[118,0,102,119,129,119,130,112],
[111,108,0,122,119,110,121,97],
[105,91,88,0,126,107,104,100],
[102,81,91,84,0,94,111,86],
[92,91,100,103,116,0,86,78],
[107,80,89,106,99,124,0,87],
[124,98,113,110,124,132,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,121,102,111,105,112,116],
[82,0,101,106,99,97,109,108],
[89,109,0,102,106,92,96,112],
[108,104,108,0,111,98,109,129],
[99,111,104,99,0,106,95,105],
[105,113,118,112,104,0,93,110],
[98,101,114,101,115,117,0,116],
[94,102,98,81,105,100,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,103,106,114,103,116],
[107,0,104,103,113,99,115,112],
[106,106,0,105,108,97,106,109],
[107,107,105,0,117,102,102,116],
[104,97,102,93,0,104,95,102],
[96,111,113,108,106,0,106,112],
[107,95,104,108,115,104,0,108],
[94,98,101,94,108,98,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,110,104,116,114,99,91],
[93,0,94,85,93,85,80,82],
[100,116,0,108,99,127,93,111],
[106,125,102,0,94,127,93,105],
[94,117,111,116,0,102,86,93],
[96,125,83,83,108,0,71,95],
[111,130,117,117,124,139,0,95],
[119,128,99,105,117,115,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,89,86,107,108,98,107],
[120,0,90,108,131,97,134,93],
[121,120,0,119,142,122,119,100],
[124,102,91,0,114,102,131,120],
[103,79,68,96,0,99,102,97],
[102,113,88,108,111,0,109,91],
[112,76,91,79,108,101,0,92],
[103,117,110,90,113,119,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,89,109,109,105,99,103],
[110,0,94,117,113,95,105,111],
[121,116,0,116,118,97,112,131],
[101,93,94,0,113,90,98,107],
[101,97,92,97,0,89,85,92],
[105,115,113,120,121,0,115,108],
[111,105,98,112,125,95,0,118],
[107,99,79,103,118,102,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,121,96,101,128,115,107],
[101,0,119,103,103,119,117,94],
[89,91,0,89,85,97,95,83],
[114,107,121,0,97,110,124,107],
[109,107,125,113,0,110,120,87],
[82,91,113,100,100,0,100,89],
[95,93,115,86,90,110,0,80],
[103,116,127,103,123,121,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,115,93,98,94,118,107],
[122,0,109,112,105,102,114,110],
[95,101,0,111,96,94,106,104],
[117,98,99,0,103,106,116,110],
[112,105,114,107,0,106,111,103],
[116,108,116,104,104,0,119,109],
[92,96,104,94,99,91,0,104],
[103,100,106,100,107,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,96,113,99,94,109,91],
[95,0,75,108,90,97,84,93],
[114,135,0,121,120,106,103,117],
[97,102,89,0,100,93,86,94],
[111,120,90,110,0,90,103,103],
[116,113,104,117,120,0,117,107],
[101,126,107,124,107,93,0,104],
[119,117,93,116,107,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,98,112,108,104,106],
[103,0,113,107,120,111,103,95],
[102,97,0,94,110,98,93,99],
[112,103,116,0,104,100,93,90],
[98,90,100,106,0,99,82,94],
[102,99,112,110,111,0,110,101],
[106,107,117,117,128,100,0,104],
[104,115,111,120,116,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,111,99,105,110,106,121],
[86,0,101,95,105,106,97,104],
[99,109,0,107,106,103,106,108],
[111,115,103,0,98,106,113,112],
[105,105,104,112,0,107,120,109],
[100,104,107,104,103,0,104,112],
[104,113,104,97,90,106,0,118],
[89,106,102,98,101,98,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,86,123,84,73,99,61],
[137,0,133,135,131,109,107,80],
[124,77,0,137,113,95,92,85],
[87,75,73,0,114,77,116,86],
[126,79,97,96,0,74,74,65],
[137,101,115,133,136,0,90,87],
[111,103,118,94,136,120,0,110],
[149,130,125,124,145,123,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,70,107,95,114,117,92],
[98,0,75,127,136,88,145,104],
[140,135,0,117,106,84,131,104],
[103,83,93,0,96,77,105,125],
[115,74,104,114,0,97,99,88],
[96,122,126,133,113,0,114,121],
[93,65,79,105,111,96,0,91],
[118,106,106,85,122,89,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,118,107,101,105,112],
[109,0,105,121,112,94,111,116],
[106,105,0,114,96,105,106,113],
[92,89,96,0,102,90,104,104],
[103,98,114,108,0,104,110,116],
[109,116,105,120,106,0,112,107],
[105,99,104,106,100,98,0,106],
[98,94,97,106,94,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,97,102,102,105,109],
[108,0,91,106,98,113,101,121],
[105,119,0,91,111,99,102,112],
[113,104,119,0,100,101,101,113],
[108,112,99,110,0,104,115,124],
[108,97,111,109,106,0,101,121],
[105,109,108,109,95,109,0,113],
[101,89,98,97,86,89,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,100,100,104,87,106,103],
[119,0,113,100,106,100,118,128],
[110,97,0,90,101,97,102,111],
[110,110,120,0,106,97,115,121],
[106,104,109,104,0,109,119,122],
[123,110,113,113,101,0,128,110],
[104,92,108,95,91,82,0,106],
[107,82,99,89,88,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,106,93,106,114,110],
[103,0,105,93,100,89,99,94],
[106,105,0,90,92,94,95,91],
[104,117,120,0,113,108,114,105],
[117,110,118,97,0,94,105,102],
[104,121,116,102,116,0,111,106],
[96,111,115,96,105,99,0,110],
[100,116,119,105,108,104,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,80,91,101,110,126,90],
[103,0,83,107,110,97,118,107],
[130,127,0,116,124,117,118,95],
[119,103,94,0,112,103,116,92],
[109,100,86,98,0,79,108,80],
[100,113,93,107,131,0,118,101],
[84,92,92,94,102,92,0,97],
[120,103,115,118,130,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,107,101,109,108,105,103],
[118,0,107,111,115,105,108,115],
[103,103,0,107,110,97,101,101],
[109,99,103,0,121,97,101,111],
[101,95,100,89,0,97,92,105],
[102,105,113,113,113,0,105,99],
[105,102,109,109,118,105,0,115],
[107,95,109,99,105,111,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,82,83,81,80,92,90],
[113,0,96,89,106,104,113,115],
[128,114,0,103,112,133,122,112],
[127,121,107,0,110,100,123,124],
[129,104,98,100,0,102,131,116],
[130,106,77,110,108,0,119,101],
[118,97,88,87,79,91,0,116],
[120,95,98,86,94,109,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,91,105,89,104,104,103],
[121,0,106,108,96,111,105,125],
[119,104,0,107,101,124,119,119],
[105,102,103,0,115,102,103,124],
[121,114,109,95,0,115,101,117],
[106,99,86,108,95,0,89,106],
[106,105,91,107,109,121,0,109],
[107,85,91,86,93,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,112,109,121,109,117,125],
[111,0,103,98,110,112,120,106],
[98,107,0,109,110,96,117,112],
[101,112,101,0,111,95,120,114],
[89,100,100,99,0,99,116,109],
[101,98,114,115,111,0,129,111],
[93,90,93,90,94,81,0,93],
[85,104,98,96,101,99,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,139,111,101,120,124,135],
[98,0,91,109,120,100,133,130],
[71,119,0,101,99,110,104,96],
[99,101,109,0,108,110,118,127],
[109,90,111,102,0,126,139,119],
[90,110,100,100,84,0,113,98],
[86,77,106,92,71,97,0,104],
[75,80,114,83,91,112,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,108,100,103,109,94],
[102,0,110,102,101,99,100,96],
[106,100,0,108,106,105,107,94],
[102,108,102,0,108,103,100,97],
[110,109,104,102,0,112,114,95],
[107,111,105,107,98,0,109,118],
[101,110,103,110,96,101,0,109],
[116,114,116,113,115,92,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,93,104,91,77,109],
[109,0,113,89,119,115,104,124],
[112,97,0,93,107,101,105,111],
[117,121,117,0,129,110,98,112],
[106,91,103,81,0,98,99,117],
[119,95,109,100,112,0,105,116],
[133,106,105,112,111,105,0,120],
[101,86,99,98,93,94,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,105,94,100,99,120,132],
[116,0,107,97,87,110,98,79],
[105,103,0,100,94,78,86,109],
[116,113,110,0,112,115,115,97],
[110,123,116,98,0,107,114,94],
[111,100,132,95,103,0,100,126],
[90,112,124,95,96,110,0,124],
[78,131,101,113,116,84,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,111,36,79,92,86,109],
[124,0,98,70,128,90,133,131],
[99,112,0,101,102,91,122,148],
[174,140,109,0,95,95,120,125],
[131,82,108,115,0,134,158,165],
[118,120,119,115,76,0,131,156],
[124,77,88,90,52,79,0,141],
[101,79,62,85,45,54,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,126,95,92,110,116,120],
[104,0,105,118,116,57,90,78],
[84,105,0,104,105,73,110,104],
[115,92,106,0,81,58,114,94],
[118,94,105,129,0,86,126,117],
[100,153,137,152,124,0,114,117],
[94,120,100,96,84,96,0,92],
[90,132,106,116,93,93,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,107,108,110,113,100],
[98,0,110,99,109,106,109,105],
[95,100,0,103,97,101,107,99],
[103,111,107,0,108,107,107,94],
[102,101,113,102,0,108,105,100],
[100,104,109,103,102,0,116,106],
[97,101,103,103,105,94,0,106],
[110,105,111,116,110,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,122,112,113,109,115,119],
[106,0,118,103,121,113,121,119],
[88,92,0,93,108,96,109,106],
[98,107,117,0,115,111,105,107],
[97,89,102,95,0,102,114,119],
[101,97,114,99,108,0,119,112],
[95,89,101,105,96,91,0,98],
[91,91,104,103,91,98,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,100,110,117,118,105],
[103,0,99,111,122,113,123,109],
[109,111,0,112,111,120,128,105],
[110,99,98,0,109,119,119,112],
[100,88,99,101,0,111,125,102],
[93,97,90,91,99,0,117,101],
[92,87,82,91,85,93,0,95],
[105,101,105,98,108,109,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,107,105,103,107,109,98],
[115,0,118,114,111,114,103,109],
[103,92,0,99,113,106,110,96],
[105,96,111,0,103,104,105,95],
[107,99,97,107,0,100,110,101],
[103,96,104,106,110,0,107,104],
[101,107,100,105,100,103,0,100],
[112,101,114,115,109,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,115,112,105,92,108,89],
[138,0,109,114,134,96,111,127],
[95,101,0,88,92,92,134,103],
[98,96,122,0,123,96,115,112],
[105,76,118,87,0,106,107,110],
[118,114,118,114,104,0,107,90],
[102,99,76,95,103,103,0,99],
[121,83,107,98,100,120,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,91,95,125,100,116],
[109,0,112,110,101,135,106,99],
[115,98,0,107,84,125,104,110],
[119,100,103,0,106,127,96,113],
[115,109,126,104,0,126,94,113],
[85,75,85,83,84,0,73,95],
[110,104,106,114,116,137,0,128],
[94,111,100,97,97,115,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,110,111,114,113,103],
[109,0,107,107,99,119,94,107],
[97,103,0,102,105,116,112,110],
[100,103,108,0,96,107,103,102],
[99,111,105,114,0,118,119,115],
[96,91,94,103,92,0,99,103],
[97,116,98,107,91,111,0,104],
[107,103,100,108,95,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,98,94,95,91,111],
[112,0,103,105,106,108,106,117],
[110,107,0,96,106,106,106,110],
[112,105,114,0,112,104,99,114],
[116,104,104,98,0,105,110,113],
[115,102,104,106,105,0,94,102],
[119,104,104,111,100,116,0,113],
[99,93,100,96,97,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,96,95,93,92,102,103],
[113,0,106,113,109,108,96,121],
[114,104,0,106,96,100,115,118],
[115,97,104,0,91,85,107,129],
[117,101,114,119,0,104,106,108],
[118,102,110,125,106,0,107,121],
[108,114,95,103,104,103,0,103],
[107,89,92,81,102,89,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,100,114,107,112,114,114],
[82,0,98,103,106,115,109,94],
[110,112,0,110,101,106,109,102],
[96,107,100,0,97,101,107,108],
[103,104,109,113,0,115,108,110],
[98,95,104,109,95,0,101,105],
[96,101,101,103,102,109,0,116],
[96,116,108,102,100,105,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,106,107,107,106,104],
[111,0,114,93,120,119,108,120],
[104,96,0,100,108,108,113,104],
[104,117,110,0,101,107,107,104],
[103,90,102,109,0,93,103,96],
[103,91,102,103,117,0,107,113],
[104,102,97,103,107,103,0,107],
[106,90,106,106,114,97,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,79,95,120,95,100,101],
[125,0,114,104,129,124,121,122],
[131,96,0,107,108,105,121,118],
[115,106,103,0,125,126,113,127],
[90,81,102,85,0,92,102,112],
[115,86,105,84,118,0,93,110],
[110,89,89,97,108,117,0,121],
[109,88,92,83,98,100,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,124,111,103,111,115,84],
[100,0,134,126,144,111,94,125],
[86,76,0,117,112,105,98,124],
[99,84,93,0,115,102,104,73],
[107,66,98,95,0,105,84,66],
[99,99,105,108,105,0,88,88],
[95,116,112,106,126,122,0,87],
[126,85,86,137,144,122,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,104,105,102,88,97,89],
[120,0,104,99,111,100,83,92],
[106,106,0,108,106,99,115,110],
[105,111,102,0,90,82,100,102],
[108,99,104,120,0,95,98,105],
[122,110,111,128,115,0,104,111],
[113,127,95,110,112,106,0,100],
[121,118,100,108,105,99,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,102,93,94,101,101,91],
[122,0,112,100,110,110,115,107],
[108,98,0,99,101,122,117,105],
[117,110,111,0,105,116,125,115],
[116,100,109,105,0,118,116,107],
[109,100,88,94,92,0,106,110],
[109,95,93,85,94,104,0,97],
[119,103,105,95,103,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,114,93,111,98,109,112],
[113,0,122,103,115,111,126,109],
[96,88,0,111,82,95,116,113],
[117,107,99,0,89,84,113,106],
[99,95,128,121,0,112,133,118],
[112,99,115,126,98,0,115,110],
[101,84,94,97,77,95,0,98],
[98,101,97,104,92,100,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,109,104,110,113,108,130],
[96,0,93,77,108,89,114,114],
[101,117,0,105,106,108,118,123],
[106,133,105,0,111,105,119,124],
[100,102,104,99,0,91,105,98],
[97,121,102,105,119,0,122,117],
[102,96,92,91,105,88,0,124],
[80,96,87,86,112,93,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,106,103,125,117,111,98],
[97,0,109,101,104,108,82,98],
[104,101,0,82,87,101,84,78],
[107,109,128,0,114,104,89,91],
[85,106,123,96,0,89,65,82],
[93,102,109,106,121,0,85,107],
[99,128,126,121,145,125,0,112],
[112,112,132,119,128,103,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,105,109,104,116,111],
[108,0,114,94,107,95,109,100],
[98,96,0,85,109,100,108,106],
[105,116,125,0,126,115,120,124],
[101,103,101,84,0,104,114,90],
[106,115,110,95,106,0,102,102],
[94,101,102,90,96,108,0,97],
[99,110,104,86,120,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,126,109,99,87,83,99],
[99,0,123,104,106,97,96,115],
[84,87,0,93,78,91,78,96],
[101,106,117,0,89,88,100,108],
[111,104,132,121,0,110,83,117],
[123,113,119,122,100,0,109,116],
[127,114,132,110,127,101,0,103],
[111,95,114,102,93,94,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,108,111,99,113,106,113],
[122,0,110,117,105,122,123,121],
[102,100,0,122,105,107,114,103],
[99,93,88,0,103,105,118,115],
[111,105,105,107,0,112,123,115],
[97,88,103,105,98,0,120,103],
[104,87,96,92,87,90,0,105],
[97,89,107,95,95,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,107,94,112,112,111],
[107,0,111,97,83,101,104,105],
[100,99,0,106,86,97,93,98],
[103,113,104,0,100,99,106,100],
[116,127,124,110,0,129,104,125],
[98,109,113,111,81,0,99,104],
[98,106,117,104,106,111,0,96],
[99,105,112,110,85,106,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,114,114,113,122,107,119],
[110,0,103,113,104,101,106,105],
[96,107,0,108,103,104,92,118],
[96,97,102,0,100,94,105,104],
[97,106,107,110,0,102,88,117],
[88,109,106,116,108,0,104,113],
[103,104,118,105,122,106,0,112],
[91,105,92,106,93,97,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,124,99,102,80,107,80],
[116,0,108,115,123,94,100,76],
[86,102,0,98,88,77,97,68],
[111,95,112,0,109,102,103,79],
[108,87,122,101,0,89,104,100],
[130,116,133,108,121,0,102,101],
[103,110,113,107,106,108,0,114],
[130,134,142,131,110,109,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,54,131,54,54,54,54],
[131,0,50,131,74,82,135,62],
[156,160,0,176,109,56,160,97],
[79,79,34,0,48,28,46,8],
[156,136,101,162,0,50,146,111],
[156,128,154,182,160,0,186,89],
[156,75,50,164,64,24,0,52],
[156,148,113,202,99,121,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,124,112,80,140,95,100],
[102,0,141,100,105,149,89,125],
[86,69,0,74,52,115,58,40],
[98,110,136,0,72,128,102,81],
[130,105,158,138,0,142,112,89],
[70,61,95,82,68,0,77,73],
[115,121,152,108,98,133,0,111],
[110,85,170,129,121,137,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,128,95,96,95,108],
[106,0,102,134,120,113,89,103],
[109,108,0,129,102,111,118,112],
[82,76,81,0,83,92,75,107],
[115,90,108,127,0,109,92,113],
[114,97,99,118,101,0,96,114],
[115,121,92,135,118,114,0,116],
[102,107,98,103,97,96,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,88,93,103,91,93,87],
[104,0,92,103,98,92,103,96],
[122,118,0,110,114,111,111,97],
[117,107,100,0,118,103,110,95],
[107,112,96,92,0,102,106,88],
[119,118,99,107,108,0,116,109],
[117,107,99,100,104,94,0,92],
[123,114,113,115,122,101,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,96,106,112,110,114,102],
[98,0,109,99,108,95,116,100],
[114,101,0,101,99,99,103,102],
[104,111,109,0,104,110,113,104],
[98,102,111,106,0,94,99,99],
[100,115,111,100,116,0,119,106],
[96,94,107,97,111,91,0,98],
[108,110,108,106,111,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,107,104,101,97,97,105],
[113,0,116,105,115,113,111,104],
[103,94,0,99,100,94,103,95],
[106,105,111,0,107,109,105,104],
[109,95,110,103,0,101,100,108],
[113,97,116,101,109,0,107,107],
[113,99,107,105,110,103,0,110],
[105,106,115,106,102,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,115,95,97,113,104,102],
[111,0,115,99,106,108,104,106],
[95,95,0,91,101,101,94,102],
[115,111,119,0,103,110,109,107],
[113,104,109,107,0,96,124,101],
[97,102,109,100,114,0,109,101],
[106,106,116,101,86,101,0,106],
[108,104,108,103,109,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,95,100,92,103,110,105],
[90,0,99,98,83,96,95,100],
[115,111,0,104,106,112,116,105],
[110,112,106,0,103,114,115,105],
[118,127,104,107,0,109,121,105],
[107,114,98,96,101,0,116,95],
[100,115,94,95,89,94,0,100],
[105,110,105,105,105,115,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,88,96,98,89,84,87],
[124,0,120,111,114,119,106,105],
[122,90,0,109,104,103,103,98],
[114,99,101,0,105,102,105,96],
[112,96,106,105,0,105,96,96],
[121,91,107,108,105,0,104,87],
[126,104,107,105,114,106,0,105],
[123,105,112,114,114,123,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,110,100,100,123,100,105],
[82,0,100,106,89,108,89,91],
[100,110,0,97,110,111,94,107],
[110,104,113,0,117,122,98,103],
[110,121,100,93,0,101,107,99],
[87,102,99,88,109,0,101,105],
[110,121,116,112,103,109,0,109],
[105,119,103,107,111,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,121,117,107,114,108,104],
[95,0,108,96,121,100,105,90],
[89,102,0,109,101,90,106,87],
[93,114,101,0,104,93,98,109],
[103,89,109,106,0,92,103,86],
[96,110,120,117,118,0,103,102],
[102,105,104,112,107,107,0,99],
[106,120,123,101,124,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,104,103,93,102,98],
[110,0,104,106,103,99,115,113],
[107,106,0,108,100,107,107,105],
[106,104,102,0,92,110,106,109],
[107,107,110,118,0,105,110,115],
[117,111,103,100,105,0,109,112],
[108,95,103,104,100,101,0,99],
[112,97,105,101,95,98,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,87,119,96,84,111,112],
[129,0,104,129,130,110,107,129],
[123,106,0,114,134,85,115,113],
[91,81,96,0,118,92,80,90],
[114,80,76,92,0,109,85,104],
[126,100,125,118,101,0,112,121],
[99,103,95,130,125,98,0,101],
[98,81,97,120,106,89,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,87,108,107,92,111,108],
[114,0,128,133,103,104,118,138],
[123,82,0,126,102,89,114,115],
[102,77,84,0,77,105,84,104],
[103,107,108,133,0,100,129,121],
[118,106,121,105,110,0,111,106],
[99,92,96,126,81,99,0,118],
[102,72,95,106,89,104,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,90,120,123,105,105,108],
[103,0,79,118,122,100,113,114],
[120,131,0,127,129,89,104,150],
[90,92,83,0,94,110,78,104],
[87,88,81,116,0,86,98,93],
[105,110,121,100,124,0,127,121],
[105,97,106,132,112,83,0,85],
[102,96,60,106,117,89,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,132,113,117,131,100,138],
[82,0,85,80,50,97,90,95],
[78,125,0,122,93,111,119,123],
[97,130,88,0,91,84,90,114],
[93,160,117,119,0,132,112,132],
[79,113,99,126,78,0,116,103],
[110,120,91,120,98,94,0,131],
[72,115,87,96,78,107,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,113,125,134,111,128,104],
[75,0,79,85,95,97,92,86],
[97,131,0,94,110,109,116,105],
[85,125,116,0,108,106,114,102],
[76,115,100,102,0,100,101,89],
[99,113,101,104,110,0,104,105],
[82,118,94,96,109,106,0,101],
[106,124,105,108,121,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,71,96,130,128,114],
[102,0,105,105,109,113,103,124],
[108,105,0,112,128,116,148,124],
[139,105,98,0,130,125,137,138],
[114,101,82,80,0,78,141,128],
[80,97,94,85,132,0,101,90],
[82,107,62,73,69,109,0,91],
[96,86,86,72,82,120,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,114,109,110,116,114,104],
[95,0,99,111,96,107,104,109],
[96,111,0,115,115,115,113,114],
[101,99,95,0,99,102,107,106],
[100,114,95,111,0,115,110,108],
[94,103,95,108,95,0,114,109],
[96,106,97,103,100,96,0,101],
[106,101,96,104,102,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,137,88,96,101,97,90],
[97,0,117,100,95,87,103,78],
[73,93,0,77,80,81,80,86],
[122,110,133,0,105,119,102,101],
[114,115,130,105,0,111,113,117],
[109,123,129,91,99,0,115,92],
[113,107,130,108,97,95,0,94],
[120,132,124,109,93,118,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,117,98,110,125,98,118],
[106,0,106,92,101,108,93,127],
[93,104,0,96,114,121,95,125],
[112,118,114,0,124,115,105,126],
[100,109,96,86,0,101,79,115],
[85,102,89,95,109,0,97,116],
[112,117,115,105,131,113,0,120],
[92,83,85,84,95,94,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,86,104,85,130,84],
[109,0,106,100,91,107,134,102],
[115,104,0,116,115,118,133,104],
[124,110,94,0,122,127,164,127],
[106,119,95,88,0,110,132,122],
[125,103,92,83,100,0,146,110],
[80,76,77,46,78,64,0,75],
[126,108,106,83,88,100,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,97,101,88,111,94,97],
[117,0,94,105,102,106,110,99],
[113,116,0,106,105,117,100,98],
[109,105,104,0,100,112,87,99],
[122,108,105,110,0,112,106,103],
[99,104,93,98,98,0,94,92],
[116,100,110,123,104,116,0,112],
[113,111,112,111,107,118,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,105,104,105,105,96],
[110,0,110,105,96,101,97,101],
[109,100,0,99,97,106,101,104],
[105,105,111,0,107,114,98,93],
[106,114,113,103,0,110,107,118],
[105,109,104,96,100,0,86,101],
[105,113,109,112,103,124,0,99],
[114,109,106,117,92,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,86,63,101,89,95,76],
[122,0,88,113,98,81,91,97],
[124,122,0,106,81,82,102,87],
[147,97,104,0,130,116,98,123],
[109,112,129,80,0,94,118,126],
[121,129,128,94,116,0,114,139],
[115,119,108,112,92,96,0,103],
[134,113,123,87,84,71,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,113,113,99,98,104,108],
[95,0,102,108,104,101,100,103],
[97,108,0,103,110,102,100,105],
[97,102,107,0,101,96,101,94],
[111,106,100,109,0,98,99,106],
[112,109,108,114,112,0,105,106],
[106,110,110,109,111,105,0,124],
[102,107,105,116,104,104,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,94,98,88,98,83,96],
[103,0,88,101,80,100,93,100],
[116,122,0,116,85,106,109,112],
[112,109,94,0,93,90,96,104],
[122,130,125,117,0,105,115,123],
[112,110,104,120,105,0,99,125],
[127,117,101,114,95,111,0,137],
[114,110,98,106,87,85,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,110,67,93,77,67,96],
[138,0,115,101,126,89,101,95],
[100,95,0,94,106,71,83,80],
[143,109,116,0,145,106,122,102],
[117,84,104,65,0,97,87,80],
[133,121,139,104,113,0,118,74],
[143,109,127,88,123,92,0,105],
[114,115,130,108,130,136,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,125,96,124,124,92,88],
[101,0,141,80,108,123,106,107],
[85,69,0,78,98,87,81,80],
[114,130,132,0,129,154,122,93],
[86,102,112,81,0,106,93,81],
[86,87,123,56,104,0,98,91],
[118,104,129,88,117,112,0,82],
[122,103,130,117,129,119,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,101,107,112,109,89],
[103,0,101,99,94,95,100,98],
[109,109,0,110,114,107,126,98],
[109,111,100,0,104,113,108,96],
[103,116,96,106,0,100,110,101],
[98,115,103,97,110,0,101,93],
[101,110,84,102,100,109,0,108],
[121,112,112,114,109,117,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,111,88,114,87,102,102],
[120,0,105,104,108,107,107,103],
[99,105,0,100,102,102,102,103],
[122,106,110,0,115,98,98,111],
[96,102,108,95,0,96,104,98],
[123,103,108,112,114,0,102,101],
[108,103,108,112,106,108,0,108],
[108,107,107,99,112,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,101,108,111,111,98],
[106,0,122,101,119,107,116,100],
[103,88,0,113,115,114,108,100],
[109,109,97,0,118,116,102,112],
[102,91,95,92,0,101,89,100],
[99,103,96,94,109,0,100,102],
[99,94,102,108,121,110,0,100],
[112,110,110,98,110,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,122,104,101,91,97],
[102,0,101,118,102,130,103,112],
[109,109,0,111,81,108,100,99],
[88,92,99,0,73,105,92,90],
[106,108,129,137,0,118,116,105],
[109,80,102,105,92,0,88,95],
[119,107,110,118,94,122,0,117],
[113,98,111,120,105,115,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,97,94,119,105,100,91],
[115,0,100,99,116,108,115,103],
[113,110,0,100,112,115,106,106],
[116,111,110,0,113,121,122,105],
[91,94,98,97,0,101,104,110],
[105,102,95,89,109,0,94,100],
[110,95,104,88,106,116,0,92],
[119,107,104,105,100,110,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,87,85,138,84,143,90],
[121,0,87,67,159,95,136,98],
[123,123,0,102,152,98,129,124],
[125,143,108,0,129,97,135,107],
[72,51,58,81,0,58,93,74],
[126,115,112,113,152,0,140,98],
[67,74,81,75,117,70,0,64],
[120,112,86,103,136,112,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,124,100,77,97,109,69],
[101,0,100,52,63,57,80,87],
[86,110,0,88,78,67,114,91],
[110,158,122,0,95,126,120,122],
[133,147,132,115,0,92,149,139],
[113,153,143,84,118,0,145,121],
[101,130,96,90,61,65,0,88],
[141,123,119,88,71,89,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,119,94,120,103,101,120],
[92,0,107,92,97,89,94,102],
[91,103,0,80,78,82,76,96],
[116,118,130,0,110,109,105,119],
[90,113,132,100,0,110,102,116],
[107,121,128,101,100,0,104,125],
[109,116,134,105,108,106,0,118],
[90,108,114,91,94,85,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,97,92,93,91,91,95],
[115,0,92,105,108,105,105,109],
[113,118,0,113,100,99,102,94],
[118,105,97,0,96,97,94,100],
[117,102,110,114,0,127,111,116],
[119,105,111,113,83,0,109,112],
[119,105,108,116,99,101,0,121],
[115,101,116,110,94,98,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,111,110,120,109,103,108],
[89,0,99,107,112,107,101,108],
[99,111,0,112,112,101,111,106],
[100,103,98,0,110,110,94,100],
[90,98,98,100,0,84,105,94],
[101,103,109,100,126,0,105,113],
[107,109,99,116,105,105,0,106],
[102,102,104,110,116,97,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,109,108,110,106,110],
[98,0,96,98,110,99,93,107],
[105,114,0,92,113,112,107,110],
[101,112,118,0,121,106,110,112],
[102,100,97,89,0,102,89,104],
[100,111,98,104,108,0,104,106],
[104,117,103,100,121,106,0,115],
[100,103,100,98,106,104,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,87,107,94,107,109,98],
[112,0,88,109,88,108,95,90],
[123,122,0,109,105,122,135,113],
[103,101,101,0,101,114,119,112],
[116,122,105,109,0,121,116,112],
[103,102,88,96,89,0,113,99],
[101,115,75,91,94,97,0,95],
[112,120,97,98,98,111,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,96,117,98,99,98,112],
[104,0,98,98,97,99,105,105],
[114,112,0,119,111,105,125,117],
[93,112,91,0,96,92,95,103],
[112,113,99,114,0,102,110,120],
[111,111,105,118,108,0,119,106],
[112,105,85,115,100,91,0,103],
[98,105,93,107,90,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,95,93,103,99,101],
[104,0,102,119,112,110,95,105],
[105,108,0,115,108,110,105,105],
[115,91,95,0,89,90,81,103],
[117,98,102,121,0,108,95,95],
[107,100,100,120,102,0,96,106],
[111,115,105,129,115,114,0,113],
[109,105,105,107,115,104,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,91,97,100,107,106,93],
[112,0,104,96,95,86,112,85],
[119,106,0,98,104,107,109,109],
[113,114,112,0,106,97,113,107],
[110,115,106,104,0,116,120,103],
[103,124,103,113,94,0,113,92],
[104,98,101,97,90,97,0,89],
[117,125,101,103,107,118,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,89,97,66,69,80,74],
[112,0,89,135,108,73,129,97],
[121,121,0,127,104,93,132,109],
[113,75,83,0,85,52,136,99],
[144,102,106,125,0,103,154,128],
[141,137,117,158,107,0,132,104],
[130,81,78,74,56,78,0,97],
[136,113,101,111,82,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,105,112,93,106,100],
[101,0,107,109,105,101,93,99],
[111,103,0,106,129,104,95,108],
[105,101,104,0,116,90,98,104],
[98,105,81,94,0,93,90,90],
[117,109,106,120,117,0,98,111],
[104,117,115,112,120,112,0,106],
[110,111,102,106,120,99,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,112,108,88,88,137,108],
[81,0,97,61,75,55,84,60],
[98,113,0,72,85,73,76,108],
[102,149,138,0,136,107,132,109],
[122,135,125,74,0,106,107,89],
[122,155,137,103,104,0,135,114],
[73,126,134,78,103,75,0,75],
[102,150,102,101,121,96,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,84,104,94,103,93,106],
[108,0,85,116,108,120,102,115],
[126,125,0,122,104,120,109,128],
[106,94,88,0,88,99,90,114],
[116,102,106,122,0,119,104,115],
[107,90,90,111,91,0,87,110],
[117,108,101,120,106,123,0,109],
[104,95,82,96,95,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,99,99,92,98,95,97],
[103,0,98,102,98,107,101,112],
[111,112,0,95,106,100,108,106],
[111,108,115,0,107,102,107,109],
[118,112,104,103,0,102,114,116],
[112,103,110,108,108,0,106,111],
[115,109,102,103,96,104,0,110],
[113,98,104,101,94,99,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,110,113,104,121,120],
[107,0,99,114,111,107,109,111],
[105,111,0,104,111,103,104,97],
[100,96,106,0,106,94,98,101],
[97,99,99,104,0,96,111,83],
[106,103,107,116,114,0,111,95],
[89,101,106,112,99,99,0,103],
[90,99,113,109,127,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,108,104,114,102,109],
[104,0,110,113,107,116,109,104],
[104,100,0,107,103,121,115,105],
[102,97,103,0,97,107,107,104],
[106,103,107,113,0,111,110,109],
[96,94,89,103,99,0,100,106],
[108,101,95,103,100,110,0,108],
[101,106,105,106,101,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,97,105,98,104,108],
[111,0,96,97,107,99,99,99],
[111,114,0,105,106,114,101,116],
[113,113,105,0,112,115,112,116],
[105,103,104,98,0,102,105,96],
[112,111,96,95,108,0,112,121],
[106,111,109,98,105,98,0,104],
[102,111,94,94,114,89,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,111,113,105,113,117,105],
[90,0,109,98,88,101,112,105],
[99,101,0,108,89,106,113,103],
[97,112,102,0,95,102,105,101],
[105,122,121,115,0,122,118,111],
[97,109,104,108,88,0,113,105],
[93,98,97,105,92,97,0,93],
[105,105,107,109,99,105,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,96,105,108,86,88],
[107,0,90,87,96,103,82,81],
[111,120,0,110,123,107,101,105],
[114,123,100,0,111,98,90,89],
[105,114,87,99,0,98,88,92],
[102,107,103,112,112,0,91,86],
[124,128,109,120,122,119,0,100],
[122,129,105,121,118,124,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,80,120,95,101,81,106],
[101,0,77,93,92,74,84,107],
[130,133,0,102,112,104,107,166],
[90,117,108,0,117,95,103,118],
[115,118,98,93,0,97,98,112],
[109,136,106,115,113,0,79,115],
[129,126,103,107,112,131,0,112],
[104,103,44,92,98,95,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,103,145,146,129,123,119],
[90,0,83,121,108,127,118,113],
[107,127,0,136,124,108,119,98],
[65,89,74,0,85,58,86,85],
[64,102,86,125,0,87,99,117],
[81,83,102,152,123,0,108,111],
[87,92,91,124,111,102,0,93],
[91,97,112,125,93,99,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,111,110,118,116,120],
[109,0,117,113,103,110,121,118],
[100,93,0,108,95,104,118,106],
[99,97,102,0,101,107,114,108],
[100,107,115,109,0,105,120,112],
[92,100,106,103,105,0,116,97],
[94,89,92,96,90,94,0,95],
[90,92,104,102,98,113,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,98,99,107,98,100,108],
[94,0,89,88,97,94,90,106],
[112,121,0,96,112,99,99,119],
[111,122,114,0,106,107,103,120],
[103,113,98,104,0,106,108,123],
[112,116,111,103,104,0,105,108],
[110,120,111,107,102,105,0,113],
[102,104,91,90,87,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,99,101,110,94,96,92],
[121,0,112,101,121,105,109,113],
[111,98,0,107,106,95,118,112],
[109,109,103,0,112,92,111,94],
[100,89,104,98,0,80,103,84],
[116,105,115,118,130,0,101,99],
[114,101,92,99,107,109,0,93],
[118,97,98,116,126,111,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,95,111,100,116,105,109],
[100,0,108,109,107,96,115,118],
[115,102,0,104,107,113,112,112],
[99,101,106,0,92,112,102,90],
[110,103,103,118,0,106,105,94],
[94,114,97,98,104,0,96,88],
[105,95,98,108,105,114,0,110],
[101,92,98,120,116,122,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,96,97,100,100,90],
[108,0,97,104,106,112,106,98],
[111,113,0,106,95,110,110,108],
[114,106,104,0,96,90,100,100],
[113,104,115,114,0,107,108,97],
[110,98,100,120,103,0,95,111],
[110,104,100,110,102,115,0,107],
[120,112,102,110,113,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,122,134,132,135,100,113],
[42,0,67,79,75,117,61,93],
[88,143,0,186,183,183,127,165],
[76,131,24,0,58,56,46,43],
[78,135,27,152,0,156,135,118],
[75,93,27,154,54,0,115,89],
[110,149,83,164,75,95,0,109],
[97,117,45,167,92,121,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,119,121,110,104,109,116],
[98,0,110,101,87,103,108,104],
[91,100,0,96,90,95,82,91],
[89,109,114,0,100,95,99,91],
[100,123,120,110,0,106,107,105],
[106,107,115,115,104,0,97,104],
[101,102,128,111,103,113,0,93],
[94,106,119,119,105,106,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,104,106,107,91,94],
[101,0,112,106,102,103,85,105],
[106,98,0,114,109,106,87,95],
[106,104,96,0,110,108,96,104],
[104,108,101,100,0,112,90,103],
[103,107,104,102,98,0,90,97],
[119,125,123,114,120,120,0,104],
[116,105,115,106,107,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,107,112,105,107,99],
[108,0,111,101,111,101,109,109],
[107,99,0,103,110,96,108,103],
[103,109,107,0,102,103,107,99],
[98,99,100,108,0,101,100,95],
[105,109,114,107,109,0,113,104],
[103,101,102,103,110,97,0,102],
[111,101,107,111,115,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,113,103,86,97,98,88],
[106,0,112,96,85,93,94,96],
[97,98,0,92,69,82,87,82],
[107,114,118,0,99,94,102,100],
[124,125,141,111,0,120,129,100],
[113,117,128,116,90,0,121,102],
[112,116,123,108,81,89,0,112],
[122,114,128,110,110,108,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,124,106,119,133,90,105],
[97,0,127,114,125,122,111,98],
[86,83,0,107,105,106,103,90],
[104,96,103,0,120,102,105,105],
[91,85,105,90,0,114,85,88],
[77,88,104,108,96,0,92,100],
[120,99,107,105,125,118,0,90],
[105,112,120,105,122,110,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,114,113,97,99,106],
[98,0,90,99,95,96,93,90],
[104,120,0,116,111,104,108,108],
[96,111,94,0,112,95,102,99],
[97,115,99,98,0,100,103,99],
[113,114,106,115,110,0,113,98],
[111,117,102,108,107,97,0,97],
[104,120,102,111,111,112,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,115,109,107,111,133,116],
[113,0,113,113,122,96,119,111],
[95,97,0,120,99,99,110,104],
[101,97,90,0,107,95,128,99],
[103,88,111,103,0,93,125,106],
[99,114,111,115,117,0,144,129],
[77,91,100,82,85,66,0,89],
[94,99,106,111,104,81,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,99,113,108,100,101],
[104,0,107,107,123,108,108,111],
[100,103,0,103,125,104,100,102],
[111,103,107,0,120,108,107,111],
[97,87,85,90,0,90,95,91],
[102,102,106,102,120,0,105,104],
[110,102,110,103,115,105,0,107],
[109,99,108,99,119,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,108,102,90,90,111],
[101,0,105,100,98,91,84,114],
[101,105,0,101,102,102,90,92],
[102,110,109,0,100,91,114,118],
[108,112,108,110,0,94,102,106],
[120,119,108,119,116,0,97,119],
[120,126,120,96,108,113,0,123],
[99,96,118,92,104,91,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,96,100,109,109,104,104],
[112,0,96,100,107,115,109,97],
[114,114,0,117,105,115,126,109],
[110,110,93,0,111,110,124,104],
[101,103,105,99,0,113,126,108],
[101,95,95,100,97,0,106,93],
[106,101,84,86,84,104,0,111],
[106,113,101,106,102,117,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,101,106,115,112,108],
[100,0,93,101,102,98,102,108],
[106,117,0,114,106,104,118,114],
[109,109,96,0,111,110,105,106],
[104,108,104,99,0,108,105,101],
[95,112,106,100,102,0,106,103],
[98,108,92,105,105,104,0,97],
[102,102,96,104,109,107,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,113,106,110,109,107],
[107,0,111,107,101,111,109,93],
[101,99,0,95,88,93,97,108],
[97,103,115,0,115,106,121,98],
[104,109,122,95,0,97,102,98],
[100,99,117,104,113,0,111,112],
[101,101,113,89,108,99,0,100],
[103,117,102,112,112,98,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,101,112,82,93,117,106],
[91,0,114,112,85,103,94,116],
[109,96,0,102,81,94,95,98],
[98,98,108,0,81,92,112,114],
[128,125,129,129,0,102,131,135],
[117,107,116,118,108,0,102,120],
[93,116,115,98,79,108,0,122],
[104,94,112,96,75,90,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,118,114,116,110,113,111],
[111,0,114,114,116,108,86,101],
[92,96,0,106,108,109,105,100],
[96,96,104,0,109,113,99,104],
[94,94,102,101,0,100,89,95],
[100,102,101,97,110,0,101,107],
[97,124,105,111,121,109,0,108],
[99,109,110,106,115,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,113,111,84,85,86,94],
[131,0,113,121,107,86,116,114],
[97,97,0,126,88,80,100,106],
[99,89,84,0,90,74,80,110],
[126,103,122,120,0,110,103,114],
[125,124,130,136,100,0,127,93],
[124,94,110,130,107,83,0,90],
[116,96,104,100,96,117,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,97,106,109,94,96,111],
[106,0,105,104,119,109,105,123],
[113,105,0,108,112,101,103,123],
[104,106,102,0,116,103,108,118],
[101,91,98,94,0,97,91,110],
[116,101,109,107,113,0,97,116],
[114,105,107,102,119,113,0,119],
[99,87,87,92,100,94,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,96,89,88,107,101,97],
[112,0,101,105,103,103,94,106],
[114,109,0,109,106,120,105,98],
[121,105,101,0,101,106,106,106],
[122,107,104,109,0,108,105,97],
[103,107,90,104,102,0,109,108],
[109,116,105,104,105,101,0,118],
[113,104,112,104,113,102,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,117,81,100,81,94,122],
[91,0,96,82,99,95,108,106],
[93,114,0,74,89,93,98,105],
[129,128,136,0,111,128,94,146],
[110,111,121,99,0,89,120,119],
[129,115,117,82,121,0,114,131],
[116,102,112,116,90,96,0,120],
[88,104,105,64,91,79,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,115,110,94,94,98],
[105,0,106,96,94,104,98,90],
[95,104,0,96,103,90,106,100],
[95,114,114,0,112,99,100,102],
[100,116,107,98,0,100,105,101],
[116,106,120,111,110,0,102,105],
[116,112,104,110,105,108,0,100],
[112,120,110,108,109,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,118,116,115,121,130,109],
[111,0,108,108,112,102,114,111],
[92,102,0,103,93,110,104,107],
[94,102,107,0,112,109,120,108],
[95,98,117,98,0,99,122,92],
[89,108,100,101,111,0,116,104],
[80,96,106,90,88,94,0,98],
[101,99,103,102,118,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,113,95,100,106,98],
[105,0,97,91,103,95,108,86],
[97,113,0,102,109,105,118,112],
[97,119,108,0,97,102,107,98],
[115,107,101,113,0,112,104,113],
[110,115,105,108,98,0,112,110],
[104,102,92,103,106,98,0,105],
[112,124,98,112,97,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,74,116,54,95,102,110],
[116,0,78,97,88,87,95,105],
[136,132,0,141,97,119,128,125],
[94,113,69,0,55,68,83,67],
[156,122,113,155,0,103,123,114],
[115,123,91,142,107,0,111,100],
[108,115,82,127,87,99,0,116],
[100,105,85,143,96,110,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,100,98,100,117,107,122],
[106,0,105,107,95,129,102,114],
[110,105,0,112,101,129,94,111],
[112,103,98,0,108,117,107,112],
[110,115,109,102,0,142,110,117],
[93,81,81,93,68,0,83,91],
[103,108,116,103,100,127,0,117],
[88,96,99,98,93,119,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,103,109,106,96,104],
[107,0,101,98,111,109,109,103],
[108,109,0,105,108,106,105,101],
[107,112,105,0,108,109,96,105],
[101,99,102,102,0,112,105,111],
[104,101,104,101,98,0,108,99],
[114,101,105,114,105,102,0,96],
[106,107,109,105,99,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,116,106,102,123,116,117],
[100,0,103,110,98,117,112,113],
[94,107,0,110,112,122,120,113],
[104,100,100,0,106,128,115,114],
[108,112,98,104,0,120,124,120],
[87,93,88,82,90,0,101,103],
[94,98,90,95,86,109,0,100],
[93,97,97,96,90,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,95,89,102,102,96,88],
[112,0,94,97,96,102,102,95],
[115,116,0,106,109,114,115,105],
[121,113,104,0,106,104,103,90],
[108,114,101,104,0,118,107,96],
[108,108,96,106,92,0,95,90],
[114,108,95,107,103,115,0,88],
[122,115,105,120,114,120,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,122,114,131,93,121,102],
[99,0,120,100,104,111,119,99],
[88,90,0,89,97,92,93,96],
[96,110,121,0,108,102,110,102],
[79,106,113,102,0,89,97,94],
[117,99,118,108,121,0,110,110],
[89,91,117,100,113,100,0,103],
[108,111,114,108,116,100,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,115,88,107,113,120,112],
[109,0,116,95,113,129,119,115],
[95,94,0,87,105,102,116,101],
[122,115,123,0,100,134,123,117],
[103,97,105,110,0,109,114,105],
[97,81,108,76,101,0,110,91],
[90,91,94,87,96,100,0,86],
[98,95,109,93,105,119,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,103,106,93,102,112,108],
[123,0,117,104,107,106,110,105],
[107,93,0,93,84,94,116,94],
[104,106,117,0,101,95,102,110],
[117,103,126,109,0,116,115,113],
[108,104,116,115,94,0,103,117],
[98,100,94,108,95,107,0,100],
[102,105,116,100,97,93,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,85,88,98,89,97,101],
[125,0,108,113,95,91,124,94],
[125,102,0,121,114,102,116,95],
[122,97,89,0,94,89,99,104],
[112,115,96,116,0,114,119,107],
[121,119,108,121,96,0,122,106],
[113,86,94,111,91,88,0,98],
[109,116,115,106,103,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,125,94,151,98,89,119],
[151,0,107,80,135,139,80,136],
[85,103,0,134,145,113,108,139],
[116,130,76,0,144,122,89,124],
[59,75,65,66,0,84,75,96],
[112,71,97,88,126,0,82,81],
[121,130,102,121,135,128,0,149],
[91,74,71,86,114,129,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,95,100,107,99,109],
[112,0,105,99,101,106,105,106],
[111,105,0,101,98,100,98,106],
[115,111,109,0,100,114,110,113],
[110,109,112,110,0,109,105,111],
[103,104,110,96,101,0,100,98],
[111,105,112,100,105,110,0,100],
[101,104,104,97,99,112,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,114,112,101,110,116,106],
[112,0,119,104,105,119,108,109],
[96,91,0,99,96,99,102,89],
[98,106,111,0,98,100,105,97],
[109,105,114,112,0,122,123,103],
[100,91,111,110,88,0,106,99],
[94,102,108,105,87,104,0,96],
[104,101,121,113,107,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,85,83,106,93,84,109],
[128,0,99,118,122,121,97,114],
[125,111,0,120,112,96,108,120],
[127,92,90,0,120,112,85,115],
[104,88,98,90,0,106,86,116],
[117,89,114,98,104,0,92,102],
[126,113,102,125,124,118,0,138],
[101,96,90,95,94,108,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,120,125,100,104,100,124],
[104,0,125,122,128,108,118,138],
[90,85,0,109,104,105,97,119],
[85,88,101,0,93,104,89,121],
[110,82,106,117,0,109,98,114],
[106,102,105,106,101,0,108,111],
[110,92,113,121,112,102,0,136],
[86,72,91,89,96,99,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,159,165,95,109,141,127],
[33,0,102,108,34,87,83,91],
[51,108,0,72,58,85,81,52],
[45,102,138,0,96,75,92,101],
[115,176,152,114,0,108,157,91],
[101,123,125,135,102,0,151,114],
[69,127,129,118,53,59,0,68],
[83,119,158,109,119,96,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,125,110,114,104,109],
[101,0,106,105,103,101,96,97],
[102,104,0,113,99,113,105,108],
[85,105,97,0,98,95,85,90],
[100,107,111,112,0,106,95,96],
[96,109,97,115,104,0,95,97],
[106,114,105,125,115,115,0,116],
[101,113,102,120,114,113,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,101,94,131,115,104,107],
[137,0,132,112,104,117,135,116],
[109,78,0,85,100,96,116,107],
[116,98,125,0,112,109,104,112],
[79,106,110,98,0,133,100,107],
[95,93,114,101,77,0,112,103],
[106,75,94,106,110,98,0,105],
[103,94,103,98,103,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,107,118,108,112,99,105],
[109,0,97,105,100,117,87,110],
[103,113,0,109,103,115,106,114],
[92,105,101,0,96,107,91,97],
[102,110,107,114,0,117,96,110],
[98,93,95,103,93,0,94,99],
[111,123,104,119,114,116,0,118],
[105,100,96,113,100,111,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,105,102,107,113,91],
[99,0,111,104,102,105,104,90],
[103,99,0,117,95,109,95,111],
[105,106,93,0,86,105,106,86],
[108,108,115,124,0,124,110,101],
[103,105,101,105,86,0,102,86],
[97,106,115,104,100,108,0,105],
[119,120,99,124,109,124,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,89,105,98,93,90,97],
[121,0,96,108,115,100,100,106],
[121,114,0,109,102,102,105,107],
[105,102,101,0,104,97,92,110],
[112,95,108,106,0,106,98,102],
[117,110,108,113,104,0,97,116],
[120,110,105,118,112,113,0,117],
[113,104,103,100,108,94,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,105,93,103,97,97,101],
[117,0,111,105,110,102,104,97],
[105,99,0,91,105,87,90,88],
[117,105,119,0,110,102,109,111],
[107,100,105,100,0,114,112,96],
[113,108,123,108,96,0,123,111],
[113,106,120,101,98,87,0,96],
[109,113,122,99,114,99,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,113,121,70,82,100],
[110,0,113,98,119,106,112,127],
[104,97,0,137,103,111,117,128],
[97,112,73,0,100,90,92,136],
[89,91,107,110,0,96,95,137],
[140,104,99,120,114,0,124,121],
[128,98,93,118,115,86,0,113],
[110,83,82,74,73,89,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,119,105,99,138,123],
[97,0,115,137,118,111,142,128],
[100,95,0,113,112,90,141,135],
[91,73,97,0,110,68,117,116],
[105,92,98,100,0,100,127,139],
[111,99,120,142,110,0,149,121],
[72,68,69,93,83,61,0,84],
[87,82,75,94,71,89,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,134,111,107,125,96,130],
[97,0,110,99,100,109,104,112],
[76,100,0,99,90,100,94,123],
[99,111,111,0,97,116,91,109],
[103,110,120,113,0,100,105,116],
[85,101,110,94,110,0,80,116],
[114,106,116,119,105,130,0,131],
[80,98,87,101,94,94,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,119,92,120,102,89,93],
[103,0,116,98,125,95,90,89],
[91,94,0,89,113,83,85,82],
[118,112,121,0,119,111,107,90],
[90,85,97,91,0,79,82,77],
[108,115,127,99,131,0,103,100],
[121,120,125,103,128,107,0,116],
[117,121,128,120,133,110,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,84,109,86,122,97,100],
[101,0,81,78,70,98,75,99],
[126,129,0,96,109,115,123,119],
[101,132,114,0,81,123,104,124],
[124,140,101,129,0,142,121,133],
[88,112,95,87,68,0,89,123],
[113,135,87,106,89,121,0,121],
[110,111,91,86,77,87,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,104,103,105,103,113,105],
[117,0,100,104,111,106,113,116],
[106,110,0,114,107,98,107,105],
[107,106,96,0,107,106,112,115],
[105,99,103,103,0,92,105,103],
[107,104,112,104,118,0,119,112],
[97,97,103,98,105,91,0,96],
[105,94,105,95,107,98,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,80,87,91,120,70],
[113,0,150,134,141,94,123,111],
[110,60,0,108,91,95,60,74],
[130,76,102,0,109,98,106,71],
[123,69,119,101,0,95,101,97],
[119,116,115,112,115,0,87,93],
[90,87,150,104,109,123,0,103],
[140,99,136,139,113,117,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,108,118,112,114,114],
[101,0,107,102,107,103,103,101],
[107,103,0,106,119,102,112,109],
[102,108,104,0,115,109,120,118],
[92,103,91,95,0,96,107,99],
[98,107,108,101,114,0,111,100],
[96,107,98,90,103,99,0,102],
[96,109,101,92,111,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,104,91,120,96,110],
[105,0,114,74,101,84,85,101],
[108,96,0,95,118,98,117,123],
[106,136,115,0,99,128,133,117],
[119,109,92,111,0,115,105,100],
[90,126,112,82,95,0,111,107],
[114,125,93,77,105,99,0,109],
[100,109,87,93,110,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,99,102,107,112,116,123],
[96,0,93,103,107,106,109,104],
[111,117,0,106,103,123,119,108],
[108,107,104,0,99,105,102,102],
[103,103,107,111,0,100,105,106],
[98,104,87,105,110,0,106,109],
[94,101,91,108,105,104,0,92],
[87,106,102,108,104,101,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,81,92,108,109,103,102],
[118,0,101,106,117,110,108,112],
[129,109,0,112,109,103,117,115],
[118,104,98,0,111,101,104,107],
[102,93,101,99,0,111,107,107],
[101,100,107,109,99,0,109,106],
[107,102,93,106,103,101,0,90],
[108,98,95,103,103,104,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,137,141,116,87,95,133],
[85,0,112,151,131,122,106,133],
[73,98,0,119,107,96,106,114],
[69,59,91,0,83,78,95,113],
[94,79,103,127,0,105,123,120],
[123,88,114,132,105,0,116,110],
[115,104,104,115,87,94,0,131],
[77,77,96,97,90,100,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,92,99,163,131,132,74],
[97,0,96,152,207,171,74,136],
[118,114,0,100,166,171,132,173],
[111,58,110,0,147,150,111,113],
[47,3,44,63,0,118,21,83],
[79,39,39,60,92,0,40,62],
[78,136,78,99,189,170,0,62],
[136,74,37,97,127,148,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,121,110,112,106,105],
[104,0,105,116,108,120,108,116],
[105,105,0,114,119,121,112,113],
[89,94,96,0,102,106,98,94],
[100,102,91,108,0,113,96,96],
[98,90,89,104,97,0,100,104],
[104,102,98,112,114,110,0,108],
[105,94,97,116,114,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,116,108,107,104,118,122],
[83,0,101,101,97,93,103,94],
[94,109,0,93,115,109,113,102],
[102,109,117,0,114,110,95,91],
[103,113,95,96,0,108,97,101],
[106,117,101,100,102,0,111,104],
[92,107,97,115,113,99,0,91],
[88,116,108,119,109,106,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,116,102,116,120,121,110],
[80,0,100,105,101,115,116,103],
[94,110,0,102,109,119,112,100],
[108,105,108,0,115,118,107,106],
[94,109,101,95,0,123,118,101],
[90,95,91,92,87,0,90,102],
[89,94,98,103,92,120,0,105],
[100,107,110,104,109,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,118,98,117,100,99,132],
[94,0,99,96,120,116,112,123],
[92,111,0,119,101,108,108,122],
[112,114,91,0,135,135,111,131],
[93,90,109,75,0,99,105,106],
[110,94,102,75,111,0,110,119],
[111,98,102,99,105,100,0,110],
[78,87,88,79,104,91,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,103,114,109,108,97,112],
[113,0,95,118,103,108,113,109],
[107,115,0,116,111,103,112,117],
[96,92,94,0,111,109,98,101],
[101,107,99,99,0,99,97,110],
[102,102,107,101,111,0,105,107],
[113,97,98,112,113,105,0,104],
[98,101,93,109,100,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,90,98,96,107,108,86],
[101,0,92,109,96,106,107,84],
[120,118,0,117,115,122,116,103],
[112,101,93,0,80,95,97,95],
[114,114,95,130,0,123,121,115],
[103,104,88,115,87,0,103,94],
[102,103,94,113,89,107,0,103],
[124,126,107,115,95,116,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,116,105,109,127,104,109],
[100,0,104,105,116,108,97,99],
[94,106,0,109,110,106,102,100],
[105,105,101,0,104,106,97,102],
[101,94,100,106,0,102,94,97],
[83,102,104,104,108,0,95,92],
[106,113,108,113,116,115,0,101],
[101,111,110,108,113,118,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,60,81,70,96,51,69],
[151,0,149,134,84,125,118,109],
[150,61,0,154,107,132,124,112],
[129,76,56,0,100,44,88,61],
[140,126,103,110,0,122,87,104],
[114,85,78,166,88,0,89,89],
[159,92,86,122,123,121,0,93],
[141,101,98,149,106,121,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,98,115,115,104,115,100],
[96,0,105,110,110,98,113,94],
[112,105,0,117,119,97,116,109],
[95,100,93,0,107,93,101,97],
[95,100,91,103,0,103,104,106],
[106,112,113,117,107,0,121,101],
[95,97,94,109,106,89,0,91],
[110,116,101,113,104,109,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,105,133,112,82,110,99],
[120,0,97,131,116,95,98,103],
[105,113,0,150,104,110,96,109],
[77,79,60,0,86,80,80,97],
[98,94,106,124,0,89,82,112],
[128,115,100,130,121,0,89,107],
[100,112,114,130,128,121,0,98],
[111,107,101,113,98,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,112,110,109,103,114],
[105,0,109,114,104,110,106,114],
[103,101,0,100,103,105,110,109],
[98,96,110,0,108,111,108,106],
[100,106,107,102,0,109,100,108],
[101,100,105,99,101,0,103,96],
[107,104,100,102,110,107,0,105],
[96,96,101,104,102,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,89,94,91,96,98,108],
[119,0,117,115,107,105,112,96],
[121,93,0,116,103,108,115,115],
[116,95,94,0,101,107,99,109],
[119,103,107,109,0,103,99,105],
[114,105,102,103,107,0,111,99],
[112,98,95,111,111,99,0,102],
[102,114,95,101,105,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,106,121,102,114,96,89],
[117,0,102,121,118,121,110,113],
[104,108,0,116,118,134,120,117],
[89,89,94,0,100,94,102,109],
[108,92,92,110,0,100,113,89],
[96,89,76,116,110,0,109,80],
[114,100,90,108,97,101,0,104],
[121,97,93,101,121,130,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,76,97,100,21,125,74],
[136,0,109,136,121,70,109,58],
[134,101,0,185,61,58,164,86],
[113,74,25,0,49,21,49,74],
[110,89,149,161,0,110,161,110],
[189,140,152,189,100,0,152,113],
[85,101,46,161,49,58,0,25],
[136,152,124,136,100,97,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,111,99,112,111,98],
[107,0,102,106,93,102,101,93],
[103,108,0,116,114,109,110,98],
[99,104,94,0,99,96,104,91],
[111,117,96,111,0,113,114,113],
[98,108,101,114,97,0,103,99],
[99,109,100,106,96,107,0,103],
[112,117,112,119,97,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,114,108,110,107,111,100],
[106,0,102,94,107,110,109,109],
[96,108,0,98,108,85,105,107],
[102,116,112,0,114,102,108,111],
[100,103,102,96,0,93,100,105],
[103,100,125,108,117,0,99,106],
[99,101,105,102,110,111,0,97],
[110,101,103,99,105,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,93,84,113,97,108,93],
[115,0,85,104,96,100,101,106],
[117,125,0,117,118,98,120,119],
[126,106,93,0,111,107,114,106],
[97,114,92,99,0,99,119,104],
[113,110,112,103,111,0,118,106],
[102,109,90,96,91,92,0,106],
[117,104,91,104,106,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,94,105,105,102,106,102],
[97,0,91,92,112,104,100,97],
[116,119,0,101,121,126,115,110],
[105,118,109,0,116,116,105,109],
[105,98,89,94,0,108,103,104],
[108,106,84,94,102,0,95,102],
[104,110,95,105,107,115,0,92],
[108,113,100,101,106,108,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,105,110,97,120,119,103],
[114,0,107,108,105,119,118,108],
[105,103,0,105,105,115,105,116],
[100,102,105,0,106,105,97,104],
[113,105,105,104,0,116,114,114],
[90,91,95,105,94,0,108,91],
[91,92,105,113,96,102,0,105],
[107,102,94,106,96,119,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,100,118,109,102,107],
[110,0,98,97,114,105,127,116],
[100,112,0,112,109,115,106,110],
[110,113,98,0,116,109,107,98],
[92,96,101,94,0,112,101,97],
[101,105,95,101,98,0,120,103],
[108,83,104,103,109,90,0,92],
[103,94,100,112,113,107,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,162,188,160,210,162,86],
[68,0,148,208,106,148,100,128],
[48,62,0,188,6,56,8,6],
[22,2,22,0,28,22,22,0],
[50,104,204,182,0,70,130,48],
[0,62,154,188,140,0,82,0],
[48,110,202,188,80,128,0,54],
[124,82,204,210,162,210,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,95,100,100,96,106,112],
[105,0,98,99,104,95,104,115],
[115,112,0,104,114,115,109,122],
[110,111,106,0,105,97,107,116],
[110,106,96,105,0,106,106,110],
[114,115,95,113,104,0,117,120],
[104,106,101,103,104,93,0,110],
[98,95,88,94,100,90,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,117,80,68,91,89,81],
[129,0,116,91,122,93,116,89],
[93,94,0,71,83,80,125,101],
[130,119,139,0,110,98,119,103],
[142,88,127,100,0,110,136,96],
[119,117,130,112,100,0,118,109],
[121,94,85,91,74,92,0,80],
[129,121,109,107,114,101,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,92,66,89,90,83,130],
[123,0,131,96,88,118,132,116],
[118,79,0,52,95,84,131,100],
[144,114,158,0,134,104,129,128],
[121,122,115,76,0,80,86,104],
[120,92,126,106,130,0,121,150],
[127,78,79,81,124,89,0,101],
[80,94,110,82,106,60,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,114,116,93,108,101,102],
[97,0,122,119,108,100,119,98],
[96,88,0,101,88,95,107,96],
[94,91,109,0,86,92,101,101],
[117,102,122,124,0,84,120,115],
[102,110,115,118,126,0,127,121],
[109,91,103,109,90,83,0,101],
[108,112,114,109,95,89,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,129,116,131,109,105],
[100,0,126,129,123,125,99,111],
[103,84,0,121,123,92,98,73],
[81,81,89,0,104,105,100,82],
[94,87,87,106,0,102,106,96],
[79,85,118,105,108,0,99,48],
[101,111,112,110,104,111,0,78],
[105,99,137,128,114,162,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,102,107,94,96,96,101],
[96,0,107,103,93,98,100,104],
[108,103,0,113,108,104,109,99],
[103,107,97,0,98,100,100,97],
[116,117,102,112,0,110,106,102],
[114,112,106,110,100,0,103,107],
[114,110,101,110,104,107,0,103],
[109,106,111,113,108,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,101,100,109,103,110],
[106,0,102,86,89,107,89,104],
[106,108,0,95,99,102,104,106],
[109,124,115,0,93,116,105,127],
[110,121,111,117,0,109,102,117],
[101,103,108,94,101,0,102,115],
[107,121,106,105,108,108,0,121],
[100,106,104,83,93,95,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,97,105,105,112,99],
[103,0,106,97,110,96,121,103],
[104,104,0,110,116,104,113,106],
[113,113,100,0,94,108,111,94],
[105,100,94,116,0,103,117,103],
[105,114,106,102,107,0,115,102],
[98,89,97,99,93,95,0,94],
[111,107,104,116,107,108,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,106,112,113,118,111],
[100,0,103,108,113,104,111,115],
[105,107,0,97,110,106,116,116],
[104,102,113,0,111,108,117,117],
[98,97,100,99,0,97,104,108],
[97,106,104,102,113,0,107,112],
[92,99,94,93,106,103,0,106],
[99,95,94,93,102,98,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,83,104,86,117,101,106],
[104,0,85,91,89,96,89,107],
[127,125,0,132,101,128,111,108],
[106,119,78,0,105,111,97,94],
[124,121,109,105,0,122,115,123],
[93,114,82,99,88,0,102,102],
[109,121,99,113,95,108,0,106],
[104,103,102,116,87,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,49,57,105,112,105,148],
[82,0,84,49,75,87,66,76],
[161,126,0,73,96,188,159,139],
[153,161,137,0,118,156,97,110],
[105,135,114,92,0,130,112,87],
[98,123,22,54,80,0,93,90],
[105,144,51,113,98,117,0,124],
[62,134,71,100,123,120,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,105,117,95,95,108,113],
[92,0,105,107,86,106,101,102],
[105,105,0,119,104,102,102,104],
[93,103,91,0,101,97,113,83],
[115,124,106,109,0,81,107,100],
[115,104,108,113,129,0,126,112],
[102,109,108,97,103,84,0,93],
[97,108,106,127,110,98,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,117,112,123,105,100,110],
[94,0,105,107,102,95,101,97],
[93,105,0,113,106,95,97,103],
[98,103,97,0,99,89,92,109],
[87,108,104,111,0,90,93,98],
[105,115,115,121,120,0,115,113],
[110,109,113,118,117,95,0,110],
[100,113,107,101,112,97,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,97,102,104,106,91],
[107,0,107,105,107,102,108,105],
[109,103,0,105,104,105,108,100],
[113,105,105,0,105,109,117,99],
[108,103,106,105,0,110,111,88],
[106,108,105,101,100,0,105,95],
[104,102,102,93,99,105,0,110],
[119,105,110,111,122,115,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,106,111,102,113,94,122],
[93,0,113,90,95,98,82,103],
[104,97,0,95,84,99,75,93],
[99,120,115,0,107,103,86,119],
[108,115,126,103,0,119,106,118],
[97,112,111,107,91,0,94,108],
[116,128,135,124,104,116,0,117],
[88,107,117,91,92,102,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,37,63,104,46,40,104],
[71,0,42,42,16,42,45,91],
[173,168,0,156,102,42,52,130],
[147,168,54,0,121,65,40,134],
[106,194,108,89,0,105,90,175],
[164,168,168,145,105,0,167,125],
[170,165,158,170,120,43,0,115],
[106,119,80,76,35,85,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,117,117,106,109,105,109],
[88,0,93,101,91,104,95,104],
[93,117,0,111,97,115,96,111],
[93,109,99,0,100,110,101,106],
[104,119,113,110,0,109,94,114],
[101,106,95,100,101,0,97,96],
[105,115,114,109,116,113,0,116],
[101,106,99,104,96,114,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,98,107,102,100,97],
[110,0,103,93,107,99,109,108],
[107,107,0,110,106,109,112,103],
[112,117,100,0,112,101,116,98],
[103,103,104,98,0,95,103,99],
[108,111,101,109,115,0,106,111],
[110,101,98,94,107,104,0,107],
[113,102,107,112,111,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,105,115,111,116,102,110],
[96,0,98,110,99,96,99,112],
[105,112,0,115,110,115,102,107],
[95,100,95,0,115,105,103,100],
[99,111,100,95,0,105,92,110],
[94,114,95,105,105,0,112,104],
[108,111,108,107,118,98,0,97],
[100,98,103,110,100,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,114,104,135,96,104,101],
[126,0,132,118,126,104,125,128],
[96,78,0,91,101,92,107,113],
[106,92,119,0,125,114,116,123],
[75,84,109,85,0,72,105,91],
[114,106,118,96,138,0,118,108],
[106,85,103,94,105,92,0,106],
[109,82,97,87,119,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,92,103,103,103,94,91],
[113,0,104,107,116,120,116,107],
[118,106,0,121,121,122,134,105],
[107,103,89,0,106,93,108,85],
[107,94,89,104,0,107,120,96],
[107,90,88,117,103,0,114,87],
[116,94,76,102,90,96,0,91],
[119,103,105,125,114,123,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,107,104,105,124,105],
[101,0,111,100,107,116,112,109],
[109,99,0,109,101,106,104,97],
[103,110,101,0,110,112,112,104],
[106,103,109,100,0,108,121,100],
[105,94,104,98,102,0,106,115],
[86,98,106,98,89,104,0,108],
[105,101,113,106,110,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,128,107,111,105,130,115],
[101,0,115,105,110,121,121,128],
[82,95,0,102,110,95,112,112],
[103,105,108,0,102,98,113,115],
[99,100,100,108,0,107,110,123],
[105,89,115,112,103,0,103,131],
[80,89,98,97,100,107,0,106],
[95,82,98,95,87,79,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,124,105,105,99,100,101],
[109,0,113,101,111,100,110,99],
[86,97,0,98,96,95,101,102],
[105,109,112,0,111,109,105,102],
[105,99,114,99,0,91,102,95],
[111,110,115,101,119,0,104,106],
[110,100,109,105,108,106,0,107],
[109,111,108,108,115,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,111,114,116,99,113],
[99,0,115,103,121,102,98,113],
[95,95,0,94,101,86,88,97],
[99,107,116,0,123,110,92,98],
[96,89,109,87,0,90,84,81],
[94,108,124,100,120,0,107,110],
[111,112,122,118,126,103,0,118],
[97,97,113,112,129,100,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,105,122,115,122,114,114],
[110,0,105,122,114,118,116,112],
[105,105,0,114,108,112,109,99],
[88,88,96,0,95,106,97,96],
[95,96,102,115,0,108,105,106],
[88,92,98,104,102,0,105,93],
[96,94,101,113,105,105,0,100],
[96,98,111,114,104,117,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,97,102,98,98,102],
[104,0,95,92,97,103,84,104],
[108,115,0,97,112,100,95,102],
[113,118,113,0,119,105,109,107],
[108,113,98,91,0,103,93,115],
[112,107,110,105,107,0,96,113],
[112,126,115,101,117,114,0,115],
[108,106,108,103,95,97,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,109,104,112,107,106],
[102,0,103,105,99,104,104,107],
[109,107,0,109,101,113,114,107],
[101,105,101,0,94,112,113,114],
[106,111,109,116,0,97,112,118],
[98,106,97,98,113,0,109,109],
[103,106,96,97,98,101,0,106],
[104,103,103,96,92,101,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,102,104,102,96,114],
[107,0,96,106,104,94,102,102],
[103,114,0,102,107,102,105,111],
[108,104,108,0,103,100,97,107],
[106,106,103,107,0,107,105,112],
[108,116,108,110,103,0,109,117],
[114,108,105,113,105,101,0,114],
[96,108,99,103,98,93,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,111,93,103,105,101,104],
[120,0,110,102,106,112,112,106],
[99,100,0,96,95,105,106,105],
[117,108,114,0,103,117,120,119],
[107,104,115,107,0,112,110,106],
[105,98,105,93,98,0,107,100],
[109,98,104,90,100,103,0,101],
[106,104,105,91,104,110,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,135,74,95,105,107,121],
[63,0,112,73,66,107,80,102],
[75,98,0,65,100,111,82,113],
[136,137,145,0,131,78,136,135],
[115,144,110,79,0,117,147,155],
[105,103,99,132,93,0,82,95],
[103,130,128,74,63,128,0,125],
[89,108,97,75,55,115,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,119,108,116,128,103,112],
[98,0,105,99,110,103,89,103],
[91,105,0,93,101,106,90,95],
[102,111,117,0,121,120,116,113],
[94,100,109,89,0,106,83,102],
[82,107,104,90,104,0,94,107],
[107,121,120,94,127,116,0,122],
[98,107,115,97,108,103,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,95,104,95,92,95,105],
[124,0,100,111,115,102,114,114],
[115,110,0,113,122,105,105,105],
[106,99,97,0,105,88,83,101],
[115,95,88,105,0,98,108,100],
[118,108,105,122,112,0,109,125],
[115,96,105,127,102,101,0,107],
[105,96,105,109,110,85,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,67,67,123,99,84,82],
[107,0,91,92,119,82,101,101],
[143,119,0,133,129,142,103,128],
[143,118,77,0,118,143,112,117],
[87,91,81,92,0,100,108,97],
[111,128,68,67,110,0,111,83],
[126,109,107,98,102,99,0,96],
[128,109,82,93,113,127,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,78,103,56,134,105,123],
[135,0,114,123,93,141,103,135],
[132,96,0,113,114,147,105,114],
[107,87,97,0,69,126,94,108],
[154,117,96,141,0,132,103,129],
[76,69,63,84,78,0,74,129],
[105,107,105,116,107,136,0,106],
[87,75,96,102,81,81,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,117,103,113,102,116,108],
[107,0,116,94,107,107,105,98],
[93,94,0,103,114,102,112,95],
[107,116,107,0,97,109,106,99],
[97,103,96,113,0,97,114,95],
[108,103,108,101,113,0,119,100],
[94,105,98,104,96,91,0,94],
[102,112,115,111,115,110,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,89,87,95,97,111,91],
[104,0,93,86,89,93,100,76],
[121,117,0,98,105,121,151,108],
[123,124,112,0,103,118,131,120],
[115,121,105,107,0,114,130,107],
[113,117,89,92,96,0,118,107],
[99,110,59,79,80,92,0,97],
[119,134,102,90,103,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,93,101,100,105,118,118],
[118,0,115,115,99,95,88,129],
[117,95,0,128,112,117,111,117],
[109,95,82,0,94,124,96,118],
[110,111,98,116,0,107,92,127],
[105,115,93,86,103,0,85,104],
[92,122,99,114,118,125,0,125],
[92,81,93,92,83,106,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,79,70,90,93,83,80],
[121,0,90,81,87,99,111,101],
[131,120,0,109,115,102,116,108],
[140,129,101,0,103,126,119,87],
[120,123,95,107,0,105,122,99],
[117,111,108,84,105,0,128,96],
[127,99,94,91,88,82,0,79],
[130,109,102,123,111,114,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,108,107,109,105,109],
[105,0,114,115,98,109,102,101],
[98,96,0,109,104,103,103,98],
[102,95,101,0,100,104,102,93],
[103,112,106,110,0,103,99,97],
[101,101,107,106,107,0,100,109],
[105,108,107,108,111,110,0,116],
[101,109,112,117,113,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,95,105,105,100,116,114],
[110,0,105,106,112,93,113,107],
[115,105,0,110,112,115,115,110],
[105,104,100,0,100,107,111,102],
[105,98,98,110,0,102,108,99],
[110,117,95,103,108,0,109,109],
[94,97,95,99,102,101,0,104],
[96,103,100,108,111,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,94,98,99,113,115,97],
[96,0,108,97,105,101,114,104],
[116,102,0,111,113,97,116,89],
[112,113,99,0,110,106,105,94],
[111,105,97,100,0,112,124,106],
[97,109,113,104,98,0,115,94],
[95,96,94,105,86,95,0,105],
[113,106,121,116,104,116,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,113,102,112,96,106],
[113,0,104,110,107,110,93,108],
[105,106,0,114,102,113,105,113],
[97,100,96,0,95,120,98,97],
[108,103,108,115,0,113,106,101],
[98,100,97,90,97,0,104,103],
[114,117,105,112,104,106,0,90],
[104,102,97,113,109,107,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,110,103,96,121,105],
[103,0,105,102,106,104,110,92],
[102,105,0,105,105,105,114,106],
[100,108,105,0,100,97,109,96],
[107,104,105,110,0,105,106,95],
[114,106,105,113,105,0,110,107],
[89,100,96,101,104,100,0,98],
[105,118,104,114,115,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,120,109,97,120,116,125],
[100,0,107,98,88,107,104,115],
[90,103,0,98,88,100,106,100],
[101,112,112,0,122,127,129,118],
[113,122,122,88,0,115,106,109],
[90,103,110,83,95,0,101,119],
[94,106,104,81,104,109,0,111],
[85,95,110,92,101,91,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,117,121,110,139,116,105],
[96,0,111,106,107,106,120,94],
[93,99,0,118,110,102,94,85],
[89,104,92,0,112,115,103,99],
[100,103,100,98,0,95,104,102],
[71,104,108,95,115,0,103,79],
[94,90,116,107,106,107,0,98],
[105,116,125,111,108,131,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,114,107,108,103,103],
[105,0,126,111,109,115,114,111],
[101,84,0,106,107,101,110,91],
[96,99,104,0,96,106,97,99],
[103,101,103,114,0,108,107,100],
[102,95,109,104,102,0,113,99],
[107,96,100,113,103,97,0,99],
[107,99,119,111,110,111,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,106,119,112,102,117],
[104,0,113,91,105,103,105,105],
[101,97,0,91,112,87,92,103],
[104,119,119,0,111,101,104,115],
[91,105,98,99,0,97,95,101],
[98,107,123,109,113,0,96,113],
[108,105,118,106,115,114,0,109],
[93,105,107,95,109,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,98,118,121,109,119,111],
[91,0,112,117,122,126,94,113],
[112,98,0,118,99,101,115,111],
[92,93,92,0,127,113,83,91],
[89,88,111,83,0,91,97,103],
[101,84,109,97,119,0,92,121],
[91,116,95,127,113,118,0,104],
[99,97,99,119,107,89,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,101,79,87,95,67,125],
[91,0,116,98,93,81,101,97],
[109,94,0,111,99,98,86,103],
[131,112,99,0,117,115,107,104],
[123,117,111,93,0,103,97,103],
[115,129,112,95,107,0,106,103],
[143,109,124,103,113,104,0,116],
[85,113,107,106,107,107,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,106,102,117,97,99,109],
[97,0,105,92,106,86,93,91],
[104,105,0,102,126,102,102,119],
[108,118,108,0,121,99,102,109],
[93,104,84,89,0,90,86,95],
[113,124,108,111,120,0,108,104],
[111,117,108,108,124,102,0,111],
[101,119,91,101,115,106,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,102,104,86,92,102,95],
[116,0,116,116,113,110,114,104],
[108,94,0,105,88,103,103,78],
[106,94,105,0,87,105,103,105],
[124,97,122,123,0,114,110,110],
[118,100,107,105,96,0,105,100],
[108,96,107,107,100,105,0,96],
[115,106,132,105,100,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,110,105,94,119,110,116],
[114,0,107,112,92,111,104,116],
[100,103,0,111,103,110,101,101],
[105,98,99,0,95,116,109,111],
[116,118,107,115,0,105,123,112],
[91,99,100,94,105,0,102,128],
[100,106,109,101,87,108,0,132],
[94,94,109,99,98,82,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,92,98,94,108,122,121],
[92,0,90,78,79,97,82,99],
[118,120,0,109,104,117,121,117],
[112,132,101,0,105,122,113,126],
[116,131,106,105,0,108,123,104],
[102,113,93,88,102,0,95,109],
[88,128,89,97,87,115,0,98],
[89,111,93,84,106,101,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,109,120,113,119,95,125],
[85,0,89,98,99,106,81,115],
[101,121,0,109,112,108,107,117],
[90,112,101,0,102,104,79,117],
[97,111,98,108,0,122,84,107],
[91,104,102,106,88,0,79,104],
[115,129,103,131,126,131,0,121],
[85,95,93,93,103,106,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,102,91,108,118,95,107],
[90,0,92,94,104,99,88,89],
[108,118,0,110,124,103,115,110],
[119,116,100,0,114,107,112,104],
[102,106,86,96,0,107,87,99],
[92,111,107,103,103,0,92,97],
[115,122,95,98,123,118,0,107],
[103,121,100,106,111,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,116,115,122,128,108,85],
[86,0,105,109,107,127,98,97],
[94,105,0,120,130,123,105,100],
[95,101,90,0,139,95,101,95],
[88,103,80,71,0,113,86,88],
[82,83,87,115,97,0,87,85],
[102,112,105,109,124,123,0,136],
[125,113,110,115,122,125,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,106,112,98,99,94],
[104,0,107,110,114,109,113,105],
[107,103,0,99,101,117,100,97],
[104,100,111,0,109,104,102,111],
[98,96,109,101,0,99,97,97],
[112,101,93,106,111,0,97,94],
[111,97,110,108,113,113,0,108],
[116,105,113,99,113,116,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,110,122,105,105,103],
[100,0,114,111,101,105,110,107],
[100,96,0,84,107,107,105,93],
[100,99,126,0,122,112,107,113],
[88,109,103,88,0,106,108,92],
[105,105,103,98,104,0,101,103],
[105,100,105,103,102,109,0,95],
[107,103,117,97,118,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,114,106,111,93,126],
[95,0,123,103,98,88,84,117],
[99,87,0,95,100,105,89,123],
[96,107,115,0,98,106,85,114],
[104,112,110,112,0,116,86,126],
[99,122,105,104,94,0,109,129],
[117,126,121,125,124,101,0,127],
[84,93,87,96,84,81,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,128,89,118,103,108,96],
[105,0,105,101,104,124,106,124],
[82,105,0,91,82,90,97,97],
[121,109,119,0,118,121,126,104],
[92,106,128,92,0,130,110,128],
[107,86,120,89,80,0,91,96],
[102,104,113,84,100,119,0,100],
[114,86,113,106,82,114,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,65,48,38,48,103,63],
[136,0,96,71,96,110,92,73],
[145,114,0,64,100,48,65,66],
[162,139,146,0,166,146,139,73],
[172,114,110,44,0,48,65,73],
[162,100,162,64,162,0,75,127],
[107,118,145,71,145,135,0,107],
[147,137,144,137,137,83,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,118,115,110,110,104,115],
[104,0,111,105,108,106,105,103],
[92,99,0,101,102,106,96,101],
[95,105,109,0,106,106,101,107],
[100,102,108,104,0,107,92,108],
[100,104,104,104,103,0,97,98],
[106,105,114,109,118,113,0,115],
[95,107,109,103,102,112,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,119,104,106,112,107],
[99,0,107,97,100,99,112,93],
[103,103,0,114,101,111,121,105],
[91,113,96,0,107,101,101,107],
[106,110,109,103,0,104,104,105],
[104,111,99,109,106,0,115,105],
[98,98,89,109,106,95,0,99],
[103,117,105,103,105,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,141,104,80,56,66,107],
[120,0,157,150,139,75,106,136],
[69,53,0,51,20,20,16,64],
[106,60,159,0,73,81,91,92],
[130,71,190,137,0,125,79,159],
[154,135,190,129,85,0,84,106],
[144,104,194,119,131,126,0,145],
[103,74,146,118,51,104,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,80,77,79,118,82,65],
[120,0,105,115,102,116,94,116],
[130,105,0,102,109,98,98,76],
[133,95,108,0,104,136,87,96],
[131,108,101,106,0,132,106,106],
[92,94,112,74,78,0,93,83],
[128,116,112,123,104,117,0,94],
[145,94,134,114,104,127,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,112,109,127,109,151,84],
[91,0,112,113,129,111,85,122],
[98,98,0,84,162,111,124,111],
[101,97,126,0,182,153,119,141],
[83,81,48,28,0,84,59,37],
[101,99,99,57,126,0,74,66],
[59,125,86,91,151,136,0,120],
[126,88,99,69,173,144,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,108,129,104,107,123],
[97,0,102,105,109,94,124,108],
[105,108,0,105,108,111,123,127],
[102,105,105,0,115,101,121,126],
[81,101,102,95,0,92,108,111],
[106,116,99,109,118,0,118,117],
[103,86,87,89,102,92,0,112],
[87,102,83,84,99,93,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,115,113,103,103,106,125],
[103,0,110,110,112,112,100,119],
[95,100,0,101,107,100,106,111],
[97,100,109,0,99,112,105,106],
[107,98,103,111,0,102,111,118],
[107,98,110,98,108,0,108,107],
[104,110,104,105,99,102,0,103],
[85,91,99,104,92,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,89,90,101,91,95],
[108,0,105,92,89,108,102,110],
[111,105,0,114,108,123,111,118],
[121,118,96,0,89,117,92,107],
[120,121,102,121,0,115,104,119],
[109,102,87,93,95,0,98,101],
[119,108,99,118,106,112,0,107],
[115,100,92,103,91,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,100,97,98,107,93,90],
[122,0,108,114,109,119,102,104],
[110,102,0,104,111,97,99,90],
[113,96,106,0,123,113,108,105],
[112,101,99,87,0,108,106,99],
[103,91,113,97,102,0,115,100],
[117,108,111,102,104,95,0,104],
[120,106,120,105,111,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,107,105,98,91,97,120],
[88,0,101,107,116,92,79,113],
[103,109,0,113,109,99,107,117],
[105,103,97,0,105,105,93,123],
[112,94,101,105,0,103,91,127],
[119,118,111,105,107,0,98,137],
[113,131,103,117,119,112,0,125],
[90,97,93,87,83,73,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,92,79,103,111,70,109],
[87,0,100,84,87,121,85,98],
[118,110,0,119,108,103,129,138],
[131,126,91,0,99,97,117,140],
[107,123,102,111,0,128,106,104],
[99,89,107,113,82,0,107,100],
[140,125,81,93,104,103,0,119],
[101,112,72,70,106,110,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,104,92,64,72,78,55],
[110,0,53,125,101,115,91,122],
[106,157,0,142,102,97,89,124],
[118,85,68,0,79,92,60,103],
[146,109,108,131,0,137,121,86],
[138,95,113,118,73,0,94,120],
[132,119,121,150,89,116,0,103],
[155,88,86,107,124,90,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,96,114,103,118,109,115],
[97,0,89,125,95,104,120,106],
[114,121,0,122,107,104,122,109],
[96,85,88,0,99,102,108,96],
[107,115,103,111,0,100,109,109],
[92,106,106,108,110,0,112,114],
[101,90,88,102,101,98,0,103],
[95,104,101,114,101,96,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,110,106,127,113,105,108],
[84,0,80,87,98,96,92,96],
[100,130,0,109,119,113,111,105],
[104,123,101,0,121,112,117,116],
[83,112,91,89,0,88,88,94],
[97,114,97,98,122,0,106,97],
[105,118,99,93,122,104,0,94],
[102,114,105,94,116,113,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,94,108,112,89,102,131],
[80,0,86,83,90,77,85,101],
[116,124,0,97,105,115,108,109],
[102,127,113,0,106,107,96,120],
[98,120,105,104,0,100,113,119],
[121,133,95,103,110,0,108,123],
[108,125,102,114,97,102,0,102],
[79,109,101,90,91,87,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,120,129,69,97,112,97],
[116,0,111,136,119,97,109,109],
[90,99,0,101,89,90,98,68],
[81,74,109,0,115,107,82,136],
[141,91,121,95,0,90,93,98],
[113,113,120,103,120,0,109,118],
[98,101,112,128,117,101,0,123],
[113,101,142,74,112,92,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,107,110,120,106,98,95],
[113,0,103,105,119,122,106,93],
[103,107,0,105,102,115,101,92],
[100,105,105,0,115,92,104,94],
[90,91,108,95,0,104,88,94],
[104,88,95,118,106,0,95,103],
[112,104,109,106,122,115,0,111],
[115,117,118,116,116,107,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,102,95,106,114,104],
[98,0,92,109,105,102,108,103],
[106,118,0,105,108,110,124,123],
[108,101,105,0,98,109,106,99],
[115,105,102,112,0,99,109,122],
[104,108,100,101,111,0,118,119],
[96,102,86,104,101,92,0,110],
[106,107,87,111,88,91,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,123,116,113,112,126,103],
[94,0,108,97,94,96,120,93],
[87,102,0,112,96,97,110,93],
[94,113,98,0,97,86,106,83],
[97,116,114,113,0,109,118,96],
[98,114,113,124,101,0,121,110],
[84,90,100,104,92,89,0,91],
[107,117,117,127,114,100,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,95,117,110,98,114],
[105,0,108,121,110,117,108,111],
[100,102,0,135,117,124,113,111],
[115,89,75,0,110,121,87,107],
[93,100,93,100,0,101,87,91],
[100,93,86,89,109,0,83,79],
[112,102,97,123,123,127,0,126],
[96,99,99,103,119,131,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,112,110,112,110,105],
[106,0,102,112,105,114,105,118],
[100,108,0,122,100,114,105,109],
[98,98,88,0,114,107,97,103],
[100,105,110,96,0,111,101,109],
[98,96,96,103,99,0,92,101],
[100,105,105,113,109,118,0,104],
[105,92,101,107,101,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,127,129,125,102,113,124],
[99,0,99,100,100,89,86,97],
[83,111,0,110,97,106,88,102],
[81,110,100,0,96,90,89,104],
[85,110,113,114,0,92,98,97],
[108,121,104,120,118,0,114,110],
[97,124,122,121,112,96,0,114],
[86,113,108,106,113,100,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,104,105,102,108,104,104],
[115,0,115,114,104,120,110,113],
[106,95,0,112,108,109,105,106],
[105,96,98,0,97,97,101,106],
[108,106,102,113,0,110,102,116],
[102,90,101,113,100,0,100,99],
[106,100,105,109,108,110,0,104],
[106,97,104,104,94,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,113,99,94,111,113,103],
[92,0,100,87,89,92,97,97],
[97,110,0,101,103,101,103,92],
[111,123,109,0,111,104,107,111],
[116,121,107,99,0,107,115,103],
[99,118,109,106,103,0,102,93],
[97,113,107,103,95,108,0,98],
[107,113,118,99,107,117,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,90,84,76,125,115,86],
[133,0,99,105,96,140,137,122],
[120,111,0,131,109,126,139,93],
[126,105,79,0,117,135,147,95],
[134,114,101,93,0,123,108,112],
[85,70,84,75,87,0,111,101],
[95,73,71,63,102,99,0,109],
[124,88,117,115,98,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,93,109,94,98,79,97],
[104,0,103,95,100,99,92,87],
[117,107,0,103,97,100,100,107],
[101,115,107,0,81,109,82,102],
[116,110,113,129,0,112,115,103],
[112,111,110,101,98,0,98,97],
[131,118,110,128,95,112,0,99],
[113,123,103,108,107,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,101,112,119,110,105,120],
[97,0,86,108,107,102,85,91],
[109,124,0,109,125,116,104,112],
[98,102,101,0,111,107,84,100],
[91,103,85,99,0,103,86,102],
[100,108,94,103,107,0,86,96],
[105,125,106,126,124,124,0,115],
[90,119,98,110,108,114,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,128,108,120,120,98,106],
[83,0,111,108,96,96,96,102],
[82,99,0,100,106,98,118,90],
[102,102,110,0,108,90,108,98],
[90,114,104,102,0,113,106,101],
[90,114,112,120,97,0,104,96],
[112,114,92,102,104,106,0,84],
[104,108,120,112,109,114,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,111,108,85,118,100,50],
[94,0,97,86,129,108,93,113],
[99,113,0,107,77,87,62,55],
[102,124,103,0,113,110,80,90],
[125,81,133,97,0,113,114,107],
[92,102,123,100,97,0,82,70],
[110,117,148,130,96,128,0,84],
[160,97,155,120,103,140,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,115,95,104,102,96],
[109,0,102,116,101,112,101,106],
[104,108,0,117,96,107,101,98],
[95,94,93,0,91,101,91,91],
[115,109,114,119,0,115,99,107],
[106,98,103,109,95,0,90,98],
[108,109,109,119,111,120,0,100],
[114,104,112,119,103,112,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,108,106,102,112,123,107],
[91,0,89,86,86,100,110,98],
[102,121,0,99,109,106,124,121],
[104,124,111,0,108,84,121,132],
[108,124,101,102,0,89,121,112],
[98,110,104,126,121,0,124,130],
[87,100,86,89,89,86,0,113],
[103,112,89,78,98,80,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,89,93,110,101,94,94],
[117,0,91,94,101,105,76,102],
[121,119,0,114,127,120,96,88],
[117,116,96,0,105,86,85,128],
[100,109,83,105,0,79,106,95],
[109,105,90,124,131,0,108,122],
[116,134,114,125,104,102,0,113],
[116,108,122,82,115,88,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,97,105,118,110,106,111],
[88,0,100,95,90,101,103,105],
[113,110,0,105,106,108,106,109],
[105,115,105,0,115,103,102,117],
[92,120,104,95,0,95,111,99],
[100,109,102,107,115,0,110,109],
[104,107,104,108,99,100,0,101],
[99,105,101,93,111,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,93,92,100,108,104,79],
[106,0,95,116,103,104,99,110],
[117,115,0,109,108,117,104,100],
[118,94,101,0,105,112,115,106],
[110,107,102,105,0,107,104,79],
[102,106,93,98,103,0,104,113],
[106,111,106,95,106,106,0,99],
[131,100,110,104,131,97,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,96,108,114,109,108],
[102,0,116,99,109,115,108,96],
[99,94,0,95,105,96,97,97],
[114,111,115,0,104,112,108,106],
[102,101,105,106,0,109,100,103],
[96,95,114,98,101,0,108,98],
[101,102,113,102,110,102,0,107],
[102,114,113,104,107,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,122,108,118,112,115,106],
[106,0,120,110,112,102,104,109],
[88,90,0,96,121,100,115,100],
[102,100,114,0,126,105,117,116],
[92,98,89,84,0,94,100,96],
[98,108,110,105,116,0,114,111],
[95,106,95,93,110,96,0,104],
[104,101,110,94,114,99,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,98,101,84,93,81,82],
[126,0,116,110,98,101,93,90],
[112,94,0,112,105,95,87,91],
[109,100,98,0,105,90,84,88],
[126,112,105,105,0,94,102,90],
[117,109,115,120,116,0,106,97],
[129,117,123,126,108,104,0,113],
[128,120,119,122,120,113,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,111,105,117,111,117,111],
[90,0,95,74,104,99,98,99],
[99,115,0,82,109,104,96,100],
[105,136,128,0,122,127,105,115],
[93,106,101,88,0,102,99,100],
[99,111,106,83,108,0,115,108],
[93,112,114,105,111,95,0,106],
[99,111,110,95,110,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,106,100,115,93,116],
[109,0,127,120,114,132,104,117],
[102,83,0,112,111,101,119,117],
[104,90,98,0,107,106,80,113],
[110,96,99,103,0,130,89,101],
[95,78,109,104,80,0,95,85],
[117,106,91,130,121,115,0,121],
[94,93,93,97,109,125,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,97,106,117,102,121,111],
[110,0,106,112,116,99,112,99],
[113,104,0,116,109,110,114,114],
[104,98,94,0,103,103,113,104],
[93,94,101,107,0,104,106,99],
[108,111,100,107,106,0,113,108],
[89,98,96,97,104,97,0,100],
[99,111,96,106,111,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,103,121,106,109,110,107],
[76,0,81,95,71,102,92,92],
[107,129,0,107,104,122,118,116],
[89,115,103,0,89,113,106,93],
[104,139,106,121,0,122,127,119],
[101,108,88,97,88,0,100,98],
[100,118,92,104,83,110,0,98],
[103,118,94,117,91,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,90,101,112,112,113],
[112,0,111,93,102,105,109,119],
[108,99,0,95,94,110,110,111],
[120,117,115,0,107,125,101,122],
[109,108,116,103,0,123,112,124],
[98,105,100,85,87,0,92,95],
[98,101,100,109,98,118,0,101],
[97,91,99,88,86,115,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,103,97,97,106,100,97],
[113,0,110,106,105,113,112,94],
[107,100,0,108,95,113,105,93],
[113,104,102,0,100,111,111,89],
[113,105,115,110,0,107,108,106],
[104,97,97,99,103,0,107,96],
[110,98,105,99,102,103,0,106],
[113,116,117,121,104,114,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,99,116,123,105,117,123],
[76,0,91,102,115,98,112,125],
[111,119,0,104,123,114,124,127],
[94,108,106,0,111,103,118,116],
[87,95,87,99,0,87,112,108],
[105,112,96,107,123,0,125,119],
[93,98,86,92,98,85,0,116],
[87,85,83,94,102,91,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,81,86,90,91,87,93],
[123,0,114,114,130,112,108,97],
[129,96,0,95,113,120,110,114],
[124,96,115,0,119,109,120,126],
[120,80,97,91,0,103,112,100],
[119,98,90,101,107,0,103,130],
[123,102,100,90,98,107,0,95],
[117,113,96,84,110,80,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,120,97,88,108,120,91],
[97,0,121,97,95,98,105,96],
[90,89,0,86,85,86,110,81],
[113,113,124,0,110,116,122,101],
[122,115,125,100,0,111,131,100],
[102,112,124,94,99,0,124,112],
[90,105,100,88,79,86,0,74],
[119,114,129,109,110,98,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,97,89,91,96,91,117],
[111,0,114,107,106,106,104,123],
[113,96,0,105,110,107,105,132],
[121,103,105,0,107,101,117,107],
[119,104,100,103,0,105,103,110],
[114,104,103,109,105,0,119,133],
[119,106,105,93,107,91,0,112],
[93,87,78,103,100,77,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,119,120,91,140,122,113],
[100,0,101,115,107,116,109,90],
[91,109,0,122,93,107,135,95],
[90,95,88,0,111,101,122,107],
[119,103,117,99,0,103,116,101],
[70,94,103,109,107,0,117,83],
[88,101,75,88,94,93,0,81],
[97,120,115,103,109,127,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,107,109,110,107,113],
[106,0,113,108,95,106,108,104],
[100,97,0,102,110,101,110,115],
[103,102,108,0,102,116,112,116],
[101,115,100,108,0,101,98,108],
[100,104,109,94,109,0,98,106],
[103,102,100,98,112,112,0,107],
[97,106,95,94,102,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,105,121,100,114,113],
[108,0,117,103,116,93,106,117],
[98,93,0,95,105,88,94,107],
[105,107,115,0,122,108,105,118],
[89,94,105,88,0,94,98,105],
[110,117,122,102,116,0,107,118],
[96,104,116,105,112,103,0,111],
[97,93,103,92,105,92,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,106,62,35,102,129,164],
[81,0,148,81,81,148,148,175],
[104,62,0,131,104,125,117,152],
[148,129,79,0,148,114,129,164],
[175,129,106,62,0,141,94,129],
[108,62,85,96,69,0,163,152],
[81,62,93,81,116,47,0,97],
[46,35,58,46,81,58,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,131,121,129,117,115],
[102,0,106,92,92,95,112,119],
[109,104,0,98,116,130,109,108],
[79,118,112,0,101,103,123,104],
[89,118,94,109,0,120,123,106],
[81,115,80,107,90,0,110,115],
[93,98,101,87,87,100,0,109],
[95,91,102,106,104,95,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,84,111,112,138,116,152],
[105,0,116,163,114,125,143,87],
[126,94,0,149,74,112,103,132],
[99,47,61,0,65,119,110,88],
[98,96,136,145,0,89,108,107],
[72,85,98,91,121,0,107,112],
[94,67,107,100,102,103,0,146],
[58,123,78,122,103,98,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,113,76,99,87,86,79],
[118,0,132,105,123,111,118,93],
[97,78,0,83,112,84,86,93],
[134,105,127,0,137,112,127,119],
[111,87,98,73,0,99,88,81],
[123,99,126,98,111,0,109,78],
[124,92,124,83,122,101,0,110],
[131,117,117,91,129,132,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,114,100,95,108,101,95],
[118,0,113,100,108,112,100,109],
[96,97,0,99,94,105,109,104],
[110,110,111,0,96,112,108,99],
[115,102,116,114,0,127,106,105],
[102,98,105,98,83,0,105,86],
[109,110,101,102,104,105,0,96],
[115,101,106,111,105,124,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,121,125,104,96,119,112],
[95,0,124,94,104,105,112,104],
[89,86,0,78,92,88,90,95],
[85,116,132,0,109,87,117,98],
[106,106,118,101,0,98,111,102],
[114,105,122,123,112,0,99,97],
[91,98,120,93,99,111,0,79],
[98,106,115,112,108,113,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,101,97,130,109,91],
[109,0,121,110,106,117,106,96],
[100,89,0,93,89,102,98,89],
[109,100,117,0,121,112,110,101],
[113,104,121,89,0,115,120,115],
[80,93,108,98,95,0,105,92],
[101,104,112,100,90,105,0,92],
[119,114,121,109,95,118,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,100,114,110,113,101,115],
[91,0,102,94,103,100,108,119],
[110,108,0,106,104,106,106,104],
[96,116,104,0,110,102,97,103],
[100,107,106,100,0,106,106,99],
[97,110,104,108,104,0,100,116],
[109,102,104,113,104,110,0,113],
[95,91,106,107,111,94,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,121,108,90,139,131,115],
[99,0,141,106,98,141,115,101],
[89,69,0,95,97,119,114,83],
[102,104,115,0,111,136,107,102],
[120,112,113,99,0,130,93,104],
[71,69,91,74,80,0,91,76],
[79,95,96,103,117,119,0,94],
[95,109,127,108,106,134,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,99,107,107,111,117],
[103,0,97,110,103,118,101,111],
[107,113,0,115,104,119,111,118],
[111,100,95,0,115,97,114,129],
[103,107,106,95,0,108,99,116],
[103,92,91,113,102,0,99,104],
[99,109,99,96,111,111,0,115],
[93,99,92,81,94,106,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,104,111,103,94,111,108],
[124,0,106,120,102,107,116,103],
[106,104,0,103,107,113,115,112],
[99,90,107,0,94,105,108,94],
[107,108,103,116,0,112,115,111],
[116,103,97,105,98,0,108,102],
[99,94,95,102,95,102,0,102],
[102,107,98,116,99,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,92,96,105,89,100,110],
[113,0,101,104,110,104,95,105],
[118,109,0,102,100,101,114,104],
[114,106,108,0,102,98,95,114],
[105,100,110,108,0,95,97,104],
[121,106,109,112,115,0,103,120],
[110,115,96,115,113,107,0,106],
[100,105,106,96,106,90,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,118,106,121,110,109,100],
[101,0,107,94,106,107,103,96],
[92,103,0,96,101,95,94,94],
[104,116,114,0,113,115,99,112],
[89,104,109,97,0,104,104,100],
[100,103,115,95,106,0,114,102],
[101,107,116,111,106,96,0,110],
[110,114,116,98,110,108,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,105,110,117,98,96,109],
[135,0,110,123,96,125,157,112],
[105,100,0,96,114,139,128,132],
[100,87,114,0,115,129,142,110],
[93,114,96,95,0,102,104,95],
[112,85,71,81,108,0,108,101],
[114,53,82,68,106,102,0,100],
[101,98,78,100,115,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,91,106,99,99,88,105],
[119,0,84,96,98,94,94,106],
[119,126,0,116,106,112,100,117],
[104,114,94,0,107,112,98,104],
[111,112,104,103,0,105,85,120],
[111,116,98,98,105,0,107,119],
[122,116,110,112,125,103,0,122],
[105,104,93,106,90,91,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,107,109,111,112,107,97],
[114,0,110,118,125,109,119,104],
[103,100,0,107,112,89,100,99],
[101,92,103,0,105,98,110,106],
[99,85,98,105,0,86,99,96],
[98,101,121,112,124,0,116,101],
[103,91,110,100,111,94,0,104],
[113,106,111,104,114,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,103,111,120,109,106],
[99,0,112,101,106,105,111,108],
[95,98,0,104,94,93,88,103],
[107,109,106,0,103,102,101,111],
[99,104,116,107,0,108,99,113],
[90,105,117,108,102,0,95,109],
[101,99,122,109,111,115,0,114],
[104,102,107,99,97,101,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,92,102,108,97,101,102],
[111,0,97,117,113,106,98,121],
[118,113,0,113,103,119,97,112],
[108,93,97,0,104,98,91,110],
[102,97,107,106,0,96,109,106],
[113,104,91,112,114,0,105,111],
[109,112,113,119,101,105,0,129],
[108,89,98,100,104,99,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,94,120,97,104,96,114],
[102,0,115,118,109,93,97,114],
[116,95,0,106,109,104,97,103],
[90,92,104,0,95,101,95,104],
[113,101,101,115,0,111,110,112],
[106,117,106,109,99,0,93,117],
[114,113,113,115,100,117,0,119],
[96,96,107,106,98,93,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,105,95,103,101,81],
[107,0,107,108,92,112,107,100],
[104,103,0,105,108,119,113,99],
[105,102,105,0,93,111,97,97],
[115,118,102,117,0,115,117,110],
[107,98,91,99,95,0,102,86],
[109,103,97,113,93,108,0,96],
[129,110,111,113,100,124,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,89,100,91,108,107,98],
[107,0,87,96,82,87,83,87],
[121,123,0,103,99,99,99,91],
[110,114,107,0,101,111,110,106],
[119,128,111,109,0,119,101,114],
[102,123,111,99,91,0,83,87],
[103,127,111,100,109,127,0,113],
[112,123,119,104,96,123,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,93,106,119,120,104,95],
[100,0,94,93,94,105,103,90],
[117,116,0,109,119,116,100,102],
[104,117,101,0,102,120,110,106],
[91,116,91,108,0,114,103,102],
[90,105,94,90,96,0,103,93],
[106,107,110,100,107,107,0,104],
[115,120,108,104,108,117,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,111,119,140,97,102,83],
[79,0,129,158,95,129,102,111],
[99,81,0,105,108,119,124,91],
[91,52,105,0,98,106,100,59],
[70,115,102,112,0,112,104,78],
[113,81,91,104,98,0,98,89],
[108,108,86,110,106,112,0,78],
[127,99,119,151,132,121,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,122,99,108,112,112],
[101,0,101,119,103,106,101,104],
[105,109,0,118,107,104,119,109],
[88,91,92,0,88,85,98,95],
[111,107,103,122,0,102,112,111],
[102,104,106,125,108,0,107,103],
[98,109,91,112,98,103,0,106],
[98,106,101,115,99,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,99,83,80,71,89,98],
[117,0,86,85,94,74,51,118],
[111,124,0,97,90,94,87,89],
[127,125,113,0,108,108,80,136],
[130,116,120,102,0,88,113,117],
[139,136,116,102,122,0,90,116],
[121,159,123,130,97,120,0,127],
[112,92,121,74,93,94,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,104,102,105,99,93],
[101,0,126,109,107,99,100,105],
[101,84,0,108,102,94,102,97],
[106,101,102,0,97,101,102,99],
[108,103,108,113,0,106,99,92],
[105,111,116,109,104,0,93,91],
[111,110,108,108,111,117,0,104],
[117,105,113,111,118,119,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,97,95,101,113,98,120],
[111,0,99,106,104,113,92,119],
[113,111,0,109,104,120,104,115],
[115,104,101,0,121,104,104,112],
[109,106,106,89,0,106,93,114],
[97,97,90,106,104,0,109,98],
[112,118,106,106,117,101,0,119],
[90,91,95,98,96,112,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,126,110,113,99,88,112],
[102,0,121,98,107,109,97,114],
[84,89,0,87,78,83,91,97],
[100,112,123,0,110,105,108,114],
[97,103,132,100,0,107,109,117],
[111,101,127,105,103,0,103,108],
[122,113,119,102,101,107,0,131],
[98,96,113,96,93,102,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,114,110,109,108,108,105],
[101,0,111,93,98,111,118,101],
[96,99,0,95,90,98,90,87],
[100,117,115,0,109,110,115,109],
[101,112,120,101,0,98,113,93],
[102,99,112,100,112,0,109,110],
[102,92,120,95,97,101,0,96],
[105,109,123,101,117,100,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,126,119,114,115,112,104],
[101,0,112,108,114,107,110,106],
[84,98,0,109,99,107,104,99],
[91,102,101,0,95,97,114,105],
[96,96,111,115,0,105,109,112],
[95,103,103,113,105,0,101,100],
[98,100,106,96,101,109,0,103],
[106,104,111,105,98,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,74,105,115,87,79,145],
[104,0,77,129,98,98,105,146],
[136,133,0,141,105,101,126,143],
[105,81,69,0,92,99,103,115],
[95,112,105,118,0,107,98,132],
[123,112,109,111,103,0,91,122],
[131,105,84,107,112,119,0,123],
[65,64,67,95,78,88,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,117,116,105,111,95],
[106,0,110,111,101,100,95,101],
[98,100,0,120,115,86,87,102],
[93,99,90,0,105,87,95,90],
[94,109,95,105,0,90,93,104],
[105,110,124,123,120,0,114,107],
[99,115,123,115,117,96,0,107],
[115,109,108,120,106,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,120,111,105,110,118,118],
[102,0,114,108,105,110,121,108],
[90,96,0,100,96,92,107,103],
[99,102,110,0,98,91,109,102],
[105,105,114,112,0,99,120,111],
[100,100,118,119,111,0,123,108],
[92,89,103,101,90,87,0,102],
[92,102,107,108,99,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,95,96,114,118,93,119],
[111,0,105,110,94,154,87,97],
[115,105,0,121,127,123,118,162],
[114,100,89,0,123,126,85,120],
[96,116,83,87,0,138,72,85],
[92,56,87,84,72,0,72,102],
[117,123,92,125,138,138,0,133],
[91,113,48,90,125,108,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,93,82,76,98,102,105],
[134,0,118,109,105,100,86,95],
[117,92,0,64,66,74,93,98],
[128,101,146,0,86,112,115,116],
[134,105,144,124,0,114,129,107],
[112,110,136,98,96,0,107,102],
[108,124,117,95,81,103,0,100],
[105,115,112,94,103,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,100,99,108,108,108,119],
[93,0,112,87,96,102,116,114],
[110,98,0,100,88,105,121,104],
[111,123,110,0,100,105,118,116],
[102,114,122,110,0,124,111,104],
[102,108,105,105,86,0,111,115],
[102,94,89,92,99,99,0,94],
[91,96,106,94,106,95,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,101,88,102,96,104,91],
[91,0,110,78,92,86,67,71],
[109,100,0,92,106,110,92,79],
[122,132,118,0,115,119,102,118],
[108,118,104,95,0,112,62,92],
[114,124,100,91,98,0,77,100],
[106,143,118,108,148,133,0,83],
[119,139,131,92,118,110,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,88,128,94,115,107,103],
[107,0,93,110,100,94,113,120],
[122,117,0,122,108,91,96,119],
[82,100,88,0,95,112,111,121],
[116,110,102,115,0,93,119,118],
[95,116,119,98,117,0,118,112],
[103,97,114,99,91,92,0,98],
[107,90,91,89,92,98,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,141,157,132,110,114,101],
[92,0,112,118,85,49,126,117],
[69,98,0,97,112,107,79,143],
[53,92,113,0,89,72,122,122],
[78,125,98,121,0,93,122,133],
[100,161,103,138,117,0,123,108],
[96,84,131,88,88,87,0,117],
[109,93,67,88,77,102,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,100,105,103,107,94,92],
[105,0,101,109,103,115,109,105],
[110,109,0,108,98,116,113,104],
[105,101,102,0,101,103,99,103],
[107,107,112,109,0,127,112,101],
[103,95,94,107,83,0,101,92],
[116,101,97,111,98,109,0,117],
[118,105,106,107,109,118,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,108,122,105,120,102,123],
[93,0,104,119,92,113,99,108],
[102,106,0,109,103,117,124,119],
[88,91,101,0,92,105,96,105],
[105,118,107,118,0,123,114,126],
[90,97,93,105,87,0,90,99],
[108,111,86,114,96,120,0,108],
[87,102,91,105,84,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,102,100,104,113,104,101],
[121,0,92,104,107,106,113,97],
[108,118,0,106,111,108,111,98],
[110,106,104,0,112,117,112,116],
[106,103,99,98,0,108,114,110],
[97,104,102,93,102,0,99,96],
[106,97,99,98,96,111,0,98],
[109,113,112,94,100,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,109,101,90,100,98,93],
[116,0,121,106,112,110,112,102],
[101,89,0,91,94,102,109,102],
[109,104,119,0,101,104,117,99],
[120,98,116,109,0,114,111,107],
[110,100,108,106,96,0,108,110],
[112,98,101,93,99,102,0,99],
[117,108,108,111,103,100,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,144,109,103,87,138,148],
[126,0,141,100,97,100,145,137],
[66,69,0,108,109,106,106,120],
[101,110,102,0,90,58,98,154],
[107,113,101,120,0,108,108,145],
[123,110,104,152,102,0,126,152],
[72,65,104,112,102,84,0,109],
[62,73,90,56,65,58,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,98,107,114,99,96,106],
[119,0,95,120,100,112,111,131],
[112,115,0,93,111,112,113,115],
[103,90,117,0,96,107,113,118],
[96,110,99,114,0,109,99,135],
[111,98,98,103,101,0,104,107],
[114,99,97,97,111,106,0,122],
[104,79,95,92,75,103,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,82,98,100,80,102,116],
[119,0,73,105,124,123,102,105],
[128,137,0,135,130,121,93,138],
[112,105,75,0,116,104,82,108],
[110,86,80,94,0,113,87,89],
[130,87,89,106,97,0,97,118],
[108,108,117,128,123,113,0,105],
[94,105,72,102,121,92,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,146,97,131,115,127],
[97,0,114,114,118,97,87,114],
[98,96,0,102,118,121,83,63],
[64,96,108,0,112,81,59,118],
[113,92,92,98,0,118,91,117],
[79,113,89,129,92,0,83,115],
[95,123,127,151,119,127,0,134],
[83,96,147,92,93,95,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,99,95,102,108,87],
[106,0,91,97,108,83,115,102],
[104,119,0,109,111,107,100,106],
[111,113,101,0,111,103,111,99],
[115,102,99,99,0,103,113,107],
[108,127,103,107,107,0,105,113],
[102,95,110,99,97,105,0,98],
[123,108,104,111,103,97,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,118,110,112,98,104,99],
[108,0,117,112,119,100,105,104],
[92,93,0,105,107,92,99,99],
[100,98,105,0,112,90,89,89],
[98,91,103,98,0,87,90,83],
[112,110,118,120,123,0,101,108],
[106,105,111,121,120,109,0,112],
[111,106,111,121,127,102,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,84,103,97,115,95,116],
[119,0,111,104,120,105,116,106],
[126,99,0,107,101,108,103,121],
[107,106,103,0,112,117,103,124],
[113,90,109,98,0,105,105,120],
[95,105,102,93,105,0,94,119],
[115,94,107,107,105,116,0,114],
[94,104,89,86,90,91,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,113,114,85,123,103,133],
[73,0,92,112,70,97,95,152],
[97,118,0,140,101,129,86,137],
[96,98,70,0,88,94,91,137],
[125,140,109,122,0,99,111,136],
[87,113,81,116,111,0,83,141],
[107,115,124,119,99,127,0,182],
[77,58,73,73,74,69,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,104,101,105,95,104],
[106,0,120,114,107,103,117,105],
[101,90,0,107,102,102,101,98],
[106,96,103,0,84,92,100,108],
[109,103,108,126,0,112,119,107],
[105,107,108,118,98,0,104,109],
[115,93,109,110,91,106,0,101],
[106,105,112,102,103,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,79,107,98,102,96],
[112,0,117,100,111,121,101,105],
[104,93,0,94,112,102,96,94],
[131,110,116,0,113,117,122,95],
[103,99,98,97,0,101,103,86],
[112,89,108,93,109,0,103,96],
[108,109,114,88,107,107,0,107],
[114,105,116,115,124,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,123,91,100,115,92,96],
[114,0,109,132,98,124,115,113],
[87,101,0,133,93,140,94,135],
[119,78,77,0,103,89,91,102],
[110,112,117,107,0,136,120,95],
[95,86,70,121,74,0,80,98],
[118,95,116,119,90,130,0,117],
[114,97,75,108,115,112,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,117,108,111,115,103],
[100,0,104,109,105,122,106,91],
[102,106,0,104,109,123,125,110],
[93,101,106,0,96,116,116,91],
[102,105,101,114,0,122,106,93],
[99,88,87,94,88,0,106,91],
[95,104,85,94,104,104,0,90],
[107,119,100,119,117,119,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,113,108,96,116,96,95],
[99,0,108,101,102,110,99,108],
[97,102,0,101,94,113,99,101],
[102,109,109,0,97,113,105,97],
[114,108,116,113,0,121,99,108],
[94,100,97,97,89,0,92,86],
[114,111,111,105,111,118,0,108],
[115,102,109,113,102,124,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,116,92,116,107,113],
[106,0,87,105,101,102,108,115],
[104,123,0,114,119,110,111,129],
[94,105,96,0,92,106,100,108],
[118,109,91,118,0,115,109,119],
[94,108,100,104,95,0,109,114],
[103,102,99,110,101,101,0,120],
[97,95,81,102,91,96,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,105,117,109,109,113,109],
[89,0,99,110,82,99,105,99],
[105,111,0,116,91,119,115,114],
[93,100,94,0,82,104,110,109],
[101,128,119,128,0,124,120,114],
[101,111,91,106,86,0,107,101],
[97,105,95,100,90,103,0,99],
[101,111,96,101,96,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,105,112,111,100,111,105],
[118,0,104,109,115,109,107,109],
[105,106,0,102,116,116,113,119],
[98,101,108,0,100,94,92,112],
[99,95,94,110,0,99,103,103],
[110,101,94,116,111,0,112,104],
[99,103,97,118,107,98,0,112],
[105,101,91,98,107,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,107,96,96,94,98],
[102,0,117,112,98,102,96,112],
[101,93,0,118,91,101,97,102],
[103,98,92,0,88,96,94,94],
[114,112,119,122,0,103,106,113],
[114,108,109,114,107,0,97,99],
[116,114,113,116,104,113,0,104],
[112,98,108,116,97,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,104,103,92,88,96,115],
[115,0,117,110,110,119,118,103],
[106,93,0,101,99,61,115,79],
[107,100,109,0,112,96,102,98],
[118,100,111,98,0,118,106,91],
[122,91,149,114,92,0,131,118],
[114,92,95,108,104,79,0,100],
[95,107,131,112,119,92,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,104,100,90,101,103],
[110,0,104,109,114,103,115,108],
[101,106,0,107,98,89,103,100],
[106,101,103,0,97,98,106,102],
[110,96,112,113,0,106,106,107],
[120,107,121,112,104,0,112,113],
[109,95,107,104,104,98,0,96],
[107,102,110,108,103,97,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,83,92,83,112,105,86],
[105,0,92,107,81,114,106,95],
[127,118,0,106,93,137,120,107],
[118,103,104,0,112,120,113,117],
[127,129,117,98,0,141,121,107],
[98,96,73,90,69,0,91,94],
[105,104,90,97,89,119,0,88],
[124,115,103,93,103,116,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,102,109,116,111,93,106],
[119,0,111,125,129,129,116,97],
[108,99,0,107,104,113,115,110],
[101,85,103,0,122,107,92,92],
[94,81,106,88,0,107,98,100],
[99,81,97,103,103,0,91,82],
[117,94,95,118,112,119,0,105],
[104,113,100,118,110,128,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,108,108,120,100,110,96],
[85,0,95,86,103,80,82,89],
[102,115,0,98,111,89,91,84],
[102,124,112,0,116,105,109,93],
[90,107,99,94,0,82,91,91],
[110,130,121,105,128,0,121,102],
[100,128,119,101,119,89,0,106],
[114,121,126,117,119,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,115,117,112,109,124,116],
[106,0,107,106,105,99,113,116],
[95,103,0,117,100,90,110,104],
[93,104,93,0,96,95,112,101],
[98,105,110,114,0,94,113,108],
[101,111,120,115,116,0,130,120],
[86,97,100,98,97,80,0,101],
[94,94,106,109,102,90,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,105,115,101,91,112,123],
[102,0,111,116,103,92,106,116],
[105,99,0,103,90,93,97,110],
[95,94,107,0,79,83,102,140],
[109,107,120,131,0,105,131,133],
[119,118,117,127,105,0,131,134],
[98,104,113,108,79,79,0,116],
[87,94,100,70,77,76,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,135,104,100,104,115,117],
[101,0,110,108,106,102,112,117],
[75,100,0,103,92,88,104,108],
[106,102,107,0,98,100,109,115],
[110,104,118,112,0,106,116,116],
[106,108,122,110,104,0,112,119],
[95,98,106,101,94,98,0,110],
[93,93,102,95,94,91,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,109,99,108,103,98],
[109,0,119,112,108,115,105,102],
[97,91,0,104,100,108,95,98],
[101,98,106,0,101,96,102,97],
[111,102,110,109,0,115,101,105],
[102,95,102,114,95,0,97,107],
[107,105,115,108,109,113,0,100],
[112,108,112,113,105,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,102,99,120,107,104,119],
[115,0,106,105,114,108,105,110],
[108,104,0,111,121,107,102,114],
[111,105,99,0,110,106,107,117],
[90,96,89,100,0,91,86,100],
[103,102,103,104,119,0,86,114],
[106,105,108,103,124,124,0,117],
[91,100,96,93,110,96,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,113,118,108,127,96,99],
[111,0,117,118,100,117,108,107],
[97,93,0,99,106,115,102,100],
[92,92,111,0,95,115,97,102],
[102,110,104,115,0,122,107,97],
[83,93,95,95,88,0,89,84],
[114,102,108,113,103,121,0,101],
[111,103,110,108,113,126,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,97,114,103,101,108],
[111,0,107,99,115,107,118,113],
[109,103,0,117,109,114,114,120],
[113,111,93,0,109,93,100,111],
[96,95,101,101,0,103,87,114],
[107,103,96,117,107,0,98,118],
[109,92,96,110,123,112,0,115],
[102,97,90,99,96,92,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,101,102,102,105,107],
[100,0,105,102,95,99,106,98],
[100,105,0,111,113,99,106,102],
[109,108,99,0,95,108,106,107],
[108,115,97,115,0,112,99,95],
[108,111,111,102,98,0,116,102],
[105,104,104,104,111,94,0,108],
[103,112,108,103,115,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,112,125,114,117,116,95],
[91,0,108,112,119,112,102,108],
[98,102,0,108,111,108,93,87],
[85,98,102,0,116,94,97,95],
[96,91,99,94,0,100,103,86],
[93,98,102,116,110,0,92,93],
[94,108,117,113,107,118,0,97],
[115,102,123,115,124,117,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,124,194,106,149,194,102],
[47,0,90,103,47,47,95,133],
[86,120,0,131,122,153,167,127],
[16,107,79,0,95,83,95,46],
[104,163,88,115,0,171,152,102],
[61,163,57,127,39,0,127,102],
[16,115,43,115,58,83,0,54],
[108,77,83,164,108,108,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,110,110,112,99,108],
[103,0,106,104,114,118,105,105],
[110,104,0,107,114,111,100,117],
[100,106,103,0,117,99,101,106],
[100,96,96,93,0,109,93,105],
[98,92,99,111,101,0,93,109],
[111,105,110,109,117,117,0,115],
[102,105,93,104,105,101,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,92,99,104,106,101,97],
[114,0,98,102,103,113,100,105],
[118,112,0,108,106,107,103,113],
[111,108,102,0,107,106,113,108],
[106,107,104,103,0,108,97,96],
[104,97,103,104,102,0,98,107],
[109,110,107,97,113,112,0,108],
[113,105,97,102,114,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,119,101,100,105,96,94],
[106,0,125,102,98,118,93,106],
[91,85,0,106,128,120,76,116],
[109,108,104,0,99,112,92,72],
[110,112,82,111,0,89,93,61],
[105,92,90,98,121,0,96,103],
[114,117,134,118,117,114,0,95],
[116,104,94,138,149,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,68,69,91,92,96],
[103,0,91,88,81,91,84,104],
[101,119,0,106,95,91,108,111],
[142,122,104,0,104,113,86,121],
[141,129,115,106,0,98,114,127],
[119,119,119,97,112,0,117,108],
[118,126,102,124,96,93,0,122],
[114,106,99,89,83,102,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,114,107,93,112,113],
[106,0,104,115,103,115,115,104],
[101,106,0,106,106,100,103,98],
[96,95,104,0,105,109,107,97],
[103,107,104,105,0,103,105,104],
[117,95,110,101,107,0,104,107],
[98,95,107,103,105,106,0,100],
[97,106,112,113,106,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,128,98,103,99,99,98],
[94,0,92,103,117,105,84,94],
[82,118,0,94,111,101,118,105],
[112,107,116,0,98,127,104,107],
[107,93,99,112,0,116,106,100],
[111,105,109,83,94,0,95,109],
[111,126,92,106,104,115,0,118],
[112,116,105,103,110,101,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,108,103,107,106,109],
[104,0,114,104,103,110,107,97],
[105,96,0,98,104,101,102,94],
[102,106,112,0,103,110,101,94],
[107,107,106,107,0,115,98,102],
[103,100,109,100,95,0,97,92],
[104,103,108,109,112,113,0,113],
[101,113,116,116,108,118,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,106,98,86,113,89,118],
[133,0,112,104,109,96,93,93],
[104,98,0,76,85,87,70,76],
[112,106,134,0,82,92,92,111],
[124,101,125,128,0,125,93,111],
[97,114,123,118,85,0,120,136],
[121,117,140,118,117,90,0,122],
[92,117,134,99,99,74,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,133,83,103,93,104,94],
[89,0,101,77,95,107,109,97],
[77,109,0,112,120,101,130,89],
[127,133,98,0,105,116,121,114],
[107,115,90,105,0,101,131,60],
[117,103,109,94,109,0,128,117],
[106,101,80,89,79,82,0,84],
[116,113,121,96,150,93,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,114,116,102,121,118,103],
[83,0,104,122,107,113,107,116],
[96,106,0,116,97,106,102,107],
[94,88,94,0,100,104,103,102],
[108,103,113,110,0,96,113,104],
[89,97,104,106,114,0,103,101],
[92,103,108,107,97,107,0,106],
[107,94,103,108,106,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,107,105,103,108,121],
[107,0,98,86,91,119,113,102],
[100,112,0,94,104,102,117,105],
[103,124,116,0,102,91,99,108],
[105,119,106,108,0,104,111,134],
[107,91,108,119,106,0,94,111],
[102,97,93,111,99,116,0,111],
[89,108,105,102,76,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,94,42,78,98,76,115],
[79,0,73,73,111,105,59,142],
[116,137,0,96,149,130,101,163],
[168,137,114,0,112,91,106,173],
[132,99,61,98,0,107,105,105],
[112,105,80,119,103,0,114,159],
[134,151,109,104,105,96,0,186],
[95,68,47,37,105,51,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,94,106,113,99,121,102],
[101,0,97,103,96,102,99,97],
[116,113,0,110,128,109,119,98],
[104,107,100,0,118,106,116,106],
[97,114,82,92,0,103,116,101],
[111,108,101,104,107,0,118,98],
[89,111,91,94,94,92,0,93],
[108,113,112,104,109,112,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,115,103,102,105,107,106],
[111,0,117,106,112,110,102,113],
[95,93,0,95,96,100,101,99],
[107,104,115,0,126,98,121,107],
[108,98,114,84,0,97,98,99],
[105,100,110,112,113,0,110,115],
[103,108,109,89,112,100,0,90],
[104,97,111,103,111,95,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,126,122,137,105,126,140],
[69,0,104,88,101,63,96,78],
[84,106,0,110,112,93,84,104],
[88,122,100,0,96,89,93,96],
[73,109,98,114,0,84,104,103],
[105,147,117,121,126,0,121,146],
[84,114,126,117,106,89,0,135],
[70,132,106,114,107,64,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,85,148,132,119,129,142],
[78,0,85,101,72,90,108,117],
[125,125,0,117,119,102,124,145],
[62,109,93,0,79,66,99,100],
[78,138,91,131,0,93,123,136],
[91,120,108,144,117,0,122,138],
[81,102,86,111,87,88,0,103],
[68,93,65,110,74,72,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,109,137,101,134,151,152],
[123,0,146,193,122,105,162,210],
[101,64,0,140,101,90,124,178],
[73,17,70,0,74,90,97,148],
[109,88,109,136,0,122,156,179],
[76,105,120,120,88,0,128,151],
[59,48,86,113,54,82,0,103],
[58,0,32,62,31,59,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,92,91,97,110,92,123],
[121,0,95,89,101,117,118,103],
[118,115,0,105,119,118,98,121],
[119,121,105,0,113,114,99,115],
[113,109,91,97,0,144,80,128],
[100,93,92,96,66,0,80,89],
[118,92,112,111,130,130,0,121],
[87,107,89,95,82,121,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,106,119,109,105,109],
[105,0,104,112,114,94,101,86],
[102,106,0,117,101,100,101,109],
[104,98,93,0,108,97,91,91],
[91,96,109,102,0,108,95,93],
[101,116,110,113,102,0,94,101],
[105,109,109,119,115,116,0,109],
[101,124,101,119,117,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,101,88,93,102,86,102],
[123,0,104,108,118,108,109,108],
[109,106,0,98,107,108,116,112],
[122,102,112,0,103,112,110,112],
[117,92,103,107,0,109,105,103],
[108,102,102,98,101,0,98,102],
[124,101,94,100,105,112,0,105],
[108,102,98,98,107,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,108,122,131,108,101,119],
[81,0,103,128,129,123,94,122],
[102,107,0,105,123,117,102,119],
[88,82,105,0,97,82,86,103],
[79,81,87,113,0,87,86,93],
[102,87,93,128,123,0,106,104],
[109,116,108,124,124,104,0,118],
[91,88,91,107,117,106,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,100,128,96,108,109,110],
[99,0,95,108,86,106,103,93],
[110,115,0,119,95,108,99,92],
[82,102,91,0,88,104,98,84],
[114,124,115,122,0,111,114,105],
[102,104,102,106,99,0,101,95],
[101,107,111,112,96,109,0,113],
[100,117,118,126,105,115,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,131,98,116,91,115,109],
[91,0,103,99,104,84,106,98],
[79,107,0,82,89,84,88,89],
[112,111,128,0,109,109,99,102],
[94,106,121,101,0,90,110,82],
[119,126,126,101,120,0,107,113],
[95,104,122,111,100,103,0,94],
[101,112,121,108,128,97,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,113,107,82,89,94],
[100,0,70,92,103,86,100,82],
[106,140,0,118,115,111,116,105],
[97,118,92,0,94,80,75,90],
[103,107,95,116,0,96,107,99],
[128,124,99,130,114,0,96,112],
[121,110,94,135,103,114,0,104],
[116,128,105,120,111,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,117,100,106,100,108],
[111,0,114,116,107,107,105,98],
[105,96,0,110,97,107,91,91],
[93,94,100,0,96,104,80,101],
[110,103,113,114,0,112,105,114],
[104,103,103,106,98,0,89,90],
[110,105,119,130,105,121,0,112],
[102,112,119,109,96,120,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,97,104,100,95,101],
[108,0,108,101,113,110,97,108],
[100,102,0,105,99,114,102,99],
[113,109,105,0,111,124,109,113],
[106,97,111,99,0,109,101,108],
[110,100,96,86,101,0,98,100],
[115,113,108,101,109,112,0,105],
[109,102,111,97,102,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,93,85,66,75,80,81],
[117,0,115,102,113,100,100,110],
[117,95,0,100,67,80,82,106],
[125,108,110,0,88,85,102,91],
[144,97,143,122,0,95,113,120],
[135,110,130,125,115,0,98,103],
[130,110,128,108,97,112,0,117],
[129,100,104,119,90,107,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,94,117,110,125,127],
[97,0,126,109,106,113,106,124],
[99,84,0,97,103,92,104,123],
[116,101,113,0,111,107,102,135],
[93,104,107,99,0,93,99,127],
[100,97,118,103,117,0,100,128],
[85,104,106,108,111,110,0,138],
[83,86,87,75,83,82,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,106,103,105,99,97],
[101,0,94,97,103,113,109,97],
[101,116,0,111,113,108,110,108],
[104,113,99,0,120,106,108,97],
[107,107,97,90,0,119,107,99],
[105,97,102,104,91,0,89,98],
[111,101,100,102,103,121,0,107],
[113,113,102,113,111,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,108,105,92,93,98],
[105,0,104,101,110,97,114,108],
[109,106,0,101,95,86,87,102],
[102,109,109,0,104,104,105,107],
[105,100,115,106,0,98,108,107],
[118,113,124,106,112,0,105,120],
[117,96,123,105,102,105,0,110],
[112,102,108,103,103,90,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,114,93,96,92,106,96],
[105,0,112,106,102,106,117,101],
[96,98,0,90,106,101,107,103],
[117,104,120,0,103,97,112,107],
[114,108,104,107,0,100,111,108],
[118,104,109,113,110,0,111,109],
[104,93,103,98,99,99,0,94],
[114,109,107,103,102,101,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,101,88,144,102,101,127],
[98,0,115,79,119,115,112,101],
[109,95,0,73,103,91,94,100],
[122,131,137,0,159,123,105,115],
[66,91,107,51,0,92,80,107],
[108,95,119,87,118,0,85,105],
[109,98,116,105,130,125,0,104],
[83,109,110,95,103,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,118,106,107,119,110,103],
[110,0,107,121,104,114,103,105],
[92,103,0,105,106,100,104,94],
[104,89,105,0,115,106,105,100],
[103,106,104,95,0,107,95,110],
[91,96,110,104,103,0,101,92],
[100,107,106,105,115,109,0,101],
[107,105,116,110,100,118,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,104,103,106,105,107],
[104,0,117,106,98,103,108,100],
[101,93,0,99,100,106,100,106],
[106,104,111,0,103,113,103,98],
[107,112,110,107,0,104,107,100],
[104,107,104,97,106,0,97,104],
[105,102,110,107,103,113,0,101],
[103,110,104,112,110,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,87,104,105,113,91,116],
[108,0,89,104,108,100,94,99],
[123,121,0,104,106,94,98,111],
[106,106,106,0,120,105,105,104],
[105,102,104,90,0,94,87,104],
[97,110,116,105,116,0,94,88],
[119,116,112,105,123,116,0,100],
[94,111,99,106,106,122,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,140,151,104,140,151,135],
[87,0,98,120,135,115,109,109],
[70,112,0,114,134,131,130,135],
[59,90,96,0,132,103,89,109],
[106,75,76,78,0,98,101,97],
[70,95,79,107,112,0,97,106],
[59,101,80,121,109,113,0,119],
[75,101,75,101,113,104,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,97,99,95,98,93,90],
[114,0,112,104,113,108,107,99],
[113,98,0,103,106,103,109,96],
[111,106,107,0,100,114,105,102],
[115,97,104,110,0,107,100,100],
[112,102,107,96,103,0,101,101],
[117,103,101,105,110,109,0,105],
[120,111,114,108,110,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,90,112,108,106,129,144],
[94,0,110,99,101,71,116,89],
[120,100,0,106,106,104,119,108],
[98,111,104,0,100,93,112,115],
[102,109,104,110,0,112,109,106],
[104,139,106,117,98,0,107,121],
[81,94,91,98,101,103,0,93],
[66,121,102,95,104,89,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,116,109,103,107,111,108],
[90,0,104,95,103,88,98,118],
[94,106,0,103,98,94,104,107],
[101,115,107,0,106,97,103,122],
[107,107,112,104,0,102,108,114],
[103,122,116,113,108,0,112,114],
[99,112,106,107,102,98,0,116],
[102,92,103,88,96,96,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,98,104,102,78,95,87],
[120,0,83,108,117,91,119,83],
[112,127,0,95,107,109,109,113],
[106,102,115,0,106,96,105,93],
[108,93,103,104,0,88,113,85],
[132,119,101,114,122,0,118,120],
[115,91,101,105,97,92,0,84],
[123,127,97,117,125,90,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,100,103,115,64,95,99],
[110,0,115,130,120,93,125,99],
[110,95,0,108,101,109,83,100],
[107,80,102,0,89,57,97,112],
[95,90,109,121,0,63,101,110],
[146,117,101,153,147,0,105,133],
[115,85,127,113,109,105,0,117],
[111,111,110,98,100,77,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,110,114,115,113,105],
[103,0,98,113,106,110,111,98],
[105,112,0,113,123,106,103,114],
[100,97,97,0,120,111,106,104],
[96,104,87,90,0,104,86,90],
[95,100,104,99,106,0,106,99],
[97,99,107,104,124,104,0,88],
[105,112,96,106,120,111,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,115,107,114,118,116,115],
[109,0,107,123,110,112,105,113],
[95,103,0,110,119,109,116,110],
[103,87,100,0,110,111,96,115],
[96,100,91,100,0,106,101,109],
[92,98,101,99,104,0,88,103],
[94,105,94,114,109,122,0,106],
[95,97,100,95,101,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,97,124,129,125,92],
[98,0,111,111,103,101,97,89],
[106,99,0,108,123,100,144,106],
[113,99,102,0,108,95,130,89],
[86,107,87,102,0,77,124,69],
[81,109,110,115,133,0,124,92],
[85,113,66,80,86,86,0,83],
[118,121,104,121,141,118,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,80,94,79,103,116,101],
[105,0,95,103,94,99,134,111],
[130,115,0,92,79,113,152,104],
[116,107,118,0,106,105,106,101],
[131,116,131,104,0,128,140,119],
[107,111,97,105,82,0,111,111],
[94,76,58,104,70,99,0,82],
[109,99,106,109,91,99,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,105,127,115,117,104,103],
[94,0,104,108,105,106,106,109],
[105,106,0,127,105,111,106,115],
[83,102,83,0,96,90,97,107],
[95,105,105,114,0,108,110,104],
[93,104,99,120,102,0,106,100],
[106,104,104,113,100,104,0,107],
[107,101,95,103,106,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,86,98,94,99,102,99],
[109,0,107,107,97,120,103,100],
[124,103,0,109,111,117,99,99],
[112,103,101,0,115,123,106,97],
[116,113,99,95,0,121,94,114],
[111,90,93,87,89,0,78,101],
[108,107,111,104,116,132,0,115],
[111,110,111,113,96,109,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,116,106,105,108,108],
[103,0,109,116,102,108,101,98],
[109,101,0,110,112,93,102,94],
[94,94,100,0,102,98,100,104],
[104,108,98,108,0,105,107,108],
[105,102,117,112,105,0,99,102],
[102,109,108,110,103,111,0,90],
[102,112,116,106,102,108,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,74,108,123,124,89,89],
[118,0,103,106,124,96,84,124],
[136,107,0,82,96,112,114,121],
[102,104,128,0,108,114,122,106],
[87,86,114,102,0,93,123,83],
[86,114,98,96,117,0,127,91],
[121,126,96,88,87,83,0,95],
[121,86,89,104,127,119,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,98,100,92,97,95,95],
[116,0,109,103,103,110,104,108],
[112,101,0,108,105,103,107,102],
[110,107,102,0,101,111,106,105],
[118,107,105,109,0,106,109,105],
[113,100,107,99,104,0,104,105],
[115,106,103,104,101,106,0,112],
[115,102,108,105,105,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,92,107,103,110,89],
[106,0,106,84,92,103,79,83],
[100,104,0,93,100,88,100,89],
[118,126,117,0,109,106,119,103],
[103,118,110,101,0,104,112,107],
[107,107,122,104,106,0,117,109],
[100,131,110,91,98,93,0,87],
[121,127,121,107,103,101,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,104,109,99,97,110],
[112,0,111,99,105,105,108,112],
[111,99,0,102,98,103,96,109],
[106,111,108,0,109,103,98,110],
[101,105,112,101,0,106,109,106],
[111,105,107,107,104,0,100,118],
[113,102,114,112,101,110,0,112],
[100,98,101,100,104,92,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,114,131,60,102,84,80],
[118,0,128,154,104,107,127,137],
[96,82,0,141,110,95,102,116],
[79,56,69,0,78,84,56,78],
[150,106,100,132,0,114,131,118],
[108,103,115,126,96,0,78,100],
[126,83,108,154,79,132,0,123],
[130,73,94,132,92,110,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,72,84,65,80,95,85],
[124,0,63,94,86,78,96,107],
[138,147,0,97,87,102,112,129],
[126,116,113,0,87,106,104,131],
[145,124,123,123,0,98,110,142],
[130,132,108,104,112,0,108,127],
[115,114,98,106,100,102,0,122],
[125,103,81,79,68,83,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,116,106,109,113,101,99],
[84,0,97,93,99,91,85,88],
[94,113,0,94,106,96,96,88],
[104,117,116,0,121,109,99,116],
[101,111,104,89,0,100,98,93],
[97,119,114,101,110,0,105,98],
[109,125,114,111,112,105,0,97],
[111,122,122,94,117,112,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,152,121,97,152,120,152],
[114,0,99,115,139,81,178,182],
[58,111,0,74,135,58,126,135],
[89,95,136,0,102,147,129,147],
[113,71,75,108,0,108,85,146],
[58,129,152,63,102,0,101,153],
[90,32,84,81,125,109,0,126],
[58,28,75,63,64,57,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,96,94,121,105,103,107],
[112,0,106,97,127,99,99,109],
[114,104,0,106,116,93,100,107],
[116,113,104,0,132,86,104,108],
[89,83,94,78,0,85,88,95],
[105,111,117,124,125,0,107,112],
[107,111,110,106,122,103,0,109],
[103,101,103,102,115,98,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,119,132,107,145,153,84],
[75,0,68,72,48,108,94,73],
[91,142,0,132,97,159,150,99],
[78,138,78,0,68,157,139,74],
[103,162,113,142,0,149,140,144],
[65,102,51,53,61,0,126,71],
[57,116,60,71,70,84,0,71],
[126,137,111,136,66,139,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,50,22,66,66,98,88],
[117,0,117,92,123,98,98,145],
[160,93,0,103,163,163,98,98],
[188,118,107,0,188,188,98,145],
[144,87,47,22,0,70,98,85],
[144,112,47,22,140,0,98,47],
[112,112,112,112,112,112,0,47],
[122,65,112,65,125,163,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,112,76,87,129,79,54],
[135,0,146,171,105,145,129,129],
[98,64,0,89,94,106,104,87],
[134,39,121,0,112,99,105,105],
[123,105,116,98,0,133,124,87],
[81,65,104,111,77,0,99,96],
[131,81,106,105,86,111,0,89],
[156,81,123,105,123,114,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,79,82,93,85,98,101],
[116,0,82,105,108,104,123,114],
[131,128,0,97,101,117,113,130],
[128,105,113,0,113,113,118,124],
[117,102,109,97,0,97,105,128],
[125,106,93,97,113,0,120,125],
[112,87,97,92,105,90,0,108],
[109,96,80,86,82,85,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,101,106,106,107,103,105],
[90,0,99,93,102,98,103,111],
[109,111,0,105,114,110,111,120],
[104,117,105,0,110,98,109,112],
[104,108,96,100,0,96,99,107],
[103,112,100,112,114,0,110,123],
[107,107,99,101,111,100,0,120],
[105,99,90,98,103,87,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,133,102,100,104,110,97],
[90,0,113,74,70,78,114,64],
[77,97,0,62,99,88,97,124],
[108,136,148,0,130,82,132,105],
[110,140,111,80,0,111,122,115],
[106,132,122,128,99,0,100,129],
[100,96,113,78,88,110,0,111],
[113,146,86,105,95,81,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,101,99,101,103,95,109],
[116,0,103,105,87,106,95,102],
[109,107,0,104,100,106,106,111],
[111,105,106,0,87,108,96,107],
[109,123,110,123,0,117,101,116],
[107,104,104,102,93,0,96,110],
[115,115,104,114,109,114,0,114],
[101,108,99,103,94,100,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,89,99,102,115,98,106],
[94,0,83,86,95,112,91,108],
[121,127,0,100,111,136,124,117],
[111,124,110,0,103,115,98,101],
[108,115,99,107,0,113,100,118],
[95,98,74,95,97,0,107,106],
[112,119,86,112,110,103,0,97],
[104,102,93,109,92,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,148,81,120,108,118,111],
[108,0,124,115,133,101,109,80],
[62,86,0,89,72,62,74,55],
[129,95,121,0,136,121,123,94],
[90,77,138,74,0,75,71,98],
[102,109,148,89,135,0,97,103],
[92,101,136,87,139,113,0,116],
[99,130,155,116,112,107,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,56,114,80,59,111,74],
[128,0,127,113,82,100,119,79],
[154,83,0,144,116,117,131,98],
[96,97,66,0,66,88,102,100],
[130,128,94,144,0,73,128,102],
[151,110,93,122,137,0,141,110],
[99,91,79,108,82,69,0,72],
[136,131,112,110,108,100,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,92,123,81,108,135,110],
[113,0,87,105,101,115,107,92],
[118,123,0,98,118,134,137,148],
[87,105,112,0,70,93,110,108],
[129,109,92,140,0,80,134,119],
[102,95,76,117,130,0,136,142],
[75,103,73,100,76,74,0,88],
[100,118,62,102,91,68,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,102,104,121,122,103],
[108,0,116,111,109,119,99,119],
[100,94,0,97,85,105,96,95],
[108,99,113,0,100,105,110,109],
[106,101,125,110,0,115,113,110],
[89,91,105,105,95,0,83,92],
[88,111,114,100,97,127,0,113],
[107,91,115,101,100,118,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,104,96,119,112,111,123],
[115,0,100,99,104,115,98,115],
[106,110,0,112,104,120,106,118],
[114,111,98,0,108,107,105,111],
[91,106,106,102,0,93,102,103],
[98,95,90,103,117,0,103,100],
[99,112,104,105,108,107,0,123],
[87,95,92,99,107,110,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,105,122,117,113,120,124],
[96,0,103,114,102,110,116,109],
[105,107,0,113,109,115,125,120],
[88,96,97,0,93,108,96,109],
[93,108,101,117,0,107,122,112],
[97,100,95,102,103,0,106,112],
[90,94,85,114,88,104,0,104],
[86,101,90,101,98,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,106,101,101,85,106,95],
[117,0,118,111,105,106,109,86],
[104,92,0,117,99,86,105,93],
[109,99,93,0,102,83,115,106],
[109,105,111,108,0,103,120,89],
[125,104,124,127,107,0,136,104],
[104,101,105,95,90,74,0,81],
[115,124,117,104,121,106,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,104,101,97,109,101],
[111,0,103,97,91,99,107,106],
[107,107,0,98,111,100,114,105],
[106,113,112,0,103,115,124,115],
[109,119,99,107,0,108,114,109],
[113,111,110,95,102,0,118,105],
[101,103,96,86,96,92,0,104],
[109,104,105,95,101,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,94,103,107,106,102,90],
[104,0,98,99,95,103,101,82],
[116,112,0,102,105,107,105,105],
[107,111,108,0,99,110,106,96],
[103,115,105,111,0,113,102,103],
[104,107,103,100,97,0,101,103],
[108,109,105,104,108,109,0,95],
[120,128,105,114,107,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,89,99,104,102,99,106],
[95,0,94,102,103,101,108,112],
[121,116,0,96,115,90,108,114],
[111,108,114,0,113,95,111,125],
[106,107,95,97,0,95,101,106],
[108,109,120,115,115,0,95,107],
[111,102,102,99,109,115,0,116],
[104,98,96,85,104,103,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,118,142,119,105,120,125],
[117,0,95,125,134,90,107,111],
[92,115,0,111,104,97,104,125],
[68,85,99,0,104,73,90,84],
[91,76,106,106,0,69,103,108],
[105,120,113,137,141,0,101,118],
[90,103,106,120,107,109,0,119],
[85,99,85,126,102,92,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,104,97,111,103,101],
[100,0,99,96,94,110,116,109],
[105,111,0,96,104,109,106,121],
[106,114,114,0,104,119,122,117],
[113,116,106,106,0,123,104,129],
[99,100,101,91,87,0,93,103],
[107,94,104,88,106,117,0,111],
[109,101,89,93,81,107,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,120,117,97,112,103],
[109,0,91,117,109,88,102,107],
[100,119,0,135,107,99,119,111],
[90,93,75,0,83,73,93,80],
[93,101,103,127,0,116,109,94],
[113,122,111,137,94,0,114,105],
[98,108,91,117,101,96,0,103],
[107,103,99,130,116,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,107,107,104,104,94,99],
[108,0,100,109,98,96,100,92],
[103,110,0,111,108,95,103,96],
[103,101,99,0,107,103,101,101],
[106,112,102,103,0,101,98,99],
[106,114,115,107,109,0,100,97],
[116,110,107,109,112,110,0,105],
[111,118,114,109,111,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,91,101,99,95,96,98],
[110,0,103,103,93,106,109,93],
[119,107,0,108,97,111,111,103],
[109,107,102,0,100,105,105,106],
[111,117,113,110,0,109,116,104],
[115,104,99,105,101,0,106,103],
[114,101,99,105,94,104,0,100],
[112,117,107,104,106,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,107,113,81,83,87,115],
[116,0,106,93,81,77,67,107],
[103,104,0,88,77,65,82,86],
[97,117,122,0,109,97,93,103],
[129,129,133,101,0,71,85,116],
[127,133,145,113,139,0,132,101],
[123,143,128,117,125,78,0,110],
[95,103,124,107,94,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,97,99,104,116,103,103],
[106,0,103,99,112,113,106,106],
[113,107,0,106,108,119,107,102],
[111,111,104,0,105,119,115,102],
[106,98,102,105,0,111,118,111],
[94,97,91,91,99,0,90,98],
[107,104,103,95,92,120,0,112],
[107,104,108,108,99,112,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,109,108,109,107,105],
[103,0,98,102,108,97,99,84],
[102,112,0,109,116,120,125,105],
[101,108,101,0,107,108,107,100],
[102,102,94,103,0,119,109,102],
[101,113,90,102,91,0,99,91],
[103,111,85,103,101,111,0,100],
[105,126,105,110,108,119,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,116,115,102,113,99],
[107,0,106,118,112,104,103,105],
[105,104,0,110,102,94,103,105],
[94,92,100,0,114,112,100,106],
[95,98,108,96,0,91,99,106],
[108,106,116,98,119,0,111,108],
[97,107,107,110,111,99,0,99],
[111,105,105,104,104,102,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,104,111,114,121,106,110],
[93,0,105,104,94,109,96,90],
[106,105,0,118,113,109,105,111],
[99,106,92,0,104,114,96,110],
[96,116,97,106,0,101,104,113],
[89,101,101,96,109,0,93,106],
[104,114,105,114,106,117,0,115],
[100,120,99,100,97,104,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,101,111,91,108,111],
[102,0,108,102,108,90,98,101],
[106,102,0,100,106,93,97,102],
[109,108,110,0,114,99,109,111],
[99,102,104,96,0,88,95,95],
[119,120,117,111,122,0,102,119],
[102,112,113,101,115,108,0,108],
[99,109,108,99,115,91,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,104,92,59,99,123,74],
[117,0,101,86,100,132,110,107],
[106,109,0,88,89,118,96,112],
[118,124,122,0,108,127,104,95],
[151,110,121,102,0,151,132,130],
[111,78,92,83,59,0,59,113],
[87,100,114,106,78,151,0,122],
[136,103,98,115,80,97,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,97,102,104,84,102],
[110,0,96,104,113,115,102,109],
[108,114,0,102,103,113,108,98],
[113,106,108,0,100,115,106,112],
[108,97,107,110,0,104,96,103],
[106,95,97,95,106,0,98,97],
[126,108,102,104,114,112,0,108],
[108,101,112,98,107,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,99,106,93,85,109],
[104,0,112,100,108,105,95,102],
[103,98,0,93,98,91,98,103],
[111,110,117,0,113,108,105,125],
[104,102,112,97,0,102,108,110],
[117,105,119,102,108,0,99,114],
[125,115,112,105,102,111,0,119],
[101,108,107,85,100,96,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,92,152,121,90,123,121],
[122,0,62,91,152,60,93,91],
[118,148,0,91,117,60,123,148],
[58,119,119,0,148,118,123,119],
[89,58,93,62,0,91,93,62],
[120,150,150,92,119,0,123,150],
[87,117,87,87,117,87,0,118],
[89,119,62,91,148,60,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,0,157,52,0],
[210,0,105,105,52,157,104,105],
[210,105,0,52,0,157,104,53],
[210,105,158,0,105,210,157,53],
[210,158,210,105,0,210,210,106],
[53,53,53,0,0,0,52,53],
[158,106,106,53,0,158,0,106],
[210,105,157,157,104,157,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,141,117,93,139,114,90],
[116,0,141,141,93,165,139,138],
[69,69,0,70,66,140,92,68],
[93,69,140,0,114,92,114,139],
[117,117,144,96,0,188,141,94],
[71,45,70,118,22,0,92,69],
[96,71,118,96,69,118,0,95],
[120,72,142,71,116,141,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,101,79,92,79,69,80],
[121,0,119,102,116,108,109,106],
[109,91,0,67,108,85,96,92],
[131,108,143,0,138,125,124,104],
[118,94,102,72,0,83,90,85],
[131,102,125,85,127,0,102,108],
[141,101,114,86,120,108,0,95],
[130,104,118,106,125,102,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,105,105,105,105,105,105],
[0,0,105,105,105,105,105,0],
[105,105,0,0,105,0,0,0],
[105,105,210,0,105,105,105,105],
[105,105,105,105,0,0,105,0],
[105,105,210,105,210,0,105,0],
[105,105,210,105,105,105,0,105],
[105,210,210,105,210,210,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,96,95,96,92,93],
[114,0,99,103,105,102,95,94],
[111,111,0,108,99,104,102,103],
[114,107,102,0,94,109,105,106],
[115,105,111,116,0,105,100,97],
[114,108,106,101,105,0,111,108],
[118,115,108,105,110,99,0,106],
[117,116,107,104,113,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,101,105,99,123,121,101],
[96,0,92,91,110,113,112,105],
[109,118,0,99,110,110,102,102],
[105,119,111,0,112,108,106,104],
[111,100,100,98,0,118,110,95],
[87,97,100,102,92,0,108,95],
[89,98,108,104,100,102,0,102],
[109,105,108,106,115,115,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,99,99,99,106,96],
[110,0,117,96,108,97,101,105],
[100,93,0,92,85,93,103,104],
[111,114,118,0,98,113,112,111],
[111,102,125,112,0,102,119,113],
[111,113,117,97,108,0,118,110],
[104,109,107,98,91,92,0,97],
[114,105,106,99,97,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,122,115,101,111,108,114],
[104,0,125,115,113,97,104,119],
[88,85,0,103,100,90,90,96],
[95,95,107,0,102,98,97,112],
[109,97,110,108,0,102,89,110],
[99,113,120,112,108,0,95,104],
[102,106,120,113,121,115,0,101],
[96,91,114,98,100,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,121,105,113,130,122,107],
[105,0,119,100,109,116,108,107],
[89,91,0,94,111,119,101,101],
[105,110,116,0,119,116,106,117],
[97,101,99,91,0,110,99,103],
[80,94,91,94,100,0,98,96],
[88,102,109,104,111,112,0,98],
[103,103,109,93,107,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,115,113,109,94,129,109],
[107,0,94,99,97,109,109,96],
[95,116,0,108,105,120,121,85],
[97,111,102,0,102,98,111,93],
[101,113,105,108,0,114,127,103],
[116,101,90,112,96,0,124,105],
[81,101,89,99,83,86,0,71],
[101,114,125,117,107,105,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,101,100,91,105,107,107],
[99,0,103,102,91,108,96,100],
[109,107,0,105,91,108,103,105],
[110,108,105,0,107,108,109,109],
[119,119,119,103,0,115,107,115],
[105,102,102,102,95,0,103,107],
[103,114,107,101,103,107,0,108],
[103,110,105,101,95,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,122,105,122,116,118,109],
[88,0,105,87,110,91,108,91],
[88,105,0,87,112,91,109,106],
[105,123,123,0,123,107,122,112],
[88,100,98,87,0,91,111,96],
[94,119,119,103,119,0,119,115],
[92,102,101,88,99,91,0,105],
[101,119,104,98,114,95,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,127,127,127,127,210,126],
[126,0,85,43,85,43,210,127],
[83,125,0,42,83,125,167,125],
[83,167,168,0,125,125,167,125],
[83,125,127,85,0,84,210,84],
[83,167,85,85,126,0,210,125],
[0,0,43,43,0,0,0,0],
[84,83,85,85,126,85,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,107,52,105,210,159,159],
[53,0,107,105,105,104,53,105],
[103,103,0,52,52,103,52,156],
[158,105,158,0,104,158,158,210],
[105,105,158,106,0,105,107,210],
[0,106,107,52,105,0,105,159],
[51,157,158,52,103,105,0,210],
[51,105,54,0,0,51,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,88,82,109,109,95,104],
[104,0,93,81,89,104,89,87],
[122,117,0,102,116,119,105,107],
[128,129,108,0,114,127,101,119],
[101,121,94,96,0,106,103,84],
[101,106,91,83,104,0,99,95],
[115,121,105,109,107,111,0,102],
[106,123,103,91,126,115,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,92,105,104,105,103,116],
[57,0,82,117,59,45,114,95],
[118,128,0,93,116,95,92,104],
[105,93,117,0,107,92,102,69],
[106,151,94,103,0,56,124,113],
[105,165,115,118,154,0,141,115],
[107,96,118,108,86,69,0,70],
[94,115,106,141,97,95,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,77,95,95,76,78,78],
[150,0,123,106,108,115,100,103],
[133,87,0,95,107,104,107,86],
[115,104,115,0,100,102,90,109],
[115,102,103,110,0,105,78,94],
[134,95,106,108,105,0,101,114],
[132,110,103,120,132,109,0,117],
[132,107,124,101,116,96,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,99,98,109,95,105,100],
[103,0,101,105,99,93,97,98],
[111,109,0,102,105,110,109,100],
[112,105,108,0,99,108,109,91],
[101,111,105,111,0,97,105,97],
[115,117,100,102,113,0,114,110],
[105,113,101,101,105,96,0,104],
[110,112,110,119,113,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,69,67,54,112,69,55],
[124,0,70,51,93,116,94,110],
[141,140,0,111,83,128,124,113],
[143,159,99,0,142,130,155,100],
[156,117,127,68,0,115,141,99],
[98,94,82,80,95,0,81,95],
[141,116,86,55,69,129,0,70],
[155,100,97,110,111,115,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,122,113,109,110,106,99],
[92,0,100,100,103,101,106,103],
[88,110,0,100,91,96,103,98],
[97,110,110,0,108,104,109,106],
[101,107,119,102,0,108,125,111],
[100,109,114,106,102,0,115,110],
[104,104,107,101,85,95,0,97],
[111,107,112,104,99,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,100,108,105,114,103,108],
[91,0,90,108,92,95,92,86],
[110,120,0,104,93,107,105,102],
[102,102,106,0,89,101,101,93],
[105,118,117,121,0,118,101,115],
[96,115,103,109,92,0,99,101],
[107,118,105,109,109,111,0,110],
[102,124,108,117,95,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,107,100,109,108,122,118],
[92,0,98,104,99,92,106,107],
[103,112,0,102,104,102,113,111],
[110,106,108,0,103,98,110,107],
[101,111,106,107,0,103,114,112],
[102,118,108,112,107,0,117,116],
[88,104,97,100,96,93,0,99],
[92,103,99,103,98,94,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,91,94,94,97,95,104],
[124,0,116,109,114,98,89,124],
[119,94,0,111,100,87,93,119],
[116,101,99,0,93,100,104,126],
[116,96,110,117,0,107,98,125],
[113,112,123,110,103,0,111,122],
[115,121,117,106,112,99,0,123],
[106,86,91,84,85,88,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,93,98,101,88,107,112],
[110,0,101,89,105,83,104,110],
[117,109,0,104,106,99,100,117],
[112,121,106,0,102,105,111,116],
[109,105,104,108,0,99,115,121],
[122,127,111,105,111,0,130,136],
[103,106,110,99,95,80,0,108],
[98,100,93,94,89,74,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,116,107,112,102,111],
[104,0,113,117,113,101,99,105],
[103,97,0,115,111,101,97,104],
[94,93,95,0,95,99,90,88],
[103,97,99,115,0,95,90,91],
[98,109,109,111,115,0,112,108],
[108,111,113,120,120,98,0,110],
[99,105,106,122,119,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,107,105,113,95,105,107],
[113,0,112,103,115,110,117,104],
[103,98,0,101,112,105,100,111],
[105,107,109,0,98,103,115,107],
[97,95,98,112,0,95,106,108],
[115,100,105,107,115,0,110,110],
[105,93,110,95,104,100,0,100],
[103,106,99,103,102,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,90,93,105,106,95,96],
[101,0,87,90,109,86,105,92],
[120,123,0,109,113,105,116,114],
[117,120,101,0,122,105,111,111],
[105,101,97,88,0,95,106,99],
[104,124,105,105,115,0,92,111],
[115,105,94,99,104,118,0,102],
[114,118,96,99,111,99,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,75,93,109,103,84,79],
[156,0,127,129,134,105,132,123],
[135,83,0,128,107,96,129,107],
[117,81,82,0,121,112,116,80],
[101,76,103,89,0,108,115,96],
[107,105,114,98,102,0,127,99],
[126,78,81,94,95,83,0,91],
[131,87,103,130,114,111,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,90,60,90,60,90,30],
[150,0,120,121,90,120,89,119],
[120,90,0,61,89,90,89,59],
[150,89,149,0,119,120,89,119],
[120,120,121,91,0,121,150,59],
[150,90,120,90,89,0,120,29],
[120,121,121,121,60,90,0,90],
[180,91,151,91,151,181,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,68,84,125,115,71,70],
[125,0,110,83,112,113,126,96],
[142,100,0,86,85,100,71,114],
[126,127,124,0,112,126,99,100],
[85,98,125,98,0,99,55,99],
[95,97,110,84,111,0,85,110],
[139,84,139,111,155,125,0,126],
[140,114,96,110,111,100,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,75,90,102,104,92,93],
[127,0,113,97,98,115,114,80],
[135,97,0,113,119,132,121,119],
[120,113,97,0,112,102,117,85],
[108,112,91,98,0,102,102,84],
[106,95,78,108,108,0,103,97],
[118,96,89,93,108,107,0,84],
[117,130,91,125,126,113,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,102,105,113,105,125,109],
[98,0,102,104,106,105,110,97],
[108,108,0,98,89,101,114,97],
[105,106,112,0,103,95,121,98],
[97,104,121,107,0,109,116,107],
[105,105,109,115,101,0,117,96],
[85,100,96,89,94,93,0,97],
[101,113,113,112,103,114,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,116,121,121,129,112,78],
[81,0,114,103,121,132,62,80],
[94,96,0,108,98,87,75,76],
[89,107,102,0,85,81,74,74],
[89,89,112,125,0,82,69,68],
[81,78,123,129,128,0,78,83],
[98,148,135,136,141,132,0,107],
[132,130,134,136,142,127,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,79,106,86,103,112,112],
[115,0,113,116,93,105,133,120],
[131,97,0,126,130,123,155,122],
[104,94,84,0,109,88,107,94],
[124,117,80,101,0,99,112,124],
[107,105,87,122,111,0,127,106],
[98,77,55,103,98,83,0,87],
[98,90,88,116,86,104,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,97,96,112,99,99,89],
[94,0,102,90,99,95,102,98],
[113,108,0,104,99,102,98,109],
[114,120,106,0,103,97,107,100],
[98,111,111,107,0,109,103,96],
[111,115,108,113,101,0,113,108],
[111,108,112,103,107,97,0,114],
[121,112,101,110,114,102,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,101,98,84,101,96],
[112,0,100,109,104,110,104,103],
[104,110,0,103,96,104,101,94],
[109,101,107,0,101,105,106,100],
[112,106,114,109,0,107,105,93],
[126,100,106,105,103,0,101,102],
[109,106,109,104,105,109,0,111],
[114,107,116,110,117,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,98,118,104,115,121],
[102,0,120,111,121,99,101,114],
[96,90,0,101,95,81,101,108],
[112,99,109,0,108,86,99,117],
[92,89,115,102,0,107,88,97],
[106,111,129,124,103,0,99,122],
[95,109,109,111,122,111,0,107],
[89,96,102,93,113,88,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,100,110,101,117,114,122],
[111,0,80,126,109,104,109,105],
[110,130,0,107,106,108,114,98],
[100,84,103,0,104,107,97,107],
[109,101,104,106,0,98,121,101],
[93,106,102,103,112,0,108,120],
[96,101,96,113,89,102,0,100],
[88,105,112,103,109,90,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,115,99,98,122,106,99],
[109,0,111,99,104,117,94,100],
[95,99,0,87,96,117,103,96],
[111,111,123,0,112,121,115,105],
[112,106,114,98,0,124,109,98],
[88,93,93,89,86,0,94,91],
[104,116,107,95,101,116,0,95],
[111,110,114,105,112,119,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,106,102,104,103,100],
[110,0,110,118,106,110,103,105],
[101,100,0,114,100,119,111,110],
[104,92,96,0,91,98,97,91],
[108,104,110,119,0,105,109,95],
[106,100,91,112,105,0,106,102],
[107,107,99,113,101,104,0,108],
[110,105,100,119,115,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,102,105,110,106,107],
[102,0,117,113,110,108,108,101],
[106,93,0,105,104,108,105,100],
[108,97,105,0,105,102,107,102],
[105,100,106,105,0,105,107,105],
[100,102,102,108,105,0,96,105],
[104,102,105,103,103,114,0,103],
[103,109,110,108,105,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,100,137,87,84,76,102],
[99,0,110,97,74,86,124,137],
[110,100,0,136,100,110,115,139],
[73,113,74,0,111,62,126,126],
[123,136,110,99,0,98,100,124],
[126,124,100,148,112,0,125,150],
[134,86,95,84,110,85,0,112],
[108,73,71,84,86,60,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,111,117,102,97,113,108],
[89,0,104,112,99,94,97,93],
[99,106,0,108,99,102,93,100],
[93,98,102,0,104,98,110,91],
[108,111,111,106,0,100,108,95],
[113,116,108,112,110,0,116,100],
[97,113,117,100,102,94,0,98],
[102,117,110,119,115,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,121,107,106,110,117,95],
[108,0,117,103,101,105,101,107],
[89,93,0,102,90,113,95,94],
[103,107,108,0,91,106,108,108],
[104,109,120,119,0,118,114,120],
[100,105,97,104,92,0,102,95],
[93,109,115,102,96,108,0,108],
[115,103,116,102,90,115,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,114,112,115,102,113,106],
[96,0,96,124,99,117,98,99],
[96,114,0,117,127,93,107,99],
[98,86,93,0,97,88,76,86],
[95,111,83,113,0,103,111,101],
[108,93,117,122,107,0,98,99],
[97,112,103,134,99,112,0,106],
[104,111,111,124,109,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,120,131,106,117,110],
[100,0,95,114,120,106,106,96],
[105,115,0,108,109,125,106,131],
[90,96,102,0,93,112,98,88],
[79,90,101,117,0,102,102,103],
[104,104,85,98,108,0,106,103],
[93,104,104,112,108,104,0,117],
[100,114,79,122,107,107,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,111,126,124,115,103],
[100,0,119,94,113,101,106,109],
[96,91,0,82,103,82,99,96],
[99,116,128,0,125,106,104,110],
[84,97,107,85,0,90,96,100],
[86,109,128,104,120,0,116,104],
[95,104,111,106,114,94,0,102],
[107,101,114,100,110,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,106,104,109,107,103],
[102,0,102,102,103,107,100,100],
[109,108,0,105,134,116,109,114],
[104,108,105,0,110,110,110,103],
[106,107,76,100,0,94,87,89],
[101,103,94,100,116,0,92,87],
[103,110,101,100,123,118,0,105],
[107,110,96,107,121,123,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,119,101,119,114,102],
[102,0,112,113,110,115,111,106],
[104,98,0,112,109,105,110,100],
[91,97,98,0,96,107,95,105],
[109,100,101,114,0,113,112,107],
[91,95,105,103,97,0,101,102],
[96,99,100,115,98,109,0,103],
[108,104,110,105,103,108,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,108,123,117,102,106],
[97,0,94,97,104,101,101,100],
[99,116,0,103,111,118,114,107],
[102,113,107,0,103,97,117,98],
[87,106,99,107,0,101,110,102],
[93,109,92,113,109,0,101,105],
[108,109,96,93,100,109,0,102],
[104,110,103,112,108,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,102,89,91,108,97],
[100,0,115,114,91,115,112,109],
[107,95,0,109,105,98,101,103],
[108,96,101,0,111,116,118,117],
[121,119,105,99,0,106,109,114],
[119,95,112,94,104,0,109,92],
[102,98,109,92,101,101,0,107],
[113,101,107,93,96,118,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,101,102,113,111,106],
[101,0,101,99,96,113,96,101],
[111,109,0,104,96,100,109,108],
[109,111,106,0,104,122,109,111],
[108,114,114,106,0,118,102,105],
[97,97,110,88,92,0,99,102],
[99,114,101,101,108,111,0,109],
[104,109,102,99,105,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,116,105,105,116,105],
[97,0,98,110,103,106,98,111],
[101,112,0,126,105,101,102,116],
[94,100,84,0,95,92,95,93],
[105,107,105,115,0,110,113,120],
[105,104,109,118,100,0,106,112],
[94,112,108,115,97,104,0,111],
[105,99,94,117,90,98,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,106,101,104,111,124],
[105,0,106,99,90,109,109,113],
[107,104,0,107,98,108,109,117],
[104,111,103,0,105,113,122,123],
[109,120,112,105,0,107,113,115],
[106,101,102,97,103,0,110,118],
[99,101,101,88,97,100,0,116],
[86,97,93,87,95,92,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,101,112,103,113,105,104],
[118,0,129,111,125,102,122,108],
[109,81,0,97,110,91,107,94],
[98,99,113,0,113,99,111,108],
[107,85,100,97,0,84,99,95],
[97,108,119,111,126,0,129,113],
[105,88,103,99,111,81,0,100],
[106,102,116,102,115,97,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,159,94,103,102,109,134],
[119,0,142,98,108,111,106,136],
[51,68,0,75,83,66,70,103],
[116,112,135,0,116,101,88,127],
[107,102,127,94,0,101,62,110],
[108,99,144,109,109,0,98,111],
[101,104,140,122,148,112,0,141],
[76,74,107,83,100,99,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,97,97,95,113,79],
[98,0,98,99,96,91,107,92],
[100,112,0,103,99,89,98,98],
[113,111,107,0,93,119,101,108],
[113,114,111,117,0,122,101,106],
[115,119,121,91,88,0,107,86],
[97,103,112,109,109,103,0,103],
[131,118,112,102,104,124,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,91,93,94,102,100,101],
[113,0,102,109,110,101,101,106],
[119,108,0,117,118,97,119,115],
[117,101,93,0,100,90,102,95],
[116,100,92,110,0,98,103,109],
[108,109,113,120,112,0,105,111],
[110,109,91,108,107,105,0,103],
[109,104,95,115,101,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,117,119,109,125,108,101],
[102,0,93,110,109,104,98,101],
[93,117,0,112,100,119,103,101],
[91,100,98,0,101,110,103,93],
[101,101,110,109,0,112,100,101],
[85,106,91,100,98,0,89,98],
[102,112,107,107,110,121,0,107],
[109,109,109,117,109,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,104,114,111,94,100,95],
[108,0,94,109,114,106,97,102],
[106,116,0,111,108,104,109,111],
[96,101,99,0,108,90,94,99],
[99,96,102,102,0,98,104,102],
[116,104,106,120,112,0,105,106],
[110,113,101,116,106,105,0,114],
[115,108,99,111,108,104,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,95,114,91,95,99,125],
[105,0,96,119,127,91,103,113],
[115,114,0,143,128,110,91,136],
[96,91,67,0,93,110,96,102],
[119,83,82,117,0,82,96,109],
[115,119,100,100,128,0,105,139],
[111,107,119,114,114,105,0,116],
[85,97,74,108,101,71,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,100,95,103,107,102,99],
[110,0,105,116,107,116,108,105],
[110,105,0,106,118,113,102,106],
[115,94,104,0,112,110,102,104],
[107,103,92,98,0,104,100,106],
[103,94,97,100,106,0,91,101],
[108,102,108,108,110,119,0,107],
[111,105,104,106,104,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,121,102,105,111,114,101],
[105,0,120,105,106,114,100,103],
[89,90,0,90,91,94,95,95],
[108,105,120,0,111,115,103,103],
[105,104,119,99,0,103,97,110],
[99,96,116,95,107,0,113,105],
[96,110,115,107,113,97,0,118],
[109,107,115,107,100,105,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,90,90,91,87,108,91],
[115,0,110,116,105,105,133,103],
[120,100,0,111,113,94,126,106],
[120,94,99,0,84,80,115,97],
[119,105,97,126,0,84,130,107],
[123,105,116,130,126,0,126,99],
[102,77,84,95,80,84,0,88],
[119,107,104,113,103,111,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,103,102,110,99,100,117],
[93,0,108,87,104,104,99,110],
[107,102,0,100,114,105,111,114],
[108,123,110,0,114,105,106,135],
[100,106,96,96,0,106,102,114],
[111,106,105,105,104,0,105,128],
[110,111,99,104,108,105,0,120],
[93,100,96,75,96,82,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,98,63,90,92,79,76],
[106,0,105,85,103,80,92,91],
[112,105,0,90,76,78,75,98],
[147,125,120,0,94,110,110,99],
[120,107,134,116,0,106,99,97],
[118,130,132,100,104,0,102,109],
[131,118,135,100,111,108,0,127],
[134,119,112,111,113,101,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,105,103,114,107,114],
[99,0,108,113,102,114,109,115],
[103,102,0,96,100,96,105,104],
[105,97,114,0,110,116,114,110],
[107,108,110,100,0,116,113,104],
[96,96,114,94,94,0,104,102],
[103,101,105,96,97,106,0,106],
[96,95,106,100,106,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,123,104,118,139,99,106],
[105,0,95,106,102,107,100,102],
[87,115,0,113,116,138,112,100],
[106,104,97,0,101,122,113,97],
[92,108,94,109,0,121,117,118],
[71,103,72,88,89,0,93,93],
[111,110,98,97,93,117,0,97],
[104,108,110,113,92,117,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,120,108,99,114,120,118],
[114,0,126,110,127,104,122,112],
[90,84,0,90,106,91,109,92],
[102,100,120,0,119,123,132,112],
[111,83,104,91,0,108,115,79],
[96,106,119,87,102,0,113,92],
[90,88,101,78,95,97,0,94],
[92,98,118,98,131,118,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,115,92,116,115,111],
[101,0,98,105,92,110,113,113],
[104,112,0,90,82,106,102,115],
[95,105,120,0,107,105,111,105],
[118,118,128,103,0,132,118,119],
[94,100,104,105,78,0,109,114],
[95,97,108,99,92,101,0,103],
[99,97,95,105,91,96,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,123,93,118,112,110,118],
[88,0,109,100,111,105,93,120],
[87,101,0,104,102,105,96,93],
[117,110,106,0,119,105,101,114],
[92,99,108,91,0,104,112,115],
[98,105,105,105,106,0,106,108],
[100,117,114,109,98,104,0,106],
[92,90,117,96,95,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,77,75,115,74,104,75],
[127,0,103,93,122,97,122,115],
[133,107,0,115,145,101,96,123],
[135,117,95,0,148,104,130,102],
[95,88,65,62,0,93,97,72],
[136,113,109,106,117,0,138,88],
[106,88,114,80,113,72,0,73],
[135,95,87,108,138,122,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,98,110,101,101,104],
[103,0,112,113,105,107,92,107],
[93,98,0,102,81,99,96,98],
[112,97,108,0,104,90,105,112],
[100,105,129,106,0,98,100,105],
[109,103,111,120,112,0,107,108],
[109,118,114,105,110,103,0,115],
[106,103,112,98,105,102,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,94,118,96,104,92,94],
[125,0,107,121,122,101,94,117],
[116,103,0,123,113,103,101,111],
[92,89,87,0,80,88,84,85],
[114,88,97,130,0,95,99,105],
[106,109,107,122,115,0,105,117],
[118,116,109,126,111,105,0,117],
[116,93,99,125,105,93,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,129,116,100,89,117,87],
[109,0,118,130,89,90,93,144],
[81,92,0,132,79,132,79,104],
[94,80,78,0,39,81,66,90],
[110,121,131,171,0,120,93,158],
[121,120,78,129,90,0,104,143],
[93,117,131,144,117,106,0,129],
[123,66,106,120,52,67,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,116,91,112,109,109,105],
[99,0,114,98,107,105,114,87],
[94,96,0,94,110,93,112,90],
[119,112,116,0,130,133,115,102],
[98,103,100,80,0,86,114,81],
[101,105,117,77,124,0,99,91],
[101,96,98,95,96,111,0,102],
[105,123,120,108,129,119,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,115,105,113,103,116,106],
[80,0,103,95,86,75,90,91],
[95,107,0,91,94,102,107,106],
[105,115,119,0,87,107,105,110],
[97,124,116,123,0,125,110,120],
[107,135,108,103,85,0,106,105],
[94,120,103,105,100,104,0,109],
[104,119,104,100,90,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,103,105,105,97,108,98],
[99,0,100,111,95,103,101,101],
[107,110,0,107,102,106,111,95],
[105,99,103,0,88,93,107,91],
[105,115,108,122,0,94,101,96],
[113,107,104,117,116,0,114,108],
[102,109,99,103,109,96,0,106],
[112,109,115,119,114,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,120,113,113,107,107,105],
[106,0,120,106,118,79,114,98],
[90,90,0,97,90,85,88,82],
[97,104,113,0,97,109,98,86],
[97,92,120,113,0,99,94,97],
[103,131,125,101,111,0,119,111],
[103,96,122,112,116,91,0,99],
[105,112,128,124,113,99,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,99,103,97,97,94,98],
[123,0,127,115,113,104,109,114],
[111,83,0,107,111,116,97,98],
[107,95,103,0,100,108,115,107],
[113,97,99,110,0,115,99,96],
[113,106,94,102,95,0,111,112],
[116,101,113,95,111,99,0,103],
[112,96,112,103,114,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,104,102,107,97,101],
[103,0,109,113,108,117,109,111],
[103,101,0,102,100,104,109,104],
[106,97,108,0,118,113,106,106],
[108,102,110,92,0,113,106,106],
[103,93,106,97,97,0,102,104],
[113,101,101,104,104,108,0,99],
[109,99,106,104,104,106,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,105,105,157,105,157],
[105,0,158,105,210,158,210,157],
[105,52,0,52,105,104,157,104],
[105,105,158,0,105,157,157,157],
[105,0,105,105,0,52,52,104],
[53,52,106,53,158,0,158,105],
[105,0,53,53,158,52,0,104],
[53,53,106,53,106,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,108,101,109,111,102],
[108,0,105,107,90,103,110,106],
[101,105,0,95,101,101,99,97],
[102,103,115,0,91,99,112,103],
[109,120,109,119,0,113,104,112],
[101,107,109,111,97,0,96,102],
[99,100,111,98,106,114,0,103],
[108,104,113,107,98,108,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,100,99,108,101,106,91],
[122,0,107,110,109,105,123,109],
[110,103,0,100,117,113,126,123],
[111,100,110,0,118,111,112,106],
[102,101,93,92,0,102,110,93],
[109,105,97,99,108,0,118,100],
[104,87,84,98,100,92,0,100],
[119,101,87,104,117,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,106,106,116,110,99],
[103,0,104,109,114,120,104,107],
[112,106,0,109,103,118,112,93],
[104,101,101,0,101,112,118,106],
[104,96,107,109,0,110,113,102],
[94,90,92,98,100,0,108,90],
[100,106,98,92,97,102,0,93],
[111,103,117,104,108,120,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,121,118,106,117,108],
[103,0,114,112,120,109,105,108],
[110,96,0,119,113,102,111,103],
[89,98,91,0,98,100,89,109],
[92,90,97,112,0,103,92,103],
[104,101,108,110,107,0,98,117],
[93,105,99,121,118,112,0,116],
[102,102,107,101,107,93,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,102,101,90,110,101],
[105,0,123,119,110,117,115,110],
[104,87,0,104,93,97,105,90],
[108,91,106,0,102,96,106,97],
[109,100,117,108,0,102,116,98],
[120,93,113,114,108,0,122,98],
[100,95,105,104,94,88,0,91],
[109,100,120,113,112,112,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,111,124,111,95,115],
[108,0,106,101,139,118,107,102],
[108,104,0,106,146,119,128,107],
[99,109,104,0,128,124,98,118],
[86,71,64,82,0,80,79,95],
[99,92,91,86,130,0,87,101],
[115,103,82,112,131,123,0,119],
[95,108,103,92,115,109,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,108,105,120,133,108,107],
[110,0,109,101,105,104,108,116],
[102,101,0,111,104,126,101,115],
[105,109,99,0,104,126,101,119],
[90,105,106,106,0,107,101,102],
[77,106,84,84,103,0,86,91],
[102,102,109,109,109,124,0,106],
[103,94,95,91,108,119,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,92,101,101,89,85,102],
[109,0,104,117,117,100,99,109],
[118,106,0,107,100,112,105,104],
[109,93,103,0,103,98,100,104],
[109,93,110,107,0,96,85,103],
[121,110,98,112,114,0,94,109],
[125,111,105,110,125,116,0,121],
[108,101,106,106,107,101,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,104,102,108,115,130],
[103,0,88,85,108,101,104,112],
[106,122,0,75,117,104,93,105],
[106,125,135,0,97,113,96,125],
[108,102,93,113,0,99,112,105],
[102,109,106,97,111,0,85,109],
[95,106,117,114,98,125,0,121],
[80,98,105,85,105,101,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,90,108,97,104,87,115],
[104,0,99,109,123,117,98,91],
[120,111,0,97,106,115,111,110],
[102,101,113,0,108,113,104,105],
[113,87,104,102,0,115,87,107],
[106,93,95,97,95,0,93,102],
[123,112,99,106,123,117,0,111],
[95,119,100,105,103,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,94,116,104,87,98,101],
[110,0,104,102,99,105,114,111],
[116,106,0,107,105,110,124,121],
[94,108,103,0,101,104,106,105],
[106,111,105,109,0,108,101,111],
[123,105,100,106,102,0,98,104],
[112,96,86,104,109,112,0,109],
[109,99,89,105,99,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,107,102,101,105,108],
[100,0,109,99,106,104,97,94],
[103,101,0,103,100,103,105,101],
[103,111,107,0,109,106,102,109],
[108,104,110,101,0,107,112,114],
[109,106,107,104,103,0,109,120],
[105,113,105,108,98,101,0,93],
[102,116,109,101,96,90,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,118,106,128,122,98],
[100,0,102,143,111,114,125,117],
[104,108,0,126,109,93,121,101],
[92,67,84,0,81,82,104,77],
[104,99,101,129,0,101,105,117],
[82,96,117,128,109,0,128,100],
[88,85,89,106,105,82,0,99],
[112,93,109,133,93,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,108,87,80,104,88,80],
[128,0,128,99,110,136,111,114],
[102,82,0,81,85,98,76,83],
[123,111,129,0,115,126,121,97],
[130,100,125,95,0,133,133,113],
[106,74,112,84,77,0,74,90],
[122,99,134,89,77,136,0,99],
[130,96,127,113,97,120,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,42,41,42,126,84,125],
[127,0,85,126,42,126,127,125],
[168,125,0,41,125,167,125,83],
[169,84,169,0,84,126,169,125],
[168,168,85,126,0,167,127,168],
[84,84,43,84,43,0,85,126],
[126,83,85,41,83,125,0,83],
[85,85,127,85,42,84,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,105,109,109,109,83],
[99,0,122,108,103,105,103,113],
[96,88,0,92,108,104,106,93],
[105,102,118,0,121,113,122,102],
[101,107,102,89,0,92,87,84],
[101,105,106,97,118,0,106,94],
[101,107,104,88,123,104,0,91],
[127,97,117,108,126,116,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,99,96,87,90,92,101],
[110,0,103,115,87,97,96,111],
[111,107,0,109,112,116,116,103],
[114,95,101,0,94,99,105,105],
[123,123,98,116,0,115,103,106],
[120,113,94,111,95,0,102,118],
[118,114,94,105,107,108,0,106],
[109,99,107,105,104,92,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,107,110,108,105,106],
[97,0,109,99,104,99,99,95],
[99,101,0,89,94,106,94,95],
[103,111,121,0,105,100,104,108],
[100,106,116,105,0,104,101,103],
[102,111,104,110,106,0,101,108],
[105,111,116,106,109,109,0,100],
[104,115,115,102,107,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,108,107,98,106,120,105],
[115,0,106,109,99,120,105,105],
[102,104,0,114,94,112,108,100],
[103,101,96,0,110,125,108,114],
[112,111,116,100,0,119,107,105],
[104,90,98,85,91,0,96,85],
[90,105,102,102,103,114,0,105],
[105,105,110,96,105,125,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,115,128,117,102,115,107],
[116,0,113,119,120,101,121,113],
[95,97,0,114,115,107,115,104],
[82,91,96,0,95,93,107,92],
[93,90,95,115,0,89,115,93],
[108,109,103,117,121,0,115,109],
[95,89,95,103,95,95,0,100],
[103,97,106,118,117,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,210,210,158,54,160,104],
[0,0,102,102,50,0,52,50],
[0,108,0,52,54,0,106,0],
[0,108,158,0,104,0,54,50],
[52,160,156,106,0,106,160,106],
[156,210,210,210,104,0,156,156],
[50,158,104,156,50,54,0,50],
[106,160,210,160,104,54,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,53,105,53,105,53],
[105,0,104,105,105,105,105,52],
[105,106,0,105,105,105,53,0],
[157,105,105,0,105,53,105,105],
[105,105,105,105,0,105,105,105],
[157,105,105,157,105,0,158,105],
[105,105,157,105,105,52,0,53],
[157,158,210,105,105,105,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,113,105,101,97,100,105],
[112,0,116,98,105,105,103,116],
[97,94,0,94,94,102,93,90],
[105,112,116,0,91,91,101,101],
[109,105,116,119,0,110,110,103],
[113,105,108,119,100,0,104,108],
[110,107,117,109,100,106,0,107],
[105,94,120,109,107,102,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,98,98,101,93,98,95],
[117,0,103,125,115,107,107,103],
[112,107,0,130,119,115,113,102],
[112,85,80,0,91,95,93,95],
[109,95,91,119,0,98,91,94],
[117,103,95,115,112,0,111,92],
[112,103,97,117,119,99,0,106],
[115,107,108,115,116,118,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,119,112,113,114,107],
[106,0,103,102,120,89,92,116],
[99,107,0,106,100,100,102,95],
[91,108,104,0,113,103,99,104],
[98,90,110,97,0,91,96,96],
[97,121,110,107,119,0,111,105],
[96,118,108,111,114,99,0,106],
[103,94,115,106,114,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,101,111,102,99,105,106],
[113,0,104,94,103,108,106,100],
[109,106,0,93,106,95,118,100],
[99,116,117,0,108,96,117,111],
[108,107,104,102,0,99,114,106],
[111,102,115,114,111,0,116,116],
[105,104,92,93,96,94,0,94],
[104,110,110,99,104,94,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,93,130,86,96,76,101],
[112,0,121,138,115,98,108,114],
[117,89,0,142,113,101,117,119],
[80,72,68,0,78,85,72,88],
[124,95,97,132,0,106,107,120],
[114,112,109,125,104,0,90,127],
[134,102,93,138,103,120,0,122],
[109,96,91,122,90,83,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,52,157,52,53,0,105],
[105,0,105,157,157,105,105,105],
[158,105,0,157,105,53,52,158],
[53,53,53,0,105,53,53,53],
[158,53,105,105,0,53,53,105],
[157,105,157,157,157,0,105,157],
[210,105,158,157,157,105,0,210],
[105,105,52,157,105,53,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,104,116,120,117,118],
[105,0,109,122,116,101,96,115],
[106,101,0,110,111,104,111,118],
[106,88,100,0,102,106,102,104],
[94,94,99,108,0,107,102,97],
[90,109,106,104,103,0,103,113],
[93,114,99,108,108,107,0,103],
[92,95,92,106,113,97,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,111,115,110,98,127,63],
[115,0,66,83,79,86,81,49],
[99,144,0,97,109,132,96,94],
[95,127,113,0,112,85,112,112],
[100,131,101,98,0,67,97,49],
[112,124,78,125,143,0,111,78],
[83,129,114,98,113,99,0,32],
[147,161,116,98,161,132,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,114,98,95,103,105,104],
[106,0,120,115,110,102,104,117],
[96,90,0,96,99,98,93,106],
[112,95,114,0,97,101,102,110],
[115,100,111,113,0,111,110,121],
[107,108,112,109,99,0,112,114],
[105,106,117,108,100,98,0,114],
[106,93,104,100,89,96,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,105,112,99,96,102,105],
[126,0,95,132,125,107,113,131],
[105,115,0,123,119,101,124,93],
[98,78,87,0,94,98,93,102],
[111,85,91,116,0,92,115,114],
[114,103,109,112,118,0,117,127],
[108,97,86,117,95,93,0,104],
[105,79,117,108,96,83,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,87,100,92,104,111,102],
[108,0,102,105,96,97,90,99],
[123,108,0,99,108,113,118,126],
[110,105,111,0,103,106,105,111],
[118,114,102,107,0,114,112,120],
[106,113,97,104,96,0,104,126],
[99,120,92,105,98,106,0,111],
[108,111,84,99,90,84,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,122,108,101,114,110,109],
[95,0,97,91,90,96,99,90],
[88,113,0,102,86,93,98,97],
[102,119,108,0,102,110,104,106],
[109,120,124,108,0,102,108,117],
[96,114,117,100,108,0,108,113],
[100,111,112,106,102,102,0,108],
[101,120,113,104,93,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,113,101,117,107,110],
[101,0,99,101,103,104,111,98],
[101,111,0,96,100,123,113,100],
[97,109,114,0,107,102,110,96],
[109,107,110,103,0,119,111,114],
[93,106,87,108,91,0,102,102],
[103,99,97,100,99,108,0,95],
[100,112,110,114,96,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,129,123,115,96,114,105],
[93,0,103,89,85,99,120,93],
[81,107,0,102,94,78,96,73],
[87,121,108,0,107,98,116,97],
[95,125,116,103,0,102,113,109],
[114,111,132,112,108,0,122,99],
[96,90,114,94,97,88,0,95],
[105,117,137,113,101,111,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,107,92,95,105,107,117],
[117,0,105,113,116,105,104,119],
[103,105,0,93,118,96,93,118],
[118,97,117,0,108,98,109,113],
[115,94,92,102,0,108,106,108],
[105,105,114,112,102,0,120,111],
[103,106,117,101,104,90,0,109],
[93,91,92,97,102,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,109,87,101,112,88,123],
[116,0,110,103,110,121,109,109],
[101,100,0,106,100,115,106,113],
[123,107,104,0,98,125,108,113],
[109,100,110,112,0,128,107,114],
[98,89,95,85,82,0,100,100],
[122,101,104,102,103,110,0,107],
[87,101,97,97,96,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,112,97,114,107,117],
[105,0,111,114,113,108,109,117],
[107,99,0,113,108,112,102,113],
[98,96,97,0,98,110,110,113],
[113,97,102,112,0,107,113,111],
[96,102,98,100,103,0,108,107],
[103,101,108,100,97,102,0,112],
[93,93,97,97,99,103,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,122,105,104,107,82,113],
[93,0,104,91,82,90,84,109],
[88,106,0,86,76,70,74,85],
[105,119,124,0,90,109,95,120],
[106,128,134,120,0,96,111,113],
[103,120,140,101,114,0,102,110],
[128,126,136,115,99,108,0,130],
[97,101,125,90,97,100,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,95,95,96,92,96,92],
[113,0,121,102,109,111,104,107],
[115,89,0,98,121,88,109,107],
[115,108,112,0,116,99,109,113],
[114,101,89,94,0,92,120,100],
[118,99,122,111,118,0,113,118],
[114,106,101,101,90,97,0,96],
[118,103,103,97,110,92,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,92,118,89,101,96,104],
[128,0,119,120,113,100,107,109],
[118,91,0,122,115,107,117,102],
[92,90,88,0,83,80,82,72],
[121,97,95,127,0,89,100,95],
[109,110,103,130,121,0,109,106],
[114,103,93,128,110,101,0,116],
[106,101,108,138,115,104,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,72,155,126,123,54,140],
[68,0,52,84,125,71,36,52],
[138,158,0,155,125,105,106,85],
[55,126,55,0,109,87,74,72],
[84,85,85,101,0,84,70,83],
[87,139,105,123,126,0,106,105],
[156,174,104,136,140,104,0,86],
[70,158,125,138,127,105,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,115,106,116,89,106,124],
[93,0,106,110,104,87,103,123],
[95,104,0,95,109,96,104,119],
[104,100,115,0,107,109,107,104],
[94,106,101,103,0,97,86,116],
[121,123,114,101,113,0,99,123],
[104,107,106,103,124,111,0,112],
[86,87,91,106,94,87,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,122,111,102,101,96,101],
[106,0,104,95,105,106,110,112],
[88,106,0,92,108,115,104,99],
[99,115,118,0,110,110,113,110],
[108,105,102,100,0,103,102,126],
[109,104,95,100,107,0,106,111],
[114,100,106,97,108,104,0,111],
[109,98,111,100,84,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,96,110,106,93,94,101],
[100,0,104,117,110,103,106,105],
[114,106,0,112,111,105,111,116],
[100,93,98,0,99,98,93,104],
[104,100,99,111,0,101,93,96],
[117,107,105,112,109,0,113,109],
[116,104,99,117,117,97,0,106],
[109,105,94,106,114,101,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,125,103,103,96,112,112],
[88,0,71,88,61,81,74,80],
[85,139,0,101,107,102,80,101],
[107,122,109,0,86,115,104,120],
[107,149,103,124,0,104,107,96],
[114,129,108,95,106,0,91,100],
[98,136,130,106,103,119,0,109],
[98,130,109,90,114,110,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,117,98,106,110,121,125],
[114,0,115,99,108,110,114,118],
[93,95,0,98,97,118,107,114],
[112,111,112,0,103,123,120,115],
[104,102,113,107,0,116,109,109],
[100,100,92,87,94,0,107,102],
[89,96,103,90,101,103,0,110],
[85,92,96,95,101,108,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,88,104,87,103,88,87],
[141,0,140,157,87,105,122,104],
[122,70,0,123,52,89,103,70],
[106,53,87,0,105,69,121,86],
[123,123,158,105,0,123,122,122],
[107,105,121,141,87,0,122,121],
[122,88,107,89,88,88,0,105],
[123,106,140,124,88,89,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,117,124,109,102,110,108],
[93,0,100,99,92,89,97,96],
[93,110,0,110,98,100,106,100],
[86,111,100,0,97,95,104,95],
[101,118,112,113,0,107,93,101],
[108,121,110,115,103,0,111,118],
[100,113,104,106,117,99,0,110],
[102,114,110,115,109,92,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,98,108,103,108,96,110],
[108,0,105,86,99,106,95,103],
[112,105,0,113,111,111,99,119],
[102,124,97,0,109,109,100,114],
[107,111,99,101,0,107,96,120],
[102,104,99,101,103,0,105,109],
[114,115,111,110,114,105,0,116],
[100,107,91,96,90,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,107,103,98,108,96,95],
[113,0,112,110,119,103,103,104],
[103,98,0,108,105,89,104,89],
[107,100,102,0,102,97,89,98],
[112,91,105,108,0,100,102,85],
[102,107,121,113,110,0,127,128],
[114,107,106,121,108,83,0,110],
[115,106,121,112,125,82,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,92,106,118,98,84],
[113,0,108,110,114,117,111,96],
[108,102,0,96,115,110,112,105],
[118,100,114,0,109,119,107,97],
[104,96,95,101,0,102,99,92],
[92,93,100,91,108,0,105,101],
[112,99,98,103,111,105,0,102],
[126,114,105,113,118,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,90,93,109,96,119,91],
[119,0,102,102,111,117,121,112],
[120,108,0,107,105,110,118,100],
[117,108,103,0,110,123,120,108],
[101,99,105,100,0,108,112,107],
[114,93,100,87,102,0,108,92],
[91,89,92,90,98,102,0,91],
[119,98,110,102,103,118,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,107,95,104,95,99,90],
[118,0,119,104,99,112,103,109],
[103,91,0,112,106,84,103,106],
[115,106,98,0,105,100,105,99],
[106,111,104,105,0,97,112,110],
[115,98,126,110,113,0,111,117],
[111,107,107,105,98,99,0,102],
[120,101,104,111,100,93,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,94,114,101,100,96,93],
[115,0,94,107,113,104,96,105],
[116,116,0,119,111,98,99,110],
[96,103,91,0,93,84,103,94],
[109,97,99,117,0,95,100,94],
[110,106,112,126,115,0,112,105],
[114,114,111,107,110,98,0,105],
[117,105,100,116,116,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,116,103,104,90,95],
[102,0,109,113,95,93,101,103],
[102,101,0,105,96,99,100,100],
[94,97,105,0,104,103,105,103],
[107,115,114,106,0,100,107,96],
[106,117,111,107,110,0,116,104],
[120,109,110,105,103,94,0,107],
[115,107,110,107,114,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,108,106,97,114,125,107],
[110,0,112,107,105,112,123,115],
[102,98,0,95,93,95,90,105],
[104,103,115,0,108,111,120,111],
[113,105,117,102,0,126,122,117],
[96,98,115,99,84,0,108,103],
[85,87,120,90,88,102,0,106],
[103,95,105,99,93,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,92,77,90,90,105,99],
[117,0,97,88,78,96,97,87],
[118,113,0,95,105,112,99,103],
[133,122,115,0,106,100,110,109],
[120,132,105,104,0,102,94,95],
[120,114,98,110,108,0,102,107],
[105,113,111,100,116,108,0,106],
[111,123,107,101,115,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,73,90,90,89,81,92],
[114,0,106,102,112,108,108,122],
[137,104,0,110,121,118,97,110],
[120,108,100,0,107,103,96,105],
[120,98,89,103,0,93,95,114],
[121,102,92,107,117,0,103,113],
[129,102,113,114,115,107,0,112],
[118,88,100,105,96,97,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,116,98,108,106,118,98],
[101,0,115,101,116,112,108,112],
[94,95,0,93,102,102,92,106],
[112,109,117,0,104,106,120,113],
[102,94,108,106,0,101,110,117],
[104,98,108,104,109,0,106,115],
[92,102,118,90,100,104,0,102],
[112,98,104,97,93,95,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,53,133,105,107,107,107],
[80,0,80,159,131,108,133,82],
[157,130,0,184,105,105,133,131],
[77,51,26,0,79,54,107,52],
[105,79,105,131,0,131,104,79],
[103,102,105,156,79,0,107,79],
[103,77,77,103,106,103,0,51],
[103,128,79,158,131,131,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,95,106,101,97,99,107],
[104,0,111,116,111,96,104,99],
[115,99,0,106,119,102,106,106],
[104,94,104,0,98,88,90,91],
[109,99,91,112,0,107,85,98],
[113,114,108,122,103,0,96,116],
[111,106,104,120,125,114,0,119],
[103,111,104,119,112,94,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,97,105,90,98,85,95],
[93,0,97,103,100,96,104,91],
[113,113,0,99,94,103,89,86],
[105,107,111,0,95,99,95,99],
[120,110,116,115,0,102,106,106],
[112,114,107,111,108,0,93,111],
[125,106,121,115,104,117,0,97],
[115,119,124,111,104,99,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,98,92,107,108,103],
[100,0,111,108,93,91,94,101],
[106,99,0,99,103,94,109,106],
[112,102,111,0,85,88,97,113],
[118,117,107,125,0,99,105,125],
[103,119,116,122,111,0,106,115],
[102,116,101,113,105,104,0,124],
[107,109,104,97,85,95,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,104,113,118,108,99],
[102,0,115,101,97,108,99,90],
[100,95,0,97,103,108,103,94],
[106,109,113,0,94,113,122,124],
[97,113,107,116,0,103,117,94],
[92,102,102,97,107,0,100,105],
[102,111,107,88,93,110,0,97],
[111,120,116,86,116,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,105,114,104,109,108,119],
[95,0,101,107,110,101,100,96],
[105,109,0,112,87,101,94,103],
[96,103,98,0,89,98,108,106],
[106,100,123,121,0,117,113,113],
[101,109,109,112,93,0,115,111],
[102,110,116,102,97,95,0,120],
[91,114,107,104,97,99,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,118,119,109,116,105,125],
[94,0,110,97,90,99,92,103],
[92,100,0,103,100,98,91,107],
[91,113,107,0,101,97,92,99],
[101,120,110,109,0,112,106,118],
[94,111,112,113,98,0,107,109],
[105,118,119,118,104,103,0,116],
[85,107,103,111,92,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,100,119,96,110,106],
[104,0,108,102,122,102,107,102],
[106,102,0,107,117,107,109,105],
[110,108,103,0,125,100,105,102],
[91,88,93,85,0,95,93,90],
[114,108,103,110,115,0,114,107],
[100,103,101,105,117,96,0,102],
[104,108,105,108,120,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,114,127,112,105,113],
[110,0,105,115,112,111,98,98],
[100,105,0,105,113,90,92,96],
[96,95,105,0,99,98,95,99],
[83,98,97,111,0,109,103,101],
[98,99,120,112,101,0,110,100],
[105,112,118,115,107,100,0,94],
[97,112,114,111,109,110,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,105,131,108,118,117,118],
[102,0,100,112,126,124,113,112],
[105,110,0,121,116,116,112,125],
[79,98,89,0,108,94,98,110],
[102,84,94,102,0,93,110,118],
[92,86,94,116,117,0,111,113],
[93,97,98,112,100,99,0,98],
[92,98,85,100,92,97,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,118,114,109,125,101,87],
[115,0,105,96,101,121,87,109],
[92,105,0,112,95,125,81,76],
[96,114,98,0,81,119,90,73],
[101,109,115,129,0,125,110,98],
[85,89,85,91,85,0,80,79],
[109,123,129,120,100,130,0,92],
[123,101,134,137,112,131,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,114,123,109,116,104,111],
[97,0,112,111,106,107,98,119],
[96,98,0,101,99,102,103,99],
[87,99,109,0,92,103,85,95],
[101,104,111,118,0,108,106,108],
[94,103,108,107,102,0,97,102],
[106,112,107,125,104,113,0,113],
[99,91,111,115,102,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,100,121,105,106,99],
[107,0,99,102,117,110,114,101],
[107,111,0,122,126,118,120,105],
[110,108,88,0,110,114,106,102],
[89,93,84,100,0,94,102,86],
[105,100,92,96,116,0,111,87],
[104,96,90,104,108,99,0,87],
[111,109,105,108,124,123,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,89,92,107,102,103],
[106,0,104,108,115,104,98,102],
[107,106,0,103,107,99,98,112],
[121,102,107,0,99,106,111,112],
[118,95,103,111,0,97,113,116],
[103,106,111,104,113,0,109,122],
[108,112,112,99,97,101,0,113],
[107,108,98,98,94,88,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,104,108,103,100,112,108],
[92,0,92,104,95,92,104,91],
[106,118,0,113,107,104,111,107],
[102,106,97,0,103,105,104,103],
[107,115,103,107,0,112,105,101],
[110,118,106,105,98,0,109,104],
[98,106,99,106,105,101,0,95],
[102,119,103,107,109,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,98,107,101,107,100,104],
[113,0,96,115,111,104,119,92],
[112,114,0,114,126,110,115,105],
[103,95,96,0,96,102,105,85],
[109,99,84,114,0,104,101,113],
[103,106,100,108,106,0,115,101],
[110,91,95,105,109,95,0,92],
[106,118,105,125,97,109,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,99,107,106,102,103],
[97,0,103,104,98,106,103,100],
[100,107,0,100,99,102,96,102],
[111,106,110,0,106,108,103,112],
[103,112,111,104,0,109,101,112],
[104,104,108,102,101,0,110,108],
[108,107,114,107,109,100,0,113],
[107,110,108,98,98,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,104,104,109,105,109],
[97,0,109,95,105,94,94,96],
[101,101,0,98,99,102,99,108],
[106,115,112,0,111,106,106,100],
[106,105,111,99,0,99,102,106],
[101,116,108,104,111,0,99,103],
[105,116,111,104,108,111,0,115],
[101,114,102,110,104,107,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,90,108,92,93,102,115],
[119,0,112,104,105,101,117,119],
[120,98,0,102,98,86,102,107],
[102,106,108,0,104,105,96,106],
[118,105,112,106,0,105,108,125],
[117,109,124,105,105,0,126,123],
[108,93,108,114,102,84,0,103],
[95,91,103,104,85,87,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,109,103,104,98,80,79],
[96,0,98,101,117,107,90,98],
[101,112,0,109,99,93,94,108],
[107,109,101,0,122,97,74,85],
[106,93,111,88,0,74,70,87],
[112,103,117,113,136,0,74,103],
[130,120,116,136,140,136,0,95],
[131,112,102,125,123,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,100,110,99,111,106,111],
[99,0,100,107,105,90,103,106],
[110,110,0,118,102,117,111,114],
[100,103,92,0,95,104,107,102],
[111,105,108,115,0,112,116,113],
[99,120,93,106,98,0,108,111],
[104,107,99,103,94,102,0,116],
[99,104,96,108,97,99,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,106,104,109,118,105,118],
[91,0,105,68,98,89,67,95],
[104,105,0,81,92,97,106,101],
[106,142,129,0,105,124,122,123],
[101,112,118,105,0,119,106,103],
[92,121,113,86,91,0,110,119],
[105,143,104,88,104,100,0,112],
[92,115,109,87,107,91,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,93,89,89,89,85,89],
[125,0,114,118,109,108,103,109],
[117,96,0,97,118,102,105,115],
[121,92,113,0,103,118,105,114],
[121,101,92,107,0,100,106,116],
[121,102,108,92,110,0,98,99],
[125,107,105,105,104,112,0,101],
[121,101,95,96,94,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,98,94,99,99,87],
[113,0,103,98,107,100,112,107],
[110,107,0,109,97,100,108,102],
[112,112,101,0,103,107,106,103],
[116,103,113,107,0,110,105,99],
[111,110,110,103,100,0,107,102],
[111,98,102,104,105,103,0,102],
[123,103,108,107,111,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,107,103,113,113,114,124],
[92,0,111,106,108,107,118,115],
[103,99,0,97,93,105,103,93],
[107,104,113,0,114,110,113,114],
[97,102,117,96,0,108,98,103],
[97,103,105,100,102,0,107,97],
[96,92,107,97,112,103,0,106],
[86,95,117,96,107,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,113,103,99,107,111,111],
[107,0,121,105,117,111,114,116],
[97,89,0,103,100,103,118,111],
[107,105,107,0,110,110,117,113],
[111,93,110,100,0,108,98,107],
[103,99,107,100,102,0,105,122],
[99,96,92,93,112,105,0,102],
[99,94,99,97,103,88,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,103,106,110,104,122,103],
[113,0,103,107,107,108,111,111],
[107,107,0,102,108,107,122,114],
[104,103,108,0,115,113,109,109],
[100,103,102,95,0,104,109,114],
[106,102,103,97,106,0,109,105],
[88,99,88,101,101,101,0,100],
[107,99,96,101,96,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,113,94,159,140,113,94],
[68,0,90,114,114,72,90,68],
[97,120,0,120,95,95,136,97],
[116,96,90,0,162,117,90,117],
[51,96,115,48,0,71,138,96],
[70,138,115,93,139,0,138,93],
[97,120,74,120,72,72,0,97],
[116,142,113,93,114,117,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,131,99,115,106,122,76],
[105,0,130,124,87,120,136,73],
[79,80,0,101,75,71,104,59],
[111,86,109,0,86,95,101,86],
[95,123,135,124,0,112,109,105],
[104,90,139,115,98,0,119,86],
[88,74,106,109,101,91,0,89],
[134,137,151,124,105,124,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,103,96,102,106,104,110],
[97,0,100,105,87,99,104,106],
[107,110,0,90,93,101,99,101],
[114,105,120,0,106,106,119,106],
[108,123,117,104,0,104,104,118],
[104,111,109,104,106,0,114,122],
[106,106,111,91,106,96,0,104],
[100,104,109,104,92,88,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,96,90,96,91,113,79],
[122,0,131,104,109,118,130,101],
[114,79,0,92,90,122,110,95],
[120,106,118,0,104,126,136,100],
[114,101,120,106,0,119,139,111],
[119,92,88,84,91,0,112,97],
[97,80,100,74,71,98,0,65],
[131,109,115,110,99,113,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,111,103,107,110,104,105],
[93,0,97,98,98,86,92,92],
[99,113,0,102,95,102,111,99],
[107,112,108,0,118,101,107,100],
[103,112,115,92,0,87,103,101],
[100,124,108,109,123,0,101,113],
[106,118,99,103,107,109,0,119],
[105,118,111,110,109,97,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,111,124,107,97,100],
[102,0,114,123,115,114,109,99],
[98,96,0,98,103,109,110,90],
[99,87,112,0,103,107,104,87],
[86,95,107,107,0,102,101,107],
[103,96,101,103,108,0,101,106],
[113,101,100,106,109,109,0,86],
[110,111,120,123,103,104,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,102,62,95,105,55,91],
[150,0,116,116,105,148,88,137],
[108,94,0,64,94,95,75,126],
[148,94,146,0,114,114,87,135],
[115,105,116,96,0,116,97,95],
[105,62,115,96,94,0,107,134],
[155,122,135,123,113,103,0,156],
[119,73,84,75,115,76,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,102,110,105,87,113,94],
[86,0,83,111,86,80,96,94],
[108,127,0,110,110,77,111,112],
[100,99,100,0,94,93,98,92],
[105,124,100,116,0,113,118,107],
[123,130,133,117,97,0,119,129],
[97,114,99,112,92,91,0,121],
[116,116,98,118,103,81,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,80,90,98,93,113],
[99,0,97,94,101,100,91,104],
[99,113,0,88,111,112,92,92],
[130,116,122,0,118,124,105,124],
[120,109,99,92,0,105,105,105],
[112,110,98,86,105,0,87,105],
[117,119,118,105,105,123,0,115],
[97,106,118,86,105,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,125,94,106,119,106],
[99,0,118,119,111,93,119,113],
[103,92,0,123,93,96,101,109],
[85,91,87,0,78,83,75,94],
[116,99,117,132,0,105,102,119],
[104,117,114,127,105,0,103,108],
[91,91,109,135,108,107,0,112],
[104,97,101,116,91,102,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,128,98,109,98,96,109],
[109,0,109,106,113,121,98,105],
[82,101,0,87,113,102,80,105],
[112,104,123,0,123,106,105,116],
[101,97,97,87,0,102,87,98],
[112,89,108,104,108,0,98,107],
[114,112,130,105,123,112,0,104],
[101,105,105,94,112,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,136,111,125,90,98,117],
[92,0,122,103,118,101,114,106],
[74,88,0,82,113,92,82,88],
[99,107,128,0,135,101,116,104],
[85,92,97,75,0,92,97,90],
[120,109,118,109,118,0,104,112],
[112,96,128,94,113,106,0,111],
[93,104,122,106,120,98,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,104,101,102,92,98,101],
[112,0,109,106,119,99,121,112],
[106,101,0,104,115,99,106,123],
[109,104,106,0,115,102,117,101],
[108,91,95,95,0,115,106,105],
[118,111,111,108,95,0,121,121],
[112,89,104,93,104,89,0,113],
[109,98,87,109,105,89,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,117,112,107,111,110],
[105,0,112,114,106,93,105,97],
[98,98,0,105,103,91,92,101],
[93,96,105,0,98,83,97,93],
[98,104,107,112,0,99,110,110],
[103,117,119,127,111,0,109,110],
[99,105,118,113,100,101,0,100],
[100,113,109,117,100,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,93,110,90,92,114,106],
[113,0,107,101,91,107,116,119],
[117,103,0,134,113,115,121,115],
[100,109,76,0,107,93,120,113],
[120,119,97,103,0,100,120,117],
[118,103,95,117,110,0,108,112],
[96,94,89,90,90,102,0,111],
[104,91,95,97,93,98,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,105,103,87,109,65,87],
[131,0,114,158,95,137,102,105],
[105,96,0,114,103,119,76,97],
[107,52,96,0,67,111,79,105],
[123,115,107,143,0,111,106,96],
[101,73,91,99,99,0,79,98],
[145,108,134,131,104,131,0,142],
[123,105,113,105,114,112,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,107,104,96,106,102],
[107,0,112,102,117,119,119,107],
[100,98,0,112,114,106,115,109],
[103,108,98,0,105,107,111,103],
[106,93,96,105,0,101,112,97],
[114,91,104,103,109,0,115,108],
[104,91,95,99,98,95,0,104],
[108,103,101,107,113,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,99,99,81,83,103],
[105,0,97,82,106,97,110,114],
[102,113,0,101,116,113,92,109],
[111,128,109,0,117,116,104,104],
[111,104,94,93,0,92,101,103],
[129,113,97,94,118,0,91,99],
[127,100,118,106,109,119,0,106],
[107,96,101,106,107,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,102,99,103,98,101,96],
[117,0,112,101,117,110,105,111],
[108,98,0,95,96,110,104,98],
[111,109,115,0,118,113,114,98],
[107,93,114,92,0,108,111,99],
[112,100,100,97,102,0,104,91],
[109,105,106,96,99,106,0,101],
[114,99,112,112,111,119,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,97,106,106,118,103,100],
[101,0,98,96,97,113,101,97],
[113,112,0,99,107,109,114,113],
[104,114,111,0,108,118,105,109],
[104,113,103,102,0,111,104,101],
[92,97,101,92,99,0,105,95],
[107,109,96,105,106,105,0,114],
[110,113,97,101,109,115,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,105,111,105,91,91],
[110,0,106,109,118,106,99,105],
[107,104,0,99,109,101,98,100],
[105,101,111,0,109,106,105,103],
[99,92,101,101,0,108,98,95],
[105,104,109,104,102,0,93,94],
[119,111,112,105,112,117,0,108],
[119,105,110,107,115,116,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,103,105,100,98,102,98],
[99,0,109,104,97,93,108,88],
[107,101,0,96,87,93,99,86],
[105,106,114,0,105,104,109,91],
[110,113,123,105,0,98,112,108],
[112,117,117,106,112,0,107,96],
[108,102,111,101,98,103,0,97],
[112,122,124,119,102,114,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,107,108,102,102,97,89],
[119,0,118,109,104,104,115,111],
[103,92,0,98,101,103,98,105],
[102,101,112,0,102,105,109,100],
[108,106,109,108,0,111,96,106],
[108,106,107,105,99,0,115,91],
[113,95,112,101,114,95,0,97],
[121,99,105,110,104,119,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,116,124,118,93,116,115],
[90,0,86,119,98,90,103,101],
[94,124,0,122,98,114,113,106],
[86,91,88,0,91,90,91,88],
[92,112,112,119,0,104,105,89],
[117,120,96,120,106,0,106,113],
[94,107,97,119,105,104,0,113],
[95,109,104,122,121,97,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,96,107,106,115,118],
[108,0,105,96,97,105,110,111],
[111,105,0,98,105,108,119,112],
[114,114,112,0,102,117,112,110],
[103,113,105,108,0,111,105,109],
[104,105,102,93,99,0,105,110],
[95,100,91,98,105,105,0,106],
[92,99,98,100,101,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,124,101,94,113,95,123],
[100,0,118,100,103,124,110,130],
[86,92,0,106,97,104,92,129],
[109,110,104,0,100,113,104,123],
[116,107,113,110,0,107,97,115],
[97,86,106,97,103,0,98,114],
[115,100,118,106,113,112,0,138],
[87,80,81,87,95,96,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,111,98,95,114,103],
[100,0,103,110,101,100,108,100],
[99,107,0,110,102,99,105,108],
[99,100,100,0,103,99,110,107],
[112,109,108,107,0,105,109,115],
[115,110,111,111,105,0,106,112],
[96,102,105,100,101,104,0,109],
[107,110,102,103,95,98,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,85,79,100,99,85,93],
[123,0,89,104,109,115,92,97],
[125,121,0,98,115,109,110,96],
[131,106,112,0,119,123,109,105],
[110,101,95,91,0,109,100,102],
[111,95,101,87,101,0,86,89],
[125,118,100,101,110,124,0,99],
[117,113,114,105,108,121,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,116,109,117,99,112,98],
[106,0,120,106,117,97,103,107],
[94,90,0,92,104,95,107,95],
[101,104,118,0,120,111,111,106],
[93,93,106,90,0,87,97,86],
[111,113,115,99,123,0,113,101],
[98,107,103,99,113,97,0,97],
[112,103,115,104,124,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,104,114,111,103,110],
[99,0,93,106,120,92,99,113],
[108,117,0,115,127,94,112,113],
[106,104,95,0,128,100,98,113],
[96,90,83,82,0,82,79,92],
[99,118,116,110,128,0,115,118],
[107,111,98,112,131,95,0,125],
[100,97,97,97,118,92,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,93,95,102,109,111],
[102,0,99,101,107,93,99,111],
[97,111,0,95,120,105,100,98],
[117,109,115,0,118,110,131,103],
[115,103,90,92,0,111,102,74],
[108,117,105,100,99,0,107,91],
[101,111,110,79,108,103,0,99],
[99,99,112,107,136,119,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,97,106,100,111,105],
[105,0,109,124,106,115,118,93],
[107,101,0,97,101,94,107,92],
[113,86,113,0,96,99,101,101],
[104,104,109,114,0,105,113,90],
[110,95,116,111,105,0,102,97],
[99,92,103,109,97,108,0,88],
[105,117,118,109,120,113,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,95,101,110,106,107,103],
[87,0,76,80,95,84,102,90],
[115,134,0,100,117,106,110,110],
[109,130,110,0,89,110,100,106],
[100,115,93,121,0,118,111,116],
[104,126,104,100,92,0,112,120],
[103,108,100,110,99,98,0,93],
[107,120,100,104,94,90,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,83,104,98,105,88,92],
[116,0,96,115,106,107,114,111],
[127,114,0,117,115,113,94,120],
[106,95,93,0,87,93,91,100],
[112,104,95,123,0,113,96,116],
[105,103,97,117,97,0,95,105],
[122,96,116,119,114,115,0,102],
[118,99,90,110,94,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,89,109,145,102,119,125],
[90,0,113,80,120,101,107,113],
[121,97,0,86,132,88,93,133],
[101,130,124,0,122,90,96,111],
[65,90,78,88,0,65,96,99],
[108,109,122,120,145,0,130,100],
[91,103,117,114,114,80,0,125],
[85,97,77,99,111,110,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,101,100,96,82,90,89],
[121,0,118,108,113,108,89,109],
[109,92,0,106,106,103,94,94],
[110,102,104,0,98,96,94,100],
[114,97,104,112,0,91,96,98],
[128,102,107,114,119,0,93,103],
[120,121,116,116,114,117,0,102],
[121,101,116,110,112,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,106,123,111,100,117,117],
[90,0,96,112,96,91,106,115],
[104,114,0,118,110,86,119,110],
[87,98,92,0,87,94,107,97],
[99,114,100,123,0,107,118,112],
[110,119,124,116,103,0,126,129],
[93,104,91,103,92,84,0,99],
[93,95,100,113,98,81,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,111,104,100,103,125,128],
[113,0,113,120,112,94,95,119],
[99,97,0,108,101,98,90,113],
[106,90,102,0,91,93,97,114],
[110,98,109,119,0,100,95,107],
[107,116,112,117,110,0,104,126],
[85,115,120,113,115,106,0,129],
[82,91,97,96,103,84,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,118,110,117,113,93,119],
[107,0,106,107,120,104,94,115],
[92,104,0,95,106,107,92,107],
[100,103,115,0,101,117,110,113],
[93,90,104,109,0,106,88,104],
[97,106,103,93,104,0,97,109],
[117,116,118,100,122,113,0,107],
[91,95,103,97,106,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,93,88,93,92,107],
[110,0,105,101,99,103,90,110],
[100,105,0,91,96,93,100,109],
[117,109,119,0,109,107,99,105],
[122,111,114,101,0,108,102,107],
[117,107,117,103,102,0,111,114],
[118,120,110,111,108,99,0,104],
[103,100,101,105,103,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,90,101,116,107,100,125],
[100,0,98,120,106,121,105,112],
[120,112,0,109,113,102,119,111],
[109,90,101,0,115,87,94,83],
[94,104,97,95,0,94,100,115],
[103,89,108,123,116,0,94,101],
[110,105,91,116,110,116,0,92],
[85,98,99,127,95,109,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,91,108,121,116,107,94],
[105,0,111,123,113,131,103,112],
[119,99,0,95,122,114,105,106],
[102,87,115,0,112,112,98,106],
[89,97,88,98,0,123,90,95],
[94,79,96,98,87,0,101,105],
[103,107,105,112,120,109,0,111],
[116,98,104,104,115,105,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,107,109,111,106,122],
[105,0,117,107,97,93,110,111],
[95,93,0,108,96,101,96,95],
[103,103,102,0,78,87,99,100],
[101,113,114,132,0,112,117,116],
[99,117,109,123,98,0,111,116],
[104,100,114,111,93,99,0,112],
[88,99,115,110,94,94,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,103,110,106,100,99,91],
[98,0,107,106,93,98,93,97],
[107,103,0,96,102,113,103,92],
[100,104,114,0,100,111,104,94],
[104,117,108,110,0,118,106,105],
[110,112,97,99,92,0,100,89],
[111,117,107,106,104,110,0,98],
[119,113,118,116,105,121,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,124,94,108,111,121,115],
[86,0,119,102,97,109,106,113],
[86,91,0,105,85,96,94,98],
[116,108,105,0,101,105,87,103],
[102,113,125,109,0,106,115,96],
[99,101,114,105,104,0,110,97],
[89,104,116,123,95,100,0,110],
[95,97,112,107,114,113,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,107,94,107,117,102],
[105,0,104,109,108,106,92,127],
[105,106,0,114,112,112,106,123],
[103,101,96,0,113,104,92,117],
[116,102,98,97,0,110,104,108],
[103,104,98,106,100,0,111,106],
[93,118,104,118,106,99,0,117],
[108,83,87,93,102,104,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,120,104,106,111,104,111],
[107,0,114,102,103,104,97,96],
[90,96,0,92,92,96,97,83],
[106,108,118,0,112,100,100,108],
[104,107,118,98,0,117,99,108],
[99,106,114,110,93,0,111,111],
[106,113,113,110,111,99,0,109],
[99,114,127,102,102,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,104,103,114,109,99,112],
[111,0,108,104,113,108,97,114],
[106,102,0,90,106,101,103,104],
[107,106,120,0,108,105,109,114],
[96,97,104,102,0,100,90,101],
[101,102,109,105,110,0,101,114],
[111,113,107,101,120,109,0,117],
[98,96,106,96,109,96,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,114,126,97,115,106,113],
[124,0,98,123,103,117,148,149],
[96,112,0,144,107,115,112,121],
[84,87,66,0,85,125,101,116],
[113,107,103,125,0,132,140,138],
[95,93,95,85,78,0,115,113],
[104,62,98,109,70,95,0,119],
[97,61,89,94,72,97,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,96,101,104,112,92,102],
[93,0,91,98,90,109,99,98],
[114,119,0,114,121,120,103,118],
[109,112,96,0,111,114,115,98],
[106,120,89,99,0,112,103,106],
[98,101,90,96,98,0,104,98],
[118,111,107,95,107,106,0,111],
[108,112,92,112,104,112,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,68,68,88,106,53,69],
[104,0,66,87,142,123,105,36],
[142,144,0,90,125,124,88,125],
[142,123,120,0,105,124,104,105],
[122,68,85,105,0,123,71,87],
[104,87,86,86,87,0,68,68],
[157,105,122,106,139,142,0,88],
[141,174,85,105,123,142,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,89,97,101,108,108,102],
[85,0,91,98,102,113,73,81],
[121,119,0,100,97,111,93,107],
[113,112,110,0,126,113,120,99],
[109,108,113,84,0,109,106,93],
[102,97,99,97,101,0,117,75],
[102,137,117,90,104,93,0,98],
[108,129,103,111,117,135,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,114,99,97,92,121,100],
[115,0,122,99,120,107,127,126],
[96,88,0,86,90,80,114,95],
[111,111,124,0,107,107,103,91],
[113,90,120,103,0,89,97,85],
[118,103,130,103,121,0,130,115],
[89,83,96,107,113,80,0,85],
[110,84,115,119,125,95,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,100,101,92,98,111,112],
[110,0,98,104,94,96,115,113],
[110,112,0,104,107,105,119,122],
[109,106,106,0,99,95,109,123],
[118,116,103,111,0,105,105,115],
[112,114,105,115,105,0,124,122],
[99,95,91,101,105,86,0,110],
[98,97,88,87,95,88,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,101,101,77,99,89,75],
[120,0,99,128,104,114,117,108],
[109,111,0,126,104,105,104,87],
[109,82,84,0,98,116,111,89],
[133,106,106,112,0,115,113,97],
[111,96,105,94,95,0,116,95],
[121,93,106,99,97,94,0,83],
[135,102,123,121,113,115,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,120,110,103,113,102],
[99,0,95,104,83,98,100,102],
[102,115,0,105,110,100,101,98],
[90,106,105,0,100,102,93,85],
[100,127,100,110,0,116,106,117],
[107,112,110,108,94,0,107,98],
[97,110,109,117,104,103,0,109],
[108,108,112,125,93,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,111,94,96,92,98,94],
[115,0,117,114,104,117,115,104],
[99,93,0,103,94,97,96,93],
[116,96,107,0,108,100,97,100],
[114,106,116,102,0,103,108,101],
[118,93,113,110,107,0,108,99],
[112,95,114,113,102,102,0,106],
[116,106,117,110,109,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,108,128,115,106,103,109],
[110,0,112,101,122,102,116,104],
[102,98,0,105,93,104,105,105],
[82,109,105,0,100,100,112,102],
[95,88,117,110,0,85,94,105],
[104,108,106,110,125,0,93,99],
[107,94,105,98,116,117,0,113],
[101,106,105,108,105,111,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,118,99,95,113,96,95],
[117,0,112,116,98,100,111,106],
[92,98,0,98,92,100,89,101],
[111,94,112,0,97,100,96,81],
[115,112,118,113,0,107,115,96],
[97,110,110,110,103,0,118,90],
[114,99,121,114,95,92,0,96],
[115,104,109,129,114,120,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,89,101,99,107,105],
[106,0,102,103,109,100,103,116],
[106,108,0,95,104,98,101,102],
[121,107,115,0,98,104,114,112],
[109,101,106,112,0,107,101,104],
[111,110,112,106,103,0,104,103],
[103,107,109,96,109,106,0,112],
[105,94,108,98,106,107,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,109,109,121,127,142,112],
[113,0,84,108,91,113,127,89],
[101,126,0,125,126,130,144,127],
[101,102,85,0,83,95,122,90],
[89,119,84,127,0,114,114,111],
[83,97,80,115,96,0,100,83],
[68,83,66,88,96,110,0,81],
[98,121,83,120,99,127,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,103,142,140,105,140,106],
[70,0,139,73,105,104,107,104],
[107,71,0,107,105,107,105,71],
[68,137,103,0,102,137,103,137],
[70,105,105,108,0,139,105,105],
[105,106,103,73,71,0,106,37],
[70,103,105,107,105,104,0,104],
[104,106,139,73,105,173,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,82,96,92,88,102,101],
[121,0,110,108,92,102,106,113],
[128,100,0,87,95,118,101,108],
[114,102,123,0,90,98,113,112],
[118,118,115,120,0,100,114,131],
[122,108,92,112,110,0,122,110],
[108,104,109,97,96,88,0,105],
[109,97,102,98,79,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,150,106,110,134,98],
[101,0,64,100,110,80,131,81],
[108,146,0,125,100,97,141,87],
[60,110,85,0,88,105,87,85],
[104,100,110,122,0,92,104,112],
[100,130,113,105,118,0,140,99],
[76,79,69,123,106,70,0,80],
[112,129,123,125,98,111,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,97,101,75,99,93,103],
[80,0,80,96,73,103,92,95],
[113,130,0,121,98,125,117,104],
[109,114,89,0,89,126,97,90],
[135,137,112,121,0,138,114,97],
[111,107,85,84,72,0,101,77],
[117,118,93,113,96,109,0,105],
[107,115,106,120,113,133,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,103,101,94,87,101,92],
[121,0,105,105,115,109,122,100],
[107,105,0,116,99,100,114,109],
[109,105,94,0,100,100,104,106],
[116,95,111,110,0,100,111,103],
[123,101,110,110,110,0,127,105],
[109,88,96,106,99,83,0,93],
[118,110,101,104,107,105,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,123,118,115,115,131,111],
[108,0,117,122,92,113,128,112],
[87,93,0,104,100,99,110,75],
[92,88,106,0,90,109,117,86],
[95,118,110,120,0,108,126,96],
[95,97,111,101,102,0,119,99],
[79,82,100,93,84,91,0,85],
[99,98,135,124,114,111,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,104,100,111,122,105,99],
[90,0,100,99,110,110,96,90],
[106,110,0,120,113,125,112,105],
[110,111,90,0,102,116,100,78],
[99,100,97,108,0,123,102,88],
[88,100,85,94,87,0,96,78],
[105,114,98,110,108,114,0,104],
[111,120,105,132,122,132,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,128,124,101,118,99,118],
[97,0,91,93,81,86,92,92],
[82,119,0,102,99,106,88,94],
[86,117,108,0,92,92,114,88],
[109,129,111,118,0,120,118,105],
[92,124,104,118,90,0,118,105],
[111,118,122,96,92,92,0,97],
[92,118,116,122,105,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,82,101,95,95,105,100],
[111,0,111,107,98,112,102,121],
[128,99,0,102,100,112,109,115],
[109,103,108,0,96,109,102,112],
[115,112,110,114,0,112,105,108],
[115,98,98,101,98,0,97,112],
[105,108,101,108,105,113,0,114],
[110,89,95,98,102,98,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,99,91,103,90,98,84],
[99,0,102,87,101,100,94,90],
[111,108,0,97,105,105,110,101],
[119,123,113,0,109,113,115,99],
[107,109,105,101,0,99,104,80],
[120,110,105,97,111,0,95,109],
[112,116,100,95,106,115,0,95],
[126,120,109,111,130,101,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,90,98,106,98,114],
[114,0,103,93,99,137,133,117],
[107,107,0,92,104,107,104,99],
[120,117,118,0,117,104,116,132],
[112,111,106,93,0,121,127,121],
[104,73,103,106,89,0,105,124],
[112,77,106,94,83,105,0,108],
[96,93,111,78,89,86,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,108,108,106,106,88,111],
[116,0,112,118,111,115,108,104],
[102,98,0,100,103,87,84,101],
[102,92,110,0,107,108,92,113],
[104,99,107,103,0,94,99,105],
[104,95,123,102,116,0,106,107],
[122,102,126,118,111,104,0,114],
[99,106,109,97,105,103,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,131,111,109,95,104],
[105,0,92,117,101,94,105,101],
[98,118,0,127,101,104,96,100],
[79,93,83,0,96,92,82,84],
[99,109,109,114,0,96,88,88],
[101,116,106,118,114,0,98,101],
[115,105,114,128,122,112,0,107],
[106,109,110,126,122,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,93,78,64,135,110,119],
[110,0,112,90,83,102,143,144],
[117,98,0,108,110,125,111,146],
[132,120,102,0,103,118,135,127],
[146,127,100,107,0,116,142,152],
[75,108,85,92,94,0,103,153],
[100,67,99,75,68,107,0,90],
[91,66,64,83,58,57,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,96,112,99,102,94],
[109,0,98,93,112,95,114,96],
[113,112,0,119,113,100,105,103],
[114,117,91,0,118,89,106,92],
[98,98,97,92,0,92,97,88],
[111,115,110,121,118,0,113,98],
[108,96,105,104,113,97,0,105],
[116,114,107,118,122,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,117,108,106,105,103],
[103,0,98,108,107,97,100,106],
[112,112,0,117,108,108,103,103],
[93,102,93,0,104,94,89,96],
[102,103,102,106,0,104,96,97],
[104,113,102,116,106,0,89,101],
[105,110,107,121,114,121,0,99],
[107,104,107,114,113,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,116,108,98,102,105],
[112,0,117,113,115,130,98,117],
[103,93,0,101,99,109,96,116],
[94,97,109,0,100,113,102,107],
[102,95,111,110,0,103,112,103],
[112,80,101,97,107,0,94,101],
[108,112,114,108,98,116,0,115],
[105,93,94,103,107,109,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,112,87,83,90,91,105],
[112,0,106,101,74,85,82,98],
[98,104,0,116,82,79,96,90],
[123,109,94,0,89,85,71,103],
[127,136,128,121,0,110,117,95],
[120,125,131,125,100,0,131,125],
[119,128,114,139,93,79,0,116],
[105,112,120,107,115,85,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,108,92,94,128,105],
[103,0,106,121,94,90,115,115],
[102,104,0,113,104,106,97,101],
[102,89,97,0,99,93,119,101],
[118,116,106,111,0,99,110,102],
[116,120,104,117,111,0,120,113],
[82,95,113,91,100,90,0,110],
[105,95,109,109,108,97,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,90,114,116,107,133,109],
[85,0,88,96,103,103,112,82],
[120,122,0,107,109,113,131,82],
[96,114,103,0,129,126,137,107],
[94,107,101,81,0,103,132,86],
[103,107,97,84,107,0,120,83],
[77,98,79,73,78,90,0,75],
[101,128,128,103,124,127,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,110,103,95,109,99,106],
[116,0,120,100,102,100,92,104],
[100,90,0,104,110,72,107,110],
[107,110,106,0,99,107,110,115],
[115,108,100,111,0,102,109,115],
[101,110,138,103,108,0,109,114],
[111,118,103,100,101,101,0,124],
[104,106,100,95,95,96,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,107,119,103,105,119],
[103,0,109,95,117,105,108,96],
[98,101,0,101,112,100,87,92],
[103,115,109,0,117,103,104,104],
[91,93,98,93,0,92,94,91],
[107,105,110,107,118,0,113,99],
[105,102,123,106,116,97,0,102],
[91,114,118,106,119,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,91,105,101,104,113],
[102,0,105,105,114,107,106,111],
[98,105,0,104,114,105,109,109],
[119,105,106,0,117,102,113,112],
[105,96,96,93,0,101,96,90],
[109,103,105,108,109,0,103,110],
[106,104,101,97,114,107,0,115],
[97,99,101,98,120,100,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,115,121,114,105,122,107],
[120,0,112,118,111,113,110,100],
[95,98,0,118,107,111,108,92],
[89,92,92,0,103,104,112,99],
[96,99,103,107,0,94,114,79],
[105,97,99,106,116,0,102,87],
[88,100,102,98,96,108,0,90],
[103,110,118,111,131,123,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,106,101,128,128,116,135],
[94,0,108,109,110,125,125,124],
[104,102,0,114,107,115,123,126],
[109,101,96,0,113,108,106,123],
[82,100,103,97,0,111,105,108],
[82,85,95,102,99,0,120,100],
[94,85,87,104,105,90,0,98],
[75,86,84,87,102,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,118,103,111,120,123,111],
[100,0,114,104,110,109,118,108],
[92,96,0,101,96,107,92,80],
[107,106,109,0,112,119,116,96],
[99,100,114,98,0,102,116,104],
[90,101,103,91,108,0,115,92],
[87,92,118,94,94,95,0,81],
[99,102,130,114,106,118,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,91,91,91,86,102,94],
[119,0,113,112,104,102,99,97],
[119,97,0,104,107,120,118,110],
[119,98,106,0,108,86,104,97],
[119,106,103,102,0,110,100,99],
[124,108,90,124,100,0,118,106],
[108,111,92,106,110,92,0,103],
[116,113,100,113,111,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,109,104,108,106,103],
[104,0,108,114,109,109,104,113],
[112,102,0,88,101,95,99,107],
[101,96,122,0,121,114,107,120],
[106,101,109,89,0,93,82,101],
[102,101,115,96,117,0,101,113],
[104,106,111,103,128,109,0,124],
[107,97,103,90,109,97,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,125,117,108,114,118,102],
[96,0,112,106,111,108,111,105],
[85,98,0,93,86,83,96,100],
[93,104,117,0,116,98,111,117],
[102,99,124,94,0,101,101,115],
[96,102,127,112,109,0,112,104],
[92,99,114,99,109,98,0,101],
[108,105,110,93,95,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,98,109,107,110,96],
[112,0,105,108,113,108,103,102],
[110,105,0,105,116,111,116,101],
[112,102,105,0,112,109,100,103],
[101,97,94,98,0,107,94,96],
[103,102,99,101,103,0,108,99],
[100,107,94,110,116,102,0,107],
[114,108,109,107,114,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,85,90,114,95,110],
[102,0,104,94,85,115,86,88],
[108,106,0,99,88,122,83,103],
[125,116,111,0,106,127,108,83],
[120,125,122,104,0,114,100,105],
[96,95,88,83,96,0,88,89],
[115,124,127,102,110,122,0,104],
[100,122,107,127,105,121,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,115,93,122,112,110,114],
[80,0,94,85,114,94,89,95],
[95,116,0,107,112,110,109,96],
[117,125,103,0,134,121,120,119],
[88,96,98,76,0,99,89,92],
[98,116,100,89,111,0,100,111],
[100,121,101,90,121,110,0,109],
[96,115,114,91,118,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,103,105,101,94,112,89],
[118,0,117,116,114,116,119,105],
[107,93,0,106,101,105,113,91],
[105,94,104,0,113,121,104,106],
[109,96,109,97,0,99,115,96],
[116,94,105,89,111,0,118,113],
[98,91,97,106,95,92,0,89],
[121,105,119,104,114,97,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,90,94,122,94,63,78],
[105,0,95,121,134,87,97,105],
[120,115,0,113,152,80,134,136],
[116,89,97,0,121,119,103,70],
[88,76,58,89,0,96,80,106],
[116,123,130,91,114,0,115,114],
[147,113,76,107,130,95,0,108],
[132,105,74,140,104,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,76,77,52,50,92,64],
[159,0,145,155,77,78,119,77],
[134,65,0,117,67,79,92,90],
[133,55,93,0,65,53,81,66],
[158,133,143,145,0,118,118,104],
[160,132,131,157,92,0,106,119],
[118,91,118,129,92,104,0,103],
[146,133,120,144,106,91,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,99,105,119,116,103],
[102,0,109,99,107,83,107,94],
[111,101,0,128,77,109,121,111],
[111,111,82,0,99,108,109,81],
[105,103,133,111,0,117,113,103],
[91,127,101,102,93,0,102,90],
[94,103,89,101,97,108,0,87],
[107,116,99,129,107,120,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,142,93,118,114,93,105],
[69,0,117,81,82,68,81,79],
[68,93,0,82,36,81,93,45],
[117,129,128,0,129,104,117,104],
[92,128,174,81,0,91,115,91],
[96,142,129,106,119,0,121,81],
[117,129,117,93,95,89,0,91],
[105,131,165,106,119,129,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,95,96,96,115,130],
[111,0,159,143,110,112,95,162],
[111,51,0,79,112,65,98,130],
[115,67,131,0,113,131,113,147],
[114,100,98,97,0,97,98,131],
[114,98,145,79,113,0,98,146],
[95,115,112,97,112,112,0,147],
[80,48,80,63,79,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,97,119,122,112,103,114],
[101,0,100,115,104,106,102,112],
[113,110,0,117,105,109,104,106],
[91,95,93,0,102,88,77,97],
[88,106,105,108,0,98,89,111],
[98,104,101,122,112,0,99,116],
[107,108,106,133,121,111,0,105],
[96,98,104,113,99,94,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,119,126,119,121,119],
[103,0,105,105,111,99,121,100],
[110,105,0,107,125,102,104,118],
[91,105,103,0,114,96,103,110],
[84,99,85,96,0,82,107,103],
[91,111,108,114,128,0,105,98],
[89,89,106,107,103,105,0,108],
[91,110,92,100,107,112,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,92,123,96,107,101,98],
[118,0,105,117,97,97,103,99],
[118,105,0,126,102,104,102,100],
[87,93,84,0,88,89,88,83],
[114,113,108,122,0,101,105,109],
[103,113,106,121,109,0,117,124],
[109,107,108,122,105,93,0,115],
[112,111,110,127,101,86,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,115,108,102,123,107,106],
[97,0,111,99,108,117,102,101],
[95,99,0,95,105,102,107,111],
[102,111,115,0,118,115,105,120],
[108,102,105,92,0,113,96,112],
[87,93,108,95,97,0,98,98],
[103,108,103,105,114,112,0,113],
[104,109,99,90,98,112,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,117,133,115,117,114,109],
[106,0,103,136,106,111,108,114],
[93,107,0,131,104,101,112,105],
[77,74,79,0,92,91,92,87],
[95,104,106,118,0,95,116,101],
[93,99,109,119,115,0,109,107],
[96,102,98,118,94,101,0,101],
[101,96,105,123,109,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,99,109,112,107,114,107],
[91,0,96,86,99,91,102,96],
[111,114,0,99,104,99,100,98],
[101,124,111,0,111,109,112,106],
[98,111,106,99,0,115,103,106],
[103,119,111,101,95,0,97,97],
[96,108,110,98,107,113,0,101],
[103,114,112,104,104,113,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,97,99,93,113,106,97],
[119,0,106,102,116,106,107,117],
[113,104,0,107,107,121,102,117],
[111,108,103,0,102,122,118,115],
[117,94,103,108,0,124,110,114],
[97,104,89,88,86,0,98,103],
[104,103,108,92,100,112,0,92],
[113,93,93,95,96,107,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,137,105,109,95,121,108],
[107,0,127,133,115,121,126,90],
[73,83,0,91,106,83,97,82],
[105,77,119,0,107,115,100,104],
[101,95,104,103,0,104,89,93],
[115,89,127,95,106,0,127,98],
[89,84,113,110,121,83,0,91],
[102,120,128,106,117,112,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,99,108,110,107,107,108],
[98,0,101,95,106,102,102,111],
[111,109,0,108,113,111,104,109],
[102,115,102,0,111,105,97,112],
[100,104,97,99,0,111,102,102],
[103,108,99,105,99,0,96,102],
[103,108,106,113,108,114,0,107],
[102,99,101,98,108,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,91,119,55,101,106,100],
[116,0,87,105,94,90,89,113],
[119,123,0,102,109,123,119,93],
[91,105,108,0,67,92,93,81],
[155,116,101,143,0,130,133,110],
[109,120,87,118,80,0,118,109],
[104,121,91,117,77,92,0,105],
[110,97,117,129,100,101,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,117,118,120,113,104,110],
[92,0,103,96,88,105,103,95],
[93,107,0,104,107,102,104,116],
[92,114,106,0,106,100,104,100],
[90,122,103,104,0,100,112,98],
[97,105,108,110,110,0,99,90],
[106,107,106,106,98,111,0,101],
[100,115,94,110,112,120,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,92,93,122,61,31,122],
[120,0,92,93,122,152,120,122],
[118,118,0,61,59,118,118,90],
[117,117,149,0,151,119,57,86],
[88,88,151,59,0,59,88,88],
[149,58,92,91,151,0,89,91],
[179,90,92,153,122,121,0,91],
[88,88,120,124,122,119,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,102,98,97,102,99,88],
[117,0,116,108,108,103,111,114],
[108,94,0,104,101,109,94,94],
[112,102,106,0,104,105,111,93],
[113,102,109,106,0,108,98,105],
[108,107,101,105,102,0,100,107],
[111,99,116,99,112,110,0,95],
[122,96,116,117,105,103,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,119,107,101,114,114],
[103,0,111,109,100,108,116,116],
[98,99,0,99,103,99,103,101],
[91,101,111,0,95,107,114,121],
[103,110,107,115,0,91,111,102],
[109,102,111,103,119,0,118,120],
[96,94,107,96,99,92,0,103],
[96,94,109,89,108,90,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,98,108,112,103,119],
[106,0,105,102,103,110,104,108],
[109,105,0,112,100,99,105,113],
[112,108,98,0,102,111,107,116],
[102,107,110,108,0,102,108,111],
[98,100,111,99,108,0,107,106],
[107,106,105,103,102,103,0,104],
[91,102,97,94,99,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,82,48,131,65,130,81],
[162,0,66,49,116,81,130,98],
[128,144,0,112,130,95,112,112],
[162,161,98,0,132,128,130,130],
[79,94,80,78,0,111,112,95],
[145,129,115,82,99,0,130,115],
[80,80,98,80,98,80,0,97],
[129,112,98,80,115,95,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,98,100,105,113,108,98],
[98,0,101,107,121,122,111,103],
[112,109,0,98,106,114,101,108],
[110,103,112,0,117,104,104,105],
[105,89,104,93,0,97,109,97],
[97,88,96,106,113,0,99,88],
[102,99,109,106,101,111,0,103],
[112,107,102,105,113,122,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,131,101,102,113,115,103],
[97,0,115,96,98,112,107,90],
[79,95,0,92,84,93,110,90],
[109,114,118,0,107,112,120,100],
[108,112,126,103,0,129,132,106],
[97,98,117,98,81,0,116,87],
[95,103,100,90,78,94,0,78],
[107,120,120,110,104,123,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,107,110,114,105,98],
[102,0,91,98,116,112,101,103],
[104,119,0,104,113,125,112,117],
[103,112,106,0,117,115,104,113],
[100,94,97,93,0,115,108,98],
[96,98,85,95,95,0,99,106],
[105,109,98,106,102,111,0,107],
[112,107,93,97,112,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,124,85,105,156,158,124],
[71,0,123,140,70,142,157,108],
[86,87,0,86,102,174,155,107],
[125,70,124,0,107,141,143,125],
[105,140,108,103,0,140,123,142],
[54,68,36,69,70,0,88,53],
[52,53,55,67,87,122,0,73],
[86,102,103,85,68,157,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,92,104,117,108,92,79],
[95,0,88,97,113,92,95,97],
[118,122,0,112,127,101,116,86],
[106,113,98,0,129,102,111,106],
[93,97,83,81,0,95,88,89],
[102,118,109,108,115,0,106,92],
[118,115,94,99,122,104,0,97],
[131,113,124,104,121,118,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,117,116,92,109,101,117],
[101,0,87,101,95,121,104,107],
[93,123,0,114,106,115,123,116],
[94,109,96,0,93,112,130,109],
[118,115,104,117,0,122,127,114],
[101,89,95,98,88,0,119,106],
[109,106,87,80,83,91,0,97],
[93,103,94,101,96,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,97,109,100,94,102,112],
[108,0,108,121,99,105,107,117],
[113,102,0,113,84,102,109,113],
[101,89,97,0,92,96,100,99],
[110,111,126,118,0,112,116,105],
[116,105,108,114,98,0,109,112],
[108,103,101,110,94,101,0,108],
[98,93,97,111,105,98,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,107,117,110,122,104,100],
[114,0,95,113,111,109,109,110],
[103,115,0,116,122,119,113,112],
[93,97,94,0,120,113,110,106],
[100,99,88,90,0,111,87,95],
[88,101,91,97,99,0,102,102],
[106,101,97,100,123,108,0,106],
[110,100,98,104,115,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,98,109,98,111,109,96],
[85,0,89,103,110,110,92,98],
[112,121,0,88,123,120,106,104],
[101,107,122,0,109,111,90,93],
[112,100,87,101,0,118,82,88],
[99,100,90,99,92,0,70,88],
[101,118,104,120,128,140,0,111],
[114,112,106,117,122,122,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,140,106,99,115,117,108],
[110,0,132,101,104,113,113,130],
[70,78,0,96,86,95,99,105],
[104,109,114,0,105,110,106,94],
[111,106,124,105,0,122,119,111],
[95,97,115,100,88,0,97,105],
[93,97,111,104,91,113,0,95],
[102,80,105,116,99,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,114,105,90,98,99],
[100,0,106,111,95,105,93,97],
[109,104,0,107,98,102,107,104],
[96,99,103,0,95,105,96,107],
[105,115,112,115,0,109,99,109],
[120,105,108,105,101,0,89,104],
[112,117,103,114,111,121,0,117],
[111,113,106,103,101,106,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,101,114,113,101,93,113],
[69,0,96,99,89,96,74,102],
[109,114,0,99,113,102,96,114],
[96,111,111,0,111,101,99,111],
[97,121,97,99,0,113,108,119],
[109,114,108,109,97,0,102,124],
[117,136,114,111,102,108,0,131],
[97,108,96,99,91,86,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,118,94,94,106,146,92],
[77,0,116,103,115,103,146,87],
[92,94,0,78,79,51,94,49],
[116,107,132,0,52,103,159,104],
[116,95,131,158,0,102,134,119],
[104,107,159,107,108,0,146,91],
[64,64,116,51,76,64,0,75],
[118,123,161,106,91,119,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,103,111,109,113,110],
[101,0,105,99,109,109,113,115],
[102,105,0,106,108,104,108,107],
[107,111,104,0,113,104,117,110],
[99,101,102,97,0,101,107,104],
[101,101,106,106,109,0,110,105],
[97,97,102,93,103,100,0,113],
[100,95,103,100,106,105,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,101,104,101,104,90],
[103,0,106,102,109,113,96,116],
[106,104,0,110,97,106,107,112],
[109,108,100,0,109,121,118,108],
[106,101,113,101,0,110,112,106],
[109,97,104,89,100,0,93,106],
[106,114,103,92,98,117,0,94],
[120,94,98,102,104,104,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,110,103,106,112,111,111],
[89,0,103,96,102,98,106,124],
[100,107,0,94,101,98,101,118],
[107,114,116,0,96,114,102,118],
[104,108,109,114,0,123,93,117],
[98,112,112,96,87,0,103,97],
[99,104,109,108,117,107,0,98],
[99,86,92,92,93,113,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,140,106,72,106,105,103],
[36,0,73,73,73,73,73,36],
[70,137,0,105,107,69,106,139],
[104,137,105,0,141,141,106,104],
[138,137,103,69,0,69,105,103],
[104,137,141,69,141,0,105,137],
[105,137,104,104,105,105,0,104],
[107,174,71,106,107,73,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,97,107,85,99,98],
[107,0,112,102,107,105,114,101],
[99,98,0,101,100,98,105,103],
[113,108,109,0,107,102,113,105],
[103,103,110,103,0,95,104,97],
[125,105,112,108,115,0,111,111],
[111,96,105,97,106,99,0,108],
[112,109,107,105,113,99,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,102,104,99,111,106],
[104,0,105,113,114,103,115,108],
[108,105,0,108,104,103,106,103],
[108,97,102,0,104,103,100,109],
[106,96,106,106,0,100,108,110],
[111,107,107,107,110,0,105,120],
[99,95,104,110,102,105,0,114],
[104,102,107,101,100,90,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,117,96,97,98,107,115],
[101,0,91,104,106,105,97,117],
[93,119,0,89,100,119,103,112],
[114,106,121,0,97,111,111,110],
[113,104,110,113,0,118,109,130],
[112,105,91,99,92,0,80,94],
[103,113,107,99,101,130,0,105],
[95,93,98,100,80,116,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,119,97,108,92,103,97],
[80,0,133,82,115,89,124,98],
[91,77,0,86,107,84,130,71],
[113,128,124,0,130,115,96,115],
[102,95,103,80,0,89,102,83],
[118,121,126,95,121,0,103,92],
[107,86,80,114,108,107,0,93],
[113,112,139,95,127,118,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,99,92,102,110,100,105],
[100,0,104,104,102,107,105,111],
[111,106,0,97,119,114,103,107],
[118,106,113,0,105,112,106,101],
[108,108,91,105,0,112,98,107],
[100,103,96,98,98,0,97,97],
[110,105,107,104,112,113,0,116],
[105,99,103,109,103,113,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,114,125,107,126,107,123],
[107,0,108,111,113,119,102,127],
[96,102,0,90,110,93,87,110],
[85,99,120,0,100,94,101,113],
[103,97,100,110,0,114,91,105],
[84,91,117,116,96,0,81,107],
[103,108,123,109,119,129,0,122],
[87,83,100,97,105,103,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,110,119,93,137,110,102],
[101,0,122,116,68,141,144,106],
[100,88,0,99,83,117,110,109],
[91,94,111,0,92,136,97,92],
[117,142,127,118,0,152,136,100],
[73,69,93,74,58,0,77,64],
[100,66,100,113,74,133,0,91],
[108,104,101,118,110,146,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,93,79,89,102,100,91],
[126,0,117,105,101,110,124,109],
[117,93,0,89,80,114,117,119],
[131,105,121,0,111,105,107,118],
[121,109,130,99,0,118,138,120],
[108,100,96,105,92,0,107,117],
[110,86,93,103,72,103,0,99],
[119,101,91,92,90,93,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,109,94,101,116,106,116],
[92,0,101,105,95,93,98,115],
[101,109,0,97,99,88,104,105],
[116,105,113,0,114,106,113,130],
[109,115,111,96,0,105,111,123],
[94,117,122,104,105,0,120,113],
[104,112,106,97,99,90,0,124],
[94,95,105,80,87,97,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,117,109,103,92,108,118],
[102,0,114,102,98,96,99,109],
[93,96,0,100,98,87,100,108],
[101,108,110,0,108,94,101,105],
[107,112,112,102,0,105,101,111],
[118,114,123,116,105,0,109,124],
[102,111,110,109,109,101,0,101],
[92,101,102,105,99,86,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,99,128,128,127,142,157],
[57,0,114,112,101,98,142,101],
[111,96,0,98,100,83,127,114],
[82,98,112,0,100,128,86,113],
[82,109,110,110,0,108,143,113],
[83,112,127,82,102,0,100,85],
[68,68,83,124,67,110,0,84],
[53,109,96,97,97,125,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,113,123,105,119,114,121],
[100,0,113,101,104,105,93,92],
[97,97,0,101,93,108,95,101],
[87,109,109,0,86,114,85,106],
[105,106,117,124,0,125,101,102],
[91,105,102,96,85,0,78,96],
[96,117,115,125,109,132,0,116],
[89,118,109,104,108,114,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,102,105,111,92,120,108],
[114,0,99,87,115,95,114,101],
[108,111,0,94,104,102,113,119],
[105,123,116,0,120,109,125,122],
[99,95,106,90,0,88,131,138],
[118,115,108,101,122,0,125,139],
[90,96,97,85,79,85,0,129],
[102,109,91,88,72,71,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,97,100,98,89,94,102],
[124,0,109,119,115,103,126,114],
[113,101,0,107,100,97,93,105],
[110,91,103,0,93,100,94,99],
[112,95,110,117,0,104,104,100],
[121,107,113,110,106,0,95,112],
[116,84,117,116,106,115,0,103],
[108,96,105,111,110,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,96,81,93,105,94,81],
[111,0,92,97,88,108,86,65],
[114,118,0,91,97,114,94,85],
[129,113,119,0,106,126,99,95],
[117,122,113,104,0,121,98,108],
[105,102,96,84,89,0,79,77],
[116,124,116,111,112,131,0,97],
[129,145,125,115,102,133,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,94,91,90,82,91,93],
[124,0,104,96,113,113,106,119],
[116,106,0,98,110,112,106,110],
[119,114,112,0,110,107,104,106],
[120,97,100,100,0,104,119,108],
[128,97,98,103,106,0,115,97],
[119,104,104,106,91,95,0,109],
[117,91,100,104,102,113,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,87,89,76,89,92,87],
[132,0,124,99,124,125,117,130],
[123,86,0,95,102,127,96,113],
[121,111,115,0,72,105,103,123],
[134,86,108,138,0,105,107,146],
[121,85,83,105,105,0,109,132],
[118,93,114,107,103,101,0,113],
[123,80,97,87,64,78,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,113,106,104,106,107,100],
[125,0,131,112,111,100,123,123],
[97,79,0,104,106,105,102,101],
[104,98,106,0,111,92,102,108],
[106,99,104,99,0,109,94,92],
[104,110,105,118,101,0,124,111],
[103,87,108,108,116,86,0,120],
[110,87,109,102,118,99,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,113,91,108,89,119,115],
[90,0,125,102,102,91,106,131],
[97,85,0,100,96,87,82,84],
[119,108,110,0,100,101,128,122],
[102,108,114,110,0,106,108,118],
[121,119,123,109,104,0,108,135],
[91,104,128,82,102,102,0,104],
[95,79,126,88,92,75,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,96,101,96,91,115,75],
[107,0,91,108,103,99,119,102],
[114,119,0,100,108,104,105,100],
[109,102,110,0,87,99,116,114],
[114,107,102,123,0,106,119,106],
[119,111,106,111,104,0,117,116],
[95,91,105,94,91,93,0,91],
[135,108,110,96,104,94,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,104,88,100,101,106,113],
[108,0,101,113,101,104,107,113],
[106,109,0,119,91,106,117,108],
[122,97,91,0,104,104,112,109],
[110,109,119,106,0,104,108,103],
[109,106,104,106,106,0,102,103],
[104,103,93,98,102,108,0,98],
[97,97,102,101,107,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,110,107,104,94,104,103],
[99,0,95,97,94,89,93,88],
[100,115,0,118,117,102,102,108],
[103,113,92,0,103,96,99,96],
[106,116,93,107,0,97,100,102],
[116,121,108,114,113,0,110,103],
[106,117,108,111,110,100,0,105],
[107,122,102,114,108,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,96,67,117,75,106],
[100,0,100,107,101,86,117,136],
[106,110,0,101,76,133,97,112],
[114,103,109,0,116,138,114,125],
[143,109,134,94,0,134,102,128],
[93,124,77,72,76,0,106,107],
[135,93,113,96,108,104,0,122],
[104,74,98,85,82,103,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,74,99,86,92,97,84],
[128,0,120,101,117,113,111,107],
[136,90,0,107,106,89,107,102],
[111,109,103,0,109,83,112,106],
[124,93,104,101,0,101,101,106],
[118,97,121,127,109,0,123,108],
[113,99,103,98,109,87,0,111],
[126,103,108,104,104,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,95,92,103,97,98,103],
[110,0,98,104,93,93,92,92],
[115,112,0,100,96,102,111,96],
[118,106,110,0,107,107,105,100],
[107,117,114,103,0,100,103,107],
[113,117,108,103,110,0,101,99],
[112,118,99,105,107,109,0,96],
[107,118,114,110,103,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,125,100,92,109,133,114],
[96,0,132,85,92,117,114,106],
[85,78,0,81,74,99,93,95],
[110,125,129,0,111,107,119,99],
[118,118,136,99,0,114,120,121],
[101,93,111,103,96,0,110,89],
[77,96,117,91,90,100,0,89],
[96,104,115,111,89,121,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,112,103,105,112,108,107],
[119,0,113,106,104,112,105,115],
[98,97,0,100,100,105,93,109],
[107,104,110,0,102,107,104,112],
[105,106,110,108,0,103,112,108],
[98,98,105,103,107,0,106,107],
[102,105,117,106,98,104,0,115],
[103,95,101,98,102,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,98,90,94,93,83,104],
[118,0,101,96,99,100,102,104],
[112,109,0,100,110,102,92,105],
[120,114,110,0,107,109,105,105],
[116,111,100,103,0,108,100,106],
[117,110,108,101,102,0,102,97],
[127,108,118,105,110,108,0,110],
[106,106,105,105,104,113,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,108,103,105,109,94],
[101,0,112,101,95,107,104,108],
[106,98,0,110,97,110,100,99],
[102,109,100,0,108,103,106,105],
[107,115,113,102,0,108,121,103],
[105,103,100,107,102,0,95,98],
[101,106,110,104,89,115,0,100],
[116,102,111,105,107,112,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,108,115,118,105,110,112],
[113,0,106,119,117,97,114,123],
[102,104,0,101,103,95,96,104],
[95,91,109,0,108,96,109,114],
[92,93,107,102,0,90,100,111],
[105,113,115,114,120,0,117,124],
[100,96,114,101,110,93,0,110],
[98,87,106,96,99,86,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,100,106,117,99,105,108],
[97,0,96,106,102,104,89,118],
[110,114,0,121,103,95,105,119],
[104,104,89,0,121,106,101,121],
[93,108,107,89,0,102,97,113],
[111,106,115,104,108,0,93,123],
[105,121,105,109,113,117,0,129],
[102,92,91,89,97,87,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,126,129,110,113,107,115],
[112,0,123,116,117,99,114,121],
[84,87,0,104,117,104,90,114],
[81,94,106,0,98,85,90,91],
[100,93,93,112,0,108,87,105],
[97,111,106,125,102,0,115,105],
[103,96,120,120,123,95,0,126],
[95,89,96,119,105,105,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,68,115,97,95,115,100],
[162,0,84,146,146,98,146,114],
[142,126,0,114,95,142,146,114],
[95,64,96,0,80,80,112,64],
[113,64,115,130,0,115,147,114],
[115,112,68,130,95,0,131,83],
[95,64,64,98,63,79,0,81],
[110,96,96,146,96,127,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,97,94,106,88,85,114],
[140,0,122,104,130,121,122,115],
[113,88,0,91,109,109,98,97],
[116,106,119,0,145,126,94,120],
[104,80,101,65,0,98,62,99],
[122,89,101,84,112,0,79,107],
[125,88,112,116,148,131,0,110],
[96,95,113,90,111,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,92,99,85,94,90,90],
[114,0,96,105,90,97,104,106],
[118,114,0,100,100,102,103,107],
[111,105,110,0,81,97,102,94],
[125,120,110,129,0,114,104,113],
[116,113,108,113,96,0,109,102],
[120,106,107,108,106,101,0,102],
[120,104,103,116,97,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,95,115,93,111,75,133],
[126,0,116,124,105,97,124,172],
[115,94,0,115,72,75,114,132],
[95,86,95,0,104,74,93,134],
[117,105,138,106,0,94,127,155],
[99,113,135,136,116,0,136,154],
[135,86,96,117,83,74,0,163],
[77,38,78,76,55,56,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,112,109,108,105,102],
[114,0,124,111,102,109,106,110],
[111,86,0,115,99,108,104,112],
[98,99,95,0,95,86,103,97],
[101,108,111,115,0,102,96,99],
[102,101,102,124,108,0,106,109],
[105,104,106,107,114,104,0,115],
[108,100,98,113,111,101,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,104,109,100,117,95,105],
[86,0,98,113,91,102,89,79],
[106,112,0,118,103,111,99,110],
[101,97,92,0,90,94,85,84],
[110,119,107,120,0,120,107,102],
[93,108,99,116,90,0,91,93],
[115,121,111,125,103,119,0,103],
[105,131,100,126,108,117,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,111,118,120,103,97,104],
[96,0,105,107,105,114,93,103],
[99,105,0,119,109,110,103,94],
[92,103,91,0,93,77,78,97],
[90,105,101,117,0,115,111,116],
[107,96,100,133,95,0,95,92],
[113,117,107,132,99,115,0,129],
[106,107,116,113,94,118,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,120,103,130,105,132,128],
[82,0,117,78,105,107,105,105],
[90,93,0,105,116,132,79,78],
[107,132,105,0,168,104,119,131],
[80,105,94,42,0,94,67,81],
[105,103,78,106,116,0,117,91],
[78,105,131,91,143,93,0,92],
[82,105,132,79,129,119,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,117,92,126,86,120,112],
[113,0,119,112,126,106,104,120],
[93,91,0,95,123,99,108,110],
[118,98,115,0,139,115,121,106],
[84,84,87,71,0,68,95,92],
[124,104,111,95,142,0,113,112],
[90,106,102,89,115,97,0,102],
[98,90,100,104,118,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,116,96,117,113,110,108],
[103,0,111,100,105,105,108,111],
[94,99,0,92,101,115,103,104],
[114,110,118,0,110,108,118,101],
[93,105,109,100,0,112,113,111],
[97,105,95,102,98,0,103,105],
[100,102,107,92,97,107,0,107],
[102,99,106,109,99,105,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,100,100,103,102,99],
[111,0,108,109,112,105,119,110],
[99,102,0,90,91,99,107,87],
[110,101,120,0,102,103,119,99],
[110,98,119,108,0,102,112,118],
[107,105,111,107,108,0,108,109],
[108,91,103,91,98,102,0,95],
[111,100,123,111,92,101,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,86,112,69,85,73,75],
[141,0,126,139,103,131,104,131],
[124,84,0,152,116,138,106,127],
[98,71,58,0,80,61,81,73],
[141,107,94,130,0,128,96,127],
[125,79,72,149,82,0,100,89],
[137,106,104,129,114,110,0,120],
[135,79,83,137,83,121,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,122,107,102,119,108],
[94,0,98,107,100,94,106,100],
[103,112,0,105,112,102,109,99],
[88,103,105,0,101,98,107,97],
[103,110,98,109,0,106,108,107],
[108,116,108,112,104,0,117,108],
[91,104,101,103,102,93,0,94],
[102,110,111,113,103,102,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,100,97,91,108,99],
[106,0,104,93,98,97,113,94],
[106,106,0,97,101,102,114,106],
[110,117,113,0,111,97,116,91],
[113,112,109,99,0,110,115,106],
[119,113,108,113,100,0,102,104],
[102,97,96,94,95,108,0,98],
[111,116,104,119,104,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,104,120,111,110,115],
[97,0,104,114,113,93,103,114],
[105,106,0,123,109,101,113,116],
[106,96,87,0,101,103,105,116],
[90,97,101,109,0,100,90,104],
[99,117,109,107,110,0,102,100],
[100,107,97,105,120,108,0,108],
[95,96,94,94,106,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,99,105,105,104,106,104],
[98,0,90,110,96,110,92,89],
[111,120,0,104,110,120,115,105],
[105,100,106,0,102,112,110,99],
[105,114,100,108,0,112,106,114],
[106,100,90,98,98,0,96,102],
[104,118,95,100,104,114,0,104],
[106,121,105,111,96,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,93,99,91,110,94,90],
[119,0,103,106,104,124,111,109],
[117,107,0,109,90,104,99,104],
[111,104,101,0,107,101,100,98],
[119,106,120,103,0,109,117,98],
[100,86,106,109,101,0,92,92],
[116,99,111,110,93,118,0,115],
[120,101,106,112,112,118,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,110,113,98,126,103],
[105,0,115,103,109,97,109,110],
[103,95,0,103,99,96,91,102],
[100,107,107,0,114,93,116,112],
[97,101,111,96,0,99,113,108],
[112,113,114,117,111,0,106,104],
[84,101,119,94,97,104,0,106],
[107,100,108,98,102,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,105,0,0,0],
[210,0,210,105,105,210,0,210],
[210,0,0,0,105,0,0,210],
[210,105,210,0,210,210,105,210],
[105,105,105,0,0,105,0,105],
[210,0,210,0,105,0,0,210],
[210,210,210,105,210,210,0,210],
[210,0,0,0,105,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,103,106,99,106,110],
[101,0,97,108,109,95,110,94],
[101,113,0,107,96,102,108,96],
[107,102,103,0,97,105,114,110],
[104,101,114,113,0,98,113,104],
[111,115,108,105,112,0,106,123],
[104,100,102,96,97,104,0,98],
[100,116,114,100,106,87,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,110,110,108,105,106,105],
[99,0,103,100,105,107,85,103],
[100,107,0,103,102,116,99,107],
[100,110,107,0,108,112,108,104],
[102,105,108,102,0,100,94,100],
[105,103,94,98,110,0,101,100],
[104,125,111,102,116,109,0,101],
[105,107,103,106,110,110,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,99,102,106,97,82,98],
[109,0,106,106,108,103,108,113],
[111,104,0,106,115,104,95,107],
[108,104,104,0,117,102,85,108],
[104,102,95,93,0,97,82,107],
[113,107,106,108,113,0,100,101],
[128,102,115,125,128,110,0,111],
[112,97,103,102,103,109,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,95,100,89,103,106,95],
[92,0,86,97,96,94,102,88],
[115,124,0,105,122,105,115,110],
[110,113,105,0,102,98,111,102],
[121,114,88,108,0,100,106,95],
[107,116,105,112,110,0,106,104],
[104,108,95,99,104,104,0,99],
[115,122,100,108,115,106,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,107,107,109,115,118,95],
[116,0,117,104,120,123,120,102],
[103,93,0,109,123,117,104,101],
[103,106,101,0,110,119,106,87],
[101,90,87,100,0,119,103,91],
[95,87,93,91,91,0,104,93],
[92,90,106,104,107,106,0,106],
[115,108,109,123,119,117,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,105,109,130,120,127,99],
[91,0,105,99,120,102,105,97],
[105,105,0,110,118,114,108,114],
[101,111,100,0,122,110,109,108],
[80,90,92,88,0,97,97,97],
[90,108,96,100,113,0,110,114],
[83,105,102,101,113,100,0,101],
[111,113,96,102,113,96,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,96,111,109,104,104,94],
[98,0,94,112,111,112,103,93],
[114,116,0,110,99,106,105,110],
[99,98,100,0,103,96,87,93],
[101,99,111,107,0,107,109,97],
[106,98,104,114,103,0,92,97],
[106,107,105,123,101,118,0,102],
[116,117,100,117,113,113,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,110,113,97,104,89],
[109,0,95,119,114,93,101,104],
[112,115,0,118,118,105,98,106],
[100,91,92,0,102,97,97,102],
[97,96,92,108,0,91,105,97],
[113,117,105,113,119,0,118,98],
[106,109,112,113,105,92,0,102],
[121,106,104,108,113,112,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,111,101,109,91,102],
[110,0,107,106,104,104,96,95],
[100,103,0,105,101,107,98,98],
[99,104,105,0,100,105,101,106],
[109,106,109,110,0,98,93,103],
[101,106,103,105,112,0,96,100],
[119,114,112,109,117,114,0,102],
[108,115,112,104,107,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,107,126,118,123,108],
[97,0,100,110,112,109,112,103],
[105,110,0,108,117,120,116,106],
[103,100,102,0,103,113,115,100],
[84,98,93,107,0,98,98,89],
[92,101,90,97,112,0,101,95],
[87,98,94,95,112,109,0,108],
[102,107,104,110,121,115,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,95,110,112,119,106,124],
[95,0,114,109,105,107,97,111],
[115,96,0,104,116,115,93,114],
[100,101,106,0,121,113,94,115],
[98,105,94,89,0,113,100,108],
[91,103,95,97,97,0,92,100],
[104,113,117,116,110,118,0,118],
[86,99,96,95,102,110,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,100,97,105,107,110],
[103,0,116,100,99,110,104,111],
[107,94,0,99,101,105,109,102],
[110,110,111,0,105,109,106,106],
[113,111,109,105,0,107,115,100],
[105,100,105,101,103,0,111,104],
[103,106,101,104,95,99,0,108],
[100,99,108,104,110,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,107,117,108,120,118,115],
[109,0,101,107,106,118,117,116],
[103,109,0,119,114,121,114,117],
[93,103,91,0,99,109,122,108],
[102,104,96,111,0,107,115,100],
[90,92,89,101,103,0,111,104],
[92,93,96,88,95,99,0,93],
[95,94,93,102,110,106,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,122,91,123,106,125,89],
[105,0,120,74,109,95,106,97],
[88,90,0,90,107,99,82,73],
[119,136,120,0,115,109,127,105],
[87,101,103,95,0,90,97,72],
[104,115,111,101,120,0,116,91],
[85,104,128,83,113,94,0,87],
[121,113,137,105,138,119,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,118,103,112,118,95],
[103,0,96,133,107,115,125,116],
[108,114,0,127,110,118,122,96],
[92,77,83,0,100,121,117,76],
[107,103,100,110,0,110,95,113],
[98,95,92,89,100,0,127,92],
[92,85,88,93,115,83,0,108],
[115,94,114,134,97,118,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,101,96,90,98,94,88],
[129,0,115,109,103,117,109,112],
[109,95,0,96,96,111,104,104],
[114,101,114,0,97,114,94,101],
[120,107,114,113,0,112,110,104],
[112,93,99,96,98,0,104,100],
[116,101,106,116,100,106,0,97],
[122,98,106,109,106,110,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,91,104,96,104,114,114],
[95,0,99,95,91,109,121,107],
[119,111,0,101,92,94,110,93],
[106,115,109,0,106,104,115,100],
[114,119,118,104,0,98,127,106],
[106,101,116,106,112,0,113,116],
[96,89,100,95,83,97,0,93],
[96,103,117,110,104,94,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,121,113,97,110,108,107],
[104,0,112,113,104,105,103,104],
[89,98,0,102,93,96,96,99],
[97,97,108,0,92,97,88,92],
[113,106,117,118,0,109,100,108],
[100,105,114,113,101,0,106,104],
[102,107,114,122,110,104,0,106],
[103,106,111,118,102,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,96,110,95,90,94],
[105,0,103,113,115,105,93,123],
[105,107,0,99,110,107,87,113],
[114,97,111,0,106,115,107,114],
[100,95,100,104,0,106,92,107],
[115,105,103,95,104,0,94,104],
[120,117,123,103,118,116,0,116],
[116,87,97,96,103,106,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,106,136,128,107,91,113],
[64,0,99,103,93,86,86,91],
[104,111,0,123,151,92,109,110],
[74,107,87,0,93,86,77,81],
[82,117,59,117,0,76,78,85],
[103,124,118,124,134,0,91,100],
[119,124,101,133,132,119,0,126],
[97,119,100,129,125,110,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,52,52,104,105,0,52],
[106,0,53,106,105,105,53,106],
[158,157,0,158,105,105,158,158],
[158,104,52,0,104,105,0,158],
[106,105,105,106,0,53,53,158],
[105,105,105,105,157,0,105,105],
[210,157,52,210,157,105,0,158],
[158,104,52,52,52,105,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,110,107,104,118,99,100],
[99,0,92,102,84,107,98,91],
[100,118,0,118,108,114,104,108],
[103,108,92,0,106,110,100,99],
[106,126,102,104,0,120,101,101],
[92,103,96,100,90,0,93,88],
[111,112,106,110,109,117,0,97],
[110,119,102,111,109,122,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,107,94,108,104,100],
[101,0,102,96,98,110,110,102],
[108,108,0,111,105,114,123,104],
[103,114,99,0,92,94,102,109],
[116,112,105,118,0,125,110,104],
[102,100,96,116,85,0,111,102],
[106,100,87,108,100,99,0,101],
[110,108,106,101,106,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,87,111,116,107,103],
[104,0,104,99,109,113,109,104],
[102,106,0,109,98,119,115,102],
[123,111,101,0,115,121,123,113],
[99,101,112,95,0,108,114,100],
[94,97,91,89,102,0,97,93],
[103,101,95,87,96,113,0,98],
[107,106,108,97,110,117,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,91,96,111,96,106],
[109,0,116,96,111,118,111,104],
[113,94,0,108,100,99,101,103],
[119,114,102,0,109,111,110,109],
[114,99,110,101,0,110,108,104],
[99,92,111,99,100,0,97,102],
[114,99,109,100,102,113,0,105],
[104,106,107,101,106,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,80,97,96,77,87,90],
[111,0,105,117,107,100,114,100],
[130,105,0,120,101,100,129,110],
[113,93,90,0,79,83,93,72],
[114,103,109,131,0,91,99,86],
[133,110,110,127,119,0,119,100],
[123,96,81,117,111,91,0,111],
[120,110,100,138,124,110,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,109,104,104,114,121,116],
[95,0,97,103,107,112,102,120],
[101,113,0,115,107,107,113,129],
[106,107,95,0,98,105,103,111],
[106,103,103,112,0,110,110,124],
[96,98,103,105,100,0,104,111],
[89,108,97,107,100,106,0,109],
[94,90,81,99,86,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,0,105,105,0,0],
[105,0,210,105,105,210,105,105],
[105,0,0,105,105,210,0,105],
[210,105,105,0,210,210,105,210],
[105,105,105,0,0,105,0,105],
[105,0,0,0,105,0,0,105],
[210,105,210,105,210,210,0,105],
[210,105,105,0,105,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,100,110,96,105,94,95],
[120,0,129,126,105,124,110,116],
[110,81,0,105,91,97,98,93],
[100,84,105,0,89,93,93,98],
[114,105,119,121,0,123,110,103],
[105,86,113,117,87,0,95,98],
[116,100,112,117,100,115,0,96],
[115,94,117,112,107,112,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,109,104,109,100,114,110],
[115,0,116,100,120,106,119,113],
[101,94,0,98,101,99,106,101],
[106,110,112,0,114,94,112,109],
[101,90,109,96,0,94,114,97],
[110,104,111,116,116,0,113,104],
[96,91,104,98,96,97,0,106],
[100,97,109,101,113,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,95,96,101,92,98,103],
[120,0,101,101,121,100,119,115],
[115,109,0,114,115,105,111,123],
[114,109,96,0,99,94,100,110],
[109,89,95,111,0,103,117,115],
[118,110,105,116,107,0,106,114],
[112,91,99,110,93,104,0,109],
[107,95,87,100,95,96,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,109,101,88,118,122,102],
[111,0,99,104,100,127,117,111],
[101,111,0,101,87,112,135,109],
[109,106,109,0,88,125,120,107],
[122,110,123,122,0,137,135,104],
[92,83,98,85,73,0,101,106],
[88,93,75,90,75,109,0,92],
[108,99,101,103,106,104,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,103,111,105,118,109],
[103,0,99,110,113,104,112,112],
[108,111,0,107,111,103,107,116],
[107,100,103,0,101,95,103,105],
[99,97,99,109,0,106,105,102],
[105,106,107,115,104,0,116,107],
[92,98,103,107,105,94,0,96],
[101,98,94,105,108,103,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,123,91,78,97,91,81],
[126,0,118,103,87,105,116,97],
[87,92,0,77,83,82,113,71],
[119,107,133,0,92,124,123,120],
[132,123,127,118,0,120,130,105],
[113,105,128,86,90,0,110,98],
[119,94,97,87,80,100,0,85],
[129,113,139,90,105,112,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,103,89,110,86,92],
[111,0,122,113,98,116,105,99],
[111,88,0,100,91,107,78,95],
[107,97,110,0,108,115,87,109],
[121,112,119,102,0,118,89,109],
[100,94,103,95,92,0,79,94],
[124,105,132,123,121,131,0,115],
[118,111,115,101,101,116,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,100,108,107,109,105,110],
[108,0,105,104,100,103,105,103],
[110,105,0,104,106,106,98,107],
[102,106,106,0,101,107,91,106],
[103,110,104,109,0,110,93,106],
[101,107,104,103,100,0,102,105],
[105,105,112,119,117,108,0,93],
[100,107,103,104,104,105,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,130,116,123,98,120,115],
[111,0,110,124,123,117,105,100],
[80,100,0,125,96,93,85,84],
[94,86,85,0,96,97,87,101],
[87,87,114,114,0,89,91,95],
[112,93,117,113,121,0,97,100],
[90,105,125,123,119,113,0,100],
[95,110,126,109,115,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,102,113,86,99,103],
[94,0,111,98,90,100,106,97],
[103,99,0,101,104,88,88,102],
[108,112,109,0,110,98,106,108],
[97,120,106,100,0,92,92,100],
[124,110,122,112,118,0,94,123],
[111,104,122,104,118,116,0,120],
[107,113,108,102,110,87,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,123,102,109,105,110],
[109,0,92,127,110,104,108,120],
[97,118,0,123,100,91,99,114],
[87,83,87,0,97,88,95,97],
[108,100,110,113,0,97,104,99],
[101,106,119,122,113,0,97,112],
[105,102,111,115,106,113,0,115],
[100,90,96,113,111,98,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,126,93,139,95,83,142],
[73,0,138,72,84,109,82,143],
[84,72,0,56,85,98,69,86],
[117,138,154,0,115,139,71,130],
[71,126,125,95,0,125,114,114],
[115,101,112,71,85,0,70,101],
[127,128,141,139,96,140,0,156],
[68,67,124,80,96,109,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,106,106,103,107,113],
[100,0,105,98,104,93,107,112],
[110,105,0,101,108,104,103,117],
[104,112,109,0,120,110,111,108],
[104,106,102,90,0,97,105,110],
[107,117,106,100,113,0,113,118],
[103,103,107,99,105,97,0,109],
[97,98,93,102,100,92,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,98,109,93,118,97],
[107,0,92,104,114,110,112,92],
[111,118,0,111,117,102,127,100],
[112,106,99,0,118,94,129,104],
[101,96,93,92,0,105,113,99],
[117,100,108,116,105,0,119,106],
[92,98,83,81,97,91,0,85],
[113,118,110,106,111,104,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,97,93,98,91,97,99],
[104,0,113,106,100,102,101,99],
[113,97,0,90,103,92,91,100],
[117,104,120,0,106,107,110,93],
[112,110,107,104,0,103,112,108],
[119,108,118,103,107,0,116,100],
[113,109,119,100,98,94,0,95],
[111,111,110,117,102,110,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,118,112,110,115,87,141],
[112,0,111,110,119,119,105,138],
[92,99,0,111,100,103,102,116],
[98,100,99,0,105,114,85,123],
[100,91,110,105,0,119,86,151],
[95,91,107,96,91,0,76,138],
[123,105,108,125,124,134,0,130],
[69,72,94,87,59,72,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,104,89,93,98,104,100],
[122,0,103,111,113,109,114,110],
[106,107,0,97,101,102,104,101],
[121,99,113,0,108,120,115,107],
[117,97,109,102,0,109,103,110],
[112,101,108,90,101,0,108,102],
[106,96,106,95,107,102,0,101],
[110,100,109,103,100,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,105,183,130,157,106,105],
[78,0,104,105,105,104,53,53],
[105,106,0,104,131,78,53,53],
[27,105,106,0,105,104,26,53],
[80,105,79,105,0,104,79,53],
[53,106,132,106,106,0,52,53],
[104,157,157,184,131,158,0,131],
[105,157,157,157,157,157,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,114,92,85,97,94,105],
[128,0,116,108,100,105,108,111],
[96,94,0,92,79,89,111,107],
[118,102,118,0,116,110,126,116],
[125,110,131,94,0,108,118,115],
[113,105,121,100,102,0,100,107],
[116,102,99,84,92,110,0,113],
[105,99,103,94,95,103,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,118,127,102,74,107,108],
[105,0,116,106,113,95,83,97],
[92,94,0,106,90,64,94,108],
[83,104,104,0,122,86,115,108],
[108,97,120,88,0,87,119,111],
[136,115,146,124,123,0,125,96],
[103,127,116,95,91,85,0,120],
[102,113,102,102,99,114,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,100,113,108,117,104,108],
[106,0,106,117,99,120,107,104],
[110,104,0,115,100,112,112,111],
[97,93,95,0,92,94,92,96],
[102,111,110,118,0,121,110,118],
[93,90,98,116,89,0,99,109],
[106,103,98,118,100,111,0,104],
[102,106,99,114,92,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,85,97,118,118,121,96],
[114,0,122,87,132,124,126,78],
[125,88,0,110,134,111,124,98],
[113,123,100,0,157,133,125,111],
[92,78,76,53,0,89,93,68],
[92,86,99,77,121,0,103,56],
[89,84,86,85,117,107,0,73],
[114,132,112,99,142,154,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,101,114,93,106,114],
[112,0,101,108,106,101,95,99],
[111,109,0,104,110,108,111,113],
[109,102,106,0,104,99,99,103],
[96,104,100,106,0,99,100,101],
[117,109,102,111,111,0,107,105],
[104,115,99,111,110,103,0,96],
[96,111,97,107,109,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,106,108,99,109,122,119],
[91,0,95,108,85,91,94,97],
[104,115,0,104,92,98,91,101],
[102,102,106,0,96,99,92,111],
[111,125,118,114,0,107,120,103],
[101,119,112,111,103,0,107,110],
[88,116,119,118,90,103,0,115],
[91,113,109,99,107,100,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,120,106,117,114,105,115],
[86,0,111,103,100,94,105,98],
[90,99,0,91,100,112,100,102],
[104,107,119,0,108,107,105,100],
[93,110,110,102,0,104,104,98],
[96,116,98,103,106,0,108,108],
[105,105,110,105,106,102,0,99],
[95,112,108,110,112,102,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,101,109,110,119,98],
[97,0,98,86,98,107,108,90],
[99,112,0,90,103,99,109,89],
[109,124,120,0,116,104,121,111],
[101,112,107,94,0,97,99,95],
[100,103,111,106,113,0,110,99],
[91,102,101,89,111,100,0,105],
[112,120,121,99,115,111,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,104,120,116,140,73,139],
[119,0,107,99,100,152,84,117],
[106,103,0,111,122,165,105,112],
[90,111,99,0,114,162,107,129],
[94,110,88,96,0,132,84,125],
[70,58,45,48,78,0,73,86],
[137,126,105,103,126,137,0,146],
[71,93,98,81,85,124,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,97,107,110,106,101,105],
[93,0,90,100,85,98,92,105],
[113,120,0,117,100,108,105,111],
[103,110,93,0,100,108,92,112],
[100,125,110,110,0,122,100,100],
[104,112,102,102,88,0,97,108],
[109,118,105,118,110,113,0,112],
[105,105,99,98,110,102,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,111,100,107,108,112,108],
[110,0,124,111,112,109,107,98],
[99,86,0,99,96,95,90,96],
[110,99,111,0,101,112,101,107],
[103,98,114,109,0,103,98,103],
[102,101,115,98,107,0,111,103],
[98,103,120,109,112,99,0,102],
[102,112,114,103,107,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,137,126,123,117,118],
[107,0,102,133,110,116,106,97],
[100,108,0,116,102,111,93,98],
[73,77,94,0,81,108,86,86],
[84,100,108,129,0,109,109,120],
[87,94,99,102,101,0,82,96],
[93,104,117,124,101,128,0,104],
[92,113,112,124,90,114,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,100,113,108,99,107],
[110,0,110,100,114,115,113,107],
[104,100,0,96,108,99,91,98],
[110,110,114,0,109,113,106,104],
[97,96,102,101,0,101,108,99],
[102,95,111,97,109,0,106,101],
[111,97,119,104,102,104,0,111],
[103,103,112,106,111,109,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,105,111,117,116,102],
[101,0,112,99,117,105,106,103],
[101,98,0,103,107,104,106,96],
[105,111,107,0,113,114,115,105],
[99,93,103,97,0,114,108,96],
[93,105,106,96,96,0,105,98],
[94,104,104,95,102,105,0,90],
[108,107,114,105,114,112,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,104,100,105,104,115,115],
[118,0,115,105,117,112,110,110],
[106,95,0,91,103,107,109,97],
[110,105,119,0,105,107,117,118],
[105,93,107,105,0,109,105,111],
[106,98,103,103,101,0,103,93],
[95,100,101,93,105,107,0,102],
[95,100,113,92,99,117,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,103,95,107,117,101,109],
[98,0,99,90,107,115,98,105],
[107,111,0,100,110,115,100,110],
[115,120,110,0,111,124,104,113],
[103,103,100,99,0,126,107,100],
[93,95,95,86,84,0,85,94],
[109,112,110,106,103,125,0,118],
[101,105,100,97,110,116,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,123,119,121,120,116],
[108,0,100,102,107,110,106,108],
[99,110,0,108,102,119,104,103],
[87,108,102,0,101,107,105,98],
[91,103,108,109,0,104,107,107],
[89,100,91,103,106,0,104,105],
[90,104,106,105,103,106,0,111],
[94,102,107,112,103,105,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,82,109,76,87,118,100],
[125,0,122,106,114,99,116,105],
[128,88,0,103,85,90,97,106],
[101,104,107,0,114,101,122,97],
[134,96,125,96,0,114,107,111],
[123,111,120,109,96,0,100,101],
[92,94,113,88,103,110,0,92],
[110,105,104,113,99,109,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,81,99,85,106,89,89],
[119,0,105,92,112,106,97,110],
[129,105,0,107,88,125,100,83],
[111,118,103,0,111,109,121,87],
[125,98,122,99,0,118,114,103],
[104,104,85,101,92,0,93,84],
[121,113,110,89,96,117,0,105],
[121,100,127,123,107,126,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,90,101,100,92,93,99],
[125,0,131,114,111,104,94,105],
[120,79,0,109,102,109,98,92],
[109,96,101,0,107,104,94,89],
[110,99,108,103,0,110,107,90],
[118,106,101,106,100,0,112,102],
[117,116,112,116,103,98,0,91],
[111,105,118,121,120,108,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,110,117,103,116,105],
[98,0,108,91,114,94,91,94],
[97,102,0,95,103,96,105,101],
[100,119,115,0,116,110,102,105],
[93,96,107,94,0,98,99,114],
[107,116,114,100,112,0,105,114],
[94,119,105,108,111,105,0,104],
[105,116,109,105,96,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,96,103,97,110,92,114],
[98,0,100,102,87,95,92,101],
[114,110,0,98,112,114,106,101],
[107,108,112,0,96,111,86,103],
[113,123,98,114,0,102,99,108],
[100,115,96,99,108,0,91,95],
[118,118,104,124,111,119,0,117],
[96,109,109,107,102,115,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,102,93,82,85,84,90],
[123,0,91,108,104,94,88,90],
[108,119,0,70,100,112,126,88],
[117,102,140,0,93,97,126,91],
[128,106,110,117,0,103,113,97],
[125,116,98,113,107,0,96,104],
[126,122,84,84,97,114,0,123],
[120,120,122,119,113,106,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,77,111,91,112,81],
[113,0,106,103,119,91,137,106],
[104,104,0,103,128,78,126,87],
[133,107,107,0,114,118,144,98],
[99,91,82,96,0,94,115,96],
[119,119,132,92,116,0,121,95],
[98,73,84,66,95,89,0,73],
[129,104,123,112,114,115,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,101,112,84,105,124,112],
[132,0,106,111,94,122,124,105],
[109,104,0,114,110,116,153,137],
[98,99,96,0,101,134,141,113],
[126,116,100,109,0,130,152,144],
[105,88,94,76,80,0,121,95],
[86,86,57,69,58,89,0,96],
[98,105,73,97,66,115,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,100,116,113,104,99],
[102,0,97,101,108,110,106,104],
[110,113,0,111,117,114,109,104],
[110,109,99,0,118,110,110,95],
[94,102,93,92,0,98,106,87],
[97,100,96,100,112,0,104,106],
[106,104,101,100,104,106,0,99],
[111,106,106,115,123,104,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,101,115,101,107,110,106],
[99,0,103,117,107,104,106,113],
[109,107,0,109,99,102,95,99],
[95,93,101,0,105,106,93,104],
[109,103,111,105,0,104,106,97],
[103,106,108,104,106,0,96,94],
[100,104,115,117,104,114,0,96],
[104,97,111,106,113,116,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,86,168,106,107,105,83],
[106,0,127,167,127,106,146,104],
[124,83,0,146,84,126,102,124],
[42,43,64,0,21,85,104,64],
[104,83,126,189,0,126,124,104],
[103,104,84,125,84,0,124,104],
[105,64,108,106,86,86,0,128],
[127,106,86,146,106,106,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,92,93,82,109,93,87],
[89,0,82,80,87,94,95,100],
[118,128,0,97,129,113,122,115],
[117,130,113,0,102,86,109,110],
[128,123,81,108,0,111,108,104],
[101,116,97,124,99,0,120,108],
[117,115,88,101,102,90,0,101],
[123,110,95,100,106,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,143,141,125,111,95,117],
[62,0,109,90,82,79,94,78],
[67,101,0,85,89,81,73,57],
[69,120,125,0,120,104,101,83],
[85,128,121,90,0,83,105,115],
[99,131,129,106,127,0,123,114],
[115,116,137,109,105,87,0,91],
[93,132,153,127,95,96,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,118,106,134,145,113,101],
[75,0,93,71,118,104,106,79],
[92,117,0,101,111,120,121,92],
[104,139,109,0,125,124,130,110],
[76,92,99,85,0,117,117,102],
[65,106,90,86,93,0,115,67],
[97,104,89,80,93,95,0,96],
[109,131,118,100,108,143,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,101,99,107,95,101,90],
[113,0,109,100,107,119,112,87],
[109,101,0,72,117,78,85,82],
[111,110,138,0,135,112,117,105],
[103,103,93,75,0,85,95,79],
[115,91,132,98,125,0,105,103],
[109,98,125,93,115,105,0,99],
[120,123,128,105,131,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,113,93,108,120,115,109],
[101,0,83,107,105,110,108,106],
[97,127,0,103,116,116,106,100],
[117,103,107,0,117,114,102,108],
[102,105,94,93,0,114,123,96],
[90,100,94,96,96,0,85,103],
[95,102,104,108,87,125,0,110],
[101,104,110,102,114,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,110,107,102,92,104],
[105,0,108,104,100,103,101,98],
[104,102,0,108,105,106,109,96],
[100,106,102,0,99,111,98,114],
[103,110,105,111,0,107,104,106],
[108,107,104,99,103,0,87,93],
[118,109,101,112,106,123,0,99],
[106,112,114,96,104,117,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,108,99,116,102,99,102],
[89,0,85,64,104,83,95,82],
[102,125,0,93,115,103,112,115],
[111,146,117,0,116,102,107,102],
[94,106,95,94,0,97,98,89],
[108,127,107,108,113,0,107,95],
[111,115,98,103,112,103,0,95],
[108,128,95,108,121,115,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,97,112,116,82,121,101],
[88,0,100,116,111,82,125,91],
[113,110,0,124,114,120,125,101],
[98,94,86,0,99,82,98,99],
[94,99,96,111,0,89,112,101],
[128,128,90,128,121,0,122,106],
[89,85,85,112,98,88,0,98],
[109,119,109,111,109,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,116,118,101,109,120,103],
[93,0,102,76,93,72,86,80],
[94,108,0,99,121,112,121,131],
[92,134,111,0,105,110,115,129],
[109,117,89,105,0,105,119,96],
[101,138,98,100,105,0,115,116],
[90,124,89,95,91,95,0,103],
[107,130,79,81,114,94,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,107,107,107,107,160],
[105,0,55,157,157,105,107,210],
[103,155,0,155,102,103,157,210],
[103,53,55,0,50,103,55,158],
[103,53,108,160,0,108,55,108],
[103,105,107,107,102,0,107,210],
[103,103,53,155,155,103,0,210],
[50,0,0,52,102,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,80,92,92,95,109,94],
[120,0,98,108,105,106,124,94],
[130,112,0,114,117,104,117,111],
[118,102,96,0,91,103,121,98],
[118,105,93,119,0,105,115,111],
[115,104,106,107,105,0,112,108],
[101,86,93,89,95,98,0,85],
[116,116,99,112,99,102,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,93,105,113,100,110,98],
[90,0,98,99,104,122,120,108],
[117,112,0,109,109,104,101,105],
[105,111,101,0,109,120,124,106],
[97,106,101,101,0,107,118,109],
[110,88,106,90,103,0,92,86],
[100,90,109,86,92,118,0,90],
[112,102,105,104,101,124,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,101,96,87,118,103,126],
[119,0,129,108,105,118,114,123],
[109,81,0,102,95,110,113,121],
[114,102,108,0,103,116,125,128],
[123,105,115,107,0,110,109,132],
[92,92,100,94,100,0,100,111],
[107,96,97,85,101,110,0,122],
[84,87,89,82,78,99,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,114,114,106,111,99,102],
[97,0,107,100,97,106,99,104],
[96,103,0,108,104,111,107,95],
[96,110,102,0,90,103,89,99],
[104,113,106,120,0,117,114,106],
[99,104,99,107,93,0,101,92],
[111,111,103,121,96,109,0,103],
[108,106,115,111,104,118,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,113,106,111,109,118],
[100,0,106,111,101,89,97,113],
[105,104,0,118,101,94,111,115],
[97,99,92,0,108,98,106,105],
[104,109,109,102,0,103,94,102],
[99,121,116,112,107,0,100,106],
[101,113,99,104,116,110,0,123],
[92,97,95,105,108,104,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,84,108,122,106,109,114],
[87,0,85,96,106,79,94,96],
[126,125,0,105,128,100,112,110],
[102,114,105,0,105,105,97,116],
[88,104,82,105,0,96,98,99],
[104,131,110,105,114,0,109,103],
[101,116,98,113,112,101,0,117],
[96,114,100,94,111,107,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,107,101,112,98,99],
[99,0,92,105,106,105,101,101],
[101,118,0,106,98,107,104,99],
[103,105,104,0,98,109,105,100],
[109,104,112,112,0,110,107,110],
[98,105,103,101,100,0,99,95],
[112,109,106,105,103,111,0,99],
[111,109,111,110,100,115,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,126,105,113,112,115,121],
[109,0,121,119,102,118,136,108],
[84,89,0,94,98,100,94,89],
[105,91,116,0,109,125,119,98],
[97,108,112,101,0,106,107,92],
[98,92,110,85,104,0,104,95],
[95,74,116,91,103,106,0,105],
[89,102,121,112,118,115,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,99,112,99,106,111,114],
[80,0,107,112,98,97,107,115],
[111,103,0,101,110,125,95,114],
[98,98,109,0,97,115,106,108],
[111,112,100,113,0,113,115,120],
[104,113,85,95,97,0,106,112],
[99,103,115,104,95,104,0,116],
[96,95,96,102,90,98,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,138,110,101,102,121,117],
[98,0,123,120,131,106,112,120],
[72,87,0,89,80,88,88,88],
[100,90,121,0,80,89,125,96],
[109,79,130,130,0,87,115,149],
[108,104,122,121,123,0,85,121],
[89,98,122,85,95,125,0,85],
[93,90,122,114,61,89,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,120,105,123,113,107],
[107,0,112,121,104,111,109,118],
[98,98,0,101,102,109,89,96],
[90,89,109,0,100,107,100,93],
[105,106,108,110,0,109,91,105],
[87,99,101,103,101,0,96,92],
[97,101,121,110,119,114,0,114],
[103,92,114,117,105,118,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,121,88,105,109,107],
[109,0,91,110,86,114,109,111],
[105,119,0,104,114,111,117,104],
[89,100,106,0,96,96,111,119],
[122,124,96,114,0,109,100,107],
[105,96,99,114,101,0,104,101],
[101,101,93,99,110,106,0,109],
[103,99,106,91,103,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,94,108,103,118,99],
[99,0,104,103,106,107,102,107],
[104,106,0,92,123,118,105,102],
[116,107,118,0,103,123,121,131],
[102,104,87,107,0,114,113,91],
[107,103,92,87,96,0,100,94],
[92,108,105,89,97,110,0,106],
[111,103,108,79,119,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,116,130,126,120,109],
[105,0,96,99,98,106,106,99],
[99,114,0,103,116,120,113,103],
[94,111,107,0,116,114,113,105],
[80,112,94,94,0,88,110,87],
[84,104,90,96,122,0,95,92],
[90,104,97,97,100,115,0,91],
[101,111,107,105,123,118,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,116,118,104,123,116,113],
[97,0,109,104,99,109,103,108],
[94,101,0,105,96,103,100,89],
[92,106,105,0,100,103,102,102],
[106,111,114,110,0,112,113,100],
[87,101,107,107,98,0,96,102],
[94,107,110,108,97,114,0,96],
[97,102,121,108,110,108,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,105,116,115,113,115,120],
[90,0,96,109,92,98,111,98],
[105,114,0,117,113,112,108,108],
[94,101,93,0,103,108,117,110],
[95,118,97,107,0,112,114,112],
[97,112,98,102,98,0,115,112],
[95,99,102,93,96,95,0,107],
[90,112,102,100,98,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,112,109,102,109,108],
[100,0,105,106,110,105,102,105],
[105,105,0,110,105,99,105,110],
[98,104,100,0,102,94,94,105],
[101,100,105,108,0,97,91,103],
[108,105,111,116,113,0,112,118],
[101,108,105,116,119,98,0,115],
[102,105,100,105,107,92,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,100,112,105,119,104],
[109,0,118,102,118,109,117,102],
[108,92,0,90,98,95,110,91],
[110,108,120,0,109,100,125,110],
[98,92,112,101,0,98,121,99],
[105,101,115,110,112,0,110,104],
[91,93,100,85,89,100,0,93],
[106,108,119,100,111,106,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,86,96,88,109,108,92],
[107,0,115,108,101,102,111,93],
[124,95,0,108,108,116,116,105],
[114,102,102,0,99,120,112,107],
[122,109,102,111,0,111,108,107],
[101,108,94,90,99,0,103,91],
[102,99,94,98,102,107,0,99],
[118,117,105,103,103,119,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,90,110,83,107,125,93],
[93,0,109,93,91,89,104,92],
[120,101,0,92,94,107,106,105],
[100,117,118,0,111,114,105,101],
[127,119,116,99,0,109,95,99],
[103,121,103,96,101,0,114,102],
[85,106,104,105,115,96,0,96],
[117,118,105,109,111,108,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,91,101,76,96,109,94],
[141,0,113,101,118,123,111,132],
[119,97,0,93,84,113,108,107],
[109,109,117,0,93,90,123,121],
[134,92,126,117,0,99,110,107],
[114,87,97,120,111,0,134,123],
[101,99,102,87,100,76,0,93],
[116,78,103,89,103,87,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,90,93,71,111,90,103],
[128,0,108,112,98,112,119,117],
[120,102,0,110,104,113,103,119],
[117,98,100,0,101,122,96,120],
[139,112,106,109,0,117,100,115],
[99,98,97,88,93,0,108,101],
[120,91,107,114,110,102,0,111],
[107,93,91,90,95,109,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,115,128,87,102,87,118],
[91,0,113,106,92,103,111,102],
[95,97,0,127,92,105,93,117],
[82,104,83,0,86,89,79,106],
[123,118,118,124,0,114,98,118],
[108,107,105,121,96,0,108,104],
[123,99,117,131,112,102,0,108],
[92,108,93,104,92,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,100,116,111,114,99],
[104,0,117,107,113,101,124,113],
[98,93,0,93,122,107,117,101],
[110,103,117,0,124,115,121,107],
[94,97,88,86,0,106,101,95],
[99,109,103,95,104,0,113,97],
[96,86,93,89,109,97,0,88],
[111,97,109,103,115,113,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,97,118,118,108,100],
[103,0,108,106,122,125,100,97],
[98,102,0,103,100,112,97,94],
[113,104,107,0,115,114,109,97],
[92,88,110,95,0,111,103,97],
[92,85,98,96,99,0,102,94],
[102,110,113,101,107,108,0,105],
[110,113,116,113,113,116,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,115,98,104,108,110],
[104,0,101,102,106,91,100,91],
[110,109,0,112,113,86,115,95],
[95,108,98,0,108,90,93,96],
[112,104,97,102,0,94,98,101],
[106,119,124,120,116,0,118,97],
[102,110,95,117,112,92,0,98],
[100,119,115,114,109,113,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,100,102,86,99,105],
[108,0,109,83,107,94,97,103],
[108,101,0,108,103,95,104,113],
[110,127,102,0,112,100,99,107],
[108,103,107,98,0,100,98,105],
[124,116,115,110,110,0,117,105],
[111,113,106,111,112,93,0,123],
[105,107,97,103,105,105,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,98,104,118,111,107],
[102,0,110,108,91,113,100,104],
[108,100,0,94,108,111,101,97],
[112,102,116,0,104,106,97,102],
[106,119,102,106,0,124,108,109],
[92,97,99,104,86,0,92,95],
[99,110,109,113,102,118,0,87],
[103,106,113,108,101,115,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,97,109,84,111,109,100],
[121,0,118,114,105,118,123,101],
[113,92,0,114,90,112,111,96],
[101,96,96,0,93,120,108,89],
[126,105,120,117,0,116,137,119],
[99,92,98,90,94,0,98,96],
[101,87,99,102,73,112,0,93],
[110,109,114,121,91,114,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,111,112,122,105,120],
[111,0,114,103,112,108,117,118],
[99,96,0,98,103,98,93,97],
[99,107,112,0,90,114,94,102],
[98,98,107,120,0,114,102,107],
[88,102,112,96,96,0,101,109],
[105,93,117,116,108,109,0,115],
[90,92,113,108,103,101,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,94,99,115,112,113],
[103,0,112,101,94,126,119,117],
[105,98,0,109,106,133,125,129],
[116,109,101,0,103,116,102,117],
[111,116,104,107,0,124,134,119],
[95,84,77,94,86,0,94,108],
[98,91,85,108,76,116,0,109],
[97,93,81,93,91,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,118,105,101,106,111,110],
[93,0,104,107,83,98,108,96],
[92,106,0,101,93,92,100,91],
[105,103,109,0,95,89,101,98],
[109,127,117,115,0,103,118,105],
[104,112,118,121,107,0,120,109],
[99,102,110,109,92,90,0,96],
[100,114,119,112,105,101,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,80,99,91,97,114],
[112,0,102,112,101,96,109,112],
[113,108,0,104,109,114,103,111],
[130,98,106,0,101,95,106,117],
[111,109,101,109,0,116,100,115],
[119,114,96,115,94,0,119,113],
[113,101,107,104,110,91,0,110],
[96,98,99,93,95,97,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,119,103,123,108,130],
[96,0,91,105,95,98,90,113],
[98,119,0,102,100,108,88,131],
[91,105,108,0,103,100,90,119],
[107,115,110,107,0,111,104,124],
[87,112,102,110,99,0,97,115],
[102,120,122,120,106,113,0,133],
[80,97,79,91,86,95,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,111,116,114,102,97],
[105,0,100,106,102,119,94,109],
[102,110,0,104,96,116,95,110],
[99,104,106,0,103,119,105,106],
[94,108,114,107,0,108,86,103],
[96,91,94,91,102,0,108,101],
[108,116,115,105,124,102,0,114],
[113,101,100,104,107,109,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,104,99,115,102,102,100],
[91,0,85,42,92,66,97,66],
[106,125,0,98,123,68,109,73],
[111,168,112,0,127,115,126,104],
[95,118,87,83,0,71,115,58],
[108,144,142,95,139,0,126,105],
[108,113,101,84,95,84,0,88],
[110,144,137,106,152,105,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,120,105,102,112,100,89],
[109,0,129,104,113,111,115,114],
[90,81,0,98,101,94,110,97],
[105,106,112,0,115,106,122,105],
[108,97,109,95,0,109,100,98],
[98,99,116,104,101,0,107,93],
[110,95,100,88,110,103,0,106],
[121,96,113,105,112,117,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,112,111,97,108,110],
[98,0,114,110,118,108,101,92],
[99,96,0,108,97,97,98,96],
[98,100,102,0,110,109,101,106],
[99,92,113,100,0,103,98,101],
[113,102,113,101,107,0,96,112],
[102,109,112,109,112,114,0,110],
[100,118,114,104,109,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,111,96,103,92,95],
[113,0,105,119,110,108,118,114],
[104,105,0,120,106,102,104,103],
[99,91,90,0,95,91,95,96],
[114,100,104,115,0,105,105,112],
[107,102,108,119,105,0,99,109],
[118,92,106,115,105,111,0,102],
[115,96,107,114,98,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,105,111,114,105,116,126],
[102,0,101,104,119,103,101,115],
[105,109,0,107,106,108,95,118],
[99,106,103,0,103,107,111,107],
[96,91,104,107,0,96,112,110],
[105,107,102,103,114,0,112,131],
[94,109,115,99,98,98,0,111],
[84,95,92,103,100,79,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,91,95,101,101,115,95],
[111,0,97,100,105,100,110,105],
[119,113,0,91,99,98,117,105],
[115,110,119,0,107,108,114,103],
[109,105,111,103,0,108,117,106],
[109,110,112,102,102,0,116,108],
[95,100,93,96,93,94,0,103],
[115,105,105,107,104,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,112,119,105,102,115,107],
[92,0,98,100,93,83,95,106],
[98,112,0,110,108,102,107,94],
[91,110,100,0,95,89,100,93],
[105,117,102,115,0,105,103,110],
[108,127,108,121,105,0,110,106],
[95,115,103,110,107,100,0,103],
[103,104,116,117,100,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,146,164,139,127,138,101],
[80,0,141,153,128,115,134,106],
[64,69,0,119,93,110,100,72],
[46,57,91,0,82,81,103,63],
[71,82,117,128,0,129,129,61],
[83,95,100,129,81,0,121,65],
[72,76,110,107,81,89,0,66],
[109,104,138,147,149,145,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,91,105,108,98,102,99],
[129,0,109,114,100,116,120,116],
[119,101,0,99,102,103,129,118],
[105,96,111,0,108,105,110,101],
[102,110,108,102,0,103,108,110],
[112,94,107,105,107,0,103,125],
[108,90,81,100,102,107,0,124],
[111,94,92,109,100,85,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,105,114,111,115,109],
[98,0,101,95,102,110,96,103],
[97,109,0,103,104,102,107,107],
[105,115,107,0,110,113,116,102],
[96,108,106,100,0,107,107,98],
[99,100,108,97,103,0,102,101],
[95,114,103,94,103,108,0,93],
[101,107,103,108,112,109,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,128,96,121,143,115,124],
[85,0,108,84,101,119,126,112],
[82,102,0,48,95,103,80,102],
[114,126,162,0,100,111,136,123],
[89,109,115,110,0,95,119,138],
[67,91,107,99,115,0,100,154],
[95,84,130,74,91,110,0,109],
[86,98,108,87,72,56,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,127,126,102,107,112,122],
[88,0,100,108,82,103,93,94],
[83,110,0,107,93,91,106,104],
[84,102,103,0,84,81,95,103],
[108,128,117,126,0,103,117,109],
[103,107,119,129,107,0,116,119],
[98,117,104,115,93,94,0,104],
[88,116,106,107,101,91,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,99,106,93,99,80,95],
[113,0,98,118,110,107,107,112],
[111,112,0,115,117,109,99,122],
[104,92,95,0,98,96,93,89],
[117,100,93,112,0,99,90,101],
[111,103,101,114,111,0,90,106],
[130,103,111,117,120,120,0,103],
[115,98,88,121,109,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,112,97,127,128,112,117],
[112,0,102,105,125,113,113,116],
[98,108,0,110,120,117,108,143],
[113,105,100,0,120,133,133,119],
[83,85,90,90,0,104,102,88],
[82,97,93,77,106,0,93,101],
[98,97,102,77,108,117,0,105],
[93,94,67,91,122,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,73,93,78,76,93],
[112,0,112,93,112,91,103,120],
[111,98,0,89,100,104,103,112],
[137,117,121,0,115,88,105,111],
[117,98,110,95,0,94,89,118],
[132,119,106,122,116,0,100,129],
[134,107,107,105,121,110,0,128],
[117,90,98,99,92,81,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,95,85,106,103,107,64],
[124,0,125,92,115,93,95,115],
[115,85,0,71,94,83,102,68],
[125,118,139,0,96,94,97,113],
[104,95,116,114,0,135,95,72],
[107,117,127,116,75,0,108,96],
[103,115,108,113,115,102,0,124],
[146,95,142,97,138,114,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,103,101,92,99,105],
[103,0,96,96,103,100,92,106],
[107,114,0,107,92,107,112,97],
[107,114,103,0,106,114,111,114],
[109,107,118,104,0,103,106,118],
[118,110,103,96,107,0,100,101],
[111,118,98,99,104,110,0,103],
[105,104,113,96,92,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,91,95,106,98,85,103],
[102,0,92,89,101,117,93,97],
[119,118,0,116,117,115,104,118],
[115,121,94,0,108,103,111,114],
[104,109,93,102,0,115,100,104],
[112,93,95,107,95,0,103,106],
[125,117,106,99,110,107,0,112],
[107,113,92,96,106,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,117,116,128,114,108,97],
[104,0,123,88,125,113,109,101],
[93,87,0,100,115,101,102,93],
[94,122,110,0,135,105,100,111],
[82,85,95,75,0,85,91,94],
[96,97,109,105,125,0,107,89],
[102,101,108,110,119,103,0,88],
[113,109,117,99,116,121,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,100,101,106,109,108],
[105,0,108,97,108,107,109,114],
[103,102,0,104,111,105,104,104],
[110,113,106,0,100,107,119,102],
[109,102,99,110,0,106,106,98],
[104,103,105,103,104,0,113,96],
[101,101,106,91,104,97,0,95],
[102,96,106,108,112,114,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,100,77,95,93,93,116],
[110,0,109,89,108,108,96,99],
[110,101,0,78,94,105,98,107],
[133,121,132,0,106,102,117,108],
[115,102,116,104,0,108,119,123],
[117,102,105,108,102,0,108,115],
[117,114,112,93,91,102,0,113],
[94,111,103,102,87,95,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,127,119,107,103,105,108],
[99,0,108,128,105,107,88,93],
[83,102,0,112,90,105,91,86],
[91,82,98,0,88,93,78,88],
[103,105,120,122,0,106,114,112],
[107,103,105,117,104,0,94,98],
[105,122,119,132,96,116,0,113],
[102,117,124,122,98,112,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,102,104,109,107,95],
[108,0,107,114,108,107,106,96],
[105,103,0,118,130,106,109,102],
[108,96,92,0,105,108,121,109],
[106,102,80,105,0,95,112,85],
[101,103,104,102,115,0,112,97],
[103,104,101,89,98,98,0,92],
[115,114,108,101,125,113,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,103,92,89,97,96],
[114,0,105,103,107,96,104,108],
[111,105,0,92,112,110,97,106],
[107,107,118,0,96,110,98,113],
[118,103,98,114,0,99,94,104],
[121,114,100,100,111,0,106,127],
[113,106,113,112,116,104,0,104],
[114,102,104,97,106,83,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,112,97,99,94,109,96],
[124,0,121,108,111,107,115,104],
[98,89,0,110,96,96,113,93],
[113,102,100,0,106,103,107,99],
[111,99,114,104,0,111,108,96],
[116,103,114,107,99,0,112,101],
[101,95,97,103,102,98,0,107],
[114,106,117,111,114,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,105,87,81,88,106,97],
[120,0,114,103,110,112,116,117],
[105,96,0,107,105,88,101,106],
[123,107,103,0,119,109,121,107],
[129,100,105,91,0,91,114,110],
[122,98,122,101,119,0,109,118],
[104,94,109,89,96,101,0,106],
[113,93,104,103,100,92,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,94,114,102,113,100],
[110,0,94,96,113,99,98,110],
[104,116,0,108,106,106,108,109],
[116,114,102,0,113,107,117,124],
[96,97,104,97,0,113,106,111],
[108,111,104,103,97,0,120,109],
[97,112,102,93,104,90,0,95],
[110,100,101,86,99,101,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,96,106,111,111,109,105],
[101,0,113,100,94,100,100,108],
[114,97,0,114,98,96,96,100],
[104,110,96,0,104,103,103,103],
[99,116,112,106,0,108,98,110],
[99,110,114,107,102,0,103,91],
[101,110,114,107,112,107,0,102],
[105,102,110,107,100,119,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,130,128,145,128,95,111],
[17,0,66,33,32,48,0,47],
[80,144,0,80,129,47,95,113],
[82,177,130,0,160,113,113,177],
[65,178,81,50,0,98,48,112],
[82,162,163,97,112,0,95,144],
[115,210,115,97,162,115,0,146],
[99,163,97,33,98,66,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,115,96,91,119,117,93],
[110,0,109,108,93,115,114,91],
[95,101,0,84,97,117,112,95],
[114,102,126,0,105,118,127,107],
[119,117,113,105,0,117,123,107],
[91,95,93,92,93,0,102,105],
[93,96,98,83,87,108,0,110],
[117,119,115,103,103,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,114,107,109,103,125,122],
[94,0,101,90,104,105,100,104],
[96,109,0,89,107,104,108,107],
[103,120,121,0,113,110,121,105],
[101,106,103,97,0,101,104,99],
[107,105,106,100,109,0,109,115],
[85,110,102,89,106,101,0,112],
[88,106,103,105,111,95,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,113,95,107,109,108,109],
[107,0,117,98,102,100,111,112],
[97,93,0,94,96,85,102,102],
[115,112,116,0,112,104,126,110],
[103,108,114,98,0,96,117,95],
[101,110,125,106,114,0,118,106],
[102,99,108,84,93,92,0,81],
[101,98,108,100,115,104,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,105,94,82,91,87,93],
[115,0,109,125,110,110,92,116],
[105,101,0,103,101,102,94,91],
[116,85,107,0,95,101,92,98],
[128,100,109,115,0,99,91,103],
[119,100,108,109,111,0,107,112],
[123,118,116,118,119,103,0,115],
[117,94,119,112,107,98,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,110,111,108,93,98,91],
[99,0,110,105,108,112,103,88],
[100,100,0,116,104,111,102,79],
[99,105,94,0,100,100,87,84],
[102,102,106,110,0,87,87,79],
[117,98,99,110,123,0,91,92],
[112,107,108,123,123,119,0,105],
[119,122,131,126,131,118,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,111,99,110,96,93],
[100,0,115,99,90,106,96,94],
[109,95,0,100,100,101,100,101],
[99,111,110,0,96,102,101,97],
[111,120,110,114,0,110,104,107],
[100,104,109,108,100,0,102,102],
[114,114,110,109,106,108,0,104],
[117,116,109,113,103,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,107,113,103,105,113,117],
[119,0,104,118,120,121,115,127],
[103,106,0,99,110,122,111,114],
[97,92,111,0,110,114,116,116],
[107,90,100,100,0,88,102,105],
[105,89,88,96,122,0,105,118],
[97,95,99,94,108,105,0,100],
[93,83,96,94,105,92,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,109,122,114,116,105],
[103,0,103,98,100,104,102,88],
[106,107,0,101,106,99,92,97],
[101,112,109,0,118,111,96,109],
[88,110,104,92,0,111,108,102],
[96,106,111,99,99,0,109,91],
[94,108,118,114,102,101,0,106],
[105,122,113,101,108,119,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,115,98,119,97,96,117],
[101,0,124,100,114,114,93,114],
[95,86,0,101,118,111,102,117],
[112,110,109,0,121,99,110,110],
[91,96,92,89,0,111,92,114],
[113,96,99,111,99,0,92,101],
[114,117,108,100,118,118,0,119],
[93,96,93,100,96,109,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,106,105,124,95,125,104],
[89,0,96,101,119,95,107,96],
[104,114,0,114,142,144,125,118],
[105,109,96,0,111,104,112,82],
[86,91,68,99,0,91,120,88],
[115,115,66,106,119,0,130,88],
[85,103,85,98,90,80,0,73],
[106,114,92,128,122,122,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,105,99,99,106,94],
[108,0,82,100,90,91,118,114],
[117,128,0,95,102,111,133,117],
[105,110,115,0,113,122,122,106],
[111,120,108,97,0,120,114,112],
[111,119,99,88,90,0,98,110],
[104,92,77,88,96,112,0,106],
[116,96,93,104,98,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,107,95,113,101,116,118],
[91,0,80,89,105,105,104,92],
[103,130,0,98,123,103,112,110],
[115,121,112,0,95,92,115,109],
[97,105,87,115,0,96,118,95],
[109,105,107,118,114,0,124,119],
[94,106,98,95,92,86,0,82],
[92,118,100,101,115,91,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,118,103,126,107,108,114],
[99,0,125,106,103,118,100,100],
[92,85,0,102,97,90,79,64],
[107,104,108,0,133,118,100,103],
[84,107,113,77,0,83,90,97],
[103,92,120,92,127,0,101,64],
[102,110,131,110,120,109,0,102],
[96,110,146,107,113,146,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,124,106,115,139,117,104],
[85,0,115,105,95,120,89,95],
[86,95,0,96,85,119,93,96],
[104,105,114,0,105,130,99,106],
[95,115,125,105,0,133,102,103],
[71,90,91,80,77,0,85,88],
[93,121,117,111,108,125,0,96],
[106,115,114,104,107,122,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,100,100,107,96,102,89],
[115,0,106,104,108,108,98,108],
[110,104,0,104,106,102,100,100],
[110,106,106,0,104,98,102,101],
[103,102,104,106,0,97,99,98],
[114,102,108,112,113,0,106,105],
[108,112,110,108,111,104,0,98],
[121,102,110,109,112,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,87,71,107,65,98,97],
[106,0,82,74,98,86,122,94],
[123,128,0,77,108,111,119,116],
[139,136,133,0,86,105,143,134],
[103,112,102,124,0,89,125,100],
[145,124,99,105,121,0,130,124],
[112,88,91,67,85,80,0,82],
[113,116,94,76,110,86,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,102,113,99,107,102],
[98,0,97,102,108,108,107,107],
[103,113,0,97,107,103,98,97],
[108,108,113,0,116,104,100,108],
[97,102,103,94,0,107,101,95],
[111,102,107,106,103,0,108,109],
[103,103,112,110,109,102,0,106],
[108,103,113,102,115,101,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,114,114,107,95,96],
[97,0,95,108,106,102,91,91],
[103,115,0,109,113,114,106,106],
[96,102,101,0,112,103,98,104],
[96,104,97,98,0,97,96,90],
[103,108,96,107,113,0,111,103],
[115,119,104,112,114,99,0,99],
[114,119,104,106,120,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,108,105,107,131,107,109],
[117,0,101,131,104,157,131,93],
[102,109,0,160,77,183,106,121],
[105,79,50,0,76,133,108,66],
[103,106,133,134,0,157,133,133],
[79,53,27,77,53,0,80,67],
[103,79,104,102,77,130,0,92],
[101,117,89,144,77,143,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,111,97,118,121,121,126],
[93,0,101,104,99,104,119,111],
[99,109,0,119,112,110,123,116],
[113,106,91,0,115,111,116,120],
[92,111,98,95,0,106,113,102],
[89,106,100,99,104,0,122,103],
[89,91,87,94,97,88,0,102],
[84,99,94,90,108,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,119,104,98,106,109,105],
[104,0,116,123,114,114,103,131],
[91,94,0,97,89,88,96,99],
[106,87,113,0,104,105,109,101],
[112,96,121,106,0,107,108,104],
[104,96,122,105,103,0,105,114],
[101,107,114,101,102,105,0,105],
[105,79,111,109,106,96,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,129,122,111,105,120,108],
[82,0,123,113,99,97,114,105],
[81,87,0,99,84,103,102,99],
[88,97,111,0,88,117,116,98],
[99,111,126,122,0,136,121,117],
[105,113,107,93,74,0,108,84],
[90,96,108,94,89,102,0,88],
[102,105,111,112,93,126,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,96,130,104,101,101,102],
[88,0,91,113,95,93,109,103],
[114,119,0,133,96,115,129,93],
[80,97,77,0,92,87,94,84],
[106,115,114,118,0,102,129,106],
[109,117,95,123,108,0,114,82],
[109,101,81,116,81,96,0,73],
[108,107,117,126,104,128,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,112,104,96,94,101],
[103,0,104,112,103,104,104,102],
[107,106,0,110,115,102,107,113],
[98,98,100,0,99,98,99,97],
[106,107,95,111,0,103,96,95],
[114,106,108,112,107,0,109,103],
[116,106,103,111,114,101,0,109],
[109,108,97,113,115,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,98,110,97,96,96],
[106,0,102,94,109,100,110,96],
[103,108,0,105,112,101,90,93],
[112,116,105,0,114,98,103,99],
[100,101,98,96,0,107,106,97],
[113,110,109,112,103,0,107,103],
[114,100,120,107,104,103,0,109],
[114,114,117,111,113,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,118,118,136,84,120,94],
[120,0,104,158,156,116,150,123],
[92,106,0,120,123,97,116,114],
[92,52,90,0,118,74,122,113],
[74,54,87,92,0,48,107,97],
[126,94,113,136,162,0,140,116],
[90,60,94,88,103,70,0,96],
[116,87,96,97,113,94,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,109,94,97,122,119,111],
[117,0,117,105,113,132,112,119],
[101,93,0,86,83,113,81,100],
[116,105,124,0,97,92,109,105],
[113,97,127,113,0,129,115,102],
[88,78,97,118,81,0,100,88],
[91,98,129,101,95,110,0,102],
[99,91,110,105,108,122,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,95,106,98,109,91,103],
[111,0,104,117,95,105,93,111],
[115,106,0,105,102,117,110,112],
[104,93,105,0,98,101,102,106],
[112,115,108,112,0,102,103,117],
[101,105,93,109,108,0,110,121],
[119,117,100,108,107,100,0,116],
[107,99,98,104,93,89,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,123,108,110,112,123,105],
[91,0,126,139,136,113,145,118],
[87,84,0,102,85,123,102,89],
[102,71,108,0,73,122,105,116],
[100,74,125,137,0,112,134,112],
[98,97,87,88,98,0,112,105],
[87,65,108,105,76,98,0,105],
[105,92,121,94,98,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,99,115,100,98,106],
[108,0,108,104,110,89,99,98],
[117,102,0,109,112,91,88,99],
[111,106,101,0,114,106,98,111],
[95,100,98,96,0,86,101,95],
[110,121,119,104,124,0,102,104],
[112,111,122,112,109,108,0,105],
[104,112,111,99,115,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,96,94,113,100,112,97],
[107,0,121,103,128,110,121,101],
[114,89,0,93,114,74,97,89],
[116,107,117,0,124,104,113,113],
[97,82,96,86,0,93,101,98],
[110,100,136,106,117,0,105,120],
[98,89,113,97,109,105,0,96],
[113,109,121,97,112,90,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,115,102,114,114,105,106],
[101,0,109,97,103,100,100,100],
[95,101,0,92,98,97,93,100],
[108,113,118,0,111,104,103,107],
[96,107,112,99,0,113,102,106],
[96,110,113,106,97,0,104,100],
[105,110,117,107,108,106,0,96],
[104,110,110,103,104,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,101,108,98,99,104],
[100,0,100,96,100,109,89,105],
[102,110,0,98,116,100,80,108],
[109,114,112,0,119,109,96,107],
[102,110,94,91,0,110,105,102],
[112,101,110,101,100,0,95,113],
[111,121,130,114,105,115,0,120],
[106,105,102,103,108,97,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,109,105,96,109,109,100],
[113,0,105,115,108,118,107,97],
[101,105,0,106,93,115,101,104],
[105,95,104,0,88,100,109,90],
[114,102,117,122,0,112,112,109],
[101,92,95,110,98,0,104,93],
[101,103,109,101,98,106,0,105],
[110,113,106,120,101,117,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,116,116,100,112,118,104],
[107,0,106,101,111,103,110,107],
[94,104,0,107,100,113,100,103],
[94,109,103,0,100,117,112,96],
[110,99,110,110,0,99,114,111],
[98,107,97,93,111,0,108,106],
[92,100,110,98,96,102,0,94],
[106,103,107,114,99,104,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,105,96,87,103,94],
[104,0,129,109,129,123,136,122],
[100,81,0,90,106,95,112,106],
[105,101,120,0,107,106,101,105],
[114,81,104,103,0,110,118,100],
[123,87,115,104,100,0,115,123],
[107,74,98,109,92,95,0,99],
[116,88,104,105,110,87,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,119,130,113,104,98,108],
[109,0,114,124,105,115,109,105],
[91,96,0,110,128,90,86,98],
[80,86,100,0,93,95,92,88],
[97,105,82,117,0,97,116,87],
[106,95,120,115,113,0,84,75],
[112,101,124,118,94,126,0,113],
[102,105,112,122,123,135,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,100,100,98,102,105],
[101,0,104,98,103,91,92,102],
[107,106,0,98,115,91,112,101],
[110,112,112,0,112,97,115,109],
[110,107,95,98,0,94,110,103],
[112,119,119,113,116,0,114,104],
[108,118,98,95,100,96,0,104],
[105,108,109,101,107,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,121,112,102,134,130,123],
[78,0,94,96,90,109,109,97],
[89,116,0,104,96,115,129,121],
[98,114,106,0,105,116,122,120],
[108,120,114,105,0,122,114,104],
[76,101,95,94,88,0,114,101],
[80,101,81,88,96,96,0,105],
[87,113,89,90,106,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,101,98,95,99,113,103],
[123,0,102,104,104,117,116,105],
[109,108,0,103,110,102,102,110],
[112,106,107,0,101,105,97,111],
[115,106,100,109,0,105,114,119],
[111,93,108,105,105,0,104,104],
[97,94,108,113,96,106,0,104],
[107,105,100,99,91,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,91,71,108,90,80,108],
[71,0,79,89,80,105,52,73],
[119,131,0,108,113,81,63,99],
[139,121,102,0,149,82,84,92],
[102,130,97,61,0,77,62,63],
[120,105,129,128,133,0,74,91],
[130,158,147,126,148,136,0,100],
[102,137,111,118,147,119,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,101,105,95,94,82],
[105,0,81,98,81,76,100,84],
[107,129,0,116,120,104,104,115],
[109,112,94,0,93,107,100,112],
[105,129,90,117,0,91,107,104],
[115,134,106,103,119,0,119,122],
[116,110,106,110,103,91,0,113],
[128,126,95,98,106,88,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,110,105,111,111,116,118],
[101,0,113,101,105,107,120,108],
[100,97,0,91,97,101,110,102],
[105,109,119,0,102,106,109,113],
[99,105,113,108,0,100,115,114],
[99,103,109,104,110,0,108,103],
[94,90,100,101,95,102,0,94],
[92,102,108,97,96,107,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,137,80,99,110,83,76],
[93,0,95,91,70,89,84,88],
[73,115,0,97,79,105,79,83],
[130,119,113,0,124,119,103,112],
[111,140,131,86,0,114,102,87],
[100,121,105,91,96,0,74,109],
[127,126,131,107,108,136,0,105],
[134,122,127,98,123,101,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,98,99,109,89,87],
[101,0,102,92,105,114,110,98],
[111,108,0,100,97,115,88,101],
[112,118,110,0,99,111,103,105],
[111,105,113,111,0,123,110,90],
[101,96,95,99,87,0,87,79],
[121,100,122,107,100,123,0,104],
[123,112,109,105,120,131,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,111,137,97,115,165,174],
[54,0,103,79,82,103,108,145],
[99,107,0,127,77,115,107,147],
[73,131,83,0,122,114,125,135],
[113,128,133,88,0,135,118,156],
[95,107,95,96,75,0,106,132],
[45,102,103,85,92,104,0,111],
[36,65,63,75,54,78,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,128,109,106,93,114],
[103,0,104,136,120,90,92,86],
[105,106,0,97,94,107,108,133],
[82,74,113,0,99,95,80,92],
[101,90,116,111,0,79,93,110],
[104,120,103,115,131,0,95,110],
[117,118,102,130,117,115,0,131],
[96,124,77,118,100,100,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,81,120,119,82,86,75],
[129,0,109,119,138,90,132,136],
[129,101,0,120,119,97,120,76],
[90,91,90,0,127,88,112,105],
[91,72,91,83,0,96,98,68],
[128,120,113,122,114,0,127,100],
[124,78,90,98,112,83,0,81],
[135,74,134,105,142,110,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,87,96,80,109,104,92],
[113,0,93,112,101,102,111,122],
[123,117,0,122,99,109,110,105],
[114,98,88,0,87,98,100,107],
[130,109,111,123,0,98,103,102],
[101,108,101,112,112,0,105,118],
[106,99,100,110,107,105,0,115],
[118,88,105,103,108,92,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,122,101,109,106,111,110],
[113,0,109,98,114,116,117,107],
[88,101,0,102,115,92,110,95],
[109,112,108,0,137,116,121,105],
[101,96,95,73,0,96,104,99],
[104,94,118,94,114,0,108,99],
[99,93,100,89,106,102,0,96],
[100,103,115,105,111,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,108,110,102,107,102,99],
[90,0,90,95,96,108,92,98],
[102,120,0,100,106,102,105,91],
[100,115,110,0,91,95,109,90],
[108,114,104,119,0,117,105,105],
[103,102,108,115,93,0,91,80],
[108,118,105,101,105,119,0,101],
[111,112,119,120,105,130,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,100,104,92,105,107,104],
[114,0,110,108,104,105,117,118],
[110,100,0,110,118,113,112,105],
[106,102,100,0,97,107,118,112],
[118,106,92,113,0,113,110,122],
[105,105,97,103,97,0,108,115],
[103,93,98,92,100,102,0,113],
[106,92,105,98,88,95,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,123,114,115,99,108,105],
[91,0,103,105,105,93,101,102],
[87,107,0,107,82,108,83,100],
[96,105,103,0,105,104,94,117],
[95,105,128,105,0,103,107,101],
[111,117,102,106,107,0,107,112],
[102,109,127,116,103,103,0,113],
[105,108,110,93,109,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,90,69,107,101,117,82],
[117,0,125,89,100,116,142,98],
[120,85,0,94,124,102,149,118],
[141,121,116,0,139,103,127,107],
[103,110,86,71,0,92,111,87],
[109,94,108,107,118,0,124,99],
[93,68,61,83,99,86,0,76],
[128,112,92,103,123,111,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,89,114,114,96,111,104],
[80,0,106,132,115,76,113,121],
[121,104,0,106,115,85,112,132],
[96,78,104,0,111,111,84,122],
[96,95,95,99,0,86,93,88],
[114,134,125,99,124,0,97,139],
[99,97,98,126,117,113,0,97],
[106,89,78,88,122,71,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,115,107,116,107,103,113],
[117,0,121,111,109,110,99,113],
[95,89,0,99,93,90,98,99],
[103,99,111,0,117,105,106,106],
[94,101,117,93,0,100,109,114],
[103,100,120,105,110,0,97,109],
[107,111,112,104,101,113,0,96],
[97,97,111,104,96,101,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,89,104,84,108,132,85],
[111,0,67,101,88,101,118,97],
[121,143,0,98,106,124,119,119],
[106,109,112,0,105,126,131,109],
[126,122,104,105,0,134,122,99],
[102,109,86,84,76,0,103,79],
[78,92,91,79,88,107,0,93],
[125,113,91,101,111,131,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,106,106,112,104,108],
[100,0,114,137,126,119,114,119],
[109,96,0,109,116,107,112,117],
[104,73,101,0,87,106,97,98],
[104,84,94,123,0,116,91,108],
[98,91,103,104,94,0,122,117],
[106,96,98,113,119,88,0,101],
[102,91,93,112,102,93,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,96,96,100,110,111,92],
[105,0,102,97,105,112,110,106],
[114,108,0,104,106,99,116,106],
[114,113,106,0,99,106,109,96],
[110,105,104,111,0,114,115,101],
[100,98,111,104,96,0,102,104],
[99,100,94,101,95,108,0,95],
[118,104,104,114,109,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,95,123,105,109,113,104],
[105,0,84,97,107,99,101,98],
[115,126,0,130,118,115,119,105],
[87,113,80,0,110,104,99,97],
[105,103,92,100,0,97,88,92],
[101,111,95,106,113,0,110,95],
[97,109,91,111,122,100,0,95],
[106,112,105,113,118,115,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,100,130,138,114,104,120],
[95,0,127,126,123,124,111,110],
[110,83,0,116,122,104,93,98],
[80,84,94,0,95,101,86,99],
[72,87,88,115,0,96,88,96],
[96,86,106,109,114,0,98,101],
[106,99,117,124,122,112,0,112],
[90,100,112,111,114,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,106,108,113,119,104,107],
[97,0,106,110,99,110,107,105],
[104,104,0,104,100,106,104,107],
[102,100,106,0,118,102,84,101],
[97,111,110,92,0,108,100,100],
[91,100,104,108,102,0,94,101],
[106,103,106,126,110,116,0,114],
[103,105,103,109,110,109,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,125,105,140,123,140,142],
[85,0,106,119,104,138,121,85],
[85,104,0,121,104,121,86,104],
[105,91,89,0,124,88,90,108],
[70,106,106,86,0,105,105,141],
[87,72,89,122,105,0,88,89],
[70,89,124,120,105,122,0,106],
[68,125,106,102,69,121,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,102,86,98,112,114,114],
[125,0,112,105,125,117,130,125],
[108,98,0,105,92,108,111,119],
[124,105,105,0,121,115,125,119],
[112,85,118,89,0,98,104,117],
[98,93,102,95,112,0,102,95],
[96,80,99,85,106,108,0,109],
[96,85,91,91,93,115,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,142,107,142,142,105,108],
[102,0,137,175,105,139,102,138],
[68,73,0,107,107,141,104,107],
[103,35,103,0,69,105,69,105],
[68,105,103,141,0,107,68,141],
[68,71,69,105,103,0,68,71],
[105,108,106,141,142,142,0,107],
[102,72,103,105,69,139,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,98,96,78,93,92,89],
[121,0,104,85,78,86,108,88],
[112,106,0,117,99,104,121,86],
[114,125,93,0,105,105,120,103],
[132,132,111,105,0,112,121,130],
[117,124,106,105,98,0,109,106],
[118,102,89,90,89,101,0,90],
[121,122,124,107,80,104,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,92,106,97,108,104,112],
[110,0,105,112,114,104,103,108],
[118,105,0,119,108,119,113,113],
[104,98,91,0,98,105,112,101],
[113,96,102,112,0,105,111,111],
[102,106,91,105,105,0,104,112],
[106,107,97,98,99,106,0,111],
[98,102,97,109,99,98,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,93,102,117,111,98,117],
[105,0,111,97,126,85,109,114],
[117,99,0,103,118,99,120,126],
[108,113,107,0,128,104,131,111],
[93,84,92,82,0,71,102,103],
[99,125,111,106,139,0,98,114],
[112,101,90,79,108,112,0,108],
[93,96,84,99,107,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,109,129,124,108,108],
[114,0,97,107,133,114,112,111],
[111,113,0,93,130,134,118,112],
[101,103,117,0,134,127,114,106],
[81,77,80,76,0,106,93,86],
[86,96,76,83,104,0,89,101],
[102,98,92,96,117,121,0,114],
[102,99,98,104,124,109,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,95,117,112,107,98,90],
[103,0,89,112,108,111,93,84],
[115,121,0,132,117,125,109,105],
[93,98,78,0,100,85,81,82],
[98,102,93,110,0,104,92,92],
[103,99,85,125,106,0,89,93],
[112,117,101,129,118,121,0,94],
[120,126,105,128,118,117,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,116,109,107,100,113],
[101,0,98,122,115,115,100,111],
[103,112,0,112,117,126,107,118],
[94,88,98,0,114,110,101,115],
[101,95,93,96,0,111,93,100],
[103,95,84,100,99,0,96,97],
[110,110,103,109,117,114,0,115],
[97,99,92,95,110,113,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,102,115,97,101,110],
[109,0,110,104,113,91,97,108],
[107,100,0,96,110,102,108,115],
[108,106,114,0,110,112,101,117],
[95,97,100,100,0,89,110,97],
[113,119,108,98,121,0,115,115],
[109,113,102,109,100,95,0,101],
[100,102,95,93,113,95,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,104,81,93,108,96],
[102,0,103,98,101,99,116,106],
[99,107,0,122,116,113,106,102],
[106,112,88,0,94,100,107,97],
[129,109,94,116,0,103,112,107],
[117,111,97,110,107,0,115,99],
[102,94,104,103,98,95,0,105],
[114,104,108,113,103,111,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,99,90,122,121,125,107],
[100,0,74,94,110,94,112,102],
[111,136,0,96,99,127,137,101],
[120,116,114,0,115,135,139,99],
[88,100,111,95,0,110,107,86],
[89,116,83,75,100,0,115,102],
[85,98,73,71,103,95,0,81],
[103,108,109,111,124,108,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,90,101,91,96,102,109],
[117,0,99,120,107,112,117,104],
[120,111,0,115,113,103,118,107],
[109,90,95,0,104,98,108,101],
[119,103,97,106,0,120,114,102],
[114,98,107,112,90,0,109,108],
[108,93,92,102,96,101,0,90],
[101,106,103,109,108,102,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,99,87,106,106,110,111],
[89,0,96,92,104,97,92,111],
[111,114,0,95,109,113,105,108],
[123,118,115,0,125,119,102,128],
[104,106,101,85,0,97,99,112],
[104,113,97,91,113,0,103,114],
[100,118,105,108,111,107,0,108],
[99,99,102,82,98,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,118,103,119,105,97],
[103,0,120,122,115,112,102,114],
[103,90,0,95,107,92,92,98],
[92,88,115,0,103,106,96,97],
[107,95,103,107,0,103,96,102],
[91,98,118,104,107,0,101,108],
[105,108,118,114,114,109,0,108],
[113,96,112,113,108,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,83,103,100,97,93,108],
[116,0,103,117,109,114,99,114],
[127,107,0,116,104,111,116,131],
[107,93,94,0,101,93,96,109],
[110,101,106,109,0,106,108,109],
[113,96,99,117,104,0,106,108],
[117,111,94,114,102,104,0,107],
[102,96,79,101,101,102,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,109,99,97,101,99,119],
[114,0,117,111,124,109,97,119],
[101,93,0,98,103,100,98,113],
[111,99,112,0,108,105,101,115],
[113,86,107,102,0,102,98,115],
[109,101,110,105,108,0,107,111],
[111,113,112,109,112,103,0,119],
[91,91,97,95,95,99,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,107,93,96,114,105,99],
[111,0,108,101,98,118,112,105],
[103,102,0,105,106,109,112,100],
[117,109,105,0,94,104,105,109],
[114,112,104,116,0,107,115,101],
[96,92,101,106,103,0,95,103],
[105,98,98,105,95,115,0,105],
[111,105,110,101,109,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,103,133,105,141,138,156],
[121,0,114,135,91,121,123,130],
[107,96,0,134,105,122,140,137],
[77,75,76,0,100,94,103,117],
[105,119,105,110,0,97,141,150],
[69,89,88,116,113,0,107,121],
[72,87,70,107,69,103,0,131],
[54,80,73,93,60,89,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,95,98,88,101,83,114],
[126,0,104,122,117,112,107,129],
[115,106,0,118,110,110,90,118],
[112,88,92,0,91,94,84,116],
[122,93,100,119,0,116,104,108],
[109,98,100,116,94,0,82,106],
[127,103,120,126,106,128,0,131],
[96,81,92,94,102,104,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,99,108,106,116,100,121],
[105,0,106,110,80,92,94,96],
[111,104,0,99,87,111,104,112],
[102,100,111,0,98,110,97,103],
[104,130,123,112,0,134,119,114],
[94,118,99,100,76,0,106,91],
[110,116,106,113,91,104,0,108],
[89,114,98,107,96,119,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,109,107,109,106,91,86],
[83,0,88,86,74,87,72,75],
[101,122,0,89,95,114,73,71],
[103,124,121,0,100,96,80,97],
[101,136,115,110,0,94,111,108],
[104,123,96,114,116,0,79,86],
[119,138,137,130,99,131,0,125],
[124,135,139,113,102,124,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,120,104,116,117,121,117],
[108,0,104,106,111,112,110,114],
[90,106,0,109,101,112,108,121],
[106,104,101,0,96,105,116,113],
[94,99,109,114,0,107,118,108],
[93,98,98,105,103,0,110,127],
[89,100,102,94,92,100,0,101],
[93,96,89,97,102,83,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,105,103,102,99,90],
[114,0,116,102,108,112,120,109],
[111,94,0,111,117,114,118,105],
[105,108,99,0,122,109,108,115],
[107,102,93,88,0,103,112,100],
[108,98,96,101,107,0,105,109],
[111,90,92,102,98,105,0,92],
[120,101,105,95,110,101,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,102,120,106,96,121],
[100,0,83,104,105,115,104,103],
[104,127,0,120,113,104,112,126],
[108,106,90,0,103,108,102,126],
[90,105,97,107,0,104,99,113],
[104,95,106,102,106,0,112,116],
[114,106,98,108,111,98,0,103],
[89,107,84,84,97,94,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,148,122,112,104,116,114],
[105,0,134,111,89,104,122,113],
[62,76,0,86,81,90,89,96],
[88,99,124,0,95,113,107,110],
[98,121,129,115,0,110,118,126],
[106,106,120,97,100,0,99,123],
[94,88,121,103,92,111,0,113],
[96,97,114,100,84,87,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,108,108,101,108,103,104],
[118,0,100,113,106,116,117,108],
[102,110,0,109,93,107,105,98],
[102,97,101,0,93,106,95,95],
[109,104,117,117,0,125,119,110],
[102,94,103,104,85,0,103,104],
[107,93,105,115,91,107,0,99],
[106,102,112,115,100,106,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,136,103,67,69,50,135],
[124,0,100,82,66,69,122,139],
[74,110,0,91,108,75,71,126],
[107,128,119,0,54,73,89,106],
[143,144,102,156,0,106,140,143],
[141,141,135,137,104,0,121,139],
[160,88,139,121,70,89,0,176],
[75,71,84,104,67,71,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,110,110,103,107,95,108],
[77,0,97,89,88,90,101,98],
[100,113,0,109,99,100,105,108],
[100,121,101,0,99,92,90,99],
[107,122,111,111,0,87,112,109],
[103,120,110,118,123,0,107,109],
[115,109,105,120,98,103,0,103],
[102,112,102,111,101,101,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,127,98,110,110,115,87],
[108,0,135,101,111,100,104,105],
[83,75,0,84,69,78,84,93],
[112,109,126,0,109,111,104,100],
[100,99,141,101,0,101,110,74],
[100,110,132,99,109,0,100,106],
[95,106,126,106,100,110,0,97],
[123,105,117,110,136,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,68,87,91,58,118,113],
[115,0,121,109,88,90,124,130],
[142,89,0,124,98,112,100,104],
[123,101,86,0,105,81,108,107],
[119,122,112,105,0,114,127,126],
[152,120,98,129,96,0,130,138],
[92,86,110,102,83,80,0,99],
[97,80,106,103,84,72,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,99,103,99,87,94],
[108,0,98,107,112,102,92,102],
[117,112,0,110,108,101,104,104],
[111,103,100,0,111,111,96,100],
[107,98,102,99,0,108,93,96],
[111,108,109,99,102,0,94,108],
[123,118,106,114,117,116,0,104],
[116,108,106,110,114,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,116,108,99,101,99,108],
[98,0,114,112,113,111,108,108],
[94,96,0,108,104,102,101,107],
[102,98,102,0,106,99,102,106],
[111,97,106,104,0,99,89,106],
[109,99,108,111,111,0,107,101],
[111,102,109,108,121,103,0,111],
[102,102,103,104,104,109,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,98,110,112,114,104],
[97,0,111,108,107,108,110,103],
[103,99,0,102,116,110,114,101],
[112,102,108,0,96,109,108,100],
[100,103,94,114,0,109,111,93],
[98,102,100,101,101,0,94,98],
[96,100,96,102,99,116,0,109],
[106,107,109,110,117,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,109,112,99,107,99],
[109,0,95,102,101,106,106,101],
[102,115,0,110,110,109,109,95],
[101,108,100,0,93,99,108,104],
[98,109,100,117,0,112,104,98],
[111,104,101,111,98,0,120,107],
[103,104,101,102,106,90,0,94],
[111,109,115,106,112,103,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,139,114,126,120,130,130],
[105,0,143,116,123,123,135,117],
[71,67,0,97,102,104,103,86],
[96,94,113,0,113,125,129,103],
[84,87,108,97,0,85,105,89],
[90,87,106,85,125,0,111,109],
[80,75,107,81,105,99,0,108],
[80,93,124,107,121,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,94,110,109,101,100,100],
[132,0,136,113,119,113,115,99],
[116,74,0,107,113,108,116,99],
[100,97,103,0,102,111,108,95],
[101,91,97,108,0,107,110,109],
[109,97,102,99,103,0,108,105],
[110,95,94,102,100,102,0,115],
[110,111,111,115,101,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,119,87,74,117,102,120],
[109,0,97,118,53,93,116,121],
[91,113,0,91,103,116,126,116],
[123,92,119,0,106,95,103,120],
[136,157,107,104,0,106,90,133],
[93,117,94,115,104,0,89,92],
[108,94,84,107,120,121,0,107],
[90,89,94,90,77,118,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,96,108,103,112,109,106],
[107,0,98,117,120,123,117,99],
[114,112,0,123,118,135,114,103],
[102,93,87,0,99,102,92,98],
[107,90,92,111,0,111,105,102],
[98,87,75,108,99,0,108,92],
[101,93,96,118,105,102,0,101],
[104,111,107,112,108,118,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,116,104,123,98,109,113],
[117,0,111,103,132,107,101,107],
[94,99,0,93,110,90,91,96],
[106,107,117,0,111,99,112,106],
[87,78,100,99,0,87,96,91],
[112,103,120,111,123,0,110,101],
[101,109,119,98,114,100,0,94],
[97,103,114,104,119,109,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,93,93,88,112,94,105],
[112,0,107,108,102,117,106,113],
[117,103,0,108,109,120,106,111],
[117,102,102,0,102,111,115,106],
[122,108,101,108,0,128,115,101],
[98,93,90,99,82,0,89,105],
[116,104,104,95,95,121,0,120],
[105,97,99,104,109,105,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,132,115,101,127,142,117],
[95,0,112,115,76,97,141,92],
[78,98,0,120,79,108,111,81],
[95,95,90,0,84,106,138,90],
[109,134,131,126,0,119,139,104],
[83,113,102,104,91,0,126,104],
[68,69,99,72,71,84,0,58],
[93,118,129,120,106,106,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,108,114,115,107,107,105],
[88,0,91,102,107,91,97,88],
[102,119,0,108,116,107,106,101],
[96,108,102,0,99,98,95,94],
[95,103,94,111,0,97,102,98],
[103,119,103,112,113,0,110,101],
[103,113,104,115,108,100,0,104],
[105,122,109,116,112,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,96,116,108,110,94],
[104,0,108,98,105,103,108,90],
[103,102,0,105,112,115,104,115],
[114,112,105,0,120,115,110,89],
[94,105,98,90,0,110,118,95],
[102,107,95,95,100,0,118,88],
[100,102,106,100,92,92,0,89],
[116,120,95,121,115,122,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,102,111,110,127,108,97],
[92,0,96,88,92,119,91,84],
[108,114,0,124,107,130,115,105],
[99,122,86,0,100,119,105,101],
[100,118,103,110,0,120,111,98],
[83,91,80,91,90,0,94,87],
[102,119,95,105,99,116,0,100],
[113,126,105,109,112,123,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,124,113,127,100,94,119],
[90,0,89,88,91,62,88,87],
[86,121,0,108,111,111,114,100],
[97,122,102,0,121,90,116,83],
[83,119,99,89,0,93,103,77],
[110,148,99,120,117,0,109,104],
[116,122,96,94,107,101,0,107],
[91,123,110,127,133,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,119,89,94,96,106,86],
[105,0,111,108,96,109,114,111],
[91,99,0,87,89,99,93,87],
[121,102,123,0,97,103,120,112],
[116,114,121,113,0,111,130,104],
[114,101,111,107,99,0,117,96],
[104,96,117,90,80,93,0,81],
[124,99,123,98,106,114,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,116,109,113,106,103,106],
[106,0,109,114,112,107,98,107],
[94,101,0,115,109,102,111,107],
[101,96,95,0,110,93,101,105],
[97,98,101,100,0,105,98,97],
[104,103,108,117,105,0,98,107],
[107,112,99,109,112,112,0,114],
[104,103,103,105,113,103,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,89,101,115,106,88,100],
[108,0,111,108,117,105,88,101],
[121,99,0,98,128,109,94,117],
[109,102,112,0,120,115,110,109],
[95,93,82,90,0,95,82,87],
[104,105,101,95,115,0,94,99],
[122,122,116,100,128,116,0,100],
[110,109,93,101,123,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,126,119,110,104,104,97],
[108,0,112,114,113,114,126,99],
[84,98,0,90,105,100,105,91],
[91,96,120,0,102,112,109,99],
[100,97,105,108,0,89,96,94],
[106,96,110,98,121,0,122,89],
[106,84,105,101,114,88,0,105],
[113,111,119,111,116,121,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,109,114,100,107,121],
[103,0,100,103,109,99,100,113],
[99,110,0,117,109,107,108,111],
[101,107,93,0,102,111,96,105],
[96,101,101,108,0,99,99,107],
[110,111,103,99,111,0,98,106],
[103,110,102,114,111,112,0,108],
[89,97,99,105,103,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,117,115,115,110,121,99],
[98,0,106,103,85,108,110,94],
[93,104,0,97,89,101,102,99],
[95,107,113,0,104,109,110,95],
[95,125,121,106,0,108,113,108],
[100,102,109,101,102,0,100,88],
[89,100,108,100,97,110,0,89],
[111,116,111,115,102,122,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,92,87,100,115,95,85],
[101,0,102,115,113,118,99,80],
[118,108,0,110,117,97,111,106],
[123,95,100,0,124,117,101,87],
[110,97,93,86,0,94,92,81],
[95,92,113,93,116,0,91,94],
[115,111,99,109,118,119,0,94],
[125,130,104,123,129,116,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,92,101,118,91,99,128],
[117,0,94,108,118,103,102,124],
[118,116,0,102,118,104,111,124],
[109,102,108,0,106,103,113,122],
[92,92,92,104,0,96,103,98],
[119,107,106,107,114,0,104,113],
[111,108,99,97,107,106,0,109],
[82,86,86,88,112,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,108,126,99,98,128],
[106,0,86,106,110,95,88,85],
[101,124,0,102,130,99,99,113],
[102,104,108,0,147,111,98,102],
[84,100,80,63,0,108,81,95],
[111,115,111,99,102,0,102,116],
[112,122,111,112,129,108,0,102],
[82,125,97,108,115,94,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,97,98,98,84,91,98],
[117,0,89,98,105,108,114,108],
[113,121,0,104,105,111,108,121],
[112,112,106,0,108,97,108,119],
[112,105,105,102,0,103,107,120],
[126,102,99,113,107,0,106,100],
[119,96,102,102,103,104,0,98],
[112,102,89,91,90,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,105,96,106,128,94,104],
[92,0,89,73,92,107,81,81],
[105,121,0,102,128,112,119,89],
[114,137,108,0,138,125,105,112],
[104,118,82,72,0,104,67,99],
[82,103,98,85,106,0,85,87],
[116,129,91,105,143,125,0,88],
[106,129,121,98,111,123,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,97,105,100,85,103,97],
[105,0,105,109,106,108,96,98],
[113,105,0,108,115,97,99,104],
[105,101,102,0,107,102,105,106],
[110,104,95,103,0,102,91,93],
[125,102,113,108,108,0,114,105],
[107,114,111,105,119,96,0,115],
[113,112,106,104,117,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,97,96,107,105,99,101],
[114,0,102,102,109,99,112,107],
[113,108,0,105,110,102,107,105],
[114,108,105,0,114,113,115,118],
[103,101,100,96,0,100,107,98],
[105,111,108,97,110,0,109,103],
[111,98,103,95,103,101,0,103],
[109,103,105,92,112,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,116,119,119,98,122,117],
[122,0,146,109,88,108,105,114],
[94,64,0,82,97,78,101,76],
[91,101,128,0,88,69,107,93],
[91,122,113,122,0,98,120,97],
[112,102,132,141,112,0,129,125],
[88,105,109,103,90,81,0,79],
[93,96,134,117,113,85,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,112,114,107,103,108,130],
[92,0,134,125,108,133,117,143],
[98,76,0,93,87,88,106,110],
[96,85,117,0,75,99,87,119],
[103,102,123,135,0,128,103,119],
[107,77,122,111,82,0,115,115],
[102,93,104,123,107,95,0,123],
[80,67,100,91,91,95,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,105,120,161,129,116,115],
[83,0,71,96,137,90,54,75],
[105,139,0,138,139,95,119,118],
[90,114,72,0,127,95,63,84],
[49,73,71,83,0,77,32,61],
[81,120,115,115,133,0,92,114],
[94,156,91,147,178,118,0,115],
[95,135,92,126,149,96,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,105,103,104,98,101,90],
[102,0,104,112,110,98,98,93],
[105,106,0,109,114,100,111,104],
[107,98,101,0,104,107,102,96],
[106,100,96,106,0,98,96,105],
[112,112,110,103,112,0,103,99],
[109,112,99,108,114,107,0,113],
[120,117,106,114,105,111,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,121,111,108,104,108,110],
[104,0,116,105,106,110,109,103],
[89,94,0,97,93,108,108,103],
[99,105,113,0,103,104,107,107],
[102,104,117,107,0,100,124,115],
[106,100,102,106,110,0,105,113],
[102,101,102,103,86,105,0,106],
[100,107,107,103,95,97,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,90,96,100,108,107,100],
[106,0,105,107,103,110,98,96],
[120,105,0,120,119,109,102,107],
[114,103,90,0,109,114,104,119],
[110,107,91,101,0,121,91,110],
[102,100,101,96,89,0,96,114],
[103,112,108,106,119,114,0,121],
[110,114,103,91,100,96,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,97,95,83,106,100],
[105,0,109,103,105,108,102,107],
[104,101,0,97,101,93,98,99],
[113,107,113,0,100,106,106,104],
[115,105,109,110,0,109,109,117],
[127,102,117,104,101,0,111,118],
[104,108,112,104,101,99,0,111],
[110,103,111,106,93,92,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,94,110,110,91,90,95],
[109,0,108,104,109,108,95,101],
[116,102,0,110,109,99,91,111],
[100,106,100,0,100,97,91,104],
[100,101,101,110,0,103,99,96],
[119,102,111,113,107,0,107,100],
[120,115,119,119,111,103,0,105],
[115,109,99,106,114,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,89,90,88,98,107,111],
[119,0,113,111,113,108,99,103],
[121,97,0,107,105,110,94,102],
[120,99,103,0,95,108,102,96],
[122,97,105,115,0,100,114,91],
[112,102,100,102,110,0,106,106],
[103,111,116,108,96,104,0,86],
[99,107,108,114,119,104,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,88,98,100,100,102,79],
[102,0,84,76,77,86,93,82],
[122,126,0,94,113,107,104,91],
[112,134,116,0,110,108,102,106],
[110,133,97,100,0,106,116,95],
[110,124,103,102,104,0,117,86],
[108,117,106,108,94,93,0,101],
[131,128,119,104,115,124,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,88,97,83,96,88,96],
[104,0,91,93,102,102,96,109],
[122,119,0,117,102,109,106,113],
[113,117,93,0,101,114,102,120],
[127,108,108,109,0,105,111,115],
[114,108,101,96,105,0,106,110],
[122,114,104,108,99,104,0,112],
[114,101,97,90,95,100,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,91,127,111,107,97,103],
[102,0,77,96,101,84,105,93],
[119,133,0,139,108,99,108,126],
[83,114,71,0,102,77,95,86],
[99,109,102,108,0,77,95,94],
[103,126,111,133,133,0,117,111],
[113,105,102,115,115,93,0,91],
[107,117,84,124,116,99,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,95,95,100,93,115],
[99,0,90,90,106,97,79,118],
[108,120,0,111,112,111,98,128],
[115,120,99,0,121,111,110,122],
[115,104,98,89,0,111,98,107],
[110,113,99,99,99,0,90,105],
[117,131,112,100,112,120,0,134],
[95,92,82,88,103,105,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,98,111,121,128,133],
[107,0,112,110,94,98,113,125],
[103,98,0,136,116,95,97,127],
[112,100,74,0,89,94,99,103],
[99,116,94,121,0,95,113,118],
[89,112,115,116,115,0,119,115],
[82,97,113,111,97,91,0,111],
[77,85,83,107,92,95,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,116,101,114,96,118,111],
[84,0,104,92,100,89,97,108],
[94,106,0,104,96,96,83,98],
[109,118,106,0,97,118,89,96],
[96,110,114,113,0,98,113,106],
[114,121,114,92,112,0,95,100],
[92,113,127,121,97,115,0,107],
[99,102,112,114,104,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,112,101,100,99,95,90],
[135,0,109,112,117,103,110,102],
[98,101,0,106,100,107,77,119],
[109,98,104,0,101,110,102,85],
[110,93,110,109,0,106,108,97],
[111,107,103,100,104,0,97,107],
[115,100,133,108,102,113,0,106],
[120,108,91,125,113,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,89,69,88,70,80,75],
[125,0,95,103,116,89,114,110],
[121,115,0,112,108,97,93,87],
[141,107,98,0,122,89,98,90],
[122,94,102,88,0,80,108,91],
[140,121,113,121,130,0,105,118],
[130,96,117,112,102,105,0,101],
[135,100,123,120,119,92,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,117,114,110,104,108],
[101,0,115,115,123,105,102,115],
[102,95,0,107,109,98,91,105],
[93,95,103,0,114,107,94,104],
[96,87,101,96,0,97,95,90],
[100,105,112,103,113,0,114,110],
[106,108,119,116,115,96,0,105],
[102,95,105,106,120,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,120,115,98,84,99,108],
[106,0,103,104,111,98,89,89],
[90,107,0,108,104,95,99,93],
[95,106,102,0,115,97,87,82],
[112,99,106,95,0,94,88,85],
[126,112,115,113,116,0,103,105],
[111,121,111,123,122,107,0,103],
[102,121,117,128,125,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,130,145,107,133,157,93],
[75,0,116,65,80,79,91,52],
[80,94,0,79,80,121,108,80],
[65,145,131,0,93,90,106,77],
[103,130,130,117,0,158,144,116],
[77,131,89,120,52,0,104,77],
[53,119,102,104,66,106,0,77],
[117,158,130,133,94,133,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,115,86,111,108,100,112],
[101,0,119,85,108,90,93,94],
[95,91,0,79,95,103,98,92],
[124,125,131,0,117,104,124,121],
[99,102,115,93,0,94,95,106],
[102,120,107,106,116,0,106,104],
[110,117,112,86,115,104,0,115],
[98,116,118,89,104,106,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,100,114,101,108,108,116],
[98,0,96,93,114,113,109,103],
[110,114,0,108,98,102,126,99],
[96,117,102,0,80,126,119,100],
[109,96,112,130,0,113,124,131],
[102,97,108,84,97,0,101,104],
[102,101,84,91,86,109,0,109],
[94,107,111,110,79,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,98,111,111,129,123,144],
[91,0,111,89,89,119,101,100],
[112,99,0,64,77,110,91,66],
[99,121,146,0,131,131,89,110],
[99,121,133,79,0,131,88,65],
[81,91,100,79,79,0,81,90],
[87,109,119,121,122,129,0,142],
[66,110,144,100,145,120,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,103,101,110,98,116,105],
[91,0,94,85,81,94,92,102],
[107,116,0,100,89,121,97,115],
[109,125,110,0,85,110,98,114],
[100,129,121,125,0,116,115,124],
[112,116,89,100,94,0,98,106],
[94,118,113,112,95,112,0,120],
[105,108,95,96,86,104,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,120,99,108,119,106,126],
[109,0,117,97,113,105,113,119],
[90,93,0,77,98,85,84,107],
[111,113,133,0,90,127,133,112],
[102,97,112,120,0,109,127,106],
[91,105,125,83,101,0,95,93],
[104,97,126,77,83,115,0,120],
[84,91,103,98,104,117,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,86,85,88,104,101,90],
[116,0,109,105,99,113,112,107],
[124,101,0,99,98,104,104,105],
[125,105,111,0,110,115,111,113],
[122,111,112,100,0,113,111,105],
[106,97,106,95,97,0,98,95],
[109,98,106,99,99,112,0,105],
[120,103,105,97,105,115,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,114,100,114,99,104],
[106,0,103,106,101,110,88,99],
[98,107,0,93,94,105,90,110],
[96,104,117,0,104,96,101,104],
[110,109,116,106,0,91,111,106],
[96,100,105,114,119,0,111,89],
[111,122,120,109,99,99,0,109],
[106,111,100,106,104,121,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,89,98,87,82,79],
[108,0,125,111,123,117,107,104],
[99,85,0,98,102,108,95,86],
[121,99,112,0,119,113,111,91],
[112,87,108,91,0,101,99,94],
[123,93,102,97,109,0,98,94],
[128,103,115,99,111,112,0,112],
[131,106,124,119,116,116,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,129,109,118,119,109],
[112,0,107,122,113,103,113,118],
[103,103,0,104,108,97,101,103],
[81,88,106,0,103,110,111,102],
[101,97,102,107,0,115,114,97],
[92,107,113,100,95,0,122,104],
[91,97,109,99,96,88,0,98],
[101,92,107,108,113,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,89,109,88,117,115,108],
[114,0,115,96,98,123,147,97],
[121,95,0,105,86,106,96,89],
[101,114,105,0,80,106,104,105],
[122,112,124,130,0,133,140,100],
[93,87,104,104,77,0,131,114],
[95,63,114,106,70,79,0,72],
[102,113,121,105,110,96,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,102,96,112,112,114,120],
[96,0,98,105,103,110,95,106],
[108,112,0,114,115,96,105,100],
[114,105,96,0,111,105,97,114],
[98,107,95,99,0,103,97,117],
[98,100,114,105,107,0,110,112],
[96,115,105,113,113,100,0,107],
[90,104,110,96,93,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,105,105,210,105,210,210],
[0,0,0,105,210,105,210,105],
[105,210,0,105,210,105,210,105],
[105,105,105,0,105,105,105,105],
[0,0,0,105,0,105,105,105],
[105,105,105,105,105,0,210,105],
[0,0,0,105,105,0,0,105],
[0,105,105,105,105,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,87,91,97,82,96,95],
[126,0,110,121,106,99,105,90],
[123,100,0,116,114,117,104,96],
[119,89,94,0,91,95,103,90],
[113,104,96,119,0,103,82,84],
[128,111,93,115,107,0,91,101],
[114,105,106,107,128,119,0,120],
[115,120,114,120,126,109,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,103,109,96,112,106],
[97,0,113,102,105,98,110,100],
[99,97,0,105,109,108,110,106],
[107,108,105,0,108,107,110,96],
[101,105,101,102,0,107,102,103],
[114,112,102,103,103,0,103,101],
[98,100,100,100,108,107,0,108],
[104,110,104,114,107,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,102,104,99,115,99],
[99,0,109,108,108,104,103,107],
[101,101,0,101,107,104,104,106],
[108,102,109,0,106,112,114,108],
[106,102,103,104,0,96,110,95],
[111,106,106,98,114,0,115,103],
[95,107,106,96,100,95,0,102],
[111,103,104,102,115,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,210,210,210,105,105,105],
[210,0,210,210,210,105,105,105],
[0,0,0,105,210,105,105,0],
[0,0,105,0,105,0,0,105],
[0,0,0,105,0,0,0,0],
[105,105,105,210,210,0,105,105],
[105,105,105,210,210,105,0,105],
[105,105,210,105,210,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,99,94,88,86,87,91],
[120,0,120,106,117,109,104,95],
[111,90,0,101,106,98,97,95],
[116,104,109,0,110,111,100,96],
[122,93,104,100,0,110,98,95],
[124,101,112,99,100,0,106,107],
[123,106,113,110,112,104,0,105],
[119,115,115,114,115,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,91,91,62,92,120],
[148,0,118,148,119,87,118,120],
[148,92,0,60,60,118,92,89],
[119,62,150,0,120,119,120,120],
[119,91,150,90,0,119,149,149],
[148,123,92,91,91,0,92,150],
[118,92,118,90,61,118,0,120],
[90,90,121,90,61,60,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,98,102,95,92,85,98],
[113,0,115,111,96,122,112,100],
[112,95,0,95,108,109,108,102],
[108,99,115,0,89,114,106,103],
[115,114,102,121,0,102,105,108],
[118,88,101,96,108,0,89,104],
[125,98,102,104,105,121,0,109],
[112,110,108,107,102,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,98,104,101,100,108],
[105,0,108,112,100,109,116,94],
[99,102,0,99,88,100,101,88],
[112,98,111,0,109,114,104,98],
[106,110,122,101,0,107,104,108],
[109,101,110,96,103,0,104,98],
[110,94,109,106,106,106,0,107],
[102,116,122,112,102,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,101,97,104,100,93,126],
[124,0,116,108,113,104,106,111],
[109,94,0,93,110,106,98,128],
[113,102,117,0,102,113,109,125],
[106,97,100,108,0,107,97,116],
[110,106,104,97,103,0,100,121],
[117,104,112,101,113,110,0,123],
[84,99,82,85,94,89,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,101,103,101,92,94],
[109,0,105,104,112,112,105,107],
[108,105,0,110,112,106,104,93],
[109,106,100,0,100,93,106,97],
[107,98,98,110,0,104,104,103],
[109,98,104,117,106,0,106,101],
[118,105,106,104,106,104,0,106],
[116,103,117,113,107,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,128,91,123,112,118,123],
[91,0,125,107,122,101,114,106],
[82,85,0,84,94,80,87,96],
[119,103,126,0,116,104,115,112],
[87,88,116,94,0,99,91,104],
[98,109,130,106,111,0,101,111],
[92,96,123,95,119,109,0,130],
[87,104,114,98,106,99,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,102,95,86,100,111,85],
[128,0,131,133,107,113,125,93],
[108,79,0,100,75,92,93,80],
[115,77,110,0,97,104,109,106],
[124,103,135,113,0,114,122,109],
[110,97,118,106,96,0,105,98],
[99,85,117,101,88,105,0,86],
[125,117,130,104,101,112,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,95,105,96,108,99],
[105,0,93,109,95,102,100,104],
[106,117,0,115,112,104,112,117],
[115,101,95,0,95,93,110,103],
[105,115,98,115,0,115,99,93],
[114,108,106,117,95,0,101,97],
[102,110,98,100,111,109,0,113],
[111,106,93,107,117,113,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,85,94,95,93,94,106],
[100,0,97,101,106,86,105,105],
[125,113,0,97,100,110,106,108],
[116,109,113,0,122,104,109,115],
[115,104,110,88,0,96,104,105],
[117,124,100,106,114,0,108,108],
[116,105,104,101,106,102,0,109],
[104,105,102,95,105,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,87,101,102,96,92,113],
[100,0,101,117,105,110,101,116],
[123,109,0,118,114,111,103,113],
[109,93,92,0,98,91,88,103],
[108,105,96,112,0,101,100,112],
[114,100,99,119,109,0,106,118],
[118,109,107,122,110,104,0,110],
[97,94,97,107,98,92,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,103,98,109,109,68,95],
[117,0,106,117,95,107,106,135],
[107,104,0,91,102,112,97,117],
[112,93,119,0,112,115,79,125],
[101,115,108,98,0,134,88,136],
[101,103,98,95,76,0,102,125],
[142,104,113,131,122,108,0,133],
[115,75,93,85,74,85,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,112,94,112,97,109],
[106,0,94,100,108,107,101,112],
[108,116,0,118,104,111,121,121],
[98,110,92,0,93,98,85,96],
[116,102,106,117,0,103,102,108],
[98,103,99,112,107,0,111,110],
[113,109,89,125,108,99,0,100],
[101,98,89,114,102,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,99,100,103,104,102,112],
[105,0,98,108,106,101,105,102],
[111,112,0,101,103,103,105,103],
[110,102,109,0,99,96,104,108],
[107,104,107,111,0,102,102,110],
[106,109,107,114,108,0,101,115],
[108,105,105,106,108,109,0,110],
[98,108,107,102,100,95,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,106,97,109,119,116],
[102,0,113,112,98,105,125,117],
[94,97,0,98,92,90,94,116],
[104,98,112,0,106,109,106,120],
[113,112,118,104,0,105,106,114],
[101,105,120,101,105,0,105,112],
[91,85,116,104,104,105,0,112],
[94,93,94,90,96,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,93,100,90,94,80,102],
[133,0,102,125,80,110,99,101],
[117,108,0,124,116,114,95,114],
[110,85,86,0,79,94,89,110],
[120,130,94,131,0,111,95,102],
[116,100,96,116,99,0,103,113],
[130,111,115,121,115,107,0,104],
[108,109,96,100,108,97,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,104,100,99,97,96,130],
[83,0,83,89,94,86,95,116],
[106,127,0,114,99,106,96,124],
[110,121,96,0,110,97,94,117],
[111,116,111,100,0,97,105,120],
[113,124,104,113,113,0,102,131],
[114,115,114,116,105,108,0,126],
[80,94,86,93,90,79,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,117,111,101,116,115,125],
[94,0,101,111,96,107,106,112],
[93,109,0,111,110,106,112,109],
[99,99,99,0,114,113,99,113],
[109,114,100,96,0,105,108,103],
[94,103,104,97,105,0,94,106],
[95,104,98,111,102,116,0,114],
[85,98,101,97,107,104,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,94,85,82,97,95,90],
[125,0,89,105,102,111,107,107],
[116,121,0,97,121,115,128,109],
[125,105,113,0,107,108,121,118],
[128,108,89,103,0,113,103,112],
[113,99,95,102,97,0,105,98],
[115,103,82,89,107,105,0,95],
[120,103,101,92,98,112,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,134,104,98,110,108,96],
[100,0,108,100,87,122,108,88],
[76,102,0,102,75,100,111,64],
[106,110,108,0,111,121,92,95],
[112,123,135,99,0,136,111,125],
[100,88,110,89,74,0,85,75],
[102,102,99,118,99,125,0,77],
[114,122,146,115,85,135,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,99,99,93,98,121,127],
[110,0,103,106,109,108,144,122],
[111,107,0,114,99,125,116,115],
[111,104,96,0,105,116,119,120],
[117,101,111,105,0,116,120,118],
[112,102,85,94,94,0,118,90],
[89,66,94,91,90,92,0,97],
[83,88,95,90,92,120,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,120,110,116,105,115,118],
[99,0,113,101,124,109,101,97],
[90,97,0,110,104,95,102,85],
[100,109,100,0,102,110,111,108],
[94,86,106,108,0,92,98,94],
[105,101,115,100,118,0,99,102],
[95,109,108,99,112,111,0,99],
[92,113,125,102,116,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,109,107,104,110,114],
[109,0,112,112,112,116,105,107],
[106,98,0,107,118,112,117,114],
[101,98,103,0,99,93,95,96],
[103,98,92,111,0,95,106,100],
[106,94,98,117,115,0,114,102],
[100,105,93,115,104,96,0,92],
[96,103,96,114,110,108,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,122,107,87,124,176,157],
[71,0,140,88,88,105,142,104],
[88,70,0,70,87,88,105,87],
[103,122,140,0,104,140,159,140],
[123,122,123,106,0,124,156,104],
[86,105,122,70,86,0,159,123],
[34,68,105,51,54,51,0,104],
[53,106,123,70,106,87,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,104,98,99,93,124],
[103,0,98,95,99,95,70,100],
[99,112,0,78,90,89,91,81],
[106,115,132,0,83,87,80,101],
[112,111,120,127,0,89,117,114],
[111,115,121,123,121,0,119,93],
[117,140,119,130,93,91,0,117],
[86,110,129,109,96,117,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,110,106,112,109,112,104],
[95,0,102,99,93,104,97,90],
[100,108,0,102,106,104,108,106],
[104,111,108,0,111,113,124,114],
[98,117,104,99,0,113,96,104],
[101,106,106,97,97,0,100,110],
[98,113,102,86,114,110,0,93],
[106,120,104,96,106,100,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,103,112,112,95,91],
[100,0,105,84,97,91,80,88],
[106,105,0,100,99,89,108,96],
[107,126,110,0,109,96,115,93],
[98,113,111,101,0,103,102,88],
[98,119,121,114,107,0,101,106],
[115,130,102,95,108,109,0,93],
[119,122,114,117,122,104,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,114,102,110,113,115],
[101,0,108,113,112,120,108,118],
[101,102,0,107,105,110,84,102],
[96,97,103,0,92,104,101,106],
[108,98,105,118,0,124,99,115],
[100,90,100,106,86,0,85,99],
[97,102,126,109,111,125,0,106],
[95,92,108,104,95,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,100,98,96,107,97,90],
[118,0,104,110,110,108,96,100],
[110,106,0,100,101,101,98,96],
[112,100,110,0,103,111,97,97],
[114,100,109,107,0,111,98,105],
[103,102,109,99,99,0,88,88],
[113,114,112,113,112,122,0,102],
[120,110,114,113,105,122,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,100,100,98,104,103],
[109,0,125,119,117,115,105,108],
[106,85,0,100,99,103,95,106],
[110,91,110,0,101,108,102,97],
[110,93,111,109,0,110,104,104],
[112,95,107,102,100,0,96,98],
[106,105,115,108,106,114,0,106],
[107,102,104,113,106,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,115,109,90,79,96,112],
[103,0,92,83,89,89,111,124],
[95,118,0,105,76,92,96,73],
[101,127,105,0,107,91,109,102],
[120,121,134,103,0,127,99,99],
[131,121,118,119,83,0,114,103],
[114,99,114,101,111,96,0,106],
[98,86,137,108,111,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,92,100,98,94,96,95],
[108,0,96,106,110,106,103,108],
[118,114,0,104,115,111,102,108],
[110,104,106,0,116,95,118,113],
[112,100,95,94,0,105,101,106],
[116,104,99,115,105,0,102,103],
[114,107,108,92,109,108,0,91],
[115,102,102,97,104,107,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,112,113,106,127,96,123],
[116,0,98,107,113,142,97,117],
[98,112,0,118,108,92,109,126],
[97,103,92,0,102,121,82,93],
[104,97,102,108,0,112,109,124],
[83,68,118,89,98,0,95,96],
[114,113,101,128,101,115,0,129],
[87,93,84,117,86,114,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,109,113,105,103,109],
[110,0,104,110,108,106,107,108],
[109,106,0,115,117,107,104,103],
[101,100,95,0,103,107,100,92],
[97,102,93,107,0,97,100,99],
[105,104,103,103,113,0,106,102],
[107,103,106,110,110,104,0,107],
[101,102,107,118,111,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,112,135,129,131,117,96],
[87,0,122,127,113,145,121,112],
[98,88,0,103,89,103,111,97],
[75,83,107,0,93,121,112,82],
[81,97,121,117,0,132,115,105],
[79,65,107,89,78,0,105,92],
[93,89,99,98,95,105,0,77],
[114,98,113,128,105,118,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,74,100,97,106,95,95],
[114,0,105,119,112,102,118,113],
[136,105,0,136,107,113,114,103],
[110,91,74,0,114,95,103,100],
[113,98,103,96,0,107,122,109],
[104,108,97,115,103,0,107,94],
[115,92,96,107,88,103,0,91],
[115,97,107,110,101,116,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,110,109,155,123,87,129],
[81,0,82,82,119,116,83,96],
[100,128,0,111,136,125,80,146],
[101,128,99,0,144,92,97,141],
[55,91,74,66,0,87,75,99],
[87,94,85,118,123,0,107,118],
[123,127,130,113,135,103,0,151],
[81,114,64,69,111,92,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,104,104,113,89,96,105],
[113,0,111,97,114,110,95,103],
[106,99,0,95,108,95,111,89],
[106,113,115,0,127,101,107,100],
[97,96,102,83,0,91,90,98],
[121,100,115,109,119,0,101,111],
[114,115,99,103,120,109,0,97],
[105,107,121,110,112,99,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,117,111,97,105,111,114],
[92,0,111,100,91,87,95,97],
[93,99,0,96,89,94,95,99],
[99,110,114,0,101,97,110,108],
[113,119,121,109,0,104,110,111],
[105,123,116,113,106,0,115,109],
[99,115,115,100,100,95,0,98],
[96,113,111,102,99,101,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,105,157,158,158,104],
[105,0,157,52,52,105,105,104],
[106,53,0,105,105,158,158,105],
[105,158,105,0,52,210,210,105],
[53,158,105,158,0,158,158,157],
[52,105,52,0,52,0,158,52],
[52,105,52,0,52,52,0,52],
[106,106,105,105,53,158,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,109,104,117,113,111,102],
[95,0,98,107,108,108,108,101],
[101,112,0,108,114,114,104,110],
[106,103,102,0,110,112,106,90],
[93,102,96,100,0,107,98,106],
[97,102,96,98,103,0,92,94],
[99,102,106,104,112,118,0,95],
[108,109,100,120,104,116,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,97,112,95,99,101,112],
[98,0,103,104,97,103,104,100],
[113,107,0,95,106,90,97,103],
[98,106,115,0,108,99,97,103],
[115,113,104,102,0,110,104,110],
[111,107,120,111,100,0,106,119],
[109,106,113,113,106,104,0,113],
[98,110,107,107,100,91,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,118,113,101,115,103],
[105,0,108,101,109,99,122,105],
[98,102,0,119,115,106,113,105],
[92,109,91,0,98,88,96,98],
[97,101,95,112,0,93,109,113],
[109,111,104,122,117,0,124,104],
[95,88,97,114,101,86,0,95],
[107,105,105,112,97,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,104,116,115,101,93,105],
[114,0,118,113,111,125,105,119],
[106,92,0,108,110,105,114,113],
[94,97,102,0,111,113,97,110],
[95,99,100,99,0,118,85,107],
[109,85,105,97,92,0,99,96],
[117,105,96,113,125,111,0,118],
[105,91,97,100,103,114,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,85,103,85,126,107,126],
[106,0,127,61,64,41,106,127],
[125,83,0,84,85,64,106,129],
[107,149,126,0,128,67,127,150],
[125,146,125,82,0,64,87,105],
[84,169,146,143,146,0,148,168],
[103,104,104,83,123,62,0,105],
[84,83,81,60,105,42,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,113,103,100,93,112],
[105,0,106,104,99,109,102,112],
[101,104,0,100,104,94,93,106],
[97,106,110,0,99,100,104,106],
[107,111,106,111,0,104,102,114],
[110,101,116,110,106,0,115,114],
[117,108,117,106,108,95,0,108],
[98,98,104,104,96,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,111,110,102,105,111,103],
[89,0,114,100,96,96,98,96],
[99,96,0,92,87,93,92,93],
[100,110,118,0,102,105,113,109],
[108,114,123,108,0,100,105,111],
[105,114,117,105,110,0,101,109],
[99,112,118,97,105,109,0,111],
[107,114,117,101,99,101,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,100,108,104,101,107],
[113,0,101,95,104,98,103,94],
[105,109,0,85,104,108,116,103],
[110,115,125,0,117,121,104,124],
[102,106,106,93,0,100,106,105],
[106,112,102,89,110,0,100,108],
[109,107,94,106,104,110,0,98],
[103,116,107,86,105,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,118,82,93,101,124,91],
[99,0,92,80,98,80,107,92],
[92,118,0,71,99,72,108,101],
[128,130,139,0,118,102,134,82],
[117,112,111,92,0,111,88,101],
[109,130,138,108,99,0,134,107],
[86,103,102,76,122,76,0,103],
[119,118,109,128,109,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,85,90,95,136,128,68],
[93,0,85,104,90,118,92,96],
[125,125,0,124,94,133,113,113],
[120,106,86,0,105,136,93,89],
[115,120,116,105,0,139,120,103],
[74,92,77,74,71,0,64,62],
[82,118,97,117,90,146,0,80],
[142,114,97,121,107,148,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,94,104,106,96,102],
[112,0,120,112,109,114,97,104],
[103,90,0,88,103,104,88,92],
[116,98,122,0,108,112,107,113],
[106,101,107,102,0,102,93,100],
[104,96,106,98,108,0,99,101],
[114,113,122,103,117,111,0,112],
[108,106,118,97,110,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,120,114,118,103,97],
[112,0,83,108,96,105,79,93],
[103,127,0,146,118,132,107,110],
[90,102,64,0,94,110,90,105],
[96,114,92,116,0,117,111,108],
[92,105,78,100,93,0,77,81],
[107,131,103,120,99,133,0,106],
[113,117,100,105,102,129,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,89,105,107,82,109],
[106,0,121,91,99,89,80,102],
[105,89,0,91,115,87,87,82],
[121,119,119,0,141,126,104,110],
[105,111,95,69,0,105,84,103],
[103,121,123,84,105,0,98,91],
[128,130,123,106,126,112,0,99],
[101,108,128,100,107,119,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,92,99,94,109,103,105],
[106,0,112,108,90,119,109,116],
[118,98,0,104,105,105,109,112],
[111,102,106,0,103,108,112,106],
[116,120,105,107,0,117,110,119],
[101,91,105,102,93,0,98,114],
[107,101,101,98,100,112,0,107],
[105,94,98,104,91,96,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,210,157,105,157,105,157],
[53,0,53,157,105,105,53,105],
[0,157,0,104,105,52,0,52],
[53,53,106,0,53,53,53,52],
[105,105,105,157,0,105,105,104],
[53,105,158,157,105,0,53,52],
[105,157,210,157,105,157,0,104],
[53,105,158,158,106,158,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,110,116,105,112,108],
[99,0,92,96,106,105,113,97],
[104,118,0,104,124,108,120,108],
[100,114,106,0,110,110,114,110],
[94,104,86,100,0,107,99,114],
[105,105,102,100,103,0,112,111],
[98,97,90,96,111,98,0,103],
[102,113,102,100,96,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,99,102,93,82,109,84],
[118,0,116,110,105,120,116,110],
[111,94,0,102,95,102,120,75],
[108,100,108,0,100,102,112,83],
[117,105,115,110,0,123,128,86],
[128,90,108,108,87,0,114,100],
[101,94,90,98,82,96,0,80],
[126,100,135,127,124,110,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,103,88,104,110,86,94],
[122,0,128,111,113,111,112,105],
[107,82,0,93,109,94,98,109],
[122,99,117,0,97,92,92,98],
[106,97,101,113,0,106,101,92],
[100,99,116,118,104,0,100,110],
[124,98,112,118,109,110,0,105],
[116,105,101,112,118,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,114,105,102,107,100,114],
[91,0,105,109,91,94,106,108],
[96,105,0,87,86,104,97,121],
[105,101,123,0,100,117,93,110],
[108,119,124,110,0,101,121,108],
[103,116,106,93,109,0,110,93],
[110,104,113,117,89,100,0,85],
[96,102,89,100,102,117,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,106,125,125,126,111,118],
[118,0,118,117,103,127,113,125],
[104,92,0,136,106,113,100,115],
[85,93,74,0,89,99,95,96],
[85,107,104,121,0,102,101,106],
[84,83,97,111,108,0,97,116],
[99,97,110,115,109,113,0,120],
[92,85,95,114,104,94,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,119,107,135,86,108,108],
[97,0,109,108,83,94,76,99],
[91,101,0,110,107,77,80,110],
[103,102,100,0,104,102,85,91],
[75,127,103,106,0,101,110,79],
[124,116,133,108,109,0,101,114],
[102,134,130,125,100,109,0,111],
[102,111,100,119,131,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,98,102,102,107,119,115],
[92,0,91,103,113,94,111,102],
[112,119,0,123,130,137,110,105],
[108,107,87,0,108,99,99,88],
[108,97,80,102,0,103,104,98],
[103,116,73,111,107,0,103,100],
[91,99,100,111,106,107,0,105],
[95,108,105,122,112,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,119,104,109,97,100,100],
[108,0,105,91,112,89,91,91],
[91,105,0,100,101,94,100,98],
[106,119,110,0,117,91,105,97],
[101,98,109,93,0,93,87,96],
[113,121,116,119,117,0,100,108],
[110,119,110,105,123,110,0,102],
[110,119,112,113,114,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,98,134,136,123,114,126],
[72,0,65,85,92,107,95,69],
[112,145,0,135,113,120,126,84],
[76,125,75,0,104,102,106,77],
[74,118,97,106,0,100,98,84],
[87,103,90,108,110,0,99,99],
[96,115,84,104,112,111,0,92],
[84,141,126,133,126,111,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,66,81,92,86,74],
[113,0,98,98,95,92,99,79],
[108,112,0,86,98,106,112,87],
[144,112,124,0,123,124,115,105],
[129,115,112,87,0,102,114,93],
[118,118,104,86,108,0,107,101],
[124,111,98,95,96,103,0,97],
[136,131,123,105,117,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,117,106,134,125,87,73],
[116,0,118,92,158,125,65,84],
[93,92,0,92,146,122,74,113],
[104,118,118,0,167,105,106,104],
[76,52,64,43,0,74,44,84],
[85,85,88,105,136,0,74,114],
[123,145,136,104,166,136,0,145],
[137,126,97,106,126,96,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,128,117,98,133,118,125],
[109,0,134,108,105,132,111,112],
[82,76,0,107,89,99,95,106],
[93,102,103,0,90,116,110,95],
[112,105,121,120,0,118,97,108],
[77,78,111,94,92,0,84,105],
[92,99,115,100,113,126,0,110],
[85,98,104,115,102,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,106,105,110,97,118],
[103,0,107,105,104,116,99,119],
[108,103,0,100,97,102,105,109],
[104,105,110,0,114,105,110,109],
[105,106,113,96,0,104,101,107],
[100,94,108,105,106,0,101,106],
[113,111,105,100,109,109,0,117],
[92,91,101,101,103,104,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,110,104,120,86,105],
[104,0,118,128,130,135,118,109],
[98,92,0,94,118,118,104,100],
[100,82,116,0,108,90,114,90],
[106,80,92,102,0,118,102,119],
[90,75,92,120,92,0,122,93],
[124,92,106,96,108,88,0,118],
[105,101,110,120,91,117,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,112,123,101,104,109],
[104,0,124,127,113,120,105,97],
[98,86,0,109,95,91,89,87],
[98,83,101,0,106,103,106,91],
[87,97,115,104,0,100,103,98],
[109,90,119,107,110,0,97,105],
[106,105,121,104,107,113,0,95],
[101,113,123,119,112,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,91,88,102,95,89,102],
[118,0,103,109,108,111,88,104],
[119,107,0,120,109,121,117,100],
[122,101,90,0,99,92,89,90],
[108,102,101,111,0,90,94,80],
[115,99,89,118,120,0,111,97],
[121,122,93,121,116,99,0,105],
[108,106,110,120,130,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,100,104,101,102,114,106],
[110,0,107,96,104,95,111,107],
[110,103,0,91,103,106,107,106],
[106,114,119,0,106,105,120,109],
[109,106,107,104,0,97,113,107],
[108,115,104,105,113,0,113,108],
[96,99,103,90,97,97,0,101],
[104,103,104,101,103,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,121,114,119,123,127],
[109,0,114,130,97,106,100,110],
[101,96,0,113,106,109,96,111],
[89,80,97,0,95,82,104,100],
[96,113,104,115,0,104,101,91],
[91,104,101,128,106,0,94,90],
[87,110,114,106,109,116,0,106],
[83,100,99,110,119,120,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,105,93,101,93,96],
[112,0,107,106,117,109,106,99],
[109,103,0,106,104,106,89,96],
[105,104,104,0,112,124,109,108],
[117,93,106,98,0,111,106,94],
[109,101,104,86,99,0,103,97],
[117,104,121,101,104,107,0,96],
[114,111,114,102,116,113,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,97,101,107,100,97],
[96,0,116,108,103,97,105,99],
[106,94,0,94,97,100,101,108],
[113,102,116,0,101,115,99,91],
[109,107,113,109,0,100,95,101],
[103,113,110,95,110,0,105,105],
[110,105,109,111,115,105,0,106],
[113,111,102,119,109,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,93,107,103,92,104,111],
[115,0,99,105,111,93,103,100],
[117,111,0,109,120,90,112,107],
[103,105,101,0,113,110,113,107],
[107,99,90,97,0,109,112,96],
[118,117,120,100,101,0,116,116],
[106,107,98,97,98,94,0,103],
[99,110,103,103,114,94,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,103,130,111,112,113],
[103,0,102,107,118,105,108,116],
[102,108,0,96,120,111,115,114],
[107,103,114,0,125,115,108,113],
[80,92,90,85,0,111,102,103],
[99,105,99,95,99,0,104,102],
[98,102,95,102,108,106,0,109],
[97,94,96,97,107,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,174,141,70,138,103],
[105,0,105,210,105,106,174,140],
[106,105,0,174,176,70,140,69],
[36,0,36,0,70,35,35,69],
[69,105,34,140,0,69,69,69],
[140,104,140,175,141,0,175,139],
[72,36,70,175,141,35,0,105],
[107,70,141,141,141,71,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,111,109,112,101,110],
[109,0,105,96,104,115,104,106],
[102,105,0,104,102,111,108,117],
[99,114,106,0,101,109,104,116],
[101,106,108,109,0,108,105,113],
[98,95,99,101,102,0,95,101],
[109,106,102,106,105,115,0,106],
[100,104,93,94,97,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,120,96,132,120,95,118],
[68,0,104,106,105,59,84,106],
[90,106,0,80,115,83,58,105],
[114,104,130,0,140,93,105,138],
[78,105,95,70,0,72,59,105],
[90,151,127,117,138,0,104,117],
[115,126,152,105,151,106,0,128],
[92,104,105,72,105,93,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,101,102,116,92,100,111],
[98,0,101,103,107,92,96,108],
[109,109,0,106,112,91,106,107],
[108,107,104,0,119,105,85,120],
[94,103,98,91,0,91,94,118],
[118,118,119,105,119,0,111,130],
[110,114,104,125,116,99,0,121],
[99,102,103,90,92,80,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,115,97,105,109,109],
[107,0,99,101,103,95,100,97],
[102,111,0,103,107,93,110,91],
[95,109,107,0,106,105,107,103],
[113,107,103,104,0,90,114,109],
[105,115,117,105,120,0,112,108],
[101,110,100,103,96,98,0,101],
[101,113,119,107,101,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,101,94,111,106,107],
[105,0,109,104,107,109,107,105],
[101,101,0,93,89,99,94,92],
[109,106,117,0,107,105,114,105],
[116,103,121,103,0,108,114,111],
[99,101,111,105,102,0,103,100],
[104,103,116,96,96,107,0,109],
[103,105,118,105,99,110,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,95,109,118,114,108,124],
[94,0,109,121,126,119,124,119],
[115,101,0,122,118,126,113,126],
[101,89,88,0,112,106,96,106],
[92,84,92,98,0,100,102,106],
[96,91,84,104,110,0,106,123],
[102,86,97,114,108,104,0,104],
[86,91,84,104,104,87,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,102,101,105,111,106,106],
[92,0,91,103,91,89,88,90],
[108,119,0,112,105,103,111,92],
[109,107,98,0,102,103,97,108],
[105,119,105,108,0,102,96,104],
[99,121,107,107,108,0,111,105],
[104,122,99,113,114,99,0,93],
[104,120,118,102,106,105,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,124,113,111,140,104,112],
[85,0,132,88,113,101,108,96],
[86,78,0,80,120,94,91,87],
[97,122,130,0,109,135,99,100],
[99,97,90,101,0,125,75,93],
[70,109,116,75,85,0,88,83],
[106,102,119,111,135,122,0,92],
[98,114,123,110,117,127,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,120,114,102,120,108,105],
[105,0,105,106,105,114,101,98],
[90,105,0,121,104,116,95,90],
[96,104,89,0,90,109,91,91],
[108,105,106,120,0,116,91,104],
[90,96,94,101,94,0,98,87],
[102,109,115,119,119,112,0,112],
[105,112,120,119,106,123,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,101,107,105,91,104,90],
[93,0,107,98,88,105,110,106],
[109,103,0,108,102,107,97,115],
[103,112,102,0,98,115,94,108],
[105,122,108,112,0,113,106,100],
[119,105,103,95,97,0,106,93],
[106,100,113,116,104,104,0,91],
[120,104,95,102,110,117,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,110,94,103,123,94],
[105,0,112,97,95,108,125,106],
[107,98,0,94,111,106,140,98],
[100,113,116,0,118,103,142,115],
[116,115,99,92,0,125,119,93],
[107,102,104,107,85,0,124,108],
[87,85,70,68,91,86,0,98],
[116,104,112,95,117,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,113,109,112,111,117,105],
[92,0,95,98,95,108,106,93],
[97,115,0,109,104,108,113,114],
[101,112,101,0,103,107,112,104],
[98,115,106,107,0,109,115,108],
[99,102,102,103,101,0,119,106],
[93,104,97,98,95,91,0,102],
[105,117,96,106,102,104,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,132,102,106,90,93,103],
[102,0,124,111,110,94,97,99],
[78,86,0,75,81,98,71,84],
[108,99,135,0,103,107,117,100],
[104,100,129,107,0,99,102,77],
[120,116,112,103,111,0,96,107],
[117,113,139,93,108,114,0,90],
[107,111,126,110,133,103,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,121,122,102,113,108,112],
[105,0,117,102,105,111,119,128],
[89,93,0,119,92,96,107,101],
[88,108,91,0,109,89,126,121],
[108,105,118,101,0,119,120,117],
[97,99,114,121,91,0,105,103],
[102,91,103,84,90,105,0,115],
[98,82,109,89,93,107,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,119,105,119,91,107,118],
[67,0,118,107,106,79,120,117],
[91,92,0,106,51,104,105,91],
[105,103,104,0,80,93,107,92],
[91,104,159,130,0,67,107,103],
[119,131,106,117,143,0,93,118],
[103,90,105,103,103,117,0,105],
[92,93,119,118,107,92,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,101,114,116,101,85],
[100,0,109,94,103,112,96,88],
[108,101,0,109,106,118,103,106],
[109,116,101,0,102,121,122,89],
[96,107,104,108,0,124,124,100],
[94,98,92,89,86,0,108,81],
[109,114,107,88,86,102,0,112],
[125,122,104,121,110,129,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,99,89,104,79,110,87],
[117,0,106,115,119,109,104,98],
[111,104,0,99,103,93,100,106],
[121,95,111,0,122,109,106,93],
[106,91,107,88,0,93,109,97],
[131,101,117,101,117,0,105,99],
[100,106,110,104,101,105,0,92],
[123,112,104,117,113,111,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,121,102,115,115,117,119],
[94,0,109,81,102,115,106,113],
[89,101,0,86,99,89,105,118],
[108,129,124,0,108,113,102,115],
[95,108,111,102,0,101,116,122],
[95,95,121,97,109,0,93,111],
[93,104,105,108,94,117,0,124],
[91,97,92,95,88,99,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,100,110,107,96,104],
[100,0,101,100,85,102,88,83],
[102,109,0,118,111,121,114,101],
[110,110,92,0,100,109,111,100],
[100,125,99,110,0,98,98,112],
[103,108,89,101,112,0,96,109],
[114,122,96,99,112,114,0,112],
[106,127,109,110,98,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,95,100,107,98,99,101],
[108,0,103,104,112,106,111,101],
[115,107,0,103,114,105,105,107],
[110,106,107,0,106,100,117,102],
[103,98,96,104,0,96,105,102],
[112,104,105,110,114,0,103,103],
[111,99,105,93,105,107,0,94],
[109,109,103,108,108,107,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,102,101,93,93,96,93],
[127,0,109,112,100,106,97,127],
[108,101,0,101,91,95,112,107],
[109,98,109,0,89,105,95,112],
[117,110,119,121,0,119,104,125],
[117,104,115,105,91,0,98,124],
[114,113,98,115,106,112,0,114],
[117,83,103,98,85,86,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,107,106,108,94,105],
[110,0,104,113,101,112,100,107],
[108,106,0,106,108,103,97,104],
[103,97,104,0,103,120,94,101],
[104,109,102,107,0,104,98,107],
[102,98,107,90,106,0,97,99],
[116,110,113,116,112,113,0,103],
[105,103,106,109,103,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,96,106,97,107,104],
[108,0,112,102,105,102,107,114],
[99,98,0,100,98,81,96,97],
[114,108,110,0,107,102,116,110],
[104,105,112,103,0,100,101,117],
[113,108,129,108,110,0,116,104],
[103,103,114,94,109,94,0,102],
[106,96,113,100,93,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,99,88,114,99,116,105],
[115,0,108,98,126,111,121,110],
[111,102,0,93,108,107,115,111],
[122,112,117,0,125,98,127,115],
[96,84,102,85,0,94,116,102],
[111,99,103,112,116,0,115,113],
[94,89,95,83,94,95,0,100],
[105,100,99,95,108,97,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,113,122,111,114,95,99],
[97,0,118,126,110,111,107,100],
[97,92,0,120,98,102,115,99],
[88,84,90,0,90,90,78,77],
[99,100,112,120,0,103,114,105],
[96,99,108,120,107,0,90,98],
[115,103,95,132,96,120,0,103],
[111,110,111,133,105,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,99,112,93,96,89],
[112,0,92,81,116,91,119,100],
[107,118,0,91,121,103,121,88],
[111,129,119,0,125,111,114,101],
[98,94,89,85,0,98,98,97],
[117,119,107,99,112,0,115,107],
[114,91,89,96,112,95,0,88],
[121,110,122,109,113,103,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,90,105,114,106,103,100],
[91,0,89,98,108,108,111,108],
[120,121,0,105,109,115,113,121],
[105,112,105,0,112,108,113,113],
[96,102,101,98,0,98,111,104],
[104,102,95,102,112,0,112,116],
[107,99,97,97,99,98,0,105],
[110,102,89,97,106,94,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,105,106,111,107,107],
[100,0,96,98,105,110,101,107],
[99,114,0,96,111,117,92,99],
[105,112,114,0,107,112,95,112],
[104,105,99,103,0,102,93,95],
[99,100,93,98,108,0,103,102],
[103,109,118,115,117,107,0,109],
[103,103,111,98,115,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,97,113,108,100,93,96],
[103,0,107,100,108,100,101,91],
[113,103,0,110,107,104,110,103],
[97,110,100,0,103,91,94,110],
[102,102,103,107,0,97,92,103],
[110,110,106,119,113,0,108,105],
[117,109,100,116,118,102,0,110],
[114,119,107,100,107,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,112,86,102,125,119,135],
[98,0,76,110,62,93,100,93],
[98,134,0,107,114,107,129,139],
[124,100,103,0,88,93,101,120],
[108,148,96,122,0,107,98,118],
[85,117,103,117,103,0,100,107],
[91,110,81,109,112,110,0,129],
[75,117,71,90,92,103,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,97,112,106,111,106,108],
[115,0,93,109,125,118,119,118],
[113,117,0,114,112,114,92,111],
[98,101,96,0,106,105,93,115],
[104,85,98,104,0,113,104,113],
[99,92,96,105,97,0,98,105],
[104,91,118,117,106,112,0,108],
[102,92,99,95,97,105,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,69,96,80,97,82,67],
[114,0,115,87,127,86,100,85],
[141,95,0,126,139,125,113,110],
[114,123,84,0,122,84,114,80],
[130,83,71,88,0,87,101,59],
[113,124,85,126,123,0,99,95],
[128,110,97,96,109,111,0,68],
[143,125,100,130,151,115,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,103,117,102,116,116],
[102,0,105,108,108,106,101,115],
[110,105,0,101,111,97,98,109],
[107,102,109,0,108,112,104,109],
[93,102,99,102,0,100,98,107],
[108,104,113,98,110,0,104,120],
[94,109,112,106,112,106,0,117],
[94,95,101,101,103,90,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,95,106,99,91,102],
[101,0,99,102,93,98,108,86],
[111,111,0,111,108,97,107,99],
[115,108,99,0,110,104,115,105],
[104,117,102,100,0,86,104,93],
[111,112,113,106,124,0,106,102],
[119,102,103,95,106,104,0,95],
[108,124,111,105,117,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,100,118,113,125,103,105],
[86,0,105,96,100,104,104,93],
[110,105,0,122,102,102,94,103],
[92,114,88,0,89,95,101,91],
[97,110,108,121,0,118,115,100],
[85,106,108,115,92,0,111,93],
[107,106,116,109,95,99,0,100],
[105,117,107,119,110,117,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,97,100,115,97,94],
[104,0,110,101,89,107,87,84],
[100,100,0,98,90,109,102,103],
[113,109,112,0,104,123,102,111],
[110,121,120,106,0,129,106,102],
[95,103,101,87,81,0,101,101],
[113,123,108,108,104,109,0,105],
[116,126,107,99,108,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,106,122,100,101,101],
[110,0,103,103,107,108,107,113],
[109,107,0,109,113,105,109,112],
[104,107,101,0,118,94,107,108],
[88,103,97,92,0,91,93,102],
[110,102,105,116,119,0,108,106],
[109,103,101,103,117,102,0,105],
[109,97,98,102,108,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,119,180,120,89,180,120],
[60,0,90,151,150,30,150,150],
[91,120,0,121,150,119,180,120],
[30,59,89,0,150,89,180,120],
[90,60,60,60,0,60,120,121],
[121,180,91,121,150,0,120,150],
[30,60,30,30,90,90,0,61],
[90,60,90,90,89,60,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,105,135,93,134,116,117],
[87,0,88,96,79,96,81,105],
[105,122,0,119,115,120,132,104],
[75,114,91,0,95,100,101,110],
[117,131,95,115,0,129,128,90],
[76,114,90,110,81,0,120,104],
[94,129,78,109,82,90,0,114],
[93,105,106,100,120,106,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,96,103,97,84,109,107],
[94,0,107,110,107,101,120,106],
[114,103,0,106,107,105,105,98],
[107,100,104,0,112,92,116,127],
[113,103,103,98,0,99,106,102],
[126,109,105,118,111,0,125,107],
[101,90,105,94,104,85,0,97],
[103,104,112,83,108,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,116,130,106,120,108],
[106,0,112,123,129,100,113,111],
[109,98,0,116,116,99,109,112],
[94,87,94,0,90,80,99,93],
[80,81,94,120,0,101,104,105],
[104,110,111,130,109,0,134,115],
[90,97,101,111,106,76,0,107],
[102,99,98,117,105,95,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,94,82,65,91,107,117],
[100,0,102,99,102,99,114,120],
[116,108,0,102,98,109,133,141],
[128,111,108,0,110,92,118,130],
[145,108,112,100,0,115,122,142],
[119,111,101,118,95,0,130,123],
[103,96,77,92,88,80,0,115],
[93,90,69,80,68,87,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,116,93,99,104,96],
[102,0,99,104,89,98,101,95],
[107,111,0,114,105,106,106,105],
[94,106,96,0,90,90,108,99],
[117,121,105,120,0,111,115,113],
[111,112,104,120,99,0,103,104],
[106,109,104,102,95,107,0,97],
[114,115,105,111,97,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,105,157,210,105,210,157],
[0,0,52,104,52,52,52,52],
[105,158,0,105,158,105,158,158],
[53,106,105,0,158,158,106,158],
[0,158,52,52,0,52,52,52],
[105,158,105,52,158,0,158,105],
[0,158,52,104,158,52,0,52],
[53,158,52,52,158,105,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,87,90,101,105,102,114],
[116,0,106,97,108,111,100,107],
[123,104,0,100,136,134,113,126],
[120,113,110,0,119,113,103,100],
[109,102,74,91,0,124,97,131],
[105,99,76,97,86,0,81,109],
[108,110,97,107,113,129,0,115],
[96,103,84,110,79,101,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,117,122,121,123,103,116],
[93,0,127,128,123,121,138,125],
[93,83,0,122,100,82,101,116],
[88,82,88,0,107,87,86,101],
[89,87,110,103,0,88,96,97],
[87,89,128,123,122,0,104,119],
[107,72,109,124,114,106,0,113],
[94,85,94,109,113,91,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,93,84,101,102,106],
[107,0,90,104,93,87,106,111],
[110,120,0,108,117,104,112,109],
[117,106,102,0,92,104,105,107],
[126,117,93,118,0,115,95,120],
[109,123,106,106,95,0,120,112],
[108,104,98,105,115,90,0,94],
[104,99,101,103,90,98,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,94,117,126,107,110,118],
[101,0,105,118,116,113,113,118],
[116,105,0,122,129,122,99,119],
[93,92,88,0,99,92,91,104],
[84,94,81,111,0,86,94,94],
[103,97,88,118,124,0,97,105],
[100,97,111,119,116,113,0,128],
[92,92,91,106,116,105,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,111,109,107,111,97],
[101,0,97,104,97,110,104,91],
[103,113,0,109,107,96,108,84],
[99,106,101,0,103,109,113,101],
[101,113,103,107,0,118,116,111],
[103,100,114,101,92,0,115,94],
[99,106,102,97,94,95,0,89],
[113,119,126,109,99,116,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,110,111,104,115,101,104],
[101,0,116,102,94,121,104,124],
[100,94,0,109,115,116,109,97],
[99,108,101,0,113,121,108,100],
[106,116,95,97,0,118,106,112],
[95,89,94,89,92,0,116,97],
[109,106,101,102,104,94,0,106],
[106,86,113,110,98,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,102,118,114,120,109],
[98,0,97,95,106,103,105,97],
[104,113,0,113,119,99,108,99],
[108,115,97,0,113,105,111,104],
[92,104,91,97,0,95,107,92],
[96,107,111,105,115,0,115,100],
[90,105,102,99,103,95,0,95],
[101,113,111,106,118,110,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,118,106,96,102,98,103],
[104,0,109,113,95,117,112,108],
[92,101,0,95,102,103,97,105],
[104,97,115,0,102,104,95,110],
[114,115,108,108,0,124,105,113],
[108,93,107,106,86,0,95,91],
[112,98,113,115,105,115,0,100],
[107,102,105,100,97,119,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,121,98,108,96,97],
[102,0,106,126,118,111,100,116],
[104,104,0,126,110,96,99,99],
[89,84,84,0,107,86,84,89],
[112,92,100,103,0,84,92,100],
[102,99,114,124,126,0,96,105],
[114,110,111,126,118,114,0,100],
[113,94,111,121,110,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,96,106,106,100,103,107],
[116,0,108,105,114,125,99,110],
[114,102,0,91,112,111,97,117],
[104,105,119,0,110,108,105,118],
[104,96,98,100,0,110,111,101],
[110,85,99,102,100,0,96,102],
[107,111,113,105,99,114,0,99],
[103,100,93,92,109,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,110,116,113,118,114,101],
[95,0,111,111,117,106,113,102],
[100,99,0,103,110,114,106,101],
[94,99,107,0,113,118,100,105],
[97,93,100,97,0,92,98,101],
[92,104,96,92,118,0,108,102],
[96,97,104,110,112,102,0,108],
[109,108,109,105,109,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,116,109,100,111,101,100],
[112,0,99,99,100,126,102,107],
[94,111,0,107,99,117,112,113],
[101,111,103,0,106,118,96,97],
[110,110,111,104,0,123,109,111],
[99,84,93,92,87,0,93,95],
[109,108,98,114,101,117,0,104],
[110,103,97,113,99,115,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,113,113,95,108,120,115],
[114,0,103,101,117,112,102,115],
[97,107,0,102,96,100,98,123],
[97,109,108,0,98,110,103,111],
[115,93,114,112,0,101,126,118],
[102,98,110,100,109,0,103,131],
[90,108,112,107,84,107,0,125],
[95,95,87,99,92,79,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,94,105,124,106,116,102],
[99,0,95,111,109,94,104,113],
[116,115,0,115,104,118,112,124],
[105,99,95,0,102,107,90,97],
[86,101,106,108,0,96,97,111],
[104,116,92,103,114,0,105,114],
[94,106,98,120,113,105,0,106],
[108,97,86,113,99,96,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,71,98,112,91,100,80],
[137,0,104,123,125,105,134,109],
[139,106,0,116,120,109,128,103],
[112,87,94,0,94,101,119,86],
[98,85,90,116,0,89,118,90],
[119,105,101,109,121,0,123,108],
[110,76,82,91,92,87,0,75],
[130,101,107,124,120,102,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,120,116,109,112,129,119],
[109,0,95,104,117,92,114,101],
[90,115,0,107,113,116,125,109],
[94,106,103,0,95,90,109,103],
[101,93,97,115,0,108,97,86],
[98,118,94,120,102,0,118,120],
[81,96,85,101,113,92,0,96],
[91,109,101,107,124,90,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,112,112,106,99,99],
[101,0,109,111,117,101,102,112],
[104,101,0,108,111,109,106,92],
[98,99,102,0,105,109,98,109],
[98,93,99,105,0,92,91,83],
[104,109,101,101,118,0,104,98],
[111,108,104,112,119,106,0,105],
[111,98,118,101,127,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,108,118,108,100,114],
[98,0,107,107,110,102,107,104],
[106,103,0,106,107,97,115,107],
[102,103,104,0,114,102,104,105],
[92,100,103,96,0,92,102,106],
[102,108,113,108,118,0,105,119],
[110,103,95,106,108,105,0,101],
[96,106,103,105,104,91,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,94,90,114,113,105,112],
[101,0,89,87,104,106,88,107],
[116,121,0,116,125,117,103,119],
[120,123,94,0,119,114,109,125],
[96,106,85,91,0,88,72,101],
[97,104,93,96,122,0,84,111],
[105,122,107,101,138,126,0,124],
[98,103,91,85,109,99,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,100,98,95,106,104],
[104,0,97,99,91,94,95,97],
[110,113,0,105,106,102,101,109],
[110,111,105,0,104,105,110,107],
[112,119,104,106,0,111,107,118],
[115,116,108,105,99,0,102,104],
[104,115,109,100,103,108,0,115],
[106,113,101,103,92,106,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,114,115,120,104,137],
[104,0,123,122,115,134,128,112],
[103,87,0,92,126,117,124,95],
[96,88,118,0,113,111,117,122],
[95,95,84,97,0,130,94,106],
[90,76,93,99,80,0,101,103],
[106,82,86,93,116,109,0,113],
[73,98,115,88,104,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,98,116,107,113,107,97],
[87,0,104,116,103,102,101,102],
[112,106,0,116,120,117,108,105],
[94,94,94,0,102,108,104,99],
[103,107,90,108,0,107,103,90],
[97,108,93,102,103,0,105,111],
[103,109,102,106,107,105,0,93],
[113,108,105,111,120,99,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,98,98,117,93,101],
[104,0,102,108,102,111,100,116],
[112,108,0,107,102,111,98,123],
[112,102,103,0,90,114,103,94],
[112,108,108,120,0,123,101,112],
[93,99,99,96,87,0,106,97],
[117,110,112,107,109,104,0,117],
[109,94,87,116,98,113,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,111,117,106,109,101,107],
[115,0,99,99,114,113,100,114],
[99,111,0,114,102,116,110,111],
[93,111,96,0,103,102,98,111],
[104,96,108,107,0,112,99,116],
[101,97,94,108,98,0,89,98],
[109,110,100,112,111,121,0,112],
[103,96,99,99,94,112,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,114,82,109,97,101,109],
[118,0,93,83,106,84,96,116],
[96,117,0,76,108,87,80,79],
[128,127,134,0,98,107,98,117],
[101,104,102,112,0,100,100,114],
[113,126,123,103,110,0,114,120],
[109,114,130,112,110,96,0,112],
[101,94,131,93,96,90,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,100,106,121,117,108],
[101,0,106,98,105,103,112,111],
[105,104,0,97,105,101,119,108],
[110,112,113,0,108,102,114,104],
[104,105,105,102,0,104,117,110],
[89,107,109,108,106,0,120,115],
[93,98,91,96,93,90,0,112],
[102,99,102,106,100,95,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,94,112,109,102,100,112],
[96,0,107,103,91,87,97,116],
[116,103,0,121,104,107,105,124],
[98,107,89,0,96,92,101,117],
[101,119,106,114,0,101,115,118],
[108,123,103,118,109,0,112,130],
[110,113,105,109,95,98,0,131],
[98,94,86,93,92,80,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,119,108,108,101,104],
[98,0,92,121,101,92,92,93],
[103,118,0,127,111,107,96,117],
[91,89,83,0,95,91,84,86],
[102,109,99,115,0,96,101,110],
[102,118,103,119,114,0,109,119],
[109,118,114,126,109,101,0,109],
[106,117,93,124,100,91,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,118,113,100,104,112,137],
[88,0,124,127,108,106,122,137],
[92,86,0,116,108,81,99,126],
[97,83,94,0,82,81,93,113],
[110,102,102,128,0,105,115,128],
[106,104,129,129,105,0,111,142],
[98,88,111,117,95,99,0,118],
[73,73,84,97,82,68,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,144,132,115,120,103,113],
[85,0,117,123,125,137,125,151],
[66,93,0,83,85,86,67,90],
[78,87,127,0,116,103,83,114],
[95,85,125,94,0,118,94,124],
[90,73,124,107,92,0,111,110],
[107,85,143,127,116,99,0,132],
[97,59,120,96,86,100,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,91,107,82,108,108,111],
[100,0,103,113,99,109,103,114],
[119,107,0,101,119,112,109,108],
[103,97,109,0,90,106,97,117],
[128,111,91,120,0,123,112,118],
[102,101,98,104,87,0,92,108],
[102,107,101,113,98,118,0,107],
[99,96,102,93,92,102,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,103,107,116,126,119,131],
[96,0,94,101,106,112,117,100],
[107,116,0,105,125,125,125,106],
[103,109,105,0,124,126,121,128],
[94,104,85,86,0,112,112,102],
[84,98,85,84,98,0,114,100],
[91,93,85,89,98,96,0,95],
[79,110,104,82,108,110,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,100,88,101,118,87,117],
[116,0,107,95,116,120,96,114],
[110,103,0,107,115,111,119,111],
[122,115,103,0,121,124,109,123],
[109,94,95,89,0,118,94,120],
[92,90,99,86,92,0,88,105],
[123,114,91,101,116,122,0,113],
[93,96,99,87,90,105,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,104,113,116,112,131,108],
[112,0,104,117,123,120,117,102],
[106,106,0,105,116,104,120,98],
[97,93,105,0,103,93,108,107],
[94,87,94,107,0,110,118,95],
[98,90,106,117,100,0,115,99],
[79,93,90,102,92,95,0,86],
[102,108,112,103,115,111,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,119,88,96,87,101,90],
[138,0,117,111,111,108,115,91],
[91,93,0,107,103,95,117,85],
[122,99,103,0,108,102,90,93],
[114,99,107,102,0,94,106,93],
[123,102,115,108,116,0,130,114],
[109,95,93,120,104,80,0,95],
[120,119,125,117,117,96,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,127,109,114,118,109,102],
[104,0,118,110,102,106,102,104],
[83,92,0,83,91,88,80,81],
[101,100,127,0,96,104,89,91],
[96,108,119,114,0,108,91,89],
[92,104,122,106,102,0,96,80],
[101,108,130,121,119,114,0,105],
[108,106,129,119,121,130,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,128,122,118,107,122],
[102,0,119,121,110,131,97,109],
[107,91,0,138,123,123,114,117],
[82,89,72,0,109,94,83,95],
[88,100,87,101,0,102,96,110],
[92,79,87,116,108,0,99,95],
[103,113,96,127,114,111,0,114],
[88,101,93,115,100,115,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,130,116,124,108,133,120],
[107,0,102,123,137,103,126,126],
[80,108,0,98,111,101,118,122],
[94,87,112,0,118,101,118,110],
[86,73,99,92,0,86,97,122],
[102,107,109,109,124,0,112,141],
[77,84,92,92,113,98,0,110],
[90,84,88,100,88,69,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,117,116,96,104,106,101],
[109,0,124,108,100,115,103,121],
[93,86,0,115,92,100,87,112],
[94,102,95,0,84,96,86,106],
[114,110,118,126,0,110,92,121],
[106,95,110,114,100,0,96,111],
[104,107,123,124,118,114,0,118],
[109,89,98,104,89,99,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,94,98,91,104,81,107],
[102,0,110,105,105,108,105,105],
[116,100,0,99,99,97,87,105],
[112,105,111,0,122,107,100,103],
[119,105,111,88,0,116,106,116],
[106,102,113,103,94,0,97,110],
[129,105,123,110,104,113,0,108],
[103,105,105,107,94,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,120,100,120,112,109,105],
[113,0,108,101,110,108,112,111],
[90,102,0,100,114,111,107,116],
[110,109,110,0,125,119,104,115],
[90,100,96,85,0,101,102,91],
[98,102,99,91,109,0,103,105],
[101,98,103,106,108,107,0,98],
[105,99,94,95,119,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,98,105,110,93,103,116],
[99,0,93,90,87,81,101,98],
[112,117,0,117,111,105,115,123],
[105,120,93,0,94,96,103,104],
[100,123,99,116,0,95,103,101],
[117,129,105,114,115,0,114,130],
[107,109,95,107,107,96,0,108],
[94,112,87,106,109,80,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,133,130,111,122,127,102],
[107,0,142,132,111,108,112,95],
[77,68,0,82,90,88,98,61],
[80,78,128,0,110,77,106,78],
[99,99,120,100,0,103,103,98],
[88,102,122,133,107,0,112,93],
[83,98,112,104,107,98,0,110],
[108,115,149,132,112,117,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,85,117,100,102,113],
[103,0,109,102,108,102,104,115],
[97,101,0,85,107,100,101,94],
[125,108,125,0,120,116,121,94],
[93,102,103,90,0,103,105,93],
[110,108,110,94,107,0,114,99],
[108,106,109,89,105,96,0,102],
[97,95,116,116,117,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,113,99,103,93,97,93],
[128,0,115,106,108,96,119,120],
[97,95,0,113,116,100,105,98],
[111,104,97,0,86,99,106,110],
[107,102,94,124,0,90,94,101],
[117,114,110,111,120,0,104,110],
[113,91,105,104,116,106,0,117],
[117,90,112,100,109,100,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,97,115,114,108,113,117],
[100,0,97,122,108,108,104,111],
[113,113,0,104,127,110,112,116],
[95,88,106,0,108,103,107,106],
[96,102,83,102,0,98,105,110],
[102,102,100,107,112,0,121,119],
[97,106,98,103,105,89,0,109],
[93,99,94,104,100,91,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,105,84,90,93,97,101],
[114,0,127,113,120,99,104,118],
[105,83,0,92,93,87,88,90],
[126,97,118,0,110,108,113,104],
[120,90,117,100,0,117,108,116],
[117,111,123,102,93,0,110,108],
[113,106,122,97,102,100,0,114],
[109,92,120,106,94,102,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,92,85,98,90,100,102],
[106,0,99,104,102,105,86,100],
[118,111,0,106,108,103,103,126],
[125,106,104,0,106,97,109,119],
[112,108,102,104,0,112,100,120],
[120,105,107,113,98,0,94,105],
[110,124,107,101,110,116,0,120],
[108,110,84,91,90,105,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,106,104,93,99,103],
[103,0,100,86,105,104,89,87],
[93,110,0,100,106,101,100,86],
[104,124,110,0,101,100,107,99],
[106,105,104,109,0,95,90,76],
[117,106,109,110,115,0,96,105],
[111,121,110,103,120,114,0,106],
[107,123,124,111,134,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,52,156,104,104,104,104],
[52,0,104,156,156,104,104,104],
[158,106,0,104,106,52,104,158],
[54,54,106,0,54,106,158,158],
[106,54,104,156,0,104,104,158],
[106,106,158,104,106,0,104,158],
[106,106,106,52,106,106,0,158],
[106,106,52,52,52,52,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,104,104,118,113,104,108],
[94,0,87,94,99,94,99,87],
[106,123,0,109,108,100,114,103],
[106,116,101,0,110,98,102,95],
[92,111,102,100,0,101,97,89],
[97,116,110,112,109,0,103,104],
[106,111,96,108,113,107,0,99],
[102,123,107,115,121,106,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,106,95,107,97,95,98],
[128,0,110,127,118,105,109,100],
[104,100,0,109,108,102,105,102],
[115,83,101,0,97,101,100,103],
[103,92,102,113,0,99,96,102],
[113,105,108,109,111,0,109,109],
[115,101,105,110,114,101,0,98],
[112,110,108,107,108,101,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,94,98,110,96,109],
[103,0,107,100,94,110,99,103],
[103,103,0,104,96,107,101,101],
[116,110,106,0,105,124,106,116],
[112,116,114,105,0,113,97,108],
[100,100,103,86,97,0,94,96],
[114,111,109,104,113,116,0,102],
[101,107,109,94,102,114,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,99,94,98,100,94],
[111,0,105,110,102,106,113,100],
[108,105,0,104,91,110,107,114],
[111,100,106,0,115,106,97,98],
[116,108,119,95,0,107,103,112],
[112,104,100,104,103,0,95,103],
[110,97,103,113,107,115,0,110],
[116,110,96,112,98,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,99,84,89,99,106,101],
[138,0,105,78,95,89,97,115],
[111,105,0,83,76,78,97,98],
[126,132,127,0,84,114,126,112],
[121,115,134,126,0,108,126,99],
[111,121,132,96,102,0,125,129],
[104,113,113,84,84,85,0,92],
[109,95,112,98,111,81,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,114,98,112,110,115,99],
[108,0,106,97,109,107,108,104],
[96,104,0,98,92,98,96,79],
[112,113,112,0,105,106,108,100],
[98,101,118,105,0,107,102,104],
[100,103,112,104,103,0,93,105],
[95,102,114,102,108,117,0,98],
[111,106,131,110,106,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,98,105,104,97,108,117],
[106,0,103,113,111,91,99,113],
[112,107,0,111,108,109,102,118],
[105,97,99,0,98,104,105,98],
[106,99,102,112,0,105,102,118],
[113,119,101,106,105,0,103,122],
[102,111,108,105,108,107,0,99],
[93,97,92,112,92,88,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,93,67,77,94,90,82],
[130,0,81,82,111,108,99,94],
[117,129,0,85,85,88,80,84],
[143,128,125,0,103,108,116,130],
[133,99,125,107,0,92,98,73],
[116,102,122,102,118,0,91,83],
[120,111,130,94,112,119,0,102],
[128,116,126,80,137,127,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,105,102,100,112,122,94],
[88,0,106,105,68,91,99,87],
[105,104,0,103,103,95,108,88],
[108,105,107,0,98,107,111,101],
[110,142,107,112,0,98,100,116],
[98,119,115,103,112,0,114,110],
[88,111,102,99,110,96,0,100],
[116,123,122,109,94,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,114,119,102,123,113,120],
[88,0,118,116,109,125,106,116],
[96,92,0,113,100,109,104,107],
[91,94,97,0,85,112,92,113],
[108,101,110,125,0,121,119,120],
[87,85,101,98,89,0,70,104],
[97,104,106,118,91,140,0,120],
[90,94,103,97,90,106,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,103,101,105,105,107],
[104,0,111,115,105,109,105,113],
[107,99,0,112,111,105,100,106],
[107,95,98,0,106,106,97,101],
[109,105,99,104,0,109,104,107],
[105,101,105,104,101,0,100,108],
[105,105,110,113,106,110,0,106],
[103,97,104,109,103,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,107,103,107,108,108],
[99,0,98,103,96,100,108,104],
[103,112,0,110,99,106,109,104],
[103,107,100,0,107,111,101,110],
[107,114,111,103,0,113,119,117],
[103,110,104,99,97,0,109,102],
[102,102,101,109,91,101,0,100],
[102,106,106,100,93,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,99,116,112,116,99,121],
[83,0,96,96,101,97,95,108],
[111,114,0,107,103,124,108,99],
[94,114,103,0,96,116,106,110],
[98,109,107,114,0,115,110,102],
[94,113,86,94,95,0,102,93],
[111,115,102,104,100,108,0,99],
[89,102,111,100,108,117,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,89,106,89,84,93,94],
[117,0,97,89,114,102,113,99],
[121,113,0,104,118,117,125,103],
[104,121,106,0,116,107,112,110],
[121,96,92,94,0,116,98,107],
[126,108,93,103,94,0,120,107],
[117,97,85,98,112,90,0,109],
[116,111,107,100,103,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,0,71,0,71,0,69],
[69,0,0,0,69,0,0,69],
[210,210,0,210,139,71,71,140],
[139,210,0,0,69,0,0,69],
[210,141,71,141,0,71,71,140],
[139,210,139,210,139,0,0,69],
[210,210,139,210,139,210,0,69],
[141,141,70,141,70,141,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,71,114,117,139,71,118],
[92,0,118,114,138,115,92,92],
[139,92,0,114,91,115,91,68],
[96,96,96,0,95,140,119,72],
[93,72,119,115,0,92,92,48],
[71,95,95,70,118,0,94,118],
[139,118,119,91,118,116,0,95],
[92,118,142,138,162,92,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,111,99,114,111,98,93],
[109,0,121,109,114,83,91,85],
[99,89,0,86,113,105,108,86],
[111,101,124,0,113,98,108,103],
[96,96,97,97,0,98,89,93],
[99,127,105,112,112,0,100,103],
[112,119,102,102,121,110,0,109],
[117,125,124,107,117,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,90,112,107,94,84],
[114,0,109,102,116,122,91,103],
[107,101,0,88,104,103,92,94],
[120,108,122,0,119,142,120,103],
[98,94,106,91,0,104,103,71],
[103,88,107,68,106,0,106,87],
[116,119,118,90,107,104,0,108],
[126,107,116,107,139,123,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,94,94,97,76,89,88],
[118,0,89,87,89,91,89,75],
[116,121,0,97,115,106,94,96],
[116,123,113,0,120,103,110,106],
[113,121,95,90,0,92,106,83],
[134,119,104,107,118,0,105,108],
[121,121,116,100,104,105,0,90],
[122,135,114,104,127,102,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,123,121,103,98,112,110],
[109,0,108,120,111,107,114,102],
[87,102,0,102,90,79,108,90],
[89,90,108,0,96,95,97,93],
[107,99,120,114,0,89,107,108],
[112,103,131,115,121,0,117,105],
[98,96,102,113,103,93,0,101],
[100,108,120,117,102,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,90,111,107,109,113,99],
[82,0,87,101,88,93,100,85],
[120,123,0,102,109,110,126,110],
[99,109,108,0,103,109,123,114],
[103,122,101,107,0,99,121,99],
[101,117,100,101,111,0,119,100],
[97,110,84,87,89,91,0,98],
[111,125,100,96,111,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,103,107,100,99,96,113],
[119,0,105,97,98,129,105,120],
[107,105,0,103,77,111,101,99],
[103,113,107,0,90,101,99,134],
[110,112,133,120,0,121,100,131],
[111,81,99,109,89,0,106,106],
[114,105,109,111,110,104,0,123],
[97,90,111,76,79,104,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,106,121,112,96,117,118],
[95,0,124,119,125,112,118,116],
[104,86,0,85,108,106,110,112],
[89,91,125,0,115,104,114,110],
[98,85,102,95,0,106,89,84],
[114,98,104,106,104,0,101,102],
[93,92,100,96,121,109,0,109],
[92,94,98,100,126,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,93,88,97,124,90,96],
[98,0,81,88,94,107,90,81],
[117,129,0,103,109,117,99,101],
[122,122,107,0,125,128,101,112],
[113,116,101,85,0,116,97,109],
[86,103,93,82,94,0,86,89],
[120,120,111,109,113,124,0,100],
[114,129,109,98,101,121,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,94,102,101,103,98,99],
[107,0,108,96,110,110,109,108],
[116,102,0,118,111,114,112,118],
[108,114,92,0,109,106,117,107],
[109,100,99,101,0,108,105,102],
[107,100,96,104,102,0,112,104],
[112,101,98,93,105,98,0,96],
[111,102,92,103,108,106,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,102,98,113,98,95],
[111,0,114,117,101,97,104,110],
[105,96,0,94,103,95,96,103],
[108,93,116,0,96,103,105,118],
[112,109,107,114,0,116,96,114],
[97,113,115,107,94,0,103,111],
[112,106,114,105,114,107,0,104],
[115,100,107,92,96,99,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,103,103,110,103,106],
[109,0,106,116,96,105,95,100],
[109,104,0,114,112,119,111,115],
[107,94,96,0,90,98,97,87],
[107,114,98,120,0,109,110,123],
[100,105,91,112,101,0,106,95],
[107,115,99,113,100,104,0,110],
[104,110,95,123,87,115,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,103,119,119,108,106,110],
[95,0,89,107,93,87,93,103],
[107,121,0,112,105,107,108,119],
[91,103,98,0,92,96,91,96],
[91,117,105,118,0,99,95,104],
[102,123,103,114,111,0,106,117],
[104,117,102,119,115,104,0,109],
[100,107,91,114,106,93,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,117,83,94,99,89,86],
[108,0,115,108,82,111,102,83],
[93,95,0,92,96,105,97,95],
[127,102,118,0,94,121,114,112],
[116,128,114,116,0,115,115,93],
[111,99,105,89,95,0,108,86],
[121,108,113,96,95,102,0,93],
[124,127,115,98,117,124,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,118,108,97,93,108,112],
[115,0,110,124,102,110,126,128],
[92,100,0,95,99,99,108,108],
[102,86,115,0,110,107,109,126],
[113,108,111,100,0,102,110,118],
[117,100,111,103,108,0,124,113],
[102,84,102,101,100,86,0,121],
[98,82,102,84,92,97,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,82,102,94,97,98,111],
[112,0,111,104,101,111,106,113],
[128,99,0,128,116,115,120,118],
[108,106,82,0,90,102,104,98],
[116,109,94,120,0,102,122,102],
[113,99,95,108,108,0,104,123],
[112,104,90,106,88,106,0,108],
[99,97,92,112,108,87,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,109,106,108,110,108],
[105,0,104,98,100,89,98,101],
[107,106,0,108,97,107,115,109],
[101,112,102,0,103,100,111,112],
[104,110,113,107,0,110,106,99],
[102,121,103,110,100,0,111,106],
[100,112,95,99,104,99,0,108],
[102,109,101,98,111,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,149,122,113,128,111],
[112,0,118,121,127,90,121,106],
[111,92,0,118,123,123,111,119],
[61,89,92,0,108,80,103,97],
[88,83,87,102,0,117,113,95],
[97,120,87,130,93,0,121,99],
[82,89,99,107,97,89,0,96],
[99,104,91,113,115,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,110,114,119,117,104,99],
[113,0,112,107,108,121,101,105],
[100,98,0,97,104,114,110,107],
[96,103,113,0,101,95,120,94],
[91,102,106,109,0,102,97,99],
[93,89,96,115,108,0,90,81],
[106,109,100,90,113,120,0,96],
[111,105,103,116,111,129,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,103,103,108,107,124,98],
[93,0,101,105,112,83,114,96],
[107,109,0,108,106,107,104,106],
[107,105,102,0,101,93,114,103],
[102,98,104,109,0,93,98,101],
[103,127,103,117,117,0,121,104],
[86,96,106,96,112,89,0,100],
[112,114,104,107,109,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,101,102,109,110,92],
[105,0,111,108,118,108,102,102],
[112,99,0,102,117,118,102,101],
[109,102,108,0,120,112,96,96],
[108,92,93,90,0,102,94,91],
[101,102,92,98,108,0,94,93],
[100,108,108,114,116,116,0,107],
[118,108,109,114,119,117,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,128,97,100,115,107,131],
[102,0,113,112,93,128,99,126],
[82,97,0,108,86,98,82,119],
[113,98,102,0,67,116,95,127],
[110,117,124,143,0,137,98,145],
[95,82,112,94,73,0,72,111],
[103,111,128,115,112,138,0,122],
[79,84,91,83,65,99,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,96,67,139,120,102,105],
[101,0,68,62,94,91,84,99],
[114,142,0,96,111,127,106,103],
[143,148,114,0,109,124,146,102],
[71,116,99,101,0,122,74,111],
[90,119,83,86,88,0,77,87],
[108,126,104,64,136,133,0,100],
[105,111,107,108,99,123,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,127,85,107,110,97],
[112,0,113,128,111,105,116,109],
[111,97,0,114,102,108,119,98],
[83,82,96,0,79,90,95,79],
[125,99,108,131,0,119,126,104],
[103,105,102,120,91,0,117,99],
[100,94,91,115,84,93,0,94],
[113,101,112,131,106,111,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,112,112,108,93,123,102],
[93,0,109,100,105,99,114,108],
[98,101,0,101,96,93,109,100],
[98,110,109,0,92,101,115,89],
[102,105,114,118,0,102,116,108],
[117,111,117,109,108,0,123,101],
[87,96,101,95,94,87,0,101],
[108,102,110,121,102,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,111,112,106,112,109,105],
[114,0,120,125,107,120,115,105],
[99,90,0,99,93,102,111,94],
[98,85,111,0,87,99,110,91],
[104,103,117,123,0,116,111,110],
[98,90,108,111,94,0,108,104],
[101,95,99,100,99,102,0,95],
[105,105,116,119,100,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,105,104,108,117,105,92],
[110,0,98,107,95,104,94,92],
[105,112,0,103,111,104,115,102],
[106,103,107,0,98,109,103,102],
[102,115,99,112,0,111,106,96],
[93,106,106,101,99,0,108,93],
[105,116,95,107,104,102,0,105],
[118,118,108,108,114,117,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,105,117,108,111,127],
[104,0,98,103,119,116,89,122],
[98,112,0,106,100,116,96,118],
[105,107,104,0,112,105,93,115],
[93,91,110,98,0,96,88,110],
[102,94,94,105,114,0,104,116],
[99,121,114,117,122,106,0,131],
[83,88,92,95,100,94,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,84,105,125,105,86,87],
[104,0,138,121,140,139,120,123],
[126,72,0,103,124,87,86,121],
[105,89,107,0,107,126,107,108],
[85,70,86,103,0,120,84,103],
[105,71,123,84,90,0,70,127],
[124,90,124,103,126,140,0,141],
[123,87,89,102,107,83,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,114,106,103,113,107,111],
[97,0,102,94,94,100,96,98],
[96,108,0,105,94,113,104,108],
[104,116,105,0,106,118,107,108],
[107,116,116,104,0,111,102,105],
[97,110,97,92,99,0,92,93],
[103,114,106,103,108,118,0,109],
[99,112,102,102,105,117,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,100,107,108,115,97],
[107,0,113,105,101,115,112,103],
[111,97,0,92,101,106,118,113],
[110,105,118,0,110,121,104,106],
[103,109,109,100,0,119,93,119],
[102,95,104,89,91,0,106,101],
[95,98,92,106,117,104,0,108],
[113,107,97,104,91,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,110,105,109,96,87],
[102,0,98,92,103,102,94,95],
[103,112,0,97,96,97,110,102],
[100,118,113,0,112,118,108,100],
[105,107,114,98,0,110,94,98],
[101,108,113,92,100,0,99,97],
[114,116,100,102,116,111,0,106],
[123,115,108,110,112,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,100,105,102,99,99],
[111,0,108,114,117,116,103,106],
[108,102,0,113,108,112,101,100],
[110,96,97,0,102,96,93,100],
[105,93,102,108,0,108,88,102],
[108,94,98,114,102,0,102,100],
[111,107,109,117,122,108,0,98],
[111,104,110,110,108,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,111,128,109,105,102],
[98,0,105,122,105,89,115,112],
[97,105,0,113,108,96,99,86],
[99,88,97,0,112,105,96,111],
[82,105,102,98,0,97,104,108],
[101,121,114,105,113,0,105,104],
[105,95,111,114,106,105,0,99],
[108,98,124,99,102,106,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,103,105,96,104,106],
[107,0,103,100,107,104,114,89],
[110,107,0,119,110,115,114,102],
[107,110,91,0,96,100,118,96],
[105,103,100,114,0,103,98,92],
[114,106,95,110,107,0,112,99],
[106,96,96,92,112,98,0,88],
[104,121,108,114,118,111,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,104,108,103,112,113,84],
[113,0,94,110,111,106,103,87],
[106,116,0,110,114,113,102,101],
[102,100,100,0,89,93,98,85],
[107,99,96,121,0,107,101,94],
[98,104,97,117,103,0,109,85],
[97,107,108,112,109,101,0,105],
[126,123,109,125,116,125,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,105,92,94,90,96],
[109,0,114,93,98,90,102,112],
[109,96,0,97,103,95,105,94],
[105,117,113,0,109,106,99,98],
[118,112,107,101,0,97,96,107],
[116,120,115,104,113,0,107,102],
[120,108,105,111,114,103,0,113],
[114,98,116,112,103,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,117,116,114,98,104,99],
[111,0,121,120,118,104,106,105],
[93,89,0,108,106,97,103,85],
[94,90,102,0,114,100,94,90],
[96,92,104,96,0,101,97,85],
[112,106,113,110,109,0,105,106],
[106,104,107,116,113,105,0,108],
[111,105,125,120,125,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,113,102,128,121,127],
[100,0,106,109,108,111,105,109],
[107,104,0,111,109,92,102,112],
[97,101,99,0,103,109,106,105],
[108,102,101,107,0,117,102,107],
[82,99,118,101,93,0,84,112],
[89,105,108,104,108,126,0,112],
[83,101,98,105,103,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,111,109,105,105,105],
[100,0,113,111,115,97,100,100],
[109,97,0,97,90,84,109,106],
[99,99,113,0,94,96,107,106],
[101,95,120,116,0,94,106,109],
[105,113,126,114,116,0,128,119],
[105,110,101,103,104,82,0,102],
[105,110,104,104,101,91,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,118,112,110,110,121,104],
[105,0,114,109,89,97,125,99],
[92,96,0,92,85,94,103,88],
[98,101,118,0,90,96,112,97],
[100,121,125,120,0,113,132,114],
[100,113,116,114,97,0,115,103],
[89,85,107,98,78,95,0,92],
[106,111,122,113,96,107,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,98,106,106,99,105,94],
[95,0,79,97,110,84,91,90],
[112,131,0,120,126,101,113,112],
[104,113,90,0,120,101,108,92],
[104,100,84,90,0,100,103,101],
[111,126,109,109,110,0,119,102],
[105,119,97,102,107,91,0,95],
[116,120,98,118,109,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,103,90,97,96,94],
[98,0,101,105,107,109,97,97],
[102,109,0,102,101,96,104,99],
[107,105,108,0,112,101,105,105],
[120,103,109,98,0,106,105,107],
[113,101,114,109,104,0,106,103],
[114,113,106,105,105,104,0,114],
[116,113,111,105,103,107,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,109,106,94,124,124,101],
[75,0,84,107,81,99,97,91],
[101,126,0,104,118,112,115,114],
[104,103,106,0,118,117,115,102],
[116,129,92,92,0,101,111,96],
[86,111,98,93,109,0,99,89],
[86,113,95,95,99,111,0,105],
[109,119,96,108,114,121,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,96,109,105,96,111,98],
[100,0,98,102,100,113,106,102],
[114,112,0,127,102,111,119,108],
[101,108,83,0,92,98,112,95],
[105,110,108,118,0,115,114,105],
[114,97,99,112,95,0,116,102],
[99,104,91,98,96,94,0,101],
[112,108,102,115,105,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,127,105,95,109,110],
[106,0,89,112,83,101,100,97],
[101,121,0,137,105,106,113,109],
[83,98,73,0,89,86,83,91],
[105,127,105,121,0,112,120,123],
[115,109,104,124,98,0,102,114],
[101,110,97,127,90,108,0,104],
[100,113,101,119,87,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,104,112,112,108,112],
[97,0,109,93,92,95,94,99],
[102,101,0,104,97,100,100,110],
[106,117,106,0,101,114,114,116],
[98,118,113,109,0,111,125,112],
[98,115,110,96,99,0,111,100],
[102,116,110,96,85,99,0,122],
[98,111,100,94,98,110,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,86,82,105,87,85,86],
[98,0,67,94,66,76,83,103],
[124,143,0,123,115,105,95,112],
[128,116,87,0,106,78,85,106],
[105,144,95,104,0,87,105,116],
[123,134,105,132,123,0,120,128],
[125,127,115,125,105,90,0,112],
[124,107,98,104,94,82,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,84,105,110,118,118,125],
[105,0,106,87,100,111,91,120],
[126,104,0,122,110,131,120,129],
[105,123,88,0,106,107,111,125],
[100,110,100,104,0,114,100,115],
[92,99,79,103,96,0,108,97],
[92,119,90,99,110,102,0,117],
[85,90,81,85,95,113,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,108,113,117,101,101],
[104,0,101,104,112,110,112,95],
[102,109,0,96,112,107,108,103],
[102,106,114,0,112,109,100,92],
[97,98,98,98,0,108,97,93],
[93,100,103,101,102,0,97,94],
[109,98,102,110,113,113,0,110],
[109,115,107,118,117,116,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,109,92,117,87,109,116],
[89,0,123,108,116,116,111,111],
[101,87,0,100,98,92,102,88],
[118,102,110,0,114,116,121,134],
[93,94,112,96,0,75,96,96],
[123,94,118,94,135,0,120,103],
[101,99,108,89,114,90,0,105],
[94,99,122,76,114,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,90,110,123,111,91,96],
[117,0,117,132,130,130,108,91],
[120,93,0,118,123,113,90,107],
[100,78,92,0,102,101,84,103],
[87,80,87,108,0,90,94,95],
[99,80,97,109,120,0,89,89],
[119,102,120,126,116,121,0,111],
[114,119,103,107,115,121,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,94,102,103,103,138],
[102,0,114,102,115,125,123,140],
[102,96,0,103,100,89,102,113],
[116,108,107,0,101,112,121,148],
[108,95,110,109,0,100,102,123],
[107,85,121,98,110,0,106,132],
[107,87,108,89,108,104,0,140],
[72,70,97,62,87,78,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,105,104,109,104,107],
[104,0,106,95,91,103,102,88],
[104,104,0,102,95,101,109,93],
[105,115,108,0,96,104,110,104],
[106,119,115,114,0,106,111,104],
[101,107,109,106,104,0,109,104],
[106,108,101,100,99,101,0,94],
[103,122,117,106,106,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,104,99,93,102,95,93],
[110,0,115,109,105,112,105,103],
[106,95,0,90,99,97,97,93],
[111,101,120,0,112,107,108,102],
[117,105,111,98,0,99,101,102],
[108,98,113,103,111,0,100,105],
[115,105,113,102,109,110,0,106],
[117,107,117,108,108,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,101,106,99,107,97,101],
[131,0,115,102,104,127,104,117],
[109,95,0,96,116,117,107,103],
[104,108,114,0,102,120,119,102],
[111,106,94,108,0,122,103,109],
[103,83,93,90,88,0,87,95],
[113,106,103,91,107,123,0,110],
[109,93,107,108,101,115,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,92,89,89,95,84,108],
[103,0,113,101,103,102,102,103],
[118,97,0,102,116,94,104,103],
[121,109,108,0,98,103,120,114],
[121,107,94,112,0,110,105,119],
[115,108,116,107,100,0,107,111],
[126,108,106,90,105,103,0,107],
[102,107,107,96,91,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,116,106,116,103,107,106],
[106,0,104,105,105,117,109,111],
[94,106,0,103,109,98,109,111],
[104,105,107,0,118,104,116,112],
[94,105,101,92,0,93,98,97],
[107,93,112,106,117,0,114,98],
[103,101,101,94,112,96,0,109],
[104,99,99,98,113,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,85,102,91,94,83,86],
[113,0,101,117,103,105,104,91],
[125,109,0,118,113,114,100,115],
[108,93,92,0,100,100,99,104],
[119,107,97,110,0,98,90,95],
[116,105,96,110,112,0,107,90],
[127,106,110,111,120,103,0,114],
[124,119,95,106,115,120,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,105,113,109,106,108],
[109,0,108,115,108,110,103,106],
[104,102,0,98,106,90,104,99],
[105,95,112,0,106,101,104,98],
[97,102,104,104,0,99,94,101],
[101,100,120,109,111,0,107,105],
[104,107,106,106,116,103,0,114],
[102,104,111,112,109,105,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,112,121,105,93,89],
[102,0,102,98,113,94,91,91],
[98,108,0,95,111,102,109,96],
[98,112,115,0,117,111,95,103],
[89,97,99,93,0,96,88,92],
[105,116,108,99,114,0,105,108],
[117,119,101,115,122,105,0,114],
[121,119,114,107,118,102,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,104,113,111,102,102,112],
[87,0,99,103,91,89,90,88],
[106,111,0,116,103,99,112,102],
[97,107,94,0,100,96,96,104],
[99,119,107,110,0,105,108,111],
[108,121,111,114,105,0,115,100],
[108,120,98,114,102,95,0,97],
[98,122,108,106,99,110,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,119,120,123,101,115,112],
[113,0,94,103,102,99,104,79],
[91,116,0,94,100,113,119,111],
[90,107,116,0,109,106,117,109],
[87,108,110,101,0,104,116,114],
[109,111,97,104,106,0,118,107],
[95,106,91,93,94,92,0,89],
[98,131,99,101,96,103,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,127,139,64,106,80,94],
[119,0,117,116,75,121,73,101],
[83,93,0,97,76,71,75,86],
[71,94,113,0,52,102,63,83],
[146,135,134,158,0,104,99,112],
[104,89,139,108,106,0,61,91],
[130,137,135,147,111,149,0,97],
[116,109,124,127,98,119,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,100,64,96,67,61,70],
[131,0,119,129,118,104,84,89],
[110,91,0,88,115,102,90,105],
[146,81,122,0,137,120,92,84],
[114,92,95,73,0,94,52,63],
[143,106,108,90,116,0,77,87],
[149,126,120,118,158,133,0,100],
[140,121,105,126,147,123,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,120,114,100,120,114],
[94,0,117,118,99,109,113,113],
[103,93,0,116,107,96,99,114],
[90,92,94,0,98,85,97,96],
[96,111,103,112,0,105,105,97],
[110,101,114,125,105,0,103,104],
[90,97,111,113,105,107,0,97],
[96,97,96,114,113,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,96,121,119,116,104,133],
[99,0,120,105,120,112,102,111],
[114,90,0,122,107,106,93,101],
[89,105,88,0,106,103,101,116],
[91,90,103,104,0,113,106,123],
[94,98,104,107,97,0,90,124],
[106,108,117,109,104,120,0,126],
[77,99,109,94,87,86,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,109,113,92,113,108,111],
[81,0,94,91,80,84,92,77],
[101,116,0,109,102,117,102,82],
[97,119,101,0,93,119,117,100],
[118,130,108,117,0,119,116,103],
[97,126,93,91,91,0,107,89],
[102,118,108,93,94,103,0,105],
[99,133,128,110,107,121,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,128,94,114,132,130,130],
[105,0,124,106,93,130,116,129],
[82,86,0,80,80,106,89,104],
[116,104,130,0,111,133,136,131],
[96,117,130,99,0,129,121,125],
[78,80,104,77,81,0,82,82],
[80,94,121,74,89,128,0,102],
[80,81,106,79,85,128,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,60,31,61,30,59,60],
[120,0,120,90,90,61,59,90],
[150,90,0,90,120,120,59,88],
[179,120,120,0,91,89,118,118],
[149,120,90,119,0,90,88,119],
[180,149,90,121,120,0,88,90],
[151,151,151,92,122,122,0,151],
[150,120,122,92,91,120,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,53,157,53,106,53,104],
[157,0,53,157,157,106,104,104],
[157,157,0,157,157,106,157,104],
[53,53,53,0,53,106,53,53],
[157,53,53,157,0,53,106,157],
[104,104,104,104,157,0,104,104],
[157,106,53,157,104,106,0,104],
[106,106,106,157,53,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,98,106,112,94,115,96],
[102,0,99,103,91,97,113,100],
[112,111,0,104,102,89,101,100],
[104,107,106,0,108,100,107,99],
[98,119,108,102,0,108,118,105],
[116,113,121,110,102,0,119,100],
[95,97,109,103,92,91,0,102],
[114,110,110,111,105,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,107,85,106,106,138,98],
[92,0,59,50,71,72,113,82],
[103,151,0,82,72,65,125,95],
[125,160,128,0,126,115,115,105],
[104,139,138,84,0,127,137,104],
[104,138,145,95,83,0,124,102],
[72,97,85,95,73,86,0,85],
[112,128,115,105,106,108,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,114,143,110,168,79,90],
[75,0,112,88,98,119,68,98],
[96,98,0,142,87,120,113,91],
[67,122,68,0,76,112,123,81],
[100,112,123,134,0,155,112,116],
[42,91,90,98,55,0,56,37],
[131,142,97,87,98,154,0,99],
[120,112,119,129,94,173,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,106,104,104,101,104],
[97,0,89,95,115,99,108,108],
[105,121,0,112,120,106,118,105],
[104,115,98,0,103,112,122,104],
[106,95,90,107,0,91,98,106],
[106,111,104,98,119,0,107,123],
[109,102,92,88,112,103,0,109],
[106,102,105,106,104,87,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,94,143,91,70,93,116],
[162,0,161,118,161,93,116,116],
[116,49,0,94,91,69,93,92],
[67,92,116,0,114,115,92,92],
[119,49,119,96,0,71,70,116],
[140,117,141,95,139,0,139,139],
[117,94,117,118,140,71,0,92],
[94,94,118,118,94,71,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,91,100,101,103,87,99],
[103,0,106,120,110,106,103,94],
[119,104,0,123,102,114,100,108],
[110,90,87,0,103,108,92,92],
[109,100,108,107,0,122,103,100],
[107,104,96,102,88,0,93,99],
[123,107,110,118,107,117,0,101],
[111,116,102,118,110,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,130,101,118,128,105,114],
[97,0,125,89,120,114,103,107],
[80,85,0,90,94,90,76,85],
[109,121,120,0,99,123,109,105],
[92,90,116,111,0,98,92,99],
[82,96,120,87,112,0,92,107],
[105,107,134,101,118,118,0,102],
[96,103,125,105,111,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,111,102,115,132,122,110],
[83,0,85,97,97,102,101,91],
[99,125,0,102,106,128,112,98],
[108,113,108,0,118,118,101,98],
[95,113,104,92,0,105,101,98],
[78,108,82,92,105,0,112,85],
[88,109,98,109,109,98,0,83],
[100,119,112,112,112,125,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,88,76,92,112,114,86],
[125,0,104,92,115,112,139,99],
[122,106,0,98,115,107,129,113],
[134,118,112,0,105,98,126,134],
[118,95,95,105,0,102,124,102],
[98,98,103,112,108,0,133,95],
[96,71,81,84,86,77,0,99],
[124,111,97,76,108,115,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,106,111,96,90,93,97],
[122,0,99,121,104,90,104,105],
[104,111,0,103,94,84,115,95],
[99,89,107,0,100,95,112,103],
[114,106,116,110,0,94,114,99],
[120,120,126,115,116,0,102,102],
[117,106,95,98,96,108,0,104],
[113,105,115,107,111,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,89,96,106,90,96,105],
[123,0,102,106,104,106,110,93],
[121,108,0,95,112,96,113,116],
[114,104,115,0,103,107,102,105],
[104,106,98,107,0,94,106,104],
[120,104,114,103,116,0,112,114],
[114,100,97,108,104,98,0,105],
[105,117,94,105,106,96,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,101,108,99,102,92,91],
[97,0,102,111,99,96,100,96],
[109,108,0,119,115,92,94,95],
[102,99,91,0,103,102,85,93],
[111,111,95,107,0,96,97,97],
[108,114,118,108,114,0,101,93],
[118,110,116,125,113,109,0,105],
[119,114,115,117,113,117,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,100,124,90,60,66,89],
[138,0,124,118,123,99,103,121],
[110,86,0,78,82,97,90,96],
[86,92,132,0,83,93,85,99],
[120,87,128,127,0,81,74,95],
[150,111,113,117,129,0,114,79],
[144,107,120,125,136,96,0,122],
[121,89,114,111,115,131,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,102,100,113,115,102],
[109,0,106,105,104,110,109,109],
[112,104,0,103,102,108,115,101],
[108,105,107,0,110,112,118,109],
[110,106,108,100,0,109,122,109],
[97,100,102,98,101,0,107,95],
[95,101,95,92,88,103,0,96],
[108,101,109,101,101,115,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,124,96,90,92,98,68],
[117,0,138,107,100,112,91,79],
[86,72,0,73,63,87,57,61],
[114,103,137,0,100,109,100,118],
[120,110,147,110,0,107,79,82],
[118,98,123,101,103,0,81,93],
[112,119,153,110,131,129,0,100],
[142,131,149,92,128,117,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,111,98,107,119,108,104],
[89,0,93,89,103,100,101,95],
[99,117,0,107,118,105,115,108],
[112,121,103,0,112,110,109,112],
[103,107,92,98,0,104,102,108],
[91,110,105,100,106,0,103,101],
[102,109,95,101,108,107,0,104],
[106,115,102,98,102,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,111,105,98,102,93,101],
[119,0,114,86,92,98,109,100],
[99,96,0,93,93,95,90,99],
[105,124,117,0,119,115,105,111],
[112,118,117,91,0,107,102,106],
[108,112,115,95,103,0,102,97],
[117,101,120,105,108,108,0,110],
[109,110,111,99,104,113,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,97,104,105,96,102,91],
[98,0,82,91,91,82,81,87],
[113,128,0,108,102,101,106,100],
[106,119,102,0,104,97,98,98],
[105,119,108,106,0,97,89,98],
[114,128,109,113,113,0,107,85],
[108,129,104,112,121,103,0,106],
[119,123,110,112,112,125,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,77,99,96,100,78,86],
[133,0,92,114,114,110,90,102],
[133,118,0,118,132,103,106,106],
[111,96,92,0,109,104,101,98],
[114,96,78,101,0,107,93,87],
[110,100,107,106,103,0,96,101],
[132,120,104,109,117,114,0,102],
[124,108,104,112,123,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,115,107,109,97,99,117],
[100,0,108,96,133,99,86,100],
[95,102,0,111,123,113,91,88],
[103,114,99,0,117,114,110,115],
[101,77,87,93,0,94,75,75],
[113,111,97,96,116,0,104,90],
[111,124,119,100,135,106,0,95],
[93,110,122,95,135,120,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,110,101,109,112,102,120],
[67,0,88,90,82,103,91,114],
[100,122,0,100,107,121,108,113],
[109,120,110,0,104,117,114,132],
[101,128,103,106,0,109,116,129],
[98,107,89,93,101,0,86,109],
[108,119,102,96,94,124,0,136],
[90,96,97,78,81,101,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,113,100,90,96,107,103],
[107,0,81,111,127,101,100,109],
[97,129,0,87,101,99,100,101],
[110,99,123,0,118,112,103,111],
[120,83,109,92,0,94,107,123],
[114,109,111,98,116,0,128,112],
[103,110,110,107,103,82,0,99],
[107,101,109,99,87,98,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,106,102,98,103,104,108],
[82,0,89,81,80,87,98,87],
[104,121,0,97,87,99,111,103],
[108,129,113,0,104,111,109,90],
[112,130,123,106,0,115,119,99],
[107,123,111,99,95,0,115,101],
[106,112,99,101,91,95,0,110],
[102,123,107,120,111,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,94,114,113,120,133,109],
[107,0,82,122,76,98,115,124],
[116,128,0,113,113,106,126,105],
[96,88,97,0,89,105,129,122],
[97,134,97,121,0,128,134,132],
[90,112,104,105,82,0,118,108],
[77,95,84,81,76,92,0,91],
[101,86,105,88,78,102,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,93,107,111,99,101],
[110,0,101,107,114,118,108,107],
[109,109,0,112,121,107,114,99],
[117,103,98,0,115,105,99,99],
[103,96,89,95,0,107,103,99],
[99,92,103,105,103,0,89,96],
[111,102,96,111,107,121,0,95],
[109,103,111,111,111,114,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,85,90,92,89,101,93],
[116,0,113,114,89,114,100,109],
[125,97,0,114,109,116,101,118],
[120,96,96,0,95,117,101,108],
[118,121,101,115,0,132,108,111],
[121,96,94,93,78,0,91,102],
[109,110,109,109,102,119,0,123],
[117,101,92,102,99,108,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,94,90,100,107,105],
[99,0,105,104,116,105,120,113],
[108,105,0,107,117,121,112,111],
[116,106,103,0,94,102,112,114],
[120,94,93,116,0,114,119,117],
[110,105,89,108,96,0,107,93],
[103,90,98,98,91,103,0,105],
[105,97,99,96,93,117,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,97,103,110,109,107,114],
[101,0,102,101,101,103,108,100],
[113,108,0,107,105,112,109,117],
[107,109,103,0,106,112,111,108],
[100,109,105,104,0,101,97,108],
[101,107,98,98,109,0,104,106],
[103,102,101,99,113,106,0,112],
[96,110,93,102,102,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,121,120,119,97,103,104],
[99,0,119,110,106,101,100,102],
[89,91,0,102,106,91,98,98],
[90,100,108,0,102,106,103,103],
[91,104,104,108,0,105,96,98],
[113,109,119,104,105,0,118,122],
[107,110,112,107,114,92,0,106],
[106,108,112,107,112,88,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,109,103,119,108,101,99],
[85,0,121,101,112,111,93,88],
[101,89,0,110,97,98,101,79],
[107,109,100,0,102,101,111,111],
[91,98,113,108,0,100,103,89],
[102,99,112,109,110,0,96,105],
[109,117,109,99,107,114,0,102],
[111,122,131,99,121,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,93,89,101,96,99,92],
[118,0,105,104,105,103,113,96],
[117,105,0,98,110,107,114,95],
[121,106,112,0,121,104,119,107],
[109,105,100,89,0,90,115,82],
[114,107,103,106,120,0,109,107],
[111,97,96,91,95,101,0,83],
[118,114,115,103,128,103,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,111,100,94,93,101],
[102,0,104,96,87,101,97,100],
[101,106,0,96,96,87,88,95],
[99,114,114,0,100,87,101,92],
[110,123,114,110,0,113,97,108],
[116,109,123,123,97,0,104,105],
[117,113,122,109,113,106,0,100],
[109,110,115,118,102,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,104,110,95,98,106],
[104,0,106,101,92,95,97,109],
[106,104,0,103,100,110,107,104],
[106,109,107,0,105,106,109,112],
[100,118,110,105,0,97,104,104],
[115,115,100,104,113,0,108,101],
[112,113,103,101,106,102,0,102],
[104,101,106,98,106,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,100,105,88,124,101,97],
[123,0,116,90,100,122,94,92],
[110,94,0,93,88,111,94,97],
[105,120,117,0,106,120,95,87],
[122,110,122,104,0,135,105,109],
[86,88,99,90,75,0,96,72],
[109,116,116,115,105,114,0,102],
[113,118,113,123,101,138,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,103,111,106,104,103],
[105,0,111,110,115,109,109,106],
[104,99,0,103,99,97,105,102],
[107,100,107,0,110,105,109,94],
[99,95,111,100,0,103,101,99],
[104,101,113,105,107,0,105,97],
[106,101,105,101,109,105,0,104],
[107,104,108,116,111,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,112,91,98,109,100],
[104,0,111,118,108,107,113,114],
[103,99,0,117,108,114,108,104],
[98,92,93,0,95,96,93,102],
[119,102,102,115,0,104,106,111],
[112,103,96,114,106,0,111,112],
[101,97,102,117,104,99,0,106],
[110,96,106,108,99,98,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,102,117,98,99,110,113],
[114,0,100,118,118,117,111,104],
[108,110,0,121,111,108,104,112],
[93,92,89,0,96,91,99,100],
[112,92,99,114,0,108,103,101],
[111,93,102,119,102,0,108,105],
[100,99,106,111,107,102,0,115],
[97,106,98,110,109,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,100,107,105,112,98,104],
[95,0,104,116,103,80,110,91],
[110,106,0,90,127,118,110,105],
[103,94,120,0,114,108,116,124],
[105,107,83,96,0,102,90,107],
[98,130,92,102,108,0,101,110],
[112,100,100,94,120,109,0,114],
[106,119,105,86,103,100,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,117,98,105,106,105,125],
[101,0,96,97,98,98,85,92],
[93,114,0,97,125,101,106,112],
[112,113,113,0,107,101,120,114],
[105,112,85,103,0,111,101,100],
[104,112,109,109,99,0,106,126],
[105,125,104,90,109,104,0,111],
[85,118,98,96,110,84,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,114,100,115,110,105,116],
[103,0,110,106,106,100,107,103],
[96,100,0,98,106,96,98,109],
[110,104,112,0,110,95,113,106],
[95,104,104,100,0,94,100,101],
[100,110,114,115,116,0,113,110],
[105,103,112,97,110,97,0,103],
[94,107,101,104,109,100,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,118,109,104,114,91,108],
[105,0,117,103,107,110,104,106],
[92,93,0,96,100,102,91,90],
[101,107,114,0,108,116,106,103],
[106,103,110,102,0,108,104,102],
[96,100,108,94,102,0,92,93],
[119,106,119,104,106,118,0,111],
[102,104,120,107,108,117,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,109,114,101,115,108],
[105,0,101,115,105,102,108,104],
[101,109,0,107,109,108,106,109],
[101,95,103,0,107,105,97,102],
[96,105,101,103,0,102,91,95],
[109,108,102,105,108,0,104,115],
[95,102,104,113,119,106,0,116],
[102,106,101,108,115,95,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,114,107,106,133,105,127],
[95,0,93,87,95,90,84,102],
[96,117,0,105,93,102,92,114],
[103,123,105,0,114,110,113,118],
[104,115,117,96,0,113,110,116],
[77,120,108,100,97,0,100,112],
[105,126,118,97,100,110,0,118],
[83,108,96,92,94,98,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,108,104,97,101,105,100],
[110,0,109,101,110,101,120,101],
[102,101,0,106,97,94,106,99],
[106,109,104,0,90,98,107,98],
[113,100,113,120,0,116,112,108],
[109,109,116,112,94,0,106,103],
[105,90,104,103,98,104,0,104],
[110,109,111,112,102,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,120,109,111,98,111,132],
[86,0,100,97,112,87,101,89],
[90,110,0,120,101,96,121,130],
[101,113,90,0,135,121,104,132],
[99,98,109,75,0,129,89,111],
[112,123,114,89,81,0,102,122],
[99,109,89,106,121,108,0,97],
[78,121,80,78,99,88,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,79,91,97,99,89,91],
[124,0,102,131,116,137,117,102],
[131,108,0,128,103,132,109,117],
[119,79,82,0,94,125,95,118],
[113,94,107,116,0,124,113,111],
[111,73,78,85,86,0,87,103],
[121,93,101,115,97,123,0,111],
[119,108,93,92,99,107,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,99,99,111,109,109,108],
[105,0,92,100,101,103,103,113],
[111,118,0,100,105,117,114,109],
[111,110,110,0,104,111,109,117],
[99,109,105,106,0,120,110,105],
[101,107,93,99,90,0,102,109],
[101,107,96,101,100,108,0,112],
[102,97,101,93,105,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,114,109,94,103,100,96],
[114,0,106,113,104,102,116,108],
[96,104,0,109,97,104,101,101],
[101,97,101,0,89,90,101,103],
[116,106,113,121,0,112,114,103],
[107,108,106,120,98,0,117,106],
[110,94,109,109,96,93,0,100],
[114,102,109,107,107,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,110,110,103,110,117,118],
[91,0,81,101,100,107,103,113],
[100,129,0,105,113,116,112,110],
[100,109,105,0,102,103,111,106],
[107,110,97,108,0,103,104,114],
[100,103,94,107,107,0,100,103],
[93,107,98,99,106,110,0,107],
[92,97,100,104,96,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,118,100,112,113,118],
[104,0,112,106,102,95,99,121],
[98,98,0,110,103,98,103,117],
[92,104,100,0,104,90,102,109],
[110,108,107,106,0,102,98,122],
[98,115,112,120,108,0,105,117],
[97,111,107,108,112,105,0,122],
[92,89,93,101,88,93,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,103,92,100,97,99],
[109,0,111,109,99,105,108,100],
[101,99,0,99,95,98,106,89],
[107,101,111,0,103,106,96,98],
[118,111,115,107,0,112,105,106],
[110,105,112,104,98,0,105,110],
[113,102,104,114,105,105,0,114],
[111,110,121,112,104,100,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,105,97,103,96,112,90],
[86,0,88,89,97,81,97,88],
[105,122,0,98,99,89,97,106],
[113,121,112,0,105,100,113,109],
[107,113,111,105,0,115,109,111],
[114,129,121,110,95,0,96,124],
[98,113,113,97,101,114,0,104],
[120,122,104,101,99,86,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,96,97,96,88,111,94],
[110,0,90,112,111,101,122,97],
[114,120,0,113,124,101,129,111],
[113,98,97,0,108,90,113,95],
[114,99,86,102,0,95,107,91],
[122,109,109,120,115,0,131,95],
[99,88,81,97,103,79,0,100],
[116,113,99,115,119,115,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,101,106,109,91,86,98],
[114,0,103,97,119,107,92,96],
[109,107,0,98,100,93,93,93],
[104,113,112,0,107,97,110,110],
[101,91,110,103,0,87,83,102],
[119,103,117,113,123,0,99,110],
[124,118,117,100,127,111,0,115],
[112,114,117,100,108,100,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,109,119,97,92,103],
[102,0,105,111,108,103,95,103],
[111,105,0,113,116,109,108,108],
[101,99,97,0,101,108,99,107],
[91,102,94,109,0,98,95,91],
[113,107,101,102,112,0,101,104],
[118,115,102,111,115,109,0,115],
[107,107,102,103,119,106,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,121,109,96,95,97,109],
[90,0,90,90,109,74,111,78],
[89,120,0,93,83,89,114,92],
[101,120,117,0,110,83,129,124],
[114,101,127,100,0,87,115,97],
[115,136,121,127,123,0,129,101],
[113,99,96,81,95,81,0,82],
[101,132,118,86,113,109,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,103,115,105,98,109,109],
[93,0,95,91,112,91,115,107],
[107,115,0,111,100,107,113,106],
[95,119,99,0,103,101,112,98],
[105,98,110,107,0,101,104,96],
[112,119,103,109,109,0,100,94],
[101,95,97,98,106,110,0,106],
[101,103,104,112,114,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,85,114,101,84,91,91],
[109,0,107,106,112,102,104,92],
[125,103,0,120,116,105,110,113],
[96,104,90,0,101,88,95,95],
[109,98,94,109,0,77,96,84],
[126,108,105,122,133,0,118,103],
[119,106,100,115,114,92,0,100],
[119,118,97,115,126,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,107,112,97,111,102],
[99,0,109,102,118,98,108,103],
[98,101,0,102,104,96,106,108],
[103,108,108,0,108,106,116,111],
[98,92,106,102,0,92,98,99],
[113,112,114,104,118,0,109,111],
[99,102,104,94,112,101,0,103],
[108,107,102,99,111,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,91,96,96,79,83,91],
[135,0,105,113,111,123,116,103],
[119,105,0,102,101,109,89,90],
[114,97,108,0,101,96,100,109],
[114,99,109,109,0,104,98,102],
[131,87,101,114,106,0,98,105],
[127,94,121,110,112,112,0,119],
[119,107,120,101,108,105,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,96,109,102,106,117],
[109,0,100,109,101,105,113,114],
[109,110,0,112,103,119,113,114],
[114,101,98,0,112,103,106,119],
[101,109,107,98,0,100,101,115],
[108,105,91,107,110,0,108,121],
[104,97,97,104,109,102,0,112],
[93,96,96,91,95,89,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,119,105,113,104,114,123],
[107,0,117,82,107,119,121,114],
[91,93,0,79,89,104,94,91],
[105,128,131,0,118,113,133,124],
[97,103,121,92,0,107,117,105],
[106,91,106,97,103,0,106,99],
[96,89,116,77,93,104,0,95],
[87,96,119,86,105,111,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,106,86,108,104,94,90],
[130,0,120,109,121,101,120,112],
[104,90,0,89,101,94,110,81],
[124,101,121,0,115,113,116,117],
[102,89,109,95,0,97,106,107],
[106,109,116,97,113,0,113,116],
[116,90,100,94,104,97,0,94],
[120,98,129,93,103,94,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,118,107,104,103,101],
[105,0,110,112,107,123,115,112],
[104,100,0,111,100,107,112,98],
[92,98,99,0,103,100,95,92],
[103,103,110,107,0,110,112,98],
[106,87,103,110,100,0,113,98],
[107,95,98,115,98,97,0,99],
[109,98,112,118,112,112,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,105,117,126,115,106,138],
[85,0,102,96,117,117,103,108],
[105,108,0,95,115,109,97,105],
[93,114,115,0,125,102,93,119],
[84,93,95,85,0,99,103,112],
[95,93,101,108,111,0,102,122],
[104,107,113,117,107,108,0,105],
[72,102,105,91,98,88,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,96,103,115,108,100,115],
[118,0,110,110,101,107,114,123],
[114,100,0,112,100,103,108,121],
[107,100,98,0,116,116,98,97],
[95,109,110,94,0,108,91,126],
[102,103,107,94,102,0,97,101],
[110,96,102,112,119,113,0,122],
[95,87,89,113,84,109,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,100,92,96,104,84,99],
[114,0,101,88,95,108,100,106],
[110,109,0,108,100,124,99,115],
[118,122,102,0,96,118,109,110],
[114,115,110,114,0,118,100,103],
[106,102,86,92,92,0,93,113],
[126,110,111,101,110,117,0,108],
[111,104,95,100,107,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,106,115,105,117,101,103],
[90,0,92,87,103,97,84,105],
[104,118,0,102,107,99,101,111],
[95,123,108,0,116,116,106,98],
[105,107,103,94,0,112,103,101],
[93,113,111,94,98,0,98,112],
[109,126,109,104,107,112,0,101],
[107,105,99,112,109,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,97,121,116,96,105,109],
[100,0,85,114,98,86,101,79],
[113,125,0,109,119,103,110,115],
[89,96,101,0,84,82,107,92],
[94,112,91,126,0,88,93,100],
[114,124,107,128,122,0,114,100],
[105,109,100,103,117,96,0,106],
[101,131,95,118,110,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,97,103,107,109,115,106],
[117,0,103,108,107,104,102,105],
[113,107,0,102,107,106,107,105],
[107,102,108,0,110,117,119,108],
[103,103,103,100,0,104,110,97],
[101,106,104,93,106,0,116,110],
[95,108,103,91,100,94,0,99],
[104,105,105,102,113,100,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,130,115,131,113,103,116],
[95,0,114,113,113,111,97,105],
[80,96,0,103,96,103,88,102],
[95,97,107,0,113,101,95,95],
[79,97,114,97,0,107,103,101],
[97,99,107,109,103,0,107,97],
[107,113,122,115,107,103,0,108],
[94,105,108,115,109,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,107,94,100,85,101],
[114,0,113,109,113,113,104,113],
[104,97,0,103,99,104,92,108],
[103,101,107,0,113,107,103,107],
[116,97,111,97,0,106,99,108],
[110,97,106,103,104,0,108,110],
[125,106,118,107,111,102,0,120],
[109,97,102,103,102,100,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,115,120,107,114,123,104],
[102,0,110,122,96,103,112,87],
[95,100,0,113,86,93,92,89],
[90,88,97,0,95,93,107,90],
[103,114,124,115,0,107,123,108],
[96,107,117,117,103,0,121,101],
[87,98,118,103,87,89,0,90],
[106,123,121,120,102,109,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,116,96,92,109,101,113],
[111,0,113,101,101,118,102,100],
[94,97,0,103,106,116,112,105],
[114,109,107,0,104,126,115,113],
[118,109,104,106,0,116,113,118],
[101,92,94,84,94,0,93,99],
[109,108,98,95,97,117,0,100],
[97,110,105,97,92,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,115,102,105,105,113],
[103,0,116,108,86,100,106,114],
[102,94,0,99,89,107,109,104],
[95,102,111,0,83,103,103,100],
[108,124,121,127,0,103,117,125],
[105,110,103,107,107,0,106,112],
[105,104,101,107,93,104,0,107],
[97,96,106,110,85,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,210,0,210,0,210,210],
[105,0,210,105,105,105,210,105],
[0,0,0,0,105,0,105,105],
[210,105,210,0,210,0,210,210],
[0,105,105,0,0,0,105,210],
[210,105,210,210,210,0,210,210],
[0,0,105,0,105,0,0,105],
[0,105,105,0,0,0,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,119,101,92,99,116,114],
[96,0,99,83,95,89,118,111],
[91,111,0,93,106,102,116,102],
[109,127,117,0,104,107,111,112],
[118,115,104,106,0,115,116,105],
[111,121,108,103,95,0,134,110],
[94,92,94,99,94,76,0,112],
[96,99,108,98,105,100,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,101,113,106,112,113,114],
[97,0,112,101,98,100,96,102],
[109,98,0,122,113,111,113,120],
[97,109,88,0,93,90,100,110],
[104,112,97,117,0,113,97,114],
[98,110,99,120,97,0,99,109],
[97,114,97,110,113,111,0,119],
[96,108,90,100,96,101,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,79,149,106,120,147,96],
[115,0,76,118,101,64,146,107],
[131,134,0,104,106,122,160,137],
[61,92,106,0,79,78,93,96],
[104,109,104,131,0,105,146,123],
[90,146,88,132,105,0,145,94],
[63,64,50,117,64,65,0,81],
[114,103,73,114,87,116,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,116,120,95,104,107,103],
[100,0,113,95,86,87,93,90],
[94,97,0,101,84,111,98,94],
[90,115,109,0,105,103,83,89],
[115,124,126,105,0,102,104,101],
[106,123,99,107,108,0,110,118],
[103,117,112,127,106,100,0,117],
[107,120,116,121,109,92,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,118,103,106,108,104],
[109,0,109,120,104,102,103,125],
[107,101,0,105,107,109,104,110],
[92,90,105,0,99,104,96,110],
[107,106,103,111,0,108,105,111],
[104,108,101,106,102,0,94,113],
[102,107,106,114,105,116,0,108],
[106,85,100,100,99,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 210, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_8_210.csv", index=False, header=False)
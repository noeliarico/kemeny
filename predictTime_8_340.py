
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,175,175,157,186,159,190,180],
[165,0,170,142,185,137,171,176],
[165,170,0,170,210,180,190,179],
[183,198,170,0,220,187,207,200],
[154,155,130,120,0,143,167,162],
[181,203,160,153,197,0,197,184],
[150,169,150,133,173,143,0,171],
[160,164,161,140,178,156,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,173,161,170,174,179,156],
[197,0,182,187,178,169,191,188],
[167,158,0,166,154,161,173,160],
[179,153,174,0,172,173,182,169],
[170,162,186,168,0,170,182,154],
[166,171,179,167,170,0,175,170],
[161,149,167,158,158,165,0,162],
[184,152,180,171,186,170,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,182,123,156,160,116,212],
[195,0,203,175,192,124,153,234],
[158,137,0,95,165,136,134,157],
[217,165,245,0,189,190,172,232],
[184,148,175,151,0,168,144,169],
[180,216,204,150,172,0,165,208],
[224,187,206,168,196,175,0,244],
[128,106,183,108,171,132,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,148,169,160,151,178,176],
[161,0,169,167,165,156,161,198],
[192,171,0,176,192,148,174,193],
[171,173,164,0,210,195,184,219],
[180,175,148,130,0,167,157,168],
[189,184,192,145,173,0,175,164],
[162,179,166,156,183,165,0,198],
[164,142,147,121,172,176,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,165,185,178,167,163,171],
[180,0,175,181,158,179,182,192],
[175,165,0,200,174,158,151,174],
[155,159,140,0,147,168,139,146],
[162,182,166,193,0,162,157,174],
[173,161,182,172,178,0,182,178],
[177,158,189,201,183,158,0,167],
[169,148,166,194,166,162,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,173,169,163,168,176,155],
[179,0,181,173,174,175,182,166],
[167,159,0,171,141,143,175,159],
[171,167,169,0,149,173,165,166],
[177,166,199,191,0,181,172,159],
[172,165,197,167,159,0,174,170],
[164,158,165,175,168,166,0,172],
[185,174,181,174,181,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,165,147,151,152,158,170],
[164,0,159,153,143,161,149,173],
[175,181,0,152,146,152,143,169],
[193,187,188,0,172,188,179,163],
[189,197,194,168,0,186,185,177],
[188,179,188,152,154,0,182,173],
[182,191,197,161,155,158,0,180],
[170,167,171,177,163,167,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,203,236,232,170,197,203],
[124,0,117,153,223,134,210,147],
[137,223,0,233,180,156,212,157],
[104,187,107,0,183,153,201,138],
[108,117,160,157,0,99,176,153],
[170,206,184,187,241,0,161,156],
[143,130,128,139,164,179,0,138],
[137,193,183,202,187,184,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,230,205,185,224,184,166],
[138,0,173,202,139,176,161,175],
[110,167,0,192,181,208,160,141],
[135,138,148,0,162,173,164,135],
[155,201,159,178,0,176,127,155],
[116,164,132,167,164,0,132,115],
[156,179,180,176,213,208,0,164],
[174,165,199,205,185,225,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,172,157,171,170,177,155],
[183,0,156,184,157,131,175,156],
[168,184,0,182,198,166,181,129],
[183,156,158,0,158,172,209,135],
[169,183,142,182,0,157,185,154],
[170,209,174,168,183,0,185,166],
[163,165,159,131,155,155,0,179],
[185,184,211,205,186,174,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,178,164,188,178,174,181],
[167,0,165,164,171,166,174,179],
[162,175,0,171,182,174,166,170],
[176,176,169,0,183,171,162,179],
[152,169,158,157,0,168,141,164],
[162,174,166,169,172,0,176,172],
[166,166,174,178,199,164,0,166],
[159,161,170,161,176,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,174,148,173,152,166,166],
[198,0,166,153,178,156,185,188],
[166,174,0,157,172,130,158,161],
[192,187,183,0,175,157,169,179],
[167,162,168,165,0,156,171,158],
[188,184,210,183,184,0,169,187],
[174,155,182,171,169,171,0,204],
[174,152,179,161,182,153,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,177,177,181,189,160,175],
[168,0,191,178,193,192,175,197],
[163,149,0,155,176,176,158,151],
[163,162,185,0,180,179,180,177],
[159,147,164,160,0,177,148,169],
[151,148,164,161,163,0,154,171],
[180,165,182,160,192,186,0,175],
[165,143,189,163,171,169,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,166,180,168,174,176,164],
[169,0,157,159,161,155,165,157],
[174,183,0,177,180,167,169,183],
[160,181,163,0,169,174,172,164],
[172,179,160,171,0,169,172,165],
[166,185,173,166,171,0,163,167],
[164,175,171,168,168,177,0,164],
[176,183,157,176,175,173,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,180,185,190,180,195],
[169,0,179,173,183,182,164,181],
[171,161,0,169,168,165,155,178],
[160,167,171,0,180,175,164,177],
[155,157,172,160,0,165,150,177],
[150,158,175,165,175,0,165,183],
[160,176,185,176,190,175,0,179],
[145,159,162,163,163,157,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,176,175,169,187,173,175],
[163,0,184,173,165,178,154,170],
[164,156,0,169,156,171,162,158],
[165,167,171,0,165,175,172,162],
[171,175,184,175,0,184,170,180],
[153,162,169,165,156,0,172,154],
[167,186,178,168,170,168,0,166],
[165,170,182,178,160,186,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,164,155,172,149,154,160],
[186,0,181,172,173,159,181,173],
[176,159,0,159,162,154,157,157],
[185,168,181,0,180,162,156,166],
[168,167,178,160,0,154,183,162],
[191,181,186,178,186,0,168,174],
[186,159,183,184,157,172,0,173],
[180,167,183,174,178,166,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,164,161,174,182,149,171],
[163,0,158,172,177,166,166,168],
[176,182,0,183,181,170,170,178],
[179,168,157,0,151,165,154,139],
[166,163,159,189,0,151,140,165],
[158,174,170,175,189,0,169,170],
[191,174,170,186,200,171,0,177],
[169,172,162,201,175,170,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,179,158,172,177,167,174],
[170,0,173,157,169,167,173,171],
[161,167,0,145,151,164,156,167],
[182,183,195,0,170,179,178,183],
[168,171,189,170,0,171,175,185],
[163,173,176,161,169,0,162,165],
[173,167,184,162,165,178,0,175],
[166,169,173,157,155,175,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,179,164,180,177,177,177],
[160,0,190,175,182,201,186,160],
[161,150,0,142,137,172,156,138],
[176,165,198,0,189,212,193,169],
[160,158,203,151,0,194,180,149],
[163,139,168,128,146,0,157,135],
[163,154,184,147,160,183,0,151],
[163,180,202,171,191,205,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,176,161,164,170,180,171],
[161,0,166,165,159,167,174,161],
[164,174,0,170,168,169,178,171],
[179,175,170,0,162,175,171,164],
[176,181,172,178,0,170,177,173],
[170,173,171,165,170,0,178,163],
[160,166,162,169,163,162,0,152],
[169,179,169,176,167,177,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,163,170,187,149,159,205],
[156,0,180,182,153,179,156,183],
[177,160,0,179,190,175,151,211],
[170,158,161,0,171,152,141,181],
[153,187,150,169,0,129,160,159],
[191,161,165,188,211,0,191,198],
[181,184,189,199,180,149,0,187],
[135,157,129,159,181,142,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,157,161,142,151,165,153],
[201,0,188,189,181,161,178,168],
[183,152,0,170,156,163,152,161],
[179,151,170,0,157,161,150,159],
[198,159,184,183,0,162,169,176],
[189,179,177,179,178,0,178,169],
[175,162,188,190,171,162,0,176],
[187,172,179,181,164,171,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,152,175,168,158,189,171],
[182,0,190,193,183,199,182,168],
[188,150,0,180,156,185,182,164],
[165,147,160,0,162,167,162,152],
[172,157,184,178,0,186,183,170],
[182,141,155,173,154,0,186,168],
[151,158,158,178,157,154,0,144],
[169,172,176,188,170,172,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,142,170,159,171,154,162],
[158,0,178,197,170,205,166,160],
[198,162,0,194,173,182,178,185],
[170,143,146,0,167,167,152,144],
[181,170,167,173,0,198,178,154],
[169,135,158,173,142,0,139,123],
[186,174,162,188,162,201,0,162],
[178,180,155,196,186,217,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,173,161,172,167,168,166],
[171,0,175,173,179,167,172,169],
[167,165,0,173,170,170,166,157],
[179,167,167,0,162,164,178,172],
[168,161,170,178,0,164,178,163],
[173,173,170,176,176,0,168,164],
[172,168,174,162,162,172,0,158],
[174,171,183,168,177,176,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,159,158,150,148,150,158],
[167,0,159,161,159,161,158,170],
[181,181,0,165,174,174,172,179],
[182,179,175,0,165,183,171,176],
[190,181,166,175,0,186,179,174],
[192,179,166,157,154,0,156,173],
[190,182,168,169,161,184,0,185],
[182,170,161,164,166,167,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,170,201,164,180,181,197],
[153,0,158,174,168,168,176,194],
[170,182,0,173,181,199,180,214],
[139,166,167,0,158,172,164,167],
[176,172,159,182,0,187,146,187],
[160,172,141,168,153,0,160,183],
[159,164,160,176,194,180,0,178],
[143,146,126,173,153,157,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,174,180,188,188,162,182],
[174,0,165,161,171,184,175,168],
[166,175,0,170,182,168,169,173],
[160,179,170,0,175,173,163,177],
[152,169,158,165,0,164,148,164],
[152,156,172,167,176,0,155,168],
[178,165,171,177,192,185,0,177],
[158,172,167,163,176,172,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,161,166,166,161,171,179],
[172,0,182,168,172,191,176,181],
[179,158,0,164,166,162,165,172],
[174,172,176,0,166,162,185,191],
[174,168,174,174,0,166,178,192],
[179,149,178,178,174,0,176,185],
[169,164,175,155,162,164,0,184],
[161,159,168,149,148,155,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,164,172,186,189,170,183],
[175,0,172,162,155,158,172,172],
[176,168,0,185,170,172,167,178],
[168,178,155,0,179,182,155,189],
[154,185,170,161,0,179,170,170],
[151,182,168,158,161,0,158,167],
[170,168,173,185,170,182,0,209],
[157,168,162,151,170,173,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,192,165,186,182,159,181],
[174,0,168,166,180,182,184,187],
[148,172,0,167,181,166,176,172],
[175,174,173,0,167,167,171,176],
[154,160,159,173,0,178,165,167],
[158,158,174,173,162,0,172,182],
[181,156,164,169,175,168,0,157],
[159,153,168,164,173,158,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,149,146,164,149,157,140],
[200,0,164,173,150,176,194,167],
[191,176,0,158,187,186,162,142],
[194,167,182,0,169,175,165,168],
[176,190,153,171,0,184,166,182],
[191,164,154,165,156,0,175,151],
[183,146,178,175,174,165,0,153],
[200,173,198,172,158,189,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,178,179,145,153,146,165],
[181,0,163,174,134,148,152,173],
[162,177,0,158,131,159,141,169],
[161,166,182,0,138,152,153,162],
[195,206,209,202,0,163,173,184],
[187,192,181,188,177,0,164,185],
[194,188,199,187,167,176,0,181],
[175,167,171,178,156,155,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,165,168,164,161,166,169],
[190,0,169,168,177,177,186,183],
[175,171,0,165,176,173,170,174],
[172,172,175,0,164,168,172,163],
[176,163,164,176,0,172,162,181],
[179,163,167,172,168,0,166,170],
[174,154,170,168,178,174,0,169],
[171,157,166,177,159,170,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,163,178,155,179,177,165],
[169,0,176,177,175,176,162,178],
[177,164,0,175,165,179,155,162],
[162,163,165,0,168,189,177,183],
[185,165,175,172,0,174,158,178],
[161,164,161,151,166,0,134,149],
[163,178,185,163,182,206,0,183],
[175,162,178,157,162,191,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,143,179,154,163,170,172],
[198,0,174,192,160,177,192,177],
[197,166,0,199,174,170,157,182],
[161,148,141,0,167,136,176,171],
[186,180,166,173,0,180,188,186],
[177,163,170,204,160,0,185,183],
[170,148,183,164,152,155,0,173],
[168,163,158,169,154,157,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,185,166,159,165,161,179],
[162,0,140,161,166,175,168,165],
[155,200,0,182,173,172,157,194],
[174,179,158,0,160,180,161,173],
[181,174,167,180,0,191,164,177],
[175,165,168,160,149,0,189,165],
[179,172,183,179,176,151,0,213],
[161,175,146,167,163,175,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,177,184,182,165,179,191],
[169,0,182,182,172,164,167,178],
[163,158,0,165,160,170,160,182],
[156,158,175,0,176,168,175,181],
[158,168,180,164,0,158,158,180],
[175,176,170,172,182,0,160,183],
[161,173,180,165,182,180,0,191],
[149,162,158,159,160,157,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,212,188,154,174,198,187],
[154,0,205,189,182,177,187,201],
[128,135,0,151,131,140,167,139],
[152,151,189,0,151,140,148,186],
[186,158,209,189,0,162,160,177],
[166,163,200,200,178,0,181,205],
[142,153,173,192,180,159,0,192],
[153,139,201,154,163,135,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,174,169,178,179,183,178],
[156,0,168,166,172,183,167,179],
[166,172,0,175,173,177,172,185],
[171,174,165,0,175,176,163,181],
[162,168,167,165,0,176,160,164],
[161,157,163,164,164,0,162,172],
[157,173,168,177,180,178,0,180],
[162,161,155,159,176,168,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,189,164,164,172,156,161],
[199,0,174,181,176,175,170,166],
[151,166,0,168,176,143,151,161],
[176,159,172,0,165,157,143,152],
[176,164,164,175,0,172,153,165],
[168,165,197,183,168,0,150,157],
[184,170,189,197,187,190,0,177],
[179,174,179,188,175,183,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,171,172,160,173,161,178],
[155,0,157,154,153,171,162,162],
[169,183,0,180,177,189,178,182],
[168,186,160,0,156,186,164,181],
[180,187,163,184,0,194,169,166],
[167,169,151,154,146,0,159,153],
[179,178,162,176,171,181,0,176],
[162,178,158,159,174,187,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,158,180,154,182,171,169],
[172,0,172,192,156,184,163,163],
[182,168,0,195,179,186,145,173],
[160,148,145,0,174,150,151,158],
[186,184,161,166,0,170,143,171],
[158,156,154,190,170,0,158,149],
[169,177,195,189,197,182,0,180],
[171,177,167,182,169,191,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,184,168,196,170,167,186],
[164,0,180,161,189,161,156,192],
[156,160,0,150,182,152,158,168],
[172,179,190,0,199,165,166,194],
[144,151,158,141,0,136,144,135],
[170,179,188,175,204,0,170,162],
[173,184,182,174,196,170,0,186],
[154,148,172,146,205,178,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,128,148,150,146,143,150],
[201,0,155,171,151,183,190,178],
[212,185,0,165,181,196,192,180],
[192,169,175,0,144,169,181,161],
[190,189,159,196,0,193,180,186],
[194,157,144,171,147,0,185,177],
[197,150,148,159,160,155,0,141],
[190,162,160,179,154,163,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,183,202,194,194,148,195],
[161,0,169,156,168,191,153,175],
[157,171,0,169,177,195,147,149],
[138,184,171,0,187,167,172,179],
[146,172,163,153,0,186,117,167],
[146,149,145,173,154,0,117,151],
[192,187,193,168,223,223,0,180],
[145,165,191,161,173,189,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,147,137,129,193,133,138],
[166,0,123,138,123,151,125,152],
[193,217,0,160,187,208,174,178],
[203,202,180,0,161,177,138,164],
[211,217,153,179,0,167,171,172],
[147,189,132,163,173,0,141,143],
[207,215,166,202,169,199,0,176],
[202,188,162,176,168,197,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,173,193,167,174,150,170],
[171,0,164,197,161,184,165,177],
[167,176,0,185,160,165,155,156],
[147,143,155,0,138,164,137,157],
[173,179,180,202,0,179,170,184],
[166,156,175,176,161,0,153,178],
[190,175,185,203,170,187,0,183],
[170,163,184,183,156,162,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,171,177,163,180,173,170],
[163,0,152,165,160,162,174,168],
[169,188,0,179,163,169,182,175],
[163,175,161,0,173,176,172,172],
[177,180,177,167,0,169,179,179],
[160,178,171,164,171,0,179,177],
[167,166,158,168,161,161,0,170],
[170,172,165,168,161,163,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,161,170,158,201,171,169],
[177,0,167,177,156,184,156,169],
[179,173,0,170,157,170,156,161],
[170,163,170,0,154,184,153,162],
[182,184,183,186,0,205,179,170],
[139,156,170,156,135,0,161,152],
[169,184,184,187,161,179,0,193],
[171,171,179,178,170,188,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,139,185,146,183,160,155],
[239,0,150,253,204,173,170,155],
[201,190,0,217,199,206,142,145],
[155,87,123,0,163,167,183,173],
[194,136,141,177,0,174,155,145],
[157,167,134,173,166,0,165,124],
[180,170,198,157,185,175,0,117],
[185,185,195,167,195,216,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,206,181,181,197,167,178],
[193,0,192,165,187,188,170,187],
[134,148,0,130,179,179,140,172],
[159,175,210,0,200,187,190,175],
[159,153,161,140,0,154,153,158],
[143,152,161,153,186,0,161,185],
[173,170,200,150,187,179,0,192],
[162,153,168,165,182,155,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,162,164,174,184,157,164],
[177,0,178,165,168,179,168,166],
[178,162,0,170,158,173,170,170],
[176,175,170,0,173,187,178,175],
[166,172,182,167,0,171,159,169],
[156,161,167,153,169,0,159,153],
[183,172,170,162,181,181,0,179],
[176,174,170,165,171,187,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,183,170,159,167,169,155],
[150,0,182,175,156,169,160,165],
[157,158,0,163,163,162,141,144],
[170,165,177,0,171,168,164,158],
[181,184,177,169,0,186,179,157],
[173,171,178,172,154,0,169,174],
[171,180,199,176,161,171,0,174],
[185,175,196,182,183,166,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,165,155,175,161,165,173],
[169,0,160,151,170,149,158,165],
[175,180,0,169,165,160,153,170],
[185,189,171,0,184,173,170,175],
[165,170,175,156,0,158,160,159],
[179,191,180,167,182,0,161,166],
[175,182,187,170,180,179,0,184],
[167,175,170,165,181,174,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,150,149,216,157,139,166],
[151,0,133,113,198,130,143,174],
[190,207,0,195,240,174,158,223],
[191,227,145,0,214,171,155,196],
[124,142,100,126,0,112,109,126],
[183,210,166,169,228,0,194,213],
[201,197,182,185,231,146,0,195],
[174,166,117,144,214,127,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,166,176,174,166,157,167],
[169,0,178,200,210,174,198,201],
[174,162,0,216,203,176,175,185],
[164,140,124,0,178,154,166,179],
[166,130,137,162,0,131,158,165],
[174,166,164,186,209,0,203,195],
[183,142,165,174,182,137,0,190],
[173,139,155,161,175,145,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,192,82,202,154,185,158],
[228,0,282,205,227,282,170,160],
[148,58,0,131,142,135,127,138],
[258,135,209,0,232,224,235,230],
[138,113,198,108,0,181,146,82],
[186,58,205,116,159,0,135,110],
[155,170,213,105,194,205,0,139],
[182,180,202,110,258,230,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,170,194,207,182,169,200],
[147,0,179,139,152,156,150,169],
[170,161,0,138,157,151,142,167],
[146,201,202,0,200,188,181,204],
[133,188,183,140,0,182,159,195],
[158,184,189,152,158,0,152,207],
[171,190,198,159,181,188,0,187],
[140,171,173,136,145,133,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,170,169,166,179,188,196],
[169,0,159,171,166,165,190,171],
[170,181,0,170,176,191,199,198],
[171,169,170,0,175,188,193,207],
[174,174,164,165,0,192,185,189],
[161,175,149,152,148,0,185,180],
[152,150,141,147,155,155,0,171],
[144,169,142,133,151,160,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,172,175,178,174,166,172],
[157,0,171,173,171,163,162,168],
[168,169,0,177,167,169,174,159],
[165,167,163,0,173,177,157,172],
[162,169,173,167,0,181,178,174],
[166,177,171,163,159,0,161,160],
[174,178,166,183,162,179,0,177],
[168,172,181,168,166,180,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,169,167,174,175,185,176],
[197,0,201,196,189,176,201,163],
[171,139,0,176,201,176,162,170],
[173,144,164,0,183,175,187,172],
[166,151,139,157,0,179,165,186],
[165,164,164,165,161,0,185,172],
[155,139,178,153,175,155,0,175],
[164,177,170,168,154,168,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,175,161,170,168,167,166],
[179,0,177,157,144,183,171,168],
[165,163,0,152,160,176,152,161],
[179,183,188,0,170,191,167,173],
[170,196,180,170,0,196,173,174],
[172,157,164,149,144,0,150,166],
[173,169,188,173,167,190,0,186],
[174,172,179,167,166,174,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,126,113,115,126,94,95],
[220,0,171,181,171,160,173,171],
[214,169,0,113,115,190,64,137],
[227,159,227,0,227,227,229,154],
[225,169,225,113,0,169,200,116],
[214,180,150,113,171,0,206,95],
[246,167,276,111,140,134,0,106],
[245,169,203,186,224,245,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,171,206,184,161,185,185],
[170,0,187,188,185,169,160,174],
[169,153,0,162,168,174,157,161],
[134,152,178,0,147,148,152,150],
[156,155,172,193,0,147,153,175],
[179,171,166,192,193,0,158,176],
[155,180,183,188,187,182,0,161],
[155,166,179,190,165,164,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,156,200,157,154,179,171],
[175,0,176,195,164,164,179,176],
[184,164,0,195,154,175,176,172],
[140,145,145,0,141,120,150,141],
[183,176,186,199,0,157,170,172],
[186,176,165,220,183,0,173,181],
[161,161,164,190,170,167,0,177],
[169,164,168,199,168,159,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,140,75,154,135,99,130],
[213,0,169,157,174,172,171,187],
[200,171,0,150,135,156,165,147],
[265,183,190,0,159,133,110,160],
[186,166,205,181,0,151,159,159],
[205,168,184,207,189,0,155,167],
[241,169,175,230,181,185,0,204],
[210,153,193,180,181,173,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,162,225,190,176,158,204],
[161,0,167,184,179,176,171,183],
[178,173,0,194,177,164,151,195],
[115,156,146,0,136,152,122,172],
[150,161,163,204,0,140,150,199],
[164,164,176,188,200,0,162,190],
[182,169,189,218,190,178,0,201],
[136,157,145,168,141,150,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,168,182,194,197,192,176],
[134,0,172,151,171,189,188,168],
[172,168,0,159,176,205,180,176],
[158,189,181,0,171,187,165,168],
[146,169,164,169,0,171,190,152],
[143,151,135,153,169,0,175,159],
[148,152,160,175,150,165,0,155],
[164,172,164,172,188,181,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,147,171,150,147,146,158],
[182,0,158,177,177,158,162,175],
[193,182,0,185,183,168,184,184],
[169,163,155,0,161,157,152,161],
[190,163,157,179,0,160,159,178],
[193,182,172,183,180,0,170,186],
[194,178,156,188,181,170,0,178],
[182,165,156,179,162,154,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,171,168,165,172,173,173],
[170,0,180,179,164,169,157,165],
[169,160,0,167,171,160,160,168],
[172,161,173,0,162,162,173,169],
[175,176,169,178,0,171,178,183],
[168,171,180,178,169,0,172,179],
[167,183,180,167,162,168,0,172],
[167,175,172,171,157,161,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,159,172,152,163,156,164],
[158,0,160,165,147,166,154,153],
[181,180,0,170,160,168,164,164],
[168,175,170,0,155,166,170,159],
[188,193,180,185,0,177,170,175],
[177,174,172,174,163,0,170,169],
[184,186,176,170,170,170,0,177],
[176,187,176,181,165,171,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,159,163,147,164,174,160],
[201,0,200,187,175,177,185,166],
[181,140,0,175,155,170,190,175],
[177,153,165,0,164,172,166,172],
[193,165,185,176,0,159,196,184],
[176,163,170,168,181,0,177,181],
[166,155,150,174,144,163,0,165],
[180,174,165,168,156,159,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,152,190,178,176,174,188],
[178,0,171,189,176,174,160,184],
[188,169,0,178,179,178,172,176],
[150,151,162,0,171,152,168,180],
[162,164,161,169,0,154,172,183],
[164,166,162,188,186,0,164,178],
[166,180,168,172,168,176,0,181],
[152,156,164,160,157,162,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,185,213,185,203,189,146],
[167,0,212,200,201,179,180,174],
[155,128,0,193,192,188,173,164],
[127,140,147,0,171,171,131,135],
[155,139,148,169,0,183,162,131],
[137,161,152,169,157,0,151,131],
[151,160,167,209,178,189,0,147],
[194,166,176,205,209,209,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,181,170,180,180,170,174],
[170,0,172,168,173,160,166,168],
[159,168,0,152,157,157,160,171],
[170,172,188,0,166,182,168,189],
[160,167,183,174,0,164,164,170],
[160,180,183,158,176,0,167,165],
[170,174,180,172,176,173,0,170],
[166,172,169,151,170,175,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,81,57,196,116,23,115],
[303,0,166,88,182,150,149,207],
[259,174,0,57,138,72,172,208],
[283,252,283,0,139,173,173,252],
[144,158,202,201,0,123,65,202],
[224,190,268,167,217,0,145,245],
[317,191,168,167,275,195,0,194],
[225,133,132,88,138,95,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,183,180,183,169,167,161],
[179,0,175,170,185,151,165,159],
[157,165,0,159,178,162,179,151],
[160,170,181,0,183,174,163,165],
[157,155,162,157,0,155,157,163],
[171,189,178,166,185,0,177,178],
[173,175,161,177,183,163,0,182],
[179,181,189,175,177,162,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,179,176,173,192,160,183],
[159,0,185,165,171,175,167,168],
[161,155,0,139,166,175,153,161],
[164,175,201,0,171,194,188,172],
[167,169,174,169,0,164,167,156],
[148,165,165,146,176,0,153,165],
[180,173,187,152,173,187,0,180],
[157,172,179,168,184,175,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,172,177,170,161,201,165],
[158,0,152,193,162,168,191,177],
[168,188,0,198,174,170,196,157],
[163,147,142,0,181,151,191,149],
[170,178,166,159,0,141,187,148],
[179,172,170,189,199,0,209,177],
[139,149,144,149,153,131,0,149],
[175,163,183,191,192,163,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,172,166,190,173,190,171],
[171,0,166,165,187,170,174,159],
[168,174,0,160,184,181,174,163],
[174,175,180,0,187,177,177,164],
[150,153,156,153,0,167,155,157],
[167,170,159,163,173,0,176,162],
[150,166,166,163,185,164,0,162],
[169,181,177,176,183,178,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,165,176,165,168,163,177],
[152,0,174,163,148,151,155,183],
[175,166,0,152,160,161,158,171],
[164,177,188,0,162,176,162,194],
[175,192,180,178,0,176,168,187],
[172,189,179,164,164,0,173,192],
[177,185,182,178,172,167,0,179],
[163,157,169,146,153,148,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,187,176,187,149,160,167],
[164,0,185,143,176,139,170,134],
[153,155,0,153,165,170,162,173],
[164,197,187,0,185,148,184,162],
[153,164,175,155,0,139,173,156],
[191,201,170,192,201,0,193,184],
[180,170,178,156,167,147,0,184],
[173,206,167,178,184,156,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,150,160,189,174,155,154],
[182,0,191,182,207,195,151,177],
[190,149,0,167,194,181,142,155],
[180,158,173,0,205,185,178,180],
[151,133,146,135,0,148,143,151],
[166,145,159,155,192,0,156,158],
[185,189,198,162,197,184,0,195],
[186,163,185,160,189,182,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,177,160,185,185,163,166],
[176,0,170,166,170,181,172,165],
[163,170,0,150,164,169,168,163],
[180,174,190,0,171,182,167,161],
[155,170,176,169,0,167,176,184],
[155,159,171,158,173,0,161,158],
[177,168,172,173,164,179,0,162],
[174,175,177,179,156,182,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,178,177,175,172,169,144],
[172,0,162,184,176,170,171,157],
[162,178,0,189,170,169,161,183],
[163,156,151,0,185,181,156,172],
[165,164,170,155,0,155,155,169],
[168,170,171,159,185,0,162,155],
[171,169,179,184,185,178,0,171],
[196,183,157,168,171,185,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,174,185,182,174,161,166],
[176,0,182,187,174,185,163,168],
[166,158,0,178,177,176,166,178],
[155,153,162,0,163,145,155,151],
[158,166,163,177,0,173,144,157],
[166,155,164,195,167,0,152,164],
[179,177,174,185,196,188,0,168],
[174,172,162,189,183,176,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,194,206,221,154,206,170],
[152,0,181,146,178,125,139,187],
[146,159,0,123,127,100,147,112],
[134,194,217,0,198,171,181,167],
[119,162,213,142,0,129,157,150],
[186,215,240,169,211,0,183,176],
[134,201,193,159,183,157,0,138],
[170,153,228,173,190,164,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,173,183,158,162,215,193],
[157,0,170,164,172,176,194,157],
[167,170,0,171,156,175,206,191],
[157,176,169,0,154,165,212,198],
[182,168,184,186,0,197,200,204],
[178,164,165,175,143,0,203,184],
[125,146,134,128,140,137,0,169],
[147,183,149,142,136,156,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,175,165,175,161,170,170],
[146,0,164,159,177,159,162,167],
[165,176,0,167,179,161,171,167],
[175,181,173,0,191,167,175,176],
[165,163,161,149,0,149,161,151],
[179,181,179,173,191,0,167,175],
[170,178,169,165,179,173,0,172],
[170,173,173,164,189,165,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,173,161,175,178,165,181],
[170,0,178,163,170,177,169,180],
[167,162,0,171,161,166,163,169],
[179,177,169,0,167,175,178,185],
[165,170,179,173,0,174,167,185],
[162,163,174,165,166,0,182,189],
[175,171,177,162,173,158,0,178],
[159,160,171,155,155,151,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,183,160,182,170,154,180],
[155,0,129,164,157,160,151,158],
[157,211,0,192,186,163,154,158],
[180,176,148,0,145,155,158,138],
[158,183,154,195,0,160,189,142],
[170,180,177,185,180,0,169,171],
[186,189,186,182,151,171,0,152],
[160,182,182,202,198,169,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,160,216,205,175,229,165],
[126,0,118,184,167,93,164,133],
[180,222,0,265,200,166,238,140],
[124,156,75,0,159,68,157,138],
[135,173,140,181,0,146,169,111],
[165,247,174,272,194,0,251,167],
[111,176,102,183,171,89,0,199],
[175,207,200,202,229,173,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,175,168,155,163,160,153],
[178,0,190,176,166,170,176,167],
[165,150,0,170,142,158,165,164],
[172,164,170,0,165,177,156,163],
[185,174,198,175,0,172,169,179],
[177,170,182,163,168,0,164,167],
[180,164,175,184,171,176,0,178],
[187,173,176,177,161,173,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,151,180,160,169,170,187],
[161,0,162,163,140,158,176,169],
[189,178,0,181,147,159,192,174],
[160,177,159,0,172,157,189,185],
[180,200,193,168,0,172,177,177],
[171,182,181,183,168,0,180,196],
[170,164,148,151,163,160,0,172],
[153,171,166,155,163,144,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,171,182,163,172,195,184],
[178,0,168,184,166,178,183,197],
[169,172,0,166,177,169,171,190],
[158,156,174,0,168,175,178,182],
[177,174,163,172,0,166,166,182],
[168,162,171,165,174,0,177,184],
[145,157,169,162,174,163,0,180],
[156,143,150,158,158,156,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,174,180,183,169,167,165],
[150,0,151,170,152,156,169,147],
[166,189,0,173,167,176,178,156],
[160,170,167,0,154,163,171,166],
[157,188,173,186,0,171,177,163],
[171,184,164,177,169,0,165,165],
[173,171,162,169,163,175,0,177],
[175,193,184,174,177,175,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,173,182,162,170,195,181],
[159,0,162,175,160,159,203,182],
[167,178,0,188,157,132,176,162],
[158,165,152,0,151,148,184,158],
[178,180,183,189,0,169,209,181],
[170,181,208,192,171,0,213,187],
[145,137,164,156,131,127,0,146],
[159,158,178,182,159,153,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,198,167,182,161,183,175],
[167,0,187,168,164,175,182,166],
[142,153,0,141,156,143,156,133],
[173,172,199,0,181,169,190,187],
[158,176,184,159,0,156,172,175],
[179,165,197,171,184,0,177,166],
[157,158,184,150,168,163,0,161],
[165,174,207,153,165,174,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,172,166,154,159,168,170],
[178,0,169,171,158,166,169,173],
[168,171,0,173,165,178,170,173],
[174,169,167,0,170,166,178,161],
[186,182,175,170,0,179,174,188],
[181,174,162,174,161,0,168,170],
[172,171,170,162,166,172,0,171],
[170,167,167,179,152,170,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,168,180,181,181,179,187],
[168,0,176,178,169,173,183,181],
[172,164,0,178,172,158,184,181],
[160,162,162,0,175,181,184,180],
[159,171,168,165,0,177,178,175],
[159,167,182,159,163,0,179,176],
[161,157,156,156,162,161,0,149],
[153,159,159,160,165,164,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,189,169,169,181,175,184],
[159,0,178,155,165,160,152,172],
[151,162,0,157,180,157,167,175],
[171,185,183,0,175,162,166,187],
[171,175,160,165,0,164,163,184],
[159,180,183,178,176,0,180,185],
[165,188,173,174,177,160,0,193],
[156,168,165,153,156,155,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,124,117,119,132,143,200],
[211,0,187,157,168,178,154,220],
[216,153,0,169,147,152,176,173],
[223,183,171,0,168,168,162,230],
[221,172,193,172,0,164,197,213],
[208,162,188,172,176,0,175,202],
[197,186,164,178,143,165,0,178],
[140,120,167,110,127,138,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,159,193,209,191,174,172],
[153,0,177,184,195,193,199,158],
[181,163,0,193,185,193,196,166],
[147,156,147,0,163,169,182,132],
[131,145,155,177,0,151,176,148],
[149,147,147,171,189,0,183,149],
[166,141,144,158,164,157,0,133],
[168,182,174,208,192,191,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,195,173,142,175,167,183],
[181,0,186,173,166,194,172,196],
[145,154,0,145,145,184,177,164],
[167,167,195,0,184,178,184,208],
[198,174,195,156,0,200,193,204],
[165,146,156,162,140,0,173,167],
[173,168,163,156,147,167,0,194],
[157,144,176,132,136,173,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,160,163,165,166,154,166],
[187,0,185,190,163,181,171,176],
[180,155,0,166,172,171,173,175],
[177,150,174,0,158,179,161,166],
[175,177,168,182,0,170,168,181],
[174,159,169,161,170,0,162,161],
[186,169,167,179,172,178,0,175],
[174,164,165,174,159,179,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,154,239,156,244,197,183],
[133,0,179,173,166,207,149,155],
[186,161,0,162,143,188,176,120],
[101,167,178,0,200,177,202,232],
[184,174,197,140,0,146,144,162],
[96,133,152,163,194,0,193,169],
[143,191,164,138,196,147,0,181],
[157,185,220,108,178,171,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,164,149,175,159,151,148],
[176,0,168,173,195,175,180,180],
[176,172,0,146,182,167,178,167],
[191,167,194,0,200,189,176,167],
[165,145,158,140,0,148,145,166],
[181,165,173,151,192,0,179,169],
[189,160,162,164,195,161,0,169],
[192,160,173,173,174,171,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,184,161,161,176,183,160],
[168,0,178,160,178,173,158,171],
[156,162,0,143,148,159,162,126],
[179,180,197,0,174,181,172,166],
[179,162,192,166,0,178,196,168],
[164,167,181,159,162,0,168,153],
[157,182,178,168,144,172,0,159],
[180,169,214,174,172,187,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,164,166,166,171,175,176],
[171,0,170,179,172,183,168,181],
[176,170,0,162,171,175,185,186],
[174,161,178,0,163,166,177,180],
[174,168,169,177,0,159,186,183],
[169,157,165,174,181,0,177,176],
[165,172,155,163,154,163,0,175],
[164,159,154,160,157,164,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,179,171,157,168,169,191],
[167,0,174,163,142,150,164,178],
[161,166,0,169,151,149,162,170],
[169,177,171,0,173,165,153,180],
[183,198,189,167,0,182,165,200],
[172,190,191,175,158,0,181,191],
[171,176,178,187,175,159,0,192],
[149,162,170,160,140,149,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,186,164,171,166,191,187],
[145,0,165,168,145,164,156,155],
[154,175,0,156,169,174,175,168],
[176,172,184,0,169,152,180,176],
[169,195,171,171,0,187,157,167],
[174,176,166,188,153,0,197,191],
[149,184,165,160,183,143,0,171],
[153,185,172,164,173,149,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,182,186,151,184,195,174],
[186,0,193,195,196,204,187,170],
[158,147,0,173,154,156,177,170],
[154,145,167,0,136,175,144,151],
[189,144,186,204,0,197,177,179],
[156,136,184,165,143,0,149,166],
[145,153,163,196,163,191,0,174],
[166,170,170,189,161,174,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,172,150,161,169,174,173],
[207,0,210,157,173,176,188,158],
[168,130,0,159,170,174,186,213],
[190,183,181,0,175,180,165,183],
[179,167,170,165,0,180,162,175],
[171,164,166,160,160,0,154,148],
[166,152,154,175,178,186,0,186],
[167,182,127,157,165,192,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,169,154,163,157,164,156],
[175,0,169,161,165,164,163,170],
[171,171,0,176,177,184,166,178],
[186,179,164,0,180,164,179,178],
[177,175,163,160,0,181,164,159],
[183,176,156,176,159,0,178,176],
[176,177,174,161,176,162,0,175],
[184,170,162,162,181,164,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,174,161,175,169,160,194],
[168,0,179,170,162,154,157,167],
[166,161,0,169,159,161,172,170],
[179,170,171,0,171,170,158,184],
[165,178,181,169,0,174,176,165],
[171,186,179,170,166,0,165,178],
[180,183,168,182,164,175,0,180],
[146,173,170,156,175,162,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,182,167,160,161,159,159],
[174,0,183,166,181,168,174,163],
[158,157,0,165,157,162,172,152],
[173,174,175,0,168,171,162,164],
[180,159,183,172,0,173,170,158],
[179,172,178,169,167,0,170,173],
[181,166,168,178,170,170,0,159],
[181,177,188,176,182,167,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,165,195,181,220,183,249],
[138,0,165,118,176,204,131,219],
[175,175,0,130,133,166,145,175],
[145,222,210,0,176,207,182,196],
[159,164,207,164,0,204,189,188],
[120,136,174,133,136,0,116,179],
[157,209,195,158,151,224,0,233],
[91,121,165,144,152,161,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,164,189,178,181,187,165],
[167,0,176,199,167,160,183,164],
[176,164,0,184,151,158,152,156],
[151,141,156,0,139,151,152,138],
[162,173,189,201,0,171,184,175],
[159,180,182,189,169,0,183,182],
[153,157,188,188,156,157,0,154],
[175,176,184,202,165,158,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,184,185,150,185,157,171],
[166,0,186,175,149,151,163,155],
[156,154,0,167,150,155,171,164],
[155,165,173,0,161,165,157,164],
[190,191,190,179,0,184,155,173],
[155,189,185,175,156,0,144,165],
[183,177,169,183,185,196,0,173],
[169,185,176,176,167,175,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,173,175,170,173,176,169],
[160,0,156,178,154,168,156,147],
[167,184,0,178,180,174,165,162],
[165,162,162,0,159,166,180,177],
[170,186,160,181,0,170,161,171],
[167,172,166,174,170,0,173,164],
[164,184,175,160,179,167,0,171],
[171,193,178,163,169,176,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,143,152,178,163,153,142],
[168,0,148,135,163,157,150,151],
[197,192,0,159,173,191,179,185],
[188,205,181,0,160,175,183,157],
[162,177,167,180,0,182,170,162],
[177,183,149,165,158,0,184,184],
[187,190,161,157,170,156,0,179],
[198,189,155,183,178,156,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,152,174,172,174,169,162],
[165,0,168,177,157,201,180,159],
[188,172,0,180,154,182,162,153],
[166,163,160,0,155,167,148,163],
[168,183,186,185,0,176,184,188],
[166,139,158,173,164,0,173,156],
[171,160,178,192,156,167,0,167],
[178,181,187,177,152,184,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,190,161,161,173,176,148],
[174,0,179,160,152,155,151,160],
[150,161,0,154,151,161,137,148],
[179,180,186,0,186,192,169,182],
[179,188,189,154,0,178,159,183],
[167,185,179,148,162,0,172,155],
[164,189,203,171,181,168,0,160],
[192,180,192,158,157,185,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,199,180,148,168,171,152],
[177,0,187,169,192,186,178,187],
[141,153,0,150,141,134,152,138],
[160,171,190,0,157,152,192,138],
[192,148,199,183,0,176,187,167],
[172,154,206,188,164,0,198,171],
[169,162,188,148,153,142,0,144],
[188,153,202,202,173,169,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,171,185,185,181,172,155],
[176,0,170,176,183,173,173,171],
[169,170,0,181,182,183,171,163],
[155,164,159,0,176,158,159,147],
[155,157,158,164,0,170,146,143],
[159,167,157,182,170,0,164,158],
[168,167,169,181,194,176,0,157],
[185,169,177,193,197,182,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,184,177,190,160,172,175],
[178,0,192,170,175,184,170,187],
[156,148,0,164,162,154,159,157],
[163,170,176,0,168,177,183,168],
[150,165,178,172,0,182,173,161],
[180,156,186,163,158,0,169,168],
[168,170,181,157,167,171,0,160],
[165,153,183,172,179,172,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,191,196,199,168,202,214],
[175,0,180,168,186,182,186,166],
[149,160,0,195,167,167,179,177],
[144,172,145,0,163,148,161,164],
[141,154,173,177,0,169,155,151],
[172,158,173,192,171,0,184,178],
[138,154,161,179,185,156,0,181],
[126,174,163,176,189,162,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,183,159,198,135,159,159],
[165,0,169,143,188,171,175,172],
[157,171,0,165,210,158,172,150],
[181,197,175,0,201,169,178,164],
[142,152,130,139,0,135,162,134],
[205,169,182,171,205,0,169,183],
[181,165,168,162,178,171,0,164],
[181,168,190,176,206,157,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,198,155,187,170,208,206],
[179,0,198,172,199,170,206,181],
[142,142,0,164,176,179,192,157],
[185,168,176,0,193,171,160,159],
[153,141,164,147,0,166,198,164],
[170,170,161,169,174,0,186,162],
[132,134,148,180,142,154,0,164],
[134,159,183,181,176,178,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,189,193,168,175,192,184],
[170,0,162,187,174,192,186,188],
[151,178,0,171,165,176,180,178],
[147,153,169,0,150,162,175,180],
[172,166,175,190,0,169,187,196],
[165,148,164,178,171,0,174,169],
[148,154,160,165,153,166,0,168],
[156,152,162,160,144,171,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,189,167,196,151,169,166],
[200,0,228,152,228,177,180,188],
[151,112,0,166,149,146,107,134],
[173,188,174,0,187,165,134,135],
[144,112,191,153,0,166,107,136],
[189,163,194,175,174,0,190,189],
[171,160,233,206,233,150,0,183],
[174,152,206,205,204,151,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,221,103,160,153,142,154],
[155,0,198,84,166,194,101,164],
[119,142,0,91,158,165,113,187],
[237,256,249,0,231,208,155,220],
[180,174,182,109,0,187,120,135],
[187,146,175,132,153,0,175,141],
[198,239,227,185,220,165,0,196],
[186,176,153,120,205,199,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,144,133,181,166,132,161],
[203,0,195,182,201,191,170,172],
[196,145,0,179,180,163,146,129],
[207,158,161,0,193,154,140,159],
[159,139,160,147,0,152,150,129],
[174,149,177,186,188,0,139,158],
[208,170,194,200,190,201,0,167],
[179,168,211,181,211,182,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,186,206,169,185,196,179],
[150,0,176,182,171,171,176,181],
[154,164,0,168,158,167,191,183],
[134,158,172,0,145,127,178,169],
[171,169,182,195,0,191,187,184],
[155,169,173,213,149,0,195,206],
[144,164,149,162,153,145,0,167],
[161,159,157,171,156,134,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,175,156,166,160,157,180],
[168,0,168,146,156,164,160,156],
[165,172,0,165,173,178,172,173],
[184,194,175,0,176,170,182,173],
[174,184,167,164,0,174,170,182],
[180,176,162,170,166,0,169,167],
[183,180,168,158,170,171,0,166],
[160,184,167,167,158,173,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,190,284,207,222,161,180],
[177,0,177,209,209,222,73,240],
[150,163,0,284,238,161,177,121],
[56,131,56,0,175,15,129,46],
[133,131,102,165,0,149,0,107],
[118,118,179,325,191,0,147,33],
[179,267,163,211,340,193,0,182],
[160,100,219,294,233,307,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,146,140,154,153,156,158],
[181,0,155,167,156,163,170,175],
[194,185,0,188,167,165,179,169],
[200,173,152,0,167,155,163,174],
[186,184,173,173,0,165,180,178],
[187,177,175,185,175,0,163,181],
[184,170,161,177,160,177,0,164],
[182,165,171,166,162,159,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,162,161,148,163,168,167],
[168,0,162,178,161,168,180,167],
[178,178,0,157,162,150,154,175],
[179,162,183,0,164,171,179,172],
[192,179,178,176,0,172,170,184],
[177,172,190,169,168,0,174,181],
[172,160,186,161,170,166,0,172],
[173,173,165,168,156,159,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,159,167,171,192,171,155],
[168,0,153,176,177,170,156,170],
[181,187,0,192,189,184,178,168],
[173,164,148,0,184,164,157,151],
[169,163,151,156,0,164,165,148],
[148,170,156,176,176,0,152,161],
[169,184,162,183,175,188,0,171],
[185,170,172,189,192,179,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,151,135,79,92,72,106],
[234,0,229,135,214,92,150,135],
[189,111,0,189,255,92,27,162],
[205,205,151,0,120,243,178,178],
[261,126,85,220,0,177,112,247],
[248,248,248,97,163,0,178,248],
[268,190,313,162,228,162,0,268],
[234,205,178,162,93,92,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,175,175,192,171,179,168],
[137,0,185,147,183,146,159,163],
[165,155,0,125,170,149,156,179],
[165,193,215,0,196,165,182,184],
[148,157,170,144,0,132,158,146],
[169,194,191,175,208,0,162,197],
[161,181,184,158,182,178,0,185],
[172,177,161,156,194,143,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,150,109,257,181,183,257],
[231,0,198,190,231,155,231,231],
[190,142,0,142,107,107,183,142],
[231,150,198,0,183,183,183,183],
[83,109,233,157,0,190,266,266],
[159,185,233,157,150,0,231,111],
[157,109,157,157,74,109,0,109],
[83,109,198,157,74,229,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,178,150,182,168,172,180],
[154,0,172,176,170,171,174,177],
[162,168,0,169,178,167,173,156],
[190,164,171,0,181,174,178,186],
[158,170,162,159,0,143,162,168],
[172,169,173,166,197,0,190,192],
[168,166,167,162,178,150,0,186],
[160,163,184,154,172,148,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,170,214,190,188,183,172],
[162,0,179,185,179,184,179,179],
[170,161,0,197,205,185,187,176],
[126,155,143,0,154,148,148,159],
[150,161,135,186,0,156,166,151],
[152,156,155,192,184,0,175,178],
[157,161,153,192,174,165,0,172],
[168,161,164,181,189,162,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,166,178,182,178,169,184],
[159,0,171,164,162,159,174,161],
[174,169,0,167,177,163,176,173],
[162,176,173,0,157,158,173,173],
[158,178,163,183,0,160,180,173],
[162,181,177,182,180,0,180,178],
[171,166,164,167,160,160,0,167],
[156,179,167,167,167,162,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,142,148,177,133,163,170],
[203,0,176,158,187,194,170,143],
[198,164,0,151,183,154,132,203],
[192,182,189,0,145,198,194,204],
[163,153,157,195,0,157,163,156],
[207,146,186,142,183,0,137,172],
[177,170,208,146,177,203,0,185],
[170,197,137,136,184,168,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,153,248,144,167,154,142],
[173,0,168,219,120,107,150,130],
[187,172,0,243,165,175,177,112],
[92,121,97,0,114,160,127,77],
[196,220,175,226,0,140,202,218],
[173,233,165,180,200,0,215,223],
[186,190,163,213,138,125,0,110],
[198,210,228,263,122,117,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,174,162,173,165,184,172],
[164,0,162,182,165,179,194,200],
[166,178,0,185,179,161,185,182],
[178,158,155,0,180,159,205,188],
[167,175,161,160,0,159,188,206],
[175,161,179,181,181,0,200,198],
[156,146,155,135,152,140,0,177],
[168,140,158,152,134,142,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,171,170,167,155,177,156],
[177,0,165,175,163,168,174,164],
[169,175,0,171,166,174,182,167],
[170,165,169,0,156,160,166,161],
[173,177,174,184,0,159,184,168],
[185,172,166,180,181,0,179,173],
[163,166,158,174,156,161,0,170],
[184,176,173,179,172,167,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,170,137,171,144,169,143],
[185,0,181,173,178,173,190,161],
[170,159,0,111,159,155,169,153],
[203,167,229,0,180,200,216,205],
[169,162,181,160,0,166,178,154],
[196,167,185,140,174,0,200,160],
[171,150,171,124,162,140,0,158],
[197,179,187,135,186,180,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,166,160,164,166,159,179],
[156,0,159,164,159,157,161,170],
[174,181,0,180,169,157,170,176],
[180,176,160,0,168,159,168,188],
[176,181,171,172,0,170,181,179],
[174,183,183,181,170,0,171,177],
[181,179,170,172,159,169,0,190],
[161,170,164,152,161,163,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,168,162,156,155,179,168],
[184,0,181,168,173,173,175,170],
[172,159,0,159,164,149,167,172],
[178,172,181,0,166,166,179,172],
[184,167,176,174,0,168,177,184],
[185,167,191,174,172,0,183,177],
[161,165,173,161,163,157,0,168],
[172,170,168,168,156,163,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,145,153,130,163,168,170],
[159,0,164,144,137,168,171,154],
[195,176,0,204,175,174,186,167],
[187,196,136,0,142,167,189,151],
[210,203,165,198,0,193,215,177],
[177,172,166,173,147,0,175,166],
[172,169,154,151,125,165,0,139],
[170,186,173,189,163,174,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,162,177,168,165,176,163],
[179,0,169,166,183,171,179,180],
[178,171,0,156,176,174,184,170],
[163,174,184,0,192,173,194,186],
[172,157,164,148,0,166,164,178],
[175,169,166,167,174,0,176,172],
[164,161,156,146,176,164,0,158],
[177,160,170,154,162,168,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,174,174,162,180,171,154],
[169,0,172,175,178,188,173,163],
[166,168,0,171,171,179,164,148],
[166,165,169,0,166,175,165,167],
[178,162,169,174,0,181,176,165],
[160,152,161,165,159,0,154,157],
[169,167,176,175,164,186,0,176],
[186,177,192,173,175,183,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,168,156,159,167,172,162],
[163,0,162,168,172,169,151,180],
[172,178,0,172,174,173,160,180],
[184,172,168,0,177,174,180,190],
[181,168,166,163,0,174,166,179],
[173,171,167,166,166,0,165,168],
[168,189,180,160,174,175,0,174],
[178,160,160,150,161,172,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,163,133,154,129,164,152],
[201,0,164,158,157,151,199,174],
[177,176,0,201,145,144,171,161],
[207,182,139,0,170,160,199,163],
[186,183,195,170,0,190,213,161],
[211,189,196,180,150,0,194,161],
[176,141,169,141,127,146,0,139],
[188,166,179,177,179,179,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,192,177,163,158,145,173],
[177,0,195,167,167,170,177,182],
[148,145,0,159,153,159,166,165],
[163,173,181,0,176,155,169,150],
[177,173,187,164,0,177,169,170],
[182,170,181,185,163,0,173,198],
[195,163,174,171,171,167,0,168],
[167,158,175,190,170,142,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,128,114,87,102,123,114],
[226,0,163,162,143,169,158,154],
[212,177,0,179,179,203,153,154],
[226,178,161,0,159,176,152,101],
[253,197,161,181,0,182,182,191],
[238,171,137,164,158,0,154,154],
[217,182,187,188,158,186,0,175],
[226,186,186,239,149,186,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,173,152,191,181,152,171],
[175,0,187,179,184,181,168,162],
[167,153,0,172,181,164,161,163],
[188,161,168,0,175,165,181,160],
[149,156,159,165,0,150,153,158],
[159,159,176,175,190,0,169,170],
[188,172,179,159,187,171,0,181],
[169,178,177,180,182,170,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,196,180,197,164,175,173],
[131,0,164,169,158,146,153,137],
[144,176,0,150,171,174,140,139],
[160,171,190,0,177,167,167,159],
[143,182,169,163,0,152,160,173],
[176,194,166,173,188,0,159,172],
[165,187,200,173,180,181,0,154],
[167,203,201,181,167,168,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,148,258,141,153,96,165],
[160,0,121,205,100,107,136,171],
[192,219,0,301,182,176,178,153],
[82,135,39,0,82,128,60,78],
[199,240,158,258,0,201,181,196],
[187,233,164,212,139,0,133,173],
[244,204,162,280,159,207,0,224],
[175,169,187,262,144,167,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,165,157,173,173,161,174],
[172,0,170,182,166,172,175,184],
[175,170,0,166,168,179,173,172],
[183,158,174,0,172,172,181,173],
[167,174,172,168,0,173,157,172],
[167,168,161,168,167,0,170,175],
[179,165,167,159,183,170,0,178],
[166,156,168,167,168,165,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,174,151,143,160,150,160],
[186,0,181,183,170,187,187,184],
[166,159,0,161,159,175,159,176],
[189,157,179,0,165,181,182,187],
[197,170,181,175,0,197,180,196],
[180,153,165,159,143,0,169,173],
[190,153,181,158,160,171,0,181],
[180,156,164,153,144,167,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,163,156,173,153,165,173],
[163,0,171,173,156,164,169,174],
[177,169,0,166,169,176,169,175],
[184,167,174,0,182,166,175,182],
[167,184,171,158,0,154,168,176],
[187,176,164,174,186,0,185,172],
[175,171,171,165,172,155,0,179],
[167,166,165,158,164,168,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,164,163,161,166,153,171],
[163,0,166,167,159,156,158,173],
[176,174,0,177,177,169,172,178],
[177,173,163,0,163,157,165,176],
[179,181,163,177,0,170,161,175],
[174,184,171,183,170,0,169,166],
[187,182,168,175,179,171,0,184],
[169,167,162,164,165,174,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,175,163,169,174,179,169],
[156,0,163,153,154,169,152,161],
[165,177,0,170,153,172,158,167],
[177,187,170,0,178,162,199,177],
[171,186,187,162,0,193,179,186],
[166,171,168,178,147,0,159,175],
[161,188,182,141,161,181,0,173],
[171,179,173,163,154,165,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,168,160,160,160,170],
[169,0,176,183,165,170,173,173],
[167,164,0,169,153,158,164,170],
[172,157,171,0,167,169,170,168],
[180,175,187,173,0,176,181,162],
[180,170,182,171,164,0,168,171],
[180,167,176,170,159,172,0,179],
[170,167,170,172,178,169,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,167,161,201,198,170,177],
[155,0,148,159,168,164,153,149],
[173,192,0,176,169,180,158,160],
[179,181,164,0,191,199,151,164],
[139,172,171,149,0,190,147,149],
[142,176,160,141,150,0,148,146],
[170,187,182,189,193,192,0,156],
[163,191,180,176,191,194,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,170,148,187,171,164,180],
[173,0,160,155,170,168,169,174],
[170,180,0,179,180,172,171,200],
[192,185,161,0,188,180,171,198],
[153,170,160,152,0,166,158,164],
[169,172,168,160,174,0,153,185],
[176,171,169,169,182,187,0,181],
[160,166,140,142,176,155,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,176,169,177,170,167,172],
[180,0,187,186,184,170,176,190],
[164,153,0,172,184,173,167,174],
[171,154,168,0,176,169,162,174],
[163,156,156,164,0,157,152,170],
[170,170,167,171,183,0,164,183],
[173,164,173,178,188,176,0,179],
[168,150,166,166,170,157,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,166,158,180,152,150,164],
[179,0,168,159,170,158,154,157],
[174,172,0,171,168,162,165,167],
[182,181,169,0,175,163,153,152],
[160,170,172,165,0,156,139,168],
[188,182,178,177,184,0,153,174],
[190,186,175,187,201,187,0,168],
[176,183,173,188,172,166,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,154,175,182,204,226,214],
[153,0,172,179,198,175,193,207],
[186,168,0,170,231,178,199,234],
[165,161,170,0,200,169,219,212],
[158,142,109,140,0,141,137,173],
[136,165,162,171,199,0,181,211],
[114,147,141,121,203,159,0,179],
[126,133,106,128,167,129,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,162,171,178,168,154,169],
[170,0,174,169,180,171,167,180],
[178,166,0,179,178,175,169,176],
[169,171,161,0,164,160,154,140],
[162,160,162,176,0,171,161,183],
[172,169,165,180,169,0,167,172],
[186,173,171,186,179,173,0,170],
[171,160,164,200,157,168,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,162,154,179,178,175,172],
[180,0,166,167,178,175,174,170],
[178,174,0,170,178,168,181,180],
[186,173,170,0,167,169,184,166],
[161,162,162,173,0,169,165,173],
[162,165,172,171,171,0,181,167],
[165,166,159,156,175,159,0,168],
[168,170,160,174,167,173,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,153,172,158,152,178,157],
[178,0,188,189,177,176,199,160],
[187,152,0,187,192,169,191,154],
[168,151,153,0,181,156,176,169],
[182,163,148,159,0,122,169,147],
[188,164,171,184,218,0,197,180],
[162,141,149,164,171,143,0,128],
[183,180,186,171,193,160,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,195,162,184,175,163,261],
[117,0,132,149,111,193,216,179],
[145,208,0,172,172,167,176,212],
[178,191,168,0,172,160,131,173],
[156,229,168,168,0,222,169,193],
[165,147,173,180,118,0,117,176],
[177,124,164,209,171,223,0,195],
[79,161,128,167,147,164,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,158,169,184,168,166,176],
[170,0,182,187,193,189,177,171],
[182,158,0,158,178,161,168,173],
[171,153,182,0,178,173,167,169],
[156,147,162,162,0,149,143,159],
[172,151,179,167,191,0,178,169],
[174,163,172,173,197,162,0,173],
[164,169,167,171,181,171,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,160,180,158,151,165,142],
[214,0,165,212,192,204,211,188],
[180,175,0,208,173,152,193,185],
[160,128,132,0,135,114,159,149],
[182,148,167,205,0,131,163,173],
[189,136,188,226,209,0,206,193],
[175,129,147,181,177,134,0,154],
[198,152,155,191,167,147,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,176,164,191,186,170,182],
[169,0,166,164,177,177,167,185],
[164,174,0,167,176,186,181,175],
[176,176,173,0,181,177,176,165],
[149,163,164,159,0,165,180,164],
[154,163,154,163,175,0,169,169],
[170,173,159,164,160,171,0,172],
[158,155,165,175,176,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,125,158,167,155,144,151],
[189,0,150,192,160,173,188,157],
[215,190,0,187,199,188,167,190],
[182,148,153,0,172,168,179,127],
[173,180,141,168,0,164,162,152],
[185,167,152,172,176,0,162,174],
[196,152,173,161,178,178,0,154],
[189,183,150,213,188,166,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,129,128,145,144,127,147],
[172,0,159,178,214,172,149,161],
[211,181,0,152,175,152,176,154],
[212,162,188,0,179,181,199,206],
[195,126,165,161,0,167,189,124],
[196,168,188,159,173,0,201,199],
[213,191,164,141,151,139,0,201],
[193,179,186,134,216,141,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,162,180,164,162,190,210],
[166,0,165,159,141,148,162,178],
[178,175,0,166,170,179,179,195],
[160,181,174,0,148,172,174,194],
[176,199,170,192,0,187,178,211],
[178,192,161,168,153,0,173,201],
[150,178,161,166,162,167,0,211],
[130,162,145,146,129,139,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,170,163,157,147,159,171],
[187,0,188,191,194,174,167,198],
[170,152,0,177,170,152,147,175],
[177,149,163,0,170,163,171,194],
[183,146,170,170,0,154,167,176],
[193,166,188,177,186,0,174,201],
[181,173,193,169,173,166,0,169],
[169,142,165,146,164,139,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,175,161,185,166,184,177],
[158,0,162,172,172,170,179,161],
[165,178,0,169,188,173,192,165],
[179,168,171,0,192,178,183,171],
[155,168,152,148,0,171,159,170],
[174,170,167,162,169,0,181,154],
[156,161,148,157,181,159,0,163],
[163,179,175,169,170,186,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,149,158,169,153,168,162],
[180,0,156,188,177,179,190,181],
[191,184,0,189,166,186,189,197],
[182,152,151,0,156,180,205,177],
[171,163,174,184,0,173,183,173],
[187,161,154,160,167,0,187,163],
[172,150,151,135,157,153,0,174],
[178,159,143,163,167,177,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,168,209,181,188,179,198],
[165,0,158,178,188,184,165,182],
[172,182,0,173,167,181,185,177],
[131,162,167,0,165,167,169,151],
[159,152,173,175,0,159,162,177],
[152,156,159,173,181,0,158,167],
[161,175,155,171,178,182,0,170],
[142,158,163,189,163,173,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,158,171,209,173,163,159],
[147,0,149,179,176,157,145,142],
[182,191,0,164,187,203,174,164],
[169,161,176,0,177,193,161,173],
[131,164,153,163,0,169,142,143],
[167,183,137,147,171,0,148,170],
[177,195,166,179,198,192,0,154],
[181,198,176,167,197,170,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,111,102,171,150,123,101],
[185,0,142,122,173,186,125,163],
[229,198,0,171,154,142,181,185],
[238,218,169,0,206,198,190,179],
[169,167,186,134,0,201,153,154],
[190,154,198,142,139,0,155,145],
[217,215,159,150,187,185,0,136],
[239,177,155,161,186,195,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,180,193,184,163,182,177],
[152,0,153,174,166,155,168,154],
[160,187,0,175,179,155,175,170],
[147,166,165,0,171,161,168,161],
[156,174,161,169,0,153,160,155],
[177,185,185,179,187,0,172,165],
[158,172,165,172,180,168,0,169],
[163,186,170,179,185,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,174,170,164,153,160],
[163,0,168,168,159,156,176,178],
[170,172,0,162,164,166,168,166],
[166,172,178,0,165,164,169,158],
[170,181,176,175,0,172,190,168],
[176,184,174,176,168,0,174,170],
[187,164,172,171,150,166,0,165],
[180,162,174,182,172,170,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,194,168,207,187,160,155],
[166,0,199,183,167,208,149,150],
[146,141,0,151,173,163,146,151],
[172,157,189,0,186,184,143,160],
[133,173,167,154,0,194,173,182],
[153,132,177,156,146,0,172,158],
[180,191,194,197,167,168,0,174],
[185,190,189,180,158,182,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,167,164,176,185,159,187],
[156,0,171,176,170,167,165,187],
[173,169,0,196,165,180,153,188],
[176,164,144,0,161,157,174,177],
[164,170,175,179,0,172,163,179],
[155,173,160,183,168,0,157,177],
[181,175,187,166,177,183,0,179],
[153,153,152,163,161,163,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,170,166,170,174,188,148],
[212,0,159,181,189,194,197,180],
[170,181,0,184,166,181,196,157],
[174,159,156,0,161,144,178,155],
[170,151,174,179,0,203,186,163],
[166,146,159,196,137,0,168,141],
[152,143,144,162,154,172,0,134],
[192,160,183,185,177,199,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,84,26,87,71,112,98],
[304,0,219,147,192,125,258,204],
[256,121,0,156,166,196,211,183],
[314,193,184,0,242,155,213,204],
[253,148,174,98,0,174,174,195],
[269,215,144,185,166,0,199,148],
[228,82,129,127,166,141,0,125],
[242,136,157,136,145,192,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,145,257,238,216,193,185],
[188,0,235,224,236,225,156,183],
[195,105,0,225,178,195,164,164],
[83,116,115,0,221,132,172,124],
[102,104,162,119,0,146,125,145],
[124,115,145,208,194,0,151,96],
[147,184,176,168,215,189,0,156],
[155,157,176,216,195,244,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,143,168,144,152,152,164],
[182,0,164,185,167,162,178,153],
[197,176,0,178,177,180,170,165],
[172,155,162,0,162,150,153,139],
[196,173,163,178,0,174,163,160],
[188,178,160,190,166,0,171,165],
[188,162,170,187,177,169,0,174],
[176,187,175,201,180,175,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,174,180,196,183,185,162],
[161,0,180,193,185,181,175,169],
[166,160,0,153,168,180,172,158],
[160,147,187,0,189,189,170,176],
[144,155,172,151,0,173,153,158],
[157,159,160,151,167,0,173,156],
[155,165,168,170,187,167,0,153],
[178,171,182,164,182,184,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,176,146,162,157,171,146],
[179,0,176,138,174,156,160,167],
[164,164,0,154,163,166,170,150],
[194,202,186,0,182,179,164,175],
[178,166,177,158,0,166,165,141],
[183,184,174,161,174,0,175,167],
[169,180,170,176,175,165,0,152],
[194,173,190,165,199,173,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,149,168,173,165,154,175],
[184,0,174,172,198,167,172,161],
[191,166,0,165,183,170,173,175],
[172,168,175,0,181,164,167,169],
[167,142,157,159,0,158,143,149],
[175,173,170,176,182,0,177,174],
[186,168,167,173,197,163,0,179],
[165,179,165,171,191,166,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,179,159,186,156,163,162],
[177,0,173,194,185,184,189,165],
[161,167,0,170,179,184,183,178],
[181,146,170,0,185,168,167,166],
[154,155,161,155,0,153,155,161],
[184,156,156,172,187,0,167,148],
[177,151,157,173,185,173,0,151],
[178,175,162,174,179,192,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,179,176,200,167,202,210],
[151,0,187,162,214,180,197,205],
[161,153,0,161,189,146,184,168],
[164,178,179,0,212,150,184,187],
[140,126,151,128,0,124,165,177],
[173,160,194,190,216,0,204,200],
[138,143,156,156,175,136,0,164],
[130,135,172,153,163,140,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,165,181,178,164,188,168],
[174,0,176,187,182,164,174,174],
[175,164,0,166,172,173,172,160],
[159,153,174,0,166,159,166,162],
[162,158,168,174,0,159,184,158],
[176,176,167,181,181,0,183,188],
[152,166,168,174,156,157,0,169],
[172,166,180,178,182,152,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,176,152,170,173,166,155],
[172,0,174,176,178,177,156,163],
[164,166,0,164,162,173,158,168],
[188,164,176,0,173,195,177,179],
[170,162,178,167,0,172,159,165],
[167,163,167,145,168,0,154,151],
[174,184,182,163,181,186,0,166],
[185,177,172,161,175,189,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,131,235,202,177,263,251],
[151,0,166,194,171,173,186,169],
[209,174,0,214,149,173,237,213],
[105,146,126,0,134,95,220,238],
[138,169,191,206,0,114,252,237],
[163,167,167,245,226,0,216,234],
[77,154,103,120,88,124,0,123],
[89,171,127,102,103,106,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,192,179,173,221,193,163],
[159,0,156,175,191,166,192,191],
[148,184,0,151,179,155,184,151],
[161,165,189,0,173,211,196,218],
[167,149,161,167,0,150,194,165],
[119,174,185,129,190,0,181,197],
[147,148,156,144,146,159,0,147],
[177,149,189,122,175,143,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,171,171,168,183,148,175],
[157,0,181,163,159,170,147,171],
[169,159,0,154,163,168,171,177],
[169,177,186,0,164,179,185,193],
[172,181,177,176,0,180,176,169],
[157,170,172,161,160,0,157,171],
[192,193,169,155,164,183,0,180],
[165,169,163,147,171,169,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,280,113,212,113,280,212],
[159,0,340,272,272,272,280,272],
[60,0,0,113,113,173,212,0],
[227,68,227,0,280,159,280,159],
[128,68,227,60,0,60,280,60],
[227,68,167,181,280,0,280,167],
[60,60,128,60,60,60,0,60],
[128,68,340,181,280,173,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,181,111,152,144,140],
[171,0,165,161,140,127,177,126],
[174,175,0,158,139,129,158,156],
[159,179,182,0,173,165,187,151],
[229,200,201,167,0,182,188,179],
[188,213,211,175,158,0,193,185],
[196,163,182,153,152,147,0,146],
[200,214,184,189,161,155,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,174,169,169,179,170,164],
[188,0,186,159,155,174,166,173],
[166,154,0,159,137,170,147,167],
[171,181,181,0,157,184,185,180],
[171,185,203,183,0,188,182,165],
[161,166,170,156,152,0,151,172],
[170,174,193,155,158,189,0,172],
[176,167,173,160,175,168,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,163,148,162,144,180,156],
[166,0,158,158,181,167,176,172],
[177,182,0,191,162,181,191,190],
[192,182,149,0,202,185,182,162],
[178,159,178,138,0,150,155,177],
[196,173,159,155,190,0,187,198],
[160,164,149,158,185,153,0,159],
[184,168,150,178,163,142,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,167,160,166,148,152,156],
[183,0,173,169,174,169,162,181],
[173,167,0,166,171,148,157,169],
[180,171,174,0,180,161,160,172],
[174,166,169,160,0,153,162,170],
[192,171,192,179,187,0,171,168],
[188,178,183,180,178,169,0,177],
[184,159,171,168,170,172,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,215,159,173,182,157,200],
[160,0,178,141,158,159,134,165],
[125,162,0,136,140,149,135,167],
[181,199,204,0,166,194,141,179],
[167,182,200,174,0,175,170,185],
[158,181,191,146,165,0,137,183],
[183,206,205,199,170,203,0,214],
[140,175,173,161,155,157,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,179,179,173,185,180,176],
[175,0,181,174,169,174,173,181],
[161,159,0,171,171,180,182,169],
[161,166,169,0,173,172,183,174],
[167,171,169,167,0,190,187,187],
[155,166,160,168,150,0,171,162],
[160,167,158,157,153,169,0,168],
[164,159,171,166,153,178,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,183,163,166,181,180,161],
[153,0,167,128,149,145,138,188],
[157,173,0,137,175,158,145,191],
[177,212,203,0,162,186,172,198],
[174,191,165,178,0,171,177,195],
[159,195,182,154,169,0,151,202],
[160,202,195,168,163,189,0,193],
[179,152,149,142,145,138,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,173,191,178,166,163,168],
[161,0,190,180,175,162,172,174],
[167,150,0,169,166,157,169,164],
[149,160,171,0,167,160,153,156],
[162,165,174,173,0,150,169,164],
[174,178,183,180,190,0,171,169],
[177,168,171,187,171,169,0,166],
[172,166,176,184,176,171,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,180,170,194,178,183,167],
[154,0,175,166,183,171,186,158],
[160,165,0,156,173,165,151,177],
[170,174,184,0,194,189,182,170],
[146,157,167,146,0,163,164,153],
[162,169,175,151,177,0,168,157],
[157,154,189,158,176,172,0,171],
[173,182,163,170,187,183,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,178,164,162,165,153,170],
[177,0,162,165,164,169,162,175],
[162,178,0,170,182,176,166,168],
[176,175,170,0,177,166,174,184],
[178,176,158,163,0,172,175,174],
[175,171,164,174,168,0,164,175],
[187,178,174,166,165,176,0,168],
[170,165,172,156,166,165,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,125,192,85,107,129,164],
[265,0,232,269,159,173,164,208],
[215,108,0,201,150,150,153,167],
[148,71,139,0,91,100,134,133],
[255,181,190,249,0,159,200,199],
[233,167,190,240,181,0,144,199],
[211,176,187,206,140,196,0,156],
[176,132,173,207,141,141,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,157,176,185,186,178,161],
[201,0,191,186,186,187,207,166],
[183,149,0,185,199,186,190,158],
[164,154,155,0,167,170,150,171],
[155,154,141,173,0,156,164,170],
[154,153,154,170,184,0,177,139],
[162,133,150,190,176,163,0,159],
[179,174,182,169,170,201,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,164,153,173,150,147,142],
[188,0,185,184,188,165,186,177],
[176,155,0,171,198,156,165,168],
[187,156,169,0,189,160,177,152],
[167,152,142,151,0,139,148,146],
[190,175,184,180,201,0,177,170],
[193,154,175,163,192,163,0,162],
[198,163,172,188,194,170,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,179,180,162,147,159,139],
[156,0,181,152,160,151,165,145],
[161,159,0,177,150,156,164,162],
[160,188,163,0,156,146,159,156],
[178,180,190,184,0,173,188,164],
[193,189,184,194,167,0,185,179],
[181,175,176,181,152,155,0,172],
[201,195,178,184,176,161,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,166,170,111,169,159,161],
[195,0,182,198,149,205,188,142],
[174,158,0,199,148,206,162,184],
[170,142,141,0,133,159,153,126],
[229,191,192,207,0,212,169,195],
[171,135,134,181,128,0,148,137],
[181,152,178,187,171,192,0,144],
[179,198,156,214,145,203,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,176,162,185,176,180,163],
[162,0,155,172,169,189,161,167],
[164,185,0,163,184,184,180,171],
[178,168,177,0,179,172,190,166],
[155,171,156,161,0,181,172,164],
[164,151,156,168,159,0,173,178],
[160,179,160,150,168,167,0,174],
[177,173,169,174,176,162,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,212,178,150,213,164,181],
[143,0,165,161,131,150,144,140],
[128,175,0,158,107,152,110,166],
[162,179,182,0,185,205,158,173],
[190,209,233,155,0,201,177,157],
[127,190,188,135,139,0,107,148],
[176,196,230,182,163,233,0,207],
[159,200,174,167,183,192,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,140,162,140,158,154,152],
[188,0,169,194,161,175,191,200],
[200,171,0,172,151,172,173,177],
[178,146,168,0,153,153,192,177],
[200,179,189,187,0,180,166,187],
[182,165,168,187,160,0,181,204],
[186,149,167,148,174,159,0,161],
[188,140,163,163,153,136,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,82,136,115,159,126,203],
[253,0,161,200,133,211,225,227],
[258,179,0,245,153,213,217,244],
[204,140,95,0,193,211,173,223],
[225,207,187,147,0,201,208,223],
[181,129,127,129,139,0,151,241],
[214,115,123,167,132,189,0,219],
[137,113,96,117,117,99,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,156,170,166,197,167,164],
[164,0,153,160,151,188,166,152],
[184,187,0,177,174,186,166,172],
[170,180,163,0,164,187,175,167],
[174,189,166,176,0,203,172,175],
[143,152,154,153,137,0,143,140],
[173,174,174,165,168,197,0,161],
[176,188,168,173,165,200,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,157,182,160,176,170,150],
[172,0,167,176,170,177,170,153],
[183,173,0,178,173,178,156,154],
[158,164,162,0,160,164,158,151],
[180,170,167,180,0,186,168,169],
[164,163,162,176,154,0,159,172],
[170,170,184,182,172,181,0,168],
[190,187,186,189,171,168,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,191,141,170,156,171,195],
[171,0,199,168,217,143,191,220],
[149,141,0,144,146,123,130,184],
[199,172,196,0,183,159,155,148],
[170,123,194,157,0,187,187,184],
[184,197,217,181,153,0,196,221],
[169,149,210,185,153,144,0,178],
[145,120,156,192,156,119,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,175,161,176,169,173,164],
[169,0,166,159,166,168,171,169],
[165,174,0,174,187,176,177,178],
[179,181,166,0,177,182,173,183],
[164,174,153,163,0,168,161,160],
[171,172,164,158,172,0,167,170],
[167,169,163,167,179,173,0,163],
[176,171,162,157,180,170,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,180,176,187,171,157,176],
[164,0,178,166,170,181,172,157],
[160,162,0,154,169,175,163,151],
[164,174,186,0,178,175,168,164],
[153,170,171,162,0,158,157,149],
[169,159,165,165,182,0,160,155],
[183,168,177,172,183,180,0,166],
[164,183,189,176,191,185,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,176,169,165,165,153,181],
[187,0,184,178,173,176,169,201],
[164,156,0,191,169,172,164,190],
[171,162,149,0,180,178,158,175],
[175,167,171,160,0,168,169,177],
[175,164,168,162,172,0,170,171],
[187,171,176,182,171,170,0,189],
[159,139,150,165,163,169,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,178,161,157,178,179,157],
[163,0,163,156,146,172,167,151],
[162,177,0,165,174,175,161,151],
[179,184,175,0,175,188,172,170],
[183,194,166,165,0,177,161,162],
[162,168,165,152,163,0,157,158],
[161,173,179,168,179,183,0,164],
[183,189,189,170,178,182,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,171,135,118,154,140,199],
[199,0,189,162,178,205,128,155],
[169,151,0,143,125,177,123,155],
[205,178,197,0,201,142,184,178],
[222,162,215,139,0,182,157,188],
[186,135,163,198,158,0,125,155],
[200,212,217,156,183,215,0,157],
[141,185,185,162,152,185,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,180,171,166,195,179,150],
[172,0,170,174,182,180,178,175],
[160,170,0,182,184,178,194,184],
[169,166,158,0,164,174,174,170],
[174,158,156,176,0,180,184,160],
[145,160,162,166,160,0,178,163],
[161,162,146,166,156,162,0,161],
[190,165,156,170,180,177,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,182,183,174,165,192,174],
[158,0,150,167,154,170,184,159],
[158,190,0,184,163,162,204,162],
[157,173,156,0,151,171,182,153],
[166,186,177,189,0,173,181,167],
[175,170,178,169,167,0,192,162],
[148,156,136,158,159,148,0,145],
[166,181,178,187,173,178,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,172,157,161,153,144,149],
[167,0,159,158,176,163,167,156],
[168,181,0,157,181,156,155,156],
[183,182,183,0,177,171,184,169],
[179,164,159,163,0,166,165,164],
[187,177,184,169,174,0,172,183],
[196,173,185,156,175,168,0,167],
[191,184,184,171,176,157,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,166,153,156,174,168,179],
[184,0,176,162,191,198,176,177],
[174,164,0,169,170,182,156,174],
[187,178,171,0,179,189,170,178],
[184,149,170,161,0,189,170,173],
[166,142,158,151,151,0,154,151],
[172,164,184,170,170,186,0,183],
[161,163,166,162,167,189,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,163,159,164,168,172,165],
[146,0,179,168,169,160,168,173],
[177,161,0,155,155,156,162,177],
[181,172,185,0,170,191,178,175],
[176,171,185,170,0,179,177,172],
[172,180,184,149,161,0,180,165],
[168,172,178,162,163,160,0,169],
[175,167,163,165,168,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,170,158,163,165,169,163],
[173,0,166,179,184,185,172,172],
[170,174,0,156,185,168,168,170],
[182,161,184,0,175,175,162,153],
[177,156,155,165,0,162,167,148],
[175,155,172,165,178,0,161,152],
[171,168,172,178,173,179,0,169],
[177,168,170,187,192,188,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,166,169,178,170,163,179],
[172,0,167,168,186,163,169,180],
[174,173,0,171,186,167,170,177],
[171,172,169,0,178,177,166,184],
[162,154,154,162,0,158,149,173],
[170,177,173,163,182,0,155,181],
[177,171,170,174,191,185,0,189],
[161,160,163,156,167,159,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,149,137,126,172,158,165],
[197,0,187,137,169,164,192,159],
[191,153,0,155,180,147,190,182],
[203,203,185,0,172,196,192,170],
[214,171,160,168,0,172,192,162],
[168,176,193,144,168,0,153,169],
[182,148,150,148,148,187,0,179],
[175,181,158,170,178,171,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,174,161,173,163,172,180],
[152,0,166,157,166,156,154,162],
[166,174,0,155,169,171,166,155],
[179,183,185,0,168,164,167,174],
[167,174,171,172,0,166,159,165],
[177,184,169,176,174,0,156,161],
[168,186,174,173,181,184,0,164],
[160,178,185,166,175,179,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,164,169,167,173,163,169],
[167,0,153,157,168,168,158,157],
[176,187,0,171,175,176,160,171],
[171,183,169,0,172,188,171,171],
[173,172,165,168,0,174,164,171],
[167,172,164,152,166,0,151,171],
[177,182,180,169,176,189,0,165],
[171,183,169,169,169,169,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,195,169,189,182,153,167],
[187,0,169,224,208,195,191,189],
[145,171,0,194,197,168,146,168],
[171,116,146,0,183,176,147,181],
[151,132,143,157,0,160,148,163],
[158,145,172,164,180,0,173,148],
[187,149,194,193,192,167,0,182],
[173,151,172,159,177,192,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,178,183,156,174,162,166],
[169,0,180,177,165,171,163,173],
[162,160,0,164,150,162,163,156],
[157,163,176,0,158,158,171,165],
[184,175,190,182,0,172,161,167],
[166,169,178,182,168,0,171,169],
[178,177,177,169,179,169,0,180],
[174,167,184,175,173,171,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,180,145,168,138,166,170],
[191,0,190,177,177,153,182,196],
[160,150,0,153,186,142,162,189],
[195,163,187,0,186,170,164,199],
[172,163,154,154,0,130,129,153],
[202,187,198,170,210,0,142,186],
[174,158,178,176,211,198,0,209],
[170,144,151,141,187,154,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,157,164,156,165,188,165],
[154,0,161,156,155,162,155,159],
[183,179,0,167,168,183,178,170],
[176,184,173,0,170,166,192,178],
[184,185,172,170,0,167,191,170],
[175,178,157,174,173,0,167,174],
[152,185,162,148,149,173,0,163],
[175,181,170,162,170,166,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,229,196,189,137,197,174],
[162,0,253,172,233,152,149,221],
[111,87,0,122,103,129,67,100],
[144,168,218,0,149,134,117,135],
[151,107,237,191,0,150,139,153],
[203,188,211,206,190,0,136,171],
[143,191,273,223,201,204,0,131],
[166,119,240,205,187,169,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,207,174,207,190,154,189],
[150,0,184,187,170,160,148,143],
[133,156,0,170,136,142,130,160],
[166,153,170,0,151,163,136,144],
[133,170,204,189,0,187,151,163],
[150,180,198,177,153,0,156,166],
[186,192,210,204,189,184,0,156],
[151,197,180,196,177,174,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,175,174,177,170,171,170],
[172,0,162,167,171,168,171,164],
[165,178,0,175,184,168,184,171],
[166,173,165,0,182,175,161,166],
[163,169,156,158,0,167,162,158],
[170,172,172,165,173,0,164,173],
[169,169,156,179,178,176,0,185],
[170,176,169,174,182,167,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,174,172,170,179,180,184],
[167,0,184,166,182,189,178,183],
[166,156,0,157,163,177,182,181],
[168,174,183,0,172,189,193,184],
[170,158,177,168,0,191,193,190],
[161,151,163,151,149,0,185,166],
[160,162,158,147,147,155,0,154],
[156,157,159,156,150,174,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,193,159,181,176,152,188],
[159,0,210,182,222,167,188,201],
[147,130,0,172,183,150,148,167],
[181,158,168,0,203,172,123,202],
[159,118,157,137,0,154,124,175],
[164,173,190,168,186,0,179,191],
[188,152,192,217,216,161,0,196],
[152,139,173,138,165,149,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,170,176,177,161,182,180],
[156,0,173,156,167,154,158,164],
[170,167,0,172,172,162,169,172],
[164,184,168,0,165,154,163,166],
[163,173,168,175,0,156,163,171],
[179,186,178,186,184,0,172,168],
[158,182,171,177,177,168,0,171],
[160,176,168,174,169,172,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,167,174,151,154,163,198],
[149,0,154,165,163,165,143,176],
[173,186,0,174,165,181,182,207],
[166,175,166,0,174,154,166,186],
[189,177,175,166,0,175,167,191],
[186,175,159,186,165,0,165,197],
[177,197,158,174,173,175,0,179],
[142,164,133,154,149,143,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,180,187,175,184,180,161],
[170,0,153,168,174,174,178,168],
[160,187,0,179,157,155,172,178],
[153,172,161,0,155,157,172,159],
[165,166,183,185,0,184,172,170],
[156,166,185,183,156,0,154,144],
[160,162,168,168,168,186,0,172],
[179,172,162,181,170,196,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,177,172,162,174,173,166],
[177,0,173,163,173,163,172,163],
[163,167,0,178,175,160,183,168],
[168,177,162,0,181,177,166,167],
[178,167,165,159,0,162,172,140],
[166,177,180,163,178,0,172,170],
[167,168,157,174,168,168,0,164],
[174,177,172,173,200,170,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,175,172,170,171,162,169],
[163,0,152,163,150,165,143,157],
[165,188,0,164,172,176,169,168],
[168,177,176,0,168,163,158,162],
[170,190,168,172,0,177,159,176],
[169,175,164,177,163,0,170,168],
[178,197,171,182,181,170,0,168],
[171,183,172,178,164,172,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,166,157,173,178,169,161],
[163,0,157,146,151,179,171,152],
[174,183,0,155,188,189,181,170],
[183,194,185,0,162,184,170,156],
[167,189,152,178,0,185,164,150],
[162,161,151,156,155,0,161,135],
[171,169,159,170,176,179,0,156],
[179,188,170,184,190,205,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,182,175,220,200,190,122],
[136,0,172,147,212,217,176,157],
[158,168,0,161,190,240,157,155],
[165,193,179,0,218,187,194,156],
[120,128,150,122,0,154,129,145],
[140,123,100,153,186,0,162,101],
[150,164,183,146,211,178,0,179],
[218,183,185,184,195,239,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,189,180,176,165,174,179],
[148,0,173,164,150,156,156,166],
[151,167,0,159,160,153,152,166],
[160,176,181,0,158,176,168,162],
[164,190,180,182,0,181,159,175],
[175,184,187,164,159,0,177,175],
[166,184,188,172,181,163,0,190],
[161,174,174,178,165,165,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,179,170,168,166,173,167],
[182,0,184,170,168,171,167,164],
[161,156,0,171,160,165,162,173],
[170,170,169,0,158,178,172,169],
[172,172,180,182,0,171,160,161],
[174,169,175,162,169,0,175,165],
[167,173,178,168,180,165,0,160],
[173,176,167,171,179,175,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,215,162,237,234,98,116],
[190,0,232,142,225,243,173,141],
[125,108,0,157,208,138,92,76],
[178,198,183,0,202,239,129,148],
[103,115,132,138,0,150,108,85],
[106,97,202,101,190,0,42,41],
[242,167,248,211,232,298,0,193],
[224,199,264,192,255,299,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,184,152,183,171,177,184],
[160,0,184,171,173,182,173,179],
[156,156,0,152,175,179,166,188],
[188,169,188,0,173,183,170,188],
[157,167,165,167,0,167,165,178],
[169,158,161,157,173,0,159,171],
[163,167,174,170,175,181,0,162],
[156,161,152,152,162,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,151,155,149,173,214,140],
[164,0,179,168,149,156,200,184],
[189,161,0,171,154,145,199,166],
[185,172,169,0,134,171,212,172],
[191,191,186,206,0,182,211,168],
[167,184,195,169,158,0,215,172],
[126,140,141,128,129,125,0,145],
[200,156,174,168,172,168,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,165,163,171,177,180,180],
[152,0,159,160,155,170,164,156],
[175,181,0,166,174,169,175,177],
[177,180,174,0,159,178,174,180],
[169,185,166,181,0,167,173,172],
[163,170,171,162,173,0,166,168],
[160,176,165,166,167,174,0,164],
[160,184,163,160,168,172,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,157,153,159,179,150,150],
[176,0,180,189,193,185,180,162],
[183,160,0,162,180,189,185,170],
[187,151,178,0,171,196,161,144],
[181,147,160,169,0,169,190,159],
[161,155,151,144,171,0,174,153],
[190,160,155,179,150,166,0,153],
[190,178,170,196,181,187,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,163,181,164,151,157,169],
[184,0,149,184,188,166,179,168],
[177,191,0,182,164,168,175,180],
[159,156,158,0,172,147,177,161],
[176,152,176,168,0,162,165,163],
[189,174,172,193,178,0,175,168],
[183,161,165,163,175,165,0,177],
[171,172,160,179,177,172,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,133,147,153,172,163,164],
[188,0,147,160,166,161,163,167],
[207,193,0,160,180,181,165,179],
[193,180,180,0,164,177,159,164],
[187,174,160,176,0,179,176,168],
[168,179,159,163,161,0,153,169],
[177,177,175,181,164,187,0,175],
[176,173,161,176,172,171,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,169,182,180,171,168,169],
[166,0,163,163,164,157,162,169],
[171,177,0,177,177,172,165,180],
[158,177,163,0,162,152,162,163],
[160,176,163,178,0,174,165,180],
[169,183,168,188,166,0,182,187],
[172,178,175,178,175,158,0,177],
[171,171,160,177,160,153,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,174,182,164,195,198,182],
[176,0,186,170,188,203,200,199],
[166,154,0,172,173,181,171,172],
[158,170,168,0,183,203,184,162],
[176,152,167,157,0,182,181,168],
[145,137,159,137,158,0,165,143],
[142,140,169,156,159,175,0,175],
[158,141,168,178,172,197,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,187,164,185,167,166,160],
[191,0,196,187,191,136,185,181],
[153,144,0,151,183,140,137,156],
[176,153,189,0,187,184,189,167],
[155,149,157,153,0,164,150,147],
[173,204,200,156,176,0,193,182],
[174,155,203,151,190,147,0,155],
[180,159,184,173,193,158,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,171,208,165,162,189,173],
[180,0,170,200,163,161,184,166],
[169,170,0,201,166,182,176,163],
[132,140,139,0,143,142,153,151],
[175,177,174,197,0,160,183,185],
[178,179,158,198,180,0,176,185],
[151,156,164,187,157,164,0,157],
[167,174,177,189,155,155,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,163,156,166,170,169,170],
[166,0,161,165,162,171,172,159],
[177,179,0,173,162,179,186,183],
[184,175,167,0,174,175,176,176],
[174,178,178,166,0,181,182,173],
[170,169,161,165,159,0,173,168],
[171,168,154,164,158,167,0,164],
[170,181,157,164,167,172,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,169,175,166,171,175,159],
[166,0,166,157,171,171,162,153],
[171,174,0,151,171,168,162,160],
[165,183,189,0,174,184,157,162],
[174,169,169,166,0,177,176,165],
[169,169,172,156,163,0,167,164],
[165,178,178,183,164,173,0,172],
[181,187,180,178,175,176,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,180,160,175,175,179,184],
[160,0,162,168,172,177,178,178],
[160,178,0,176,164,180,173,170],
[180,172,164,0,169,173,166,174],
[165,168,176,171,0,183,163,173],
[165,163,160,167,157,0,164,173],
[161,162,167,174,177,176,0,176],
[156,162,170,166,167,167,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,176,165,181,191,181,168],
[169,0,179,169,192,177,176,172],
[164,161,0,167,171,167,171,152],
[175,171,173,0,181,173,159,158],
[159,148,169,159,0,180,165,166],
[149,163,173,167,160,0,151,154],
[159,164,169,181,175,189,0,162],
[172,168,188,182,174,186,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,187,182,170,184,169,165],
[173,0,173,177,180,191,164,169],
[153,167,0,167,179,178,160,168],
[158,163,173,0,170,169,155,157],
[170,160,161,170,0,175,153,166],
[156,149,162,171,165,0,174,154],
[171,176,180,185,187,166,0,180],
[175,171,172,183,174,186,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,196,182,185,186,180,195],
[174,0,170,163,185,166,155,184],
[144,170,0,173,169,160,160,176],
[158,177,167,0,175,168,175,177],
[155,155,171,165,0,159,163,182],
[154,174,180,172,181,0,159,180],
[160,185,180,165,177,181,0,207],
[145,156,164,163,158,160,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,169,165,170,162,177,165],
[166,0,175,167,168,163,161,180],
[171,165,0,174,156,172,172,167],
[175,173,166,0,168,173,161,184],
[170,172,184,172,0,167,170,179],
[178,177,168,167,173,0,169,175],
[163,179,168,179,170,171,0,170],
[175,160,173,156,161,165,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,129,174,133,157,160,110],
[226,0,167,206,183,212,162,143],
[211,173,0,186,185,187,203,166],
[166,134,154,0,175,140,126,143],
[207,157,155,165,0,175,153,168],
[183,128,153,200,165,0,116,146],
[180,178,137,214,187,224,0,174],
[230,197,174,197,172,194,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,174,190,193,194,188,177],
[170,0,202,187,189,200,197,187],
[166,138,0,171,171,169,186,169],
[150,153,169,0,165,181,188,170],
[147,151,169,175,0,170,169,173],
[146,140,171,159,170,0,174,163],
[152,143,154,152,171,166,0,170],
[163,153,171,170,167,177,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,199,122,152,157,148,147],
[180,0,225,178,160,216,171,158],
[141,115,0,126,138,142,130,129],
[218,162,214,0,172,196,179,185],
[188,180,202,168,0,200,169,147],
[183,124,198,144,140,0,147,135],
[192,169,210,161,171,193,0,171],
[193,182,211,155,193,205,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,183,159,207,190,210,155],
[129,0,156,140,175,165,164,131],
[157,184,0,154,193,184,182,160],
[181,200,186,0,159,202,155,167],
[133,165,147,181,0,162,150,154],
[150,175,156,138,178,0,129,162],
[130,176,158,185,190,211,0,181],
[185,209,180,173,186,178,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,195,180,194,168,187],
[174,0,166,178,171,180,189,155],
[171,174,0,193,178,193,158,186],
[145,162,147,0,180,168,167,186],
[160,169,162,160,0,167,181,173],
[146,160,147,172,173,0,155,171],
[172,151,182,173,159,185,0,159],
[153,185,154,154,167,169,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,181,203,186,151,182,180],
[156,0,166,208,166,157,178,168],
[159,174,0,199,163,167,165,155],
[137,132,141,0,155,115,147,137],
[154,174,177,185,0,154,168,161],
[189,183,173,225,186,0,182,169],
[158,162,175,193,172,158,0,165],
[160,172,185,203,179,171,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,169,171,174,172,168,169],
[177,0,171,179,183,169,181,170],
[171,169,0,176,188,178,164,175],
[169,161,164,0,171,162,169,177],
[166,157,152,169,0,157,153,161],
[168,171,162,178,183,0,167,167],
[172,159,176,171,187,173,0,168],
[171,170,165,163,179,173,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,192,160,165,151,190,182],
[201,0,169,170,164,166,199,186],
[148,171,0,173,144,158,176,159],
[180,170,167,0,173,161,196,173],
[175,176,196,167,0,174,174,172],
[189,174,182,179,166,0,188,178],
[150,141,164,144,166,152,0,172],
[158,154,181,167,168,162,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,177,188,165,180,187,181],
[140,0,157,161,157,142,158,151],
[163,183,0,166,155,170,160,157],
[152,179,174,0,174,172,171,174],
[175,183,185,166,0,162,164,171],
[160,198,170,168,178,0,167,161],
[153,182,180,169,176,173,0,169],
[159,189,183,166,169,179,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,167,158,151,168,188,177],
[184,0,164,169,161,168,206,199],
[173,176,0,157,184,180,178,160],
[182,171,183,0,159,181,222,174],
[189,179,156,181,0,176,196,154],
[172,172,160,159,164,0,198,165],
[152,134,162,118,144,142,0,144],
[163,141,180,166,186,175,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,169,167,140,182,183,182],
[178,0,181,157,155,171,165,197],
[171,159,0,170,161,177,182,178],
[173,183,170,0,178,174,174,190],
[200,185,179,162,0,173,170,183],
[158,169,163,166,167,0,149,168],
[157,175,158,166,170,191,0,157],
[158,143,162,150,157,172,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,18,75,146,134,126,123],
[274,0,142,199,274,138,180,195],
[322,198,0,232,146,223,112,123],
[265,141,108,0,141,209,108,123],
[194,66,194,199,0,134,126,191],
[206,202,117,131,206,0,117,71],
[214,160,228,232,214,223,0,139],
[217,145,217,217,149,269,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,193,173,162,166,171,163],
[162,0,187,165,158,152,164,159],
[147,153,0,128,158,150,129,150],
[167,175,212,0,189,164,171,206],
[178,182,182,151,0,177,159,176],
[174,188,190,176,163,0,169,169],
[169,176,211,169,181,171,0,160],
[177,181,190,134,164,171,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,166,176,160,177,159,181],
[150,0,151,176,163,185,176,191],
[174,189,0,169,175,187,169,198],
[164,164,171,0,175,180,156,177],
[180,177,165,165,0,182,150,183],
[163,155,153,160,158,0,146,157],
[181,164,171,184,190,194,0,196],
[159,149,142,163,157,183,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,162,154,205,186,172,196],
[181,0,160,173,182,156,157,166],
[178,180,0,156,203,172,165,166],
[186,167,184,0,201,181,172,189],
[135,158,137,139,0,148,154,150],
[154,184,168,159,192,0,173,172],
[168,183,175,168,186,167,0,193],
[144,174,174,151,190,168,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,194,182,176,148,187,192],
[167,0,204,173,166,154,194,165],
[146,136,0,131,138,133,151,164],
[158,167,209,0,172,163,152,174],
[164,174,202,168,0,177,184,179],
[192,186,207,177,163,0,214,179],
[153,146,189,188,156,126,0,185],
[148,175,176,166,161,161,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,178,170,171,169,168,177],
[168,0,180,167,176,160,170,176],
[162,160,0,164,175,167,164,171],
[170,173,176,0,172,157,164,169],
[169,164,165,168,0,161,171,163],
[171,180,173,183,179,0,170,172],
[172,170,176,176,169,170,0,168],
[163,164,169,171,177,168,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,195,186,190,178,169,192],
[160,0,168,168,165,181,147,180],
[145,172,0,170,181,180,169,179],
[154,172,170,0,164,180,156,176],
[150,175,159,176,0,187,172,188],
[162,159,160,160,153,0,151,176],
[171,193,171,184,168,189,0,191],
[148,160,161,164,152,164,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,145,158,203,174,172,157],
[185,0,159,177,183,172,146,160],
[195,181,0,156,209,166,182,178],
[182,163,184,0,209,153,182,163],
[137,157,131,131,0,130,139,141],
[166,168,174,187,210,0,170,154],
[168,194,158,158,201,170,0,159],
[183,180,162,177,199,186,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,164,168,164,160,165,178],
[174,0,174,169,178,170,167,183],
[176,166,0,164,178,164,166,173],
[172,171,176,0,181,160,169,194],
[176,162,162,159,0,160,178,171],
[180,170,176,180,180,0,160,172],
[175,173,174,171,162,180,0,179],
[162,157,167,146,169,168,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,149,143,158,163,158,137],
[200,0,175,167,175,171,189,170],
[191,165,0,151,172,167,160,174],
[197,173,189,0,179,183,182,163],
[182,165,168,161,0,168,156,160],
[177,169,173,157,172,0,168,166],
[182,151,180,158,184,172,0,178],
[203,170,166,177,180,174,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,175,182,170,185,187,198],
[156,0,153,147,163,146,172,173],
[165,187,0,179,167,178,173,183],
[158,193,161,0,159,154,182,180],
[170,177,173,181,0,152,188,177],
[155,194,162,186,188,0,180,192],
[153,168,167,158,152,160,0,184],
[142,167,157,160,163,148,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,172,164,183,187,175,157],
[176,0,159,170,171,184,160,169],
[168,181,0,151,164,190,159,144],
[176,170,189,0,177,186,173,159],
[157,169,176,163,0,177,168,164],
[153,156,150,154,163,0,159,142],
[165,180,181,167,172,181,0,176],
[183,171,196,181,176,198,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,172,166,154,163,177,160],
[184,0,170,173,152,171,182,173],
[168,170,0,187,161,162,181,167],
[174,167,153,0,170,168,189,165],
[186,188,179,170,0,187,192,177],
[177,169,178,172,153,0,188,169],
[163,158,159,151,148,152,0,145],
[180,167,173,175,163,171,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,169,190,184,160,183,174],
[136,0,177,151,155,157,160,136],
[171,163,0,147,143,137,144,167],
[150,189,193,0,192,160,178,175],
[156,185,197,148,0,194,189,173],
[180,183,203,180,146,0,173,172],
[157,180,196,162,151,167,0,182],
[166,204,173,165,167,168,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,161,177,172,168,166,181],
[171,0,158,161,179,159,159,167],
[179,182,0,177,177,171,158,170],
[163,179,163,0,159,150,157,172],
[168,161,163,181,0,167,164,179],
[172,181,169,190,173,0,172,187],
[174,181,182,183,176,168,0,188],
[159,173,170,168,161,153,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,180,153,154,101,129,109],
[210,0,188,208,210,161,171,141],
[160,152,0,132,137,138,165,128],
[187,132,208,0,168,157,153,144],
[186,130,203,172,0,167,175,168],
[239,179,202,183,173,0,172,155],
[211,169,175,187,165,168,0,180],
[231,199,212,196,172,185,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,185,178,169,182,177,175],
[167,0,188,161,171,172,158,179],
[155,152,0,153,164,173,161,156],
[162,179,187,0,165,190,174,188],
[171,169,176,175,0,182,172,180],
[158,168,167,150,158,0,163,158],
[163,182,179,166,168,177,0,171],
[165,161,184,152,160,182,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,94,180,167,142,105,167],
[173,0,121,164,123,151,123,161],
[246,219,0,194,207,165,196,231],
[160,176,146,0,182,202,169,172],
[173,217,133,158,0,147,158,147],
[198,189,175,138,193,0,168,168],
[235,217,144,171,182,172,0,178],
[173,179,109,168,193,172,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,175,206,178,172,179,160],
[158,0,193,212,188,170,169,185],
[165,147,0,189,175,162,163,170],
[134,128,151,0,154,147,133,152],
[162,152,165,186,0,170,176,168],
[168,170,178,193,170,0,160,170],
[161,171,177,207,164,180,0,164],
[180,155,170,188,172,170,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,162,173,169,174,180,172],
[171,0,174,172,166,167,172,177],
[178,166,0,176,162,165,167,168],
[167,168,164,0,157,168,171,176],
[171,174,178,183,0,175,178,169],
[166,173,175,172,165,0,181,180],
[160,168,173,169,162,159,0,164],
[168,163,172,164,171,160,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,193,164,168,183,172,181],
[174,0,189,165,181,178,172,173],
[147,151,0,146,162,160,149,161],
[176,175,194,0,169,178,171,169],
[172,159,178,171,0,155,184,169],
[157,162,180,162,185,0,177,168],
[168,168,191,169,156,163,0,178],
[159,167,179,171,171,172,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,153,154,154,162,155,159],
[170,0,176,160,154,158,161,150],
[187,164,0,168,179,183,176,162],
[186,180,172,0,172,173,174,170],
[186,186,161,168,0,171,170,165],
[178,182,157,167,169,0,176,163],
[185,179,164,166,170,164,0,159],
[181,190,178,170,175,177,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,183,177,175,176,175,170],
[164,0,187,176,176,157,162,172],
[157,153,0,160,153,164,148,169],
[163,164,180,0,183,163,157,166],
[165,164,187,157,0,158,145,146],
[164,183,176,177,182,0,165,162],
[165,178,192,183,195,175,0,170],
[170,168,171,174,194,178,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,180,169,181,179,170,169],
[163,0,179,170,172,170,168,170],
[160,161,0,173,171,166,153,163],
[171,170,167,0,188,173,177,165],
[159,168,169,152,0,161,163,160],
[161,170,174,167,179,0,171,170],
[170,172,187,163,177,169,0,172],
[171,170,177,175,180,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,166,186,177,191,159,165],
[169,0,168,198,176,173,171,171],
[174,172,0,170,186,174,170,171],
[154,142,170,0,165,178,166,159],
[163,164,154,175,0,158,171,166],
[149,167,166,162,182,0,162,158],
[181,169,170,174,169,178,0,153],
[175,169,169,181,174,182,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,197,186,166,177,176,167],
[155,0,180,173,171,162,163,158],
[143,160,0,166,154,162,168,157],
[154,167,174,0,161,159,162,160],
[174,169,186,179,0,169,178,170],
[163,178,178,181,171,0,162,163],
[164,177,172,178,162,178,0,165],
[173,182,183,180,170,177,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,175,163,163,162,166,161],
[173,0,171,157,155,160,173,161],
[165,169,0,175,170,178,177,184],
[177,183,165,0,162,173,180,186],
[177,185,170,178,0,167,183,181],
[178,180,162,167,173,0,179,182],
[174,167,163,160,157,161,0,163],
[179,179,156,154,159,158,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,151,178,182,166,152,162],
[171,0,154,182,160,184,166,161],
[189,186,0,165,166,182,164,162],
[162,158,175,0,178,183,182,171],
[158,180,174,162,0,193,152,188],
[174,156,158,157,147,0,152,147],
[188,174,176,158,188,188,0,172],
[178,179,178,169,152,193,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,177,168,183,160,167,163],
[184,0,181,186,180,159,192,181],
[163,159,0,168,175,161,173,168],
[172,154,172,0,166,170,169,175],
[157,160,165,174,0,167,181,165],
[180,181,179,170,173,0,182,170],
[173,148,167,171,159,158,0,167],
[177,159,172,165,175,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,133,148,187,240,128,202],
[187,0,147,128,193,139,141,218],
[207,193,0,196,178,162,196,233],
[192,212,144,0,200,202,159,277],
[153,147,162,140,0,195,138,206],
[100,201,178,138,145,0,151,171],
[212,199,144,181,202,189,0,197],
[138,122,107,63,134,169,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,173,177,177,164,185,180],
[170,0,185,186,191,182,189,187],
[167,155,0,162,164,155,180,172],
[163,154,178,0,168,147,180,160],
[163,149,176,172,0,151,163,161],
[176,158,185,193,189,0,194,175],
[155,151,160,160,177,146,0,175],
[160,153,168,180,179,165,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,163,187,184,181,177,196],
[180,0,169,191,185,178,171,197],
[177,171,0,184,180,163,165,168],
[153,149,156,0,168,143,177,164],
[156,155,160,172,0,144,151,170],
[159,162,177,197,196,0,187,176],
[163,169,175,163,189,153,0,181],
[144,143,172,176,170,164,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,165,173,168,168,169],
[181,0,172,168,154,168,170,168],
[177,168,0,156,158,173,165,164],
[175,172,184,0,162,185,173,160],
[167,186,182,178,0,192,178,185],
[172,172,167,155,148,0,161,156],
[172,170,175,167,162,179,0,178],
[171,172,176,180,155,184,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,182,177,195,174,187,165],
[160,0,178,147,176,162,172,181],
[158,162,0,179,184,163,165,164],
[163,193,161,0,177,167,167,176],
[145,164,156,163,0,149,151,160],
[166,178,177,173,191,0,170,171],
[153,168,175,173,189,170,0,166],
[175,159,176,164,180,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,138,147,182,137,124,117],
[185,0,154,187,135,199,176,155],
[202,186,0,194,149,142,148,127],
[193,153,146,0,140,155,140,168],
[158,205,191,200,0,194,195,146],
[203,141,198,185,146,0,181,174],
[216,164,192,200,145,159,0,185],
[223,185,213,172,194,166,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,145,157,159,162,146,156],
[195,0,174,174,177,190,170,180],
[195,166,0,170,174,193,164,174],
[183,166,170,0,167,192,158,174],
[181,163,166,173,0,173,164,164],
[178,150,147,148,167,0,149,156],
[194,170,176,182,176,191,0,171],
[184,160,166,166,176,184,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,160,186,178,185,183,181],
[164,0,148,180,167,178,175,174],
[180,192,0,167,182,182,192,171],
[154,160,173,0,183,163,184,170],
[162,173,158,157,0,174,165,172],
[155,162,158,177,166,0,167,168],
[157,165,148,156,175,173,0,173],
[159,166,169,170,168,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,149,148,154,159,160,164],
[164,0,158,156,98,175,186,178],
[191,182,0,208,118,148,151,115],
[192,184,132,0,152,234,141,159],
[186,242,222,188,0,212,168,211],
[181,165,192,106,128,0,95,129],
[180,154,189,199,172,245,0,160],
[176,162,225,181,129,211,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,170,146,162,171,159,171],
[169,0,160,163,156,190,175,177],
[170,180,0,151,178,196,181,184],
[194,177,189,0,186,174,170,188],
[178,184,162,154,0,195,154,170],
[169,150,144,166,145,0,148,153],
[181,165,159,170,186,192,0,199],
[169,163,156,152,170,187,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,185,177,170,190,183,170],
[150,0,192,172,147,172,181,175],
[155,148,0,168,139,151,175,160],
[163,168,172,0,164,160,166,155],
[170,193,201,176,0,195,193,176],
[150,168,189,180,145,0,189,171],
[157,159,165,174,147,151,0,156],
[170,165,180,185,164,169,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,178,159,166,168,177,165],
[173,0,180,169,167,171,166,168],
[162,160,0,161,159,177,171,169],
[181,171,179,0,173,174,169,176],
[174,173,181,167,0,183,170,174],
[172,169,163,166,157,0,169,170],
[163,174,169,171,170,171,0,175],
[175,172,171,164,166,170,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,176,172,179,156,169,168],
[156,0,158,174,168,170,172,162],
[164,182,0,165,183,168,170,164],
[168,166,175,0,185,169,167,162],
[161,172,157,155,0,149,165,151],
[184,170,172,171,191,0,178,176],
[171,168,170,173,175,162,0,160],
[172,178,176,178,189,164,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,163,164,160,168,166,177],
[168,0,169,162,179,174,183,192],
[177,171,0,162,158,171,175,186],
[176,178,178,0,167,183,188,189],
[180,161,182,173,0,185,190,190],
[172,166,169,157,155,0,174,175],
[174,157,165,152,150,166,0,173],
[163,148,154,151,150,165,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,198,180,174,170,168,164],
[152,0,189,174,167,150,154,167],
[142,151,0,166,158,152,133,134],
[160,166,174,0,170,183,148,165],
[166,173,182,170,0,171,162,177],
[170,190,188,157,169,0,159,147],
[172,186,207,192,178,181,0,169],
[176,173,206,175,163,193,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,188,175,179,187,189,178],
[173,0,192,169,184,181,184,195],
[152,148,0,161,168,163,186,152],
[165,171,179,0,171,164,167,165],
[161,156,172,169,0,148,161,176],
[153,159,177,176,192,0,184,181],
[151,156,154,173,179,156,0,161],
[162,145,188,175,164,159,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,158,151,157,143,168,174],
[202,0,182,186,195,165,174,191],
[182,158,0,168,187,170,180,175],
[189,154,172,0,177,156,167,173],
[183,145,153,163,0,150,144,168],
[197,175,170,184,190,0,185,201],
[172,166,160,173,196,155,0,187],
[166,149,165,167,172,139,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,172,150,168,168,158,150],
[162,0,160,149,153,159,157,149],
[168,180,0,162,156,173,155,177],
[190,191,178,0,168,192,170,179],
[172,187,184,172,0,197,179,163],
[172,181,167,148,143,0,143,156],
[182,183,185,170,161,197,0,181],
[190,191,163,161,177,184,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,185,187,175,173,186,166],
[168,0,182,174,185,183,185,160],
[155,158,0,174,155,150,172,157],
[153,166,166,0,165,167,162,147],
[165,155,185,175,0,161,169,155],
[167,157,190,173,179,0,173,174],
[154,155,168,178,171,167,0,159],
[174,180,183,193,185,166,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,209,168,163,163,115,185],
[127,0,170,174,173,145,131,139],
[131,170,0,160,177,160,142,157],
[172,166,180,0,218,149,137,141],
[177,167,163,122,0,124,136,158],
[177,195,180,191,216,0,185,160],
[225,209,198,203,204,155,0,190],
[155,201,183,199,182,180,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,164,170,192,166,168,182],
[177,0,169,165,198,171,165,174],
[176,171,0,175,189,170,167,197],
[170,175,165,0,189,166,151,177],
[148,142,151,151,0,151,148,164],
[174,169,170,174,189,0,182,181],
[172,175,173,189,192,158,0,192],
[158,166,143,163,176,159,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,158,167,172,136,193,174],
[153,0,147,172,168,143,151,162],
[182,193,0,184,153,157,158,171],
[173,168,156,0,180,129,177,187],
[168,172,187,160,0,172,184,177],
[204,197,183,211,168,0,181,178],
[147,189,182,163,156,159,0,181],
[166,178,169,153,163,162,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,155,228,212,169,189,240],
[184,0,198,215,227,221,188,169],
[185,142,0,232,217,193,147,144],
[112,125,108,0,185,121,116,169],
[128,113,123,155,0,122,128,135],
[171,119,147,219,218,0,154,181],
[151,152,193,224,212,186,0,165],
[100,171,196,171,205,159,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,130,141,192,120,183,166],
[170,0,160,183,196,203,166,195],
[210,180,0,144,212,124,196,204],
[199,157,196,0,252,123,254,228],
[148,144,128,88,0,59,155,227],
[220,137,216,217,281,0,253,219],
[157,174,144,86,185,87,0,157],
[174,145,136,112,113,121,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,182,164,173,179,174,189],
[160,0,191,166,167,172,167,177],
[158,149,0,143,154,166,144,151],
[176,174,197,0,169,176,166,185],
[167,173,186,171,0,174,178,185],
[161,168,174,164,166,0,170,172],
[166,173,196,174,162,170,0,174],
[151,163,189,155,155,168,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,161,169,164,170,154,155],
[185,0,200,169,184,189,174,183],
[179,140,0,171,169,172,158,159],
[171,171,169,0,164,176,164,161],
[176,156,171,176,0,180,166,164],
[170,151,168,164,160,0,148,147],
[186,166,182,176,174,192,0,172],
[185,157,181,179,176,193,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,185,174,163,165,176,177],
[178,0,178,166,173,180,171,173],
[155,162,0,169,169,165,152,170],
[166,174,171,0,165,173,160,178],
[177,167,171,175,0,171,169,181],
[175,160,175,167,169,0,170,171],
[164,169,188,180,171,170,0,182],
[163,167,170,162,159,169,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,166,161,170,156,159,147],
[164,0,173,171,162,165,162,165],
[174,167,0,176,162,154,162,159],
[179,169,164,0,171,157,162,168],
[170,178,178,169,0,166,161,172],
[184,175,186,183,174,0,184,168],
[181,178,178,178,179,156,0,181],
[193,175,181,172,168,172,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,173,169,179,180,161,185],
[157,0,172,170,177,176,166,170],
[167,168,0,163,168,179,173,168],
[171,170,177,0,182,173,166,178],
[161,163,172,158,0,180,161,172],
[160,164,161,167,160,0,159,181],
[179,174,167,174,179,181,0,180],
[155,170,172,162,168,159,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,190,139,176,158,178,158],
[101,0,119,116,111,125,94,128],
[150,221,0,117,109,178,129,192],
[201,224,223,0,161,190,190,206],
[164,229,231,179,0,190,161,223],
[182,215,162,150,150,0,183,223],
[162,246,211,150,179,157,0,160],
[182,212,148,134,117,117,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,143,207,146,224,217,149],
[129,0,175,183,128,189,172,120],
[197,165,0,194,118,173,167,153],
[133,157,146,0,136,184,123,97],
[194,212,222,204,0,231,187,162],
[116,151,167,156,109,0,147,116],
[123,168,173,217,153,193,0,172],
[191,220,187,243,178,224,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,155,161,160,173,160,162],
[168,0,158,157,153,174,162,165],
[185,182,0,185,177,185,169,170],
[179,183,155,0,172,180,171,176],
[180,187,163,168,0,172,167,168],
[167,166,155,160,168,0,165,169],
[180,178,171,169,173,175,0,170],
[178,175,170,164,172,171,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,164,195,189,187,171,190],
[166,0,161,165,174,189,171,184],
[176,179,0,175,179,185,171,167],
[145,175,165,0,173,191,164,163],
[151,166,161,167,0,166,157,160],
[153,151,155,149,174,0,171,167],
[169,169,169,176,183,169,0,186],
[150,156,173,177,180,173,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,172,175,177,161,166,151],
[165,0,158,158,154,166,163,169],
[168,182,0,173,188,185,180,161],
[165,182,167,0,170,160,174,164],
[163,186,152,170,0,169,180,162],
[179,174,155,180,171,0,187,175],
[174,177,160,166,160,153,0,158],
[189,171,179,176,178,165,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,177,140,171,155,160,149],
[173,0,173,164,160,147,132,164],
[163,167,0,145,146,151,129,164],
[200,176,195,0,200,194,179,151],
[169,180,194,140,0,165,183,189],
[185,193,189,146,175,0,145,173],
[180,208,211,161,157,195,0,173],
[191,176,176,189,151,167,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,161,158,170,163,166,182],
[165,0,164,183,177,181,170,179],
[179,176,0,175,170,159,180,166],
[182,157,165,0,170,164,167,164],
[170,163,170,170,0,162,176,185],
[177,159,181,176,178,0,189,189],
[174,170,160,173,164,151,0,171],
[158,161,174,176,155,151,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,169,176,171,158,168,203],
[157,0,165,167,162,150,161,187],
[171,175,0,165,182,166,166,177],
[164,173,175,0,162,152,170,192],
[169,178,158,178,0,163,180,181],
[182,190,174,188,177,0,164,197],
[172,179,174,170,160,176,0,191],
[137,153,163,148,159,143,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,170,160,179,183,177,175],
[166,0,154,160,167,171,163,172],
[170,186,0,181,177,170,188,181],
[180,180,159,0,178,177,181,173],
[161,173,163,162,0,170,176,169],
[157,169,170,163,170,0,170,164],
[163,177,152,159,164,170,0,167],
[165,168,159,167,171,176,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,163,184,144,170,166,157],
[158,0,163,187,152,167,129,165],
[177,177,0,188,150,174,172,158],
[156,153,152,0,146,163,151,132],
[196,188,190,194,0,161,176,174],
[170,173,166,177,179,0,167,159],
[174,211,168,189,164,173,0,171],
[183,175,182,208,166,181,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,144,155,161,167,159,149],
[205,0,180,191,160,196,155,170],
[196,160,0,154,188,190,178,176],
[185,149,186,0,159,187,178,155],
[179,180,152,181,0,192,163,189],
[173,144,150,153,148,0,164,178],
[181,185,162,162,177,176,0,159],
[191,170,164,185,151,162,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,204,133,172,175,134,162],
[236,0,194,146,188,168,176,174],
[136,146,0,194,145,174,176,187],
[207,194,146,0,153,138,167,222],
[168,152,195,187,0,199,166,173],
[165,172,166,202,141,0,186,149],
[206,164,164,173,174,154,0,153],
[178,166,153,118,167,191,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,160,196,182,139,146,160],
[171,0,156,217,190,174,170,192],
[180,184,0,212,175,161,148,205],
[144,123,128,0,157,127,129,146],
[158,150,165,183,0,143,140,176],
[201,166,179,213,197,0,155,183],
[194,170,192,211,200,185,0,166],
[180,148,135,194,164,157,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,172,188,181,174,172,173],
[171,0,159,172,162,150,181,178],
[168,181,0,177,170,154,173,154],
[152,168,163,0,157,150,163,153],
[159,178,170,183,0,163,168,183],
[166,190,186,190,177,0,171,169],
[168,159,167,177,172,169,0,162],
[167,162,186,187,157,171,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,151,168,164,175,164,157],
[171,0,165,175,175,183,163,173],
[189,175,0,197,173,190,179,167],
[172,165,143,0,176,167,167,170],
[176,165,167,164,0,182,164,152],
[165,157,150,173,158,0,162,158],
[176,177,161,173,176,178,0,161],
[183,167,173,170,188,182,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,184,177,171,159,171,174],
[169,0,166,160,167,169,165,173],
[156,174,0,165,170,170,163,180],
[163,180,175,0,169,162,156,177],
[169,173,170,171,0,165,173,175],
[181,171,170,178,175,0,168,180],
[169,175,177,184,167,172,0,182],
[166,167,160,163,165,160,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,180,175,169,161,172,162],
[172,0,178,161,179,166,165,157],
[160,162,0,151,160,157,163,154],
[165,179,189,0,168,158,174,153],
[171,161,180,172,0,172,156,154],
[179,174,183,182,168,0,183,172],
[168,175,177,166,184,157,0,159],
[178,183,186,187,186,168,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,186,165,170,177,165,186],
[203,0,191,173,168,188,190,194],
[154,149,0,147,168,185,144,167],
[175,167,193,0,183,193,173,179],
[170,172,172,157,0,198,169,180],
[163,152,155,147,142,0,154,162],
[175,150,196,167,171,186,0,184],
[154,146,173,161,160,178,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,170,203,195,179,153,159],
[190,0,212,196,151,167,193,190],
[170,128,0,177,184,145,196,156],
[137,144,163,0,191,135,179,169],
[145,189,156,149,0,156,168,168],
[161,173,195,205,184,0,210,164],
[187,147,144,161,172,130,0,180],
[181,150,184,171,172,176,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,136,152,134,152,134,148],
[183,0,158,158,145,147,156,167],
[204,182,0,172,141,178,153,168],
[188,182,168,0,162,170,176,157],
[206,195,199,178,0,187,158,185],
[188,193,162,170,153,0,173,179],
[206,184,187,164,182,167,0,174],
[192,173,172,183,155,161,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,149,183,118,130,126,138],
[186,0,160,167,180,146,159,155],
[191,180,0,168,120,155,120,174],
[157,173,172,0,110,124,129,157],
[222,160,220,230,0,208,194,170],
[210,194,185,216,132,0,175,154],
[214,181,220,211,146,165,0,140],
[202,185,166,183,170,186,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,156,179,166,181,176,176],
[165,0,146,163,170,174,179,180],
[184,194,0,166,176,189,176,191],
[161,177,174,0,148,182,178,171],
[174,170,164,192,0,184,186,182],
[159,166,151,158,156,0,160,165],
[164,161,164,162,154,180,0,173],
[164,160,149,169,158,175,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,173,175,172,166,176,163],
[171,0,172,170,178,169,178,157],
[167,168,0,164,181,169,179,167],
[165,170,176,0,183,165,174,172],
[168,162,159,157,0,158,170,160],
[174,171,171,175,182,0,178,166],
[164,162,161,166,170,162,0,154],
[177,183,173,168,180,174,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,177,184,175,171,171,178],
[171,0,171,173,165,169,167,172],
[163,169,0,188,175,172,158,174],
[156,167,152,0,153,162,167,164],
[165,175,165,187,0,169,157,164],
[169,171,168,178,171,0,163,169],
[169,173,182,173,183,177,0,173],
[162,168,166,176,176,171,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,194,195,150,162,159,176],
[167,0,201,190,179,169,182,177],
[146,139,0,168,151,149,154,156],
[145,150,172,0,138,170,170,167],
[190,161,189,202,0,177,181,192],
[178,171,191,170,163,0,180,154],
[181,158,186,170,159,160,0,175],
[164,163,184,173,148,186,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,166,169,163,156,154,171],
[177,0,174,178,162,158,163,175],
[174,166,0,169,162,162,157,168],
[171,162,171,0,170,166,172,161],
[177,178,178,170,0,172,174,166],
[184,182,178,174,168,0,161,169],
[186,177,183,168,166,179,0,170],
[169,165,172,179,174,171,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,157,190,165,157,183,176],
[168,0,166,187,191,178,182,176],
[183,174,0,179,180,168,175,172],
[150,153,161,0,159,158,160,171],
[175,149,160,181,0,179,161,181],
[183,162,172,182,161,0,173,179],
[157,158,165,180,179,167,0,173],
[164,164,168,169,159,161,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,177,145,164,152,147,172],
[180,0,178,172,176,165,162,173],
[163,162,0,149,170,162,144,144],
[195,168,191,0,180,176,172,183],
[176,164,170,160,0,167,167,169],
[188,175,178,164,173,0,167,175],
[193,178,196,168,173,173,0,183],
[168,167,196,157,171,165,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,0,160,78,242,146,140],
[258,0,176,160,224,258,224,258],
[340,164,0,248,176,340,234,224],
[180,180,92,0,146,180,146,170],
[262,116,164,194,0,178,190,168],
[98,82,0,160,162,0,152,62],
[194,116,106,194,150,188,0,188],
[200,82,116,170,172,278,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,163,176,179,171,171,172],
[177,0,170,172,178,163,165,174],
[177,170,0,181,188,169,164,176],
[164,168,159,0,190,162,171,180],
[161,162,152,150,0,149,155,167],
[169,177,171,178,191,0,172,170],
[169,175,176,169,185,168,0,174],
[168,166,164,160,173,170,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,161,165,179,171,174,180],
[165,0,155,153,169,170,165,162],
[179,185,0,160,177,185,176,166],
[175,187,180,0,175,175,174,166],
[161,171,163,165,0,162,162,167],
[169,170,155,165,178,0,173,170],
[166,175,164,166,178,167,0,161],
[160,178,174,174,173,170,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,174,150,163,183,147,173],
[143,0,192,180,192,179,171,210],
[166,148,0,149,159,150,138,175],
[190,160,191,0,176,162,177,178],
[177,148,181,164,0,146,171,179],
[157,161,190,178,194,0,139,184],
[193,169,202,163,169,201,0,213],
[167,130,165,162,161,156,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,168,167,183,169,187,197],
[173,0,171,161,172,164,172,157],
[172,169,0,182,184,159,201,188],
[173,179,158,0,172,167,173,181],
[157,168,156,168,0,171,159,162],
[171,176,181,173,169,0,177,173],
[153,168,139,167,181,163,0,173],
[143,183,152,159,178,167,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,179,182,166,171,170,173],
[181,0,176,181,170,182,167,174],
[161,164,0,167,161,172,156,152],
[158,159,173,0,151,173,161,148],
[174,170,179,189,0,179,185,174],
[169,158,168,167,161,0,159,152],
[170,173,184,179,155,181,0,160],
[167,166,188,192,166,188,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,179,173,179,168,180],
[174,0,161,172,162,170,172,174],
[171,179,0,184,172,168,180,180],
[161,168,156,0,173,170,169,175],
[167,178,168,167,0,173,170,172],
[161,170,172,170,167,0,172,176],
[172,168,160,171,170,168,0,177],
[160,166,160,165,168,164,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,166,190,222,197,160,184],
[134,0,160,139,161,187,153,165],
[174,180,0,195,173,199,168,177],
[150,201,145,0,188,187,174,188],
[118,179,167,152,0,179,176,153],
[143,153,141,153,161,0,147,152],
[180,187,172,166,164,193,0,192],
[156,175,163,152,187,188,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,197,155,194,187,177,175],
[150,0,197,161,194,180,167,190],
[143,143,0,146,161,165,157,158],
[185,179,194,0,175,193,165,188],
[146,146,179,165,0,163,162,184],
[153,160,175,147,177,0,167,179],
[163,173,183,175,178,173,0,174],
[165,150,182,152,156,161,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,184,158,119,127,146,167],
[189,0,186,169,145,184,147,166],
[156,154,0,149,129,160,156,167],
[182,171,191,0,156,180,154,166],
[221,195,211,184,0,193,168,180],
[213,156,180,160,147,0,152,174],
[194,193,184,186,172,188,0,163],
[173,174,173,174,160,166,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,172,174,154,169,162,159],
[182,0,167,203,178,180,170,175],
[168,173,0,199,176,172,184,155],
[166,137,141,0,162,153,145,143],
[186,162,164,178,0,165,169,174],
[171,160,168,187,175,0,185,171],
[178,170,156,195,171,155,0,172],
[181,165,185,197,166,169,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,171,177,178,170,183,165],
[174,0,171,181,189,173,182,170],
[169,169,0,184,176,169,187,169],
[163,159,156,0,169,168,172,161],
[162,151,164,171,0,165,170,163],
[170,167,171,172,175,0,179,163],
[157,158,153,168,170,161,0,154],
[175,170,171,179,177,177,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,174,183,169,186,181,177],
[155,0,168,169,172,159,158,174],
[166,172,0,171,173,167,166,161],
[157,171,169,0,174,166,177,162],
[171,168,167,166,0,159,167,152],
[154,181,173,174,181,0,174,178],
[159,182,174,163,173,166,0,179],
[163,166,179,178,188,162,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,164,157,160,164,155],
[173,0,169,163,167,184,169,169],
[173,171,0,170,172,160,172,169],
[176,177,170,0,172,166,166,163],
[183,173,168,168,0,168,165,170],
[180,156,180,174,172,0,156,166],
[176,171,168,174,175,184,0,168],
[185,171,171,177,170,174,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,165,160,169,163,168,160],
[174,0,160,171,165,160,166,182],
[175,180,0,172,177,152,176,169],
[180,169,168,0,179,171,183,168],
[171,175,163,161,0,163,165,166],
[177,180,188,169,177,0,180,174],
[172,174,164,157,175,160,0,161],
[180,158,171,172,174,166,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,160,164,169,173,178,165],
[138,0,138,144,150,169,167,152],
[180,202,0,164,184,182,154,182],
[176,196,176,0,185,173,164,170],
[171,190,156,155,0,177,158,169],
[167,171,158,167,163,0,178,147],
[162,173,186,176,182,162,0,171],
[175,188,158,170,171,193,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,176,179,175,183,171,178],
[195,0,196,190,170,188,194,181],
[164,144,0,172,155,167,171,170],
[161,150,168,0,157,160,171,154],
[165,170,185,183,0,193,181,187],
[157,152,173,180,147,0,178,161],
[169,146,169,169,159,162,0,167],
[162,159,170,186,153,179,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,167,170,159,166,171,179],
[162,0,157,168,162,157,155,172],
[173,183,0,177,155,177,171,184],
[170,172,163,0,167,166,158,175],
[181,178,185,173,0,159,159,174],
[174,183,163,174,181,0,179,179],
[169,185,169,182,181,161,0,177],
[161,168,156,165,166,161,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,168,180,187,184,195,166],
[167,0,178,199,185,156,189,158],
[172,162,0,178,187,169,184,164],
[160,141,162,0,158,143,188,162],
[153,155,153,182,0,150,177,143],
[156,184,171,197,190,0,189,170],
[145,151,156,152,163,151,0,151],
[174,182,176,178,197,170,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,167,170,168,177,186,179],
[183,0,162,158,173,191,178,171],
[173,178,0,173,167,174,184,177],
[170,182,167,0,172,164,177,175],
[172,167,173,168,0,180,182,173],
[163,149,166,176,160,0,184,166],
[154,162,156,163,158,156,0,190],
[161,169,163,165,167,174,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,174,186,173,174,155,179],
[170,0,181,194,186,154,162,153],
[166,159,0,187,151,153,189,181],
[154,146,153,0,149,128,155,172],
[167,154,189,191,0,125,181,186],
[166,186,187,212,215,0,205,205],
[185,178,151,185,159,135,0,186],
[161,187,159,168,154,135,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,175,177,170,172,186,171],
[163,0,167,162,163,158,169,166],
[165,173,0,163,164,169,188,188],
[163,178,177,0,164,178,178,174],
[170,177,176,176,0,181,192,189],
[168,182,171,162,159,0,187,188],
[154,171,152,162,148,153,0,168],
[169,174,152,166,151,152,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,174,188,176,165,172,192],
[136,0,162,163,120,189,142,171],
[166,178,0,168,174,150,149,135],
[152,177,172,0,138,170,122,190],
[164,220,166,202,0,166,158,177],
[175,151,190,170,174,0,164,175],
[168,198,191,218,182,176,0,175],
[148,169,205,150,163,165,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,180,163,175,179,153,168],
[167,0,192,165,181,187,171,172],
[160,148,0,146,168,168,155,145],
[177,175,194,0,176,181,162,178],
[165,159,172,164,0,172,151,153],
[161,153,172,159,168,0,160,166],
[187,169,185,178,189,180,0,177],
[172,168,195,162,187,174,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,144,136,162,156,168,148],
[175,0,156,137,163,165,148,153],
[196,184,0,172,164,180,175,169],
[204,203,168,0,184,188,187,170],
[178,177,176,156,0,186,158,146],
[184,175,160,152,154,0,166,149],
[172,192,165,153,182,174,0,161],
[192,187,171,170,194,191,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,169,170,165,162,162,154],
[173,0,168,165,176,149,174,149],
[171,172,0,190,186,165,182,173],
[170,175,150,0,161,178,185,151],
[175,164,154,179,0,158,162,160],
[178,191,175,162,182,0,184,167],
[178,166,158,155,178,156,0,160],
[186,191,167,189,180,173,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,174,173,172,167,185,171],
[178,0,175,170,178,172,185,183],
[166,165,0,167,181,165,170,172],
[167,170,173,0,159,167,176,162],
[168,162,159,181,0,155,175,175],
[173,168,175,173,185,0,178,178],
[155,155,170,164,165,162,0,161],
[169,157,168,178,165,162,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,184,185,204,230,191,185],
[200,0,210,156,210,207,155,199],
[156,130,0,163,159,158,123,161],
[155,184,177,0,189,190,138,206],
[136,130,181,151,0,156,147,146],
[110,133,182,150,184,0,112,162],
[149,185,217,202,193,228,0,176],
[155,141,179,134,194,178,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,165,167,182,162,170,153],
[176,0,176,186,181,164,185,181],
[175,164,0,180,186,165,171,162],
[173,154,160,0,173,164,179,162],
[158,159,154,167,0,165,167,144],
[178,176,175,176,175,0,176,158],
[170,155,169,161,173,164,0,176],
[187,159,178,178,196,182,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,160,207,175,154,169,173],
[169,0,178,202,179,217,203,179],
[180,162,0,170,150,127,125,142],
[133,138,170,0,136,168,176,133],
[165,161,190,204,0,163,177,177],
[186,123,213,172,177,0,170,151],
[171,137,215,164,163,170,0,136],
[167,161,198,207,163,189,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,177,184,187,165,155,155],
[186,0,204,183,172,166,173,192],
[163,136,0,144,164,183,159,139],
[156,157,196,0,179,181,185,194],
[153,168,176,161,0,151,182,144],
[175,174,157,159,189,0,158,168],
[185,167,181,155,158,182,0,152],
[185,148,201,146,196,172,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,187,222,205,217,208,170],
[132,0,185,187,120,141,155,115],
[153,155,0,216,121,168,150,113],
[118,153,124,0,136,67,140,76],
[135,220,219,204,0,173,232,176],
[123,199,172,273,167,0,162,164],
[132,185,190,200,108,178,0,144],
[170,225,227,264,164,176,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,162,159,174,165,164,178],
[171,0,170,175,183,178,167,184],
[178,170,0,164,174,181,175,166],
[181,165,176,0,202,196,173,172],
[166,157,166,138,0,158,146,153],
[175,162,159,144,182,0,165,175],
[176,173,165,167,194,175,0,173],
[162,156,174,168,187,165,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,168,178,182,165,189,168],
[181,0,166,191,184,171,184,165],
[172,174,0,198,197,173,170,179],
[162,149,142,0,177,166,166,158],
[158,156,143,163,0,156,161,164],
[175,169,167,174,184,0,185,181],
[151,156,170,174,179,155,0,161],
[172,175,161,182,176,159,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,168,173,174,173,177,170],
[160,0,170,164,168,172,157,154],
[172,170,0,163,170,170,163,163],
[167,176,177,0,172,187,170,166],
[166,172,170,168,0,175,173,167],
[167,168,170,153,165,0,155,171],
[163,183,177,170,167,185,0,163],
[170,186,177,174,173,169,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,92,92,161,132,124,120],
[233,0,193,155,194,222,188,223],
[248,147,0,142,202,167,142,168],
[248,185,198,0,219,196,150,224],
[179,146,138,121,0,194,116,156],
[208,118,173,144,146,0,172,184],
[216,152,198,190,224,168,0,183],
[220,117,172,116,184,156,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,194,163,166,172,179,183],
[166,0,179,174,175,172,172,187],
[146,161,0,157,157,159,152,163],
[177,166,183,0,167,173,167,181],
[174,165,183,173,0,176,178,185],
[168,168,181,167,164,0,156,190],
[161,168,188,173,162,184,0,173],
[157,153,177,159,155,150,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,137,103,142,103,125,167],
[161,0,73,151,84,121,68,151],
[203,267,0,195,184,150,176,228],
[237,189,145,0,135,198,131,171],
[198,256,156,205,0,184,113,164],
[237,219,190,142,156,0,146,208],
[215,272,164,209,227,194,0,215],
[173,189,112,169,176,132,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,168,168,166,146,169,160],
[164,0,174,157,154,160,151,157],
[172,166,0,155,175,145,150,158],
[172,183,185,0,169,161,155,173],
[174,186,165,171,0,170,174,172],
[194,180,195,179,170,0,181,198],
[171,189,190,185,166,159,0,166],
[180,183,182,167,168,142,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,170,185,184,190,198,193],
[142,0,152,159,154,171,177,177],
[170,188,0,158,165,173,189,172],
[155,181,182,0,152,184,169,171],
[156,186,175,188,0,181,201,204],
[150,169,167,156,159,0,157,182],
[142,163,151,171,139,183,0,169],
[147,163,168,169,136,158,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,173,177,164,163,149,148],
[174,0,174,178,170,174,170,154],
[167,166,0,170,170,168,151,169],
[163,162,170,0,155,168,168,172],
[176,170,170,185,0,146,162,180],
[177,166,172,172,194,0,184,182],
[191,170,189,172,178,156,0,177],
[192,186,171,168,160,158,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,157,142,173,159,153,164],
[177,0,169,147,166,157,159,168],
[183,171,0,171,161,180,174,181],
[198,193,169,0,160,192,163,197],
[167,174,179,180,0,163,157,162],
[181,183,160,148,177,0,151,186],
[187,181,166,177,183,189,0,189],
[176,172,159,143,178,154,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,183,153,171,156,158,147],
[180,0,176,159,159,161,165,165],
[157,164,0,148,144,130,154,158],
[187,181,192,0,151,148,188,170],
[169,181,196,189,0,173,175,198],
[184,179,210,192,167,0,197,168],
[182,175,186,152,165,143,0,169],
[193,175,182,170,142,172,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,221,185,247,208,195,218],
[195,0,218,164,230,221,241,211],
[119,122,0,145,152,113,142,119],
[155,176,195,0,136,127,200,151],
[93,110,188,204,0,139,138,51],
[132,119,227,213,201,0,239,179],
[145,99,198,140,202,101,0,167],
[122,129,221,189,289,161,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,166,180,149,173,164,178],
[162,0,160,165,163,168,167,182],
[174,180,0,189,172,175,167,167],
[160,175,151,0,156,161,158,159],
[191,177,168,184,0,189,172,178],
[167,172,165,179,151,0,162,170],
[176,173,173,182,168,178,0,180],
[162,158,173,181,162,170,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,164,172,195,186,177,170],
[172,0,160,173,182,190,182,153],
[176,180,0,182,170,199,165,190],
[168,167,158,0,170,175,149,164],
[145,158,170,170,0,175,157,156],
[154,150,141,165,165,0,156,151],
[163,158,175,191,183,184,0,182],
[170,187,150,176,184,189,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,178,181,188,185,175,170],
[179,0,170,165,169,166,166,168],
[162,170,0,171,190,163,173,165],
[159,175,169,0,189,169,179,181],
[152,171,150,151,0,157,171,178],
[155,174,177,171,183,0,165,178],
[165,174,167,161,169,175,0,176],
[170,172,175,159,162,162,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,190,174,186,163,170,172],
[163,0,174,162,174,152,162,149],
[150,166,0,149,156,161,164,147],
[166,178,191,0,174,174,169,172],
[154,166,184,166,0,156,165,147],
[177,188,179,166,184,0,172,161],
[170,178,176,171,175,168,0,162],
[168,191,193,168,193,179,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,167,177,166,178,180,174],
[159,0,171,169,170,176,157,163],
[173,169,0,180,173,169,174,171],
[163,171,160,0,170,190,171,150],
[174,170,167,170,0,185,178,159],
[162,164,171,150,155,0,170,158],
[160,183,166,169,162,170,0,154],
[166,177,169,190,181,182,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,176,177,169,159,159,160],
[173,0,174,175,173,170,157,160],
[164,166,0,166,160,174,168,176],
[163,165,174,0,160,161,161,151],
[171,167,180,180,0,178,168,167],
[181,170,166,179,162,0,162,168],
[181,183,172,179,172,178,0,165],
[180,180,164,189,173,172,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,148,148,152,167,170,171],
[176,0,163,174,185,176,187,179],
[192,177,0,184,178,171,184,170],
[192,166,156,0,172,181,180,161],
[188,155,162,168,0,176,166,164],
[173,164,169,159,164,0,166,163],
[170,153,156,160,174,174,0,176],
[169,161,170,179,176,177,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,172,208,178,160,188,220],
[170,0,201,176,182,201,176,176],
[168,139,0,155,185,185,166,183],
[132,164,185,0,160,166,164,183],
[162,158,155,180,0,165,178,164],
[180,139,155,174,175,0,161,175],
[152,164,174,176,162,179,0,178],
[120,164,157,157,176,165,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,168,171,174,182,174,151],
[169,0,166,172,180,180,168,160],
[172,174,0,174,171,196,165,165],
[169,168,166,0,174,182,161,172],
[166,160,169,166,0,191,163,162],
[158,160,144,158,149,0,158,135],
[166,172,175,179,177,182,0,175],
[189,180,175,168,178,205,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,171,167,169,166,171,166],
[161,0,168,156,152,157,166,159],
[169,172,0,164,167,163,166,180],
[173,184,176,0,174,168,171,156],
[171,188,173,166,0,174,162,176],
[174,183,177,172,166,0,176,174],
[169,174,174,169,178,164,0,173],
[174,181,160,184,164,166,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,161,168,161,179,153,159],
[172,0,159,185,173,185,158,159],
[179,181,0,174,162,179,175,148],
[172,155,166,0,166,182,152,153],
[179,167,178,174,0,194,162,171],
[161,155,161,158,146,0,144,141],
[187,182,165,188,178,196,0,164],
[181,181,192,187,169,199,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,201,178,208,188,177,187],
[175,0,192,169,197,176,185,189],
[139,148,0,146,162,148,164,151],
[162,171,194,0,191,171,161,187],
[132,143,178,149,0,167,159,163],
[152,164,192,169,173,0,168,176],
[163,155,176,179,181,172,0,194],
[153,151,189,153,177,164,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,167,167,160,156,166,168],
[169,0,173,173,159,171,172,175],
[173,167,0,170,159,171,161,173],
[173,167,170,0,166,166,170,151],
[180,181,181,174,0,169,167,178],
[184,169,169,174,171,0,185,164],
[174,168,179,170,173,155,0,174],
[172,165,167,189,162,176,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,160,167,183,178,178,176],
[170,0,171,171,175,175,175,185],
[180,169,0,168,187,193,177,179],
[173,169,172,0,188,170,154,164],
[157,165,153,152,0,161,163,162],
[162,165,147,170,179,0,162,168],
[162,165,163,186,177,178,0,176],
[164,155,161,176,178,172,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,164,167,186,169,176,176],
[157,0,152,158,168,158,165,152],
[176,188,0,169,181,183,177,171],
[173,182,171,0,175,183,174,169],
[154,172,159,165,0,154,170,163],
[171,182,157,157,186,0,173,168],
[164,175,163,166,170,167,0,156],
[164,188,169,171,177,172,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,163,164,168,175,175,164],
[176,0,172,166,174,183,179,168],
[177,168,0,184,163,171,186,167],
[176,174,156,0,166,165,169,166],
[172,166,177,174,0,180,175,174],
[165,157,169,175,160,0,175,174],
[165,161,154,171,165,165,0,162],
[176,172,173,174,166,166,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,188,174,173,168,172,186],
[167,0,165,162,174,163,161,167],
[152,175,0,160,167,175,162,168],
[166,178,180,0,166,159,165,180],
[167,166,173,174,0,160,164,163],
[172,177,165,181,180,0,167,187],
[168,179,178,175,176,173,0,178],
[154,173,172,160,177,153,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,220,193,197,159,246,191],
[142,0,173,210,165,192,222,197],
[120,167,0,179,177,158,162,153],
[147,130,161,0,168,108,223,166],
[143,175,163,172,0,165,199,189],
[181,148,182,232,175,0,219,192],
[94,118,178,117,141,121,0,168],
[149,143,187,174,151,148,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,142,156,151,173,174,174],
[174,0,148,151,160,148,166,163],
[198,192,0,185,180,181,158,179],
[184,189,155,0,175,184,176,178],
[189,180,160,165,0,180,169,175],
[167,192,159,156,160,0,162,169],
[166,174,182,164,171,178,0,182],
[166,177,161,162,165,171,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,195,184,215,185,193,205],
[170,0,171,186,188,196,164,176],
[145,169,0,172,192,170,170,171],
[156,154,168,0,177,187,157,172],
[125,152,148,163,0,175,142,168],
[155,144,170,153,165,0,157,147],
[147,176,170,183,198,183,0,174],
[135,164,169,168,172,193,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,184,169,173,180,175,179],
[160,0,160,175,176,189,183,196],
[156,180,0,178,181,206,174,205],
[171,165,162,0,154,174,159,171],
[167,164,159,186,0,178,181,172],
[160,151,134,166,162,0,181,168],
[165,157,166,181,159,159,0,173],
[161,144,135,169,168,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,169,170,174,181,170,178],
[180,0,189,181,186,170,185,177],
[171,151,0,174,178,155,163,169],
[170,159,166,0,167,162,156,150],
[166,154,162,173,0,170,157,165],
[159,170,185,178,170,0,169,170],
[170,155,177,184,183,171,0,165],
[162,163,171,190,175,170,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,181,185,185,181,172,169],
[185,0,177,188,180,183,167,178],
[159,163,0,186,180,155,152,175],
[155,152,154,0,163,180,164,162],
[155,160,160,177,0,169,160,169],
[159,157,185,160,171,0,151,166],
[168,173,188,176,180,189,0,173],
[171,162,165,178,171,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,180,146,160,148,149,162],
[170,0,175,162,169,163,158,166],
[160,165,0,153,173,171,156,161],
[194,178,187,0,200,164,175,181],
[180,171,167,140,0,153,159,160],
[192,177,169,176,187,0,156,168],
[191,182,184,165,181,184,0,182],
[178,174,179,159,180,172,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,171,158,187,204,173,148],
[181,0,156,180,212,221,193,155],
[169,184,0,183,211,205,217,182],
[182,160,157,0,218,214,156,169],
[153,128,129,122,0,145,158,185],
[136,119,135,126,195,0,150,165],
[167,147,123,184,182,190,0,170],
[192,185,158,171,155,175,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,163,178,178,176,196,182],
[161,0,168,159,175,168,178,174],
[177,172,0,169,188,179,200,179],
[162,181,171,0,174,186,179,177],
[162,165,152,166,0,157,182,178],
[164,172,161,154,183,0,191,179],
[144,162,140,161,158,149,0,165],
[158,166,161,163,162,161,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,101,148,198,170,155,132],
[180,0,120,132,173,230,187,223],
[239,220,0,162,234,234,216,211],
[192,208,178,0,172,202,143,177],
[142,167,106,168,0,186,207,168],
[170,110,106,138,154,0,197,141],
[185,153,124,197,133,143,0,210],
[208,117,129,163,172,199,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,160,180,164,175,153,176],
[171,0,182,178,135,164,175,183],
[180,158,0,208,181,196,169,204],
[160,162,132,0,160,178,138,152],
[176,205,159,180,0,183,160,166],
[165,176,144,162,157,0,131,155],
[187,165,171,202,180,209,0,189],
[164,157,136,188,174,185,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,142,106,108,182,141,152],
[223,0,181,162,134,193,186,134],
[198,159,0,182,194,181,162,149],
[234,178,158,0,177,204,162,169],
[232,206,146,163,0,210,164,216],
[158,147,159,136,130,0,132,102],
[199,154,178,178,176,208,0,203],
[188,206,191,171,124,238,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,176,184,166,198,178,171],
[149,0,163,195,161,170,161,168],
[164,177,0,182,183,174,165,172],
[156,145,158,0,142,177,172,144],
[174,179,157,198,0,178,198,173],
[142,170,166,163,162,0,209,172],
[162,179,175,168,142,131,0,170],
[169,172,168,196,167,168,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,186,166,173,188,158,188],
[156,0,174,157,154,186,160,179],
[154,166,0,152,144,180,148,176],
[174,183,188,0,170,192,177,178],
[167,186,196,170,0,192,171,197],
[152,154,160,148,148,0,154,168],
[182,180,192,163,169,186,0,193],
[152,161,164,162,143,172,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,172,163,166,193,176,172],
[171,0,154,150,144,173,150,155],
[168,186,0,158,184,173,179,177],
[177,190,182,0,174,189,168,185],
[174,196,156,166,0,168,169,167],
[147,167,167,151,172,0,142,159],
[164,190,161,172,171,198,0,186],
[168,185,163,155,173,181,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,185,187,165,175,183],
[169,0,180,190,189,159,177,172],
[167,160,0,181,173,174,176,198],
[155,150,159,0,170,153,168,177],
[153,151,167,170,0,169,177,179],
[175,181,166,187,171,0,167,188],
[165,163,164,172,163,173,0,181],
[157,168,142,163,161,152,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,172,178,191,161,176,157],
[160,0,156,175,158,155,158,152],
[168,184,0,170,175,145,152,151],
[162,165,170,0,191,147,154,158],
[149,182,165,149,0,132,152,142],
[179,185,195,193,208,0,169,171],
[164,182,188,186,188,171,0,159],
[183,188,189,182,198,169,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,164,223,223,219,204,214],
[164,0,212,198,172,199,194,225],
[176,128,0,165,170,196,181,189],
[117,142,175,0,174,149,159,160],
[117,168,170,166,0,196,149,174],
[121,141,144,191,144,0,140,198],
[136,146,159,181,191,200,0,196],
[126,115,151,180,166,142,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,183,182,193,186,165,179],
[175,0,146,171,193,166,181,165],
[157,194,0,188,200,184,179,175],
[158,169,152,0,183,174,166,179],
[147,147,140,157,0,151,145,160],
[154,174,156,166,189,0,150,163],
[175,159,161,174,195,190,0,178],
[161,175,165,161,180,177,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,178,169,167,154,175,169],
[196,0,184,174,168,160,182,173],
[162,156,0,158,159,153,165,172],
[171,166,182,0,164,174,180,164],
[173,172,181,176,0,170,176,178],
[186,180,187,166,170,0,167,172],
[165,158,175,160,164,173,0,171],
[171,167,168,176,162,168,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,172,175,173,165,164,170],
[168,0,161,139,157,162,150,168],
[168,179,0,173,167,161,169,181],
[165,201,167,0,180,179,179,168],
[167,183,173,160,0,152,151,168],
[175,178,179,161,188,0,192,183],
[176,190,171,161,189,148,0,170],
[170,172,159,172,172,157,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,168,175,183,171,181,170],
[153,0,164,157,188,160,163,157],
[172,176,0,164,185,162,190,181],
[165,183,176,0,185,176,177,172],
[157,152,155,155,0,155,159,148],
[169,180,178,164,185,0,164,169],
[159,177,150,163,181,176,0,162],
[170,183,159,168,192,171,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,148,168,155,159,164,202],
[167,0,179,161,175,129,177,184],
[192,161,0,187,185,166,173,182],
[172,179,153,0,176,171,175,201],
[185,165,155,164,0,152,183,203],
[181,211,174,169,188,0,188,215],
[176,163,167,165,157,152,0,194],
[138,156,158,139,137,125,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,167,166,131,164,139,118],
[182,0,172,168,130,187,149,155],
[173,168,0,173,161,174,167,171],
[174,172,167,0,150,146,159,150],
[209,210,179,190,0,197,187,169],
[176,153,166,194,143,0,148,145],
[201,191,173,181,153,192,0,184],
[222,185,169,190,171,195,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,170,155,164,175,144,180],
[135,0,166,159,179,174,179,157],
[170,174,0,162,191,174,137,188],
[185,181,178,0,162,171,157,173],
[176,161,149,178,0,166,158,187],
[165,166,166,169,174,0,156,161],
[196,161,203,183,182,184,0,206],
[160,183,152,167,153,179,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,171,171,165,174,192,168],
[167,0,154,151,169,173,192,160],
[169,186,0,178,177,183,199,181],
[169,189,162,0,171,172,182,191],
[175,171,163,169,0,173,183,189],
[166,167,157,168,167,0,172,184],
[148,148,141,158,157,168,0,166],
[172,180,159,149,151,156,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,161,183,164,159,146,163],
[179,0,199,192,160,165,140,163],
[179,141,0,164,157,163,146,155],
[157,148,176,0,156,163,143,165],
[176,180,183,184,0,167,162,184],
[181,175,177,177,173,0,148,175],
[194,200,194,197,178,192,0,170],
[177,177,185,175,156,165,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,170,175,167,190,186,181],
[169,0,179,184,175,189,185,190],
[170,161,0,174,166,175,171,181],
[165,156,166,0,169,181,172,176],
[173,165,174,171,0,196,177,168],
[150,151,165,159,144,0,158,167],
[154,155,169,168,163,182,0,166],
[159,150,159,164,172,173,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,171,192,181,168,162,198],
[144,0,158,156,160,167,160,164],
[169,182,0,157,154,145,172,176],
[148,184,183,0,168,165,162,180],
[159,180,186,172,0,184,158,178],
[172,173,195,175,156,0,170,171],
[178,180,168,178,182,170,0,182],
[142,176,164,160,162,169,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,196,176,173,148,173,187],
[159,0,188,148,164,170,173,180],
[144,152,0,128,124,140,165,162],
[164,192,212,0,167,178,200,181],
[167,176,216,173,0,173,214,193],
[192,170,200,162,167,0,186,173],
[167,167,175,140,126,154,0,168],
[153,160,178,159,147,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,170,154,162,155,160,172],
[170,0,173,153,168,161,158,174],
[170,167,0,165,164,182,162,168],
[186,187,175,0,164,170,170,179],
[178,172,176,176,0,176,169,186],
[185,179,158,170,164,0,167,183],
[180,182,178,170,171,173,0,171],
[168,166,172,161,154,157,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,176,196,171,164,162,160],
[159,0,149,170,151,158,166,173],
[164,191,0,191,183,185,174,196],
[144,170,149,0,155,158,157,180],
[169,189,157,185,0,160,177,174],
[176,182,155,182,180,0,181,184],
[178,174,166,183,163,159,0,178],
[180,167,144,160,166,156,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,168,172,165,181,161,177],
[170,0,145,173,158,168,162,161],
[172,195,0,178,170,180,184,175],
[168,167,162,0,168,174,167,178],
[175,182,170,172,0,176,177,184],
[159,172,160,166,164,0,163,161],
[179,178,156,173,163,177,0,171],
[163,179,165,162,156,179,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,146,165,123,150,142,152],
[195,0,171,187,170,166,183,190],
[194,169,0,159,161,166,192,169],
[175,153,181,0,161,175,159,184],
[217,170,179,179,0,182,172,200],
[190,174,174,165,158,0,181,193],
[198,157,148,181,168,159,0,183],
[188,150,171,156,140,147,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,259,248,173,197,168,272],
[154,0,223,204,137,190,158,236],
[81,117,0,164,154,173,140,153],
[92,136,176,0,125,135,212,171],
[167,203,186,215,0,262,202,205],
[143,150,167,205,78,0,125,174],
[172,182,200,128,138,215,0,205],
[68,104,187,169,135,166,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,187,191,180,161,179,171],
[179,0,180,169,155,174,172,162],
[153,160,0,191,156,164,177,156],
[149,171,149,0,176,170,186,165],
[160,185,184,164,0,167,172,157],
[179,166,176,170,173,0,200,152],
[161,168,163,154,168,140,0,157],
[169,178,184,175,183,188,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,178,186,190,208,195,169],
[147,0,151,142,169,153,168,158],
[162,189,0,204,163,192,206,192],
[154,198,136,0,126,161,196,177],
[150,171,177,214,0,191,181,163],
[132,187,148,179,149,0,161,139],
[145,172,134,144,159,179,0,170],
[171,182,148,163,177,201,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,220,232,163,208,199,240],
[107,0,151,176,149,154,135,155],
[120,189,0,205,170,207,159,166],
[108,164,135,0,156,152,149,178],
[177,191,170,184,0,162,132,202],
[132,186,133,188,178,0,108,179],
[141,205,181,191,208,232,0,232],
[100,185,174,162,138,161,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,173,155,169,170,167,165],
[167,0,187,172,177,181,178,164],
[167,153,0,163,165,160,158,159],
[185,168,177,0,162,161,181,156],
[171,163,175,178,0,168,182,157],
[170,159,180,179,172,0,170,155],
[173,162,182,159,158,170,0,170],
[175,176,181,184,183,185,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,122,130,112,178,131,129],
[222,0,159,211,197,277,228,145],
[218,181,0,264,232,207,240,167],
[210,129,76,0,145,172,180,133],
[228,143,108,195,0,252,219,198],
[162,63,133,168,88,0,197,116],
[209,112,100,160,121,143,0,143],
[211,195,173,207,142,224,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,179,173,170,181,178,186],
[172,0,176,171,161,178,155,161],
[161,164,0,159,155,169,174,174],
[167,169,181,0,166,186,184,183],
[170,179,185,174,0,187,168,176],
[159,162,171,154,153,0,164,178],
[162,185,166,156,172,176,0,166],
[154,179,166,157,164,162,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,169,173,162,154,186,173],
[159,0,177,174,169,141,189,183],
[171,163,0,190,178,177,177,176],
[167,166,150,0,164,160,173,166],
[178,171,162,176,0,167,197,173],
[186,199,163,180,173,0,208,185],
[154,151,163,167,143,132,0,166],
[167,157,164,174,167,155,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,168,173,181,182,211,168],
[176,0,173,181,180,154,225,174],
[172,167,0,181,188,167,202,164],
[167,159,159,0,189,146,187,188],
[159,160,152,151,0,173,176,125],
[158,186,173,194,167,0,176,151],
[129,115,138,153,164,164,0,126],
[172,166,176,152,215,189,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,161,161,176,188,169,166],
[168,0,156,167,158,176,174,167],
[179,184,0,181,167,185,179,187],
[179,173,159,0,167,180,179,189],
[164,182,173,173,0,184,180,189],
[152,164,155,160,156,0,174,169],
[171,166,161,161,160,166,0,173],
[174,173,153,151,151,171,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,181,181,157,163,164,163],
[142,0,171,168,149,154,162,147],
[159,169,0,191,154,164,165,150],
[159,172,149,0,136,156,150,146],
[183,191,186,204,0,165,178,172],
[177,186,176,184,175,0,163,160],
[176,178,175,190,162,177,0,162],
[177,193,190,194,168,180,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,152,186,181,198,195,194],
[110,0,68,89,56,33,138,86],
[188,272,0,187,160,234,215,221],
[154,251,153,0,114,170,163,220],
[159,284,180,226,0,200,255,226],
[142,307,106,170,140,0,168,153],
[145,202,125,177,85,172,0,155],
[146,254,119,120,114,187,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,175,187,190,155,182,174],
[159,0,138,155,146,136,138,170],
[165,202,0,172,175,153,157,157],
[153,185,168,0,179,154,167,171],
[150,194,165,161,0,160,147,176],
[185,204,187,186,180,0,166,177],
[158,202,183,173,193,174,0,189],
[166,170,183,169,164,163,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,182,193,174,176,186,186],
[180,0,175,188,182,163,194,183],
[158,165,0,189,162,146,171,153],
[147,152,151,0,151,138,154,175],
[166,158,178,189,0,160,180,183],
[164,177,194,202,180,0,195,182],
[154,146,169,186,160,145,0,158],
[154,157,187,165,157,158,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,185,176,151,174,166,167],
[181,0,184,175,169,185,178,160],
[155,156,0,168,152,158,155,155],
[164,165,172,0,158,169,180,172],
[189,171,188,182,0,186,166,161],
[166,155,182,171,154,0,161,148],
[174,162,185,160,174,179,0,180],
[173,180,185,168,179,192,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,165,161,145,149,168,141],
[192,0,151,155,148,161,170,166],
[175,189,0,174,170,169,189,173],
[179,185,166,0,163,173,192,170],
[195,192,170,177,0,178,182,183],
[191,179,171,167,162,0,171,192],
[172,170,151,148,158,169,0,168],
[199,174,167,170,157,148,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,194,177,171,168,190,194],
[153,0,162,176,164,160,175,176],
[146,178,0,163,157,151,166,190],
[163,164,177,0,144,159,162,199],
[169,176,183,196,0,185,195,191],
[172,180,189,181,155,0,186,198],
[150,165,174,178,145,154,0,184],
[146,164,150,141,149,142,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,175,174,155,174,161,155],
[166,0,189,174,170,185,168,159],
[165,151,0,164,159,169,153,151],
[166,166,176,0,156,156,160,158],
[185,170,181,184,0,184,175,172],
[166,155,171,184,156,0,151,167],
[179,172,187,180,165,189,0,167],
[185,181,189,182,168,173,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,180,162,155,159,157,158],
[172,0,172,179,145,156,140,144],
[160,168,0,151,146,144,143,146],
[178,161,189,0,151,154,156,154],
[185,195,194,189,0,174,159,174],
[181,184,196,186,166,0,172,154],
[183,200,197,184,181,168,0,170],
[182,196,194,186,166,186,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,158,166,169,175,168,161],
[170,0,179,159,159,177,174,157],
[182,161,0,161,173,177,170,187],
[174,181,179,0,170,174,174,187],
[171,181,167,170,0,190,166,186],
[165,163,163,166,150,0,159,160],
[172,166,170,166,174,181,0,171],
[179,183,153,153,154,180,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,184,164,156,166,179,160],
[176,0,185,180,157,177,184,171],
[156,155,0,170,154,172,172,166],
[176,160,170,0,154,173,180,178],
[184,183,186,186,0,195,168,158],
[174,163,168,167,145,0,183,162],
[161,156,168,160,172,157,0,169],
[180,169,174,162,182,178,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,166,170,171,174,169,171],
[160,0,165,163,174,179,160,173],
[174,175,0,167,178,172,173,171],
[170,177,173,0,164,190,169,160],
[169,166,162,176,0,175,180,177],
[166,161,168,150,165,0,152,155],
[171,180,167,171,160,188,0,171],
[169,167,169,180,163,185,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,144,167,169,155,159,166],
[175,0,155,174,175,169,160,177],
[196,185,0,191,194,183,170,193],
[173,166,149,0,172,172,161,169],
[171,165,146,168,0,162,158,157],
[185,171,157,168,178,0,155,179],
[181,180,170,179,182,185,0,185],
[174,163,147,171,183,161,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,181,149,154,172,161,167],
[167,0,188,158,161,177,162,162],
[159,152,0,157,153,173,147,168],
[191,182,183,0,181,179,170,190],
[186,179,187,159,0,168,163,163],
[168,163,167,161,172,0,161,166],
[179,178,193,170,177,179,0,182],
[173,178,172,150,177,174,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,174,179,182,160,182,182],
[163,0,171,182,172,179,174,164],
[166,169,0,165,172,164,174,163],
[161,158,175,0,174,179,168,165],
[158,168,168,166,0,155,151,169],
[180,161,176,161,185,0,155,176],
[158,166,166,172,189,185,0,174],
[158,176,177,175,171,164,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,182,175,182,187,184,194],
[173,0,168,150,178,191,178,184],
[158,172,0,148,172,180,168,188],
[165,190,192,0,195,194,182,187],
[158,162,168,145,0,163,167,162],
[153,149,160,146,177,0,164,179],
[156,162,172,158,173,176,0,195],
[146,156,152,153,178,161,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,163,154,156,164,153,193],
[175,0,180,146,164,170,156,175],
[177,160,0,175,159,175,167,183],
[186,194,165,0,169,179,156,172],
[184,176,181,171,0,189,170,190],
[176,170,165,161,151,0,155,165],
[187,184,173,184,170,185,0,192],
[147,165,157,168,150,175,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,189,174,174,177,174,157],
[176,0,187,163,178,173,180,165],
[151,153,0,163,168,159,160,147],
[166,177,177,0,178,175,178,174],
[166,162,172,162,0,168,173,161],
[163,167,181,165,172,0,177,156],
[166,160,180,162,167,163,0,148],
[183,175,193,166,179,184,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,167,176,149,175,178,177],
[159,0,172,171,163,178,183,191],
[173,168,0,185,172,187,179,188],
[164,169,155,0,151,168,163,168],
[191,177,168,189,0,178,174,186],
[165,162,153,172,162,0,167,173],
[162,157,161,177,166,173,0,183],
[163,149,152,172,154,167,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,171,164,172,174,161,182],
[160,0,148,159,167,162,149,164],
[169,192,0,170,166,161,168,170],
[176,181,170,0,181,182,165,176],
[168,173,174,159,0,167,167,170],
[166,178,179,158,173,0,174,161],
[179,191,172,175,173,166,0,171],
[158,176,170,164,170,179,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,161,204,154,196,204,162],
[168,0,121,164,159,181,159,153],
[179,219,0,207,185,217,243,158],
[136,176,133,0,120,149,147,122],
[186,181,155,220,0,194,207,184],
[144,159,123,191,146,0,174,154],
[136,181,97,193,133,166,0,155],
[178,187,182,218,156,186,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,176,159,183,173,163,181],
[143,0,167,157,167,162,166,167],
[164,173,0,154,170,156,169,172],
[181,183,186,0,181,167,177,183],
[157,173,170,159,0,158,157,161],
[167,178,184,173,182,0,165,171],
[177,174,171,163,183,175,0,185],
[159,173,168,157,179,169,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,165,178,163,194,174,179],
[172,0,184,169,170,184,184,208],
[175,156,0,172,151,182,186,198],
[162,171,168,0,183,178,169,168],
[177,170,189,157,0,166,176,187],
[146,156,158,162,174,0,169,190],
[166,156,154,171,164,171,0,162],
[161,132,142,172,153,150,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,169,179,164,202,185,154],
[173,0,180,172,161,179,181,169],
[171,160,0,164,167,171,166,152],
[161,168,176,0,179,172,209,181],
[176,179,173,161,0,174,179,156],
[138,161,169,168,166,0,156,151],
[155,159,174,131,161,184,0,134],
[186,171,188,159,184,189,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,146,154,163,163,159,154],
[188,0,171,182,194,180,183,147],
[194,169,0,187,193,168,193,180],
[186,158,153,0,161,149,156,139],
[177,146,147,179,0,159,166,161],
[177,160,172,191,181,0,163,148],
[181,157,147,184,174,177,0,146],
[186,193,160,201,179,192,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,140,185,175,129,158,163],
[179,0,129,190,182,124,134,114],
[200,211,0,228,204,163,189,187],
[155,150,112,0,167,121,148,163],
[165,158,136,173,0,174,142,148],
[211,216,177,219,166,0,175,178],
[182,206,151,192,198,165,0,150],
[177,226,153,177,192,162,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,173,162,171,172,175,176],
[182,0,173,167,183,169,176,172],
[167,167,0,165,181,174,183,176],
[178,173,175,0,177,171,162,172],
[169,157,159,163,0,170,164,161],
[168,171,166,169,170,0,167,177],
[165,164,157,178,176,173,0,175],
[164,168,164,168,179,163,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,165,180,167,176,168,175],
[167,0,186,187,180,196,171,177],
[175,154,0,167,175,157,158,157],
[160,153,173,0,166,162,169,183],
[173,160,165,174,0,174,177,176],
[164,144,183,178,166,0,173,177],
[172,169,182,171,163,167,0,161],
[165,163,183,157,164,163,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,142,216,177,186,183,190],
[161,0,143,177,151,185,145,143],
[198,197,0,200,185,205,169,163],
[124,163,140,0,162,189,174,128],
[163,189,155,178,0,183,167,168],
[154,155,135,151,157,0,150,144],
[157,195,171,166,173,190,0,186],
[150,197,177,212,172,196,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,168,179,182,184,174,176],
[164,0,166,172,170,174,166,159],
[172,174,0,175,168,183,167,174],
[161,168,165,0,176,186,162,165],
[158,170,172,164,0,182,169,162],
[156,166,157,154,158,0,163,163],
[166,174,173,178,171,177,0,148],
[164,181,166,175,178,177,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,148,184,154,129,145,185],
[204,0,161,195,190,172,179,181],
[192,179,0,209,174,178,162,203],
[156,145,131,0,163,148,117,172],
[186,150,166,177,0,167,157,181],
[211,168,162,192,173,0,144,193],
[195,161,178,223,183,196,0,203],
[155,159,137,168,159,147,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,169,164,165,137,191,136],
[200,0,201,198,168,161,168,178],
[171,139,0,130,147,174,145,145],
[176,142,210,0,217,179,174,171],
[175,172,193,123,0,146,145,166],
[203,179,166,161,194,0,157,124],
[149,172,195,166,195,183,0,165],
[204,162,195,169,174,216,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,173,179,179,182,167,156],
[150,0,165,151,155,171,175,154],
[167,175,0,176,174,175,184,176],
[161,189,164,0,172,170,174,166],
[161,185,166,168,0,190,181,167],
[158,169,165,170,150,0,165,161],
[173,165,156,166,159,175,0,162],
[184,186,164,174,173,179,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,196,212,189,193,138,183],
[143,0,131,153,132,162,78,147],
[144,209,0,162,177,165,135,152],
[128,187,178,0,155,171,156,168],
[151,208,163,185,0,161,148,165],
[147,178,175,169,179,0,200,187],
[202,262,205,184,192,140,0,157],
[157,193,188,172,175,153,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,177,155,143,143,154,152],
[182,0,170,189,197,151,176,174],
[163,170,0,168,173,123,176,156],
[185,151,172,0,188,171,173,168],
[197,143,167,152,0,159,135,171],
[197,189,217,169,181,0,174,174],
[186,164,164,167,205,166,0,180],
[188,166,184,172,169,166,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,116,131,133,137,102,122],
[246,0,214,202,166,150,200,186],
[224,126,0,98,157,170,113,167],
[209,138,242,0,151,155,145,170],
[207,174,183,189,0,150,173,203],
[203,190,170,185,190,0,148,134],
[238,140,227,195,167,192,0,146],
[218,154,173,170,137,206,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,179,181,174,177,178,169],
[146,0,174,165,147,166,160,147],
[161,166,0,177,158,156,172,170],
[159,175,163,0,137,172,155,141],
[166,193,182,203,0,173,171,163],
[163,174,184,168,167,0,165,170],
[162,180,168,185,169,175,0,167],
[171,193,170,199,177,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,153,164,162,182,163,164],
[183,0,137,148,148,179,159,164],
[187,203,0,170,186,199,202,177],
[176,192,170,0,193,183,201,178],
[178,192,154,147,0,172,197,165],
[158,161,141,157,168,0,175,154],
[177,181,138,139,143,165,0,133],
[176,176,163,162,175,186,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,169,160,174,159,172,160],
[180,0,171,176,179,166,189,182],
[171,169,0,166,190,177,194,167],
[180,164,174,0,183,167,187,168],
[166,161,150,157,0,153,162,153],
[181,174,163,173,187,0,187,160],
[168,151,146,153,178,153,0,134],
[180,158,173,172,187,180,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,196,197,202,188,219,174],
[175,0,173,181,207,186,199,167],
[144,167,0,183,203,193,187,164],
[143,159,157,0,192,166,176,155],
[138,133,137,148,0,143,178,156],
[152,154,147,174,197,0,181,170],
[121,141,153,164,162,159,0,170],
[166,173,176,185,184,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,154,174,169,168,147,141],
[175,0,151,171,169,156,163,160],
[186,189,0,163,169,190,156,167],
[166,169,177,0,181,165,170,171],
[171,171,171,159,0,174,171,161],
[172,184,150,175,166,0,172,153],
[193,177,184,170,169,168,0,171],
[199,180,173,169,179,187,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,201,156,170,165,194,219],
[162,0,210,170,224,206,212,212],
[139,130,0,156,153,177,194,207],
[184,170,184,0,165,211,196,258],
[170,116,187,175,0,165,165,193],
[175,134,163,129,175,0,182,196],
[146,128,146,144,175,158,0,201],
[121,128,133,82,147,144,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,190,198,170,166,171,179],
[149,0,174,159,144,162,164,169],
[150,166,0,183,183,174,187,180],
[142,181,157,0,144,144,159,155],
[170,196,157,196,0,177,175,187],
[174,178,166,196,163,0,169,174],
[169,176,153,181,165,171,0,159],
[161,171,160,185,153,166,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,173,167,152,171,165,147],
[171,0,155,168,154,162,147,142],
[167,185,0,158,161,159,164,158],
[173,172,182,0,165,170,171,154],
[188,186,179,175,0,177,175,162],
[169,178,181,170,163,0,179,170],
[175,193,176,169,165,161,0,171],
[193,198,182,186,178,170,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,152,145,171,166,166,163],
[156,0,130,143,198,161,139,174],
[188,210,0,160,178,183,178,188],
[195,197,180,0,189,193,164,204],
[169,142,162,151,0,156,144,178],
[174,179,157,147,184,0,160,190],
[174,201,162,176,196,180,0,180],
[177,166,152,136,162,150,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,182,174,174,180,173,163],
[149,0,151,147,155,147,161,154],
[158,189,0,169,174,161,177,165],
[166,193,171,0,186,172,171,184],
[166,185,166,154,0,164,170,162],
[160,193,179,168,176,0,162,166],
[167,179,163,169,170,178,0,167],
[177,186,175,156,178,174,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,55,134,134,134,134,182],
[257,0,168,180,180,180,158,208],
[285,172,0,277,132,182,211,305],
[206,160,63,0,142,142,124,172],
[206,160,208,198,0,177,180,226],
[206,160,158,198,163,0,180,192],
[206,182,129,216,160,160,0,287],
[158,132,35,168,114,148,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,177,171,178,176,178,166],
[166,0,178,171,171,157,166,174],
[163,162,0,169,168,154,172,178],
[169,169,171,0,178,160,176,176],
[162,169,172,162,0,165,167,173],
[164,183,186,180,175,0,179,168],
[162,174,168,164,173,161,0,172],
[174,166,162,164,167,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,163,175,176,177,190,189],
[163,0,141,154,158,165,191,158],
[177,199,0,176,167,185,194,199],
[165,186,164,0,168,176,184,180],
[164,182,173,172,0,168,202,188],
[163,175,155,164,172,0,203,177],
[150,149,146,156,138,137,0,155],
[151,182,141,160,152,163,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,191,182,177,180,181,177],
[172,0,170,171,164,172,156,153],
[149,170,0,164,172,160,151,162],
[158,169,176,0,184,161,178,159],
[163,176,168,156,0,156,158,172],
[160,168,180,179,184,0,162,160],
[159,184,189,162,182,178,0,175],
[163,187,178,181,168,180,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,170,171,167,178,168,183],
[160,0,170,171,177,162,158,173],
[170,170,0,162,170,174,170,180],
[169,169,178,0,170,163,170,171],
[173,163,170,170,0,172,163,182],
[162,178,166,177,168,0,162,181],
[172,182,170,170,177,178,0,179],
[157,167,160,169,158,159,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,185,165,172,175,182,184],
[158,0,180,167,162,167,163,173],
[155,160,0,162,161,157,166,171],
[175,173,178,0,169,160,184,178],
[168,178,179,171,0,173,179,180],
[165,173,183,180,167,0,160,160],
[158,177,174,156,161,180,0,182],
[156,167,169,162,160,180,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,189,167,179,170,171],
[162,0,164,171,158,151,157,151],
[162,176,0,185,176,172,175,165],
[151,169,155,0,143,164,153,143],
[173,182,164,197,0,177,181,157],
[161,189,168,176,163,0,167,172],
[170,183,165,187,159,173,0,158],
[169,189,175,197,183,168,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,153,163,165,183,164],
[169,0,173,154,154,149,169,179],
[169,167,0,145,155,147,173,174],
[187,186,195,0,175,166,190,193],
[177,186,185,165,0,183,192,192],
[175,191,193,174,157,0,195,173],
[157,171,167,150,148,145,0,171],
[176,161,166,147,148,167,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,176,172,179,195,165,175],
[172,0,153,158,182,171,164,181],
[164,187,0,149,179,176,163,184],
[168,182,191,0,187,190,185,210],
[161,158,161,153,0,171,158,165],
[145,169,164,150,169,0,149,163],
[175,176,177,155,182,191,0,191],
[165,159,156,130,175,177,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,216,191,164,212,215,196],
[132,0,167,113,166,118,183,157],
[124,173,0,115,123,156,132,158],
[149,227,225,0,197,216,214,237],
[176,174,217,143,0,211,151,222],
[128,222,184,124,129,0,145,159],
[125,157,208,126,189,195,0,171],
[144,183,182,103,118,181,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,167,131,81,167,190,221],
[179,0,157,135,186,148,196,190],
[173,183,0,169,254,179,206,304],
[209,205,171,0,250,167,247,238],
[259,154,86,90,0,154,207,236],
[173,192,161,173,186,0,192,157],
[150,144,134,93,133,148,0,134],
[119,150,36,102,104,183,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,129,154,163,248,268,98],
[124,0,83,170,233,195,113,132],
[211,257,0,168,226,243,242,142],
[186,170,172,0,195,131,151,170],
[177,107,114,145,0,134,175,123],
[92,145,97,209,206,0,230,78],
[72,227,98,189,165,110,0,81],
[242,208,198,170,217,262,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,171,165,204,173,161,198],
[121,0,146,129,182,128,148,135],
[169,194,0,175,213,148,154,172],
[175,211,165,0,193,163,180,195],
[136,158,127,147,0,150,142,144],
[167,212,192,177,190,0,174,176],
[179,192,186,160,198,166,0,181],
[142,205,168,145,196,164,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,164,168,174,176,177,175],
[162,0,166,160,167,166,167,162],
[176,174,0,170,173,182,174,162],
[172,180,170,0,166,180,177,167],
[166,173,167,174,0,175,186,175],
[164,174,158,160,165,0,162,169],
[163,173,166,163,154,178,0,171],
[165,178,178,173,165,171,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,172,167,176,171,173,160],
[141,0,172,176,165,159,154,151],
[168,168,0,152,171,165,152,156],
[173,164,188,0,173,178,174,181],
[164,175,169,167,0,185,172,160],
[169,181,175,162,155,0,171,160],
[167,186,188,166,168,169,0,169],
[180,189,184,159,180,180,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,184,173,171,165,182,170],
[174,0,186,160,177,162,189,175],
[156,154,0,156,179,168,176,162],
[167,180,184,0,186,176,180,175],
[169,163,161,154,0,151,176,171],
[175,178,172,164,189,0,184,185],
[158,151,164,160,164,156,0,159],
[170,165,178,165,169,155,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,166,169,156,181,155,166],
[180,0,174,173,177,176,164,165],
[174,166,0,177,154,159,171,167],
[171,167,163,0,147,168,168,164],
[184,163,186,193,0,180,183,190],
[159,164,181,172,160,0,162,166],
[185,176,169,172,157,178,0,168],
[174,175,173,176,150,174,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,146,156,145,154,151,167],
[176,0,159,170,157,148,153,142],
[194,181,0,185,177,167,160,176],
[184,170,155,0,157,166,155,138],
[195,183,163,183,0,181,162,162],
[186,192,173,174,159,0,171,169],
[189,187,180,185,178,169,0,150],
[173,198,164,202,178,171,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,154,166,166,188,186,181],
[176,0,174,160,182,207,206,206],
[186,166,0,195,177,194,180,214],
[174,180,145,0,184,178,197,205],
[174,158,163,156,0,164,150,201],
[152,133,146,162,176,0,156,188],
[154,134,160,143,190,184,0,203],
[159,134,126,135,139,152,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,0,80,17,205,97,147],
[220,0,96,55,132,188,55,128],
[340,244,0,97,187,283,175,147],
[260,285,243,0,260,260,152,115],
[323,208,153,80,0,266,158,153],
[135,152,57,80,74,0,97,147],
[243,285,165,188,182,243,0,182],
[193,212,193,225,187,193,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,70,147,119,152,155,143],
[217,0,196,259,228,284,186,159],
[270,144,0,222,180,248,160,129],
[193,81,118,0,180,145,138,94],
[221,112,160,160,0,236,196,131],
[188,56,92,195,104,0,97,114],
[185,154,180,202,144,243,0,213],
[197,181,211,246,209,226,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,222,163,134,214,194,225],
[190,0,142,173,118,176,129,232],
[118,198,0,147,159,250,160,199],
[177,167,193,0,202,214,173,199],
[206,222,181,138,0,193,177,227],
[126,164,90,126,147,0,99,131],
[146,211,180,167,163,241,0,170],
[115,108,141,141,113,209,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,168,164,167,206,185,159],
[143,0,170,171,159,180,175,151],
[172,170,0,174,149,188,196,156],
[176,169,166,0,170,209,183,176],
[173,181,191,170,0,206,190,156],
[134,160,152,131,134,0,174,143],
[155,165,144,157,150,166,0,165],
[181,189,184,164,184,197,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,159,166,171,167,162,179],
[169,0,176,186,177,168,179,183],
[181,164,0,169,185,166,179,184],
[174,154,171,0,170,174,175,189],
[169,163,155,170,0,172,176,192],
[173,172,174,166,168,0,175,175],
[178,161,161,165,164,165,0,162],
[161,157,156,151,148,165,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,161,174,164,167,198,179],
[165,0,191,178,189,186,177,156],
[179,149,0,182,173,155,180,179],
[166,162,158,0,166,147,171,148],
[176,151,167,174,0,169,182,152],
[173,154,185,193,171,0,186,165],
[142,163,160,169,158,154,0,153],
[161,184,161,192,188,175,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,245,197,121,187,212,89],
[169,0,196,239,140,177,201,184],
[95,144,0,125,93,156,195,57],
[143,101,215,0,119,159,184,57],
[219,200,247,221,0,208,265,121],
[153,163,184,181,132,0,253,92],
[128,139,145,156,75,87,0,114],
[251,156,283,283,219,248,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,181,174,179,156,163,168],
[176,0,184,172,177,170,172,169],
[159,156,0,157,191,159,155,169],
[166,168,183,0,191,174,166,175],
[161,163,149,149,0,144,164,156],
[184,170,181,166,196,0,166,176],
[177,168,185,174,176,174,0,171],
[172,171,171,165,184,164,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,163,187,206,198,174,172],
[137,0,172,125,155,183,156,158],
[177,168,0,170,214,190,190,166],
[153,215,170,0,182,211,183,194],
[134,185,126,158,0,182,133,159],
[142,157,150,129,158,0,128,156],
[166,184,150,157,207,212,0,183],
[168,182,174,146,181,184,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,121,154,172,175,125,149],
[190,0,188,196,166,177,180,182],
[219,152,0,160,193,158,167,153],
[186,144,180,0,165,148,161,131],
[168,174,147,175,0,157,154,161],
[165,163,182,192,183,0,156,183],
[215,160,173,179,186,184,0,181],
[191,158,187,209,179,157,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,175,168,170,152,171,195],
[156,0,166,160,169,131,172,177],
[165,174,0,179,181,157,169,191],
[172,180,161,0,172,174,162,190],
[170,171,159,168,0,155,179,189],
[188,209,183,166,185,0,187,201],
[169,168,171,178,161,153,0,186],
[145,163,149,150,151,139,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,176,184,193,172,170,187],
[157,0,192,187,178,160,179,193],
[164,148,0,190,196,165,172,164],
[156,153,150,0,158,146,171,164],
[147,162,144,182,0,142,162,184],
[168,180,175,194,198,0,196,186],
[170,161,168,169,178,144,0,166],
[153,147,176,176,156,154,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,185,178,174,179,175,156],
[167,0,176,163,172,169,194,173],
[155,164,0,163,153,159,187,164],
[162,177,177,0,180,172,186,163],
[166,168,187,160,0,174,200,165],
[161,171,181,168,166,0,186,168],
[165,146,153,154,140,154,0,142],
[184,167,176,177,175,172,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,172,185,173,163,214,184],
[138,0,161,174,149,145,180,164],
[168,179,0,190,170,169,186,187],
[155,166,150,0,136,135,173,148],
[167,191,170,204,0,172,183,176],
[177,195,171,205,168,0,205,188],
[126,160,154,167,157,135,0,145],
[156,176,153,192,164,152,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,170,199,151,167,136,177],
[173,0,153,191,180,193,159,173],
[170,187,0,192,174,194,156,186],
[141,149,148,0,172,176,146,145],
[189,160,166,168,0,205,169,139],
[173,147,146,164,135,0,161,167],
[204,181,184,194,171,179,0,157],
[163,167,154,195,201,173,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,189,184,183,151,181,172],
[164,0,179,166,178,163,185,153],
[151,161,0,174,168,142,168,166],
[156,174,166,0,164,171,181,181],
[157,162,172,176,0,157,176,179],
[189,177,198,169,183,0,204,188],
[159,155,172,159,164,136,0,168],
[168,187,174,159,161,152,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,159,173,144,163,178,171],
[167,0,167,171,154,158,160,165],
[181,173,0,182,158,175,176,167],
[167,169,158,0,158,161,175,160],
[196,186,182,182,0,168,169,187],
[177,182,165,179,172,0,180,181],
[162,180,164,165,171,160,0,167],
[169,175,173,180,153,159,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,170,179,172,193,182,172],
[152,0,149,145,152,181,156,158],
[170,191,0,175,176,196,182,173],
[161,195,165,0,181,204,192,190],
[168,188,164,159,0,192,186,186],
[147,159,144,136,148,0,152,155],
[158,184,158,148,154,188,0,167],
[168,182,167,150,154,185,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,170,165,173,174,173,163],
[174,0,165,174,161,170,166,168],
[170,175,0,174,165,168,177,160],
[175,166,166,0,160,164,158,166],
[167,179,175,180,0,172,171,172],
[166,170,172,176,168,0,164,169],
[167,174,163,182,169,176,0,176],
[177,172,180,174,168,171,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,148,162,154,161,150,169],
[178,0,160,162,158,162,154,151],
[192,180,0,179,164,169,175,167],
[178,178,161,0,168,155,158,173],
[186,182,176,172,0,171,178,168],
[179,178,171,185,169,0,182,174],
[190,186,165,182,162,158,0,178],
[171,189,173,167,172,166,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,184,192,181,168,190,175],
[157,0,184,187,172,186,174,151],
[156,156,0,166,145,161,162,151],
[148,153,174,0,164,166,159,154],
[159,168,195,176,0,159,193,172],
[172,154,179,174,181,0,171,176],
[150,166,178,181,147,169,0,161],
[165,189,189,186,168,164,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,144,204,178,162,202,185],
[147,0,141,164,143,139,171,146],
[196,199,0,198,168,177,202,170],
[136,176,142,0,155,155,158,153],
[162,197,172,185,0,157,193,179],
[178,201,163,185,183,0,190,171],
[138,169,138,182,147,150,0,146],
[155,194,170,187,161,169,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,135,176,170,153,153,139],
[179,0,169,148,168,152,183,177],
[205,171,0,172,194,171,183,158],
[164,192,168,0,185,153,179,150],
[170,172,146,155,0,169,164,156],
[187,188,169,187,171,0,169,151],
[187,157,157,161,176,171,0,160],
[201,163,182,190,184,189,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,137,209,168,214,232,149],
[187,0,104,245,213,213,169,190],
[203,236,0,292,165,211,189,203],
[131,95,48,0,90,170,90,177],
[172,127,175,250,0,199,183,152],
[126,127,129,170,141,0,130,127],
[108,171,151,250,157,210,0,172],
[191,150,137,163,188,213,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,163,166,161,156,159,166],
[173,0,186,177,179,155,166,166],
[177,154,0,165,171,161,158,152],
[174,163,175,0,169,171,155,169],
[179,161,169,171,0,168,157,180],
[184,185,179,169,172,0,162,171],
[181,174,182,185,183,178,0,165],
[174,174,188,171,160,169,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,170,174,173,186,166,169],
[176,0,187,171,178,180,161,178],
[170,153,0,178,174,157,165,169],
[166,169,162,0,184,175,170,174],
[167,162,166,156,0,181,151,164],
[154,160,183,165,159,0,156,174],
[174,179,175,170,189,184,0,182],
[171,162,171,166,176,166,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,167,178,171,166,160,171],
[183,0,180,179,168,182,170,186],
[173,160,0,177,175,184,165,180],
[162,161,163,0,164,168,166,180],
[169,172,165,176,0,187,173,175],
[174,158,156,172,153,0,152,161],
[180,170,175,174,167,188,0,185],
[169,154,160,160,165,179,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,176,172,190,165,166,169],
[172,0,174,187,186,166,170,178],
[164,166,0,175,171,175,169,172],
[168,153,165,0,164,157,168,159],
[150,154,169,176,0,150,159,144],
[175,174,165,183,190,0,176,182],
[174,170,171,172,181,164,0,176],
[171,162,168,181,196,158,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,191,171,160,147,189,152],
[193,0,169,193,180,189,202,181],
[149,171,0,146,146,137,160,154],
[169,147,194,0,168,187,189,162],
[180,160,194,172,0,154,195,161],
[193,151,203,153,186,0,213,187],
[151,138,180,151,145,127,0,125],
[188,159,186,178,179,153,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,164,164,175,177,179,172],
[160,0,185,173,181,174,166,168],
[176,155,0,169,168,180,170,167],
[176,167,171,0,179,183,176,168],
[165,159,172,161,0,167,172,168],
[163,166,160,157,173,0,158,175],
[161,174,170,164,168,182,0,174],
[168,172,173,172,172,165,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,170,211,139,206,253,195],
[123,0,155,225,105,174,185,208],
[170,185,0,210,212,247,233,251],
[129,115,130,0,200,217,199,187],
[201,235,128,140,0,240,223,244],
[134,166,93,123,100,0,102,140],
[87,155,107,141,117,238,0,167],
[145,132,89,153,96,200,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,170,211,188,165,194,191],
[169,0,204,247,170,151,171,168],
[170,136,0,184,135,165,142,168],
[129,93,156,0,172,139,160,126],
[152,170,205,168,0,136,164,137],
[175,189,175,201,204,0,215,155],
[146,169,198,180,176,125,0,160],
[149,172,172,214,203,185,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,184,181,184,172,171,168],
[165,0,178,184,191,191,160,174],
[156,162,0,172,169,164,165,164],
[159,156,168,0,178,169,150,164],
[156,149,171,162,0,158,161,166],
[168,149,176,171,182,0,155,176],
[169,180,175,190,179,185,0,171],
[172,166,176,176,174,164,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,151,171,167,164,172,153],
[172,0,171,171,164,174,162,146],
[189,169,0,169,168,191,166,175],
[169,169,171,0,156,174,157,151],
[173,176,172,184,0,183,161,168],
[176,166,149,166,157,0,173,162],
[168,178,174,183,179,167,0,167],
[187,194,165,189,172,178,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,171,190,193,189,178,178],
[171,0,173,176,199,177,168,184],
[169,167,0,162,170,155,163,159],
[150,164,178,0,188,168,153,167],
[147,141,170,152,0,160,155,149],
[151,163,185,172,180,0,163,176],
[162,172,177,187,185,177,0,166],
[162,156,181,173,191,164,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,201,166,170,178,202,175],
[143,0,177,163,136,167,159,147],
[139,163,0,153,175,154,173,169],
[174,177,187,0,171,172,173,158],
[170,204,165,169,0,161,158,159],
[162,173,186,168,179,0,161,155],
[138,181,167,167,182,179,0,170],
[165,193,171,182,181,185,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,157,184,151,180,173,161],
[167,0,174,180,173,180,185,183],
[183,166,0,182,176,175,186,166],
[156,160,158,0,145,163,161,161],
[189,167,164,195,0,188,184,186],
[160,160,165,177,152,0,176,164],
[167,155,154,179,156,164,0,176],
[179,157,174,179,154,176,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,185,167,142,148,193,164],
[162,0,195,167,154,196,209,174],
[155,145,0,164,142,156,179,192],
[173,173,176,0,165,211,227,197],
[198,186,198,175,0,151,202,181],
[192,144,184,129,189,0,184,157],
[147,131,161,113,138,156,0,156],
[176,166,148,143,159,183,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,182,164,178,171,162,167],
[171,0,189,171,179,170,174,162],
[158,151,0,152,166,154,155,166],
[176,169,188,0,197,168,172,175],
[162,161,174,143,0,155,156,147],
[169,170,186,172,185,0,190,169],
[178,166,185,168,184,150,0,159],
[173,178,174,165,193,171,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,163,159,164,136,150,166],
[174,0,160,171,157,161,151,154],
[177,180,0,168,177,151,159,146],
[181,169,172,0,167,167,160,174],
[176,183,163,173,0,160,161,173],
[204,179,189,173,180,0,169,155],
[190,189,181,180,179,171,0,163],
[174,186,194,166,167,185,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,180,173,168,166,146,159],
[144,0,176,165,200,143,155,141],
[160,164,0,150,181,156,139,143],
[167,175,190,0,183,147,172,179],
[172,140,159,157,0,150,156,159],
[174,197,184,193,190,0,183,168],
[194,185,201,168,184,157,0,203],
[181,199,197,161,181,172,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,241,192,135,114,182,164],
[144,0,256,179,144,166,260,167],
[99,84,0,133,145,148,158,58],
[148,161,207,0,180,166,182,156],
[205,196,195,160,0,184,212,169],
[226,174,192,174,156,0,181,195],
[158,80,182,158,128,159,0,141],
[176,173,282,184,171,145,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,26,177,126,52,85,44],
[221,0,139,269,119,131,172,185],
[314,201,0,210,255,295,239,153],
[163,71,130,0,185,133,145,70],
[214,221,85,155,0,219,170,181],
[288,209,45,207,121,0,222,128],
[255,168,101,195,170,118,0,192],
[296,155,187,270,159,212,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,176,135,188,135,151,144],
[171,0,182,149,159,134,160,144],
[164,158,0,136,184,129,132,155],
[205,191,204,0,196,205,157,205],
[152,181,156,144,0,147,140,172],
[205,206,211,135,193,0,174,175],
[189,180,208,183,200,166,0,187],
[196,196,185,135,168,165,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,163,184,175,175,173,170],
[170,0,159,177,171,170,162,165],
[177,181,0,182,176,169,165,173],
[156,163,158,0,155,166,148,154],
[165,169,164,185,0,166,160,157],
[165,170,171,174,174,0,164,162],
[167,178,175,192,180,176,0,181],
[170,175,167,186,183,178,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,138,145,160,158,147,167],
[192,0,160,172,182,166,159,178],
[202,180,0,185,205,159,180,194],
[195,168,155,0,166,158,169,160],
[180,158,135,174,0,153,162,166],
[182,174,181,182,187,0,162,182],
[193,181,160,171,178,178,0,177],
[173,162,146,180,174,158,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,179,187,189,133,172,231],
[172,0,179,179,173,143,176,232],
[161,161,0,211,179,150,161,232],
[153,161,129,0,151,164,148,187],
[151,167,161,189,0,165,174,204],
[207,197,190,176,175,0,169,221],
[168,164,179,192,166,171,0,238],
[109,108,108,153,136,119,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,217,173,203,162,190,187],
[173,0,194,186,188,169,153,176],
[123,146,0,167,178,135,174,172],
[167,154,173,0,187,162,170,165],
[137,152,162,153,0,151,132,165],
[178,171,205,178,189,0,170,177],
[150,187,166,170,208,170,0,180],
[153,164,168,175,175,163,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,168,172,176,212,227,178],
[164,0,165,148,188,186,137,114],
[172,175,0,184,148,182,194,146],
[168,192,156,0,171,166,203,144],
[164,152,192,169,0,202,191,165],
[128,154,158,174,138,0,175,134],
[113,203,146,137,149,165,0,122],
[162,226,194,196,175,206,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,181,197,194,201,186,163],
[184,0,145,187,188,183,180,186],
[159,195,0,209,188,194,196,178],
[143,153,131,0,168,181,185,153],
[146,152,152,172,0,178,178,164],
[139,157,146,159,162,0,165,152],
[154,160,144,155,162,175,0,160],
[177,154,162,187,176,188,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,167,201,185,200,188,172],
[148,0,167,145,162,158,196,167],
[173,173,0,203,154,186,191,152],
[139,195,137,0,142,179,160,149],
[155,178,186,198,0,182,190,173],
[140,182,154,161,158,0,168,155],
[152,144,149,180,150,172,0,174],
[168,173,188,191,167,185,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,180,157,168,152,183,174],
[169,0,165,174,170,179,182,181],
[160,175,0,161,170,168,172,174],
[183,166,179,0,184,176,191,184],
[172,170,170,156,0,176,168,181],
[188,161,172,164,164,0,174,174],
[157,158,168,149,172,166,0,168],
[166,159,166,156,159,166,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,180,159,177,206,208,171],
[150,0,144,121,165,177,163,148],
[160,196,0,169,150,189,190,158],
[181,219,171,0,170,220,196,163],
[163,175,190,170,0,186,190,201],
[134,163,151,120,154,0,180,145],
[132,177,150,144,150,160,0,153],
[169,192,182,177,139,195,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,167,192,158,148,174,176],
[160,0,166,170,164,161,172,139],
[173,174,0,176,171,154,185,178],
[148,170,164,0,160,138,159,168],
[182,176,169,180,0,146,179,177],
[192,179,186,202,194,0,209,163],
[166,168,155,181,161,131,0,153],
[164,201,162,172,163,177,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,184,148,142,111,208,104],
[111,0,142,125,182,150,146,174],
[156,198,0,219,166,142,188,203],
[192,215,121,0,196,199,218,239],
[198,158,174,144,0,164,235,165],
[229,190,198,141,176,0,244,185],
[132,194,152,122,105,96,0,141],
[236,166,137,101,175,155,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,179,144,186,163,138,189],
[178,0,192,186,186,187,170,184],
[161,148,0,152,144,184,147,168],
[196,154,188,0,192,199,135,184],
[154,154,196,148,0,208,181,156],
[177,153,156,141,132,0,169,131],
[202,170,193,205,159,171,0,168],
[151,156,172,156,184,209,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,196,174,171,187,145,176],
[160,0,170,159,165,161,150,159],
[144,170,0,143,147,153,146,144],
[166,181,197,0,157,170,167,165],
[169,175,193,183,0,174,173,189],
[153,179,187,170,166,0,156,175],
[195,190,194,173,167,184,0,179],
[164,181,196,175,151,165,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,162,183,179,162,163,173],
[181,0,179,183,194,182,160,171],
[178,161,0,186,175,172,151,176],
[157,157,154,0,172,159,170,168],
[161,146,165,168,0,148,160,163],
[178,158,168,181,192,0,164,168],
[177,180,189,170,180,176,0,187],
[167,169,164,172,177,172,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,189,188,167,168,171,173],
[181,0,186,164,146,169,186,134],
[151,154,0,146,152,164,157,150],
[152,176,194,0,163,161,193,156],
[173,194,188,177,0,201,189,170],
[172,171,176,179,139,0,175,168],
[169,154,183,147,151,165,0,159],
[167,206,190,184,170,172,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,180,187,169,161,166,168],
[180,0,192,190,172,173,164,172],
[160,148,0,182,137,151,169,167],
[153,150,158,0,140,142,151,163],
[171,168,203,200,0,161,176,176],
[179,167,189,198,179,0,187,174],
[174,176,171,189,164,153,0,178],
[172,168,173,177,164,166,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,167,198,139,164,154,158],
[168,0,181,227,183,178,155,184],
[173,159,0,194,161,162,165,152],
[142,113,146,0,128,169,115,128],
[201,157,179,212,0,148,123,164],
[176,162,178,171,192,0,177,150],
[186,185,175,225,217,163,0,199],
[182,156,188,212,176,190,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,192,179,169,188,164,188],
[166,0,187,165,164,167,169,187],
[148,153,0,179,172,178,174,181],
[161,175,161,0,173,176,165,171],
[171,176,168,167,0,189,167,182],
[152,173,162,164,151,0,169,163],
[176,171,166,175,173,171,0,183],
[152,153,159,169,158,177,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,176,182,187,169,188,178],
[143,0,163,168,146,156,153,156],
[164,177,0,165,163,169,173,162],
[158,172,175,0,150,161,169,158],
[153,194,177,190,0,171,165,175],
[171,184,171,179,169,0,168,173],
[152,187,167,171,175,172,0,178],
[162,184,178,182,165,167,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,180,168,161,188,203,196],
[168,0,177,167,171,167,182,169],
[160,163,0,175,160,174,182,161],
[172,173,165,0,148,179,149,157],
[179,169,180,192,0,194,182,175],
[152,173,166,161,146,0,174,158],
[137,158,158,191,158,166,0,170],
[144,171,179,183,165,182,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,180,194,154,181,184,184],
[144,0,181,174,167,172,186,186],
[160,159,0,170,171,167,185,168],
[146,166,170,0,161,166,172,167],
[186,173,169,179,0,176,186,171],
[159,168,173,174,164,0,182,179],
[156,154,155,168,154,158,0,164],
[156,154,172,173,169,161,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,166,154,172,166,143,204],
[187,0,165,149,163,162,158,216],
[174,175,0,171,140,160,180,185],
[186,191,169,0,155,180,179,197],
[168,177,200,185,0,187,179,209],
[174,178,180,160,153,0,167,220],
[197,182,160,161,161,173,0,196],
[136,124,155,143,131,120,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,167,178,172,190,173,164],
[178,0,174,175,190,190,169,173],
[173,166,0,184,173,183,178,167],
[162,165,156,0,173,174,169,180],
[168,150,167,167,0,175,170,165],
[150,150,157,166,165,0,157,157],
[167,171,162,171,170,183,0,169],
[176,167,173,160,175,183,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,168,183,210,180,155,165],
[172,0,184,164,181,192,165,161],
[172,156,0,186,211,193,191,151],
[157,176,154,0,214,191,157,171],
[130,159,129,126,0,151,131,156],
[160,148,147,149,189,0,149,143],
[185,175,149,183,209,191,0,171],
[175,179,189,169,184,197,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,172,166,169,159,176,183],
[165,0,184,164,183,166,183,195],
[168,156,0,159,164,160,180,182],
[174,176,181,0,176,169,177,197],
[171,157,176,164,0,176,166,182],
[181,174,180,171,164,0,169,192],
[164,157,160,163,174,171,0,175],
[157,145,158,143,158,148,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,174,170,173,169,183,178],
[125,0,103,98,158,114,137,132],
[166,237,0,175,249,258,218,228],
[170,242,165,0,214,208,164,173],
[167,182,91,126,0,159,131,149],
[171,226,82,132,181,0,110,191],
[157,203,122,176,209,230,0,176],
[162,208,112,167,191,149,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,179,180,163,173,192,172],
[166,0,181,171,166,153,176,163],
[161,159,0,177,162,174,166,150],
[160,169,163,0,146,161,171,167],
[177,174,178,194,0,167,186,180],
[167,187,166,179,173,0,177,177],
[148,164,174,169,154,163,0,169],
[168,177,190,173,160,163,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,170,167,166,157,166,166],
[165,0,176,174,161,160,162,182],
[170,164,0,164,180,175,176,170],
[173,166,176,0,168,167,175,174],
[174,179,160,172,0,170,157,162],
[183,180,165,173,170,0,173,182],
[174,178,164,165,183,167,0,167],
[174,158,170,166,178,158,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,181,183,172,184,167,190],
[172,0,171,166,159,163,163,159],
[159,169,0,174,150,172,155,148],
[157,174,166,0,154,152,173,151],
[168,181,190,186,0,184,182,170],
[156,177,168,188,156,0,155,159],
[173,177,185,167,158,185,0,162],
[150,181,192,189,170,181,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,176,171,168,142,182,190],
[165,0,139,148,156,154,159,173],
[164,201,0,181,159,201,184,222],
[169,192,159,0,144,159,167,197],
[172,184,181,196,0,149,201,196],
[198,186,139,181,191,0,189,191],
[158,181,156,173,139,151,0,204],
[150,167,118,143,144,149,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,175,179,164,157,157,157],
[167,0,165,178,166,138,177,187],
[165,175,0,176,168,161,184,184],
[161,162,164,0,152,182,175,177],
[176,174,172,188,0,165,196,200],
[183,202,179,158,175,0,190,179],
[183,163,156,165,144,150,0,173],
[183,153,156,163,140,161,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,172,178,175,179,180],
[172,0,166,178,192,163,166,174],
[166,174,0,175,171,162,177,167],
[168,162,165,0,179,167,164,166],
[162,148,169,161,0,165,156,166],
[165,177,178,173,175,0,177,166],
[161,174,163,176,184,163,0,166],
[160,166,173,174,174,174,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,146,133,183,199,182,89],
[143,0,99,139,145,186,195,110],
[194,241,0,184,184,166,197,175],
[207,201,156,0,205,183,217,126],
[157,195,156,135,0,157,180,102],
[141,154,174,157,183,0,164,120],
[158,145,143,123,160,176,0,136],
[251,230,165,214,238,220,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,163,147,153,160,150,169],
[177,0,181,160,176,156,149,161],
[177,159,0,154,159,175,165,161],
[193,180,186,0,184,174,160,185],
[187,164,181,156,0,169,179,167],
[180,184,165,166,171,0,138,163],
[190,191,175,180,161,202,0,161],
[171,179,179,155,173,177,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,183,164,166,180,177,183],
[143,0,161,149,151,159,156,156],
[157,179,0,162,177,173,177,167],
[176,191,178,0,183,167,177,173],
[174,189,163,157,0,170,176,170],
[160,181,167,173,170,0,164,169],
[163,184,163,163,164,176,0,163],
[157,184,173,167,170,171,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,141,168,157,133,144,172],
[201,0,151,214,170,172,178,175],
[199,189,0,193,196,189,164,195],
[172,126,147,0,182,142,160,156],
[183,170,144,158,0,168,158,159],
[207,168,151,198,172,0,162,167],
[196,162,176,180,182,178,0,182],
[168,165,145,184,181,173,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,200,170,176,215,184,195],
[159,0,199,167,166,172,181,179],
[140,141,0,132,153,192,190,175],
[170,173,208,0,200,177,203,163],
[164,174,187,140,0,216,180,176],
[125,168,148,163,124,0,156,157],
[156,159,150,137,160,184,0,163],
[145,161,165,177,164,183,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,192,191,183,167,183,174],
[176,0,185,176,185,178,192,165],
[148,155,0,170,171,154,176,149],
[149,164,170,0,174,156,171,153],
[157,155,169,166,0,157,173,160],
[173,162,186,184,183,0,199,167],
[157,148,164,169,167,141,0,149],
[166,175,191,187,180,173,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,178,183,178,183,188,167],
[161,0,171,169,169,176,182,165],
[162,169,0,158,160,180,166,158],
[157,171,182,0,156,183,188,178],
[162,171,180,184,0,174,174,167],
[157,164,160,157,166,0,170,161],
[152,158,174,152,166,170,0,161],
[173,175,182,162,173,179,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,162,169,149,152,202,150],
[198,0,151,167,171,162,180,202],
[178,189,0,147,203,171,175,205],
[171,173,193,0,187,141,182,188],
[191,169,137,153,0,122,179,177],
[188,178,169,199,218,0,235,199],
[138,160,165,158,161,105,0,169],
[190,138,135,152,163,141,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,186,138,171,161,172,202],
[170,0,179,166,182,162,157,155],
[154,161,0,161,161,158,149,174],
[202,174,179,0,168,196,174,188],
[169,158,179,172,0,185,179,183],
[179,178,182,144,155,0,184,176],
[168,183,191,166,161,156,0,183],
[138,185,166,152,157,164,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,164,188,167,181,179,186],
[165,0,163,181,175,168,166,179],
[176,177,0,181,183,190,168,194],
[152,159,159,0,166,176,170,177],
[173,165,157,174,0,172,162,174],
[159,172,150,164,168,0,173,179],
[161,174,172,170,178,167,0,177],
[154,161,146,163,166,161,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,177,180,182,183,173,163],
[165,0,183,164,175,167,169,174],
[163,157,0,165,172,156,178,151],
[160,176,175,0,167,183,169,157],
[158,165,168,173,0,166,167,153],
[157,173,184,157,174,0,171,171],
[167,171,162,171,173,169,0,169],
[177,166,189,183,187,169,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,161,172,181,177,178,181],
[169,0,174,182,172,180,179,180],
[179,166,0,173,184,176,182,185],
[168,158,167,0,173,172,172,183],
[159,168,156,167,0,155,188,168],
[163,160,164,168,185,0,174,176],
[162,161,158,168,152,166,0,175],
[159,160,155,157,172,164,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,163,164,174,168,148,172],
[172,0,168,159,168,168,163,184],
[177,172,0,174,171,164,173,184],
[176,181,166,0,172,172,173,170],
[166,172,169,168,0,164,173,178],
[172,172,176,168,176,0,164,178],
[192,177,167,167,167,176,0,177],
[168,156,156,170,162,162,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,192,174,188,193,176,147],
[179,0,145,204,140,193,130,154],
[148,195,0,216,167,194,176,164],
[166,136,124,0,162,177,105,105],
[152,200,173,178,0,186,145,136],
[147,147,146,163,154,0,139,133],
[164,210,164,235,195,201,0,202],
[193,186,176,235,204,207,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,162,154,166,149,179,156],
[162,0,164,158,168,155,187,154],
[178,176,0,176,181,162,192,169],
[186,182,164,0,189,167,186,178],
[174,172,159,151,0,146,187,167],
[191,185,178,173,194,0,203,168],
[161,153,148,154,153,137,0,145],
[184,186,171,162,173,172,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,162,183,167,158,152,158],
[160,0,166,168,168,167,163,158],
[178,174,0,176,173,169,176,171],
[157,172,164,0,169,171,158,159],
[173,172,167,171,0,168,152,148],
[182,173,171,169,172,0,181,163],
[188,177,164,182,188,159,0,166],
[182,182,169,181,192,177,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,183,151,196,168,183,243],
[155,0,150,153,156,139,138,223],
[157,190,0,205,172,194,179,200],
[189,187,135,0,164,135,138,221],
[144,184,168,176,0,195,104,203],
[172,201,146,205,145,0,137,194],
[157,202,161,202,236,203,0,186],
[97,117,140,119,137,146,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,162,162,171,182,159,165],
[155,0,164,155,130,182,156,163],
[178,176,0,183,172,191,166,164],
[178,185,157,0,151,188,167,161],
[169,210,168,189,0,174,172,182],
[158,158,149,152,166,0,149,156],
[181,184,174,173,168,191,0,160],
[175,177,176,179,158,184,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,172,174,174,165,161,169],
[169,0,181,162,170,165,158,179],
[168,159,0,145,159,143,146,167],
[166,178,195,0,186,170,176,184],
[166,170,181,154,0,157,161,155],
[175,175,197,170,183,0,152,184],
[179,182,194,164,179,188,0,179],
[171,161,173,156,185,156,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,162,173,177,173,159,148],
[189,0,161,173,181,173,164,181],
[178,179,0,175,189,156,161,171],
[167,167,165,0,175,163,172,164],
[163,159,151,165,0,153,153,161],
[167,167,184,177,187,0,177,178],
[181,176,179,168,187,163,0,172],
[192,159,169,176,179,162,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,164,177,173,163,160,122],
[193,0,177,215,183,164,191,177],
[176,163,0,176,189,162,151,163],
[163,125,164,0,159,154,170,158],
[167,157,151,181,0,135,144,154],
[177,176,178,186,205,0,166,152],
[180,149,189,170,196,174,0,168],
[218,163,177,182,186,188,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,175,168,173,152,172],
[162,0,176,169,159,157,160,177],
[162,164,0,166,165,159,160,174],
[165,171,174,0,177,176,165,183],
[172,181,175,163,0,165,168,166],
[167,183,181,164,175,0,177,180],
[188,180,180,175,172,163,0,185],
[168,163,166,157,174,160,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,160,166,144,162,175,164],
[184,0,178,168,169,176,203,204],
[180,162,0,164,152,157,153,177],
[174,172,176,0,151,164,155,156],
[196,171,188,189,0,161,193,209],
[178,164,183,176,179,0,176,178],
[165,137,187,185,147,164,0,164],
[176,136,163,184,131,162,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,207,179,176,167,193,157],
[166,0,176,177,190,192,180,173],
[133,164,0,177,190,166,163,174],
[161,163,163,0,171,181,178,164],
[164,150,150,169,0,161,146,163],
[173,148,174,159,179,0,158,164],
[147,160,177,162,194,182,0,172],
[183,167,166,176,177,176,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,171,170,172,171,190,186],
[164,0,170,185,179,173,186,165],
[169,170,0,190,168,177,205,173],
[170,155,150,0,161,171,198,155],
[168,161,172,179,0,191,234,188],
[169,167,163,169,149,0,216,183],
[150,154,135,142,106,124,0,127],
[154,175,167,185,152,157,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,168,163,168,162,184,174],
[162,0,166,162,176,177,182,178],
[172,174,0,172,191,164,172,191],
[177,178,168,0,188,164,190,184],
[172,164,149,152,0,168,161,169],
[178,163,176,176,172,0,189,174],
[156,158,168,150,179,151,0,161],
[166,162,149,156,171,166,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,173,176,171,175,166,187],
[158,0,177,164,172,170,152,169],
[167,163,0,165,159,163,152,169],
[164,176,175,0,159,160,164,186],
[169,168,181,181,0,165,170,176],
[165,170,177,180,175,0,158,187],
[174,188,188,176,170,182,0,199],
[153,171,171,154,164,153,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,177,168,185,181,155,180],
[180,0,164,180,202,181,161,193],
[163,176,0,161,193,151,164,153],
[172,160,179,0,206,179,195,186],
[155,138,147,134,0,159,159,179],
[159,159,189,161,181,0,177,172],
[185,179,176,145,181,163,0,180],
[160,147,187,154,161,168,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,155,189,196,170,200,176],
[140,0,149,151,170,136,165,140],
[185,191,0,188,189,150,203,145],
[151,189,152,0,185,150,161,139],
[144,170,151,155,0,141,158,120],
[170,204,190,190,199,0,208,151],
[140,175,137,179,182,132,0,146],
[164,200,195,201,220,189,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,171,184,176,190,160,171],
[195,0,179,193,189,196,150,182],
[169,161,0,167,164,184,164,161],
[156,147,173,0,172,185,135,145],
[164,151,176,168,0,179,166,163],
[150,144,156,155,161,0,148,166],
[180,190,176,205,174,192,0,159],
[169,158,179,195,177,174,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,197,197,166,178,195,154],
[158,0,193,157,148,174,168,174],
[143,147,0,155,179,155,161,148],
[143,183,185,0,150,169,153,141],
[174,192,161,190,0,175,173,152],
[162,166,185,171,165,0,163,164],
[145,172,179,187,167,177,0,174],
[186,166,192,199,188,176,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,158,169,156,173,152,164],
[141,0,134,147,123,153,142,152],
[182,206,0,185,165,165,153,177],
[171,193,155,0,180,168,159,188],
[184,217,175,160,0,155,171,182],
[167,187,175,172,185,0,165,161],
[188,198,187,181,169,175,0,171],
[176,188,163,152,158,179,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,154,171,186,151,171,148],
[181,0,154,170,196,171,184,174],
[186,186,0,210,210,187,189,169],
[169,170,130,0,181,170,167,144],
[154,144,130,159,0,146,160,128],
[189,169,153,170,194,0,187,145],
[169,156,151,173,180,153,0,137],
[192,166,171,196,212,195,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,171,171,173,169,159,180],
[178,0,188,160,178,168,183,184],
[169,152,0,151,184,150,162,162],
[169,180,189,0,185,166,181,187],
[167,162,156,155,0,146,172,164],
[171,172,190,174,194,0,165,177],
[181,157,178,159,168,175,0,185],
[160,156,178,153,176,163,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,178,144,173,171,181,160],
[148,0,165,162,168,174,181,169],
[162,175,0,151,164,175,166,172],
[196,178,189,0,170,173,200,178],
[167,172,176,170,0,159,157,176],
[169,166,165,167,181,0,187,188],
[159,159,174,140,183,153,0,147],
[180,171,168,162,164,152,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,164,149,164,155,157,162],
[179,0,169,167,170,166,171,169],
[176,171,0,161,166,154,152,164],
[191,173,179,0,177,171,167,190],
[176,170,174,163,0,168,158,170],
[185,174,186,169,172,0,180,183],
[183,169,188,173,182,160,0,180],
[178,171,176,150,170,157,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,156,154,169,157,140,151],
[171,0,155,144,152,133,128,134],
[184,185,0,155,195,166,167,176],
[186,196,185,0,217,155,178,164],
[171,188,145,123,0,141,148,137],
[183,207,174,185,199,0,156,155],
[200,212,173,162,192,184,0,162],
[189,206,164,176,203,185,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,167,130,95,156,143,117],
[212,0,170,180,184,155,176,184],
[173,170,0,152,158,222,192,146],
[210,160,188,0,208,177,215,153],
[245,156,182,132,0,197,191,144],
[184,185,118,163,143,0,185,164],
[197,164,148,125,149,155,0,150],
[223,156,194,187,196,176,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,152,175,165,156,162,167],
[154,0,154,166,188,151,159,168],
[188,186,0,191,168,173,177,182],
[165,174,149,0,162,164,159,172],
[175,152,172,178,0,160,171,172],
[184,189,167,176,180,0,170,186],
[178,181,163,181,169,170,0,184],
[173,172,158,168,168,154,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,194,179,149,216,196,196],
[191,0,197,185,170,203,179,178],
[146,143,0,147,153,195,143,163],
[161,155,193,0,133,186,169,163],
[191,170,187,207,0,210,175,163],
[124,137,145,154,130,0,113,144],
[144,161,197,171,165,227,0,189],
[144,162,177,177,177,196,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,173,154,159,188,143,186],
[156,0,183,115,133,179,114,155],
[167,157,0,119,142,171,120,132],
[186,225,221,0,147,199,203,212],
[181,207,198,193,0,204,164,186],
[152,161,169,141,136,0,128,128],
[197,226,220,137,176,212,0,183],
[154,185,208,128,154,212,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,190,183,198,179,160,175],
[166,0,178,169,187,165,162,172],
[150,162,0,154,165,163,165,177],
[157,171,186,0,162,166,182,176],
[142,153,175,178,0,160,164,160],
[161,175,177,174,180,0,186,190],
[180,178,175,158,176,154,0,188],
[165,168,163,164,180,150,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,195,168,180,172,190,217],
[154,0,192,163,171,186,193,198],
[145,148,0,137,159,181,161,159],
[172,177,203,0,164,209,185,204],
[160,169,181,176,0,194,149,220],
[168,154,159,131,146,0,175,168],
[150,147,179,155,191,165,0,189],
[123,142,181,136,120,172,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,188,186,195,183,189,186],
[173,0,191,200,184,166,195,168],
[152,149,0,171,151,167,175,151],
[154,140,169,0,167,178,169,166],
[145,156,189,173,0,176,184,152],
[157,174,173,162,164,0,156,151],
[151,145,165,171,156,184,0,162],
[154,172,189,174,188,189,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,178,157,171,172,186,161],
[159,0,159,163,181,155,169,161],
[162,181,0,164,171,162,185,174],
[183,177,176,0,201,169,185,190],
[169,159,169,139,0,152,160,167],
[168,185,178,171,188,0,179,158],
[154,171,155,155,180,161,0,179],
[179,179,166,150,173,182,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,163,168,168,173,159,174],
[150,0,165,160,157,156,149,163],
[177,175,0,169,171,169,175,169],
[172,180,171,0,182,159,160,181],
[172,183,169,158,0,160,162,172],
[167,184,171,181,180,0,163,191],
[181,191,165,180,178,177,0,190],
[166,177,171,159,168,149,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,213,177,175,152,198,160],
[141,0,161,132,134,159,177,84],
[127,179,0,153,143,109,190,147],
[163,208,187,0,210,157,224,191],
[165,206,197,130,0,158,183,179],
[188,181,231,183,182,0,187,157],
[142,163,150,116,157,153,0,156],
[180,256,193,149,161,183,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,169,156,158,149,158,172],
[161,0,163,174,158,162,161,169],
[171,177,0,161,165,167,161,171],
[184,166,179,0,166,173,156,166],
[182,182,175,174,0,169,171,176],
[191,178,173,167,171,0,162,189],
[182,179,179,184,169,178,0,188],
[168,171,169,174,164,151,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,157,160,158,175,152,165],
[177,0,182,175,180,185,159,171],
[183,158,0,167,162,163,159,177],
[180,165,173,0,171,183,170,183],
[182,160,178,169,0,169,164,185],
[165,155,177,157,171,0,152,180],
[188,181,181,170,176,188,0,176],
[175,169,163,157,155,160,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,196,153,152,154,133,161],
[167,0,174,143,169,178,151,163],
[144,166,0,140,161,146,136,144],
[187,197,200,0,204,179,170,174],
[188,171,179,136,0,167,169,165],
[186,162,194,161,173,0,153,179],
[207,189,204,170,171,187,0,177],
[179,177,196,166,175,161,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,155,171,152,137,156,148],
[182,0,152,165,169,153,156,164],
[185,188,0,170,171,180,160,182],
[169,175,170,0,171,169,150,171],
[188,171,169,169,0,141,147,177],
[203,187,160,171,199,0,169,167],
[184,184,180,190,193,171,0,162],
[192,176,158,169,163,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,172,165,174,178,177,177],
[174,0,175,173,179,187,170,177],
[168,165,0,166,166,185,176,168],
[175,167,174,0,186,179,187,170],
[166,161,174,154,0,185,175,168],
[162,153,155,161,155,0,165,157],
[163,170,164,153,165,175,0,175],
[163,163,172,170,172,183,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,175,180,170,183,167,190],
[165,0,166,170,171,176,177,174],
[165,174,0,178,179,162,171,190],
[160,170,162,0,183,173,172,173],
[170,169,161,157,0,171,175,188],
[157,164,178,167,169,0,175,182],
[173,163,169,168,165,165,0,186],
[150,166,150,167,152,158,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,183,194,182,174,175,167],
[175,0,189,187,170,173,180,178],
[157,151,0,178,171,163,155,160],
[146,153,162,0,167,162,169,156],
[158,170,169,173,0,171,165,169],
[166,167,177,178,169,0,179,157],
[165,160,185,171,175,161,0,160],
[173,162,180,184,171,183,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,164,173,173,152,167,152],
[175,0,157,191,177,176,188,187],
[176,183,0,178,167,179,184,168],
[167,149,162,0,165,178,156,182],
[167,163,173,175,0,176,175,177],
[188,164,161,162,164,0,151,172],
[173,152,156,184,165,189,0,180],
[188,153,172,158,163,168,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,168,153,156,162,164],
[181,0,159,169,179,157,174,164],
[177,181,0,186,163,164,178,189],
[172,171,154,0,172,167,166,163],
[187,161,177,168,0,169,181,174],
[184,183,176,173,171,0,170,176],
[178,166,162,174,159,170,0,171],
[176,176,151,177,166,164,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,173,155,156,175,180,164],
[174,0,199,166,177,178,178,173],
[167,141,0,168,156,154,175,169],
[185,174,172,0,162,168,168,170],
[184,163,184,178,0,180,184,173],
[165,162,186,172,160,0,178,179],
[160,162,165,172,156,162,0,178],
[176,167,171,170,167,161,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,187,179,169,161,179,169],
[162,0,158,163,160,160,160,151],
[153,182,0,179,174,170,164,168],
[161,177,161,0,173,168,175,165],
[171,180,166,167,0,166,163,175],
[179,180,170,172,174,0,162,174],
[161,180,176,165,177,178,0,179],
[171,189,172,175,165,166,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,159,153,156,150,161,134],
[149,0,162,142,161,136,152,151],
[181,178,0,156,174,166,159,165],
[187,198,184,0,194,180,181,157],
[184,179,166,146,0,144,177,159],
[190,204,174,160,196,0,189,179],
[179,188,181,159,163,151,0,171],
[206,189,175,183,181,161,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,152,154,180,155,145,174],
[194,0,193,168,193,167,172,189],
[188,147,0,165,189,164,167,183],
[186,172,175,0,200,188,165,185],
[160,147,151,140,0,160,145,155],
[185,173,176,152,180,0,162,179],
[195,168,173,175,195,178,0,193],
[166,151,157,155,185,161,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,176,150,152,159,171,160],
[175,0,170,178,173,157,185,166],
[164,170,0,162,174,155,167,152],
[190,162,178,0,168,161,174,160],
[188,167,166,172,0,166,171,160],
[181,183,185,179,174,0,185,170],
[169,155,173,166,169,155,0,161],
[180,174,188,180,180,170,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,182,177,174,165,153,184],
[183,0,179,167,173,172,170,186],
[158,161,0,167,178,137,142,172],
[163,173,173,0,168,172,152,178],
[166,167,162,172,0,153,154,185],
[175,168,203,168,187,0,174,189],
[187,170,198,188,186,166,0,207],
[156,154,168,162,155,151,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,169,175,173,170,168,167],
[184,0,183,178,170,164,157,167],
[171,157,0,167,167,171,163,166],
[165,162,173,0,164,169,167,166],
[167,170,173,176,0,170,162,160],
[170,176,169,171,170,0,155,174],
[172,183,177,173,178,185,0,167],
[173,173,174,174,180,166,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,161,164,157,162,159,163],
[176,0,166,179,169,167,170,163],
[179,174,0,184,162,177,176,177],
[176,161,156,0,160,168,151,164],
[183,171,178,180,0,166,166,179],
[178,173,163,172,174,0,160,166],
[181,170,164,189,174,180,0,169],
[177,177,163,176,161,174,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,168,175,168,169,189,162],
[172,0,161,159,150,169,183,161],
[172,179,0,156,161,192,171,162],
[165,181,184,0,171,190,187,159],
[172,190,179,169,0,209,195,173],
[171,171,148,150,131,0,167,161],
[151,157,169,153,145,173,0,146],
[178,179,178,181,167,179,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,153,152,160,143,191,174],
[175,0,171,158,157,142,189,151],
[187,169,0,175,163,168,192,165],
[188,182,165,0,168,156,188,164],
[180,183,177,172,0,173,178,167],
[197,198,172,184,167,0,189,173],
[149,151,148,152,162,151,0,134],
[166,189,175,176,173,167,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,203,156,172,165,130,140],
[163,0,216,161,164,159,113,110],
[137,124,0,129,118,154,120,122],
[184,179,211,0,200,175,111,223],
[168,176,222,140,0,224,107,150],
[175,181,186,165,116,0,154,169],
[210,227,220,229,233,186,0,146],
[200,230,218,117,190,171,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,177,184,165,178,192,165],
[167,0,179,173,172,178,170,160],
[163,161,0,160,171,167,177,149],
[156,167,180,0,169,172,181,171],
[175,168,169,171,0,170,177,167],
[162,162,173,168,170,0,175,164],
[148,170,163,159,163,165,0,152],
[175,180,191,169,173,176,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,177,170,187,171,173,181],
[174,0,177,173,184,163,167,189],
[163,163,0,172,182,193,179,190],
[170,167,168,0,186,182,166,183],
[153,156,158,154,0,160,151,188],
[169,177,147,158,180,0,163,197],
[167,173,161,174,189,177,0,191],
[159,151,150,157,152,143,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,155,151,152,108,219,141],
[168,0,120,120,130,123,161,144],
[185,220,0,185,161,167,206,179],
[189,220,155,0,136,180,205,194],
[188,210,179,204,0,154,195,190],
[232,217,173,160,186,0,227,171],
[121,179,134,135,145,113,0,111],
[199,196,161,146,150,169,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,112,119,148,166,131,158],
[200,0,179,162,191,208,170,167],
[228,161,0,202,182,231,212,190],
[221,178,138,0,181,188,184,186],
[192,149,158,159,0,196,166,157],
[174,132,109,152,144,0,133,144],
[209,170,128,156,174,207,0,169],
[182,173,150,154,183,196,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,155,172,182,167,167,172],
[144,0,184,131,158,177,159,150],
[185,156,0,153,176,204,161,160],
[168,209,187,0,217,213,212,195],
[158,182,164,123,0,168,160,157],
[173,163,136,127,172,0,166,162],
[173,181,179,128,180,174,0,166],
[168,190,180,145,183,178,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,155,144,156,120,183,152],
[168,0,160,161,168,158,216,137],
[185,180,0,174,164,147,189,156],
[196,179,166,0,211,151,207,140],
[184,172,176,129,0,140,183,159],
[220,182,193,189,200,0,229,170],
[157,124,151,133,157,111,0,128],
[188,203,184,200,181,170,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,146,148,150,153,170,163],
[178,0,166,160,166,162,177,179],
[194,174,0,170,180,162,178,179],
[192,180,170,0,166,173,193,188],
[190,174,160,174,0,161,182,175],
[187,178,178,167,179,0,190,176],
[170,163,162,147,158,150,0,164],
[177,161,161,152,165,164,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,178,170,176,162,172,180],
[157,0,174,162,178,162,173,163],
[162,166,0,153,156,159,165,163],
[170,178,187,0,181,168,186,181],
[164,162,184,159,0,155,168,177],
[178,178,181,172,185,0,169,175],
[168,167,175,154,172,171,0,171],
[160,177,177,159,163,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,171,167,205,183,193,232],
[181,0,170,191,202,184,204,231],
[169,170,0,189,184,182,188,224],
[173,149,151,0,156,163,184,208],
[135,138,156,184,0,161,168,168],
[157,156,158,177,179,0,179,188],
[147,136,152,156,172,161,0,180],
[108,109,116,132,172,152,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,147,158,179,195,161,141],
[166,0,139,175,180,194,190,138],
[193,201,0,196,172,210,196,163],
[182,165,144,0,180,207,184,170],
[161,160,168,160,0,203,204,146],
[145,146,130,133,137,0,147,144],
[179,150,144,156,136,193,0,156],
[199,202,177,170,194,196,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,160,150,183,173,162,172],
[167,0,178,160,202,179,170,184],
[180,162,0,180,211,189,182,221],
[190,180,160,0,188,187,180,177],
[157,138,129,152,0,163,155,168],
[167,161,151,153,177,0,171,172],
[178,170,158,160,185,169,0,196],
[168,156,119,163,172,168,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,154,188,186,168,221,190],
[160,0,148,177,162,172,183,193],
[186,192,0,187,166,205,172,195],
[152,163,153,0,173,181,179,179],
[154,178,174,167,0,183,197,201],
[172,168,135,159,157,0,197,187],
[119,157,168,161,143,143,0,154],
[150,147,145,161,139,153,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,228,193,197,189,170,184],
[168,0,199,163,197,183,202,168],
[112,141,0,155,138,165,147,106],
[147,177,185,0,167,171,154,144],
[143,143,202,173,0,198,181,156],
[151,157,175,169,142,0,164,162],
[170,138,193,186,159,176,0,154],
[156,172,234,196,184,178,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,153,161,170,189,178,176],
[176,0,140,154,141,197,182,157],
[187,200,0,170,175,178,184,173],
[179,186,170,0,181,185,186,192],
[170,199,165,159,0,187,184,173],
[151,143,162,155,153,0,173,174],
[162,158,156,154,156,167,0,155],
[164,183,167,148,167,166,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,162,160,169,158,168,155],
[165,0,163,161,168,164,170,152],
[178,177,0,167,172,172,177,170],
[180,179,173,0,173,173,169,174],
[171,172,168,167,0,162,171,179],
[182,176,168,167,178,0,178,181],
[172,170,163,171,169,162,0,170],
[185,188,170,166,161,159,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,176,206,184,172,158,170],
[151,0,163,182,159,160,138,156],
[164,177,0,193,168,155,158,167],
[134,158,147,0,149,145,149,150],
[156,181,172,191,0,168,142,153],
[168,180,185,195,172,0,156,152],
[182,202,182,191,198,184,0,161],
[170,184,173,190,187,188,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,147,165,162,149,156,163],
[166,0,165,161,168,167,161,186],
[193,175,0,168,176,163,181,179],
[175,179,172,0,176,171,169,182],
[178,172,164,164,0,163,165,168],
[191,173,177,169,177,0,173,183],
[184,179,159,171,175,167,0,160],
[177,154,161,158,172,157,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,152,201,160,216,187,169],
[126,0,178,191,180,219,163,164],
[188,162,0,187,202,224,208,203],
[139,149,153,0,218,194,151,187],
[180,160,138,122,0,147,187,162],
[124,121,116,146,193,0,154,165],
[153,177,132,189,153,186,0,165],
[171,176,137,153,178,175,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,150,198,199,158,175,193],
[135,0,148,138,179,111,165,172],
[190,192,0,160,208,209,182,187],
[142,202,180,0,215,183,195,177],
[141,161,132,125,0,142,185,163],
[182,229,131,157,198,0,182,184],
[165,175,158,145,155,158,0,146],
[147,168,153,163,177,156,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,178,175,165,173,187,159],
[173,0,159,189,167,168,179,165],
[162,181,0,186,171,166,171,166],
[165,151,154,0,170,164,181,153],
[175,173,169,170,0,157,169,153],
[167,172,174,176,183,0,184,160],
[153,161,169,159,171,156,0,170],
[181,175,174,187,187,180,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,170,143,162,156,154,170],
[180,0,169,164,179,167,172,175],
[170,171,0,177,169,172,169,172],
[197,176,163,0,187,172,181,173],
[178,161,171,153,0,167,154,151],
[184,173,168,168,173,0,169,165],
[186,168,171,159,186,171,0,164],
[170,165,168,167,189,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,158,201,192,213,193,173],
[207,0,196,176,169,156,284,170],
[182,144,0,196,175,197,191,184],
[139,164,144,0,157,223,216,176],
[148,171,165,183,0,232,231,190],
[127,184,143,117,108,0,212,118],
[147,56,149,124,109,128,0,157],
[167,170,156,164,150,222,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,187,175,168,160,185,169],
[178,0,187,185,177,173,165,174],
[153,153,0,164,152,165,172,165],
[165,155,176,0,152,140,175,189],
[172,163,188,188,0,168,169,177],
[180,167,175,200,172,0,192,171],
[155,175,168,165,171,148,0,170],
[171,166,175,151,163,169,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,170,171,155,159,154,179],
[170,0,202,194,177,175,188,176],
[170,138,0,143,132,152,153,175],
[169,146,197,0,161,171,166,189],
[185,163,208,179,0,168,160,175],
[181,165,188,169,172,0,167,185],
[186,152,187,174,180,173,0,180],
[161,164,165,151,165,155,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,164,167,161,168,176,163],
[180,0,156,164,167,160,160,152],
[176,184,0,173,186,162,174,156],
[173,176,167,0,166,179,162,172],
[179,173,154,174,0,168,154,163],
[172,180,178,161,172,0,157,176],
[164,180,166,178,186,183,0,183],
[177,188,184,168,177,164,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,161,175,178,164,170,183],
[180,0,168,200,168,187,178,207],
[179,172,0,174,174,180,171,168],
[165,140,166,0,184,159,161,177],
[162,172,166,156,0,160,163,173],
[176,153,160,181,180,0,192,178],
[170,162,169,179,177,148,0,167],
[157,133,172,163,167,162,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,193,146,166,155,155,194],
[189,0,193,166,175,169,180,175],
[147,147,0,149,136,157,173,164],
[194,174,191,0,157,169,179,182],
[174,165,204,183,0,183,185,206],
[185,171,183,171,157,0,174,170],
[185,160,167,161,155,166,0,186],
[146,165,176,158,134,170,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,165,189,174,183,173,154],
[150,0,165,153,156,167,162,145],
[175,175,0,163,160,174,182,169],
[151,187,177,0,154,159,181,154],
[166,184,180,186,0,164,182,181],
[157,173,166,181,176,0,181,167],
[167,178,158,159,158,159,0,162],
[186,195,171,186,159,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,168,170,162,165,169,164],
[182,0,176,171,169,192,167,177],
[172,164,0,164,168,173,171,160],
[170,169,176,0,175,187,178,172],
[178,171,172,165,0,177,174,176],
[175,148,167,153,163,0,165,169],
[171,173,169,162,166,175,0,162],
[176,163,180,168,164,171,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,147,157,163,150,166,146],
[169,0,160,164,172,148,151,144],
[193,180,0,191,161,175,179,175],
[183,176,149,0,176,155,155,142],
[177,168,179,164,0,160,157,152],
[190,192,165,185,180,0,162,163],
[174,189,161,185,183,178,0,166],
[194,196,165,198,188,177,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,168,183,186,220,167,173],
[162,0,181,171,176,202,178,154],
[172,159,0,152,161,193,195,183],
[157,169,188,0,173,213,172,159],
[154,164,179,167,0,199,170,135],
[120,138,147,127,141,0,144,112],
[173,162,145,168,170,196,0,133],
[167,186,157,181,205,228,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,166,175,178,189,177,183],
[165,0,175,172,165,170,171,183],
[174,165,0,173,161,177,171,173],
[165,168,167,0,168,167,150,178],
[162,175,179,172,0,174,167,192],
[151,170,163,173,166,0,171,182],
[163,169,169,190,173,169,0,178],
[157,157,167,162,148,158,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,162,192,207,195,204,182],
[168,0,177,188,196,174,186,167],
[178,163,0,182,196,175,175,191],
[148,152,158,0,202,162,156,179],
[133,144,144,138,0,138,160,159],
[145,166,165,178,202,0,166,157],
[136,154,165,184,180,174,0,158],
[158,173,149,161,181,183,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,190,166,163,164,165,176],
[169,0,171,182,164,173,172,163],
[150,169,0,161,175,153,152,158],
[174,158,179,0,160,160,175,168],
[177,176,165,180,0,165,168,170],
[176,167,187,180,175,0,171,178],
[175,168,188,165,172,169,0,169],
[164,177,182,172,170,162,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,200,198,157,198,155,182],
[157,0,171,177,136,162,168,166],
[140,169,0,186,156,156,158,154],
[142,163,154,0,135,147,151,135],
[183,204,184,205,0,194,191,160],
[142,178,184,193,146,0,156,149],
[185,172,182,189,149,184,0,174],
[158,174,186,205,180,191,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,189,165,163,176,176,162],
[143,0,177,129,143,152,155,149],
[151,163,0,135,155,151,173,165],
[175,211,205,0,172,169,184,177],
[177,197,185,168,0,168,192,188],
[164,188,189,171,172,0,162,167],
[164,185,167,156,148,178,0,171],
[178,191,175,163,152,173,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,149,161,163,138,152,132],
[196,0,197,179,163,162,168,170],
[191,143,0,180,173,170,155,165],
[179,161,160,0,172,152,181,139],
[177,177,167,168,0,159,158,151],
[202,178,170,188,181,0,177,195],
[188,172,185,159,182,163,0,157],
[208,170,175,201,189,145,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,185,171,182,190,165,180],
[180,0,185,180,160,169,171,188],
[155,155,0,170,155,167,169,159],
[169,160,170,0,160,167,152,163],
[158,180,185,180,0,180,165,158],
[150,171,173,173,160,0,154,171],
[175,169,171,188,175,186,0,191],
[160,152,181,177,182,169,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,171,201,160,173,184,177],
[173,0,178,196,164,166,190,177],
[169,162,0,174,160,167,171,170],
[139,144,166,0,149,162,180,181],
[180,176,180,191,0,161,189,177],
[167,174,173,178,179,0,204,184],
[156,150,169,160,151,136,0,163],
[163,163,170,159,163,156,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,177,168,184,177,178,157],
[164,0,177,168,171,160,157,160],
[163,163,0,167,167,178,168,158],
[172,172,173,0,179,157,160,164],
[156,169,173,161,0,170,162,146],
[163,180,162,183,170,0,163,157],
[162,183,172,180,178,177,0,170],
[183,180,182,176,194,183,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,176,186,179,168,174,173],
[169,0,160,181,178,166,169,176],
[164,180,0,172,168,174,163,179],
[154,159,168,0,170,171,169,173],
[161,162,172,170,0,171,170,167],
[172,174,166,169,169,0,162,163],
[166,171,177,171,170,178,0,182],
[167,164,161,167,173,177,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,124,172,158,188,158,184],
[136,0,161,175,121,164,146,151],
[216,179,0,126,113,205,165,132],
[168,165,214,0,170,147,171,159],
[182,219,227,170,0,195,179,188],
[152,176,135,193,145,0,143,168],
[182,194,175,169,161,197,0,176],
[156,189,208,181,152,172,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,171,184,181,158,154,172],
[171,0,181,201,165,169,168,183],
[169,159,0,195,156,146,165,168],
[156,139,145,0,151,147,141,140],
[159,175,184,189,0,174,173,151],
[182,171,194,193,166,0,167,165],
[186,172,175,199,167,173,0,181],
[168,157,172,200,189,175,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,168,166,173,163,154,167],
[164,0,195,167,173,154,151,141],
[172,145,0,156,167,152,142,150],
[174,173,184,0,149,186,172,154],
[167,167,173,191,0,159,165,153],
[177,186,188,154,181,0,174,158],
[186,189,198,168,175,166,0,173],
[173,199,190,186,187,182,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,156,178,175,179,152,177],
[179,0,180,182,177,181,150,178],
[184,160,0,189,174,167,173,196],
[162,158,151,0,151,155,132,163],
[165,163,166,189,0,158,163,162],
[161,159,173,185,182,0,147,182],
[188,190,167,208,177,193,0,180],
[163,162,144,177,178,158,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,169,185,174,164,180,168],
[155,0,157,171,173,155,167,170],
[171,183,0,178,178,159,175,183],
[155,169,162,0,176,171,179,170],
[166,167,162,164,0,173,170,165],
[176,185,181,169,167,0,162,179],
[160,173,165,161,170,178,0,173],
[172,170,157,170,175,161,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,151,157,160,151,167,174],
[178,0,174,171,183,161,187,184],
[189,166,0,171,164,177,175,183],
[183,169,169,0,171,171,159,194],
[180,157,176,169,0,156,173,187],
[189,179,163,169,184,0,171,201],
[173,153,165,181,167,169,0,191],
[166,156,157,146,153,139,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,177,177,146,155,193,156],
[157,0,154,145,156,146,147,156],
[163,186,0,155,141,180,199,154],
[163,195,185,0,154,166,186,173],
[194,184,199,186,0,182,172,168],
[185,194,160,174,158,0,163,152],
[147,193,141,154,168,177,0,155],
[184,184,186,167,172,188,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,176,164,172,180,196,179],
[166,0,189,180,171,173,187,195],
[164,151,0,170,165,165,167,169],
[176,160,170,0,163,162,187,181],
[168,169,175,177,0,175,179,183],
[160,167,175,178,165,0,181,165],
[144,153,173,153,161,159,0,156],
[161,145,171,159,157,175,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,167,173,223,162,200,213],
[126,0,165,179,198,171,204,190],
[173,175,0,159,191,192,200,180],
[167,161,181,0,215,137,188,175],
[117,142,149,125,0,125,143,170],
[178,169,148,203,215,0,205,212],
[140,136,140,152,197,135,0,171],
[127,150,160,165,170,128,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,158,189,187,177,187,149],
[164,0,156,156,208,184,169,168],
[182,184,0,174,229,170,171,176],
[151,184,166,0,207,171,171,175],
[153,132,111,133,0,156,143,158],
[163,156,170,169,184,0,198,183],
[153,171,169,169,197,142,0,174],
[191,172,164,165,182,157,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,195,161,206,175,177,211],
[132,0,201,159,192,160,167,182],
[145,139,0,187,182,169,225,132],
[179,181,153,0,197,175,175,188],
[134,148,158,143,0,169,171,150],
[165,180,171,165,171,0,175,175],
[163,173,115,165,169,165,0,151],
[129,158,208,152,190,165,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,183,179,170,177,160,180],
[163,0,179,171,155,168,160,177],
[157,161,0,174,163,176,162,167],
[161,169,166,0,151,166,160,176],
[170,185,177,189,0,176,181,192],
[163,172,164,174,164,0,164,190],
[180,180,178,180,159,176,0,189],
[160,163,173,164,148,150,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,163,163,153,157,166,162],
[188,0,174,188,174,163,194,182],
[177,166,0,178,167,164,168,178],
[177,152,162,0,149,154,157,162],
[187,166,173,191,0,174,187,178],
[183,177,176,186,166,0,170,189],
[174,146,172,183,153,170,0,169],
[178,158,162,178,162,151,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,165,159,179,181,162,141],
[163,0,181,149,174,192,166,155],
[175,159,0,162,188,184,145,174],
[181,191,178,0,152,200,185,181],
[161,166,152,188,0,177,158,175],
[159,148,156,140,163,0,136,147],
[178,174,195,155,182,204,0,187],
[199,185,166,159,165,193,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,172,167,149,164,150,154],
[169,0,166,172,148,161,161,182],
[168,174,0,159,154,183,142,189],
[173,168,181,0,147,146,164,181],
[191,192,186,193,0,161,167,201],
[176,179,157,194,179,0,170,170],
[190,179,198,176,173,170,0,192],
[186,158,151,159,139,170,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,161,167,120,158,169,148],
[161,0,167,163,130,140,151,138],
[179,173,0,197,145,169,188,177],
[173,177,143,0,150,156,176,129],
[220,210,195,190,0,184,193,170],
[182,200,171,184,156,0,197,152],
[171,189,152,164,147,143,0,153],
[192,202,163,211,170,188,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,185,170,157,195,179,178],
[176,0,206,189,170,214,189,213],
[155,134,0,155,147,169,170,160],
[170,151,185,0,170,204,181,179],
[183,170,193,170,0,191,186,172],
[145,126,171,136,149,0,143,144],
[161,151,170,159,154,197,0,170],
[162,127,180,161,168,196,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,175,201,168,188,185,166],
[180,0,167,179,179,157,177,162],
[165,173,0,197,156,156,175,186],
[139,161,143,0,164,148,163,144],
[172,161,184,176,0,144,175,157],
[152,183,184,192,196,0,196,180],
[155,163,165,177,165,144,0,154],
[174,178,154,196,183,160,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,173,146,134,189,187],
[242,0,167,214,213,182,207,215],
[233,173,0,217,166,135,171,178],
[167,126,123,0,164,128,154,158],
[194,127,174,176,0,141,141,125],
[206,158,205,212,199,0,191,191],
[151,133,169,186,199,149,0,174],
[153,125,162,182,215,149,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,180,167,155,179,172,175],
[161,0,183,178,172,169,181,165],
[160,157,0,160,154,181,159,155],
[173,162,180,0,169,179,179,150],
[185,168,186,171,0,179,180,177],
[161,171,159,161,161,0,168,145],
[168,159,181,161,160,172,0,155],
[165,175,185,190,163,195,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,171,172,142,174,160,160],
[178,0,185,166,177,171,172,172],
[169,155,0,155,142,168,149,160],
[168,174,185,0,163,174,171,161],
[198,163,198,177,0,189,188,181],
[166,169,172,166,151,0,165,143],
[180,168,191,169,152,175,0,169],
[180,168,180,179,159,197,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,233,233,186,186,265,189],
[186,0,194,281,213,183,202,111],
[107,146,0,194,134,124,197,127],
[107,59,146,0,118,151,170,127],
[154,127,206,222,0,167,214,127],
[154,157,216,189,173,0,232,205],
[75,138,143,170,126,108,0,56],
[151,229,213,213,213,135,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,176,172,153,172,161,168],
[155,0,176,170,182,167,169,177],
[164,164,0,168,158,167,180,176],
[168,170,172,0,177,165,172,180],
[187,158,182,163,0,169,175,184],
[168,173,173,175,171,0,161,166],
[179,171,160,168,165,179,0,191],
[172,163,164,160,156,174,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,181,168,175,170,176,160],
[170,0,177,173,169,172,161,176],
[159,163,0,170,167,164,159,166],
[172,167,170,0,170,161,164,161],
[165,171,173,170,0,159,169,160],
[170,168,176,179,181,0,175,173],
[164,179,181,176,171,165,0,180],
[180,164,174,179,180,167,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,164,166,169,151,154,156],
[176,0,146,168,176,151,170,169],
[176,194,0,176,183,170,166,173],
[174,172,164,0,174,155,150,163],
[171,164,157,166,0,144,153,155],
[189,189,170,185,196,0,175,176],
[186,170,174,190,187,165,0,169],
[184,171,167,177,185,164,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,143,122,157,197,171,115],
[191,0,125,162,167,218,202,160],
[197,215,0,219,189,200,168,171],
[218,178,121,0,219,169,217,202],
[183,173,151,121,0,208,140,167],
[143,122,140,171,132,0,123,132],
[169,138,172,123,200,217,0,141],
[225,180,169,138,173,208,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,170,168,173,173,151,162],
[158,0,167,167,175,183,150,165],
[170,173,0,163,183,185,164,167],
[172,173,177,0,175,181,173,170],
[167,165,157,165,0,176,148,156],
[167,157,155,159,164,0,156,159],
[189,190,176,167,192,184,0,168],
[178,175,173,170,184,181,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,195,184,147,167,142,189],
[127,0,171,215,194,185,147,216],
[145,169,0,180,132,160,152,188],
[156,125,160,0,147,200,173,206],
[193,146,208,193,0,177,185,187],
[173,155,180,140,163,0,135,134],
[198,193,188,167,155,205,0,186],
[151,124,152,134,153,206,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,164,166,171,158,168,163],
[184,0,170,177,199,168,170,181],
[176,170,0,190,174,171,161,185],
[174,163,150,0,163,160,153,181],
[169,141,166,177,0,160,157,179],
[182,172,169,180,180,0,166,192],
[172,170,179,187,183,174,0,189],
[177,159,155,159,161,148,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,176,168,187,181,189,169],
[178,0,173,175,187,164,182,193],
[164,167,0,163,156,174,168,175],
[172,165,177,0,178,163,176,177],
[153,153,184,162,0,155,162,163],
[159,176,166,177,185,0,180,189],
[151,158,172,164,178,160,0,173],
[171,147,165,163,177,151,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,151,190,170,191,203],
[181,0,191,155,184,181,170,190],
[177,149,0,147,211,209,204,136],
[189,185,193,0,198,223,206,168],
[150,156,129,142,0,180,190,140],
[170,159,131,117,160,0,185,145],
[149,170,136,134,150,155,0,186],
[137,150,204,172,200,195,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,163,156,179,176,188,159],
[169,0,143,154,160,146,158,140],
[177,197,0,187,171,171,171,164],
[184,186,153,0,181,179,169,161],
[161,180,169,159,0,173,166,163],
[164,194,169,161,167,0,177,156],
[152,182,169,171,174,163,0,175],
[181,200,176,179,177,184,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,171,147,146,168,157,169],
[186,0,170,169,196,208,188,168],
[169,170,0,157,175,191,159,171],
[193,171,183,0,163,182,171,177],
[194,144,165,177,0,170,180,162],
[172,132,149,158,170,0,152,160],
[183,152,181,169,160,188,0,174],
[171,172,169,163,178,180,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,177,166,175,163,156,151],
[162,0,171,174,167,146,143,162],
[163,169,0,156,116,146,148,148],
[174,166,184,0,176,175,179,174],
[165,173,224,164,0,114,158,164],
[177,194,194,165,226,0,179,161],
[184,197,192,161,182,161,0,169],
[189,178,192,166,176,179,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,164,173,155,187,185,192],
[146,0,151,143,138,165,155,151],
[176,189,0,162,170,183,186,182],
[167,197,178,0,152,183,170,172],
[185,202,170,188,0,190,179,191],
[153,175,157,157,150,0,161,171],
[155,185,154,170,161,179,0,174],
[148,189,158,168,149,169,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,110,96,93,175,114,128],
[263,0,131,211,152,216,183,190],
[230,209,0,209,244,262,170,194],
[244,129,131,0,176,238,179,150],
[247,188,96,164,0,207,150,165],
[165,124,78,102,133,0,151,126],
[226,157,170,161,190,189,0,157],
[212,150,146,190,175,214,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,178,173,168,172,170,156],
[178,0,180,183,160,178,175,177],
[162,160,0,183,162,170,178,159],
[167,157,157,0,153,166,165,158],
[172,180,178,187,0,170,183,175],
[168,162,170,174,170,0,173,161],
[170,165,162,175,157,167,0,161],
[184,163,181,182,165,179,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,167,184,172,169,162,185],
[166,0,183,187,181,180,179,185],
[173,157,0,183,170,168,165,175],
[156,153,157,0,165,164,155,156],
[168,159,170,175,0,173,171,164],
[171,160,172,176,167,0,169,168],
[178,161,175,185,169,171,0,165],
[155,155,165,184,176,172,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,177,160,187,164,159,159],
[172,0,168,167,182,172,152,187],
[163,172,0,165,187,166,154,171],
[180,173,175,0,169,192,170,182],
[153,158,153,171,0,175,155,171],
[176,168,174,148,165,0,162,173],
[181,188,186,170,185,178,0,184],
[181,153,169,158,169,167,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,165,166,170,166,166,176],
[172,0,166,170,170,167,178,174],
[175,174,0,176,169,168,175,184],
[174,170,164,0,159,163,169,170],
[170,170,171,181,0,180,172,179],
[174,173,172,177,160,0,174,175],
[174,162,165,171,168,166,0,180],
[164,166,156,170,161,165,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,172,189,186,166,180,187],
[165,0,171,168,181,167,187,178],
[168,169,0,180,171,169,171,172],
[151,172,160,0,178,143,171,166],
[154,159,169,162,0,152,165,165],
[174,173,171,197,188,0,185,169],
[160,153,169,169,175,155,0,182],
[153,162,168,174,175,171,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,178,175,169,166,158,164],
[164,0,173,173,181,166,159,171],
[162,167,0,181,175,168,173,168],
[165,167,159,0,152,147,158,159],
[171,159,165,188,0,165,164,168],
[174,174,172,193,175,0,168,165],
[182,181,167,182,176,172,0,172],
[176,169,172,181,172,175,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,187,200,187,178,174,180],
[177,0,170,204,191,186,175,178],
[153,170,0,199,176,160,166,185],
[140,136,141,0,140,177,155,171],
[153,149,164,200,0,173,167,198],
[162,154,180,163,167,0,151,163],
[166,165,174,185,173,189,0,191],
[160,162,155,169,142,177,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,167,172,174,169,185,183],
[169,0,155,175,171,171,179,186],
[173,185,0,172,173,165,175,196],
[168,165,168,0,157,161,165,175],
[166,169,167,183,0,173,172,179],
[171,169,175,179,167,0,173,181],
[155,161,165,175,168,167,0,168],
[157,154,144,165,161,159,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,160,161,136,185,151,144],
[194,0,195,150,173,201,179,175],
[180,145,0,172,157,171,154,155],
[179,190,168,0,184,187,174,162],
[204,167,183,156,0,192,155,155],
[155,139,169,153,148,0,136,159],
[189,161,186,166,185,204,0,167],
[196,165,185,178,185,181,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,167,160,167,175,157,175],
[177,0,173,157,158,168,162,165],
[173,167,0,156,168,169,149,162],
[180,183,184,0,177,180,156,180],
[173,182,172,163,0,173,152,169],
[165,172,171,160,167,0,166,170],
[183,178,191,184,188,174,0,167],
[165,175,178,160,171,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,180,172,180,159,177,164],
[157,0,160,170,160,163,160,148],
[160,180,0,184,159,149,172,151],
[168,170,156,0,186,160,159,173],
[160,180,181,154,0,156,166,152],
[181,177,191,180,184,0,164,158],
[163,180,168,181,174,176,0,156],
[176,192,189,167,188,182,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,201,283,258,172,172,156],
[0,0,86,168,99,57,57,143],
[139,254,0,327,156,57,159,143],
[57,172,13,0,156,57,57,143],
[82,241,184,184,0,57,241,57],
[168,283,283,283,283,0,184,238],
[168,283,181,283,99,156,0,156],
[184,197,197,197,283,102,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,177,170,178,180,177,182],
[171,0,155,160,148,168,163,183],
[163,185,0,150,141,162,151,165],
[170,180,190,0,180,169,172,188],
[162,192,199,160,0,169,153,160],
[160,172,178,171,171,0,165,189],
[163,177,189,168,187,175,0,180],
[158,157,175,152,180,151,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,176,185,185,190,176,187],
[170,0,178,152,167,168,173,189],
[164,162,0,152,149,182,169,163],
[155,188,188,0,180,185,172,194],
[155,173,191,160,0,198,163,168],
[150,172,158,155,142,0,156,157],
[164,167,171,168,177,184,0,182],
[153,151,177,146,172,183,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,159,162,147,161,174,155],
[172,0,171,162,147,164,175,163],
[181,169,0,162,153,146,167,153],
[178,178,178,0,167,170,179,172],
[193,193,187,173,0,170,188,182],
[179,176,194,170,170,0,183,180],
[166,165,173,161,152,157,0,158],
[185,177,187,168,158,160,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,177,177,190,173,170],
[181,0,174,175,180,191,177,161],
[177,166,0,190,182,181,180,170],
[163,165,150,0,166,162,163,158],
[163,160,158,174,0,186,167,167],
[150,149,159,178,154,0,166,172],
[167,163,160,177,173,174,0,162],
[170,179,170,182,173,168,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,181,186,186,159,177,193],
[176,0,173,148,185,155,155,181],
[159,167,0,146,180,168,148,170],
[154,192,194,0,176,183,155,169],
[154,155,160,164,0,165,158,183],
[181,185,172,157,175,0,167,170],
[163,185,192,185,182,173,0,188],
[147,159,170,171,157,170,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,244,268,281,142,290,210],
[96,0,213,247,281,231,334,262],
[96,127,0,179,253,238,238,269],
[72,93,161,0,202,142,201,161],
[59,59,87,138,0,136,195,161],
[198,109,102,198,204,0,220,220],
[50,6,102,139,145,120,0,102],
[130,78,71,179,179,120,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,158,188,174,181,185,197],
[160,0,148,168,132,152,166,187],
[182,192,0,190,154,188,188,199],
[152,172,150,0,142,171,152,174],
[166,208,186,198,0,190,181,188],
[159,188,152,169,150,0,163,188],
[155,174,152,188,159,177,0,175],
[143,153,141,166,152,152,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,197,133,170,123,210,192],
[199,0,236,179,223,176,181,166],
[143,104,0,118,154,67,116,147],
[207,161,222,0,210,146,162,213],
[170,117,186,130,0,115,135,129],
[217,164,273,194,225,0,206,225],
[130,159,224,178,205,134,0,188],
[148,174,193,127,211,115,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,180,165,154,162,163],
[159,0,162,179,156,159,167,148],
[172,178,0,156,164,169,155,157],
[160,161,184,0,176,163,159,162],
[175,184,176,164,0,172,166,150],
[186,181,171,177,168,0,181,159],
[178,173,185,181,174,159,0,172],
[177,192,183,178,190,181,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,152,99,176,151,185,242],
[223,0,177,129,141,220,217,220],
[188,163,0,125,148,162,180,195],
[241,211,215,0,121,215,221,197],
[164,199,192,219,0,173,234,233],
[189,120,178,125,167,0,167,204],
[155,123,160,119,106,173,0,193],
[98,120,145,143,107,136,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,172,180,185,181,163,177],
[161,0,159,171,168,172,177,155],
[168,181,0,163,168,174,156,172],
[160,169,177,0,181,168,163,167],
[155,172,172,159,0,165,172,152],
[159,168,166,172,175,0,175,162],
[177,163,184,177,168,165,0,164],
[163,185,168,173,188,178,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,166,175,173,180,178,172],
[165,0,167,176,181,168,164,167],
[174,173,0,168,193,173,165,175],
[165,164,172,0,164,157,155,159],
[167,159,147,176,0,165,152,160],
[160,172,167,183,175,0,155,167],
[162,176,175,185,188,185,0,174],
[168,173,165,181,180,173,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,205,165,177,202,186,175],
[143,0,144,135,163,170,164,158],
[135,196,0,155,172,168,176,151],
[175,205,185,0,183,203,189,156],
[163,177,168,157,0,162,185,183],
[138,170,172,137,178,0,154,163],
[154,176,164,151,155,186,0,161],
[165,182,189,184,157,177,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,186,146,170,175,199,175],
[167,0,190,168,186,184,216,195],
[154,150,0,160,157,150,179,151],
[194,172,180,0,194,151,229,187],
[170,154,183,146,0,167,165,172],
[165,156,190,189,173,0,194,140],
[141,124,161,111,175,146,0,142],
[165,145,189,153,168,200,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,165,164,167,188,168,166],
[170,0,165,152,173,186,168,169],
[175,175,0,165,176,184,171,166],
[176,188,175,0,182,191,166,183],
[173,167,164,158,0,184,169,151],
[152,154,156,149,156,0,140,150],
[172,172,169,174,171,200,0,177],
[174,171,174,157,189,190,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,183,187,178,165,170,175],
[186,0,179,190,170,196,174,180],
[157,161,0,176,161,181,174,179],
[153,150,164,0,164,170,154,158],
[162,170,179,176,0,175,176,178],
[175,144,159,170,165,0,173,169],
[170,166,166,186,164,167,0,172],
[165,160,161,182,162,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,158,170,150,152,181,170],
[177,0,165,176,170,184,159,158],
[182,175,0,191,161,172,163,161],
[170,164,149,0,140,166,160,149],
[190,170,179,200,0,174,167,167],
[188,156,168,174,166,0,145,170],
[159,181,177,180,173,195,0,155],
[170,182,179,191,173,170,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,156,170,163,170,167,168],
[173,0,154,169,174,172,171,176],
[184,186,0,177,186,183,187,169],
[170,171,163,0,165,172,166,166],
[177,166,154,175,0,166,167,168],
[170,168,157,168,174,0,179,167],
[173,169,153,174,173,161,0,173],
[172,164,171,174,172,173,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,159,167,170,164,158,182],
[163,0,166,159,153,151,153,163],
[181,174,0,157,179,167,174,173],
[173,181,183,0,172,167,155,170],
[170,187,161,168,0,157,147,162],
[176,189,173,173,183,0,162,180],
[182,187,166,185,193,178,0,185],
[158,177,167,170,178,160,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,164,153,161,156,166,160],
[182,0,172,177,175,169,187,172],
[176,168,0,165,181,164,181,165],
[187,163,175,0,183,175,201,166],
[179,165,159,157,0,165,184,172],
[184,171,176,165,175,0,185,172],
[174,153,159,139,156,155,0,157],
[180,168,175,174,168,168,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,170,157,149,168,174,176],
[159,0,155,137,147,159,170,160],
[170,185,0,171,164,181,187,185],
[183,203,169,0,181,185,185,191],
[191,193,176,159,0,175,176,174],
[172,181,159,155,165,0,168,172],
[166,170,153,155,164,172,0,172],
[164,180,155,149,166,168,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,155,164,172,172,176,196],
[182,0,184,152,189,177,191,190],
[185,156,0,176,190,186,178,203],
[176,188,164,0,175,165,173,186],
[168,151,150,165,0,154,160,165],
[168,163,154,175,186,0,160,184],
[164,149,162,167,180,180,0,176],
[144,150,137,154,175,156,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,155,177,164,166,171,173],
[175,0,189,154,176,182,163,187],
[185,151,0,163,138,170,141,163],
[163,186,177,0,184,195,174,168],
[176,164,202,156,0,173,175,179],
[174,158,170,145,167,0,146,173],
[169,177,199,166,165,194,0,184],
[167,153,177,172,161,167,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,177,171,182,180,188,168],
[162,0,167,168,176,179,174,164],
[163,173,0,170,185,185,173,163],
[169,172,170,0,182,184,179,175],
[158,164,155,158,0,166,177,154],
[160,161,155,156,174,0,164,141],
[152,166,167,161,163,176,0,150],
[172,176,177,165,186,199,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,190,179,179,179,162,176],
[161,0,177,176,163,187,177,181],
[150,163,0,161,148,170,153,163],
[161,164,179,0,177,182,166,186],
[161,177,192,163,0,188,177,187],
[161,153,170,158,152,0,160,185],
[178,163,187,174,163,180,0,180],
[164,159,177,154,153,155,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,209,186,186,187,218,176],
[172,0,180,215,162,167,220,185],
[131,160,0,168,134,159,206,170],
[154,125,172,0,150,101,141,142],
[154,178,206,190,0,180,196,204],
[153,173,181,239,160,0,199,148],
[122,120,134,199,144,141,0,140],
[164,155,170,198,136,192,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,175,168,161,141,165,158],
[171,0,164,162,158,141,175,155],
[165,176,0,170,189,163,194,176],
[172,178,170,0,163,174,201,158],
[179,182,151,177,0,155,165,164],
[199,199,177,166,185,0,202,185],
[175,165,146,139,175,138,0,151],
[182,185,164,182,176,155,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,207,163,190,168,180,181],
[161,0,195,154,191,166,173,164],
[133,145,0,120,153,175,165,147],
[177,186,220,0,200,183,191,163],
[150,149,187,140,0,155,173,157],
[172,174,165,157,185,0,202,170],
[160,167,175,149,167,138,0,170],
[159,176,193,177,183,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,167,157,148,194,174,135],
[167,0,239,175,202,168,206,190],
[173,101,0,136,162,163,214,156],
[183,165,204,0,147,219,222,178],
[192,138,178,193,0,174,197,186],
[146,172,177,121,166,0,193,143],
[166,134,126,118,143,147,0,135],
[205,150,184,162,154,197,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,182,170,190,169,191,170],
[168,0,190,170,179,179,181,177],
[158,150,0,158,179,173,158,170],
[170,170,182,0,182,179,172,188],
[150,161,161,158,0,185,173,156],
[171,161,167,161,155,0,173,164],
[149,159,182,168,167,167,0,155],
[170,163,170,152,184,176,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,147,167,164,173,171],
[171,0,178,164,175,177,168,177],
[174,162,0,158,171,158,173,174],
[193,176,182,0,194,174,161,175],
[173,165,169,146,0,154,162,178],
[176,163,182,166,186,0,182,176],
[167,172,167,179,178,158,0,184],
[169,163,166,165,162,164,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,162,160,175,176,182,159],
[159,0,154,145,184,163,183,151],
[178,186,0,166,195,166,189,174],
[180,195,174,0,193,172,182,164],
[165,156,145,147,0,148,160,153],
[164,177,174,168,192,0,188,170],
[158,157,151,158,180,152,0,156],
[181,189,166,176,187,170,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,161,157,165,176,180,175],
[166,0,172,147,167,171,166,169],
[179,168,0,165,174,170,172,173],
[183,193,175,0,180,178,169,178],
[175,173,166,160,0,177,165,178],
[164,169,170,162,163,0,170,157],
[160,174,168,171,175,170,0,176],
[165,171,167,162,162,183,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,156,148,116,131,146,155],
[200,0,190,169,186,180,177,184],
[184,150,0,171,160,165,165,165],
[192,171,169,0,181,184,175,159],
[224,154,180,159,0,159,182,161],
[209,160,175,156,181,0,177,172],
[194,163,175,165,158,163,0,150],
[185,156,175,181,179,168,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,194,167,137,201,137,193],
[177,0,193,166,166,209,177,183],
[146,147,0,153,163,207,151,174],
[173,174,187,0,169,215,155,188],
[203,174,177,171,0,202,159,195],
[139,131,133,125,138,0,125,171],
[203,163,189,185,181,215,0,186],
[147,157,166,152,145,169,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,133,132,168,190,179,169],
[200,0,175,160,172,204,186,223],
[207,165,0,187,184,199,209,210],
[208,180,153,0,172,201,187,221],
[172,168,156,168,0,163,160,156],
[150,136,141,139,177,0,152,191],
[161,154,131,153,180,188,0,211],
[171,117,130,119,184,149,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,199,145,181,194,261,241],
[140,0,193,172,124,169,194,214],
[141,147,0,113,108,164,220,167],
[195,168,227,0,191,158,251,218],
[159,216,232,149,0,219,195,202],
[146,171,176,182,121,0,221,206],
[79,146,120,89,145,119,0,120],
[99,126,173,122,138,134,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,200,175,149,164,144,178],
[181,0,192,189,179,179,166,214],
[140,148,0,155,161,158,139,182],
[165,151,185,0,167,175,175,190],
[191,161,179,173,0,186,161,199],
[176,161,182,165,154,0,152,174],
[196,174,201,165,179,188,0,211],
[162,126,158,150,141,166,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,177,166,150,167,164,167],
[174,0,169,179,164,175,167,173],
[163,171,0,165,161,171,169,180],
[174,161,175,0,176,165,174,170],
[190,176,179,164,0,168,164,176],
[173,165,169,175,172,0,182,180],
[176,173,171,166,176,158,0,177],
[173,167,160,170,164,160,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,136,93,138,104,113,158],
[199,0,205,176,147,166,146,171],
[204,135,0,156,149,152,115,168],
[247,164,184,0,176,153,184,233],
[202,193,191,164,0,177,173,204],
[236,174,188,187,163,0,190,199],
[227,194,225,156,167,150,0,206],
[182,169,172,107,136,141,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,168,174,161,169,168,187],
[151,0,143,155,149,166,157,174],
[172,197,0,180,175,177,164,192],
[166,185,160,0,168,158,178,177],
[179,191,165,172,0,177,188,184],
[171,174,163,182,163,0,187,180],
[172,183,176,162,152,153,0,186],
[153,166,148,163,156,160,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,180,174,176,165,162,180],
[166,0,188,168,183,177,170,168],
[160,152,0,162,155,154,154,154],
[166,172,178,0,180,176,157,168],
[164,157,185,160,0,172,156,172],
[175,163,186,164,168,0,144,186],
[178,170,186,183,184,196,0,187],
[160,172,186,172,168,154,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,154,174,149,158,145,157],
[192,0,157,178,176,173,181,184],
[186,183,0,197,169,176,191,184],
[166,162,143,0,151,156,166,189],
[191,164,171,189,0,176,195,189],
[182,167,164,184,164,0,165,167],
[195,159,149,174,145,175,0,177],
[183,156,156,151,151,173,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,178,169,181,166,192,186],
[169,0,169,171,185,173,181,190],
[162,171,0,173,177,151,170,175],
[171,169,167,0,170,161,185,167],
[159,155,163,170,0,152,183,175],
[174,167,189,179,188,0,191,196],
[148,159,170,155,157,149,0,154],
[154,150,165,173,165,144,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,188,207,91,171,55,304],
[249,0,169,285,152,135,135,285],
[152,171,0,171,207,171,171,340],
[133,55,169,0,36,135,19,304],
[249,188,133,304,0,135,152,268],
[169,205,169,205,205,0,188,285],
[285,205,169,321,188,152,0,321],
[36,55,0,36,72,55,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,128,183,179,153,164,168],
[194,0,172,195,181,171,171,158],
[212,168,0,190,181,193,170,158],
[157,145,150,0,174,177,141,175],
[161,159,159,166,0,181,170,156],
[187,169,147,163,159,0,160,176],
[176,169,170,199,170,180,0,174],
[172,182,182,165,184,164,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,205,204,221,186,178,149],
[97,0,155,111,130,137,42,109],
[135,185,0,147,160,59,35,171],
[136,229,193,0,168,131,154,103],
[119,210,180,172,0,180,153,135],
[154,203,281,209,160,0,133,181],
[162,298,305,186,187,207,0,172],
[191,231,169,237,205,159,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,162,162,175,165,148,164],
[193,0,169,188,178,166,173,182],
[178,171,0,181,188,176,170,174],
[178,152,159,0,168,145,155,164],
[165,162,152,172,0,152,160,168],
[175,174,164,195,188,0,168,171],
[192,167,170,185,180,172,0,183],
[176,158,166,176,172,169,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,177,182,182,166,175,155],
[179,0,168,177,172,166,181,157],
[163,172,0,160,166,159,165,159],
[158,163,180,0,174,159,175,163],
[158,168,174,166,0,157,164,152],
[174,174,181,181,183,0,168,170],
[165,159,175,165,176,172,0,172],
[185,183,181,177,188,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,170,170,177,193,171,197],
[168,0,185,185,171,180,164,197],
[170,155,0,156,167,179,161,186],
[170,155,184,0,169,177,189,183],
[163,169,173,171,0,182,165,180],
[147,160,161,163,158,0,148,179],
[169,176,179,151,175,192,0,190],
[143,143,154,157,160,161,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,150,170,174,163,169,155],
[155,0,142,178,150,178,160,178],
[190,198,0,173,195,166,181,207],
[170,162,167,0,182,157,178,166],
[166,190,145,158,0,148,174,157],
[177,162,174,183,192,0,181,185],
[171,180,159,162,166,159,0,186],
[185,162,133,174,183,155,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,175,205,180,194,170,180],
[130,0,158,163,179,153,143,162],
[165,182,0,182,154,155,180,188],
[135,177,158,0,180,139,165,177],
[160,161,186,160,0,147,183,191],
[146,187,185,201,193,0,179,177],
[170,197,160,175,157,161,0,165],
[160,178,152,163,149,163,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,175,179,170,177,182,175],
[171,0,183,165,183,174,181,189],
[165,157,0,170,173,167,162,168],
[161,175,170,0,164,165,174,171],
[170,157,167,176,0,166,163,163],
[163,166,173,175,174,0,181,169],
[158,159,178,166,177,159,0,168],
[165,151,172,169,177,171,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,153,162,138,169,145,161],
[156,0,130,171,171,158,137,163],
[187,210,0,179,155,148,194,213],
[178,169,161,0,205,167,198,215],
[202,169,185,135,0,198,183,178],
[171,182,192,173,142,0,209,159],
[195,203,146,142,157,131,0,158],
[179,177,127,125,162,181,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,171,176,183,186,177,172],
[172,0,172,185,167,168,174,183],
[169,168,0,176,160,181,177,179],
[164,155,164,0,164,164,162,168],
[157,173,180,176,0,183,172,179],
[154,172,159,176,157,0,187,184],
[163,166,163,178,168,153,0,173],
[168,157,161,172,161,156,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,149,160,162,162,168,173],
[199,0,161,188,193,166,182,175],
[191,179,0,173,163,173,184,177],
[180,152,167,0,155,161,154,188],
[178,147,177,185,0,172,162,172],
[178,174,167,179,168,0,173,188],
[172,158,156,186,178,167,0,175],
[167,165,163,152,168,152,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,173,175,170,176,170,171],
[168,0,174,173,149,167,169,166],
[167,166,0,172,155,161,161,170],
[165,167,168,0,170,166,170,173],
[170,191,185,170,0,174,169,169],
[164,173,179,174,166,0,181,178],
[170,171,179,170,171,159,0,175],
[169,174,170,167,171,162,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,149,151,149,160,167,162],
[174,0,156,165,151,157,182,157],
[191,184,0,171,171,170,185,169],
[189,175,169,0,161,165,165,156],
[191,189,169,179,0,181,200,173],
[180,183,170,175,159,0,178,162],
[173,158,155,175,140,162,0,151],
[178,183,171,184,167,178,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,173,151,160,167,167,161],
[187,0,187,169,167,177,176,172],
[167,153,0,140,167,173,171,162],
[189,171,200,0,176,167,185,171],
[180,173,173,164,0,167,180,162],
[173,163,167,173,173,0,186,174],
[173,164,169,155,160,154,0,158],
[179,168,178,169,178,166,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,165,172,163,175,153,152],
[167,0,176,175,164,172,153,164],
[175,164,0,167,163,164,166,164],
[168,165,173,0,157,173,160,153],
[177,176,177,183,0,172,164,160],
[165,168,176,167,168,0,173,162],
[187,187,174,180,176,167,0,171],
[188,176,176,187,180,178,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,168,170,181,164,192,179],
[155,0,159,165,182,168,176,170],
[172,181,0,159,191,178,188,185],
[170,175,181,0,172,164,184,165],
[159,158,149,168,0,163,187,173],
[176,172,162,176,177,0,187,176],
[148,164,152,156,153,153,0,158],
[161,170,155,175,167,164,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,166,191,162,186,171,163],
[182,0,195,169,175,210,187,180],
[174,145,0,172,136,189,178,169],
[149,171,168,0,149,180,151,157],
[178,165,204,191,0,188,169,173],
[154,130,151,160,152,0,161,148],
[169,153,162,189,171,179,0,167],
[177,160,171,183,167,192,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,164,122,172,121,104,117],
[178,0,169,122,134,60,123,153],
[176,171,0,127,223,149,156,156],
[218,218,213,0,127,75,168,173],
[168,206,117,213,0,116,161,124],
[219,280,191,265,224,0,177,144],
[236,217,184,172,179,163,0,191],
[223,187,184,167,216,196,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,161,166,172,157,164,162],
[171,0,188,168,176,167,171,175],
[179,152,0,161,173,164,171,168],
[174,172,179,0,173,167,182,193],
[168,164,167,167,0,155,162,160],
[183,173,176,173,185,0,170,170],
[176,169,169,158,178,170,0,167],
[178,165,172,147,180,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,159,175,190,162,185,171],
[179,0,157,181,179,180,182,191],
[181,183,0,158,193,169,180,192],
[165,159,182,0,189,154,180,186],
[150,161,147,151,0,149,163,162],
[178,160,171,186,191,0,204,199],
[155,158,160,160,177,136,0,159],
[169,149,148,154,178,141,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,143,136,152,157,170,157],
[163,0,153,113,131,170,174,192],
[197,187,0,143,136,133,175,151],
[204,227,197,0,183,153,224,173],
[188,209,204,157,0,186,192,240],
[183,170,207,187,154,0,195,180],
[170,166,165,116,148,145,0,147],
[183,148,189,167,100,160,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,163,182,163,177,170,162],
[152,0,161,163,154,171,170,157],
[177,179,0,177,168,177,182,178],
[158,177,163,0,160,172,162,155],
[177,186,172,180,0,190,178,161],
[163,169,163,168,150,0,178,160],
[170,170,158,178,162,162,0,149],
[178,183,162,185,179,180,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,165,190,163,189,189,159],
[130,0,132,134,135,161,146,148],
[175,208,0,170,204,159,196,169],
[150,206,170,0,201,121,156,163],
[177,205,136,139,0,128,183,134],
[151,179,181,219,212,0,182,176],
[151,194,144,184,157,158,0,128],
[181,192,171,177,206,164,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,172,188,185,152,165,165],
[152,0,152,172,157,167,171,159],
[168,188,0,171,183,168,170,180],
[152,168,169,0,164,162,167,163],
[155,183,157,176,0,158,165,154],
[188,173,172,178,182,0,178,163],
[175,169,170,173,175,162,0,176],
[175,181,160,177,186,177,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,165,177,138,145,150,160],
[174,0,168,194,153,152,164,158],
[175,172,0,193,170,150,186,158],
[163,146,147,0,144,155,168,163],
[202,187,170,196,0,174,189,162],
[195,188,190,185,166,0,195,171],
[190,176,154,172,151,145,0,165],
[180,182,182,177,178,169,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,168,162,172,164,164,155],
[170,0,182,169,183,173,173,169],
[172,158,0,170,166,166,169,155],
[178,171,170,0,184,172,191,160],
[168,157,174,156,0,166,166,165],
[176,167,174,168,174,0,178,175],
[176,167,171,149,174,162,0,162],
[185,171,185,180,175,165,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,192,213,200,142,216,158],
[170,0,183,186,209,120,168,158],
[148,157,0,201,220,130,177,174],
[127,154,139,0,164,133,138,143],
[140,131,120,176,0,111,148,151],
[198,220,210,207,229,0,220,170],
[124,172,163,202,192,120,0,148],
[182,182,166,197,189,170,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,178,145,169,173,227,160],
[179,0,246,180,164,159,178,202],
[162,94,0,142,180,83,147,123],
[195,160,198,0,152,143,166,151],
[171,176,160,188,0,170,150,200],
[167,181,257,197,170,0,156,138],
[113,162,193,174,190,184,0,186],
[180,138,217,189,140,202,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,160,160,165,148,179,156],
[176,0,170,177,173,159,196,162],
[180,170,0,178,174,173,183,179],
[180,163,162,0,171,166,195,184],
[175,167,166,169,0,162,180,181],
[192,181,167,174,178,0,192,182],
[161,144,157,145,160,148,0,155],
[184,178,161,156,159,158,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,157,150,159,164,170,167],
[181,0,167,166,154,170,165,179],
[183,173,0,159,158,184,176,175],
[190,174,181,0,163,163,176,184],
[181,186,182,177,0,166,174,178],
[176,170,156,177,174,0,186,189],
[170,175,164,164,166,154,0,173],
[173,161,165,156,162,151,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,145,159,171,168,165,169],
[174,0,171,168,173,167,166,169],
[195,169,0,176,180,160,156,174],
[181,172,164,0,172,169,169,173],
[169,167,160,168,0,152,168,163],
[172,173,180,171,188,0,170,167],
[175,174,184,171,172,170,0,176],
[171,171,166,167,177,173,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,176,169,169,153,167,156],
[178,0,169,186,165,175,165,163],
[164,171,0,156,179,157,149,156],
[171,154,184,0,174,163,169,165],
[171,175,161,166,0,184,173,159],
[187,165,183,177,156,0,165,171],
[173,175,191,171,167,175,0,161],
[184,177,184,175,181,169,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,176,166,150,148,162,172],
[168,0,168,168,170,162,180,183],
[164,172,0,155,172,161,180,181],
[174,172,185,0,158,171,170,177],
[190,170,168,182,0,171,178,178],
[192,178,179,169,169,0,183,190],
[178,160,160,170,162,157,0,173],
[168,157,159,163,162,150,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,203,154,174,157,154,173],
[180,0,218,174,187,159,187,191],
[137,122,0,135,141,133,146,153],
[186,166,205,0,175,159,160,169],
[166,153,199,165,0,170,176,181],
[183,181,207,181,170,0,188,199],
[186,153,194,180,164,152,0,175],
[167,149,187,171,159,141,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,178,164,197,177,168,184],
[168,0,169,177,172,180,166,177],
[162,171,0,144,180,170,165,183],
[176,163,196,0,200,184,176,183],
[143,168,160,140,0,164,148,157],
[163,160,170,156,176,0,151,166],
[172,174,175,164,192,189,0,187],
[156,163,157,157,183,174,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,173,180,175,168,179,168],
[174,0,167,177,180,164,189,174],
[167,173,0,184,168,180,191,158],
[160,163,156,0,157,184,173,170],
[165,160,172,183,0,169,178,169],
[172,176,160,156,171,0,193,169],
[161,151,149,167,162,147,0,161],
[172,166,182,170,171,171,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,175,175,183,168,178,188],
[160,0,183,177,168,183,186,179],
[165,157,0,171,176,164,172,172],
[165,163,169,0,173,168,159,180],
[157,172,164,167,0,165,173,181],
[172,157,176,172,175,0,159,181],
[162,154,168,181,167,181,0,174],
[152,161,168,160,159,159,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,185,157,178,176,166,177],
[175,0,177,170,188,177,170,173],
[155,163,0,157,181,168,166,162],
[183,170,183,0,179,171,180,177],
[162,152,159,161,0,163,167,167],
[164,163,172,169,177,0,168,169],
[174,170,174,160,173,172,0,174],
[163,167,178,163,173,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,162,141,188,178,136,148],
[165,0,173,142,191,174,167,163],
[178,167,0,129,166,189,206,205],
[199,198,211,0,192,206,159,169],
[152,149,174,148,0,178,121,172],
[162,166,151,134,162,0,148,167],
[204,173,134,181,219,192,0,204],
[192,177,135,171,168,173,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,164,191,188,187,182,172],
[159,0,150,163,178,187,180,166],
[176,190,0,174,174,182,169,171],
[149,177,166,0,187,187,170,180],
[152,162,166,153,0,165,147,155],
[153,153,158,153,175,0,153,134],
[158,160,171,170,193,187,0,175],
[168,174,169,160,185,206,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,153,163,147,159,152,156],
[176,0,174,188,167,164,172,153],
[187,166,0,180,159,191,168,174],
[177,152,160,0,151,154,149,158],
[193,173,181,189,0,173,180,170],
[181,176,149,186,167,0,166,166],
[188,168,172,191,160,174,0,171],
[184,187,166,182,170,174,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,174,166,167,178,166,176],
[168,0,167,164,166,175,169,188],
[166,173,0,177,163,194,153,182],
[174,176,163,0,177,187,164,191],
[173,174,177,163,0,189,178,176],
[162,165,146,153,151,0,163,162],
[174,171,187,176,162,177,0,173],
[164,152,158,149,164,178,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,173,180,144,175,179,161],
[183,0,190,163,161,169,173,166],
[167,150,0,156,148,169,153,145],
[160,177,184,0,160,164,156,172],
[196,179,192,180,0,169,203,194],
[165,171,171,176,171,0,165,180],
[161,167,187,184,137,175,0,186],
[179,174,195,168,146,160,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,173,165,171,170,176,162],
[178,0,184,199,176,170,168,176],
[167,156,0,168,174,160,170,164],
[175,141,172,0,168,169,157,149],
[169,164,166,172,0,178,180,141],
[170,170,180,171,162,0,163,154],
[164,172,170,183,160,177,0,168],
[178,164,176,191,199,186,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,167,177,159,173,164,173],
[178,0,171,172,180,173,167,172],
[173,169,0,164,166,171,161,166],
[163,168,176,0,178,173,176,169],
[181,160,174,162,0,170,164,166],
[167,167,169,167,170,0,165,165],
[176,173,179,164,176,175,0,169],
[167,168,174,171,174,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,192,197,163,174,164,189],
[151,0,181,206,163,157,155,173],
[148,159,0,192,143,176,161,191],
[143,134,148,0,134,145,143,168],
[177,177,197,206,0,190,162,194],
[166,183,164,195,150,0,191,173],
[176,185,179,197,178,149,0,183],
[151,167,149,172,146,167,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,179,163,185,194,196,169],
[154,0,161,146,182,156,184,143],
[161,179,0,190,159,175,196,171],
[177,194,150,0,183,171,185,161],
[155,158,181,157,0,177,213,158],
[146,184,165,169,163,0,182,169],
[144,156,144,155,127,158,0,142],
[171,197,169,179,182,171,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,163,146,172,171,177,162],
[158,0,181,165,169,168,168,167],
[177,159,0,162,183,156,185,172],
[194,175,178,0,194,161,163,190],
[168,171,157,146,0,166,167,169],
[169,172,184,179,174,0,156,173],
[163,172,155,177,173,184,0,169],
[178,173,168,150,171,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,164,156,174,172,168],
[181,0,169,165,163,173,172,169],
[177,171,0,171,165,157,174,170],
[176,175,169,0,164,161,179,166],
[184,177,175,176,0,178,170,179],
[166,167,183,179,162,0,172,176],
[168,168,166,161,170,168,0,168],
[172,171,170,174,161,164,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,179,193,177,190,179,176],
[173,0,191,169,190,177,190,175],
[161,149,0,158,175,169,180,152],
[147,171,182,0,171,147,173,154],
[163,150,165,169,0,163,179,162],
[150,163,171,193,177,0,173,162],
[161,150,160,167,161,167,0,159],
[164,165,188,186,178,178,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,174,154,170,169,168,184],
[170,0,164,157,183,166,171,171],
[166,176,0,167,166,172,171,175],
[186,183,173,0,179,161,175,175],
[170,157,174,161,0,157,171,176],
[171,174,168,179,183,0,174,171],
[172,169,169,165,169,166,0,170],
[156,169,165,165,164,169,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,175,186,178,171,171,168],
[154,0,170,183,172,167,170,154],
[165,170,0,192,167,183,165,170],
[154,157,148,0,159,155,152,154],
[162,168,173,181,0,165,170,162],
[169,173,157,185,175,0,168,165],
[169,170,175,188,170,172,0,153],
[172,186,170,186,178,175,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,146,162,164,177,165,161],
[187,0,162,160,159,145,160,163],
[194,178,0,175,147,159,171,177],
[178,180,165,0,159,155,151,152],
[176,181,193,181,0,182,164,177],
[163,195,181,185,158,0,148,178],
[175,180,169,189,176,192,0,182],
[179,177,163,188,163,162,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,163,167,163,160,167,174],
[179,0,164,181,181,168,187,174],
[177,176,0,166,177,160,176,162],
[173,159,174,0,180,166,175,172],
[177,159,163,160,0,170,162,164],
[180,172,180,174,170,0,173,181],
[173,153,164,165,178,167,0,167],
[166,166,178,168,176,159,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,171,195,194,179,172,162],
[163,0,174,191,179,163,145,158],
[169,166,0,164,197,155,170,163],
[145,149,176,0,173,159,149,148],
[146,161,143,167,0,158,125,151],
[161,177,185,181,182,0,148,185],
[168,195,170,191,215,192,0,190],
[178,182,177,192,189,155,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,176,202,148,115,196,211],
[170,0,206,159,194,193,227,285],
[164,134,0,176,148,130,82,151],
[138,181,164,0,230,209,213,218],
[192,146,192,110,0,211,145,154],
[225,147,210,131,129,0,212,218],
[144,113,258,127,195,128,0,192],
[129,55,189,122,186,122,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,118,50,68,58,127,81],
[286,0,230,174,148,170,276,294],
[222,110,0,56,87,137,92,137],
[290,166,284,0,203,178,174,193],
[272,192,253,137,0,201,224,265],
[282,170,203,162,139,0,226,290],
[213,64,248,166,116,114,0,234],
[259,46,203,147,75,50,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,174,169,173,188,146,173],
[174,0,181,197,193,171,185,170],
[166,159,0,194,190,183,169,196],
[171,143,146,0,178,165,153,152],
[167,147,150,162,0,165,162,152],
[152,169,157,175,175,0,156,166],
[194,155,171,187,178,184,0,171],
[167,170,144,188,188,174,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,172,219,150,172,155,208],
[105,0,154,212,158,151,121,209],
[168,186,0,189,171,188,172,164],
[121,128,151,0,105,151,126,163],
[190,182,169,235,0,184,161,213],
[168,189,152,189,156,0,153,201],
[185,219,168,214,179,187,0,212],
[132,131,176,177,127,139,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,173,167,169,192,174,169],
[177,0,173,177,167,188,183,174],
[167,167,0,184,183,178,187,166],
[173,163,156,0,166,177,166,180],
[171,173,157,174,0,181,177,158],
[148,152,162,163,159,0,157,170],
[166,157,153,174,163,183,0,174],
[171,166,174,160,182,170,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,196,173,183,192,163,195],
[161,0,179,145,138,165,128,165],
[144,161,0,150,146,166,137,165],
[167,195,190,0,155,180,151,176],
[157,202,194,185,0,187,180,200],
[148,175,174,160,153,0,127,145],
[177,212,203,189,160,213,0,172],
[145,175,175,164,140,195,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,170,196,190,181,205,180],
[151,0,158,188,162,171,176,161],
[170,182,0,185,177,190,204,179],
[144,152,155,0,158,156,148,153],
[150,178,163,182,0,191,175,173],
[159,169,150,184,149,0,181,152],
[135,164,136,192,165,159,0,164],
[160,179,161,187,167,188,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,150,175,182,209,185,146],
[115,0,124,129,155,156,184,140],
[190,216,0,164,147,208,206,175],
[165,211,176,0,170,194,199,195],
[158,185,193,170,0,190,188,181],
[131,184,132,146,150,0,163,153],
[155,156,134,141,152,177,0,153],
[194,200,165,145,159,187,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,163,171,139,158,150,164],
[164,0,151,143,152,132,135,144],
[177,189,0,187,171,159,153,176],
[169,197,153,0,170,138,141,155],
[201,188,169,170,0,155,151,169],
[182,208,181,202,185,0,185,162],
[190,205,187,199,189,155,0,176],
[176,196,164,185,171,178,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,178,171,174,191,171,159],
[195,0,165,177,170,195,183,162],
[162,175,0,178,155,179,172,158],
[169,163,162,0,157,190,172,160],
[166,170,185,183,0,194,183,180],
[149,145,161,150,146,0,156,157],
[169,157,168,168,157,184,0,166],
[181,178,182,180,160,183,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,173,169,166,165,173,171],
[175,0,173,175,162,172,178,176],
[167,167,0,167,172,169,170,177],
[171,165,173,0,161,174,178,166],
[174,178,168,179,0,173,167,175],
[175,168,171,166,167,0,163,174],
[167,162,170,162,173,177,0,177],
[169,164,163,174,165,166,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,181,175,167,186,174,174],
[175,0,190,159,176,183,170,175],
[159,150,0,152,166,167,155,162],
[165,181,188,0,180,177,173,171],
[173,164,174,160,0,173,162,164],
[154,157,173,163,167,0,161,164],
[166,170,185,167,178,179,0,173],
[166,165,178,169,176,176,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,158,178,134,154,188,160],
[212,0,170,181,146,207,228,186],
[182,170,0,197,167,177,197,171],
[162,159,143,0,157,153,179,144],
[206,194,173,183,0,182,206,161],
[186,133,163,187,158,0,204,154],
[152,112,143,161,134,136,0,120],
[180,154,169,196,179,186,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,179,166,181,176,170,164],
[151,0,177,164,162,169,169,146],
[161,163,0,156,187,166,169,150],
[174,176,184,0,175,176,170,162],
[159,178,153,165,0,163,164,157],
[164,171,174,164,177,0,163,172],
[170,171,171,170,176,177,0,163],
[176,194,190,178,183,168,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,170,170,147,160,156,173],
[179,0,175,177,167,173,182,181],
[170,165,0,170,164,167,168,180],
[170,163,170,0,163,169,168,178],
[193,173,176,177,0,176,163,185],
[180,167,173,171,164,0,166,168],
[184,158,172,172,177,174,0,187],
[167,159,160,162,155,172,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,152,176,159,161,172,162],
[180,0,165,173,155,160,176,168],
[188,175,0,177,170,171,185,176],
[164,167,163,0,167,163,177,154],
[181,185,170,173,0,177,186,183],
[179,180,169,177,163,0,188,173],
[168,164,155,163,154,152,0,160],
[178,172,164,186,157,167,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,155,173,191,154,164,166],
[178,0,162,186,200,164,171,190],
[185,178,0,178,213,173,167,171],
[167,154,162,0,210,156,163,193],
[149,140,127,130,0,132,124,142],
[186,176,167,184,208,0,176,194],
[176,169,173,177,216,164,0,183],
[174,150,169,147,198,146,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,188,194,181,196,183,191],
[170,0,168,184,172,189,167,179],
[152,172,0,177,180,176,173,166],
[146,156,163,0,171,175,163,156],
[159,168,160,169,0,162,170,163],
[144,151,164,165,178,0,150,160],
[157,173,167,177,170,190,0,177],
[149,161,174,184,177,180,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,171,187,158,170,168,173],
[159,0,170,168,147,161,167,166],
[169,170,0,176,159,163,176,171],
[153,172,164,0,152,161,162,156],
[182,193,181,188,0,166,186,180],
[170,179,177,179,174,0,184,171],
[172,173,164,178,154,156,0,165],
[167,174,169,184,160,169,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,176,173,170,175,175,171],
[164,0,185,186,161,197,186,168],
[164,155,0,174,155,171,153,146],
[167,154,166,0,143,157,160,170],
[170,179,185,197,0,184,209,179],
[165,143,169,183,156,0,182,181],
[165,154,187,180,131,158,0,153],
[169,172,194,170,161,159,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,168,171,172,174,171,174],
[162,0,153,153,153,170,150,187],
[172,187,0,156,162,186,168,174],
[169,187,184,0,170,187,167,177],
[168,187,178,170,0,186,176,212],
[166,170,154,153,154,0,147,183],
[169,190,172,173,164,193,0,172],
[166,153,166,163,128,157,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,161,189,163,186,174,170],
[146,0,150,161,197,152,162,148],
[179,190,0,166,174,166,149,155],
[151,179,174,0,156,170,169,140],
[177,143,166,184,0,163,148,137],
[154,188,174,170,177,0,165,157],
[166,178,191,171,192,175,0,137],
[170,192,185,200,203,183,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,200,172,178,156,140,145],
[198,0,189,190,194,174,191,152],
[140,151,0,154,164,149,156,137],
[168,150,186,0,160,151,172,150],
[162,146,176,180,0,129,173,169],
[184,166,191,189,211,0,166,178],
[200,149,184,168,167,174,0,163],
[195,188,203,190,171,162,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,162,163,164,201,163,182],
[163,0,171,178,160,176,165,178],
[178,169,0,179,176,187,165,193],
[177,162,161,0,156,183,184,172],
[176,180,164,184,0,201,190,169],
[139,164,153,157,139,0,147,182],
[177,175,175,156,150,193,0,195],
[158,162,147,168,171,158,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,165,158,220,160,218,178],
[166,0,180,191,202,175,167,167],
[175,160,0,195,211,173,194,221],
[182,149,145,0,218,174,169,160],
[120,138,129,122,0,141,169,174],
[180,165,167,166,199,0,210,191],
[122,173,146,171,171,130,0,167],
[162,173,119,180,166,149,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,177,184,174,171,163,170],
[156,0,165,168,170,166,170,169],
[163,175,0,176,164,167,168,176],
[156,172,164,0,167,158,170,163],
[166,170,176,173,0,166,173,177],
[169,174,173,182,174,0,173,163],
[177,170,172,170,167,167,0,166],
[170,171,164,177,163,177,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,165,154,167,149,155,149],
[161,0,168,163,174,149,163,160],
[175,172,0,166,163,157,164,168],
[186,177,174,0,167,177,177,170],
[173,166,177,173,0,165,187,151],
[191,191,183,163,175,0,177,161],
[185,177,176,163,153,163,0,155],
[191,180,172,170,189,179,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,164,176,142,164,171,157],
[146,0,176,161,186,147,175,176],
[176,164,0,141,155,142,159,153],
[164,179,199,0,197,122,196,178],
[198,154,185,143,0,166,186,161],
[176,193,198,218,174,0,172,161],
[169,165,181,144,154,168,0,172],
[183,164,187,162,179,179,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,179,170,172,169,157,165],
[175,0,178,178,173,168,156,169],
[161,162,0,179,173,162,174,167],
[170,162,161,0,180,160,161,169],
[168,167,167,160,0,171,155,162],
[171,172,178,180,169,0,166,172],
[183,184,166,179,185,174,0,173],
[175,171,173,171,178,168,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,169,183,169,161,169,180],
[165,0,169,174,163,168,176,183],
[171,171,0,173,160,168,176,185],
[157,166,167,0,162,173,174,175],
[171,177,180,178,0,167,171,186],
[179,172,172,167,173,0,168,171],
[171,164,164,166,169,172,0,184],
[160,157,155,165,154,169,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,142,173,174,156,142,167],
[152,0,138,187,165,163,139,164],
[198,202,0,195,166,175,169,181],
[167,153,145,0,120,150,149,136],
[166,175,174,220,0,178,157,140],
[184,177,165,190,162,0,141,161],
[198,201,171,191,183,199,0,165],
[173,176,159,204,200,179,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,163,176,198,140,162,212],
[201,0,150,170,167,145,150,183],
[177,190,0,185,204,130,178,201],
[164,170,155,0,177,172,165,189],
[142,173,136,163,0,140,179,145],
[200,195,210,168,200,0,211,179],
[178,190,162,175,161,129,0,210],
[128,157,139,151,195,161,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,164,160,159,139,168,149],
[191,0,151,180,176,175,219,180],
[176,189,0,174,167,169,177,195],
[180,160,166,0,167,155,179,181],
[181,164,173,173,0,150,187,194],
[201,165,171,185,190,0,193,166],
[172,121,163,161,153,147,0,152],
[191,160,145,159,146,174,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,168,163,177,174,158,162],
[153,0,147,140,150,170,146,164],
[172,193,0,178,186,169,161,186],
[177,200,162,0,192,193,171,191],
[163,190,154,148,0,169,147,163],
[166,170,171,147,171,0,151,164],
[182,194,179,169,193,189,0,180],
[178,176,154,149,177,176,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,165,166,179,161,177,165],
[184,0,173,177,187,171,180,167],
[175,167,0,185,184,176,175,187],
[174,163,155,0,171,156,172,159],
[161,153,156,169,0,160,164,163],
[179,169,164,184,180,0,172,176],
[163,160,165,168,176,168,0,179],
[175,173,153,181,177,164,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,187,170,186,185,197],
[169,0,175,193,149,181,171,185],
[169,165,0,172,165,178,177,166],
[153,147,168,0,152,154,157,166],
[170,191,175,188,0,191,178,187],
[154,159,162,186,149,0,174,166],
[155,169,163,183,162,166,0,173],
[143,155,174,174,153,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,144,138,159,129,142,139],
[172,0,170,143,186,148,175,165],
[196,170,0,172,186,167,157,172],
[202,197,168,0,201,170,198,189],
[181,154,154,139,0,147,172,174],
[211,192,173,170,193,0,177,186],
[198,165,183,142,168,163,0,176],
[201,175,168,151,166,154,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,143,215,152,154,144,183],
[175,0,179,191,175,154,103,170],
[197,161,0,210,177,171,190,196],
[125,149,130,0,156,146,100,161],
[188,165,163,184,0,146,146,144],
[186,186,169,194,194,0,141,174],
[196,237,150,240,194,199,0,180],
[157,170,144,179,196,166,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,155,161,177,152,151,160],
[183,0,171,147,156,192,192,177],
[185,169,0,174,173,166,146,187],
[179,193,166,0,154,129,192,156],
[163,184,167,186,0,173,197,198],
[188,148,174,211,167,0,178,188],
[189,148,194,148,143,162,0,126],
[180,163,153,184,142,152,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,188,182,182,148,212,191],
[182,0,200,180,204,161,209,214],
[152,140,0,155,195,155,196,115],
[158,160,185,0,193,175,183,193],
[158,136,145,147,0,141,176,174],
[192,179,185,165,199,0,226,193],
[128,131,144,157,164,114,0,141],
[149,126,225,147,166,147,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,217,169,171,139,166,161],
[179,0,206,208,171,190,178,155],
[123,134,0,177,148,134,134,115],
[171,132,163,0,155,160,155,174],
[169,169,192,185,0,158,161,150],
[201,150,206,180,182,0,189,148],
[174,162,206,185,179,151,0,154],
[179,185,225,166,190,192,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,144,250,248,225,234,203],
[122,0,127,166,181,167,201,219],
[196,213,0,169,198,246,206,188],
[90,174,171,0,196,195,240,185],
[92,159,142,144,0,185,196,162],
[115,173,94,145,155,0,178,154],
[106,139,134,100,144,162,0,169],
[137,121,152,155,178,186,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,152,175,159,167,159,172],
[171,0,149,175,165,179,156,180],
[188,191,0,199,175,185,162,182],
[165,165,141,0,162,161,158,167],
[181,175,165,178,0,182,172,166],
[173,161,155,179,158,0,155,160],
[181,184,178,182,168,185,0,177],
[168,160,158,173,174,180,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,176,165,157,157,169,174],
[181,0,182,178,165,158,184,178],
[164,158,0,180,158,166,155,170],
[175,162,160,0,148,163,163,155],
[183,175,182,192,0,169,194,170],
[183,182,174,177,171,0,167,182],
[171,156,185,177,146,173,0,173],
[166,162,170,185,170,158,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,136,159,159,161,138,171],
[191,0,142,189,159,172,161,212],
[204,198,0,182,167,181,174,213],
[181,151,158,0,144,150,142,179],
[181,181,173,196,0,160,139,185],
[179,168,159,190,180,0,132,208],
[202,179,166,198,201,208,0,198],
[169,128,127,161,155,132,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,150,161,171,152,166,133],
[182,0,181,189,192,185,180,163],
[190,159,0,169,176,178,162,150],
[179,151,171,0,177,149,162,172],
[169,148,164,163,0,169,159,146],
[188,155,162,191,171,0,176,161],
[174,160,178,178,181,164,0,163],
[207,177,190,168,194,179,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,164,160,174,169,163,175],
[175,0,158,168,168,174,161,179],
[176,182,0,172,174,180,170,181],
[180,172,168,0,178,178,176,183],
[166,172,166,162,0,190,165,182],
[171,166,160,162,150,0,161,184],
[177,179,170,164,175,179,0,185],
[165,161,159,157,158,156,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,195,198,183,186,187,180],
[177,0,179,194,172,175,167,176],
[145,161,0,172,166,176,176,179],
[142,146,168,0,166,173,168,168],
[157,168,174,174,0,178,176,178],
[154,165,164,167,162,0,167,171],
[153,173,164,172,164,173,0,165],
[160,164,161,172,162,169,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,183,153,175,168,158,176],
[174,0,193,167,191,162,154,177],
[157,147,0,140,162,170,160,165],
[187,173,200,0,176,169,177,182],
[165,149,178,164,0,159,143,165],
[172,178,170,171,181,0,167,177],
[182,186,180,163,197,173,0,195],
[164,163,175,158,175,163,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,197,173,189,195,167,183],
[171,0,164,179,154,188,162,163],
[143,176,0,176,179,179,160,157],
[167,161,164,0,178,165,159,162],
[151,186,161,162,0,181,148,137],
[145,152,161,175,159,0,144,152],
[173,178,180,181,192,196,0,169],
[157,177,183,178,203,188,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,162,166,168,166,169,160],
[184,0,174,182,188,166,183,166],
[178,166,0,181,182,182,175,170],
[174,158,159,0,161,164,168,171],
[172,152,158,179,0,168,170,162],
[174,174,158,176,172,0,171,177],
[171,157,165,172,170,169,0,166],
[180,174,170,169,178,163,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,209,162,181,162,191,179],
[133,0,187,149,146,135,158,146],
[131,153,0,157,159,160,167,162],
[178,191,183,0,180,180,180,170],
[159,194,181,160,0,184,161,183],
[178,205,180,160,156,0,170,168],
[149,182,173,160,179,170,0,181],
[161,194,178,170,157,172,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,177,176,170,180,174,176],
[180,0,168,193,171,187,165,175],
[163,172,0,184,172,190,163,166],
[164,147,156,0,146,180,161,161],
[170,169,168,194,0,192,154,164],
[160,153,150,160,148,0,167,160],
[166,175,177,179,186,173,0,177],
[164,165,174,179,176,180,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,134,127,139,137,139,136],
[194,0,162,167,148,191,178,188],
[206,178,0,171,195,177,181,159],
[213,173,169,0,178,189,184,188],
[201,192,145,162,0,173,164,186],
[203,149,163,151,167,0,156,172],
[201,162,159,156,176,184,0,183],
[204,152,181,152,154,168,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,190,160,178,188,189,188],
[176,0,184,156,172,187,188,185],
[150,156,0,177,165,184,177,189],
[180,184,163,0,173,183,203,187],
[162,168,175,167,0,175,166,186],
[152,153,156,157,165,0,171,170],
[151,152,163,137,174,169,0,177],
[152,155,151,153,154,170,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,148,209,139,209,171,168],
[186,0,142,203,173,226,161,158],
[192,198,0,223,168,200,194,169],
[131,137,117,0,149,135,141,161],
[201,167,172,191,0,203,190,186],
[131,114,140,205,137,0,127,145],
[169,179,146,199,150,213,0,184],
[172,182,171,179,154,195,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,138,140,160,192,159,170],
[212,0,153,183,176,182,142,162],
[202,187,0,196,202,171,198,154],
[200,157,144,0,193,160,153,166],
[180,164,138,147,0,149,123,134],
[148,158,169,180,191,0,168,181],
[181,198,142,187,217,172,0,159],
[170,178,186,174,206,159,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,151,127,178,145,146,150],
[194,0,159,138,194,175,164,163],
[189,181,0,162,190,172,152,188],
[213,202,178,0,195,170,193,207],
[162,146,150,145,0,147,140,154],
[195,165,168,170,193,0,159,179],
[194,176,188,147,200,181,0,194],
[190,177,152,133,186,161,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,176,176,167,174,165,166],
[157,0,167,155,159,173,149,158],
[164,173,0,166,175,172,163,167],
[164,185,174,0,145,147,161,156],
[173,181,165,195,0,177,171,165],
[166,167,168,193,163,0,163,160],
[175,191,177,179,169,177,0,183],
[174,182,173,184,175,180,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,158,178,186,191,160,174],
[165,0,141,187,166,170,162,180],
[182,199,0,170,152,190,182,172],
[162,153,170,0,147,165,150,175],
[154,174,188,193,0,182,166,183],
[149,170,150,175,158,0,167,170],
[180,178,158,190,174,173,0,189],
[166,160,168,165,157,170,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,160,154,162,159,167,169],
[179,0,171,169,169,151,167,169],
[180,169,0,154,157,161,165,166],
[186,171,186,0,175,164,181,182],
[178,171,183,165,0,164,163,167],
[181,189,179,176,176,0,166,166],
[173,173,175,159,177,174,0,176],
[171,171,174,158,173,174,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,188,193,180,219,160,185],
[148,0,178,150,169,183,162,196],
[152,162,0,171,153,197,167,166],
[147,190,169,0,196,195,142,192],
[160,171,187,144,0,221,149,194],
[121,157,143,145,119,0,168,159],
[180,178,173,198,191,172,0,164],
[155,144,174,148,146,181,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,173,183,175,184,162,190],
[160,0,156,165,169,160,161,180],
[167,184,0,183,168,170,183,188],
[157,175,157,0,157,159,149,167],
[165,171,172,183,0,173,167,180],
[156,180,170,181,167,0,172,177],
[178,179,157,191,173,168,0,170],
[150,160,152,173,160,163,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,164,170,178,174,187,174],
[173,0,163,164,169,167,176,167],
[176,177,0,170,185,201,192,182],
[170,176,170,0,191,191,189,189],
[162,171,155,149,0,184,166,171],
[166,173,139,149,156,0,180,161],
[153,164,148,151,174,160,0,162],
[166,173,158,151,169,179,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,160,152,187,150,184,162],
[167,0,150,169,189,188,167,154],
[180,190,0,163,189,164,170,196],
[188,171,177,0,205,173,165,182],
[153,151,151,135,0,145,152,152],
[190,152,176,167,195,0,160,167],
[156,173,170,175,188,180,0,162],
[178,186,144,158,188,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,328,283,212,177,135,246,109],
[12,0,251,189,189,44,123,55],
[57,89,0,146,157,32,89,89],
[128,151,194,0,34,160,151,151],
[163,151,183,306,0,138,163,151],
[205,296,308,180,202,0,111,205],
[94,217,251,189,177,229,0,149],
[231,285,251,189,189,135,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,188,161,194,150,193,203],
[148,0,144,134,147,157,164,176],
[152,196,0,180,154,178,193,188],
[179,206,160,0,157,165,197,205],
[146,193,186,183,0,157,178,194],
[190,183,162,175,183,0,188,196],
[147,176,147,143,162,152,0,204],
[137,164,152,135,146,144,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,169,155,159,155,175,195],
[162,0,151,163,166,160,169,182],
[171,189,0,178,162,163,171,194],
[185,177,162,0,179,162,168,199],
[181,174,178,161,0,160,180,197],
[185,180,177,178,180,0,165,193],
[165,171,169,172,160,175,0,176],
[145,158,146,141,143,147,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,160,163,169,170,170,174],
[163,0,168,162,167,152,171,163],
[180,172,0,160,170,165,156,170],
[177,178,180,0,155,153,164,175],
[171,173,170,185,0,155,183,180],
[170,188,175,187,185,0,180,174],
[170,169,184,176,157,160,0,179],
[166,177,170,165,160,166,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,176,155,174,180,193,182],
[155,0,146,162,155,180,157,139],
[164,194,0,180,176,170,163,190],
[185,178,160,0,172,184,178,158],
[166,185,164,168,0,188,172,185],
[160,160,170,156,152,0,161,160],
[147,183,177,162,168,179,0,161],
[158,201,150,182,155,180,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,154,172,159,175,138,165],
[171,0,173,170,164,166,151,163],
[186,167,0,172,173,168,165,163],
[168,170,168,0,163,160,164,160],
[181,176,167,177,0,173,177,173],
[165,174,172,180,167,0,161,172],
[202,189,175,176,163,179,0,167],
[175,177,177,180,167,168,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,181,177,161,190,183,188],
[166,0,178,171,179,186,164,178],
[159,162,0,168,167,175,152,169],
[163,169,172,0,168,176,178,165],
[179,161,173,172,0,191,183,193],
[150,154,165,164,149,0,167,169],
[157,176,188,162,157,173,0,158],
[152,162,171,175,147,171,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,168,158,172,170,171,162],
[170,0,183,190,180,175,164,174],
[172,157,0,163,166,172,157,170],
[182,150,177,0,176,177,167,152],
[168,160,174,164,0,181,165,168],
[170,165,168,163,159,0,167,157],
[169,176,183,173,175,173,0,166],
[178,166,170,188,172,183,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,175,144,115,145,115,147],
[219,0,222,172,177,148,206,180],
[165,118,0,150,95,97,135,148],
[196,168,190,0,162,164,140,147],
[225,163,245,178,0,187,185,195],
[195,192,243,176,153,0,189,185],
[225,134,205,200,155,151,0,170],
[193,160,192,193,145,155,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,169,173,174,159,182,158],
[155,0,164,171,170,164,166,155],
[171,176,0,170,171,161,176,142],
[167,169,170,0,172,175,170,171],
[166,170,169,168,0,162,154,154],
[181,176,179,165,178,0,173,154],
[158,174,164,170,186,167,0,161],
[182,185,198,169,186,186,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,158,170,161,154,165,184],
[156,0,144,161,178,155,153,158],
[182,196,0,177,176,160,180,185],
[170,179,163,0,167,170,175,175],
[179,162,164,173,0,142,158,172],
[186,185,180,170,198,0,190,154],
[175,187,160,165,182,150,0,194],
[156,182,155,165,168,186,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,163,175,181,176,168,167],
[173,0,165,174,170,170,174,171],
[177,175,0,190,196,181,186,168],
[165,166,150,0,166,160,166,154],
[159,170,144,174,0,157,164,161],
[164,170,159,180,183,0,173,162],
[172,166,154,174,176,167,0,159],
[173,169,172,186,179,178,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,177,183,175,175,182,159],
[145,0,167,152,163,160,186,158],
[163,173,0,145,158,150,171,175],
[157,188,195,0,174,206,189,168],
[165,177,182,166,0,189,169,168],
[165,180,190,134,151,0,183,160],
[158,154,169,151,171,157,0,128],
[181,182,165,172,172,180,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,192,160,195,163,191,166],
[170,0,200,150,168,179,215,164],
[148,140,0,151,156,101,175,134],
[180,190,189,0,137,145,178,169],
[145,172,184,203,0,177,201,177],
[177,161,239,195,163,0,217,163],
[149,125,165,162,139,123,0,131],
[174,176,206,171,163,177,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,139,150,159,184,140,152],
[179,0,169,158,185,182,190,185],
[201,171,0,198,198,184,186,161],
[190,182,142,0,198,183,210,154],
[181,155,142,142,0,174,184,178],
[156,158,156,157,166,0,176,121],
[200,150,154,130,156,164,0,142],
[188,155,179,186,162,219,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,186,230,170,183,174,232],
[140,0,176,156,137,182,173,172],
[154,164,0,184,155,105,154,201],
[110,184,156,0,144,108,122,212],
[170,203,185,196,0,130,130,175],
[157,158,235,232,210,0,183,194],
[166,167,186,218,210,157,0,207],
[108,168,139,128,165,146,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,161,180,168,168,164,173],
[188,0,177,186,191,164,184,187],
[179,163,0,190,176,160,169,173],
[160,154,150,0,153,147,162,167],
[172,149,164,187,0,169,166,173],
[172,176,180,193,171,0,169,194],
[176,156,171,178,174,171,0,173],
[167,153,167,173,167,146,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,178,192,187,180,155,189],
[165,0,175,185,179,187,164,191],
[162,165,0,191,179,170,155,198],
[148,155,149,0,176,142,150,166],
[153,161,161,164,0,160,176,178],
[160,153,170,198,180,0,182,179],
[185,176,185,190,164,158,0,204],
[151,149,142,174,162,161,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,176,167,171,165,165],
[171,0,170,198,191,183,173,178],
[174,170,0,194,192,168,193,171],
[164,142,146,0,172,161,174,160],
[173,149,148,168,0,160,163,157],
[169,157,172,179,180,0,167,160],
[175,167,147,166,177,173,0,158],
[175,162,169,180,183,180,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,185,166,152,131,164,202],
[179,0,190,172,159,179,169,191],
[155,150,0,136,144,140,161,191],
[174,168,204,0,188,154,192,191],
[188,181,196,152,0,148,154,179],
[209,161,200,186,192,0,178,192],
[176,171,179,148,186,162,0,202],
[138,149,149,149,161,148,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,173,176,149,177,154,156],
[178,0,172,179,164,168,176,165],
[167,168,0,180,139,167,155,168],
[164,161,160,0,155,166,152,167],
[191,176,201,185,0,184,181,165],
[163,172,173,174,156,0,172,161],
[186,164,185,188,159,168,0,179],
[184,175,172,173,175,179,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,173,157,164,162,162,170],
[159,0,170,172,160,157,160,169],
[167,170,0,163,166,168,155,162],
[183,168,177,0,168,170,169,180],
[176,180,174,172,0,163,152,165],
[178,183,172,170,177,0,175,174],
[178,180,185,171,188,165,0,177],
[170,171,178,160,175,166,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,190,165,168,168,138,218],
[143,0,167,171,176,137,162,196],
[150,173,0,140,184,116,143,166],
[175,169,200,0,213,207,188,189],
[172,164,156,127,0,150,158,168],
[172,203,224,133,190,0,151,221],
[202,178,197,152,182,189,0,198],
[122,144,174,151,172,119,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,166,172,145,159,163,150],
[161,0,178,174,169,155,171,169],
[174,162,0,175,152,165,179,192],
[168,166,165,0,175,173,194,170],
[195,171,188,165,0,182,193,178],
[181,185,175,167,158,0,168,163],
[177,169,161,146,147,172,0,165],
[190,171,148,170,162,177,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,173,169,164,161,168,211],
[157,0,137,165,162,165,176,184],
[167,203,0,181,186,170,188,208],
[171,175,159,0,167,162,185,176],
[176,178,154,173,0,180,184,168],
[179,175,170,178,160,0,182,215],
[172,164,152,155,156,158,0,191],
[129,156,132,164,172,125,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,153,178,170,160,150,175],
[165,0,175,214,171,181,174,189],
[187,165,0,138,197,166,164,188],
[162,126,202,0,185,174,168,192],
[170,169,143,155,0,172,138,197],
[180,159,174,166,168,0,155,194],
[190,166,176,172,202,185,0,206],
[165,151,152,148,143,146,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,182,161,181,175,171,164],
[161,0,176,154,173,166,160,170],
[158,164,0,169,174,164,160,164],
[179,186,171,0,186,182,167,171],
[159,167,166,154,0,156,166,158],
[165,174,176,158,184,0,156,156],
[169,180,180,173,174,184,0,176],
[176,170,176,169,182,184,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,221,153,211,154,192,202],
[162,0,182,170,169,145,126,154],
[119,158,0,171,212,178,151,175],
[187,170,169,0,174,136,179,183],
[129,171,128,166,0,152,149,161],
[186,195,162,204,188,0,190,217],
[148,214,189,161,191,150,0,138],
[138,186,165,157,179,123,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,171,178,168,172,171,165],
[148,0,176,162,173,158,159,159],
[169,164,0,157,161,171,151,152],
[162,178,183,0,180,174,179,172],
[172,167,179,160,0,168,150,173],
[168,182,169,166,172,0,158,167],
[169,181,189,161,190,182,0,182],
[175,181,188,168,167,173,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,167,162,160,165,152,157],
[181,0,182,178,191,173,163,172],
[173,158,0,169,174,169,161,165],
[178,162,171,0,164,171,167,183],
[180,149,166,176,0,163,160,155],
[175,167,171,169,177,0,169,174],
[188,177,179,173,180,171,0,169],
[183,168,175,157,185,166,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,162,180,173,176,171,184],
[156,0,158,162,147,163,139,180],
[178,182,0,208,189,162,179,171],
[160,178,132,0,170,174,156,179],
[167,193,151,170,0,166,161,168],
[164,177,178,166,174,0,151,173],
[169,201,161,184,179,189,0,181],
[156,160,169,161,172,167,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,134,160,178,166,159,170],
[153,0,150,126,163,133,160,161],
[206,190,0,180,184,165,188,192],
[180,214,160,0,183,155,173,191],
[162,177,156,157,0,155,150,175],
[174,207,175,185,185,0,149,193],
[181,180,152,167,190,191,0,169],
[170,179,148,149,165,147,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,145,155,157,157,143,145],
[191,0,176,174,173,167,169,169],
[195,164,0,183,177,167,182,178],
[185,166,157,0,167,160,172,156],
[183,167,163,173,0,170,165,159],
[183,173,173,180,170,0,165,178],
[197,171,158,168,175,175,0,171],
[195,171,162,184,181,162,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,113,96,79,159,154,171],
[255,0,196,105,164,255,122,255],
[227,144,0,190,132,259,191,302],
[244,235,150,0,213,276,154,261],
[261,176,208,127,0,243,81,202],
[181,85,81,64,97,0,59,139],
[186,218,149,186,259,281,0,208],
[169,85,38,79,138,201,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,158,180,170,151,186,168],
[177,0,154,182,170,179,165,179],
[182,186,0,203,183,205,156,171],
[160,158,137,0,151,162,147,150],
[170,170,157,189,0,170,177,169],
[189,161,135,178,170,0,161,155],
[154,175,184,193,163,179,0,174],
[172,161,169,190,171,185,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,140,146,158,160,148,145],
[191,0,166,195,190,189,197,176],
[200,174,0,176,179,178,192,161],
[194,145,164,0,165,166,170,142],
[182,150,161,175,0,176,174,155],
[180,151,162,174,164,0,172,161],
[192,143,148,170,166,168,0,148],
[195,164,179,198,185,179,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,149,167,142,199,145,181],
[145,0,168,124,108,152,157,161],
[191,172,0,172,161,183,183,167],
[173,216,168,0,175,196,193,177],
[198,232,179,165,0,214,201,182],
[141,188,157,144,126,0,158,152],
[195,183,157,147,139,182,0,170],
[159,179,173,163,158,188,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,172,186,173,169,163,176],
[168,0,175,180,161,175,176,174],
[168,165,0,186,172,183,170,180],
[154,160,154,0,162,161,146,164],
[167,179,168,178,0,172,168,170],
[171,165,157,179,168,0,152,160],
[177,164,170,194,172,188,0,171],
[164,166,160,176,170,180,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,183,159,159,173,163,172],
[173,0,184,189,194,169,166,175],
[157,156,0,158,163,151,153,161],
[181,151,182,0,163,172,180,160],
[181,146,177,177,0,161,169,174],
[167,171,189,168,179,0,176,177],
[177,174,187,160,171,164,0,163],
[168,165,179,180,166,163,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,174,172,187,166,173,184],
[163,0,167,164,179,167,172,163],
[166,173,0,169,177,163,169,179],
[168,176,171,0,175,175,175,172],
[153,161,163,165,0,169,163,170],
[174,173,177,165,171,0,171,177],
[167,168,171,165,177,169,0,176],
[156,177,161,168,170,163,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,160,167,172,179,201,190],
[175,0,172,170,178,182,192,166],
[180,168,0,182,173,175,194,184],
[173,170,158,0,172,174,204,169],
[168,162,167,168,0,176,185,158],
[161,158,165,166,164,0,174,172],
[139,148,146,136,155,166,0,167],
[150,174,156,171,182,168,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,164,169,180,174,174,197],
[176,0,177,171,175,192,162,201],
[176,163,0,170,181,176,171,173],
[171,169,170,0,185,171,182,180],
[160,165,159,155,0,166,161,169],
[166,148,164,169,174,0,162,167],
[166,178,169,158,179,178,0,181],
[143,139,167,160,171,173,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,179,160,166,172,191,152],
[164,0,175,170,179,177,174,175],
[161,165,0,150,174,172,174,156],
[180,170,190,0,186,187,188,166],
[174,161,166,154,0,172,168,152],
[168,163,168,153,168,0,170,155],
[149,166,166,152,172,170,0,149],
[188,165,184,174,188,185,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,174,158,174,178,170,186],
[178,0,169,165,174,186,145,173],
[166,171,0,166,167,177,171,163],
[182,175,174,0,174,190,161,172],
[166,166,173,166,0,169,152,168],
[162,154,163,150,171,0,153,161],
[170,195,169,179,188,187,0,185],
[154,167,177,168,172,179,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,146,112,128,106,147,155],
[143,0,162,145,139,108,155,172],
[194,178,0,151,139,149,145,163],
[228,195,189,0,152,172,161,186],
[212,201,201,188,0,183,167,202],
[234,232,191,168,157,0,187,216],
[193,185,195,179,173,153,0,194],
[185,168,177,154,138,124,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,188,131,223,149,156,163],
[160,0,193,140,144,193,173,171],
[152,147,0,154,174,167,169,154],
[209,200,186,0,199,180,136,163],
[117,196,166,141,0,160,124,142],
[191,147,173,160,180,0,142,148],
[184,167,171,204,216,198,0,216],
[177,169,186,177,198,192,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,179,176,170,155,184,161],
[191,0,188,186,200,159,177,173],
[161,152,0,157,164,145,176,166],
[164,154,183,0,159,179,164,169],
[170,140,176,181,0,155,162,171],
[185,181,195,161,185,0,190,178],
[156,163,164,176,178,150,0,177],
[179,167,174,171,169,162,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,181,169,196,188,174,173],
[167,0,181,175,172,174,168,171],
[159,159,0,154,170,184,176,173],
[171,165,186,0,180,192,185,185],
[144,168,170,160,0,188,182,177],
[152,166,156,148,152,0,153,161],
[166,172,164,155,158,187,0,166],
[167,169,167,155,163,179,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,163,166,163,158,177,168],
[169,0,168,171,165,151,161,166],
[177,172,0,179,177,159,188,171],
[174,169,161,0,163,158,176,165],
[177,175,163,177,0,161,174,173],
[182,189,181,182,179,0,185,165],
[163,179,152,164,166,155,0,158],
[172,174,169,175,167,175,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,178,200,170,185,171,180],
[158,0,166,174,161,168,162,162],
[162,174,0,168,157,155,153,192],
[140,166,172,0,143,141,155,182],
[170,179,183,197,0,163,176,187],
[155,172,185,199,177,0,187,184],
[169,178,187,185,164,153,0,179],
[160,178,148,158,153,156,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,209,191,167,178,161,175],
[149,0,181,170,167,176,165,177],
[131,159,0,174,173,173,168,187],
[149,170,166,0,160,157,182,163],
[173,173,167,180,0,177,168,162],
[162,164,167,183,163,0,172,178],
[179,175,172,158,172,168,0,169],
[165,163,153,177,178,162,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,154,174,158,164,165,180],
[145,0,158,173,176,161,153,156],
[186,182,0,179,161,158,188,171],
[166,167,161,0,169,158,176,157],
[182,164,179,171,0,176,169,162],
[176,179,182,182,164,0,183,180],
[175,187,152,164,171,157,0,164],
[160,184,169,183,178,160,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,160,169,182,189,169,156],
[166,0,165,196,174,175,175,192],
[180,175,0,157,181,162,177,162],
[171,144,183,0,169,173,170,150],
[158,166,159,171,0,181,193,191],
[151,165,178,167,159,0,178,153],
[171,165,163,170,147,162,0,166],
[184,148,178,190,149,187,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,172,199,171,192,186,182],
[170,0,169,193,195,188,174,165],
[168,171,0,169,173,165,177,161],
[141,147,171,0,147,168,160,169],
[169,145,167,193,0,182,181,167],
[148,152,175,172,158,0,172,167],
[154,166,163,180,159,168,0,179],
[158,175,179,171,173,173,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,201,169,166,179,173,206],
[176,0,190,173,163,159,189,206],
[139,150,0,147,145,150,168,170],
[171,167,193,0,131,155,172,166],
[174,177,195,209,0,179,166,212],
[161,181,190,185,161,0,191,191],
[167,151,172,168,174,149,0,161],
[134,134,170,174,128,149,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,129,150,108,115,158,162],
[200,0,196,185,166,184,215,177],
[211,144,0,185,125,130,176,178],
[190,155,155,0,178,140,207,179],
[232,174,215,162,0,169,219,231],
[225,156,210,200,171,0,189,168],
[182,125,164,133,121,151,0,171],
[178,163,162,161,109,172,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,159,168,168,164,159,165],
[183,0,167,172,176,169,163,169],
[181,173,0,176,187,180,165,188],
[172,168,164,0,149,174,154,180],
[172,164,153,191,0,169,159,156],
[176,171,160,166,171,0,178,183],
[181,177,175,186,181,162,0,200],
[175,171,152,160,184,157,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,159,148,172,158,193,180],
[168,0,162,165,172,160,190,165],
[181,178,0,158,172,172,187,171],
[192,175,182,0,182,165,193,174],
[168,168,168,158,0,163,197,175],
[182,180,168,175,177,0,190,184],
[147,150,153,147,143,150,0,152],
[160,175,169,166,165,156,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,149,159,158,139,145,158],
[181,0,171,149,180,147,181,182],
[191,169,0,158,155,160,178,150],
[181,191,182,0,186,177,158,176],
[182,160,185,154,0,160,167,175],
[201,193,180,163,180,0,174,189],
[195,159,162,182,173,166,0,171],
[182,158,190,164,165,151,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,145,154,167,152,172,174],
[148,0,138,153,161,157,159,171],
[195,202,0,172,162,189,198,194],
[186,187,168,0,162,171,161,180],
[173,179,178,178,0,165,175,180],
[188,183,151,169,175,0,170,193],
[168,181,142,179,165,170,0,166],
[166,169,146,160,160,147,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,179,166,183,175,186,173],
[163,0,170,156,168,163,187,182],
[161,170,0,159,172,168,180,179],
[174,184,181,0,163,175,182,187],
[157,172,168,177,0,167,171,184],
[165,177,172,165,173,0,169,186],
[154,153,160,158,169,171,0,188],
[167,158,161,153,156,154,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,163,166,161,169,158,155],
[163,0,173,160,169,165,167,164],
[177,167,0,172,178,165,167,173],
[174,180,168,0,174,171,163,177],
[179,171,162,166,0,167,169,167],
[171,175,175,169,173,0,166,158],
[182,173,173,177,171,174,0,169],
[185,176,167,163,173,182,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,172,150,180,155,149,148],
[160,0,175,168,160,162,176,186],
[168,165,0,172,172,157,171,167],
[190,172,168,0,208,159,181,180],
[160,180,168,132,0,166,152,172],
[185,178,183,181,174,0,164,173],
[191,164,169,159,188,176,0,158],
[192,154,173,160,168,167,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,153,172,169,149,170,165],
[163,0,180,172,192,165,177,161],
[187,160,0,173,190,176,179,164],
[168,168,167,0,197,165,185,181],
[171,148,150,143,0,157,162,146],
[191,175,164,175,183,0,173,166],
[170,163,161,155,178,167,0,149],
[175,179,176,159,194,174,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,160,163,174,167,186,168],
[166,0,168,179,175,170,173,172],
[180,172,0,174,179,167,183,183],
[177,161,166,0,160,162,181,176],
[166,165,161,180,0,177,175,186],
[173,170,173,178,163,0,198,180],
[154,167,157,159,165,142,0,168],
[172,168,157,164,154,160,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,161,167,174,169,170,170],
[174,0,165,160,164,173,173,190],
[179,175,0,166,167,173,175,186],
[173,180,174,0,167,175,171,169],
[166,176,173,173,0,167,182,175],
[171,167,167,165,173,0,177,179],
[170,167,165,169,158,163,0,164],
[170,150,154,171,165,161,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,174,159,181,180,184,175],
[170,0,161,140,161,157,157,162],
[166,179,0,175,189,158,160,170],
[181,200,165,0,190,166,182,176],
[159,179,151,150,0,168,155,156],
[160,183,182,174,172,0,161,165],
[156,183,180,158,185,179,0,155],
[165,178,170,164,184,175,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,174,181,168,175,167,159],
[167,0,158,181,168,185,170,168],
[166,182,0,189,179,184,179,178],
[159,159,151,0,162,180,156,162],
[172,172,161,178,0,192,174,166],
[165,155,156,160,148,0,154,148],
[173,170,161,184,166,186,0,169],
[181,172,162,178,174,192,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,170,157,158,161,156,150],
[186,0,164,169,184,174,178,151],
[170,176,0,172,184,177,156,157],
[183,171,168,0,158,164,154,170],
[182,156,156,182,0,190,159,157],
[179,166,163,176,150,0,181,166],
[184,162,184,186,181,159,0,156],
[190,189,183,170,183,174,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,161,151,189,177,171,181],
[186,0,184,144,187,192,181,184],
[179,156,0,166,189,171,171,186],
[189,196,174,0,209,166,186,185],
[151,153,151,131,0,149,155,160],
[163,148,169,174,191,0,161,169],
[169,159,169,154,185,179,0,191],
[159,156,154,155,180,171,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,173,172,191,174,154,175],
[156,0,177,170,178,165,174,171],
[167,163,0,158,173,152,161,170],
[168,170,182,0,183,165,169,178],
[149,162,167,157,0,144,149,163],
[166,175,188,175,196,0,161,184],
[186,166,179,171,191,179,0,180],
[165,169,170,162,177,156,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,161,154,147,165,167,169],
[182,0,171,159,169,178,161,176],
[179,169,0,174,173,182,174,185],
[186,181,166,0,165,169,168,175],
[193,171,167,175,0,173,176,190],
[175,162,158,171,167,0,157,174],
[173,179,166,172,164,183,0,162],
[171,164,155,165,150,166,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,184,178,180,181,163,178],
[163,0,188,189,168,163,164,170],
[156,152,0,179,192,146,155,169],
[162,151,161,0,171,166,160,164],
[160,172,148,169,0,160,167,155],
[159,177,194,174,180,0,165,174],
[177,176,185,180,173,175,0,146],
[162,170,171,176,185,166,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,154,165,162,170,165,160],
[174,0,170,170,164,158,153,173],
[186,170,0,194,178,162,159,194],
[175,170,146,0,140,167,167,151],
[178,176,162,200,0,183,168,185],
[170,182,178,173,157,0,192,180],
[175,187,181,173,172,148,0,174],
[180,167,146,189,155,160,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,173,167,167,135,143,140],
[164,0,175,155,162,150,168,160],
[167,165,0,166,162,151,142,151],
[173,185,174,0,162,157,157,150],
[173,178,178,178,0,180,153,162],
[205,190,189,183,160,0,175,177],
[197,172,198,183,187,165,0,171],
[200,180,189,190,178,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,174,196,181,142,190,172],
[134,0,151,146,172,116,166,157],
[166,189,0,169,183,170,171,165],
[144,194,171,0,176,130,165,177],
[159,168,157,164,0,138,169,152],
[198,224,170,210,202,0,195,181],
[150,174,169,175,171,145,0,165],
[168,183,175,163,188,159,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,176,182,192,158,177,177],
[151,0,156,149,188,167,176,170],
[164,184,0,173,177,165,185,166],
[158,191,167,0,172,180,183,166],
[148,152,163,168,0,171,178,156],
[182,173,175,160,169,0,166,158],
[163,164,155,157,162,174,0,174],
[163,170,174,174,184,182,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,203,137,137,204,137,169],
[236,0,236,169,171,236,204,201],
[137,104,0,171,139,137,171,201],
[203,171,169,0,170,169,204,201],
[203,169,201,170,0,236,137,236],
[136,104,203,171,104,0,171,236],
[203,136,169,136,203,169,0,203],
[171,139,139,139,104,104,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,176,173,177,171,166,195],
[174,0,165,183,177,163,162,178],
[164,175,0,190,191,178,170,186],
[167,157,150,0,185,165,163,186],
[163,163,149,155,0,158,145,170],
[169,177,162,175,182,0,160,190],
[174,178,170,177,195,180,0,212],
[145,162,154,154,170,150,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,165,169,177,180,175,170],
[169,0,167,174,174,179,177,175],
[175,173,0,172,167,173,179,179],
[171,166,168,0,168,169,161,168],
[163,166,173,172,0,165,163,171],
[160,161,167,171,175,0,173,183],
[165,163,161,179,177,167,0,181],
[170,165,161,172,169,157,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,151,191,174,166,164,177],
[168,0,155,183,164,154,160,166],
[189,185,0,193,182,172,168,173],
[149,157,147,0,160,157,146,157],
[166,176,158,180,0,158,151,164],
[174,186,168,183,182,0,173,192],
[176,180,172,194,189,167,0,184],
[163,174,167,183,176,148,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,196,172,173,191,189,193],
[170,0,187,192,175,191,187,174],
[144,153,0,168,169,174,161,160],
[168,148,172,0,162,178,171,169],
[167,165,171,178,0,185,182,173],
[149,149,166,162,155,0,160,155],
[151,153,179,169,158,180,0,168],
[147,166,180,171,167,185,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,166,179,178,180,203,170],
[198,0,181,165,195,190,173,174],
[174,159,0,179,180,177,160,151],
[161,175,161,0,195,151,167,162],
[162,145,160,145,0,150,172,162],
[160,150,163,189,190,0,176,166],
[137,167,180,173,168,164,0,147],
[170,166,189,178,178,174,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,84,169,169,85,169,169],
[171,0,171,255,171,86,0,86],
[256,169,0,169,256,171,169,255],
[171,85,171,0,256,86,85,86],
[171,169,84,84,0,0,84,170],
[255,254,169,254,340,0,169,255],
[171,340,171,255,256,171,0,170],
[171,254,85,254,170,85,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,175,205,202,192,194,154],
[191,0,167,187,186,177,179,175],
[165,173,0,204,186,166,161,173],
[135,153,136,0,173,160,151,167],
[138,154,154,167,0,169,144,149],
[148,163,174,180,171,0,167,182],
[146,161,179,189,196,173,0,159],
[186,165,167,173,191,158,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,166,175,167,167,183,167],
[176,0,159,173,182,177,194,170],
[174,181,0,181,162,180,198,181],
[165,167,159,0,160,161,173,157],
[173,158,178,180,0,174,190,171],
[173,163,160,179,166,0,178,175],
[157,146,142,167,150,162,0,167],
[173,170,159,183,169,165,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,176,179,196,169,171,170],
[148,0,178,162,162,165,162,182],
[164,162,0,186,182,164,177,183],
[161,178,154,0,179,169,160,150],
[144,178,158,161,0,167,164,165],
[171,175,176,171,173,0,164,153],
[169,178,163,180,176,176,0,179],
[170,158,157,190,175,187,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,172,167,173,187,180,160],
[168,0,189,179,171,188,184,168],
[168,151,0,153,157,190,164,165],
[173,161,187,0,182,196,166,168],
[167,169,183,158,0,190,174,172],
[153,152,150,144,150,0,154,144],
[160,156,176,174,166,186,0,166],
[180,172,175,172,168,196,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,176,187,172,166,183,176],
[162,0,173,180,163,158,167,166],
[164,167,0,175,168,178,175,169],
[153,160,165,0,169,168,178,169],
[168,177,172,171,0,164,176,183],
[174,182,162,172,176,0,187,182],
[157,173,165,162,164,153,0,176],
[164,174,171,171,157,158,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,179,167,176,174,171,173],
[149,0,154,154,165,161,154,155],
[161,186,0,173,184,177,178,176],
[173,186,167,0,182,172,183,163],
[164,175,156,158,0,159,168,160],
[166,179,163,168,181,0,172,154],
[169,186,162,157,172,168,0,173],
[167,185,164,177,180,186,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,181,165,181,174,147,152],
[190,0,183,171,186,179,168,177],
[159,157,0,157,169,166,145,157],
[175,169,183,0,180,181,155,172],
[159,154,171,160,0,152,152,171],
[166,161,174,159,188,0,173,172],
[193,172,195,185,188,167,0,171],
[188,163,183,168,169,168,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,137,126,128,109,135,136],
[245,0,181,197,192,155,187,156],
[203,159,0,158,115,165,206,165],
[214,143,182,0,176,155,215,191],
[212,148,225,164,0,184,177,174],
[231,185,175,185,156,0,193,165],
[205,153,134,125,163,147,0,143],
[204,184,175,149,166,175,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,192,192,193,143,192,193],
[99,0,0,97,48,144,146,99],
[148,340,0,245,193,243,243,148],
[148,243,95,0,96,145,243,194],
[147,292,147,244,0,194,196,245],
[197,196,97,195,146,0,146,148],
[148,194,97,97,144,194,0,147],
[147,241,192,146,95,192,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,176,168,171,175,167,169],
[173,0,186,180,163,172,177,178],
[164,154,0,166,172,173,172,175],
[172,160,174,0,163,188,171,178],
[169,177,168,177,0,173,167,179],
[165,168,167,152,167,0,170,169],
[173,163,168,169,173,170,0,158],
[171,162,165,162,161,171,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,141,134,127,144,189,120],
[220,0,170,150,173,169,217,209],
[199,170,0,160,143,185,199,208],
[206,190,180,0,162,197,214,190],
[213,167,197,178,0,156,217,184],
[196,171,155,143,184,0,192,208],
[151,123,141,126,123,148,0,123],
[220,131,132,150,156,132,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,203,192,213,166,140,195],
[197,0,219,176,189,178,152,192],
[137,121,0,177,147,112,140,129],
[148,164,163,0,170,151,166,177],
[127,151,193,170,0,148,141,192],
[174,162,228,189,192,0,179,232],
[200,188,200,174,199,161,0,177],
[145,148,211,163,148,108,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,189,166,179,177,184,187],
[168,0,197,184,205,165,193,189],
[151,143,0,169,173,172,166,175],
[174,156,171,0,190,183,176,170],
[161,135,167,150,0,135,172,146],
[163,175,168,157,205,0,179,183],
[156,147,174,164,168,161,0,175],
[153,151,165,170,194,157,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,194,198,169,156,173,197],
[161,0,162,158,160,159,154,141],
[146,178,0,175,175,154,184,166],
[142,182,165,0,173,164,162,152],
[171,180,165,167,0,151,161,144],
[184,181,186,176,189,0,165,171],
[167,186,156,178,179,175,0,173],
[143,199,174,188,196,169,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,158,161,152,160,174,154],
[194,0,183,196,172,182,189,160],
[182,157,0,174,159,176,183,157],
[179,144,166,0,162,149,174,151],
[188,168,181,178,0,177,199,179],
[180,158,164,191,163,0,182,175],
[166,151,157,166,141,158,0,144],
[186,180,183,189,161,165,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,179,187,177,161,153,145],
[163,0,169,156,178,156,166,170],
[161,171,0,171,168,167,155,131],
[153,184,169,0,165,157,156,155],
[163,162,172,175,0,167,175,149],
[179,184,173,183,173,0,162,172],
[187,174,185,184,165,178,0,188],
[195,170,209,185,191,168,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,203,183,168,199,178,200],
[157,0,172,159,164,168,168,165],
[137,168,0,161,145,160,177,164],
[157,181,179,0,177,180,164,185],
[172,176,195,163,0,165,179,189],
[141,172,180,160,175,0,170,167],
[162,172,163,176,161,170,0,179],
[140,175,176,155,151,173,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,148,85,127,149,146,127],
[215,0,169,128,150,171,127,151],
[192,171,0,149,171,169,169,171],
[255,212,191,0,169,212,231,233],
[213,190,169,171,0,167,148,108],
[191,169,171,128,173,0,170,193],
[194,213,171,109,192,170,0,172],
[213,189,169,107,232,147,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,170,180,169,175,154,158],
[150,0,150,153,176,156,137,147],
[170,190,0,181,179,166,168,172],
[160,187,159,0,177,168,145,164],
[171,164,161,163,0,159,164,150],
[165,184,174,172,181,0,165,161],
[186,203,172,195,176,175,0,169],
[182,193,168,176,190,179,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,179,155,156,162,165,177],
[162,0,166,170,157,179,172,161],
[161,174,0,159,155,180,161,176],
[185,170,181,0,170,191,171,189],
[184,183,185,170,0,183,180,181],
[178,161,160,149,157,0,167,170],
[175,168,179,169,160,173,0,174],
[163,179,164,151,159,170,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,188,163,169,171,193,171],
[146,0,174,166,173,153,180,166],
[152,166,0,158,163,156,165,161],
[177,174,182,0,174,162,193,160],
[171,167,177,166,0,162,177,162],
[169,187,184,178,178,0,185,171],
[147,160,175,147,163,155,0,155],
[169,174,179,180,178,169,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,198,175,187,162,180,175],
[164,0,181,175,176,170,172,182],
[142,159,0,157,156,143,147,151],
[165,165,183,0,143,166,160,159],
[153,164,184,197,0,171,158,161],
[178,170,197,174,169,0,176,170],
[160,168,193,180,182,164,0,184],
[165,158,189,181,179,170,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,153,136,138,156,129,153],
[181,0,144,142,125,138,141,153],
[187,196,0,160,183,170,169,188],
[204,198,180,0,162,173,157,195],
[202,215,157,178,0,163,176,187],
[184,202,170,167,177,0,162,182],
[211,199,171,183,164,178,0,190],
[187,187,152,145,153,158,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,170,177,178,187,171,173],
[170,0,156,171,162,170,167,173],
[170,184,0,176,169,175,186,173],
[163,169,164,0,164,192,169,167],
[162,178,171,176,0,183,180,172],
[153,170,165,148,157,0,173,158],
[169,173,154,171,160,167,0,164],
[167,167,167,173,168,182,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,190,185,190,192,170,192],
[172,0,178,157,173,171,169,195],
[150,162,0,175,172,182,161,186],
[155,183,165,0,177,183,170,188],
[150,167,168,163,0,156,151,160],
[148,169,158,157,184,0,155,150],
[170,171,179,170,189,185,0,188],
[148,145,154,152,180,190,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,153,150,138,158,185,137],
[158,0,183,177,136,178,168,145],
[187,157,0,131,156,146,198,173],
[190,163,209,0,163,183,186,182],
[202,204,184,177,0,174,147,164],
[182,162,194,157,166,0,175,165],
[155,172,142,154,193,165,0,144],
[203,195,167,158,176,175,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,188,180,181,187,156,149],
[164,0,177,145,176,158,147,167],
[152,163,0,149,155,163,167,153],
[160,195,191,0,181,190,171,160],
[159,164,185,159,0,178,154,157],
[153,182,177,150,162,0,164,166],
[184,193,173,169,186,176,0,172],
[191,173,187,180,183,174,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,177,185,184,171,170,169],
[161,0,164,170,170,160,160,172],
[163,176,0,192,173,165,172,158],
[155,170,148,0,170,154,167,166],
[156,170,167,170,0,167,166,170],
[169,180,175,186,173,0,163,166],
[170,180,168,173,174,177,0,163],
[171,168,182,174,170,174,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,178,164,173,172,197,180],
[169,0,164,154,169,159,189,172],
[162,176,0,172,172,174,180,185],
[176,186,168,0,178,173,186,184],
[167,171,168,162,0,173,171,168],
[168,181,166,167,167,0,181,176],
[143,151,160,154,169,159,0,165],
[160,168,155,156,172,164,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,181,179,164,178,195,164],
[149,0,167,178,163,145,181,143],
[159,173,0,169,163,155,173,160],
[161,162,171,0,164,162,157,174],
[176,177,177,176,0,152,154,168],
[162,195,185,178,188,0,186,162],
[145,159,167,183,186,154,0,154],
[176,197,180,166,172,178,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,175,195,172,230,237,226],
[180,0,172,158,183,161,204,191],
[165,168,0,159,195,158,181,178],
[145,182,181,0,171,148,192,168],
[168,157,145,169,0,161,217,189],
[110,179,182,192,179,0,190,188],
[103,136,159,148,123,150,0,170],
[114,149,162,172,151,152,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,170,154,193,172,178,141],
[164,0,169,166,191,169,208,162],
[170,171,0,163,219,181,178,172],
[186,174,177,0,195,181,209,170],
[147,149,121,145,0,126,177,145],
[168,171,159,159,214,0,191,168],
[162,132,162,131,163,149,0,144],
[199,178,168,170,195,172,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,207,179,209,180,174,151],
[178,0,202,170,203,168,151,148],
[133,138,0,152,181,160,135,120],
[161,170,188,0,216,188,155,162],
[131,137,159,124,0,142,144,120],
[160,172,180,152,198,0,150,170],
[166,189,205,185,196,190,0,177],
[189,192,220,178,220,170,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,177,158,163,165,175,173],
[170,0,190,188,173,182,196,180],
[163,150,0,167,176,150,177,170],
[182,152,173,0,169,165,175,177],
[177,167,164,171,0,169,186,180],
[175,158,190,175,171,0,178,176],
[165,144,163,165,154,162,0,173],
[167,160,170,163,160,164,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,178,184,185,190,163,186],
[138,0,192,152,179,172,160,152],
[162,148,0,153,146,139,158,156],
[156,188,187,0,152,157,193,190],
[155,161,194,188,0,158,171,179],
[150,168,201,183,182,0,197,188],
[177,180,182,147,169,143,0,173],
[154,188,184,150,161,152,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,175,163,177,172,166,173],
[161,0,173,171,173,158,178,171],
[165,167,0,172,175,154,169,176],
[177,169,168,0,173,164,167,176],
[163,167,165,167,0,157,153,169],
[168,182,186,176,183,0,187,186],
[174,162,171,173,187,153,0,185],
[167,169,164,164,171,154,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,184,158,166,187,154,152],
[165,0,150,150,165,163,139,182],
[156,190,0,167,194,185,178,176],
[182,190,173,0,152,194,194,150],
[174,175,146,188,0,171,155,170],
[153,177,155,146,169,0,169,158],
[186,201,162,146,185,171,0,188],
[188,158,164,190,170,182,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,172,175,161,187,185,157],
[149,0,158,161,149,164,167,152],
[168,182,0,162,165,164,163,162],
[165,179,178,0,164,181,166,173],
[179,191,175,176,0,181,191,170],
[153,176,176,159,159,0,163,150],
[155,173,177,174,149,177,0,166],
[183,188,178,167,170,190,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,182,198,182,179,175,160],
[179,0,175,196,194,140,158,161],
[158,165,0,176,183,147,159,156],
[142,144,164,0,155,148,138,167],
[158,146,157,185,0,141,155,136],
[161,200,193,192,199,0,164,162],
[165,182,181,202,185,176,0,180],
[180,179,184,173,204,178,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,168,163,170,168,160,176],
[156,0,172,154,146,168,159,176],
[172,168,0,167,165,158,158,181],
[177,186,173,0,163,176,173,187],
[170,194,175,177,0,178,183,188],
[172,172,182,164,162,0,165,169],
[180,181,182,167,157,175,0,196],
[164,164,159,153,152,171,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,176,141,163,173,136,134],
[191,0,193,172,192,187,176,166],
[164,147,0,165,166,164,170,147],
[199,168,175,0,178,170,154,179],
[177,148,174,162,0,162,150,149],
[167,153,176,170,178,0,167,146],
[204,164,170,186,190,173,0,159],
[206,174,193,161,191,194,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,189,168,160,172,167,162],
[170,0,175,173,199,193,189,167],
[151,165,0,147,165,181,166,173],
[172,167,193,0,179,192,166,172],
[180,141,175,161,0,148,152,164],
[168,147,159,148,192,0,159,143],
[173,151,174,174,188,181,0,166],
[178,173,167,168,176,197,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,170,167,175,168,179,196],
[157,0,164,172,183,174,176,183],
[170,176,0,161,162,166,171,173],
[173,168,179,0,202,201,190,187],
[165,157,178,138,0,160,175,176],
[172,166,174,139,180,0,171,180],
[161,164,169,150,165,169,0,169],
[144,157,167,153,164,160,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,137,159,159,154,188,162],
[174,0,166,188,191,172,197,158],
[203,174,0,163,168,140,193,182],
[181,152,177,0,187,158,183,184],
[181,149,172,153,0,145,167,189],
[186,168,200,182,195,0,190,196],
[152,143,147,157,173,150,0,169],
[178,182,158,156,151,144,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,159,172,173,156,168,169],
[172,0,158,163,168,149,155,135],
[181,182,0,177,195,169,179,170],
[168,177,163,0,189,164,177,150],
[167,172,145,151,0,154,155,166],
[184,191,171,176,186,0,183,163],
[172,185,161,163,185,157,0,164],
[171,205,170,190,174,177,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,207,170,190,156,191,184],
[151,0,207,171,234,138,172,193],
[133,133,0,191,170,174,172,171],
[170,169,149,0,176,159,168,180],
[150,106,170,164,0,126,170,165],
[184,202,166,181,214,0,195,196],
[149,168,168,172,170,145,0,124],
[156,147,169,160,175,144,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,167,184,164,164,160,188],
[191,0,182,196,175,170,185,178],
[173,158,0,168,159,177,157,179],
[156,144,172,0,159,152,158,173],
[176,165,181,181,0,177,166,180],
[176,170,163,188,163,0,169,180],
[180,155,183,182,174,171,0,179],
[152,162,161,167,160,160,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,167,182,198,192,160,152],
[155,0,161,165,180,181,156,158],
[173,179,0,175,189,185,161,154],
[158,175,165,0,173,183,149,161],
[142,160,151,167,0,178,145,160],
[148,159,155,157,162,0,161,139],
[180,184,179,191,195,179,0,170],
[188,182,186,179,180,201,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,173,179,192,176,185,179],
[175,0,161,170,165,170,187,183],
[167,179,0,164,187,170,178,189],
[161,170,176,0,173,170,202,189],
[148,175,153,167,0,164,182,182],
[164,170,170,170,176,0,186,194],
[155,153,162,138,158,154,0,179],
[161,157,151,151,158,146,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,197,184,185,166,171,170],
[157,0,173,177,172,165,167,170],
[143,167,0,154,166,153,138,161],
[156,163,186,0,188,166,160,178],
[155,168,174,152,0,141,154,160],
[174,175,187,174,199,0,162,183],
[169,173,202,180,186,178,0,194],
[170,170,179,162,180,157,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,132,146,145,161,172,182],
[172,0,132,160,151,155,166,189],
[208,208,0,169,156,186,193,227],
[194,180,171,0,118,173,174,205],
[195,189,184,222,0,158,198,194],
[179,185,154,167,182,0,202,202],
[168,174,147,166,142,138,0,166],
[158,151,113,135,146,138,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,168,177,199,190,186,204],
[142,0,157,166,171,187,168,189],
[172,183,0,178,172,199,163,195],
[163,174,162,0,170,190,176,183],
[141,169,168,170,0,192,174,178],
[150,153,141,150,148,0,132,170],
[154,172,177,164,166,208,0,175],
[136,151,145,157,162,170,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,255,171,171,256,170,170],
[340,0,255,171,340,340,170,170],
[85,85,0,171,256,256,170,170],
[169,169,169,0,254,254,254,170],
[169,0,84,86,0,171,170,85],
[84,0,84,86,169,0,85,0],
[170,170,170,86,170,255,0,0],
[170,170,170,170,255,340,340,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,180,190,192,171,198,170],
[161,0,159,157,156,158,176,158],
[160,181,0,167,166,158,168,162],
[150,183,173,0,171,166,165,160],
[148,184,174,169,0,182,188,175],
[169,182,182,174,158,0,184,162],
[142,164,172,175,152,156,0,161],
[170,182,178,180,165,178,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,168,175,161,175,173,166],
[158,0,169,178,172,186,184,169],
[172,171,0,174,175,168,176,147],
[165,162,166,0,160,161,174,172],
[179,168,165,180,0,170,176,167],
[165,154,172,179,170,0,171,165],
[167,156,164,166,164,169,0,148],
[174,171,193,168,173,175,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,170,170,170,170,340,170],
[170,0,340,170,170,170,340,170],
[170,0,0,170,0,0,170,170],
[170,170,170,0,170,170,340,340],
[170,170,340,170,0,340,340,340],
[170,170,340,170,0,0,340,340],
[0,0,170,0,0,0,0,0],
[170,170,170,0,0,0,340,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,172,176,163,171,160,173],
[172,0,182,167,172,179,165,162],
[168,158,0,159,165,172,138,160],
[164,173,181,0,170,180,159,166],
[177,168,175,170,0,176,157,162],
[169,161,168,160,164,0,154,164],
[180,175,202,181,183,186,0,166],
[167,178,180,174,178,176,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,163,165,176,146,148,167],
[184,0,173,180,180,159,167,164],
[177,167,0,157,164,145,183,171],
[175,160,183,0,186,169,179,172],
[164,160,176,154,0,154,166,144],
[194,181,195,171,186,0,167,178],
[192,173,157,161,174,173,0,164],
[173,176,169,168,196,162,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,166,171,155,167,159,165],
[174,0,191,159,158,155,180,176],
[174,149,0,154,140,152,150,148],
[169,181,186,0,167,171,166,179],
[185,182,200,173,0,159,169,190],
[173,185,188,169,181,0,158,165],
[181,160,190,174,171,182,0,179],
[175,164,192,161,150,175,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,164,170,168,175,169,154],
[189,0,184,172,176,186,181,168],
[176,156,0,162,160,173,178,157],
[170,168,178,0,172,185,180,169],
[172,164,180,168,0,176,184,170],
[165,154,167,155,164,0,175,151],
[171,159,162,160,156,165,0,166],
[186,172,183,171,170,189,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,176,163,171,174,166,166],
[162,0,151,155,169,158,163,161],
[164,189,0,182,192,173,177,183],
[177,185,158,0,179,148,162,181],
[169,171,148,161,0,160,157,171],
[166,182,167,192,180,0,181,165],
[174,177,163,178,183,159,0,172],
[174,179,157,159,169,175,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,169,186,179,170,181,165],
[183,0,177,198,166,184,174,191],
[171,163,0,184,166,170,182,167],
[154,142,156,0,149,149,150,168],
[161,174,174,191,0,179,175,178],
[170,156,170,191,161,0,166,177],
[159,166,158,190,165,174,0,170],
[175,149,173,172,162,163,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,174,172,167,153,164,168],
[162,0,168,173,158,166,164,162],
[166,172,0,175,178,178,168,175],
[168,167,165,0,145,174,173,168],
[173,182,162,195,0,206,169,172],
[187,174,162,166,134,0,162,165],
[176,176,172,167,171,178,0,185],
[172,178,165,172,168,175,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,193,184,182,149,184,199],
[173,0,181,166,183,139,177,181],
[147,159,0,172,173,155,162,169],
[156,174,168,0,198,173,175,188],
[158,157,167,142,0,146,141,164],
[191,201,185,167,194,0,217,187],
[156,163,178,165,199,123,0,186],
[141,159,171,152,176,153,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,171,163,180,162,165,173],
[173,0,183,167,174,177,158,167],
[169,157,0,177,175,169,164,160],
[177,173,163,0,169,164,160,185],
[160,166,165,171,0,170,174,171],
[178,163,171,176,170,0,156,177],
[175,182,176,180,166,184,0,188],
[167,173,180,155,169,163,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,178,147,189,152,171,165],
[173,0,162,155,173,168,173,148],
[162,178,0,154,177,160,173,157],
[193,185,186,0,184,165,184,175],
[151,167,163,156,0,150,163,159],
[188,172,180,175,190,0,176,169],
[169,167,167,156,177,164,0,149],
[175,192,183,165,181,171,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,151,170,180,155,152,174],
[184,0,162,162,183,161,173,188],
[189,178,0,164,172,178,171,183],
[170,178,176,0,181,174,197,188],
[160,157,168,159,0,160,166,174],
[185,179,162,166,180,0,192,174],
[188,167,169,143,174,148,0,175],
[166,152,157,152,166,166,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,174,175,161,171,174,179],
[169,0,174,161,171,180,161,169],
[166,166,0,168,144,163,164,183],
[165,179,172,0,164,163,163,158],
[179,169,196,176,0,189,166,181],
[169,160,177,177,151,0,161,153],
[166,179,176,177,174,179,0,178],
[161,171,157,182,159,187,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,169,171,166,171,168,170],
[176,0,175,179,178,167,171,166],
[171,165,0,169,165,161,162,162],
[169,161,171,0,156,161,156,153],
[174,162,175,184,0,168,162,170],
[169,173,179,179,172,0,168,169],
[172,169,178,184,178,172,0,172],
[170,174,178,187,170,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,185,172,158,142,161,169],
[162,0,154,165,162,139,155,165],
[155,186,0,159,161,173,157,158],
[168,175,181,0,147,155,157,161],
[182,178,179,193,0,151,179,178],
[198,201,167,185,189,0,176,205],
[179,185,183,183,161,164,0,174],
[171,175,182,179,162,135,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,166,177,195,182,166,191],
[127,0,155,153,125,120,140,157],
[174,185,0,154,190,190,167,190],
[163,187,186,0,189,175,189,211],
[145,215,150,151,0,183,151,171],
[158,220,150,165,157,0,141,170],
[174,200,173,151,189,199,0,191],
[149,183,150,129,169,170,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,179,203,174,195,170,173],
[167,0,208,176,161,205,166,163],
[161,132,0,173,124,156,151,150],
[137,164,167,0,124,170,149,119],
[166,179,216,216,0,193,151,153],
[145,135,184,170,147,0,158,137],
[170,174,189,191,189,182,0,146],
[167,177,190,221,187,203,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,181,190,154,172,185,172],
[158,0,166,172,153,163,167,156],
[159,174,0,197,170,174,172,159],
[150,168,143,0,173,160,177,162],
[186,187,170,167,0,177,171,172],
[168,177,166,180,163,0,183,169],
[155,173,168,163,169,157,0,166],
[168,184,181,178,168,171,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,201,145,191,183,130,183],
[215,0,184,183,171,165,151,163],
[139,156,0,164,181,162,129,194],
[195,157,176,0,176,158,177,165],
[149,169,159,164,0,194,174,172],
[157,175,178,182,146,0,146,170],
[210,189,211,163,166,194,0,168],
[157,177,146,175,168,170,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,172,167,172,179,173,168],
[179,0,170,162,177,176,176,161],
[168,170,0,170,174,182,184,159],
[173,178,170,0,169,182,175,169],
[168,163,166,171,0,182,175,163],
[161,164,158,158,158,0,165,170],
[167,164,156,165,165,175,0,169],
[172,179,181,171,177,170,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,161,156,186,156,183,159],
[175,0,171,181,192,150,198,166],
[179,169,0,175,177,177,198,188],
[184,159,165,0,222,148,180,177],
[154,148,163,118,0,150,154,159],
[184,190,163,192,190,0,196,195],
[157,142,142,160,186,144,0,166],
[181,174,152,163,181,145,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,166,158,165,162,162,172],
[187,0,167,183,163,168,170,160],
[174,173,0,165,176,171,170,179],
[182,157,175,0,167,165,162,166],
[175,177,164,173,0,165,155,172],
[178,172,169,175,175,0,165,177],
[178,170,170,178,185,175,0,184],
[168,180,161,174,168,163,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,195,164,171,177,181,177],
[172,0,168,155,160,160,178,165],
[145,172,0,160,170,149,173,164],
[176,185,180,0,168,158,196,175],
[169,180,170,172,0,156,160,158],
[163,180,191,182,184,0,186,194],
[159,162,167,144,180,154,0,166],
[163,175,176,165,182,146,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,170,210,152,178,186,209],
[178,0,191,183,178,200,170,178],
[170,149,0,160,182,188,198,198],
[130,157,180,0,171,153,156,187],
[188,162,158,169,0,174,179,211],
[162,140,152,187,166,0,201,224],
[154,170,142,184,161,139,0,209],
[131,162,142,153,129,116,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,182,166,158,172,170,186],
[175,0,182,161,172,164,197,174],
[158,158,0,175,161,147,179,173],
[174,179,165,0,152,170,179,178],
[182,168,179,188,0,183,186,184],
[168,176,193,170,157,0,180,173],
[170,143,161,161,154,160,0,172],
[154,166,167,162,156,167,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,134,173,160,145,180,173],
[187,0,158,168,176,173,192,191],
[206,182,0,200,175,154,193,187],
[167,172,140,0,164,152,168,176],
[180,164,165,176,0,183,186,181],
[195,167,186,188,157,0,203,190],
[160,148,147,172,154,137,0,159],
[167,149,153,164,159,150,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,161,166,163,170,173,175],
[182,0,163,191,170,175,177,171],
[179,177,0,184,168,176,173,169],
[174,149,156,0,160,169,178,165],
[177,170,172,180,0,184,198,178],
[170,165,164,171,156,0,172,164],
[167,163,167,162,142,168,0,157],
[165,169,171,175,162,176,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,177,183,172,156,174,168],
[182,0,183,186,170,147,181,176],
[163,157,0,188,168,168,165,156],
[157,154,152,0,146,143,153,148],
[168,170,172,194,0,173,174,171],
[184,193,172,197,167,0,189,168],
[166,159,175,187,166,151,0,156],
[172,164,184,192,169,172,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,174,178,172,168,172,163],
[157,0,162,168,163,160,166,156],
[166,178,0,184,173,164,165,172],
[162,172,156,0,155,159,163,161],
[168,177,167,185,0,182,167,174],
[172,180,176,181,158,0,165,168],
[168,174,175,177,173,175,0,172],
[177,184,168,179,166,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,167,173,170,172,167,168],
[160,0,166,144,163,164,157,170],
[173,174,0,160,180,173,180,165],
[167,196,180,0,170,178,168,173],
[170,177,160,170,0,164,169,167],
[168,176,167,162,176,0,164,165],
[173,183,160,172,171,176,0,172],
[172,170,175,167,173,175,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,165,163,171,165,177,170],
[181,0,155,171,167,179,176,177],
[175,185,0,181,164,183,198,172],
[177,169,159,0,178,183,197,181],
[169,173,176,162,0,170,176,187],
[175,161,157,157,170,0,168,167],
[163,164,142,143,164,172,0,158],
[170,163,168,159,153,173,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,184,171,182,171,161,169],
[168,0,170,171,180,180,171,175],
[156,170,0,153,174,159,142,162],
[169,169,187,0,180,175,178,177],
[158,160,166,160,0,166,166,161],
[169,160,181,165,174,0,162,172],
[179,169,198,162,174,178,0,177],
[171,165,178,163,179,168,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,173,154,148,171,160,165],
[186,0,185,171,170,172,183,180],
[167,155,0,140,139,156,147,155],
[186,169,200,0,154,177,167,170],
[192,170,201,186,0,179,175,185],
[169,168,184,163,161,0,182,175],
[180,157,193,173,165,158,0,189],
[175,160,185,170,155,165,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,168,180,176,209,179,189],
[171,0,172,161,188,163,162,186],
[172,168,0,176,168,185,161,186],
[160,179,164,0,180,178,170,175],
[164,152,172,160,0,189,173,184],
[131,177,155,162,151,0,163,177],
[161,178,179,170,167,177,0,174],
[151,154,154,165,156,163,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,183,156,175,177,182,166],
[172,0,160,156,172,178,157,143],
[157,180,0,173,174,168,167,159],
[184,184,167,0,182,174,180,161],
[165,168,166,158,0,165,156,162],
[163,162,172,166,175,0,167,153],
[158,183,173,160,184,173,0,177],
[174,197,181,179,178,187,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,171,170,177,189,179,173],
[162,0,165,154,172,171,163,158],
[169,175,0,170,168,169,167,174],
[170,186,170,0,176,185,187,174],
[163,168,172,164,0,172,173,170],
[151,169,171,155,168,0,177,171],
[161,177,173,153,167,163,0,157],
[167,182,166,166,170,169,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,172,166,183,162,170,167],
[180,0,171,178,177,180,168,169],
[168,169,0,165,172,172,174,166],
[174,162,175,0,170,174,177,165],
[157,163,168,170,0,168,176,158],
[178,160,168,166,172,0,177,173],
[170,172,166,163,164,163,0,172],
[173,171,174,175,182,167,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,157,157,157,202,251,157],
[160,0,159,156,181,225,228,180],
[183,181,0,203,182,158,228,204],
[183,184,137,0,181,203,228,204],
[183,159,158,159,0,159,229,226],
[138,115,182,137,181,0,205,181],
[89,112,112,112,111,135,0,112],
[183,160,136,136,114,159,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,182,201,199,197,182,170],
[158,0,164,211,193,193,195,169],
[158,176,0,187,186,201,153,154],
[139,129,153,0,204,144,161,138],
[141,147,154,136,0,172,157,133],
[143,147,139,196,168,0,182,129],
[158,145,187,179,183,158,0,156],
[170,171,186,202,207,211,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,170,256,170,170,172,256],
[170,0,170,256,170,86,256,170],
[170,170,0,256,86,170,256,170],
[84,84,84,0,86,0,170,86],
[170,170,254,254,0,170,170,254],
[170,254,170,340,170,0,256,170],
[168,84,84,170,170,84,0,170],
[84,170,170,254,86,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,160,164,176,171,172,164],
[172,0,163,165,169,169,172,163],
[180,177,0,170,176,181,183,171],
[176,175,170,0,178,163,168,167],
[164,171,164,162,0,166,173,163],
[169,171,159,177,174,0,180,162],
[168,168,157,172,167,160,0,172],
[176,177,169,173,177,178,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,152,124,168,144,198,129],
[234,0,198,166,183,222,185,190],
[188,142,0,195,179,179,207,156],
[216,174,145,0,158,197,192,163],
[172,157,161,182,0,158,170,172],
[196,118,161,143,182,0,190,148],
[142,155,133,148,170,150,0,161],
[211,150,184,177,168,192,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,203,165,169,166,169,185],
[150,0,174,135,125,133,138,148],
[137,166,0,129,145,146,139,135],
[175,205,211,0,171,165,198,176],
[171,215,195,169,0,178,173,185],
[174,207,194,175,162,0,187,189],
[171,202,201,142,167,153,0,174],
[155,192,205,164,155,151,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,129,141,130,152,147,128],
[177,0,165,161,122,184,179,126],
[211,175,0,160,163,189,184,148],
[199,179,180,0,136,186,178,153],
[210,218,177,204,0,213,190,163],
[188,156,151,154,127,0,182,138],
[193,161,156,162,150,158,0,172],
[212,214,192,187,177,202,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,172,174,168,174,175,167],
[177,0,183,167,172,179,165,165],
[168,157,0,159,165,177,164,153],
[166,173,181,0,178,162,164,161],
[172,168,175,162,0,159,161,151],
[166,161,163,178,181,0,172,162],
[165,175,176,176,179,168,0,176],
[173,175,187,179,189,178,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,198,185,172,175,151,191],
[183,0,197,205,197,170,184,201],
[142,143,0,160,159,159,142,165],
[155,135,180,0,178,163,155,157],
[168,143,181,162,0,165,162,173],
[165,170,181,177,175,0,163,172],
[189,156,198,185,178,177,0,187],
[149,139,175,183,167,168,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,191,181,180,203,181,169],
[154,0,160,154,159,171,184,154],
[149,180,0,158,180,184,203,186],
[159,186,182,0,176,172,179,185],
[160,181,160,164,0,157,164,166],
[137,169,156,168,183,0,170,149],
[159,156,137,161,176,170,0,171],
[171,186,154,155,174,191,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,172,142,148,160,134,157],
[197,0,184,184,187,163,182,182],
[168,156,0,170,165,178,165,155],
[198,156,170,0,152,168,152,168],
[192,153,175,188,0,179,167,194],
[180,177,162,172,161,0,158,186],
[206,158,175,188,173,182,0,179],
[183,158,185,172,146,154,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,235,237,153,188,174,216],
[146,0,233,234,148,145,171,256],
[105,107,0,172,108,103,127,213],
[103,106,168,0,64,145,86,129],
[187,192,232,276,0,146,190,234],
[152,195,237,195,194,0,154,237],
[166,169,213,254,150,186,0,191],
[124,84,127,211,106,103,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,186,184,191,174,169,190],
[179,0,208,194,199,188,167,219],
[154,132,0,144,161,160,160,164],
[156,146,196,0,185,158,164,201],
[149,141,179,155,0,167,156,178],
[166,152,180,182,173,0,171,187],
[171,173,180,176,184,169,0,187],
[150,121,176,139,162,153,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,179,170,179,181,187,171],
[153,0,168,143,174,166,163,154],
[161,172,0,153,189,165,177,158],
[170,197,187,0,194,181,185,166],
[161,166,151,146,0,166,170,156],
[159,174,175,159,174,0,186,172],
[153,177,163,155,170,154,0,166],
[169,186,182,174,184,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,169,169,165,169,170,166],
[164,0,153,164,169,174,177,149],
[171,187,0,181,183,183,167,180],
[171,176,159,0,153,179,168,164],
[175,171,157,187,0,171,171,165],
[171,166,157,161,169,0,168,162],
[170,163,173,172,169,172,0,163],
[174,191,160,176,175,178,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,179,175,190,179,180,170],
[164,0,179,173,178,177,161,159],
[161,161,0,169,176,193,179,155],
[165,167,171,0,166,178,176,164],
[150,162,164,174,0,184,172,166],
[161,163,147,162,156,0,149,160],
[160,179,161,164,168,191,0,168],
[170,181,185,176,174,180,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,149,150,176,167,152,167],
[165,0,169,156,182,163,174,176],
[191,171,0,159,186,176,162,187],
[190,184,181,0,196,174,182,160],
[164,158,154,144,0,162,168,161],
[173,177,164,166,178,0,171,179],
[188,166,178,158,172,169,0,183],
[173,164,153,180,179,161,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,181,176,169,158,169,167],
[160,0,158,165,161,151,166,151],
[159,182,0,179,158,170,160,170],
[164,175,161,0,165,164,169,178],
[171,179,182,175,0,160,172,166],
[182,189,170,176,180,0,166,172],
[171,174,180,171,168,174,0,169],
[173,189,170,162,174,168,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,152,191,149,174,157,161],
[188,0,158,189,164,166,158,182],
[188,182,0,209,191,170,194,196],
[149,151,131,0,155,157,171,168],
[191,176,149,185,0,171,183,181],
[166,174,170,183,169,0,176,182],
[183,182,146,169,157,164,0,184],
[179,158,144,172,159,158,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,152,183,158,160,162,189],
[172,0,178,164,177,182,164,181],
[188,162,0,164,163,176,189,175],
[157,176,176,0,166,159,188,197],
[182,163,177,174,0,170,192,175],
[180,158,164,181,170,0,166,187],
[178,176,151,152,148,174,0,159],
[151,159,165,143,165,153,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,172,170,172,178,165,156],
[181,0,145,158,176,167,155,153],
[168,195,0,177,186,184,173,190],
[170,182,163,0,173,178,173,176],
[168,164,154,167,0,161,153,155],
[162,173,156,162,179,0,158,168],
[175,185,167,167,187,182,0,178],
[184,187,150,164,185,172,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,135,134,157,143,141,155],
[195,0,175,168,182,172,173,165],
[205,165,0,165,192,167,170,173],
[206,172,175,0,171,173,174,158],
[183,158,148,169,0,156,167,152],
[197,168,173,167,184,0,171,175],
[199,167,170,166,173,169,0,170],
[185,175,167,182,188,165,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,184,211,209,204,194,214],
[193,0,189,186,187,178,154,172],
[156,151,0,182,187,196,166,203],
[129,154,158,0,149,136,167,156],
[131,153,153,191,0,146,201,169],
[136,162,144,204,194,0,171,222],
[146,186,174,173,139,169,0,170],
[126,168,137,184,171,118,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,172,152,166,161,172,189],
[173,0,190,168,171,171,177,188],
[168,150,0,165,178,166,153,163],
[188,172,175,0,160,165,178,168],
[174,169,162,180,0,165,183,181],
[179,169,174,175,175,0,176,174],
[168,163,187,162,157,164,0,149],
[151,152,177,172,159,166,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,178,188,166,165,171,175],
[178,0,178,168,163,161,169,169],
[162,162,0,156,156,160,168,183],
[152,172,184,0,169,170,165,167],
[174,177,184,171,0,173,184,168],
[175,179,180,170,167,0,186,179],
[169,171,172,175,156,154,0,168],
[165,171,157,173,172,161,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,134,156,173,160,180,136],
[148,0,139,160,165,158,156,119],
[206,201,0,193,185,177,200,169],
[184,180,147,0,177,148,166,137],
[167,175,155,163,0,154,146,142],
[180,182,163,192,186,0,153,154],
[160,184,140,174,194,187,0,172],
[204,221,171,203,198,186,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,159,158,146,170,142,168],
[169,0,152,173,154,168,142,155],
[181,188,0,182,162,179,167,168],
[182,167,158,0,158,165,153,151],
[194,186,178,182,0,163,177,174],
[170,172,161,175,177,0,155,159],
[198,198,173,187,163,185,0,182],
[172,185,172,189,166,181,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,167,172,172,164,183,168],
[176,0,173,183,178,164,173,165],
[173,167,0,175,177,171,171,190],
[168,157,165,0,167,168,170,162],
[168,162,163,173,0,163,165,173],
[176,176,169,172,177,0,196,157],
[157,167,169,170,175,144,0,166],
[172,175,150,178,167,183,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,169,169,86,340,170,86],
[171,0,84,86,170,257,171,86],
[171,256,0,256,86,257,254,173],
[171,254,84,0,84,257,254,87],
[254,170,254,256,0,340,254,173],
[0,83,83,83,0,0,170,0],
[170,169,86,86,86,170,0,86],
[254,254,167,253,167,340,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,159,169,150,155,158,170],
[161,0,160,171,142,171,152,166],
[181,180,0,179,164,172,162,151],
[171,169,161,0,167,155,146,165],
[190,198,176,173,0,169,169,180],
[185,169,168,185,171,0,159,168],
[182,188,178,194,171,181,0,170],
[170,174,189,175,160,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,191,178,186,166,187,168],
[162,0,187,167,199,167,169,161],
[149,153,0,153,170,165,160,154],
[162,173,187,0,183,159,173,170],
[154,141,170,157,0,151,156,150],
[174,173,175,181,189,0,168,183],
[153,171,180,167,184,172,0,170],
[172,179,186,170,190,157,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,166,196,173,177,160,193],
[163,0,171,187,167,154,145,175],
[174,169,0,174,175,156,153,179],
[144,153,166,0,157,147,149,165],
[167,173,165,183,0,169,170,185],
[163,186,184,193,171,0,160,187],
[180,195,187,191,170,180,0,209],
[147,165,161,175,155,153,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,159,177,158,163,163,161],
[185,0,169,179,184,170,176,171],
[181,171,0,166,163,166,169,163],
[163,161,174,0,166,176,175,172],
[182,156,177,174,0,177,187,163],
[177,170,174,164,163,0,177,165],
[177,164,171,165,153,163,0,169],
[179,169,177,168,177,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,183,196,205,195,193,158],
[167,0,190,213,194,191,171,164],
[157,150,0,194,183,160,163,157],
[144,127,146,0,187,167,159,133],
[135,146,157,153,0,151,147,146],
[145,149,180,173,189,0,163,170],
[147,169,177,181,193,177,0,185],
[182,176,183,207,194,170,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,156,156,156,174,171,162],
[200,0,175,178,169,203,163,188],
[184,165,0,181,175,170,166,175],
[184,162,159,0,170,183,187,185],
[184,171,165,170,0,169,164,168],
[166,137,170,157,171,0,157,168],
[169,177,174,153,176,183,0,181],
[178,152,165,155,172,172,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,164,152,176,158,165,154],
[180,0,170,166,173,154,157,160],
[176,170,0,163,178,171,166,159],
[188,174,177,0,180,168,179,175],
[164,167,162,160,0,157,155,153],
[182,186,169,172,183,0,165,173],
[175,183,174,161,185,175,0,157],
[186,180,181,165,187,167,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,161,194,149,124,141,156],
[162,0,142,126,147,144,127,125],
[179,198,0,197,177,176,170,165],
[146,214,143,0,173,146,167,144],
[191,193,163,167,0,142,141,146],
[216,196,164,194,198,0,184,161],
[199,213,170,173,199,156,0,200],
[184,215,175,196,194,179,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,171,177,168,173,166,174],
[163,0,156,180,153,179,161,175],
[169,184,0,180,170,185,165,173],
[163,160,160,0,161,161,158,160],
[172,187,170,179,0,177,186,176],
[167,161,155,179,163,0,157,168],
[174,179,175,182,154,183,0,184],
[166,165,167,180,164,172,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,146,174,174,179,160,166],
[192,0,174,156,202,143,167,180],
[194,166,0,169,211,186,180,168],
[166,184,171,0,178,164,159,195],
[166,138,129,162,0,136,162,146],
[161,197,154,176,204,0,172,183],
[180,173,160,181,178,168,0,169],
[174,160,172,145,194,157,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,178,180,171,173,162,172],
[183,0,182,193,164,174,171,178],
[162,158,0,180,157,171,165,175],
[160,147,160,0,159,157,134,152],
[169,176,183,181,0,180,167,177],
[167,166,169,183,160,0,160,163],
[178,169,175,206,173,180,0,172],
[168,162,165,188,163,177,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,182,175,176,169,165,176],
[144,0,147,158,142,154,150,154],
[158,193,0,162,170,162,169,167],
[165,182,178,0,176,176,170,175],
[164,198,170,164,0,161,175,170],
[171,186,178,164,179,0,164,175],
[175,190,171,170,165,176,0,171],
[164,186,173,165,170,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,176,152,143,174,154,164],
[166,0,181,172,173,170,163,163],
[164,159,0,163,157,172,155,162],
[188,168,177,0,166,181,178,184],
[197,167,183,174,0,177,191,190],
[166,170,168,159,163,0,160,154],
[186,177,185,162,149,180,0,190],
[176,177,178,156,150,186,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,176,173,195,185,171,169],
[163,0,158,170,173,156,176,156],
[164,182,0,169,176,175,161,175],
[167,170,171,0,189,169,167,168],
[145,167,164,151,0,158,155,150],
[155,184,165,171,182,0,171,166],
[169,164,179,173,185,169,0,169],
[171,184,165,172,190,174,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,173,162,156,165,158,158],
[161,0,152,156,152,157,158,144],
[167,188,0,167,157,154,165,150],
[178,184,173,0,176,185,157,165],
[184,188,183,164,0,177,175,180],
[175,183,186,155,163,0,170,157],
[182,182,175,183,165,170,0,164],
[182,196,190,175,160,183,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,154,178,180,157,153,177],
[163,0,155,149,190,139,162,179],
[186,185,0,184,178,154,188,182],
[162,191,156,0,187,157,191,186],
[160,150,162,153,0,150,158,176],
[183,201,186,183,190,0,158,170],
[187,178,152,149,182,182,0,182],
[163,161,158,154,164,170,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,156,162,160,134,130,182],
[208,0,182,133,185,158,127,154],
[184,158,0,184,156,133,183,206],
[178,207,156,0,184,184,178,155],
[180,155,184,156,0,182,154,209],
[206,182,207,156,158,0,154,233],
[210,213,157,162,186,186,0,208],
[158,186,134,185,131,107,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,164,188,168,161,163,157],
[160,0,182,178,152,166,164,171],
[176,158,0,180,171,171,179,147],
[152,162,160,0,173,169,174,150],
[172,188,169,167,0,164,168,166],
[179,174,169,171,176,0,161,153],
[177,176,161,166,172,179,0,159],
[183,169,193,190,174,187,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,272,270,238,133,272,272],
[104,0,171,104,136,203,270,104],
[68,169,0,136,102,65,133,68],
[70,236,204,0,135,99,238,172],
[102,204,238,205,0,135,170,136],
[207,137,275,241,205,0,205,207],
[68,70,207,102,170,135,0,102],
[68,236,272,168,204,133,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,156,162,163,141,124,146],
[180,0,172,164,184,174,154,155],
[184,168,0,176,208,176,183,184],
[178,176,164,0,186,166,141,178],
[177,156,132,154,0,160,143,149],
[199,166,164,174,180,0,164,168],
[216,186,157,199,197,176,0,182],
[194,185,156,162,191,172,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,169,184,178,169,187,170],
[177,0,176,186,159,173,181,175],
[171,164,0,159,181,179,190,159],
[156,154,181,0,162,163,171,161],
[162,181,159,178,0,180,188,161],
[171,167,161,177,160,0,174,163],
[153,159,150,169,152,166,0,156],
[170,165,181,179,179,177,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,171,171,168,181,183,164],
[170,0,159,166,157,184,170,158],
[169,181,0,173,178,187,174,170],
[169,174,167,0,166,174,170,166],
[172,183,162,174,0,188,193,169],
[159,156,153,166,152,0,161,150],
[157,170,166,170,147,179,0,154],
[176,182,170,174,171,190,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,185,157,177,198,174,172],
[171,0,161,158,153,167,142,151],
[155,179,0,139,140,165,177,146],
[183,182,201,0,186,200,171,168],
[163,187,200,154,0,170,174,159],
[142,173,175,140,170,0,164,161],
[166,198,163,169,166,176,0,146],
[168,189,194,172,181,179,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,176,164,178,179,177,173],
[170,0,177,170,172,173,182,169],
[164,163,0,175,167,165,171,164],
[176,170,165,0,159,155,181,172],
[162,168,173,181,0,173,180,164],
[161,167,175,185,167,0,175,166],
[163,158,169,159,160,165,0,158],
[167,171,176,168,176,174,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,158,163,181,167,154,168],
[180,0,173,172,174,181,172,159],
[182,167,0,182,192,174,183,169],
[177,168,158,0,183,168,139,173],
[159,166,148,157,0,155,146,167],
[173,159,166,172,185,0,180,177],
[186,168,157,201,194,160,0,166],
[172,181,171,167,173,163,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,162,150,178,174,156,195],
[167,0,178,182,178,174,181,212],
[178,162,0,173,193,157,167,192],
[190,158,167,0,184,173,185,200],
[162,162,147,156,0,141,146,187],
[166,166,183,167,199,0,176,181],
[184,159,173,155,194,164,0,198],
[145,128,148,140,153,159,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,181,144,179,166,178,162],
[169,0,170,156,172,165,179,165],
[159,170,0,159,168,148,168,161],
[196,184,181,0,185,182,181,163],
[161,168,172,155,0,160,171,163],
[174,175,192,158,180,0,173,169],
[162,161,172,159,169,167,0,173],
[178,175,179,177,177,171,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,161,160,166,202,164,153],
[181,0,201,180,182,172,153,173],
[179,139,0,164,160,165,157,153],
[180,160,176,0,179,180,164,146],
[174,158,180,161,0,169,168,157],
[138,168,175,160,171,0,178,157],
[176,187,183,176,172,162,0,158],
[187,167,187,194,183,183,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,165,167,181,174,164,174],
[181,0,170,169,167,175,177,186],
[175,170,0,170,174,165,167,187],
[173,171,170,0,183,163,157,179],
[159,173,166,157,0,157,155,175],
[166,165,175,177,183,0,150,179],
[176,163,173,183,185,190,0,196],
[166,154,153,161,165,161,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,187,161,176,180,168,174],
[183,0,174,182,181,195,180,166],
[153,166,0,160,161,183,156,145],
[179,158,180,0,184,175,182,173],
[164,159,179,156,0,178,176,162],
[160,145,157,165,162,0,175,152],
[172,160,184,158,164,165,0,164],
[166,174,195,167,178,188,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,128,134,189,168,124,136],
[217,0,187,194,184,176,149,159],
[212,153,0,165,199,167,123,140],
[206,146,175,0,183,174,186,193],
[151,156,141,157,0,168,134,158],
[172,164,173,166,172,0,116,135],
[216,191,217,154,206,224,0,189],
[204,181,200,147,182,205,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,159,146,169,142,170,151],
[155,0,173,146,162,161,164,148],
[181,167,0,166,163,175,182,159],
[194,194,174,0,158,156,173,164],
[171,178,177,182,0,152,177,178],
[198,179,165,184,188,0,181,175],
[170,176,158,167,163,159,0,154],
[189,192,181,176,162,165,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,178,160,140,179,209,224],
[142,0,163,173,173,140,195,208],
[162,177,0,171,171,177,180,203],
[180,167,169,0,138,139,169,159],
[200,167,169,202,0,188,155,224],
[161,200,163,201,152,0,215,191],
[131,145,160,171,185,125,0,194],
[116,132,137,181,116,149,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,167,207,245,191,243,189],
[132,0,187,228,210,171,222,167],
[173,153,0,213,210,210,227,134],
[133,112,127,0,190,153,243,95],
[95,130,130,150,0,132,167,170],
[149,169,130,187,208,0,187,131],
[97,118,113,97,173,153,0,96],
[151,173,206,245,170,209,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,177,147,160,191,172,176],
[179,0,157,172,170,198,169,173],
[163,183,0,145,167,180,166,170],
[193,168,195,0,169,199,168,181],
[180,170,173,171,0,192,176,170],
[149,142,160,141,148,0,148,154],
[168,171,174,172,164,192,0,164],
[164,167,170,159,170,186,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,187,188,183,177,166,157],
[161,0,147,146,143,155,142,147],
[153,193,0,182,191,170,170,169],
[152,194,158,0,166,169,161,152],
[157,197,149,174,0,168,161,171],
[163,185,170,171,172,0,153,151],
[174,198,170,179,179,187,0,179],
[183,193,171,188,169,189,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,186,170,181,203,182,177],
[152,0,153,161,171,189,166,144],
[154,187,0,175,186,202,182,181],
[170,179,165,0,182,205,171,194],
[159,169,154,158,0,194,179,169],
[137,151,138,135,146,0,165,155],
[158,174,158,169,161,175,0,151],
[163,196,159,146,171,185,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,178,188,179,170,170,182],
[125,0,141,168,160,144,151,151],
[162,199,0,188,169,155,175,156],
[152,172,152,0,173,164,166,152],
[161,180,171,167,0,151,162,134],
[170,196,185,176,189,0,187,156],
[170,189,165,174,178,153,0,180],
[158,189,184,188,206,184,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,175,169,164,200,158,164],
[157,0,172,148,185,180,154,169],
[165,168,0,140,156,179,164,153],
[171,192,200,0,177,192,170,164],
[176,155,184,163,0,183,167,171],
[140,160,161,148,157,0,147,151],
[182,186,176,170,173,193,0,163],
[176,171,187,176,169,189,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,133,178,154,142,155,174],
[178,0,172,180,164,188,184,187],
[207,168,0,194,182,172,178,167],
[162,160,146,0,157,167,169,168],
[186,176,158,183,0,194,186,175],
[198,152,168,173,146,0,160,165],
[185,156,162,171,154,180,0,161],
[166,153,173,172,165,175,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,147,147,155,180,106,132],
[172,0,191,188,191,172,136,183],
[193,149,0,183,170,212,171,188],
[193,152,157,0,139,188,119,143],
[185,149,170,201,0,165,161,178],
[160,168,128,152,175,0,149,151],
[234,204,169,221,179,191,0,203],
[208,157,152,197,162,189,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,169,153,153,182,177,165],
[181,0,160,172,131,204,159,172],
[171,180,0,150,167,193,189,167],
[187,168,190,0,161,190,172,160],
[187,209,173,179,0,170,179,176],
[158,136,147,150,170,0,129,153],
[163,181,151,168,161,211,0,179],
[175,168,173,180,164,187,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,183,151,174,168,166,161],
[184,0,168,180,187,168,169,192],
[157,172,0,178,165,154,152,160],
[189,160,162,0,184,185,176,181],
[166,153,175,156,0,143,149,155],
[172,172,186,155,197,0,156,170],
[174,171,188,164,191,184,0,199],
[179,148,180,159,185,170,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,171,173,174,197,219,215],
[197,0,226,165,187,208,188,217],
[169,114,0,123,188,180,169,216],
[167,175,217,0,187,209,200,238],
[166,153,152,153,0,176,168,236],
[143,132,160,131,164,0,166,181],
[121,152,171,140,172,174,0,233],
[125,123,124,102,104,159,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,174,166,160,156,170,166],
[176,0,180,174,182,163,173,182],
[166,160,0,170,167,162,170,155],
[174,166,170,0,172,174,176,180],
[180,158,173,168,0,167,160,160],
[184,177,178,166,173,0,175,181],
[170,167,170,164,180,165,0,176],
[174,158,185,160,180,159,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,175,188,170,169,156,166],
[161,0,167,179,164,166,172,165],
[165,173,0,192,158,156,172,161],
[152,161,148,0,152,151,164,141],
[170,176,182,188,0,168,166,182],
[171,174,184,189,172,0,177,155],
[184,168,168,176,174,163,0,163],
[174,175,179,199,158,185,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,216,170,200,183,172,184],
[124,0,185,95,137,185,153,139],
[124,155,0,141,186,153,188,122],
[170,245,199,0,217,137,217,139],
[140,203,154,123,0,184,186,124],
[157,155,187,203,156,0,234,170],
[168,187,152,123,154,106,0,138],
[156,201,218,201,216,170,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,160,171,172,165,182,168],
[174,0,183,180,181,168,172,173],
[180,157,0,183,186,174,172,171],
[169,160,157,0,165,161,181,161],
[168,159,154,175,0,161,176,166],
[175,172,166,179,179,0,187,177],
[158,168,168,159,164,153,0,158],
[172,167,169,179,174,163,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,162,178,171,172,155,179],
[200,0,161,195,188,170,174,180],
[178,179,0,177,182,189,157,180],
[162,145,163,0,176,171,147,159],
[169,152,158,164,0,155,165,169],
[168,170,151,169,185,0,169,171],
[185,166,183,193,175,171,0,181],
[161,160,160,181,171,169,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,183,185,158,195,171,171],
[168,0,187,173,161,185,160,169],
[157,153,0,166,155,172,152,165],
[155,167,174,0,160,175,163,176],
[182,179,185,180,0,178,168,188],
[145,155,168,165,162,0,166,157],
[169,180,188,177,172,174,0,188],
[169,171,175,164,152,183,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,159,162,159,156,148,168],
[179,0,181,156,175,177,163,167],
[181,159,0,170,187,161,156,171],
[178,184,170,0,166,177,175,192],
[181,165,153,174,0,157,166,172],
[184,163,179,163,183,0,166,181],
[192,177,184,165,174,174,0,177],
[172,173,169,148,168,159,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,195,162,183,180,178,172],
[168,0,179,153,171,175,165,170],
[145,161,0,151,161,182,151,171],
[178,187,189,0,178,192,158,190],
[157,169,179,162,0,185,172,170],
[160,165,158,148,155,0,150,158],
[162,175,189,182,168,190,0,192],
[168,170,169,150,170,182,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,205,181,170,192,161,174],
[184,0,187,175,185,225,188,168],
[135,153,0,158,164,197,147,149],
[159,165,182,0,177,185,158,144],
[170,155,176,163,0,179,165,169],
[148,115,143,155,161,0,165,155],
[179,152,193,182,175,175,0,176],
[166,172,191,196,171,185,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,208,167,175,166,165,168],
[177,0,209,183,169,167,172,164],
[132,131,0,146,148,150,126,149],
[173,157,194,0,168,167,159,175],
[165,171,192,172,0,163,165,165],
[174,173,190,173,177,0,174,170],
[175,168,214,181,175,166,0,162],
[172,176,191,165,175,170,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,183,195,160,170,156,122],
[133,0,121,159,137,109,148,134],
[157,219,0,194,221,171,205,157],
[145,181,146,0,173,182,174,172],
[180,203,119,167,0,155,182,169],
[170,231,169,158,185,0,196,146],
[184,192,135,166,158,144,0,143],
[218,206,183,168,171,194,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,188,164,180,181,174,173],
[158,0,175,177,172,192,183,178],
[152,165,0,146,188,178,195,178],
[176,163,194,0,180,205,208,185],
[160,168,152,160,0,180,185,194],
[159,148,162,135,160,0,166,177],
[166,157,145,132,155,174,0,173],
[167,162,162,155,146,163,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,187,167,183,172,175,177],
[171,0,179,176,170,164,182,181],
[153,161,0,145,149,170,173,152],
[173,164,195,0,166,180,192,177],
[157,170,191,174,0,183,181,186],
[168,176,170,160,157,0,184,178],
[165,158,167,148,159,156,0,167],
[163,159,188,163,154,162,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,340,340,170,340,170,340],
[170,0,340,170,170,340,340,170],
[0,0,0,170,170,340,170,170],
[0,170,170,0,170,170,170,340],
[170,170,170,170,0,170,170,340],
[0,0,0,170,170,0,170,170],
[170,0,170,170,170,170,0,170],
[0,170,170,0,0,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,164,187,176,164,186,168],
[171,0,166,187,185,181,181,172],
[176,174,0,172,166,180,176,172],
[153,153,168,0,138,127,148,173],
[164,155,174,202,0,149,163,173],
[176,159,160,213,191,0,189,205],
[154,159,164,192,177,151,0,169],
[172,168,168,167,167,135,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,176,176,156,174,178,188],
[162,0,184,169,171,169,179,186],
[164,156,0,171,167,160,173,177],
[164,171,169,0,158,170,179,180],
[184,169,173,182,0,162,172,184],
[166,171,180,170,178,0,175,186],
[162,161,167,161,168,165,0,166],
[152,154,163,160,156,154,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,166,184,166,162,175,195],
[161,0,153,167,167,164,190,188],
[174,187,0,164,186,182,181,183],
[156,173,176,0,166,170,166,182],
[174,173,154,174,0,172,183,188],
[178,176,158,170,168,0,172,188],
[165,150,159,174,157,168,0,180],
[145,152,157,158,152,152,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,204,162,195,185,189,181],
[158,0,178,181,201,187,197,177],
[136,162,0,145,153,152,158,159],
[178,159,195,0,174,165,183,188],
[145,139,187,166,0,174,185,150],
[155,153,188,175,166,0,161,169],
[151,143,182,157,155,179,0,152],
[159,163,181,152,190,171,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,159,141,162,155,179,185],
[164,0,160,161,162,175,173,179],
[181,180,0,170,215,197,209,211],
[199,179,170,0,166,230,170,187],
[178,178,125,174,0,200,219,183],
[185,165,143,110,140,0,166,149],
[161,167,131,170,121,174,0,180],
[155,161,129,153,157,191,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,166,175,170,177,185,186],
[153,0,163,171,140,173,162,176],
[174,177,0,164,163,183,167,178],
[165,169,176,0,159,190,176,163],
[170,200,177,181,0,193,181,182],
[163,167,157,150,147,0,162,166],
[155,178,173,164,159,178,0,171],
[154,164,162,177,158,174,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,177,176,189,178,170,194],
[163,0,170,176,177,171,173,183],
[163,170,0,178,181,168,175,176],
[164,164,162,0,166,163,166,174],
[151,163,159,174,0,159,176,176],
[162,169,172,177,181,0,170,176],
[170,167,165,174,164,170,0,172],
[146,157,164,166,164,164,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,192,156,148,154,173,159],
[163,0,185,177,168,163,171,176],
[148,155,0,145,148,132,143,147],
[184,163,195,0,158,159,163,174],
[192,172,192,182,0,176,169,176],
[186,177,208,181,164,0,174,159],
[167,169,197,177,171,166,0,157],
[181,164,193,166,164,181,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,169,168,181,164,171,176],
[187,0,180,189,181,165,163,173],
[171,160,0,157,174,155,166,162],
[172,151,183,0,180,170,171,169],
[159,159,166,160,0,146,151,148],
[176,175,185,170,194,0,181,181],
[169,177,174,169,189,159,0,181],
[164,167,178,171,192,159,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,205,184,156,183,181,210],
[126,0,154,142,154,140,143,145],
[135,186,0,166,172,139,159,184],
[156,198,174,0,153,148,176,178],
[184,186,168,187,0,169,173,193],
[157,200,201,192,171,0,184,185],
[159,197,181,164,167,156,0,182],
[130,195,156,162,147,155,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,169,149,147,160,173,166],
[181,0,155,171,169,170,173,159],
[171,185,0,166,175,163,177,173],
[191,169,174,0,179,179,183,191],
[193,171,165,161,0,171,164,163],
[180,170,177,161,169,0,179,160],
[167,167,163,157,176,161,0,164],
[174,181,167,149,177,180,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,153,181,158,165,150,151],
[173,0,167,179,163,171,158,162],
[187,173,0,187,164,180,164,174],
[159,161,153,0,168,165,153,142],
[182,177,176,172,0,184,174,169],
[175,169,160,175,156,0,157,139],
[190,182,176,187,166,183,0,174],
[189,178,166,198,171,201,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,180,151,149,161,167,157],
[158,0,186,152,134,152,142,170],
[160,154,0,137,142,149,152,151],
[189,188,203,0,152,175,161,159],
[191,206,198,188,0,161,183,185],
[179,188,191,165,179,0,184,165],
[173,198,188,179,157,156,0,176],
[183,170,189,181,155,175,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,178,181,199,171,195,170],
[163,0,163,173,178,144,183,170],
[162,177,0,180,185,175,181,176],
[159,167,160,0,182,164,194,176],
[141,162,155,158,0,150,170,155],
[169,196,165,176,190,0,183,178],
[145,157,159,146,170,157,0,159],
[170,170,164,164,185,162,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,150,167,178,142,187,172],
[189,0,165,189,195,174,222,203],
[190,175,0,161,196,136,199,199],
[173,151,179,0,184,142,215,190],
[162,145,144,156,0,126,172,179],
[198,166,204,198,214,0,197,206],
[153,118,141,125,168,143,0,163],
[168,137,141,150,161,134,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,170,181,168,180,189,184],
[157,0,162,150,155,160,165,160],
[170,178,0,165,167,177,189,171],
[159,190,175,0,191,169,190,177],
[172,185,173,149,0,174,170,175],
[160,180,163,171,166,0,180,167],
[151,175,151,150,170,160,0,150],
[156,180,169,163,165,173,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,165,188,169,179,179,188],
[186,0,173,172,168,204,179,155],
[175,167,0,182,174,191,177,146],
[152,168,158,0,169,177,173,188],
[171,172,166,171,0,177,203,171],
[161,136,149,163,163,0,149,154],
[161,161,163,167,137,191,0,165],
[152,185,194,152,169,186,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,185,174,188,174,179,163],
[180,0,182,173,174,164,176,168],
[155,158,0,171,162,175,160,154],
[166,167,169,0,172,169,170,174],
[152,166,178,168,0,167,162,161],
[166,176,165,171,173,0,178,162],
[161,164,180,170,178,162,0,156],
[177,172,186,166,179,178,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,169,170,188,167,196,165],
[135,0,152,135,157,124,174,135],
[171,188,0,139,202,174,184,147],
[170,205,201,0,179,159,198,168],
[152,183,138,161,0,144,179,151],
[173,216,166,181,196,0,200,182],
[144,166,156,142,161,140,0,142],
[175,205,193,172,189,158,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,180,167,163,193,178,187],
[164,0,182,179,163,181,170,178],
[160,158,0,177,183,181,174,174],
[173,161,163,0,167,174,174,160],
[177,177,157,173,0,172,180,171],
[147,159,159,166,168,0,156,149],
[162,170,166,166,160,184,0,166],
[153,162,166,180,169,191,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,168,166,184,165,191,217],
[160,0,179,186,189,182,190,205],
[172,161,0,168,168,170,148,194],
[174,154,172,0,181,180,178,211],
[156,151,172,159,0,167,167,200],
[175,158,170,160,173,0,163,189],
[149,150,192,162,173,177,0,207],
[123,135,146,129,140,151,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,199,213,196,182,219,249],
[178,0,231,104,214,197,218,158],
[141,109,0,140,193,161,149,157],
[127,236,200,0,253,183,237,234],
[144,126,147,87,0,108,183,159],
[158,143,179,157,232,0,236,195],
[121,122,191,103,157,104,0,121],
[91,182,183,106,181,145,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,129,153,149,161,149,138],
[180,0,162,164,190,170,169,158],
[211,178,0,185,198,178,170,160],
[187,176,155,0,174,171,175,161],
[191,150,142,166,0,165,147,168],
[179,170,162,169,175,0,169,174],
[191,171,170,165,193,171,0,174],
[202,182,180,179,172,166,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,172,177,181,185,185,170],
[140,0,139,151,159,140,166,150],
[168,201,0,193,177,171,186,174],
[163,189,147,0,176,149,171,152],
[159,181,163,164,0,165,185,179],
[155,200,169,191,175,0,173,195],
[155,174,154,169,155,167,0,166],
[170,190,166,188,161,145,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,180,162,194,172,163,181],
[146,0,136,148,151,158,163,150],
[160,204,0,155,153,179,173,170],
[178,192,185,0,202,187,186,156],
[146,189,187,138,0,182,165,147],
[168,182,161,153,158,0,156,160],
[177,177,167,154,175,184,0,167],
[159,190,170,184,193,180,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,186,172,179,179,164,187],
[158,0,162,174,177,181,153,179],
[154,178,0,177,172,181,161,175],
[168,166,163,0,170,168,180,199],
[161,163,168,170,0,163,185,173],
[161,159,159,172,177,0,158,161],
[176,187,179,160,155,182,0,187],
[153,161,165,141,167,179,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,175,168,170,185,170],
[168,0,166,170,169,185,185,168],
[169,174,0,186,176,185,185,155],
[165,170,154,0,165,164,165,163],
[172,171,164,175,0,180,170,163],
[170,155,155,176,160,0,175,156],
[155,155,155,175,170,165,0,154],
[170,172,185,177,177,184,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,166,167,161,163,171,176],
[182,0,170,166,175,172,179,220],
[174,170,0,180,165,178,178,171],
[173,174,160,0,153,177,159,175],
[179,165,175,187,0,160,179,170],
[177,168,162,163,180,0,175,165],
[169,161,162,181,161,165,0,179],
[164,120,169,165,170,175,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,157,186,186,163,230,194],
[162,0,201,197,222,173,245,170],
[183,139,0,207,182,149,217,197],
[154,143,133,0,175,148,187,157],
[154,118,158,165,0,98,161,168],
[177,167,191,192,242,0,274,204],
[110,95,123,153,179,66,0,159],
[146,170,143,183,172,136,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,167,155,159,139,163,165],
[184,0,184,165,178,165,175,178],
[173,156,0,158,153,148,166,168],
[185,175,182,0,177,170,192,176],
[181,162,187,163,0,157,184,162],
[201,175,192,170,183,0,189,175],
[177,165,174,148,156,151,0,164],
[175,162,172,164,178,165,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,183,169,171,157,187,172],
[160,0,178,164,170,163,166,168],
[157,162,0,142,170,170,150,154],
[171,176,198,0,176,187,192,167],
[169,170,170,164,0,143,161,169],
[183,177,170,153,197,0,147,181],
[153,174,190,148,179,193,0,177],
[168,172,186,173,171,159,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,148,126,149,132,155,139],
[199,0,178,173,160,167,167,145],
[192,162,0,157,163,169,164,178],
[214,167,183,0,175,195,184,178],
[191,180,177,165,0,180,170,177],
[208,173,171,145,160,0,173,174],
[185,173,176,156,170,167,0,167],
[201,195,162,162,163,166,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,170,145,144,144,173,110],
[254,0,199,176,116,198,175,223],
[170,141,0,175,117,140,148,138],
[195,164,165,0,84,165,84,163],
[196,224,223,256,0,136,172,194],
[196,142,200,175,204,0,202,223],
[167,165,192,256,168,138,0,163],
[230,117,202,177,146,117,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,175,148,182,172,163,183],
[160,0,170,176,164,166,175,191],
[165,170,0,173,178,170,152,193],
[192,164,167,0,194,180,184,193],
[158,176,162,146,0,166,158,183],
[168,174,170,160,174,0,147,171],
[177,165,188,156,182,193,0,191],
[157,149,147,147,157,169,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,162,159,152,172,168,159],
[177,0,175,165,170,179,175,176],
[178,165,0,177,164,178,177,175],
[181,175,163,0,163,176,187,179],
[188,170,176,177,0,182,182,182],
[168,161,162,164,158,0,167,156],
[172,165,163,153,158,173,0,173],
[181,164,165,161,158,184,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,184,179,163,170,164,164],
[165,0,177,179,156,152,183,161],
[156,163,0,171,160,151,158,149],
[161,161,169,0,152,136,162,145],
[177,184,180,188,0,169,190,180],
[170,188,189,204,171,0,183,175],
[176,157,182,178,150,157,0,160],
[176,179,191,195,160,165,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,168,165,177,170,182,170],
[165,0,167,157,167,164,170,160],
[172,173,0,170,164,172,180,162],
[175,183,170,0,175,177,187,169],
[163,173,176,165,0,173,181,169],
[170,176,168,163,167,0,175,172],
[158,170,160,153,159,165,0,158],
[170,180,178,171,171,168,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,183,181,170,168,170,187],
[162,0,184,178,171,173,171,175],
[157,156,0,162,159,162,161,160],
[159,162,178,0,166,144,138,161],
[170,169,181,174,0,182,158,157],
[172,167,178,196,158,0,164,179],
[170,169,179,202,182,176,0,178],
[153,165,180,179,183,161,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,170,180,168,197,162,175],
[156,0,142,152,159,177,163,165],
[170,198,0,174,151,178,185,172],
[160,188,166,0,163,186,161,150],
[172,181,189,177,0,217,170,167],
[143,163,162,154,123,0,149,157],
[178,177,155,179,170,191,0,169],
[165,175,168,190,173,183,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,187,175,162,171,167,172],
[164,0,175,176,177,164,170,174],
[153,165,0,170,164,174,179,177],
[165,164,170,0,160,159,181,175],
[178,163,176,180,0,176,167,165],
[169,176,166,181,164,0,169,173],
[173,170,161,159,173,171,0,157],
[168,166,163,165,175,167,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,159,172,166,170,171,172],
[177,0,164,170,170,164,165,160],
[181,176,0,187,164,172,173,168],
[168,170,153,0,159,170,169,168],
[174,170,176,181,0,176,154,175],
[170,176,168,170,164,0,170,180],
[169,175,167,171,186,170,0,174],
[168,180,172,172,165,160,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,172,180,167,162,164,183],
[154,0,161,164,154,151,173,173],
[168,179,0,175,152,173,144,183],
[160,176,165,0,155,150,180,174],
[173,186,188,185,0,174,148,200],
[178,189,167,190,166,0,177,177],
[176,167,196,160,192,163,0,191],
[157,167,157,166,140,163,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,188,174,129,185,194,185],
[156,0,177,177,159,197,222,196],
[152,163,0,140,161,173,193,171],
[166,163,200,0,181,182,194,188],
[211,181,179,159,0,169,198,175],
[155,143,167,158,171,0,192,202],
[146,118,147,146,142,148,0,158],
[155,144,169,152,165,138,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,163,176,152,146,160,168],
[167,0,160,173,171,159,169,163],
[177,180,0,179,160,167,170,182],
[164,167,161,0,159,157,160,158],
[188,169,180,181,0,164,187,169],
[194,181,173,183,176,0,182,162],
[180,171,170,180,153,158,0,167],
[172,177,158,182,171,178,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,175,193,170,175,188,168],
[173,0,181,194,172,168,181,178],
[165,159,0,194,153,157,169,168],
[147,146,146,0,148,161,157,151],
[170,168,187,192,0,182,183,182],
[165,172,183,179,158,0,182,174],
[152,159,171,183,157,158,0,187],
[172,162,172,189,158,166,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,167,171,152,181,169,165],
[178,0,181,162,168,174,170,189],
[173,159,0,172,164,179,176,180],
[169,178,168,0,178,178,189,181],
[188,172,176,162,0,173,176,165],
[159,166,161,162,167,0,169,169],
[171,170,164,151,164,171,0,174],
[175,151,160,159,175,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,133,188,188,190,189,190],
[185,0,131,168,130,153,168,151],
[207,209,0,226,133,152,206,170],
[152,172,114,0,171,115,112,169],
[152,210,207,169,0,188,169,132],
[150,187,188,225,152,0,168,226],
[151,172,134,228,171,172,0,192],
[150,189,170,171,208,114,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,169,171,173,182,148,150],
[168,0,165,157,159,183,158,157],
[171,175,0,160,181,194,161,171],
[169,183,180,0,184,198,171,155],
[167,181,159,156,0,176,149,164],
[158,157,146,142,164,0,157,150],
[192,182,179,169,191,183,0,174],
[190,183,169,185,176,190,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,168,173,170,186,192,179],
[185,0,179,154,168,149,150,163],
[172,161,0,157,173,170,153,175],
[167,186,183,0,159,176,155,174],
[170,172,167,181,0,181,193,171],
[154,191,170,164,159,0,176,166],
[148,190,187,185,147,164,0,179],
[161,177,165,166,169,174,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,155,180,160,168,180,158],
[177,0,177,188,172,178,183,163],
[185,163,0,181,179,181,182,177],
[160,152,159,0,142,177,163,150],
[180,168,161,198,0,182,184,174],
[172,162,159,163,158,0,178,153],
[160,157,158,177,156,162,0,174],
[182,177,163,190,166,187,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,182,174,197,159,152,172],
[176,0,163,188,184,192,177,175],
[158,177,0,182,159,160,157,161],
[166,152,158,0,175,177,164,154],
[143,156,181,165,0,149,165,143],
[181,148,180,163,191,0,170,178],
[188,163,183,176,175,170,0,163],
[168,165,179,186,197,162,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,197,146,126,71,178,146],
[142,0,194,88,141,108,192,176],
[143,146,0,180,88,107,178,200],
[194,252,160,0,123,178,174,217],
[214,199,252,217,0,127,214,287],
[269,232,233,162,213,0,265,250],
[162,148,162,166,126,75,0,202],
[194,164,140,123,53,90,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,185,154,194,160,178,172],
[177,0,166,176,171,175,157,172],
[155,174,0,150,174,159,146,141],
[186,164,190,0,177,169,161,154],
[146,169,166,163,0,158,177,163],
[180,165,181,171,182,0,183,163],
[162,183,194,179,163,157,0,176],
[168,168,199,186,177,177,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,177,143,215,175,212,195],
[128,0,172,153,200,172,178,161],
[163,168,0,172,198,169,177,183],
[197,187,168,0,220,164,205,156],
[125,140,142,120,0,149,189,168],
[165,168,171,176,191,0,203,174],
[128,162,163,135,151,137,0,162],
[145,179,157,184,172,166,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,178,169,173,158,174,179],
[156,0,171,166,150,161,155,158],
[162,169,0,179,157,176,167,162],
[171,174,161,0,141,150,148,160],
[167,190,183,199,0,179,183,155],
[182,179,164,190,161,0,180,162],
[166,185,173,192,157,160,0,166],
[161,182,178,180,185,178,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,170,166,171,174,174,181],
[179,0,172,174,168,181,179,156],
[170,168,0,168,151,166,172,171],
[174,166,172,0,166,171,170,176],
[169,172,189,174,0,161,176,167],
[166,159,174,169,179,0,163,154],
[166,161,168,170,164,177,0,169],
[159,184,169,164,173,186,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,179,193,208,165,172,192],
[181,0,180,215,216,169,188,186],
[161,160,0,181,208,164,175,199],
[147,125,159,0,165,127,151,183],
[132,124,132,175,0,124,151,159],
[175,171,176,213,216,0,168,199],
[168,152,165,189,189,172,0,181],
[148,154,141,157,181,141,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,158,157,169,163,178,161],
[190,0,172,184,190,167,185,178],
[182,168,0,187,182,178,198,184],
[183,156,153,0,214,145,177,171],
[171,150,158,126,0,162,152,162],
[177,173,162,195,178,0,183,168],
[162,155,142,163,188,157,0,179],
[179,162,156,169,178,172,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,175,170,193,179,170,168],
[160,0,149,165,160,160,160,157],
[165,191,0,171,173,167,159,172],
[170,175,169,0,163,163,173,158],
[147,180,167,177,0,167,165,168],
[161,180,173,177,173,0,152,169],
[170,180,181,167,175,188,0,185],
[172,183,168,182,172,171,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,161,165,146,154,149,162],
[163,0,172,175,172,162,174,164],
[179,168,0,183,175,192,175,170],
[175,165,157,0,157,153,167,155],
[194,168,165,183,0,172,173,155],
[186,178,148,187,168,0,170,171],
[191,166,165,173,167,170,0,166],
[178,176,170,185,185,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,264,192,166,221,141,219],
[178,0,196,198,148,175,195,221],
[76,144,0,196,123,173,145,197],
[148,142,144,0,147,147,147,124],
[174,192,217,193,0,220,169,193],
[119,165,167,193,120,0,144,147],
[199,145,195,193,171,196,0,173],
[121,119,143,216,147,193,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,165,166,169,181,171,171],
[143,0,155,151,154,163,158,144],
[175,185,0,160,171,183,172,170],
[174,189,180,0,165,174,172,171],
[171,186,169,175,0,179,180,172],
[159,177,157,166,161,0,180,156],
[169,182,168,168,160,160,0,168],
[169,196,170,169,168,184,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,168,178,189,160,192,170],
[148,0,169,177,164,170,194,165],
[172,171,0,171,171,156,177,175],
[162,163,169,0,175,179,171,166],
[151,176,169,165,0,174,175,169],
[180,170,184,161,166,0,192,168],
[148,146,163,169,165,148,0,159],
[170,175,165,174,171,172,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,183,189,180,167,169,182],
[161,0,192,183,172,160,170,173],
[157,148,0,172,161,147,154,159],
[151,157,168,0,172,166,161,154],
[160,168,179,168,0,176,168,166],
[173,180,193,174,164,0,168,174],
[171,170,186,179,172,172,0,181],
[158,167,181,186,174,166,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,227,114,75,223,188,153],
[191,0,228,151,190,266,229,153],
[113,112,0,151,150,225,190,191],
[226,189,189,0,154,226,227,154],
[265,150,190,186,0,302,340,152],
[117,74,115,114,38,0,155,116],
[152,111,150,113,0,185,0,38],
[187,187,149,186,188,224,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,168,170,175,173,156,182],
[187,0,158,141,172,141,162,169],
[172,182,0,164,188,155,164,181],
[170,199,176,0,199,159,175,164],
[165,168,152,141,0,164,162,160],
[167,199,185,181,176,0,155,180],
[184,178,176,165,178,185,0,177],
[158,171,159,176,180,160,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,175,180,159,164,161,154],
[183,0,181,189,166,179,176,164],
[165,159,0,176,151,160,168,158],
[160,151,164,0,141,167,154,154],
[181,174,189,199,0,177,185,170],
[176,161,180,173,163,0,178,166],
[179,164,172,186,155,162,0,157],
[186,176,182,186,170,174,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,195,183,166,181,179,174],
[165,0,186,176,181,190,182,168],
[145,154,0,167,165,167,164,159],
[157,164,173,0,149,178,173,170],
[174,159,175,191,0,174,180,169],
[159,150,173,162,166,0,160,154],
[161,158,176,167,160,180,0,182],
[166,172,181,170,171,186,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,162,186,159,175,159,161],
[173,0,176,178,175,180,150,165],
[178,164,0,176,172,187,167,166],
[154,162,164,0,151,175,151,155],
[181,165,168,189,0,189,170,176],
[165,160,153,165,151,0,145,166],
[181,190,173,189,170,195,0,178],
[179,175,174,185,164,174,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,171,201,193,188,183,166],
[166,0,156,198,181,186,158,157],
[169,184,0,173,188,179,171,181],
[139,142,167,0,172,169,146,153],
[147,159,152,168,0,167,133,153],
[152,154,161,171,173,0,147,168],
[157,182,169,194,207,193,0,178],
[174,183,159,187,187,172,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,169,173,174,185,160,178],
[180,0,184,198,170,188,184,189],
[171,156,0,165,170,161,158,157],
[167,142,175,0,172,170,155,171],
[166,170,170,168,0,167,155,160],
[155,152,179,170,173,0,155,168],
[180,156,182,185,185,185,0,163],
[162,151,183,169,180,172,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,154,173,162,173,162,181],
[156,0,163,178,166,143,159,170],
[186,177,0,180,181,173,168,176],
[167,162,160,0,159,155,170,179],
[178,174,159,181,0,177,172,197],
[167,197,167,185,163,0,172,186],
[178,181,172,170,168,168,0,191],
[159,170,164,161,143,154,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,162,167,141,183,164,185],
[149,0,172,145,146,152,152,161],
[178,168,0,171,175,202,194,185],
[173,195,169,0,162,181,177,176],
[199,194,165,178,0,193,164,171],
[157,188,138,159,147,0,164,170],
[176,188,146,163,176,176,0,178],
[155,179,155,164,169,170,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,168,173,171,181,171,167],
[162,0,171,140,142,159,158,167],
[172,169,0,147,151,143,179,149],
[167,200,193,0,158,177,181,185],
[169,198,189,182,0,175,175,179],
[159,181,197,163,165,0,179,164],
[169,182,161,159,165,161,0,174],
[173,173,191,155,161,176,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,155,202,144,177,202,180],
[160,0,179,208,171,185,201,176],
[185,161,0,198,157,188,192,186],
[138,132,142,0,160,185,178,135],
[196,169,183,180,0,204,208,192],
[163,155,152,155,136,0,164,161],
[138,139,148,162,132,176,0,160],
[160,164,154,205,148,179,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,155,154,139,144,151,168],
[175,0,121,144,133,170,144,173],
[185,219,0,218,179,166,178,219],
[186,196,122,0,183,145,130,164],
[201,207,161,157,0,169,130,184],
[196,170,174,195,171,0,182,196],
[189,196,162,210,210,158,0,199],
[172,167,121,176,156,144,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,176,175,156,158,162,174],
[183,0,196,183,164,172,188,162],
[164,144,0,162,163,157,164,169],
[165,157,178,0,172,162,166,159],
[184,176,177,168,0,171,167,180],
[182,168,183,178,169,0,163,175],
[178,152,176,174,173,177,0,196],
[166,178,171,181,160,165,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,171,171,160,170,175,193],
[182,0,175,171,175,159,166,185],
[169,165,0,173,165,157,181,188],
[169,169,167,0,171,153,175,164],
[180,165,175,169,0,176,167,186],
[170,181,183,187,164,0,184,195],
[165,174,159,165,173,156,0,180],
[147,155,152,176,154,145,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,188,179,163,175,169,154],
[155,0,167,182,155,172,158,154],
[152,173,0,168,148,162,152,140],
[161,158,172,0,153,176,150,141],
[177,185,192,187,0,170,177,142],
[165,168,178,164,170,0,179,152],
[171,182,188,190,163,161,0,172],
[186,186,200,199,198,188,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,180,159,162,166,165,171],
[168,0,184,130,149,139,172,160],
[160,156,0,137,150,148,166,165],
[181,210,203,0,192,172,166,182],
[178,191,190,148,0,160,151,162],
[174,201,192,168,180,0,188,170],
[175,168,174,174,189,152,0,162],
[169,180,175,158,178,170,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,146,181,181,184,196,172],
[147,0,157,166,162,136,154,149],
[194,183,0,182,191,169,202,175],
[159,174,158,0,127,144,161,129],
[159,178,149,213,0,147,172,145],
[156,204,171,196,193,0,168,152],
[144,186,138,179,168,172,0,154],
[168,191,165,211,195,188,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,159,166,157,163,165,180],
[174,0,176,162,178,182,171,169],
[181,164,0,182,193,189,176,184],
[174,178,158,0,169,193,161,179],
[183,162,147,171,0,185,168,160],
[177,158,151,147,155,0,166,157],
[175,169,164,179,172,174,0,177],
[160,171,156,161,180,183,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,174,172,191,173,165,174],
[154,0,172,162,175,163,154,144],
[166,168,0,161,167,165,178,157],
[168,178,179,0,176,176,167,174],
[149,165,173,164,0,163,157,163],
[167,177,175,164,177,0,158,165],
[175,186,162,173,183,182,0,168],
[166,196,183,166,177,175,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,172,173,174,170,170,168],
[170,0,179,176,165,170,160,171],
[168,161,0,170,170,172,163,163],
[167,164,170,0,170,171,184,167],
[166,175,170,170,0,161,145,154],
[170,170,168,169,179,0,165,169],
[170,180,177,156,195,175,0,173],
[172,169,177,173,186,171,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,186,162,196,181,160,163],
[168,0,202,164,187,128,144,196],
[154,138,0,159,134,154,164,177],
[178,176,181,0,196,147,174,179],
[144,153,206,144,0,103,144,128],
[159,212,186,193,237,0,211,187],
[180,196,176,166,196,129,0,166],
[177,144,163,161,212,153,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,170,170,0,170,170,85],
[340,0,255,170,85,255,170,255],
[170,85,0,170,0,255,170,170],
[170,170,170,0,85,255,170,170],
[340,255,340,255,0,255,170,340],
[170,85,85,85,85,0,170,170],
[170,170,170,170,170,170,0,170],
[255,85,170,170,0,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,167,151,162,157,170,175],
[187,0,181,169,156,176,178,189],
[173,159,0,158,145,149,170,178],
[189,171,182,0,154,171,183,188],
[178,184,195,186,0,208,170,195],
[183,164,191,169,132,0,180,188],
[170,162,170,157,170,160,0,173],
[165,151,162,152,145,152,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,145,195,192,195,148,197],
[145,0,194,194,241,148,197,246],
[195,146,0,146,291,99,197,246],
[145,146,194,0,192,148,148,197],
[148,99,49,148,0,99,148,197],
[145,192,241,192,241,0,195,293],
[192,143,143,192,192,145,0,197],
[143,94,94,143,143,47,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,171,170,85,170,86,171],
[170,0,86,171,86,85,170,86],
[169,254,0,170,84,254,255,169],
[170,169,170,0,170,169,170,170],
[255,254,256,170,0,170,255,256],
[170,255,86,171,170,0,170,86],
[254,170,85,170,85,170,0,85],
[169,254,171,170,84,254,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,154,185,149,143,153,161],
[163,0,162,203,189,141,176,149],
[186,178,0,191,187,144,178,169],
[155,137,149,0,158,127,140,130],
[191,151,153,182,0,153,150,147],
[197,199,196,213,187,0,168,169],
[187,164,162,200,190,172,0,176],
[179,191,171,210,193,171,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,155,171,172,178,181,160],
[183,0,179,180,188,170,176,186],
[185,161,0,185,180,175,188,191],
[169,160,155,0,154,158,176,173],
[168,152,160,186,0,161,165,164],
[162,170,165,182,179,0,173,171],
[159,164,152,164,175,167,0,169],
[180,154,149,167,176,169,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,170,186,158,159,188,164],
[190,0,164,180,189,170,179,164],
[170,176,0,160,156,156,180,173],
[154,160,180,0,171,154,163,156],
[182,151,184,169,0,165,186,175],
[181,170,184,186,175,0,198,167],
[152,161,160,177,154,142,0,165],
[176,176,167,184,165,173,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,178,171,175,175,166,180],
[174,0,188,168,173,178,175,185],
[162,152,0,150,148,162,154,164],
[169,172,190,0,175,170,190,187],
[165,167,192,165,0,178,164,165],
[165,162,178,170,162,0,173,176],
[174,165,186,150,176,167,0,155],
[160,155,176,153,175,164,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,139,140,133,149,158,134],
[176,0,156,168,145,164,167,154],
[201,184,0,187,182,164,180,171],
[200,172,153,0,153,167,173,162],
[207,195,158,187,0,174,176,154],
[191,176,176,173,166,0,182,167],
[182,173,160,167,164,158,0,149],
[206,186,169,178,186,173,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,124,123,125,64,96,123],
[215,0,124,122,214,157,157,248],
[216,216,0,183,216,186,157,245],
[217,218,157,0,219,220,188,248],
[215,126,124,121,0,125,127,216],
[276,183,154,120,215,0,126,154],
[244,183,183,152,213,214,0,214],
[217,92,95,92,124,186,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,187,168,174,186,178,174],
[158,0,166,161,161,167,153,168],
[153,174,0,159,167,171,166,162],
[172,179,181,0,168,187,169,171],
[166,179,173,172,0,179,182,167],
[154,173,169,153,161,0,160,166],
[162,187,174,171,158,180,0,169],
[166,172,178,169,173,174,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,174,159,168,172,177,163],
[184,0,170,173,170,184,178,165],
[166,170,0,143,162,161,163,148],
[181,167,197,0,177,179,174,173],
[172,170,178,163,0,177,168,162],
[168,156,179,161,163,0,174,171],
[163,162,177,166,172,166,0,166],
[177,175,192,167,178,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,132,237,212,262,208,235],
[156,0,180,209,158,232,207,232],
[208,160,0,262,187,233,234,262],
[103,131,78,0,132,206,207,156],
[128,182,153,208,0,179,233,205],
[78,108,107,134,161,0,131,129],
[132,133,106,133,107,209,0,156],
[105,108,78,184,135,211,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,163,154,157,164,166,168],
[178,0,185,165,174,183,173,188],
[177,155,0,165,144,178,157,168],
[186,175,175,0,168,175,183,183],
[183,166,196,172,0,183,169,183],
[176,157,162,165,157,0,168,176],
[174,167,183,157,171,172,0,185],
[172,152,172,157,157,164,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,167,165,168,186,188,181],
[165,0,170,178,162,168,190,179],
[173,170,0,184,177,181,172,182],
[175,162,156,0,158,171,179,170],
[172,178,163,182,0,189,188,183],
[154,172,159,169,151,0,168,166],
[152,150,168,161,152,172,0,176],
[159,161,158,170,157,174,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,163,180,160,163,178,153],
[170,0,168,165,170,167,180,156],
[177,172,0,183,163,169,197,156],
[160,175,157,0,166,176,178,151],
[180,170,177,174,0,181,179,171],
[177,173,171,164,159,0,168,159],
[162,160,143,162,161,172,0,149],
[187,184,184,189,169,181,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,197,186,186,161,192,177],
[171,0,173,174,172,160,175,172],
[143,167,0,167,160,162,162,160],
[154,166,173,0,192,166,191,174],
[154,168,180,148,0,165,176,170],
[179,180,178,174,175,0,195,167],
[148,165,178,149,164,145,0,143],
[163,168,180,166,170,173,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,139,179,152,157,162,158],
[162,0,154,161,159,146,150,172],
[201,186,0,162,174,172,169,157],
[161,179,178,0,175,171,160,162],
[188,181,166,165,0,175,157,163],
[183,194,168,169,165,0,173,161],
[178,190,171,180,183,167,0,189],
[182,168,183,178,177,179,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,195,178,199,170,192,182],
[171,0,169,160,180,189,179,172],
[145,171,0,143,190,174,170,164],
[162,180,197,0,200,178,189,175],
[141,160,150,140,0,157,155,164],
[170,151,166,162,183,0,189,163],
[148,161,170,151,185,151,0,154],
[158,168,176,165,176,177,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,184,164,169,177,169,168],
[165,0,167,174,166,175,184,171],
[156,173,0,165,164,173,169,168],
[176,166,175,0,177,174,173,171],
[171,174,176,163,0,159,161,161],
[163,165,167,166,181,0,166,161],
[171,156,171,167,179,174,0,170],
[172,169,172,169,179,179,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,169,173,176,168,181,164],
[161,0,162,174,173,179,171,166],
[171,178,0,173,166,161,163,164],
[167,166,167,0,183,174,167,175],
[164,167,174,157,0,160,143,144],
[172,161,179,166,180,0,185,172],
[159,169,177,173,197,155,0,166],
[176,174,176,165,196,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,153,162,128,173,135,135],
[152,0,154,160,155,155,162,169],
[187,186,0,179,153,181,154,161],
[178,180,161,0,163,165,136,162],
[212,185,187,177,0,214,152,166],
[167,185,159,175,126,0,159,200],
[205,178,186,204,188,181,0,160],
[205,171,179,178,174,140,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,104,212,156,159,133,156],
[157,0,131,183,129,157,132,156],
[236,209,0,185,131,184,183,156],
[128,157,155,0,102,80,184,154],
[184,211,209,238,0,157,184,184],
[181,183,156,260,183,0,183,155],
[207,208,157,156,156,157,0,155],
[184,184,184,186,156,185,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,170,264,205,245,242,248],
[97,0,114,245,149,152,168,191],
[170,226,0,225,148,169,185,210],
[76,95,115,0,109,58,168,153],
[135,191,192,231,0,172,226,212],
[95,188,171,282,168,0,206,172],
[98,172,155,172,114,134,0,155],
[92,149,130,187,128,168,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,169,158,172,177,185,170],
[170,0,171,161,163,176,187,169],
[171,169,0,156,167,172,183,164],
[182,179,184,0,172,176,186,166],
[168,177,173,168,0,181,172,178],
[163,164,168,164,159,0,168,185],
[155,153,157,154,168,172,0,174],
[170,171,176,174,162,155,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,171,167,175,158,152,156],
[183,0,160,143,175,170,163,158],
[169,180,0,176,180,170,160,170],
[173,197,164,0,172,179,174,181],
[165,165,160,168,0,158,174,159],
[182,170,170,161,182,0,165,166],
[188,177,180,166,166,175,0,165],
[184,182,170,159,181,174,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,176,188,187,171,169,166],
[164,0,168,182,185,160,180,184],
[164,172,0,174,174,164,182,172],
[152,158,166,0,173,171,159,170],
[153,155,166,167,0,171,174,176],
[169,180,176,169,169,0,173,173],
[171,160,158,181,166,167,0,169],
[174,156,168,170,164,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,150,178,161,165,153,155],
[172,0,154,149,150,166,164,160],
[190,186,0,181,169,172,185,179],
[162,191,159,0,160,185,158,165],
[179,190,171,180,0,175,161,169],
[175,174,168,155,165,0,154,177],
[187,176,155,182,179,186,0,165],
[185,180,161,175,171,163,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,196,184,174,199,172,155],
[168,0,173,145,158,176,175,135],
[144,167,0,169,163,158,168,145],
[156,195,171,0,170,161,168,149],
[166,182,177,170,0,180,153,153],
[141,164,182,179,160,0,155,160],
[168,165,172,172,187,185,0,175],
[185,205,195,191,187,180,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,161,165,158,166,162,175],
[178,0,169,182,158,167,152,172],
[179,171,0,165,174,175,163,181],
[175,158,175,0,180,160,170,181],
[182,182,166,160,0,152,142,149],
[174,173,165,180,188,0,164,172],
[178,188,177,170,198,176,0,175],
[165,168,159,159,191,168,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,152,167,191,155,163,155],
[192,0,192,172,210,167,165,176],
[188,148,0,165,177,170,157,166],
[173,168,175,0,224,138,183,175],
[149,130,163,116,0,129,140,158],
[185,173,170,202,211,0,179,177],
[177,175,183,157,200,161,0,171],
[185,164,174,165,182,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,150,157,152,160,161,171],
[196,0,169,188,178,180,192,176],
[190,171,0,177,168,168,185,182],
[183,152,163,0,161,169,172,168],
[188,162,172,179,0,165,169,168],
[180,160,172,171,175,0,172,175],
[179,148,155,168,171,168,0,171],
[169,164,158,172,172,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,164,181,160,157,153,173],
[166,0,152,163,155,169,143,161],
[176,188,0,164,160,170,174,178],
[159,177,176,0,165,168,157,162],
[180,185,180,175,0,180,165,186],
[183,171,170,172,160,0,160,182],
[187,197,166,183,175,180,0,182],
[167,179,162,178,154,158,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,182,137,153,110,186,185],
[175,0,143,124,150,133,160,156],
[158,197,0,161,131,128,202,196],
[203,216,179,0,171,155,210,224],
[187,190,209,169,0,187,204,211],
[230,207,212,185,153,0,205,221],
[154,180,138,130,136,135,0,157],
[155,184,144,116,129,119,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,151,167,128,167,123,172],
[207,0,174,193,191,179,140,211],
[189,166,0,155,176,164,137,177],
[173,147,185,0,172,181,170,194],
[212,149,164,168,0,167,102,185],
[173,161,176,159,173,0,138,216],
[217,200,203,170,238,202,0,215],
[168,129,163,146,155,124,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,178,176,171,167,158,179],
[186,0,171,167,178,155,165,160],
[162,169,0,162,156,176,170,172],
[164,173,178,0,168,172,172,167],
[169,162,184,172,0,168,170,177],
[173,185,164,168,172,0,171,172],
[182,175,170,168,170,169,0,176],
[161,180,168,173,163,168,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,194,165,187,164,190,186],
[111,0,141,157,192,143,174,179],
[146,199,0,139,158,167,181,177],
[175,183,201,0,208,167,146,174],
[153,148,182,132,0,141,173,165],
[176,197,173,173,199,0,188,165],
[150,166,159,194,167,152,0,184],
[154,161,163,166,175,175,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,155,150,148,157,150,156],
[187,0,170,172,165,165,169,174],
[185,170,0,163,167,175,179,170],
[190,168,177,0,157,172,171,157],
[192,175,173,183,0,166,174,181],
[183,175,165,168,174,0,172,175],
[190,171,161,169,166,168,0,179],
[184,166,170,183,159,165,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,163,178,196,197,172,192],
[170,0,140,182,181,176,161,156],
[177,200,0,190,207,180,155,181],
[162,158,150,0,152,157,151,148],
[144,159,133,188,0,168,142,168],
[143,164,160,183,172,0,134,154],
[168,179,185,189,198,206,0,171],
[148,184,159,192,172,186,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,179,186,182,165,170,163],
[153,0,174,168,151,156,156,146],
[161,166,0,172,168,150,167,164],
[154,172,168,0,160,160,162,148],
[158,189,172,180,0,161,178,164],
[175,184,190,180,179,0,165,173],
[170,184,173,178,162,175,0,172],
[177,194,176,192,176,167,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,184,169,162,172,163,154],
[165,0,186,175,170,166,184,169],
[156,154,0,172,152,172,170,173],
[171,165,168,0,150,169,171,168],
[178,170,188,190,0,172,171,183],
[168,174,168,171,168,0,157,161],
[177,156,170,169,169,183,0,176],
[186,171,167,172,157,179,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,165,159,173,144,160,154],
[186,0,177,169,195,175,204,188],
[175,163,0,147,152,169,166,187],
[181,171,193,0,174,150,180,172],
[167,145,188,166,0,160,174,167],
[196,165,171,190,180,0,178,177],
[180,136,174,160,166,162,0,160],
[186,152,153,168,173,163,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,169,197,174,171,185,180],
[159,0,172,175,167,154,177,158],
[171,168,0,163,150,139,182,153],
[143,165,177,0,166,133,162,162],
[166,173,190,174,0,156,192,161],
[169,186,201,207,184,0,201,185],
[155,163,158,178,148,139,0,160],
[160,182,187,178,179,155,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,136,142,172,146,142,156],
[200,0,170,166,175,178,190,174],
[204,170,0,144,202,166,157,165],
[198,174,196,0,192,195,157,175],
[168,165,138,148,0,159,161,168],
[194,162,174,145,181,0,163,178],
[198,150,183,183,179,177,0,163],
[184,166,175,165,172,162,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,176,171,171,170,186,173],
[161,0,172,169,160,164,174,181],
[164,168,0,184,165,167,166,168],
[169,171,156,0,179,157,167,171],
[169,180,175,161,0,176,200,149],
[170,176,173,183,164,0,177,168],
[154,166,174,173,140,163,0,161],
[167,159,172,169,191,172,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,169,178,166,182,163,162],
[167,0,155,179,156,174,171,168],
[171,185,0,173,168,182,171,178],
[162,161,167,0,164,176,160,155],
[174,184,172,176,0,179,159,170],
[158,166,158,164,161,0,160,161],
[177,169,169,180,181,180,0,166],
[178,172,162,185,170,179,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,177,178,176,169,168,171],
[182,0,189,164,182,173,168,178],
[163,151,0,161,169,162,161,168],
[162,176,179,0,166,168,168,182],
[164,158,171,174,0,169,180,166],
[171,167,178,172,171,0,173,186],
[172,172,179,172,160,167,0,181],
[169,162,172,158,174,154,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,176,164,180,190,167,172],
[151,0,176,159,168,169,155,165],
[164,164,0,161,171,165,176,149],
[176,181,179,0,171,183,182,163],
[160,172,169,169,0,167,164,173],
[150,171,175,157,173,0,156,170],
[173,185,164,158,176,184,0,175],
[168,175,191,177,167,170,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,188,163,170,170,175,191],
[175,0,182,169,173,178,177,188],
[152,158,0,155,125,134,145,167],
[177,171,185,0,157,147,162,177],
[170,167,215,183,0,177,156,158],
[170,162,206,193,163,0,177,166],
[165,163,195,178,184,163,0,175],
[149,152,173,163,182,174,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,179,168,155,160,147,160],
[176,0,159,172,156,164,157,156],
[161,181,0,170,164,171,154,170],
[172,168,170,0,157,157,168,170],
[185,184,176,183,0,181,170,175],
[180,176,169,183,159,0,158,175],
[193,183,186,172,170,182,0,179],
[180,184,170,170,165,165,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,171,190,191,183,192,176],
[172,0,170,172,185,189,186,171],
[169,170,0,163,172,177,176,176],
[150,168,177,0,169,163,161,154],
[149,155,168,171,0,179,179,165],
[157,151,163,177,161,0,158,169],
[148,154,164,179,161,182,0,172],
[164,169,164,186,175,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,161,144,169,152,157,150],
[177,0,168,162,165,161,176,161],
[179,172,0,156,162,173,183,162],
[196,178,184,0,170,177,183,182],
[171,175,178,170,0,179,187,174],
[188,179,167,163,161,0,178,172],
[183,164,157,157,153,162,0,163],
[190,179,178,158,166,168,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,174,219,199,168,181,196],
[144,0,172,192,166,181,146,160],
[166,168,0,197,184,174,169,170],
[121,148,143,0,147,167,152,168],
[141,174,156,193,0,167,162,173],
[172,159,166,173,173,0,164,159],
[159,194,171,188,178,176,0,170],
[144,180,170,172,167,181,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,176,170,175,191,177,179],
[162,0,167,154,160,170,157,160],
[164,173,0,165,154,173,163,162],
[170,186,175,0,154,184,186,180],
[165,180,186,186,0,173,170,170],
[149,170,167,156,167,0,153,158],
[163,183,177,154,170,187,0,172],
[161,180,178,160,170,182,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,175,167,163,155,167,176],
[164,0,175,165,173,148,184,152],
[165,165,0,164,184,171,173,158],
[173,175,176,0,171,156,176,170],
[177,167,156,169,0,155,164,167],
[185,192,169,184,185,0,184,166],
[173,156,167,164,176,156,0,160],
[164,188,182,170,173,174,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,140,199,156,127,158,170],
[186,0,155,229,212,156,158,144],
[200,185,0,228,158,170,200,155],
[141,111,112,0,126,111,156,126],
[184,128,182,214,0,156,183,183],
[213,184,170,229,184,0,171,169],
[182,182,140,184,157,169,0,140],
[170,196,185,214,157,171,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,182,166,166,177,168,160],
[172,0,178,172,176,179,158,158],
[158,162,0,155,155,165,156,166],
[174,168,185,0,176,188,162,181],
[174,164,185,164,0,169,164,159],
[163,161,175,152,171,0,169,141],
[172,182,184,178,176,171,0,167],
[180,182,174,159,181,199,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,195,183,170,169,180,156],
[165,0,164,175,160,192,162,153],
[145,176,0,136,139,165,157,144],
[157,165,204,0,163,197,183,172],
[170,180,201,177,0,200,176,161],
[171,148,175,143,140,0,178,162],
[160,178,183,157,164,162,0,153],
[184,187,196,168,179,178,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,161,185,155,162,176,176],
[171,0,175,161,152,149,174,168],
[179,165,0,176,166,161,187,180],
[155,179,164,0,150,157,183,169],
[185,188,174,190,0,163,198,177],
[178,191,179,183,177,0,204,161],
[164,166,153,157,142,136,0,153],
[164,172,160,171,163,179,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,182,169,183,178,166,180],
[168,0,172,172,184,177,184,174],
[158,168,0,166,181,172,167,183],
[171,168,174,0,173,172,172,167],
[157,156,159,167,0,179,162,166],
[162,163,168,168,161,0,167,162],
[174,156,173,168,178,173,0,171],
[160,166,157,173,174,178,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,154,156,152,153,164,154],
[177,0,166,159,171,169,182,171],
[186,174,0,167,156,166,167,173],
[184,181,173,0,176,184,192,170],
[188,169,184,164,0,173,187,173],
[187,171,174,156,167,0,174,165],
[176,158,173,148,153,166,0,150],
[186,169,167,170,167,175,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,175,145,183,165,170,150],
[184,0,179,169,194,167,176,183],
[165,161,0,172,180,169,169,168],
[195,171,168,0,187,184,181,174],
[157,146,160,153,0,154,149,159],
[175,173,171,156,186,0,158,177],
[170,164,171,159,191,182,0,173],
[190,157,172,166,181,163,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,173,173,166,172,171,163],
[132,0,168,157,180,166,148,131],
[167,172,0,208,177,190,150,169],
[167,183,132,0,189,161,158,125],
[174,160,163,151,0,166,162,156],
[168,174,150,179,174,0,161,151],
[169,192,190,182,178,179,0,193],
[177,209,171,215,184,189,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,171,193,172,180,191,166],
[163,0,166,184,150,190,181,169],
[169,174,0,153,179,195,193,175],
[147,156,187,0,170,180,167,155],
[168,190,161,170,0,188,168,169],
[160,150,145,160,152,0,173,162],
[149,159,147,173,172,167,0,159],
[174,171,165,185,171,178,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,184,191,152,194,172,175],
[138,0,179,184,154,172,174,147],
[156,161,0,192,137,170,180,172],
[149,156,148,0,139,142,153,173],
[188,186,203,201,0,169,191,193],
[146,168,170,198,171,0,189,185],
[168,166,160,187,149,151,0,134],
[165,193,168,167,147,155,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,155,159,177,163,175,168],
[190,0,165,174,189,171,178,178],
[185,175,0,168,200,182,182,164],
[181,166,172,0,177,170,172,169],
[163,151,140,163,0,154,162,160],
[177,169,158,170,186,0,168,170],
[165,162,158,168,178,172,0,161],
[172,162,176,171,180,170,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,167,150,154,149,178,164],
[185,0,181,168,176,178,199,206],
[173,159,0,171,171,171,169,188],
[190,172,169,0,183,187,182,193],
[186,164,169,157,0,176,156,191],
[191,162,169,153,164,0,188,190],
[162,141,171,158,184,152,0,195],
[176,134,152,147,149,150,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,176,170,173,178,170,180],
[167,0,164,164,162,166,175,164],
[164,176,0,170,148,175,173,161],
[170,176,170,0,172,180,177,171],
[167,178,192,168,0,197,168,178],
[162,174,165,160,143,0,165,148],
[170,165,167,163,172,175,0,178],
[160,176,179,169,162,192,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,179,188,178,184,169,184],
[157,0,177,156,179,174,163,168],
[161,163,0,164,172,153,144,163],
[152,184,176,0,177,164,172,168],
[162,161,168,163,0,167,164,168],
[156,166,187,176,173,0,167,166],
[171,177,196,168,176,173,0,173],
[156,172,177,172,172,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,192,186,166,164,183,165],
[187,0,191,198,187,169,179,182],
[148,149,0,153,156,151,137,152],
[154,142,187,0,149,178,152,171],
[174,153,184,191,0,163,177,151],
[176,171,189,162,177,0,166,148],
[157,161,203,188,163,174,0,157],
[175,158,188,169,189,192,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,161,179,158,176,170,159],
[172,0,154,168,177,152,153,160],
[179,186,0,184,180,182,145,144],
[161,172,156,0,170,148,157,144],
[182,163,160,170,0,166,160,169],
[164,188,158,192,174,0,154,160],
[170,187,195,183,180,186,0,176],
[181,180,196,196,171,180,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,174,174,184,172,182,168],
[159,0,161,176,164,170,163,172],
[166,179,0,163,162,179,171,169],
[166,164,177,0,161,174,171,175],
[156,176,178,179,0,173,181,176],
[168,170,161,166,167,0,170,170],
[158,177,169,169,159,170,0,178],
[172,168,171,165,164,170,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,175,162,178,179,178,173],
[173,0,156,150,174,174,178,173],
[165,184,0,191,184,187,186,190],
[178,190,149,0,189,190,176,189],
[162,166,156,151,0,166,175,174],
[161,166,153,150,174,0,165,164],
[162,162,154,164,165,175,0,174],
[167,167,150,151,166,176,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,170,173,150,153,151,140],
[180,0,213,172,162,157,169,179],
[170,127,0,153,147,121,134,138],
[167,168,187,0,207,191,172,134],
[190,178,193,133,0,174,141,161],
[187,183,219,149,166,0,169,154],
[189,171,206,168,199,171,0,144],
[200,161,202,206,179,186,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,159,163,162,159,164,169],
[170,0,170,164,158,170,159,165],
[181,170,0,182,164,172,176,176],
[177,176,158,0,163,165,157,173],
[178,182,176,177,0,167,149,186],
[181,170,168,175,173,0,157,179],
[176,181,164,183,191,183,0,188],
[171,175,164,167,154,161,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,173,164,161,150,195,153],
[183,0,160,188,176,162,196,182],
[167,180,0,180,189,167,197,190],
[176,152,160,0,174,159,175,153],
[179,164,151,166,0,165,160,142],
[190,178,173,181,175,0,190,155],
[145,144,143,165,180,150,0,147],
[187,158,150,187,198,185,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,166,154,203,175,163,175],
[192,0,170,131,191,141,186,157],
[174,170,0,175,178,186,174,166],
[186,209,165,0,188,234,199,200],
[137,149,162,152,0,196,197,139],
[165,199,154,106,144,0,152,145],
[177,154,166,141,143,188,0,141],
[165,183,174,140,201,195,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,162,177,189,165,169,179],
[149,0,172,168,163,153,169,180],
[178,168,0,166,172,175,169,169],
[163,172,174,0,177,173,181,201],
[151,177,168,163,0,183,153,179],
[175,187,165,167,157,0,176,184],
[171,171,171,159,187,164,0,189],
[161,160,171,139,161,156,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,159,136,129,152,149,162],
[171,0,196,159,162,168,166,179],
[181,144,0,147,161,143,159,170],
[204,181,193,0,158,178,182,193],
[211,178,179,182,0,177,167,177],
[188,172,197,162,163,0,170,207],
[191,174,181,158,173,170,0,180],
[178,161,170,147,163,133,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,175,162,165,156,188,158],
[194,0,208,176,165,179,191,187],
[165,132,0,173,131,139,159,160],
[178,164,167,0,182,151,190,174],
[175,175,209,158,0,187,190,175],
[184,161,201,189,153,0,192,181],
[152,149,181,150,150,148,0,165],
[182,153,180,166,165,159,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,157,159,176,174,178,163],
[176,0,171,157,185,169,174,177],
[183,169,0,165,155,172,174,166],
[181,183,175,0,170,175,175,168],
[164,155,185,170,0,167,188,168],
[166,171,168,165,173,0,175,173],
[162,166,166,165,152,165,0,182],
[177,163,174,172,172,167,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,180,167,169,170,179,171],
[157,0,150,169,152,165,159,177],
[160,190,0,174,169,176,168,162],
[173,171,166,0,164,171,181,171],
[171,188,171,176,0,166,173,187],
[170,175,164,169,174,0,182,171],
[161,181,172,159,167,158,0,178],
[169,163,178,169,153,169,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,185,193,194,191,166,181],
[153,0,186,175,183,179,180,177],
[155,154,0,171,176,168,161,170],
[147,165,169,0,169,152,155,163],
[146,157,164,171,0,157,158,168],
[149,161,172,188,183,0,172,164],
[174,160,179,185,182,168,0,174],
[159,163,170,177,172,176,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,170,186,191,178,176,181],
[147,0,173,180,182,164,170,153],
[170,167,0,165,168,146,162,158],
[154,160,175,0,173,143,165,166],
[149,158,172,167,0,138,160,140],
[162,176,194,197,202,0,177,171],
[164,170,178,175,180,163,0,161],
[159,187,182,174,200,169,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,168,170,183,188,160,172],
[171,0,187,176,152,170,168,181],
[172,153,0,161,165,170,168,185],
[170,164,179,0,168,158,154,178],
[157,188,175,172,0,168,173,174],
[152,170,170,182,172,0,178,172],
[180,172,172,186,167,162,0,180],
[168,159,155,162,166,168,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,185,195,164,183,179,173],
[133,0,180,158,180,192,192,187],
[155,160,0,155,155,165,178,166],
[145,182,185,0,190,176,199,189],
[176,160,185,150,0,184,187,181],
[157,148,175,164,156,0,191,183],
[161,148,162,141,153,149,0,168],
[167,153,174,151,159,157,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,170,203,184,174,211,187],
[153,0,155,195,176,148,163,149],
[170,185,0,232,206,190,205,190],
[137,145,108,0,141,118,138,111],
[156,164,134,199,0,158,163,142],
[166,192,150,222,182,0,199,180],
[129,177,135,202,177,141,0,172],
[153,191,150,229,198,160,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,156,145,169,171,161,153],
[162,0,157,150,165,168,172,171],
[184,183,0,150,170,146,166,174],
[195,190,190,0,186,167,154,156],
[171,175,170,154,0,143,144,148],
[169,172,194,173,197,0,199,181],
[179,168,174,186,196,141,0,169],
[187,169,166,184,192,159,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,87,171,169,127,87,213],
[210,0,84,254,254,84,126,213],
[253,256,0,213,253,211,129,213],
[169,86,127,0,212,127,87,171],
[171,86,87,128,0,127,87,213],
[213,256,129,213,213,0,215,255],
[253,214,211,253,253,125,0,211],
[127,127,127,169,127,85,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,161,167,171,187,167,169],
[177,0,163,181,162,189,159,167],
[179,177,0,196,168,184,180,167],
[173,159,144,0,153,166,162,161],
[169,178,172,187,0,176,181,174],
[153,151,156,174,164,0,163,150],
[173,181,160,178,159,177,0,165],
[171,173,173,179,166,190,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,152,160,164,141,161,152],
[181,0,174,192,167,174,163,168],
[188,166,0,178,187,173,179,170],
[180,148,162,0,166,158,168,168],
[176,173,153,174,0,167,173,170],
[199,166,167,182,173,0,160,171],
[179,177,161,172,167,180,0,166],
[188,172,170,172,170,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,131,156,161,141,121,169],
[232,0,168,210,191,194,186,215],
[209,172,0,176,193,183,163,197],
[184,130,164,0,179,161,142,185],
[179,149,147,161,0,187,150,182],
[199,146,157,179,153,0,171,166],
[219,154,177,198,190,169,0,181],
[171,125,143,155,158,174,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,178,168,172,173,173,181],
[166,0,173,171,164,182,156,171],
[162,167,0,156,159,167,164,173],
[172,169,184,0,156,180,171,168],
[168,176,181,184,0,174,175,174],
[167,158,173,160,166,0,150,173],
[167,184,176,169,165,190,0,177],
[159,169,167,172,166,167,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,184,145,183,179,168,166],
[145,0,146,136,179,174,165,160],
[156,194,0,175,199,144,164,160],
[195,204,165,0,187,186,177,158],
[157,161,141,153,0,156,173,162],
[161,166,196,154,184,0,185,174],
[172,175,176,163,167,155,0,144],
[174,180,180,182,178,166,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,190,156,173,174,195,153],
[154,0,165,158,168,170,176,170],
[150,175,0,154,164,182,177,139],
[184,182,186,0,191,170,202,165],
[167,172,176,149,0,166,194,169],
[166,170,158,170,174,0,180,169],
[145,164,163,138,146,160,0,139],
[187,170,201,175,171,171,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,168,179,173,172,180,167],
[173,0,174,173,182,166,166,164],
[172,166,0,181,177,171,171,159],
[161,167,159,0,166,158,172,161],
[167,158,163,174,0,152,173,156],
[168,174,169,182,188,0,173,169],
[160,174,169,168,167,167,0,177],
[173,176,181,179,184,171,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,119,162,219,181,176,208],
[164,0,173,186,196,244,187,163],
[221,167,0,243,251,234,168,218],
[178,154,97,0,219,194,155,185],
[121,144,89,121,0,125,144,153],
[159,96,106,146,215,0,139,160],
[164,153,172,185,196,201,0,163],
[132,177,122,155,187,180,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,166,170,153,173,168,176],
[170,0,162,161,153,164,178,172],
[174,178,0,175,168,169,167,165],
[170,179,165,0,171,182,177,181],
[187,187,172,169,0,186,183,173],
[167,176,171,158,154,0,169,165],
[172,162,173,163,157,171,0,167],
[164,168,175,159,167,175,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,141,171,162,160,170,163],
[166,0,161,132,162,147,147,138],
[199,179,0,159,161,151,158,186],
[169,208,181,0,201,158,166,183],
[178,178,179,139,0,163,158,175],
[180,193,189,182,177,0,162,171],
[170,193,182,174,182,178,0,184],
[177,202,154,157,165,169,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,167,199,168,176,195,148],
[205,0,184,208,163,168,201,161],
[173,156,0,209,154,169,180,183],
[141,132,131,0,141,100,148,141],
[172,177,186,199,0,170,189,180],
[164,172,171,240,170,0,160,163],
[145,139,160,192,151,180,0,173],
[192,179,157,199,160,177,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,155,166,169,151,170,162],
[173,0,194,171,165,175,171,159],
[185,146,0,175,178,170,181,167],
[174,169,165,0,176,167,163,155],
[171,175,162,164,0,163,182,159],
[189,165,170,173,177,0,182,182],
[170,169,159,177,158,158,0,162],
[178,181,173,185,181,158,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,156,138,155,177,136,138],
[185,0,163,168,190,190,155,171],
[184,177,0,185,191,166,170,167],
[202,172,155,0,201,172,156,165],
[185,150,149,139,0,154,131,145],
[163,150,174,168,186,0,145,159],
[204,185,170,184,209,195,0,182],
[202,169,173,175,195,181,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,181,156,171,167,185,170],
[165,0,170,178,170,194,187,178],
[159,170,0,164,161,156,178,166],
[184,162,176,0,178,166,183,181],
[169,170,179,162,0,170,175,164],
[173,146,184,174,170,0,164,185],
[155,153,162,157,165,176,0,162],
[170,162,174,159,176,155,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,211,178,178,206,176],
[181,0,162,208,171,175,188,162],
[177,178,0,226,140,193,156,155],
[129,132,114,0,142,164,138,140],
[162,169,200,198,0,175,188,168],
[162,165,147,176,165,0,172,160],
[134,152,184,202,152,168,0,173],
[164,178,185,200,172,180,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,216,209,221,197,154,186],
[151,0,182,150,161,120,157,164],
[124,158,0,118,169,147,139,171],
[131,190,222,0,184,128,109,151],
[119,179,171,156,0,112,177,170],
[143,220,193,212,228,0,190,193],
[186,183,201,231,163,150,0,174],
[154,176,169,189,170,147,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,170,150,180,168,167,172],
[171,0,152,171,160,166,148,177],
[170,188,0,164,176,186,180,172],
[190,169,176,0,184,199,186,178],
[160,180,164,156,0,190,169,170],
[172,174,154,141,150,0,141,167],
[173,192,160,154,171,199,0,190],
[168,163,168,162,170,173,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,167,216,198,174,170,200],
[189,0,182,204,191,190,163,195],
[173,158,0,191,189,152,167,159],
[124,136,149,0,163,127,139,162],
[142,149,151,177,0,158,142,169],
[166,150,188,213,182,0,191,206],
[170,177,173,201,198,149,0,183],
[140,145,181,178,171,134,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,185,172,169,172,152,159],
[195,0,170,195,165,169,172,164],
[155,170,0,159,163,156,168,158],
[168,145,181,0,151,150,161,160],
[171,175,177,189,0,171,169,166],
[168,171,184,190,169,0,181,177],
[188,168,172,179,171,159,0,165],
[181,176,182,180,174,163,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,152,170,174,167,161,183],
[169,0,161,158,171,161,162,174],
[188,179,0,183,177,177,170,190],
[170,182,157,0,175,156,171,179],
[166,169,163,165,0,154,159,176],
[173,179,163,184,186,0,174,186],
[179,178,170,169,181,166,0,174],
[157,166,150,161,164,154,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,170,185,200,165,152,152],
[165,0,152,143,190,191,172,164],
[170,188,0,185,174,121,172,156],
[155,197,155,0,190,184,170,155],
[140,150,166,150,0,153,153,137],
[175,149,219,156,187,0,145,182],
[188,168,168,170,187,195,0,177],
[188,176,184,185,203,158,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,180,215,215,178,199,196],
[194,0,145,177,199,157,160,139],
[160,195,0,246,232,196,178,157],
[125,163,94,0,182,143,129,71],
[125,141,108,158,0,142,143,107],
[162,183,144,197,198,0,128,143],
[141,180,162,211,197,212,0,142],
[144,201,183,269,233,197,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,165,164,165,167,168],
[171,0,166,163,158,177,169,178],
[174,174,0,156,164,182,173,162],
[175,177,184,0,179,186,172,158],
[176,182,176,161,0,173,169,172],
[175,163,158,154,167,0,165,159],
[173,171,167,168,171,175,0,165],
[172,162,178,182,168,181,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,188,160,173,137,177,146],
[184,0,183,196,170,178,201,194],
[152,157,0,158,150,141,171,135],
[180,144,182,0,184,186,183,193],
[167,170,190,156,0,148,193,176],
[203,162,199,154,192,0,185,171],
[163,139,169,157,147,155,0,156],
[194,146,205,147,164,169,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,167,159,209,202,199,185],
[177,0,168,141,210,165,201,153],
[173,172,0,148,176,188,152,152],
[181,199,192,0,215,216,215,157],
[131,130,164,125,0,166,131,139],
[138,175,152,124,174,0,174,138],
[141,139,188,125,209,166,0,165],
[155,187,188,183,201,202,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,154,162,170,213,182,190],
[158,0,157,169,171,181,181,192],
[186,183,0,190,163,204,175,201],
[178,171,150,0,175,184,171,201],
[170,169,177,165,0,196,194,176],
[127,159,136,156,144,0,164,165],
[158,159,165,169,146,176,0,190],
[150,148,139,139,164,175,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,157,192,198,188,194,193],
[135,0,170,161,151,156,188,148],
[183,170,0,163,161,154,182,160],
[148,179,177,0,138,175,179,157],
[142,189,179,202,0,181,193,189],
[152,184,186,165,159,0,203,174],
[146,152,158,161,147,137,0,161],
[147,192,180,183,151,166,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,165,177,169,179,163,172],
[161,0,164,167,161,174,154,181],
[175,176,0,169,171,165,160,185],
[163,173,171,0,155,189,164,179],
[171,179,169,185,0,174,170,167],
[161,166,175,151,166,0,154,166],
[177,186,180,176,170,186,0,184],
[168,159,155,161,173,174,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,146,157,164,164,170,169],
[174,0,159,163,160,153,177,174],
[194,181,0,179,162,173,186,188],
[183,177,161,0,177,181,186,175],
[176,180,178,163,0,176,185,189],
[176,187,167,159,164,0,192,160],
[170,163,154,154,155,148,0,158],
[171,166,152,165,151,180,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,187,177,182,177,194,194],
[180,0,183,191,183,185,168,182],
[153,157,0,163,150,158,162,169],
[163,149,177,0,174,163,166,186],
[158,157,190,166,0,151,166,170],
[163,155,182,177,189,0,175,179],
[146,172,178,174,174,165,0,167],
[146,158,171,154,170,161,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,165,158,172,177,169,162],
[187,0,176,173,177,180,182,168],
[175,164,0,159,168,174,154,168],
[182,167,181,0,171,171,173,171],
[168,163,172,169,0,182,176,161],
[163,160,166,169,158,0,158,161],
[171,158,186,167,164,182,0,161],
[178,172,172,169,179,179,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,171,175,151,166,173,168],
[167,0,167,164,170,172,165,178],
[169,173,0,177,173,166,181,163],
[165,176,163,0,159,165,171,177],
[189,170,167,181,0,175,175,171],
[174,168,174,175,165,0,168,172],
[167,175,159,169,165,172,0,172],
[172,162,177,163,169,168,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,164,182,168,172,189,186],
[144,0,161,154,147,154,150,159],
[176,179,0,171,162,166,187,184],
[158,186,169,0,183,170,178,173],
[172,193,178,157,0,187,179,182],
[168,186,174,170,153,0,184,186],
[151,190,153,162,161,156,0,169],
[154,181,156,167,158,154,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,158,150,145,151,152,155],
[187,0,170,179,149,171,168,164],
[182,170,0,181,166,161,170,158],
[190,161,159,0,160,167,164,156],
[195,191,174,180,0,166,186,185],
[189,169,179,173,174,0,192,156],
[188,172,170,176,154,148,0,161],
[185,176,182,184,155,184,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,195,180,150,151,163,187],
[150,0,198,143,157,179,176,188],
[145,142,0,157,157,168,167,174],
[160,197,183,0,159,180,177,201],
[190,183,183,181,0,157,192,206],
[189,161,172,160,183,0,182,186],
[177,164,173,163,148,158,0,172],
[153,152,166,139,134,154,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,145,166,120,151,200,164],
[206,0,187,171,151,186,200,164],
[195,153,0,178,170,147,177,180],
[174,169,162,0,153,178,193,168],
[220,189,170,187,0,183,195,193],
[189,154,193,162,157,0,174,178],
[140,140,163,147,145,166,0,173],
[176,176,160,172,147,162,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,164,169,183,153,186,162],
[173,0,170,170,181,194,172,167],
[176,170,0,176,191,183,183,181],
[171,170,164,0,191,184,183,160],
[157,159,149,149,0,159,167,158],
[187,146,157,156,181,0,158,161],
[154,168,157,157,173,182,0,159],
[178,173,159,180,182,179,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,340,340,170,340,170,170],
[0,0,170,0,170,170,0,0],
[0,170,0,170,170,340,170,170],
[0,340,170,0,170,340,0,0],
[170,170,170,170,0,170,170,170],
[0,170,0,0,170,0,0,0],
[170,340,170,340,170,340,0,0],
[170,340,170,340,170,340,340,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,177,174,170,186,183,186],
[155,0,151,161,140,173,160,170],
[163,189,0,169,166,185,176,190],
[166,179,171,0,168,179,186,186],
[170,200,174,172,0,202,188,192],
[154,167,155,161,138,0,169,175],
[157,180,164,154,152,171,0,175],
[154,170,150,154,148,165,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,206,133,185,156,168,136],
[152,0,190,210,246,135,186,155],
[134,150,0,134,228,116,152,99],
[207,130,206,0,242,173,204,174],
[155,94,112,98,0,80,92,80],
[184,205,224,167,260,0,205,175],
[172,154,188,136,248,135,0,99],
[204,185,241,166,260,165,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,155,156,162,168,142,146],
[190,0,164,187,189,161,174,136],
[185,176,0,156,182,156,160,139],
[184,153,184,0,190,168,145,160],
[178,151,158,150,0,156,139,154],
[172,179,184,172,184,0,154,190],
[198,166,180,195,201,186,0,176],
[194,204,201,180,186,150,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,146,155,164,168,164,175],
[173,0,151,180,170,188,153,170],
[194,189,0,164,187,188,165,189],
[185,160,176,0,186,198,170,183],
[176,170,153,154,0,179,153,150],
[172,152,152,142,161,0,166,159],
[176,187,175,170,187,174,0,184],
[165,170,151,157,190,181,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,178,170,179,195,195,175],
[164,0,188,174,165,172,175,169],
[162,152,0,176,157,169,173,170],
[170,166,164,0,162,164,169,155],
[161,175,183,178,0,161,178,164],
[145,168,171,176,179,0,173,155],
[145,165,167,171,162,167,0,164],
[165,171,170,185,176,185,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,164,173,156,183,156,189],
[162,0,160,171,178,136,158,141],
[176,180,0,171,164,159,185,166],
[167,169,169,0,148,179,172,143],
[184,162,176,192,0,164,171,155],
[157,204,181,161,176,0,151,175],
[184,182,155,168,169,189,0,160],
[151,199,174,197,185,165,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,160,179,173,170,185,170],
[154,0,170,163,159,161,166,164],
[180,170,0,186,174,172,185,168],
[161,177,154,0,181,156,174,159],
[167,181,166,159,0,171,173,174],
[170,179,168,184,169,0,176,162],
[155,174,155,166,167,164,0,151],
[170,176,172,181,166,178,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,155,155,164,143,154,149],
[177,0,175,182,173,169,179,170],
[185,165,0,168,160,146,173,144],
[185,158,172,0,163,150,173,156],
[176,167,180,177,0,168,177,152],
[197,171,194,190,172,0,185,153],
[186,161,167,167,163,155,0,133],
[191,170,196,184,188,187,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,175,178,170,170,172,180],
[174,0,174,160,165,175,181,182],
[165,166,0,165,159,160,170,170],
[162,180,175,0,174,172,173,190],
[170,175,181,166,0,180,175,176],
[170,165,180,168,160,0,176,172],
[168,159,170,167,165,164,0,172],
[160,158,170,150,164,168,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,164,167,166,168,175,166],
[161,0,160,165,161,148,183,155],
[176,180,0,165,175,158,171,150],
[173,175,175,0,153,161,179,191],
[174,179,165,187,0,189,187,159],
[172,192,182,179,151,0,193,184],
[165,157,169,161,153,147,0,141],
[174,185,190,149,181,156,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,184,187,174,164,166,186],
[176,0,162,166,170,155,169,174],
[156,178,0,185,169,184,185,190],
[153,174,155,0,155,153,151,168],
[166,170,171,185,0,175,169,189],
[176,185,156,187,165,0,168,185],
[174,171,155,189,171,172,0,159],
[154,166,150,172,151,155,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,187,182,172,176,170,175],
[182,0,181,192,165,177,169,166],
[153,159,0,176,168,169,155,172],
[158,148,164,0,155,158,146,178],
[168,175,172,185,0,170,165,174],
[164,163,171,182,170,0,151,161],
[170,171,185,194,175,189,0,176],
[165,174,168,162,166,179,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,174,173,183,169,172,171],
[171,0,166,166,186,177,189,171],
[166,174,0,168,166,163,183,168],
[167,174,172,0,175,177,170,148],
[157,154,174,165,0,178,185,168],
[171,163,177,163,162,0,182,166],
[168,151,157,170,155,158,0,157],
[169,169,172,192,172,174,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,164,164,172,175,166,177],
[199,0,185,159,175,191,164,188],
[176,155,0,160,173,168,164,168],
[176,181,180,0,171,168,182,181],
[168,165,167,169,0,156,184,185],
[165,149,172,172,184,0,153,169],
[174,176,176,158,156,187,0,180],
[163,152,172,159,155,171,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,142,175,152,156,152,165],
[179,0,150,159,175,148,165,169],
[198,190,0,188,172,180,165,182],
[165,181,152,0,150,156,150,170],
[188,165,168,190,0,168,165,150],
[184,192,160,184,172,0,171,168],
[188,175,175,190,175,169,0,172],
[175,171,158,170,190,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,216,162,184,174,196,153],
[127,0,141,96,194,150,149,157],
[124,199,0,108,150,160,129,124],
[178,244,232,0,172,203,205,169],
[156,146,190,168,0,131,154,127],
[166,190,180,137,209,0,181,149],
[144,191,211,135,186,159,0,191],
[187,183,216,171,213,191,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,175,175,178,179,205,168],
[165,0,171,157,175,165,172,168],
[165,169,0,167,163,172,174,174],
[165,183,173,0,191,166,181,192],
[162,165,177,149,0,170,178,187],
[161,175,168,174,170,0,171,197],
[135,168,166,159,162,169,0,172],
[172,172,166,148,153,143,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,113,0,114,227,0,114],
[340,0,113,0,340,227,113,227],
[227,227,0,227,227,227,227,114],
[340,340,113,0,340,227,226,227],
[226,0,113,0,0,113,0,0],
[113,113,113,113,227,0,113,114],
[340,227,113,114,340,227,0,227],
[226,113,226,113,340,226,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,168,159,174,162,183,183],
[160,0,171,156,187,171,149,170],
[172,169,0,174,177,169,192,177],
[181,184,166,0,187,179,176,184],
[166,153,163,153,0,162,159,143],
[178,169,171,161,178,0,174,164],
[157,191,148,164,181,166,0,183],
[157,170,163,156,197,176,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,199,161,202,207,200,193],
[142,0,175,186,182,210,209,184],
[141,165,0,156,166,182,162,169],
[179,154,184,0,176,201,168,165],
[138,158,174,164,0,186,173,167],
[133,130,158,139,154,0,139,167],
[140,131,178,172,167,201,0,171],
[147,156,171,175,173,173,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,159,163,159,187,156,161],
[187,0,166,175,176,173,174,177],
[181,174,0,163,178,177,169,168],
[177,165,177,0,176,164,162,177],
[181,164,162,164,0,169,146,176],
[153,167,163,176,171,0,172,173],
[184,166,171,178,194,168,0,178],
[179,163,172,163,164,167,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,157,140,232,178,104,121],
[129,0,199,141,216,181,124,147],
[183,141,0,161,214,177,162,197],
[200,199,179,0,235,161,180,199],
[108,124,126,105,0,160,105,109],
[162,159,163,179,180,0,107,199],
[236,216,178,160,235,233,0,178],
[219,193,143,141,231,141,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,176,163,152,176,176,177],
[170,0,170,169,156,209,168,184],
[164,170,0,145,161,192,161,199],
[177,171,195,0,196,210,157,181],
[188,184,179,144,0,197,178,205],
[164,131,148,130,143,0,154,168],
[164,172,179,183,162,186,0,180],
[163,156,141,159,135,172,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,178,179,182,161,165,172],
[163,0,189,178,180,169,166,184],
[162,151,0,157,171,168,159,147],
[161,162,183,0,180,172,159,169],
[158,160,169,160,0,170,156,160],
[179,171,172,168,170,0,154,174],
[175,174,181,181,184,186,0,167],
[168,156,193,171,180,166,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,170,156,152,159,174,183],
[173,0,167,171,170,155,183,181],
[170,173,0,155,161,169,173,181],
[184,169,185,0,163,169,162,189],
[188,170,179,177,0,166,176,189],
[181,185,171,171,174,0,172,170],
[166,157,167,178,164,168,0,173],
[157,159,159,151,151,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,173,173,169,165,180,160],
[173,0,181,160,169,184,188,172],
[167,159,0,161,148,163,156,146],
[167,180,179,0,184,190,194,175],
[171,171,192,156,0,165,169,163],
[175,156,177,150,175,0,174,144],
[160,152,184,146,171,166,0,159],
[180,168,194,165,177,196,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,185,167,183,180,170,167],
[176,0,179,188,175,161,174,173],
[155,161,0,155,173,172,161,158],
[173,152,185,0,178,168,178,174],
[157,165,167,162,0,175,172,150],
[160,179,168,172,165,0,182,166],
[170,166,179,162,168,158,0,170],
[173,167,182,166,190,174,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,157,169,168,168,143,176],
[172,0,148,186,175,158,159,158],
[183,192,0,185,174,183,161,171],
[171,154,155,0,181,154,149,167],
[172,165,166,159,0,182,148,154],
[172,182,157,186,158,0,170,175],
[197,181,179,191,192,170,0,186],
[164,182,169,173,186,165,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,177,168,173,177,171,172],
[173,0,165,162,173,177,178,169],
[163,175,0,170,172,184,172,174],
[172,178,170,0,177,191,160,178],
[167,167,168,163,0,175,183,171],
[163,163,156,149,165,0,161,156],
[169,162,168,180,157,179,0,172],
[168,171,166,162,169,184,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,159,158,171,172,166,171],
[170,0,165,149,156,165,149,163],
[181,175,0,170,187,190,175,181],
[182,191,170,0,184,179,170,190],
[169,184,153,156,0,178,155,179],
[168,175,150,161,162,0,159,170],
[174,191,165,170,185,181,0,177],
[169,177,159,150,161,170,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,178,169,185,185,173],
[169,0,172,174,185,193,170,186],
[167,168,0,187,166,197,167,192],
[162,166,153,0,179,184,150,170],
[171,155,174,161,0,185,167,166],
[155,147,143,156,155,0,149,157],
[155,170,173,190,173,191,0,171],
[167,154,148,170,174,183,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,151,141,189,178,137,135],
[221,0,182,179,210,176,149,163],
[189,158,0,168,193,191,198,177],
[199,161,172,0,224,162,138,136],
[151,130,147,116,0,119,128,139],
[162,164,149,178,221,0,127,127],
[203,191,142,202,212,213,0,187],
[205,177,163,204,201,213,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,143,110,226,141,142,143],
[197,0,198,139,226,110,196,111],
[197,142,0,139,227,138,169,111],
[230,201,201,0,286,144,229,200],
[114,114,113,54,0,141,143,56],
[199,230,202,196,199,0,171,143],
[198,144,171,111,197,169,0,113],
[197,229,229,140,284,197,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,170,159,179,158,167,180],
[173,0,152,175,182,162,183,167],
[170,188,0,174,197,174,188,190],
[181,165,166,0,194,176,185,190],
[161,158,143,146,0,145,161,168],
[182,178,166,164,195,0,175,173],
[173,157,152,155,179,165,0,162],
[160,173,150,150,172,167,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,183,158,172,153,186,212],
[142,0,161,157,179,137,171,172],
[157,179,0,150,173,163,164,167],
[182,183,190,0,188,154,186,177],
[168,161,167,152,0,175,169,175],
[187,203,177,186,165,0,184,182],
[154,169,176,154,171,156,0,163],
[128,168,173,163,165,158,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,198,202,114,171,227,199],
[224,0,227,284,256,169,170,226],
[142,113,0,113,172,116,114,140],
[138,56,227,0,143,141,169,172],
[226,84,168,197,0,114,141,115],
[169,171,224,199,226,0,173,170],
[113,170,226,171,199,167,0,198],
[141,114,200,168,225,170,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,176,162,193,152,161,148],
[187,0,150,183,204,190,160,180],
[164,190,0,185,179,175,164,177],
[178,157,155,0,174,169,146,160],
[147,136,161,166,0,164,160,151],
[188,150,165,171,176,0,168,176],
[179,180,176,194,180,172,0,161],
[192,160,163,180,189,164,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,170,161,164,173,169,162],
[180,0,184,172,161,179,179,165],
[170,156,0,172,156,162,162,166],
[179,168,168,0,173,183,178,176],
[176,179,184,167,0,186,172,172],
[167,161,178,157,154,0,182,161],
[171,161,178,162,168,158,0,167],
[178,175,174,164,168,179,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,167,163,158,149,160,179],
[179,0,154,161,178,166,177,186],
[173,186,0,165,181,175,190,218],
[177,179,175,0,188,168,175,188],
[182,162,159,152,0,159,175,165],
[191,174,165,172,181,0,176,182],
[180,163,150,165,165,164,0,183],
[161,154,122,152,175,158,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,166,181,176,161,171,179],
[175,0,179,175,185,167,176,176],
[174,161,0,177,180,170,173,181],
[159,165,163,0,175,163,176,167],
[164,155,160,165,0,165,170,165],
[179,173,170,177,175,0,187,178],
[169,164,167,164,170,153,0,158],
[161,164,159,173,175,162,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,183,183,185,165,177,172],
[170,0,183,174,184,175,184,175],
[157,157,0,155,161,161,166,158],
[157,166,185,0,173,178,168,168],
[155,156,179,167,0,161,168,159],
[175,165,179,162,179,0,181,171],
[163,156,174,172,172,159,0,158],
[168,165,182,172,181,169,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,168,163,167,174,158,172],
[170,0,172,176,167,177,162,173],
[172,168,0,173,172,171,162,174],
[177,164,167,0,171,178,166,183],
[173,173,168,169,0,162,174,174],
[166,163,169,162,178,0,168,169],
[182,178,178,174,166,172,0,177],
[168,167,166,157,166,171,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,166,177,160,176,178,178],
[156,0,155,161,143,150,160,163],
[174,185,0,178,179,163,176,185],
[163,179,162,0,161,161,155,166],
[180,197,161,179,0,166,167,175],
[164,190,177,179,174,0,174,175],
[162,180,164,185,173,166,0,178],
[162,177,155,174,165,165,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,153,179,175,178,177,170],
[159,0,146,169,173,170,161,167],
[187,194,0,187,170,177,191,182],
[161,171,153,0,173,161,151,162],
[165,167,170,167,0,165,167,167],
[162,170,163,179,175,0,160,167],
[163,179,149,189,173,180,0,168],
[170,173,158,178,173,173,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,181,189,178,183,178,186],
[172,0,168,172,179,160,164,161],
[159,172,0,178,186,163,172,168],
[151,168,162,0,186,167,149,162],
[162,161,154,154,0,152,144,160],
[157,180,177,173,188,0,165,158],
[162,176,168,191,196,175,0,169],
[154,179,172,178,180,182,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,154,154,156,152,178,177],
[176,0,171,179,183,170,185,183],
[186,169,0,189,184,168,178,178],
[186,161,151,0,167,176,180,181],
[184,157,156,173,0,167,160,178],
[188,170,172,164,173,0,177,184],
[162,155,162,160,180,163,0,174],
[163,157,162,159,162,156,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,152,164,192,163,180,172],
[172,0,183,160,182,184,168,162],
[188,157,0,175,196,171,177,167],
[176,180,165,0,176,183,176,194],
[148,158,144,164,0,159,172,160],
[177,156,169,157,181,0,175,169],
[160,172,163,164,168,165,0,167],
[168,178,173,146,180,171,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,166,186,177,149,175,168],
[176,0,164,179,174,158,180,175],
[174,176,0,182,167,175,184,177],
[154,161,158,0,154,141,173,153],
[163,166,173,186,0,177,193,176],
[191,182,165,199,163,0,204,185],
[165,160,156,167,147,136,0,172],
[172,165,163,187,164,155,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,175,170,181,194,185,190],
[175,0,189,180,174,160,197,180],
[165,151,0,175,165,166,164,165],
[170,160,165,0,180,182,176,170],
[159,166,175,160,0,165,182,172],
[146,180,174,158,175,0,193,173],
[155,143,176,164,158,147,0,167],
[150,160,175,170,168,167,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,178,188,171,168,168,171],
[173,0,167,180,168,165,163,159],
[162,173,0,180,162,171,165,169],
[152,160,160,0,168,151,157,162],
[169,172,178,172,0,169,175,166],
[172,175,169,189,171,0,160,158],
[172,177,175,183,165,180,0,171],
[169,181,171,178,174,182,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,144,147,159,143,159,149],
[176,0,145,157,156,150,165,135],
[196,195,0,190,187,186,185,167],
[193,183,150,0,183,168,181,174],
[181,184,153,157,0,159,167,130],
[197,190,154,172,181,0,172,171],
[181,175,155,159,173,168,0,160],
[191,205,173,166,210,169,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,187,229,196,199,212,166],
[157,0,161,186,154,229,186,186],
[153,179,0,209,119,210,227,167],
[111,154,131,0,153,185,155,96],
[144,186,221,187,0,203,200,160],
[141,111,130,155,137,0,185,170],
[128,154,113,185,140,155,0,113],
[174,154,173,244,180,170,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,170,185,180,175,183,177],
[176,0,155,178,169,164,183,178],
[170,185,0,186,190,181,194,184],
[155,162,154,0,178,166,178,164],
[160,171,150,162,0,147,170,164],
[165,176,159,174,193,0,193,172],
[157,157,146,162,170,147,0,165],
[163,162,156,176,176,168,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,186,189,163,200,174,190],
[161,0,160,163,145,145,163,141],
[154,180,0,174,154,163,170,143],
[151,177,166,0,137,159,152,140],
[177,195,186,203,0,160,188,178],
[140,195,177,181,180,0,186,155],
[166,177,170,188,152,154,0,178],
[150,199,197,200,162,185,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,171,162,168,178,191,171],
[161,0,157,163,169,158,174,165],
[169,183,0,169,157,171,177,150],
[178,177,171,0,159,167,162,166],
[172,171,183,181,0,180,185,166],
[162,182,169,173,160,0,168,158],
[149,166,163,178,155,172,0,161],
[169,175,190,174,174,182,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,169,125,163,149,135,146],
[177,0,181,161,201,173,170,146],
[171,159,0,131,154,164,125,107],
[215,179,209,0,196,149,150,180],
[177,139,186,144,0,142,150,144],
[191,167,176,191,198,0,167,132],
[205,170,215,190,190,173,0,177],
[194,194,233,160,196,208,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,176,193,168,162,151,151],
[162,0,165,188,165,176,190,149],
[164,175,0,181,174,179,177,147],
[147,152,159,0,165,180,179,155],
[172,175,166,175,0,165,162,175],
[178,164,161,160,175,0,161,142],
[189,150,163,161,178,179,0,157],
[189,191,193,185,165,198,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,158,161,129,150,171,172],
[179,0,173,186,177,179,182,167],
[182,167,0,187,161,171,187,155],
[179,154,153,0,165,154,163,157],
[211,163,179,175,0,187,181,154],
[190,161,169,186,153,0,172,157],
[169,158,153,177,159,168,0,152],
[168,173,185,183,186,183,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,162,168,154,174,157,156],
[173,0,178,169,173,184,162,173],
[178,162,0,173,184,186,163,159],
[172,171,167,0,163,169,158,150],
[186,167,156,177,0,176,174,160],
[166,156,154,171,164,0,172,141],
[183,178,177,182,166,168,0,181],
[184,167,181,190,180,199,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,176,187,155,148,179,142],
[189,0,198,177,184,165,191,184],
[164,142,0,176,167,160,178,152],
[153,163,164,0,139,168,168,151],
[185,156,173,201,0,174,160,162],
[192,175,180,172,166,0,182,151],
[161,149,162,172,180,158,0,139],
[198,156,188,189,178,189,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,168,138,137,170,146,150],
[184,0,183,163,169,129,135,127],
[172,157,0,172,147,126,127,128],
[202,177,168,0,201,141,157,136],
[203,171,193,139,0,151,148,138],
[170,211,214,199,189,0,149,193],
[194,205,213,183,192,191,0,150],
[190,213,212,204,202,147,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,162,168,158,147,175,142],
[163,0,161,162,171,145,170,136],
[178,179,0,169,169,171,172,149],
[172,178,171,0,181,181,160,159],
[182,169,171,159,0,175,192,174],
[193,195,169,159,165,0,152,148],
[165,170,168,180,148,188,0,152],
[198,204,191,181,166,192,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,213,182,153,125,155,212],
[156,0,248,185,155,156,249,218],
[127,92,0,184,95,125,92,125],
[158,155,156,0,125,189,158,188],
[187,185,245,215,0,155,216,185],
[215,184,215,151,185,0,185,215],
[185,91,248,182,124,155,0,216],
[128,122,215,152,155,125,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,180,178,174,176,170,182],
[144,0,164,171,141,142,148,158],
[160,176,0,163,158,155,158,147],
[162,169,177,0,171,144,160,164],
[166,199,182,169,0,169,170,165],
[164,198,185,196,171,0,181,169],
[170,192,182,180,170,159,0,166],
[158,182,193,176,175,171,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,136,155,154,196,198,201],
[171,0,136,123,121,160,187,200],
[204,204,0,161,193,187,203,182],
[185,217,179,0,170,189,210,205],
[186,219,147,170,0,195,191,193],
[144,180,153,151,145,0,180,192],
[142,153,137,130,149,160,0,187],
[139,140,158,135,147,148,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,174,179,193,183,162,196],
[150,0,166,153,177,151,152,192],
[166,174,0,151,194,181,160,182],
[161,187,189,0,196,177,175,183],
[147,163,146,144,0,147,142,175],
[157,189,159,163,193,0,177,187],
[178,188,180,165,198,163,0,191],
[144,148,158,157,165,153,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,164,166,164,169,174,191],
[186,0,188,159,152,174,194,200],
[176,152,0,172,167,156,209,176],
[174,181,168,0,164,187,227,212],
[176,188,173,176,0,157,181,197],
[171,166,184,153,183,0,191,195],
[166,146,131,113,159,149,0,152],
[149,140,164,128,143,145,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,180,174,178,172,194,154],
[169,0,179,165,177,187,182,171],
[160,161,0,163,185,166,180,170],
[166,175,177,0,177,169,186,171],
[162,163,155,163,0,170,181,172],
[168,153,174,171,170,0,182,163],
[146,158,160,154,159,158,0,154],
[186,169,170,169,168,177,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,154,156,160,164,164],
[169,0,180,159,200,172,152,176],
[169,160,0,161,174,158,149,160],
[186,181,179,0,189,160,156,166],
[184,140,166,151,0,154,154,164],
[180,168,182,180,186,0,174,148],
[176,188,191,184,186,166,0,176],
[176,164,180,174,176,192,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,168,177,188,181,170,180],
[182,0,169,192,176,184,175,174],
[172,171,0,200,173,182,175,167],
[163,148,140,0,173,166,167,169],
[152,164,167,167,0,171,170,174],
[159,156,158,174,169,0,174,165],
[170,165,165,173,170,166,0,175],
[160,166,173,171,166,175,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,162,142,222,143,143,181],
[197,0,161,159,239,180,119,261],
[178,179,0,120,257,198,122,199],
[198,181,220,0,240,181,161,242],
[118,101,83,100,0,99,102,162],
[197,160,142,159,241,0,181,221],
[197,221,218,179,238,159,0,241],
[159,79,141,98,178,119,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,186,168,181,174,189,189],
[170,0,168,168,209,154,177,178],
[154,172,0,169,187,177,177,197],
[172,172,171,0,181,160,169,184],
[159,131,153,159,0,145,158,175],
[166,186,163,180,195,0,177,195],
[151,163,163,171,182,163,0,180],
[151,162,143,156,165,145,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,190,200,168,186,161,167],
[171,0,167,202,175,174,159,173],
[150,173,0,216,193,176,157,202],
[140,138,124,0,147,154,138,138],
[172,165,147,193,0,165,159,165],
[154,166,164,186,175,0,183,186],
[179,181,183,202,181,157,0,187],
[173,167,138,202,175,154,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,169,177,176,194,183,172],
[176,0,178,187,160,181,174,171],
[171,162,0,176,170,186,162,170],
[163,153,164,0,181,187,165,164],
[164,180,170,159,0,170,166,181],
[146,159,154,153,170,0,154,166],
[157,166,178,175,174,186,0,180],
[168,169,170,176,159,174,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,164,165,179,163,170,176],
[176,0,170,174,179,161,189,181],
[176,170,0,178,193,174,183,197],
[175,166,162,0,184,168,174,185],
[161,161,147,156,0,152,153,169],
[177,179,166,172,188,0,170,178],
[170,151,157,166,187,170,0,178],
[164,159,143,155,171,162,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,176,176,188,167,172,164],
[153,0,159,172,173,159,164,163],
[164,181,0,165,203,154,185,174],
[164,168,175,0,203,164,150,142],
[152,167,137,137,0,135,174,159],
[173,181,186,176,205,0,186,163],
[168,176,155,190,166,154,0,155],
[176,177,166,198,181,177,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,178,180,190,180,191,169],
[163,0,153,161,177,154,170,154],
[162,187,0,152,178,168,184,170],
[160,179,188,0,167,170,186,172],
[150,163,162,173,0,160,177,167],
[160,186,172,170,180,0,190,165],
[149,170,156,154,163,150,0,140],
[171,186,170,168,173,175,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,170,164,164,170,184],
[173,0,168,176,163,157,170,190],
[173,172,0,173,160,157,165,167],
[170,164,167,0,164,166,166,187],
[176,177,180,176,0,160,177,191],
[176,183,183,174,180,0,167,190],
[170,170,175,174,163,173,0,187],
[156,150,173,153,149,150,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,174,202,140,179,198,167],
[196,0,173,178,154,168,207,141],
[166,167,0,194,154,152,175,165],
[138,162,146,0,155,137,153,143],
[200,186,186,185,0,199,241,168],
[161,172,188,203,141,0,217,172],
[142,133,165,187,99,123,0,160],
[173,199,175,197,172,168,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,194,184,174,194,174,178],
[174,0,158,166,169,183,171,163],
[146,182,0,160,171,177,161,167],
[156,174,180,0,150,165,170,174],
[166,171,169,190,0,168,182,173],
[146,157,163,175,172,0,170,150],
[166,169,179,170,158,170,0,163],
[162,177,173,166,167,190,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,184,182,195,165,186,174],
[155,0,169,177,166,150,154,166],
[156,171,0,167,162,159,158,154],
[158,163,173,0,171,160,164,175],
[145,174,178,169,0,150,141,162],
[175,190,181,180,190,0,169,178],
[154,186,182,176,199,171,0,171],
[166,174,186,165,178,162,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,174,160,162,162,165,177],
[181,0,179,165,176,169,175,177],
[166,161,0,160,161,165,168,172],
[180,175,180,0,179,163,186,185],
[178,164,179,161,0,161,166,170],
[178,171,175,177,179,0,169,179],
[175,165,172,154,174,171,0,165],
[163,163,168,155,170,161,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,178,174,158,207,181,203],
[163,0,153,177,168,178,164,178],
[162,187,0,179,173,176,166,175],
[166,163,161,0,169,194,171,160],
[182,172,167,171,0,191,179,184],
[133,162,164,146,149,0,169,147],
[159,176,174,169,161,171,0,184],
[137,162,165,180,156,193,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,177,196,170,199,180,186],
[165,0,179,192,168,193,159,183],
[163,161,0,178,147,186,168,180],
[144,148,162,0,144,159,156,170],
[170,172,193,196,0,186,176,181],
[141,147,154,181,154,0,155,156],
[160,181,172,184,164,185,0,181],
[154,157,160,170,159,184,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,157,157,161,163,184,156],
[171,0,171,159,154,174,187,162],
[183,169,0,163,174,167,186,182],
[183,181,177,0,172,174,182,170],
[179,186,166,168,0,172,191,178],
[177,166,173,166,168,0,170,178],
[156,153,154,158,149,170,0,148],
[184,178,158,170,162,162,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,189,178,164,198,170,150],
[161,0,159,151,158,177,154,131],
[151,181,0,165,166,175,158,170],
[162,189,175,0,156,172,165,162],
[176,182,174,184,0,183,156,163],
[142,163,165,168,157,0,150,146],
[170,186,182,175,184,190,0,157],
[190,209,170,178,177,194,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,186,167,171,199,170,190],
[159,0,187,153,159,183,156,171],
[154,153,0,146,148,157,140,169],
[173,187,194,0,179,202,163,193],
[169,181,192,161,0,182,152,188],
[141,157,183,138,158,0,133,173],
[170,184,200,177,188,207,0,194],
[150,169,171,147,152,167,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,138,158,139,181,169,135],
[171,0,155,152,145,174,173,142],
[202,185,0,161,160,178,183,162],
[182,188,179,0,179,206,170,171],
[201,195,180,161,0,188,187,162],
[159,166,162,134,152,0,165,122],
[171,167,157,170,153,175,0,167],
[205,198,178,169,178,218,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,159,165,178,172,166,182],
[154,0,156,163,184,178,149,155],
[181,184,0,179,203,162,172,174],
[175,177,161,0,172,178,162,168],
[162,156,137,168,0,162,136,173],
[168,162,178,162,178,0,136,160],
[174,191,168,178,204,204,0,181],
[158,185,166,172,167,180,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,143,151,165,181,178,166],
[194,0,176,172,183,188,166,198],
[197,164,0,162,188,178,180,186],
[189,168,178,0,176,181,175,174],
[175,157,152,164,0,197,166,170],
[159,152,162,159,143,0,158,159],
[162,174,160,165,174,182,0,164],
[174,142,154,166,170,181,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,153,163,174,170,172,172],
[191,0,170,176,173,173,182,179],
[187,170,0,190,174,181,186,197],
[177,164,150,0,165,186,176,164],
[166,167,166,175,0,178,158,174],
[170,167,159,154,162,0,161,174],
[168,158,154,164,182,179,0,187],
[168,161,143,176,166,166,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,125,132,126,172,118,119],
[157,0,138,160,99,148,140,127],
[215,202,0,167,184,220,214,185],
[208,180,173,0,153,182,173,199],
[214,241,156,187,0,201,161,134],
[168,192,120,158,139,0,142,147],
[222,200,126,167,179,198,0,125],
[221,213,155,141,206,193,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,156,173,184,143,155,161],
[175,0,154,155,166,136,154,147],
[184,186,0,173,189,161,169,155],
[167,185,167,0,184,141,156,167],
[156,174,151,156,0,138,175,145],
[197,204,179,199,202,0,180,168],
[185,186,171,184,165,160,0,170],
[179,193,185,173,195,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,199,147,149,172,221,243],
[119,0,172,118,120,73,96,169],
[141,168,0,117,119,118,142,240],
[193,222,223,0,121,170,171,244],
[191,220,221,219,0,144,194,219],
[168,267,222,170,196,0,219,195],
[119,244,198,169,146,121,0,171],
[97,171,100,96,121,145,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,178,164,189,168,174,173],
[177,0,179,162,174,153,168,181],
[162,161,0,163,169,163,173,186],
[176,178,177,0,187,169,165,183],
[151,166,171,153,0,154,161,168],
[172,187,177,171,186,0,165,191],
[166,172,167,175,179,175,0,180],
[167,159,154,157,172,149,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,187,170,210,191,181,201],
[166,0,156,156,167,156,154,162],
[153,184,0,174,180,178,154,152],
[170,184,166,0,208,158,150,176],
[130,173,160,132,0,149,154,133],
[149,184,162,182,191,0,167,168],
[159,186,186,190,186,173,0,191],
[139,178,188,164,207,172,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,180,180,163,162,156,185],
[176,0,169,193,188,167,173,176],
[160,171,0,174,188,156,177,175],
[160,147,166,0,175,171,166,167],
[177,152,152,165,0,170,168,163],
[178,173,184,169,170,0,150,168],
[184,167,163,174,172,190,0,156],
[155,164,165,173,177,172,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,160,195,193,176,176,171],
[168,0,155,166,182,175,165,155],
[180,185,0,177,193,168,167,187],
[145,174,163,0,178,168,156,148],
[147,158,147,162,0,154,157,161],
[164,165,172,172,186,0,162,175],
[164,175,173,184,183,178,0,159],
[169,185,153,192,179,165,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,162,171,165,179,185,169],
[160,0,177,167,161,168,171,161],
[178,163,0,164,186,189,179,174],
[169,173,176,0,169,192,170,165],
[175,179,154,171,0,172,162,152],
[161,172,151,148,168,0,171,167],
[155,169,161,170,178,169,0,157],
[171,179,166,175,188,173,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,169,200,173,181,174,196],
[158,0,167,196,186,169,141,174],
[171,173,0,187,192,158,164,182],
[140,144,153,0,161,147,117,166],
[167,154,148,179,0,183,133,185],
[159,171,182,193,157,0,155,196],
[166,199,176,223,207,185,0,213],
[144,166,158,174,155,144,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,205,215,191,239,178,195],
[174,0,201,227,229,230,176,170],
[135,139,0,215,159,189,119,179],
[125,113,125,0,133,186,119,153],
[149,111,181,207,0,198,151,169],
[101,110,151,154,142,0,125,142],
[162,164,221,221,189,215,0,169],
[145,170,161,187,171,198,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,187,182,177,171,170,175],
[175,0,177,168,163,177,180,177],
[153,163,0,157,151,179,160,167],
[158,172,183,0,180,167,165,167],
[163,177,189,160,0,159,172,166],
[169,163,161,173,181,0,175,168],
[170,160,180,175,168,165,0,161],
[165,163,173,173,174,172,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,184,170,176,186,163,176],
[171,0,178,164,174,183,162,167],
[156,162,0,158,154,175,150,177],
[170,176,182,0,176,186,175,166],
[164,166,186,164,0,168,160,182],
[154,157,165,154,172,0,149,158],
[177,178,190,165,180,191,0,189],
[164,173,163,174,158,182,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,175,186,142,212,189,231],
[143,0,158,147,114,158,174,172],
[165,182,0,170,139,183,185,184],
[154,193,170,0,166,184,217,184],
[198,226,201,174,0,188,159,214],
[128,182,157,156,152,0,159,185],
[151,166,155,123,181,181,0,168],
[109,168,156,156,126,155,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,152,167,181,164,159,162],
[161,0,143,169,159,154,184,161],
[188,197,0,167,190,189,191,201],
[173,171,173,0,162,169,190,163],
[159,181,150,178,0,171,168,160],
[176,186,151,171,169,0,190,195],
[181,156,149,150,172,150,0,178],
[178,179,139,177,180,145,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,164,167,177,166,157,176],
[172,0,169,176,185,186,164,166],
[176,171,0,177,165,175,155,177],
[173,164,163,0,176,166,171,171],
[163,155,175,164,0,165,153,157],
[174,154,165,174,175,0,159,169],
[183,176,185,169,187,181,0,180],
[164,174,163,169,183,171,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,174,192,198,186,178,173],
[177,0,183,172,175,183,184,162],
[166,157,0,153,171,183,159,149],
[148,168,187,0,172,185,167,164],
[142,165,169,168,0,184,162,169],
[154,157,157,155,156,0,157,148],
[162,156,181,173,178,183,0,167],
[167,178,191,176,171,192,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,149,160,166,163,166,163],
[178,0,197,170,183,210,211,186],
[191,143,0,159,166,178,189,185],
[180,170,181,0,204,175,189,194],
[174,157,174,136,0,167,179,169],
[177,130,162,165,173,0,179,196],
[174,129,151,151,161,161,0,162],
[177,154,155,146,171,144,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,155,186,159,148,190,142],
[185,0,176,193,178,159,199,157],
[185,164,0,212,190,166,186,176],
[154,147,128,0,149,144,161,144],
[181,162,150,191,0,165,173,165],
[192,181,174,196,175,0,203,164],
[150,141,154,179,167,137,0,147],
[198,183,164,196,175,176,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,141,162,150,137,144,151],
[208,0,158,165,169,161,136,164],
[199,182,0,197,169,176,185,200],
[178,175,143,0,148,134,165,168],
[190,171,171,192,0,155,175,172],
[203,179,164,206,185,0,173,184],
[196,204,155,175,165,167,0,160],
[189,176,140,172,168,156,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,164,195,177,162,183,187],
[166,0,179,180,177,167,152,187],
[176,161,0,177,167,160,166,171],
[145,160,163,0,147,135,147,175],
[163,163,173,193,0,171,172,179],
[178,173,180,205,169,0,165,178],
[157,188,174,193,168,175,0,188],
[153,153,169,165,161,162,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,184,151,174,155,154,182],
[174,0,180,161,171,163,157,179],
[156,160,0,141,156,154,151,150],
[189,179,199,0,170,178,170,182],
[166,169,184,170,0,161,161,174],
[185,177,186,162,179,0,180,188],
[186,183,189,170,179,160,0,192],
[158,161,190,158,166,152,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,170,143,144,144,266,217],
[149,0,171,169,122,145,196,219],
[170,169,0,73,122,96,148,122],
[197,171,267,0,221,170,198,173],
[196,218,218,119,0,168,244,242],
[196,195,244,170,172,0,221,218],
[74,144,192,142,96,119,0,144],
[123,121,218,167,98,122,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,176,176,159,167,174,177],
[184,0,180,185,164,170,190,187],
[164,160,0,154,143,149,177,167],
[164,155,186,0,158,171,172,178],
[181,176,197,182,0,166,199,191],
[173,170,191,169,174,0,190,186],
[166,150,163,168,141,150,0,174],
[163,153,173,162,149,154,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,171,194,190,168,186,180],
[158,0,140,175,172,144,155,161],
[169,200,0,185,175,189,177,175],
[146,165,155,0,167,167,163,155],
[150,168,165,173,0,159,158,166],
[172,196,151,173,181,0,177,167],
[154,185,163,177,182,163,0,162],
[160,179,165,185,174,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,156,179,175,170,172,166],
[152,0,134,199,145,138,158,152],
[184,206,0,204,186,182,154,190],
[161,141,136,0,176,157,159,138],
[165,195,154,164,0,161,157,175],
[170,202,158,183,179,0,183,192],
[168,182,186,181,183,157,0,181],
[174,188,150,202,165,148,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,166,174,157,163,157,164],
[166,0,167,169,160,160,165,154],
[174,173,0,169,163,175,164,164],
[166,171,171,0,154,173,166,167],
[183,180,177,186,0,170,182,169],
[177,180,165,167,170,0,169,160],
[183,175,176,174,158,171,0,173],
[176,186,176,173,171,180,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,169,170,165,174,162,155],
[176,0,176,177,177,175,164,174],
[171,164,0,194,177,167,171,159],
[170,163,146,0,154,158,153,167],
[175,163,163,186,0,169,167,171],
[166,165,173,182,171,0,169,165],
[178,176,169,187,173,171,0,174],
[185,166,181,173,169,175,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,146,211,163,183,175,166],
[155,0,129,144,124,176,144,149],
[194,211,0,192,190,192,189,170],
[129,196,148,0,130,164,175,162],
[177,216,150,210,0,202,183,165],
[157,164,148,176,138,0,168,132],
[165,196,151,165,157,172,0,140],
[174,191,170,178,175,208,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,171,170,172,180,163,169],
[166,0,149,162,154,155,159,155],
[169,191,0,183,181,186,173,162],
[170,178,157,0,173,179,168,162],
[168,186,159,167,0,169,159,164],
[160,185,154,161,171,0,172,159],
[177,181,167,172,181,168,0,170],
[171,185,178,178,176,181,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,161,150,147,155,149,169],
[173,0,188,161,159,192,153,153],
[179,152,0,154,146,159,168,165],
[190,179,186,0,162,172,178,189],
[193,181,194,178,0,206,200,156],
[185,148,181,168,134,0,176,153],
[191,187,172,162,140,164,0,169],
[171,187,175,151,184,187,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,160,176,182,147,184,158],
[150,0,147,145,189,143,179,144],
[180,193,0,163,182,179,187,173],
[164,195,177,0,188,169,181,150],
[158,151,158,152,0,150,168,165],
[193,197,161,171,190,0,201,173],
[156,161,153,159,172,139,0,142],
[182,196,167,190,175,167,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,160,168,145,179,155,138],
[174,0,174,198,158,197,172,149],
[180,166,0,184,157,190,178,156],
[172,142,156,0,165,187,135,142],
[195,182,183,175,0,219,159,173],
[161,143,150,153,121,0,156,137],
[185,168,162,205,181,184,0,167],
[202,191,184,198,167,203,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,160,159,181,176,172,167],
[166,0,161,170,180,179,173,171],
[180,179,0,167,174,178,165,177],
[181,170,173,0,184,180,176,176],
[159,160,166,156,0,160,153,154],
[164,161,162,160,180,0,146,168],
[168,167,175,164,187,194,0,173],
[173,169,163,164,186,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,158,169,160,159,160,176],
[157,0,158,168,157,148,147,160],
[182,182,0,172,169,162,162,170],
[171,172,168,0,159,154,158,162],
[180,183,171,181,0,157,165,184],
[181,192,178,186,183,0,170,187],
[180,193,178,182,175,170,0,182],
[164,180,170,178,156,153,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,167,222,182,141,169,183],
[155,0,181,221,153,179,169,219],
[173,159,0,234,132,208,160,234],
[118,119,106,0,119,155,105,133],
[158,187,208,221,0,182,221,209],
[199,161,132,185,158,0,173,222],
[171,171,180,235,119,167,0,181],
[157,121,106,207,131,118,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,177,163,190,216,211,199],
[158,0,153,163,195,167,178,200],
[163,187,0,175,171,204,187,209],
[177,177,165,0,169,231,218,192],
[150,145,169,171,0,180,183,175],
[124,173,136,109,160,0,145,186],
[129,162,153,122,157,195,0,171],
[141,140,131,148,165,154,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,201,171,193,170,135,214],
[153,0,180,143,168,200,134,208],
[139,160,0,109,155,159,121,184],
[169,197,231,0,204,205,174,237],
[147,172,185,136,0,180,119,194],
[170,140,181,135,160,0,136,178],
[205,206,219,166,221,204,0,238],
[126,132,156,103,146,162,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,172,173,164,177,185,161],
[167,0,160,156,170,167,170,166],
[168,180,0,160,168,181,183,170],
[167,184,180,0,179,170,181,181],
[176,170,172,161,0,169,171,171],
[163,173,159,170,171,0,174,170],
[155,170,157,159,169,166,0,159],
[179,174,170,159,169,170,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,156,190,162,171,191,198],
[212,0,178,201,164,195,195,201],
[184,162,0,193,146,164,180,181],
[150,139,147,0,125,151,146,161],
[178,176,194,215,0,164,191,198],
[169,145,176,189,176,0,182,204],
[149,145,160,194,149,158,0,178],
[142,139,159,179,142,136,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,179,163,158,175,178,165],
[165,0,168,185,169,177,187,166],
[161,172,0,169,166,176,180,167],
[177,155,171,0,170,182,181,177],
[182,171,174,170,0,187,170,174],
[165,163,164,158,153,0,156,166],
[162,153,160,159,170,184,0,174],
[175,174,173,163,166,174,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,176,177,169,165,176,176],
[170,0,162,171,173,162,185,164],
[164,178,0,178,179,157,170,182],
[163,169,162,0,182,173,172,171],
[171,167,161,158,0,159,166,167],
[175,178,183,167,181,0,181,172],
[164,155,170,168,174,159,0,164],
[164,176,158,169,173,168,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,185,192,148,173,176,175],
[187,0,175,178,165,174,178,178],
[155,165,0,152,161,176,155,168],
[148,162,188,0,182,182,182,197],
[192,175,179,158,0,181,172,174],
[167,166,164,158,159,0,172,165],
[164,162,185,158,168,168,0,169],
[165,162,172,143,166,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,156,169,186,179,202,173],
[170,0,178,163,184,172,181,185],
[184,162,0,163,168,168,177,198],
[171,177,177,0,164,176,189,187],
[154,156,172,176,0,169,164,164],
[161,168,172,164,171,0,195,195],
[138,159,163,151,176,145,0,171],
[167,155,142,153,176,145,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,160,166,180,180,197,173],
[168,0,165,172,173,185,192,173],
[180,175,0,183,172,186,177,169],
[174,168,157,0,158,174,182,156],
[160,167,168,182,0,175,173,168],
[160,155,154,166,165,0,162,156],
[143,148,163,158,167,178,0,149],
[167,167,171,184,172,184,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,194,163,165,180,176,187],
[155,0,194,161,159,152,181,168],
[146,146,0,138,155,156,150,158],
[177,179,202,0,169,171,176,170],
[175,181,185,171,0,167,177,174],
[160,188,184,169,173,0,179,170],
[164,159,190,164,163,161,0,175],
[153,172,182,170,166,170,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,173,176,175,176,172,178],
[179,0,174,184,184,174,167,185],
[167,166,0,170,175,174,166,167],
[164,156,170,0,178,166,179,171],
[165,156,165,162,0,160,163,157],
[164,166,166,174,180,0,181,170],
[168,173,174,161,177,159,0,174],
[162,155,173,169,183,170,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,176,181,176,174,165,179],
[140,0,163,146,154,162,135,147],
[164,177,0,167,158,170,151,156],
[159,194,173,0,192,173,175,173],
[164,186,182,148,0,177,148,163],
[166,178,170,167,163,0,142,175],
[175,205,189,165,192,198,0,172],
[161,193,184,167,177,165,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,203,157,197,184,173,159],
[152,0,176,170,168,175,158,138],
[137,164,0,168,186,164,152,126],
[183,170,172,0,184,175,184,148],
[143,172,154,156,0,169,154,147],
[156,165,176,165,171,0,163,172],
[167,182,188,156,186,177,0,163],
[181,202,214,192,193,168,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,147,193,160,146,113,163],
[213,0,180,165,210,132,148,147],
[193,160,0,194,191,145,177,163],
[147,175,146,0,160,148,131,178],
[180,130,149,180,0,131,131,179],
[194,208,195,192,209,0,145,193],
[227,192,163,209,209,195,0,178],
[177,193,177,162,161,147,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,156,220,186,205,189,155],
[171,0,208,170,171,170,205,154],
[184,132,0,185,148,171,239,151],
[120,170,155,0,155,154,189,169],
[154,169,192,185,0,208,193,173],
[135,170,169,186,132,0,206,135],
[151,135,101,151,147,134,0,151],
[185,186,189,171,167,205,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,163,196,175,184,187,181],
[154,0,163,165,162,171,156,166],
[177,177,0,184,171,176,164,178],
[144,175,156,0,156,165,166,175],
[165,178,169,184,0,179,162,167],
[156,169,164,175,161,0,161,169],
[153,184,176,174,178,179,0,176],
[159,174,162,165,173,171,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,151,154,162,173,155,160],
[178,0,151,156,155,166,170,164],
[189,189,0,186,162,165,184,168],
[186,184,154,0,161,167,187,159],
[178,185,178,179,0,177,181,170],
[167,174,175,173,163,0,183,160],
[185,170,156,153,159,157,0,149],
[180,176,172,181,170,180,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,176,185,184,162,184,178],
[159,0,171,181,190,156,177,162],
[164,169,0,179,171,162,176,151],
[155,159,161,0,172,165,170,173],
[156,150,169,168,0,152,168,150],
[178,184,178,175,188,0,186,162],
[156,163,164,170,172,154,0,155],
[162,178,189,167,190,178,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,179,160,152,160,182,172],
[162,0,172,180,152,177,175,168],
[161,168,0,163,169,164,184,157],
[180,160,177,0,144,155,181,152],
[188,188,171,196,0,175,204,170],
[180,163,176,185,165,0,189,175],
[158,165,156,159,136,151,0,147],
[168,172,183,188,170,165,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,188,161,144,185,162,159],
[158,0,164,145,163,174,151,147],
[152,176,0,150,148,157,131,154],
[179,195,190,0,171,191,170,165],
[196,177,192,169,0,198,169,150],
[155,166,183,149,142,0,144,161],
[178,189,209,170,171,196,0,196],
[181,193,186,175,190,179,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,177,178,174,187,171,187],
[172,0,163,178,179,167,168,174],
[163,177,0,167,167,169,170,186],
[162,162,173,0,181,178,164,176],
[166,161,173,159,0,174,163,165],
[153,173,171,162,166,0,159,167],
[169,172,170,176,177,181,0,176],
[153,166,154,164,175,173,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,175,175,168,184,185,177],
[160,0,154,179,155,174,176,164],
[165,186,0,185,173,184,177,168],
[165,161,155,0,160,170,167,171],
[172,185,167,180,0,172,184,169],
[156,166,156,170,168,0,169,160],
[155,164,163,173,156,171,0,163],
[163,176,172,169,171,180,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,177,174,184,153,158,153],
[152,0,176,162,152,160,183,149],
[163,164,0,147,159,174,170,133],
[166,178,193,0,166,162,156,141],
[156,188,181,174,0,183,188,142],
[187,180,166,178,157,0,183,175],
[182,157,170,184,152,157,0,152],
[187,191,207,199,198,165,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,190,193,185,152,176,161],
[154,0,171,181,183,156,155,158],
[150,169,0,170,155,141,164,146],
[147,159,170,0,171,158,154,157],
[155,157,185,169,0,152,150,144],
[188,184,199,182,188,0,159,181],
[164,185,176,186,190,181,0,177],
[179,182,194,183,196,159,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,148,151,131,159,146,167],
[188,0,162,184,168,170,157,190],
[192,178,0,166,184,167,173,169],
[189,156,174,0,142,177,143,168],
[209,172,156,198,0,173,186,207],
[181,170,173,163,167,0,153,165],
[194,183,167,197,154,187,0,183],
[173,150,171,172,133,175,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,178,164,165,168,161,154],
[186,0,179,153,154,169,154,161],
[162,161,0,151,158,168,150,150],
[176,187,189,0,179,180,185,167],
[175,186,182,161,0,163,172,176],
[172,171,172,160,177,0,171,159],
[179,186,190,155,168,169,0,168],
[186,179,190,173,164,181,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,122,266,171,169,122,145],
[146,0,123,268,148,122,123,196],
[218,217,0,266,243,145,195,194],
[74,72,74,0,74,96,75,73],
[169,192,97,266,0,167,169,193],
[171,218,195,244,173,0,97,123],
[218,217,145,265,171,243,0,170],
[195,144,146,267,147,217,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,161,170,161,223,141,152],
[170,0,180,192,230,221,172,199],
[179,160,0,161,161,203,140,157],
[170,148,179,0,180,210,160,156],
[179,110,179,160,0,189,130,177],
[117,119,137,130,151,0,99,157],
[199,168,200,180,210,241,0,147],
[188,141,183,184,163,183,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,149,164,178,182,149,155],
[177,0,171,173,168,176,184,169],
[191,169,0,159,172,166,190,177],
[176,167,181,0,170,173,176,171],
[162,172,168,170,0,172,181,169],
[158,164,174,167,168,0,153,174],
[191,156,150,164,159,187,0,174],
[185,171,163,169,171,166,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,167,181,182,165,186,175],
[170,0,180,168,184,169,186,183],
[173,160,0,182,189,169,162,156],
[159,172,158,0,167,171,176,181],
[158,156,151,173,0,166,174,166],
[175,171,171,169,174,0,181,181],
[154,154,178,164,166,159,0,170],
[165,157,184,159,174,159,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,177,164,183,186,182,166],
[164,0,173,175,180,197,211,181],
[163,167,0,165,173,181,167,152],
[176,165,175,0,177,201,169,174],
[157,160,167,163,0,177,185,183],
[154,143,159,139,163,0,161,143],
[158,129,173,171,155,179,0,154],
[174,159,188,166,157,197,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,192,163,176,180,173,178],
[177,0,171,170,187,159,165,163],
[148,169,0,147,164,153,163,165],
[177,170,193,0,176,174,187,178],
[164,153,176,164,0,170,178,184],
[160,181,187,166,170,0,179,179],
[167,175,177,153,162,161,0,163],
[162,177,175,162,156,161,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,156,177,157,165,170,154],
[185,0,153,192,162,170,172,151],
[184,187,0,192,157,160,188,154],
[163,148,148,0,152,151,166,141],
[183,178,183,188,0,169,189,170],
[175,170,180,189,171,0,173,152],
[170,168,152,174,151,167,0,165],
[186,189,186,199,170,188,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,173,153,181,181,167,184],
[146,0,205,172,162,184,173,173],
[167,135,0,183,176,165,165,168],
[187,168,157,0,167,177,166,188],
[159,178,164,173,0,178,145,206],
[159,156,175,163,162,0,152,172],
[173,167,175,174,195,188,0,186],
[156,167,172,152,134,168,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,175,180,156,170,160,152],
[162,0,166,152,169,157,155,164],
[165,174,0,163,165,168,162,145],
[160,188,177,0,166,157,161,166],
[184,171,175,174,0,174,170,167],
[170,183,172,183,166,0,174,171],
[180,185,178,179,170,166,0,168],
[188,176,195,174,173,169,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,170,158,178,148,183,170],
[175,0,180,158,168,161,188,151],
[170,160,0,150,158,153,176,155],
[182,182,190,0,161,160,194,181],
[162,172,182,179,0,170,176,167],
[192,179,187,180,170,0,181,167],
[157,152,164,146,164,159,0,157],
[170,189,185,159,173,173,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,155,172,164,172,161,172],
[176,0,163,152,163,175,168,162],
[185,177,0,174,174,176,173,165],
[168,188,166,0,167,167,167,176],
[176,177,166,173,0,170,172,170],
[168,165,164,173,170,0,160,153],
[179,172,167,173,168,180,0,162],
[168,178,175,164,170,187,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,173,174,170,160,183,146],
[180,0,183,176,201,165,184,177],
[167,157,0,180,183,171,197,182],
[166,164,160,0,158,145,162,147],
[170,139,157,182,0,150,181,184],
[180,175,169,195,190,0,192,175],
[157,156,143,178,159,148,0,156],
[194,163,158,193,156,165,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,164,163,160,171,151,163],
[179,0,188,167,171,202,166,182],
[176,152,0,170,158,171,155,152],
[177,173,170,0,158,177,165,174],
[180,169,182,182,0,180,174,190],
[169,138,169,163,160,0,156,160],
[189,174,185,175,166,184,0,182],
[177,158,188,166,150,180,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,141,149,150,148,155,145],
[196,0,164,161,170,176,202,163],
[199,176,0,171,171,163,190,184],
[191,179,169,0,170,156,192,172],
[190,170,169,170,0,185,192,175],
[192,164,177,184,155,0,207,177],
[185,138,150,148,148,133,0,148],
[195,177,156,168,165,163,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,165,186,179,185,205,188],
[156,0,156,161,157,166,185,188],
[175,184,0,153,160,169,200,187],
[154,179,187,0,171,165,190,196],
[161,183,180,169,0,168,182,200],
[155,174,171,175,172,0,190,193],
[135,155,140,150,158,150,0,174],
[152,152,153,144,140,147,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,159,180,159,136,167,170],
[184,0,148,176,191,152,140,200],
[181,192,0,192,174,173,168,216],
[160,164,148,0,161,132,159,161],
[181,149,166,179,0,140,172,170],
[204,188,167,208,200,0,175,206],
[173,200,172,181,168,165,0,195],
[170,140,124,179,170,134,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,172,159,152,156,158,146],
[178,0,165,171,181,161,155,152],
[168,175,0,164,169,163,141,138],
[181,169,176,0,171,178,171,149],
[188,159,171,169,0,170,166,156],
[184,179,177,162,170,0,146,176],
[182,185,199,169,174,194,0,160],
[194,188,202,191,184,164,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,182,193,175,172,166,179],
[159,0,171,185,173,163,174,175],
[158,169,0,190,172,163,164,167],
[147,155,150,0,167,157,158,161],
[165,167,168,173,0,163,164,169],
[168,177,177,183,177,0,179,172],
[174,166,176,182,176,161,0,166],
[161,165,173,179,171,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,170,169,175,171,173,181],
[160,0,161,162,168,159,168,177],
[170,179,0,169,179,167,172,186],
[171,178,171,0,170,166,169,183],
[165,172,161,170,0,158,167,181],
[169,181,173,174,182,0,183,184],
[167,172,168,171,173,157,0,176],
[159,163,154,157,159,156,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,147,171,169,176,169,160],
[161,0,170,146,164,175,149,159],
[193,170,0,173,164,155,175,151],
[169,194,167,0,164,161,169,169],
[171,176,176,176,0,167,181,171],
[164,165,185,179,173,0,167,167],
[171,191,165,171,159,173,0,160],
[180,181,189,171,169,173,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,162,175,188,168,173,179],
[181,0,164,170,183,165,173,163],
[178,176,0,167,170,181,168,162],
[165,170,173,0,184,180,189,184],
[152,157,170,156,0,152,164,162],
[172,175,159,160,188,0,165,172],
[167,167,172,151,176,175,0,178],
[161,177,178,156,178,168,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,137,67,67,67,136,67],
[137,0,137,67,67,204,136,135],
[203,203,0,203,67,203,136,67],
[273,273,137,0,204,137,137,137],
[273,273,273,136,0,204,137,68],
[273,136,137,203,136,0,69,204],
[204,204,204,203,203,271,0,135],
[273,205,273,203,272,136,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,160,151,152,146,149],
[181,0,183,169,164,157,166,166],
[177,157,0,166,177,161,172,169],
[180,171,174,0,187,170,164,156],
[189,176,163,153,0,154,183,153],
[188,183,179,170,186,0,170,171],
[194,174,168,176,157,170,0,165],
[191,174,171,184,187,169,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,177,171,170,193,179,176],
[167,0,162,159,173,177,188,187],
[163,178,0,161,161,173,169,174],
[169,181,179,0,169,179,182,179],
[170,167,179,171,0,194,194,173],
[147,163,167,161,146,0,167,157],
[161,152,171,158,146,173,0,180],
[164,153,166,161,167,183,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,145,144,140,157,166,136],
[196,0,170,163,163,164,181,159],
[195,170,0,151,163,169,179,171],
[196,177,189,0,167,173,190,166],
[200,177,177,173,0,180,201,163],
[183,176,171,167,160,0,172,171],
[174,159,161,150,139,168,0,147],
[204,181,169,174,177,169,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,184,175,165,169,161,170],
[173,0,178,166,163,154,172,164],
[156,162,0,156,168,157,159,155],
[165,174,184,0,167,162,163,163],
[175,177,172,173,0,178,178,168],
[171,186,183,178,162,0,170,170],
[179,168,181,177,162,170,0,176],
[170,176,185,177,172,170,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,187,163,183,185,181,191],
[153,0,182,175,180,156,184,187],
[153,158,0,170,176,174,171,179],
[177,165,170,0,174,174,201,189],
[157,160,164,166,0,163,185,185],
[155,184,166,166,177,0,181,185],
[159,156,169,139,155,159,0,157],
[149,153,161,151,155,155,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,161,163,150,160,163,160],
[190,0,175,183,181,165,179,173],
[179,165,0,161,179,178,171,172],
[177,157,179,0,173,172,180,159],
[190,159,161,167,0,157,169,158],
[180,175,162,168,183,0,177,161],
[177,161,169,160,171,163,0,167],
[180,167,168,181,182,179,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,190,204,167,200,176,151],
[150,0,224,222,202,195,161,128],
[150,116,0,210,191,172,184,171],
[136,118,130,0,152,178,137,112],
[173,138,149,188,0,196,166,170],
[140,145,168,162,144,0,155,146],
[164,179,156,203,174,185,0,146],
[189,212,169,228,170,194,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,158,146,148,149,155,156],
[193,0,174,175,164,157,158,177],
[182,166,0,177,148,176,148,166],
[194,165,163,0,177,159,160,171],
[192,176,192,163,0,188,177,170],
[191,183,164,181,152,0,171,163],
[185,182,192,180,163,169,0,166],
[184,163,174,169,170,177,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,176,160,182,179,187],
[169,0,173,165,156,166,167,174],
[167,167,0,156,147,164,173,174],
[164,175,184,0,178,181,191,182],
[180,184,193,162,0,181,170,184],
[158,174,176,159,159,0,186,179],
[161,173,167,149,170,154,0,176],
[153,166,166,158,156,161,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,175,184,170,180,170,169],
[165,0,160,176,183,171,179,174],
[165,180,0,172,169,168,170,149],
[156,164,168,0,177,153,162,156],
[170,157,171,163,0,170,164,164],
[160,169,172,187,170,0,165,169],
[170,161,170,178,176,175,0,172],
[171,166,191,184,176,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,175,175,169,164,158,158],
[178,0,172,181,171,156,164,170],
[165,168,0,183,185,150,168,161],
[165,159,157,0,171,148,159,158],
[171,169,155,169,0,161,153,156],
[176,184,190,192,179,0,173,166],
[182,176,172,181,187,167,0,183],
[182,170,179,182,184,174,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,169,174,148,184,177,197],
[143,0,152,166,121,154,152,170],
[171,188,0,178,176,190,139,198],
[166,174,162,0,144,158,167,165],
[192,219,164,196,0,185,176,192],
[156,186,150,182,155,0,156,198],
[163,188,201,173,164,184,0,193],
[143,170,142,175,148,142,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,171,159,172,160,158,166],
[151,0,165,141,146,139,148,150],
[169,175,0,144,160,167,175,171],
[181,199,196,0,188,170,189,182],
[168,194,180,152,0,158,182,180],
[180,201,173,170,182,0,182,172],
[182,192,165,151,158,158,0,165],
[174,190,169,158,160,168,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,176,169,178,186,170,157],
[177,0,166,175,181,192,172,179],
[164,174,0,167,177,181,158,162],
[171,165,173,0,180,199,158,164],
[162,159,163,160,0,175,149,154],
[154,148,159,141,165,0,149,138],
[170,168,182,182,191,191,0,173],
[183,161,178,176,186,202,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,165,170,177,168,172,174],
[170,0,163,161,168,158,166,185],
[175,177,0,173,167,179,169,185],
[170,179,167,0,174,176,172,178],
[163,172,173,166,0,162,162,190],
[172,182,161,164,178,0,167,169],
[168,174,171,168,178,173,0,181],
[166,155,155,162,150,171,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,200,154,177,185,166,189],
[168,0,198,185,182,190,168,181],
[140,142,0,145,179,173,158,183],
[186,155,195,0,185,190,178,192],
[163,158,161,155,0,180,173,176],
[155,150,167,150,160,0,162,178],
[174,172,182,162,167,178,0,190],
[151,159,157,148,164,162,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,163,161,174,161,175,150],
[162,0,156,154,162,155,156,153],
[177,184,0,177,188,177,170,181],
[179,186,163,0,181,180,183,156],
[166,178,152,159,0,162,147,161],
[179,185,163,160,178,0,171,171],
[165,184,170,157,193,169,0,176],
[190,187,159,184,179,169,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,193,197,185,210,168,196],
[117,0,169,217,156,143,140,143],
[147,171,0,188,172,144,115,119],
[143,123,152,0,166,169,139,112],
[155,184,168,174,0,197,127,170],
[130,197,196,171,143,0,140,116],
[172,200,225,201,213,200,0,156],
[144,197,221,228,170,224,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,182,183,170,204,186,172],
[145,0,143,161,147,169,171,167],
[158,197,0,161,153,185,189,166],
[157,179,179,0,147,179,167,173],
[170,193,187,193,0,193,177,175],
[136,171,155,161,147,0,171,152],
[154,169,151,173,163,169,0,169],
[168,173,174,167,165,188,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,163,155,169,173,174,156],
[182,0,184,162,174,187,176,176],
[177,156,0,144,161,175,172,177],
[185,178,196,0,169,196,167,187],
[171,166,179,171,0,176,172,178],
[167,153,165,144,164,0,152,188],
[166,164,168,173,168,188,0,183],
[184,164,163,153,162,152,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,171,148,165,169,174,171],
[170,0,183,170,165,187,180,182],
[169,157,0,151,164,179,174,173],
[192,170,189,0,171,195,207,184],
[175,175,176,169,0,180,177,173],
[171,153,161,145,160,0,159,172],
[166,160,166,133,163,181,0,168],
[169,158,167,156,167,168,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,151,173,161,168,158,161],
[181,0,164,173,171,180,172,171],
[189,176,0,180,187,175,170,180],
[167,167,160,0,164,177,161,166],
[179,169,153,176,0,169,166,179],
[172,160,165,163,171,0,161,167],
[182,168,170,179,174,179,0,167],
[179,169,160,174,161,173,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,175,175,176,182,165,163],
[174,0,175,175,172,170,165,174],
[165,165,0,159,170,182,171,160],
[165,165,181,0,189,178,165,174],
[164,168,170,151,0,166,167,142],
[158,170,158,162,174,0,155,144],
[175,175,169,175,173,185,0,162],
[177,166,180,166,198,196,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,177,177,181,181,168,174],
[159,0,173,162,178,156,162,165],
[163,167,0,168,172,149,158,154],
[163,178,172,0,175,156,160,162],
[159,162,168,165,0,158,156,153],
[159,184,191,184,182,0,167,167],
[172,178,182,180,184,173,0,170],
[166,175,186,178,187,173,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,133,204,170,170,186,171],
[188,0,183,203,189,165,254,211],
[207,157,0,185,191,191,232,174],
[136,137,155,0,183,164,203,165],
[170,151,149,157,0,169,182,168],
[170,175,149,176,171,0,226,166],
[154,86,108,137,158,114,0,144],
[169,129,166,175,172,174,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,106,134,135,128,153,135],
[192,0,127,149,149,118,166,143],
[234,213,0,210,182,163,203,157],
[206,191,130,0,172,158,201,150],
[205,191,158,168,0,151,192,172],
[212,222,177,182,189,0,199,166],
[187,174,137,139,148,141,0,161],
[205,197,183,190,168,174,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,172,166,195,171,179,188],
[200,0,181,160,200,169,168,197],
[168,159,0,184,197,155,170,179],
[174,180,156,0,189,174,163,184],
[145,140,143,151,0,152,171,179],
[169,171,185,166,188,0,181,205],
[161,172,170,177,169,159,0,181],
[152,143,161,156,161,135,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,162,162,165,165,156,188],
[175,0,183,166,165,177,170,170],
[178,157,0,158,166,184,171,178],
[178,174,182,0,183,189,168,194],
[175,175,174,157,0,178,178,173],
[175,163,156,151,162,0,156,183],
[184,170,169,172,162,184,0,158],
[152,170,162,146,167,157,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,165,180,159,189,154,158],
[170,0,183,186,171,184,174,170],
[175,157,0,175,156,171,169,165],
[160,154,165,0,147,173,144,158],
[181,169,184,193,0,190,176,181],
[151,156,169,167,150,0,165,164],
[186,166,171,196,164,175,0,158],
[182,170,175,182,159,176,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,179,171,176,170,190,177],
[170,0,179,175,181,162,187,167],
[161,161,0,164,168,158,178,176],
[169,165,176,0,165,172,174,158],
[164,159,172,175,0,161,178,162],
[170,178,182,168,179,0,175,168],
[150,153,162,166,162,165,0,154],
[163,173,164,182,178,172,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,168,154,162,158,160,174],
[193,0,174,178,196,167,184,185],
[172,166,0,161,185,163,175,182],
[186,162,179,0,183,160,167,184],
[178,144,155,157,0,170,158,158],
[182,173,177,180,170,0,163,176],
[180,156,165,173,182,177,0,184],
[166,155,158,156,182,164,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,180,168,178,183,180,179],
[170,0,163,168,180,172,183,164],
[160,177,0,163,172,180,178,178],
[172,172,177,0,175,170,179,178],
[162,160,168,165,0,166,173,185],
[157,168,160,170,174,0,166,177],
[160,157,162,161,167,174,0,153],
[161,176,162,162,155,163,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,178,206,166,176,182,194],
[129,0,168,179,148,143,153,153],
[162,172,0,165,142,168,176,166],
[134,161,175,0,139,150,143,160],
[174,192,198,201,0,162,180,181],
[164,197,172,190,178,0,169,177],
[158,187,164,197,160,171,0,191],
[146,187,174,180,159,163,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,177,183,169,171,189,173],
[150,0,152,155,129,157,154,160],
[163,188,0,159,167,180,175,183],
[157,185,181,0,167,175,178,195],
[171,211,173,173,0,157,175,177],
[169,183,160,165,183,0,176,186],
[151,186,165,162,165,164,0,176],
[167,180,157,145,163,154,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,162,157,191,193,181,190],
[160,0,133,164,148,196,164,160],
[178,207,0,209,233,222,170,201],
[183,176,131,0,183,211,213,184],
[149,192,107,157,0,221,190,180],
[147,144,118,129,119,0,107,140],
[159,176,170,127,150,233,0,190],
[150,180,139,156,160,200,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,177,169,147,149,170,158],
[198,0,185,196,158,169,189,174],
[163,155,0,171,152,155,166,154],
[171,144,169,0,149,149,147,154],
[193,182,188,191,0,177,168,184],
[191,171,185,191,163,0,170,192],
[170,151,174,193,172,170,0,187],
[182,166,186,186,156,148,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,169,166,168,179,192,172],
[163,0,186,169,174,167,176,171],
[171,154,0,133,178,148,168,159],
[174,171,207,0,180,150,187,189],
[172,166,162,160,0,165,174,190],
[161,173,192,190,175,0,183,172],
[148,164,172,153,166,157,0,166],
[168,169,181,151,150,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,183,192,187,154,169,186],
[153,0,171,159,165,150,158,167],
[157,169,0,167,153,139,163,157],
[148,181,173,0,172,175,159,162],
[153,175,187,168,0,160,175,173],
[186,190,201,165,180,0,194,172],
[171,182,177,181,165,146,0,159],
[154,173,183,178,167,168,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,162,196,183,188,209,186],
[152,0,151,162,152,156,187,163],
[178,189,0,165,197,182,175,168],
[144,178,175,0,189,138,180,194],
[157,188,143,151,0,166,180,181],
[152,184,158,202,174,0,172,189],
[131,153,165,160,160,168,0,163],
[154,177,172,146,159,151,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,165,175,170,162,167,174],
[169,0,164,166,169,150,167,164],
[175,176,0,175,156,180,179,164],
[165,174,165,0,156,158,156,161],
[170,171,184,184,0,169,173,170],
[178,190,160,182,171,0,174,176],
[173,173,161,184,167,166,0,176],
[166,176,176,179,170,164,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,172,162,165,161,183,189],
[160,0,158,153,169,144,154,154],
[168,182,0,181,174,174,160,178],
[178,187,159,0,175,168,163,188],
[175,171,166,165,0,169,160,171],
[179,196,166,172,171,0,165,182],
[157,186,180,177,180,175,0,181],
[151,186,162,152,169,158,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,143,135,140,150,165,196],
[192,0,171,138,182,129,133,200],
[197,169,0,178,179,154,183,243],
[205,202,162,0,196,177,167,193],
[200,158,161,144,0,155,171,199],
[190,211,186,163,185,0,145,214],
[175,207,157,173,169,195,0,200],
[144,140,97,147,141,126,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,181,176,170,182,176,192],
[164,0,175,166,171,177,173,181],
[159,165,0,176,167,170,177,176],
[164,174,164,0,154,177,175,180],
[170,169,173,186,0,170,176,178],
[158,163,170,163,170,0,161,168],
[164,167,163,165,164,179,0,161],
[148,159,164,160,162,172,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,155,170,159,159,167],
[169,0,173,177,187,180,162,169],
[171,167,0,156,183,158,144,170],
[185,163,184,0,168,172,153,177],
[170,153,157,172,0,156,157,160],
[181,160,182,168,184,0,166,178],
[181,178,196,187,183,174,0,169],
[173,171,170,163,180,162,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,150,139,173,145,146,181],
[182,0,159,161,179,176,165,196],
[190,181,0,159,181,194,200,180],
[201,179,181,0,188,169,196,197],
[167,161,159,152,0,163,161,169],
[195,164,146,171,177,0,181,185],
[194,175,140,144,179,159,0,195],
[159,144,160,143,171,155,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,181,181,204,172,178,185],
[176,0,170,177,186,171,189,169],
[159,170,0,171,188,186,189,184],
[159,163,169,0,172,156,174,187],
[136,154,152,168,0,149,169,167],
[168,169,154,184,191,0,175,175],
[162,151,151,166,171,165,0,156],
[155,171,156,153,173,165,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,165,172,174,196,166,187],
[166,0,174,169,168,178,182,189],
[175,166,0,167,168,172,182,174],
[168,171,173,0,170,176,187,191],
[166,172,172,170,0,183,166,183],
[144,162,168,164,157,0,176,168],
[174,158,158,153,174,164,0,162],
[153,151,166,149,157,172,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,161,161,180,160,162,173],
[173,0,179,176,185,182,169,181],
[179,161,0,157,181,173,171,165],
[179,164,183,0,175,180,171,181],
[160,155,159,165,0,159,153,152],
[180,158,167,160,181,0,169,172],
[178,171,169,169,187,171,0,180],
[167,159,175,159,188,168,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,166,178,176,173,154,156],
[169,0,171,171,167,161,169,150],
[174,169,0,183,176,172,168,169],
[162,169,157,0,159,172,148,152],
[164,173,164,181,0,170,155,150],
[167,179,168,168,170,0,175,173],
[186,171,172,192,185,165,0,161],
[184,190,171,188,190,167,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,164,169,155,172,170,175],
[162,0,158,178,158,163,156,183],
[176,182,0,179,168,143,165,189],
[171,162,161,0,153,148,149,168],
[185,182,172,187,0,171,145,189],
[168,177,197,192,169,0,180,204],
[170,184,175,191,195,160,0,181],
[165,157,151,172,151,136,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,152,189,173,166,176,143],
[164,0,159,178,156,175,163,169],
[188,181,0,188,177,184,180,164],
[151,162,152,0,150,156,150,148],
[167,184,163,190,0,177,181,175],
[174,165,156,184,163,0,155,156],
[164,177,160,190,159,185,0,147],
[197,171,176,192,165,184,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,167,176,172,185,172,168],
[167,0,169,179,178,180,179,183],
[173,171,0,190,186,189,170,176],
[164,161,150,0,185,169,165,188],
[168,162,154,155,0,176,162,167],
[155,160,151,171,164,0,152,159],
[168,161,170,175,178,188,0,165],
[172,157,164,152,173,181,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,173,136,127,153,130,162],
[196,0,177,160,155,176,174,191],
[167,163,0,146,165,174,144,156],
[204,180,194,0,192,205,161,186],
[213,185,175,148,0,198,163,153],
[187,164,166,135,142,0,147,174],
[210,166,196,179,177,193,0,179],
[178,149,184,154,187,166,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,153,174,166,162,174,171],
[166,0,167,176,161,173,172,172],
[187,173,0,166,169,179,182,169],
[166,164,174,0,170,168,189,174],
[174,179,171,170,0,167,168,173],
[178,167,161,172,173,0,183,165],
[166,168,158,151,172,157,0,158],
[169,168,171,166,167,175,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,161,177,172,169,168,175],
[166,0,158,193,171,151,178,172],
[179,182,0,183,177,177,177,164],
[163,147,157,0,150,153,171,161],
[168,169,163,190,0,182,178,183],
[171,189,163,187,158,0,171,171],
[172,162,163,169,162,169,0,167],
[165,168,176,179,157,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,168,166,178,165,176,167],
[166,0,169,169,157,177,168,172],
[172,171,0,157,173,156,153,170],
[174,171,183,0,178,170,160,170],
[162,183,167,162,0,150,165,163],
[175,163,184,170,190,0,172,162],
[164,172,187,180,175,168,0,175],
[173,168,170,170,177,178,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,182,172,150,182,171,187],
[154,0,174,175,169,179,162,200],
[158,166,0,147,156,153,142,173],
[168,165,193,0,174,172,155,192],
[190,171,184,166,0,158,179,190],
[158,161,187,168,182,0,170,184],
[169,178,198,185,161,170,0,205],
[153,140,167,148,150,156,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,163,168,204,169,182,183],
[178,0,170,167,181,179,178,176],
[177,170,0,178,189,189,177,175],
[172,173,162,0,196,185,185,181],
[136,159,151,144,0,158,160,157],
[171,161,151,155,182,0,172,173],
[158,162,163,155,180,168,0,172],
[157,164,165,159,183,167,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,128,198,132,61,164,131],
[223,0,200,186,139,142,174,186],
[212,140,0,198,175,151,199,163],
[142,154,142,0,166,119,188,167],
[208,201,165,174,0,186,211,161],
[279,198,189,221,154,0,184,198],
[176,166,141,152,129,156,0,161],
[209,154,177,173,179,142,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,180,168,156,165,165,187],
[172,0,184,168,169,182,168,183],
[160,156,0,170,176,162,188,210],
[172,172,170,0,164,159,162,172],
[184,171,164,176,0,161,180,201],
[175,158,178,181,179,0,177,186],
[175,172,152,178,160,163,0,189],
[153,157,130,168,139,154,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,167,163,167,176,160,173],
[165,0,158,180,172,173,162,178],
[173,182,0,174,212,188,168,193],
[177,160,166,0,190,190,173,179],
[173,168,128,150,0,144,149,153],
[164,167,152,150,196,0,159,183],
[180,178,172,167,191,181,0,191],
[167,162,147,161,187,157,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,172,170,172,184,165,166],
[187,0,170,190,189,184,185,174],
[168,170,0,180,174,177,174,174],
[170,150,160,0,150,174,166,174],
[168,151,166,190,0,171,179,159],
[156,156,163,166,169,0,170,158],
[175,155,166,174,161,170,0,166],
[174,166,166,166,181,182,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,186,191,217,195,217,145],
[165,0,163,146,175,182,209,161],
[154,177,0,182,205,196,237,182],
[149,194,158,0,217,216,216,192],
[123,165,135,123,0,141,182,133],
[145,158,144,124,199,0,175,159],
[123,131,103,124,158,165,0,136],
[195,179,158,148,207,181,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,166,166,150,177,181,166],
[166,0,179,178,178,203,183,187],
[174,161,0,144,159,164,173,166],
[174,162,196,0,165,184,164,188],
[190,162,181,175,0,189,204,178],
[163,137,176,156,151,0,179,163],
[159,157,167,176,136,161,0,168],
[174,153,174,152,162,177,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,173,174,183,176,176,186],
[178,0,173,157,168,181,144,169],
[167,167,0,163,167,172,169,194],
[166,183,177,0,186,188,174,185],
[157,172,173,154,0,188,157,184],
[164,159,168,152,152,0,146,165],
[164,196,171,166,183,194,0,227],
[154,171,146,155,156,175,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,175,172,161,160,192,185],
[170,0,169,171,166,165,196,163],
[165,171,0,169,180,164,159,166],
[168,169,171,0,178,169,176,181],
[179,174,160,162,0,177,158,167],
[180,175,176,171,163,0,181,175],
[148,144,181,164,182,159,0,159],
[155,177,174,159,173,165,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,161,150,165,151,160,173],
[185,0,164,149,132,160,177,185],
[179,176,0,151,158,141,148,183],
[190,191,189,0,177,146,156,189],
[175,208,182,163,0,169,194,184],
[189,180,199,194,171,0,158,175],
[180,163,192,184,146,182,0,180],
[167,155,157,151,156,165,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,158,169,165,156,156,157],
[176,0,168,178,158,163,163,170],
[182,172,0,184,181,173,174,166],
[171,162,156,0,179,162,153,163],
[175,182,159,161,0,165,160,171],
[184,177,167,178,175,0,175,170],
[184,177,166,187,180,165,0,178],
[183,170,174,177,169,170,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,154,163,177,163,167,155],
[173,0,163,171,184,167,180,179],
[186,177,0,162,173,179,179,179],
[177,169,178,0,195,180,185,178],
[163,156,167,145,0,170,175,167],
[177,173,161,160,170,0,168,177],
[173,160,161,155,165,172,0,165],
[185,161,161,162,173,163,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,178,181,160,157,174,182],
[174,0,150,169,164,163,175,190],
[162,190,0,184,155,177,158,202],
[159,171,156,0,155,161,169,182],
[180,176,185,185,0,189,165,217],
[183,177,163,179,151,0,165,202],
[166,165,182,171,175,175,0,185],
[158,150,138,158,123,138,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,150,155,180,166,160,157],
[167,0,160,170,186,184,176,171],
[190,180,0,181,185,168,186,155],
[185,170,159,0,188,182,184,171],
[160,154,155,152,0,168,158,159],
[174,156,172,158,172,0,176,162],
[180,164,154,156,182,164,0,164],
[183,169,185,169,181,178,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,166,189,168,174,179,190],
[139,0,163,163,160,155,156,168],
[174,177,0,179,171,171,178,164],
[151,177,161,0,157,165,169,166],
[172,180,169,183,0,172,163,191],
[166,185,169,175,168,0,173,185],
[161,184,162,171,177,167,0,184],
[150,172,176,174,149,155,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,161,152,143,143,181,150],
[193,0,207,182,162,195,168,187],
[179,133,0,172,165,171,180,173],
[188,158,168,0,179,189,194,189],
[197,178,175,161,0,197,174,194],
[197,145,169,151,143,0,159,151],
[159,172,160,146,166,181,0,146],
[190,153,167,151,146,189,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,175,185,168,178,155,180],
[149,0,167,177,162,197,162,178],
[165,173,0,183,148,182,152,163],
[155,163,157,0,160,180,147,163],
[172,178,192,180,0,191,177,161],
[162,143,158,160,149,0,155,157],
[185,178,188,193,163,185,0,192],
[160,162,177,177,179,183,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,149,152,168,126,134,101],
[210,0,159,178,178,205,169,174],
[191,181,0,186,198,175,142,169],
[188,162,154,0,204,169,154,169],
[172,162,142,136,0,140,162,139],
[214,135,165,171,200,0,192,180],
[206,171,198,186,178,148,0,183],
[239,166,171,171,201,160,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,148,153,169,152,167,173],
[186,0,137,150,170,142,147,150],
[192,203,0,170,183,180,189,175],
[187,190,170,0,175,167,176,183],
[171,170,157,165,0,177,169,167],
[188,198,160,173,163,0,158,181],
[173,193,151,164,171,182,0,175],
[167,190,165,157,173,159,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,159,167,162,175,162,180],
[177,0,156,169,149,162,155,158],
[181,184,0,175,186,177,179,168],
[173,171,165,0,178,175,153,184],
[178,191,154,162,0,181,161,179],
[165,178,163,165,159,0,158,175],
[178,185,161,187,179,182,0,164],
[160,182,172,156,161,165,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,174,170,176,162,162,173],
[153,0,147,131,169,148,168,162],
[166,193,0,176,174,178,172,188],
[170,209,164,0,180,179,181,163],
[164,171,166,160,0,168,181,167],
[178,192,162,161,172,0,165,160],
[178,172,168,159,159,175,0,173],
[167,178,152,177,173,180,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,170,171,165,180,170,175],
[152,0,162,164,166,175,146,162],
[170,178,0,167,173,174,177,175],
[169,176,173,0,169,190,169,186],
[175,174,167,171,0,186,173,179],
[160,165,166,150,154,0,170,181],
[170,194,163,171,167,170,0,174],
[165,178,165,154,161,159,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,163,168,166,195,177,184],
[172,0,168,177,187,197,173,180],
[177,172,0,155,180,179,166,176],
[172,163,185,0,187,196,169,186],
[174,153,160,153,0,185,171,165],
[145,143,161,144,155,0,153,162],
[163,167,174,171,169,187,0,185],
[156,160,164,154,175,178,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,162,197,185,177,155,152],
[150,0,149,156,142,130,150,125],
[178,191,0,195,161,171,155,161],
[143,184,145,0,165,152,176,144],
[155,198,179,175,0,158,161,174],
[163,210,169,188,182,0,180,153],
[185,190,185,164,179,160,0,161],
[188,215,179,196,166,187,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,159,157,170,151,172,175],
[189,0,145,170,170,165,168,166],
[181,195,0,161,176,179,189,194],
[183,170,179,0,182,169,192,181],
[170,170,164,158,0,162,162,165],
[189,175,161,171,178,0,191,168],
[168,172,151,148,178,149,0,191],
[165,174,146,159,175,172,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,157,170,167,117,145,152],
[185,0,179,185,187,153,169,161],
[183,161,0,162,146,146,133,140],
[170,155,178,0,158,140,153,170],
[173,153,194,182,0,182,178,166],
[223,187,194,200,158,0,174,161],
[195,171,207,187,162,166,0,161],
[188,179,200,170,174,179,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,165,162,154,178,162,163],
[182,0,177,179,180,187,170,178],
[175,163,0,168,154,183,163,160],
[178,161,172,0,166,184,170,164],
[186,160,186,174,0,183,173,178],
[162,153,157,156,157,0,152,146],
[178,170,177,170,167,188,0,171],
[177,162,180,176,162,194,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,114,112,226,226,228,340],
[114,0,114,0,114,114,114,340],
[226,226,0,226,226,112,114,340],
[228,340,114,0,340,226,228,340],
[114,226,114,0,0,114,114,340],
[114,226,228,114,226,0,228,340],
[112,226,226,112,226,112,0,340],
[0,0,0,0,0,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,156,166,187,156,154,124],
[183,0,203,193,225,191,204,152],
[184,137,0,179,143,146,174,154],
[174,147,161,0,174,194,125,155],
[153,115,197,166,0,143,144,124],
[184,149,194,146,197,0,164,125],
[186,136,166,215,196,176,0,186],
[216,188,186,185,216,215,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,164,185,156,151,158,171],
[155,0,158,151,144,134,146,155],
[176,182,0,159,167,163,144,176],
[155,189,181,0,164,150,170,187],
[184,196,173,176,0,184,169,204],
[189,206,177,190,156,0,188,193],
[182,194,196,170,171,152,0,181],
[169,185,164,153,136,147,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,168,174,166,155,184,213],
[157,0,157,162,171,175,186,187],
[172,183,0,183,163,161,178,203],
[166,178,157,0,170,153,178,168],
[174,169,177,170,0,161,181,193],
[185,165,179,187,179,0,170,178],
[156,154,162,162,159,170,0,172],
[127,153,137,172,147,162,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,167,181,192,180,183,194],
[144,0,165,156,166,157,169,165],
[173,175,0,182,176,170,163,175],
[159,184,158,0,181,175,171,172],
[148,174,164,159,0,152,175,173],
[160,183,170,165,188,0,177,177],
[157,171,177,169,165,163,0,182],
[146,175,165,168,167,163,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,160,158,164,147,160,154],
[150,0,176,147,151,154,152,145],
[180,164,0,154,170,184,161,156],
[182,193,186,0,155,172,169,172],
[176,189,170,185,0,164,177,165],
[193,186,156,168,176,0,154,169],
[180,188,179,171,163,186,0,150],
[186,195,184,168,175,171,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,185,189,210,183,180,220],
[171,0,166,193,180,173,152,189],
[155,174,0,200,168,175,170,196],
[151,147,140,0,181,172,162,203],
[130,160,172,159,0,182,166,187],
[157,167,165,168,158,0,161,165],
[160,188,170,178,174,179,0,187],
[120,151,144,137,153,175,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,169,154,178,164,162,171],
[162,0,161,156,183,171,172,157],
[171,179,0,159,174,172,153,155],
[186,184,181,0,170,181,174,174],
[162,157,166,170,0,171,148,156],
[176,169,168,159,169,0,173,172],
[178,168,187,166,192,167,0,164],
[169,183,185,166,184,168,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,163,164,173,176,173,153],
[167,0,161,165,177,180,168,162],
[177,179,0,164,182,165,167,158],
[176,175,176,0,175,190,182,170],
[167,163,158,165,0,171,162,162],
[164,160,175,150,169,0,176,168],
[167,172,173,158,178,164,0,166],
[187,178,182,170,178,172,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,164,172,177,190,160,178],
[167,0,159,165,163,181,149,180],
[176,181,0,180,168,200,174,172],
[168,175,160,0,163,202,158,186],
[163,177,172,177,0,194,182,176],
[150,159,140,138,146,0,157,145],
[180,191,166,182,158,183,0,175],
[162,160,168,154,164,195,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,183,174,169,184,168,166],
[159,0,161,177,165,148,165,152],
[157,179,0,166,146,171,167,169],
[166,163,174,0,190,171,187,176],
[171,175,194,150,0,152,171,163],
[156,192,169,169,188,0,176,166],
[172,175,173,153,169,164,0,177],
[174,188,171,164,177,174,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,186,184,183,185,172,165],
[167,0,170,155,161,182,180,171],
[154,170,0,162,152,168,180,154],
[156,185,178,0,183,186,169,177],
[157,179,188,157,0,173,174,198],
[155,158,172,154,167,0,159,157],
[168,160,160,171,166,181,0,185],
[175,169,186,163,142,183,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,181,165,160,159,181,170],
[176,0,162,167,149,159,175,180],
[159,178,0,156,151,153,170,169],
[175,173,184,0,172,165,183,190],
[180,191,189,168,0,174,180,194],
[181,181,187,175,166,0,190,198],
[159,165,170,157,160,150,0,173],
[170,160,171,150,146,142,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,185,179,184,191,172,193],
[173,0,179,178,181,172,170,188],
[155,161,0,183,183,189,166,172],
[161,162,157,0,163,178,156,178],
[156,159,157,177,0,164,163,171],
[149,168,151,162,176,0,158,185],
[168,170,174,184,177,182,0,179],
[147,152,168,162,169,155,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,162,164,199,162,155,186],
[145,0,139,175,147,152,145,173],
[178,201,0,199,180,150,173,199],
[176,165,141,0,152,148,171,153],
[141,193,160,188,0,170,160,176],
[178,188,190,192,170,0,187,201],
[185,195,167,169,180,153,0,171],
[154,167,141,187,164,139,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,178,163,165,156,150,163],
[175,0,186,165,184,169,166,168],
[162,154,0,161,168,152,145,143],
[177,175,179,0,192,162,168,171],
[175,156,172,148,0,146,154,151],
[184,171,188,178,194,0,176,162],
[190,174,195,172,186,164,0,169],
[177,172,197,169,189,178,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,175,184,178,171,170,170],
[178,0,183,181,177,173,172,169],
[165,157,0,162,172,176,155,165],
[156,159,178,0,168,180,165,176],
[162,163,168,172,0,160,152,153],
[169,167,164,160,180,0,164,161],
[170,168,185,175,188,176,0,176],
[170,171,175,164,187,179,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,160,171,175,154,164,161],
[181,0,170,168,176,177,170,169],
[180,170,0,168,176,163,171,166],
[169,172,172,0,162,174,178,183],
[165,164,164,178,0,174,162,169],
[186,163,177,166,166,0,177,175],
[176,170,169,162,178,163,0,165],
[179,171,174,157,171,165,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,179,161,159,158,166,170],
[172,0,183,175,166,179,168,169],
[161,157,0,157,159,153,160,156],
[179,165,183,0,165,152,172,171],
[181,174,181,175,0,180,162,168],
[182,161,187,188,160,0,175,178],
[174,172,180,168,178,165,0,170],
[170,171,184,169,172,162,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,181,167,156,178,167,182],
[176,0,190,172,177,172,170,187],
[159,150,0,147,146,160,156,159],
[173,168,193,0,176,177,175,190],
[184,163,194,164,0,177,180,167],
[162,168,180,163,163,0,155,170],
[173,170,184,165,160,185,0,173],
[158,153,181,150,173,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,166,170,156,147,149,167],
[184,0,166,185,165,147,160,186],
[174,174,0,181,168,168,156,177],
[170,155,159,0,178,164,128,168],
[184,175,172,162,0,164,154,162],
[193,193,172,176,176,0,162,190],
[191,180,184,212,186,178,0,166],
[173,154,163,172,178,150,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,152,163,154,176,167,165],
[187,0,169,168,176,168,167,163],
[188,171,0,180,183,189,166,163],
[177,172,160,0,192,186,173,173],
[186,164,157,148,0,170,165,150],
[164,172,151,154,170,0,163,148],
[173,173,174,167,175,177,0,163],
[175,177,177,167,190,192,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,155,161,162,173,160,160],
[181,0,178,170,176,178,172,186],
[185,162,0,172,179,182,174,185],
[179,170,168,0,166,195,179,191],
[178,164,161,174,0,176,159,174],
[167,162,158,145,164,0,157,172],
[180,168,166,161,181,183,0,185],
[180,154,155,149,166,168,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,154,153,151,163,147,167],
[184,0,171,173,176,175,163,177],
[186,169,0,166,170,180,184,190],
[187,167,174,0,182,189,170,178],
[189,164,170,158,0,173,174,177],
[177,165,160,151,167,0,143,161],
[193,177,156,170,166,197,0,181],
[173,163,150,162,163,179,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,171,170,171,148,167,172],
[172,0,158,151,166,145,167,162],
[169,182,0,164,174,156,168,180],
[170,189,176,0,181,174,173,179],
[169,174,166,159,0,151,170,179],
[192,195,184,166,189,0,187,188],
[173,173,172,167,170,153,0,184],
[168,178,160,161,161,152,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,165,161,163,154,158,177],
[151,0,139,155,153,162,160,163],
[175,201,0,171,168,173,180,169],
[179,185,169,0,173,146,160,174],
[177,187,172,167,0,164,187,200],
[186,178,167,194,176,0,178,176],
[182,180,160,180,153,162,0,184],
[163,177,171,166,140,164,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,183,173,201,180,207,151],
[196,0,191,170,219,201,220,176],
[157,149,0,161,163,161,189,154],
[167,170,179,0,220,172,200,183],
[139,121,177,120,0,148,168,129],
[160,139,179,168,192,0,180,186],
[133,120,151,140,172,160,0,147],
[189,164,186,157,211,154,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,151,151,181,149,165,154],
[186,0,182,186,210,185,176,159],
[189,158,0,136,160,154,134,132],
[189,154,204,0,182,170,180,187],
[159,130,180,158,0,167,121,148],
[191,155,186,170,173,0,166,129],
[175,164,206,160,219,174,0,135],
[186,181,208,153,192,211,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,175,168,178,176,173,166],
[175,0,181,169,176,157,158,159],
[165,159,0,161,174,167,159,156],
[172,171,179,0,165,172,163,178],
[162,164,166,175,0,166,150,169],
[164,183,173,168,174,0,169,165],
[167,182,181,177,190,171,0,169],
[174,181,184,162,171,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,160,176,153,159,156,151],
[184,0,169,176,157,168,166,172],
[180,171,0,160,167,158,174,182],
[164,164,180,0,167,161,154,166],
[187,183,173,173,0,163,160,186],
[181,172,182,179,177,0,164,182],
[184,174,166,186,180,176,0,176],
[189,168,158,174,154,158,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,171,156,176,165,171,191],
[162,0,154,149,169,163,159,175],
[169,186,0,171,175,173,175,194],
[184,191,169,0,166,171,176,193],
[164,171,165,174,0,170,162,184],
[175,177,167,169,170,0,165,193],
[169,181,165,164,178,175,0,182],
[149,165,146,147,156,147,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,186,176,161,188,189,166],
[156,0,180,181,172,214,199,163],
[154,160,0,174,157,183,185,166],
[164,159,166,0,148,190,179,150],
[179,168,183,192,0,207,189,175],
[152,126,157,150,133,0,150,155],
[151,141,155,161,151,190,0,155],
[174,177,174,190,165,185,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,162,172,155,162,146,178],
[184,0,167,177,205,189,176,194],
[178,173,0,177,146,158,163,146],
[168,163,163,0,183,175,173,154],
[185,135,194,157,0,165,198,156],
[178,151,182,165,175,0,160,167],
[194,164,177,167,142,180,0,164],
[162,146,194,186,184,173,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,186,170,172,176,185,175],
[158,0,176,166,161,163,172,164],
[154,164,0,157,168,162,173,165],
[170,174,183,0,163,176,188,182],
[168,179,172,177,0,185,177,192],
[164,177,178,164,155,0,175,181],
[155,168,167,152,163,165,0,159],
[165,176,175,158,148,159,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,165,154,159,179,173,169],
[165,0,160,139,151,170,189,157],
[175,180,0,150,163,154,166,175],
[186,201,190,0,178,170,182,194],
[181,189,177,162,0,160,155,186],
[161,170,186,170,180,0,176,171],
[167,151,174,158,185,164,0,169],
[171,183,165,146,154,169,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,176,165,184,176,166,170],
[179,0,170,166,178,151,163,185],
[164,170,0,165,168,167,139,163],
[175,174,175,0,178,143,138,167],
[156,162,172,162,0,150,163,169],
[164,189,173,197,190,0,174,192],
[174,177,201,202,177,166,0,179],
[170,155,177,173,171,148,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,146,176,182,158,163,138],
[168,0,167,156,178,167,176,193],
[194,173,0,144,195,153,168,182],
[164,184,196,0,199,171,156,181],
[158,162,145,141,0,132,157,144],
[182,173,187,169,208,0,154,201],
[177,164,172,184,183,186,0,190],
[202,147,158,159,196,139,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,179,180,167,166,149,172],
[193,0,182,176,179,175,164,178],
[161,158,0,169,170,173,162,166],
[160,164,171,0,163,168,156,194],
[173,161,170,177,0,158,166,184],
[174,165,167,172,182,0,171,168],
[191,176,178,184,174,169,0,179],
[168,162,174,146,156,172,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,188,186,189,156,196,168],
[159,0,176,166,177,160,205,179],
[152,164,0,151,163,156,177,141],
[154,174,189,0,171,161,188,154],
[151,163,177,169,0,157,184,149],
[184,180,184,179,183,0,198,154],
[144,135,163,152,156,142,0,136],
[172,161,199,186,191,186,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,172,155,169,166,158,168],
[174,0,163,165,163,172,172,184],
[168,177,0,175,180,193,174,168],
[185,175,165,0,183,186,179,185],
[171,177,160,157,0,171,165,172],
[174,168,147,154,169,0,162,164],
[182,168,166,161,175,178,0,184],
[172,156,172,155,168,176,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,200,206,189,193,168,177],
[151,0,189,161,161,151,140,165],
[140,151,0,150,158,158,142,159],
[134,179,190,0,170,182,157,161],
[151,179,182,170,0,164,167,179],
[147,189,182,158,176,0,176,161],
[172,200,198,183,173,164,0,184],
[163,175,181,179,161,179,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,177,185,166,152,156,142],
[189,0,160,160,186,173,187,148],
[163,180,0,175,163,138,169,148],
[155,180,165,0,161,153,156,158],
[174,154,177,179,0,161,174,178],
[188,167,202,187,179,0,217,145],
[184,153,171,184,166,123,0,139],
[198,192,192,182,162,195,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,159,174,170,167,176,162],
[181,0,155,181,161,172,187,167],
[181,185,0,185,167,174,173,188],
[166,159,155,0,161,172,180,169],
[170,179,173,179,0,188,192,180],
[173,168,166,168,152,0,179,174],
[164,153,167,160,148,161,0,161],
[178,173,152,171,160,166,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,151,128,139,159,145,137],
[205,0,153,168,172,181,157,156],
[189,187,0,165,166,191,171,179],
[212,172,175,0,179,195,152,148],
[201,168,174,161,0,194,169,178],
[181,159,149,145,146,0,159,149],
[195,183,169,188,171,181,0,163],
[203,184,161,192,162,191,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,211,172,203,177,168,200],
[190,0,214,159,165,177,173,177],
[129,126,0,147,128,133,146,163],
[168,181,193,0,172,177,153,187],
[137,175,212,168,0,135,130,185],
[163,163,207,163,205,0,119,195],
[172,167,194,187,210,221,0,215],
[140,163,177,153,155,145,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,166,146,175,157,164,169],
[179,0,182,168,184,171,168,172],
[174,158,0,162,183,161,174,172],
[194,172,178,0,181,158,169,174],
[165,156,157,159,0,148,145,166],
[183,169,179,182,192,0,169,188],
[176,172,166,171,195,171,0,176],
[171,168,168,166,174,152,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,202,151,184,170,166,170],
[203,0,202,203,183,238,201,167],
[138,138,0,222,188,192,155,173],
[189,137,118,0,152,206,154,119],
[156,157,152,188,0,190,122,188],
[170,102,148,134,150,0,150,118],
[174,139,185,186,218,190,0,155],
[170,173,167,221,152,222,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,192,167,170,167,182],
[163,0,184,187,179,169,176,177],
[170,156,0,178,172,152,161,177],
[148,153,162,0,173,161,167,143],
[173,161,168,167,0,167,163,148],
[170,171,188,179,173,0,158,185],
[173,164,179,173,177,182,0,172],
[158,163,163,197,192,155,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,190,169,155,169,173,171],
[169,0,175,158,175,176,183,171],
[150,165,0,175,153,165,169,164],
[171,182,165,0,171,182,169,169],
[185,165,187,169,0,173,169,193],
[171,164,175,158,167,0,160,166],
[167,157,171,171,171,180,0,163],
[169,169,176,171,147,174,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,189,171,162,164,161,160],
[169,0,204,195,164,187,174,176],
[151,136,0,174,167,164,150,154],
[169,145,166,0,175,146,161,168],
[178,176,173,165,0,170,183,161],
[176,153,176,194,170,0,167,171],
[179,166,190,179,157,173,0,168],
[180,164,186,172,179,169,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,173,142,154,162,163,162],
[152,0,177,143,170,153,161,172],
[167,163,0,175,173,189,193,174],
[198,197,165,0,159,193,188,187],
[186,170,167,181,0,204,176,146],
[178,187,151,147,136,0,169,165],
[177,179,147,152,164,171,0,168],
[178,168,166,153,194,175,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,185,169,208,197,206,184],
[172,0,170,157,166,167,179,170],
[155,170,0,198,165,147,166,182],
[171,183,142,0,178,175,183,156],
[132,174,175,162,0,187,170,189],
[143,173,193,165,153,0,161,166],
[134,161,174,157,170,179,0,167],
[156,170,158,184,151,174,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,176,179,176,161,180,161],
[175,0,169,169,194,180,188,160],
[164,171,0,173,164,166,175,157],
[161,171,167,0,181,159,195,189],
[164,146,176,159,0,157,179,163],
[179,160,174,181,183,0,184,157],
[160,152,165,145,161,156,0,159],
[179,180,183,151,177,183,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,158,162,160,174,150,176],
[177,0,156,158,161,164,157,173],
[182,184,0,175,170,185,171,186],
[178,182,165,0,154,173,171,177],
[180,179,170,186,0,209,181,201],
[166,176,155,167,131,0,138,165],
[190,183,169,169,159,202,0,205],
[164,167,154,163,139,175,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,168,169,169,181,170,177],
[162,0,156,151,168,165,169,171],
[172,184,0,159,174,168,183,159],
[171,189,181,0,169,166,187,174],
[171,172,166,171,0,159,178,169],
[159,175,172,174,181,0,179,166],
[170,171,157,153,162,161,0,153],
[163,169,181,166,171,174,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,181,186,179,215,170,197],
[182,0,201,198,166,203,147,220],
[159,139,0,135,168,146,155,138],
[154,142,205,0,170,155,144,212],
[161,174,172,170,0,162,134,167],
[125,137,194,185,178,0,196,199],
[170,193,185,196,206,144,0,202],
[143,120,202,128,173,141,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,170,170,165,182,159,152],
[143,0,149,140,169,143,167,157],
[170,191,0,168,179,160,157,160],
[170,200,172,0,188,160,171,165],
[175,171,161,152,0,162,178,179],
[158,197,180,180,178,0,178,163],
[181,173,183,169,162,162,0,183],
[188,183,180,175,161,177,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,167,187,197,177,159,176],
[176,0,134,152,191,142,152,156],
[173,206,0,164,194,194,172,182],
[153,188,176,0,193,201,174,189],
[143,149,146,147,0,160,122,156],
[163,198,146,139,180,0,164,164],
[181,188,168,166,218,176,0,191],
[164,184,158,151,184,176,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,167,185,204,168,203,168],
[152,0,165,186,185,167,153,137],
[173,175,0,172,190,172,188,122],
[155,154,168,0,132,152,155,135],
[136,155,150,208,0,167,205,119],
[172,173,168,188,173,0,187,189],
[137,187,152,185,135,153,0,135],
[172,203,218,205,221,151,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,160,133,140,138,157,158],
[196,0,172,159,170,176,168,177],
[180,168,0,170,161,168,174,179],
[207,181,170,0,197,179,173,195],
[200,170,179,143,0,172,169,169],
[202,164,172,161,168,0,185,169],
[183,172,166,167,171,155,0,189],
[182,163,161,145,171,171,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,165,175,164,160,178,183],
[163,0,167,170,180,169,195,168],
[175,173,0,166,168,160,174,175],
[165,170,174,0,169,170,170,174],
[176,160,172,171,0,160,176,170],
[180,171,180,170,180,0,192,177],
[162,145,166,170,164,148,0,172],
[157,172,165,166,170,163,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,147,161,176,142,170,177],
[150,0,166,147,165,144,151,157],
[193,174,0,170,171,174,159,214],
[179,193,170,0,178,143,171,197],
[164,175,169,162,0,155,166,185],
[198,196,166,197,185,0,185,206],
[170,189,181,169,174,155,0,181],
[163,183,126,143,155,134,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,185,170,177,178,184,159],
[148,0,151,148,164,152,148,151],
[155,189,0,150,165,149,155,160],
[170,192,190,0,174,162,171,158],
[163,176,175,166,0,155,173,177],
[162,188,191,178,185,0,176,174],
[156,192,185,169,167,164,0,157],
[181,189,180,182,163,166,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,164,173,180,178,171,179],
[158,0,159,166,159,158,164,166],
[176,181,0,186,183,159,171,186],
[167,174,154,0,170,158,171,168],
[160,181,157,170,0,156,165,171],
[162,182,181,182,184,0,184,183],
[169,176,169,169,175,156,0,161],
[161,174,154,172,169,157,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,164,165,145,192,176,165],
[181,0,159,169,157,182,172,166],
[176,181,0,190,163,178,186,178],
[175,171,150,0,157,169,165,166],
[195,183,177,183,0,193,201,170],
[148,158,162,171,147,0,161,159],
[164,168,154,175,139,179,0,162],
[175,174,162,174,170,181,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,168,173,186,188,162,165],
[168,0,172,174,185,185,167,165],
[172,168,0,181,189,196,178,186],
[167,166,159,0,167,176,156,157],
[154,155,151,173,0,187,164,187],
[152,155,144,164,153,0,154,158],
[178,173,162,184,176,186,0,155],
[175,175,154,183,153,182,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,184,189,196,181,189,194],
[182,0,171,192,144,181,200,184],
[156,169,0,173,143,134,164,168],
[151,148,167,0,154,154,196,160],
[144,196,197,186,0,186,199,184],
[159,159,206,186,154,0,204,175],
[151,140,176,144,141,136,0,136],
[146,156,172,180,156,165,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,164,166,175,161,182,162],
[166,0,179,150,181,168,176,178],
[176,161,0,155,167,175,170,176],
[174,190,185,0,169,177,188,185],
[165,159,173,171,0,166,170,160],
[179,172,165,163,174,0,184,174],
[158,164,170,152,170,156,0,163],
[178,162,164,155,180,166,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,172,182,168,167,170,172],
[141,0,165,151,164,154,155,147],
[168,175,0,172,169,161,172,167],
[158,189,168,0,176,180,176,181],
[172,176,171,164,0,181,169,161],
[173,186,179,160,159,0,170,166],
[170,185,168,164,171,170,0,183],
[168,193,173,159,179,174,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,172,174,139,136,126,166],
[186,0,170,202,193,188,170,169],
[168,170,0,93,144,129,135,157],
[166,138,247,0,172,158,145,166],
[201,147,196,168,0,154,130,184],
[204,152,211,182,186,0,174,170],
[214,170,205,195,210,166,0,166],
[174,171,183,174,156,170,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,187,164,170,182,181,182],
[168,0,178,183,174,173,171,169],
[153,162,0,178,164,181,172,174],
[176,157,162,0,161,166,169,164],
[170,166,176,179,0,185,165,166],
[158,167,159,174,155,0,153,155],
[159,169,168,171,175,187,0,179],
[158,171,166,176,174,185,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,174,174,181,164,176,185],
[168,0,189,194,188,184,186,180],
[166,151,0,165,176,166,163,175],
[166,146,175,0,169,159,155,162],
[159,152,164,171,0,146,169,164],
[176,156,174,181,194,0,176,179],
[164,154,177,185,171,164,0,173],
[155,160,165,178,176,161,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,169,169,176,178,170,187],
[158,0,175,180,162,182,163,170],
[171,165,0,169,165,185,165,182],
[171,160,171,0,165,178,175,182],
[164,178,175,175,0,174,154,175],
[162,158,155,162,166,0,157,171],
[170,177,175,165,186,183,0,167],
[153,170,158,158,165,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,160,172,164,168,187,156],
[179,0,180,179,185,180,181,155],
[180,160,0,157,177,166,182,150],
[168,161,183,0,167,171,174,184],
[176,155,163,173,0,174,194,151],
[172,160,174,169,166,0,190,159],
[153,159,158,166,146,150,0,154],
[184,185,190,156,189,181,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,168,159,176,173,165,167],
[163,0,157,152,157,170,155,165],
[172,183,0,180,173,179,170,173],
[181,188,160,0,169,176,171,178],
[164,183,167,171,0,172,168,179],
[167,170,161,164,168,0,163,175],
[175,185,170,169,172,177,0,171],
[173,175,167,162,161,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,166,169,166,162,154,155],
[184,0,176,195,187,171,164,178],
[174,164,0,172,183,169,176,175],
[171,145,168,0,182,172,161,182],
[174,153,157,158,0,149,167,154],
[178,169,171,168,191,0,175,170],
[186,176,164,179,173,165,0,169],
[185,162,165,158,186,170,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,182,140,147,156,139,144],
[214,0,222,184,188,208,194,156],
[158,118,0,134,139,127,163,107],
[200,156,206,0,160,153,186,177],
[193,152,201,180,0,162,184,153],
[184,132,213,187,178,0,179,168],
[201,146,177,154,156,161,0,133],
[196,184,233,163,187,172,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,185,194,178,175,189,176],
[176,0,186,178,158,171,213,184],
[155,154,0,202,165,150,200,155],
[146,162,138,0,138,129,166,109],
[162,182,175,202,0,176,180,169],
[165,169,190,211,164,0,163,176],
[151,127,140,174,160,177,0,177],
[164,156,185,231,171,164,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,134,138,139,137,134,161],
[204,0,160,170,174,161,178,195],
[206,180,0,162,187,176,170,192],
[202,170,178,0,177,179,181,193],
[201,166,153,163,0,178,163,183],
[203,179,164,161,162,0,171,183],
[206,162,170,159,177,169,0,173],
[179,145,148,147,157,157,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,173,185,177,161,173,183],
[152,0,168,158,165,167,170,184],
[167,172,0,171,183,176,172,197],
[155,182,169,0,182,174,172,194],
[163,175,157,158,0,166,178,181],
[179,173,164,166,174,0,182,188],
[167,170,168,168,162,158,0,173],
[157,156,143,146,159,152,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,167,180,164,170,168,170],
[165,0,158,186,159,155,185,167],
[173,182,0,186,161,161,185,180],
[160,154,154,0,160,154,189,171],
[176,181,179,180,0,166,177,171],
[170,185,179,186,174,0,180,175],
[172,155,155,151,163,160,0,147],
[170,173,160,169,169,165,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,175,185,156,158,180,176],
[174,0,177,179,167,169,177,189],
[165,163,0,174,162,172,163,175],
[155,161,166,0,154,155,172,168],
[184,173,178,186,0,170,182,183],
[182,171,168,185,170,0,178,178],
[160,163,177,168,158,162,0,172],
[164,151,165,172,157,162,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,164,158,169,162,171,181],
[161,0,161,164,150,158,161,173],
[176,179,0,169,163,160,169,193],
[182,176,171,0,168,177,157,181],
[171,190,177,172,0,163,182,191],
[178,182,180,163,177,0,171,195],
[169,179,171,183,158,169,0,183],
[159,167,147,159,149,145,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,135,142,187,164,150,152],
[173,0,141,153,165,142,186,161],
[205,199,0,151,183,152,141,151],
[198,187,189,0,173,189,163,142],
[153,175,157,167,0,152,152,161],
[176,198,188,151,188,0,176,140],
[190,154,199,177,188,164,0,196],
[188,179,189,198,179,200,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,143,172,139,172,108,167],
[217,0,174,157,127,186,139,197],
[197,166,0,136,120,214,168,148],
[168,183,204,0,169,182,139,150],
[201,213,220,171,0,186,185,149],
[168,154,126,158,154,0,138,137],
[232,201,172,201,155,202,0,198],
[173,143,192,190,191,203,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,199,159,158,198,178,171],
[165,0,182,147,126,172,157,115],
[141,158,0,159,126,177,159,104],
[181,193,181,0,171,187,191,157],
[182,214,214,169,0,189,192,171],
[142,168,163,153,151,0,151,129],
[162,183,181,149,148,189,0,167],
[169,225,236,183,169,211,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,177,204,182,188,164,192],
[126,0,149,164,154,167,162,168],
[163,191,0,209,168,171,153,182],
[136,176,131,0,148,140,157,179],
[158,186,172,192,0,168,166,162],
[152,173,169,200,172,0,159,177],
[176,178,187,183,174,181,0,170],
[148,172,158,161,178,163,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,159,149,156,151,155,160],
[196,0,177,177,174,174,157,177],
[181,163,0,185,158,178,175,167],
[191,163,155,0,163,169,152,161],
[184,166,182,177,0,163,155,166],
[189,166,162,171,177,0,164,153],
[185,183,165,188,185,176,0,152],
[180,163,173,179,174,187,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,164,141,170,164,167,161],
[182,0,173,168,168,196,171,191],
[176,167,0,143,181,173,159,171],
[199,172,197,0,183,195,157,177],
[170,172,159,157,0,174,156,166],
[176,144,167,145,166,0,145,170],
[173,169,181,183,184,195,0,194],
[179,149,169,163,174,170,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,189,179,180,153,166,170],
[143,0,157,167,183,177,148,164],
[151,183,0,189,190,179,170,162],
[161,173,151,0,163,144,147,137],
[160,157,150,177,0,145,152,166],
[187,163,161,196,195,0,148,170],
[174,192,170,193,188,192,0,183],
[170,176,178,203,174,170,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,169,178,167,186,181,174],
[152,0,164,167,164,163,171,162],
[171,176,0,184,170,188,182,172],
[162,173,156,0,175,190,193,177],
[173,176,170,165,0,176,184,172],
[154,177,152,150,164,0,173,161],
[159,169,158,147,156,167,0,157],
[166,178,168,163,168,179,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,171,170,195,195,178,167],
[181,0,192,183,160,195,159,186],
[169,148,0,159,141,154,134,127],
[170,157,181,0,169,148,161,172],
[145,180,199,171,0,162,161,160],
[145,145,186,192,178,0,167,149],
[162,181,206,179,179,173,0,185],
[173,154,213,168,180,191,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,163,164,158,165,157,171],
[169,0,174,181,169,170,167,168],
[177,166,0,178,172,158,157,174],
[176,159,162,0,165,169,167,158],
[182,171,168,175,0,158,160,171],
[175,170,182,171,182,0,156,175],
[183,173,183,173,180,184,0,164],
[169,172,166,182,169,165,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,166,172,166,186,175,175],
[177,0,163,178,157,178,174,178],
[174,177,0,185,168,196,180,176],
[168,162,155,0,173,175,165,176],
[174,183,172,167,0,187,175,169],
[154,162,144,165,153,0,168,165],
[165,166,160,175,165,172,0,169],
[165,162,164,164,171,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,154,229,266,154,155,229],
[149,0,188,76,186,151,151,115],
[186,152,0,152,261,114,189,228],
[111,264,188,0,261,188,189,227],
[74,154,79,79,0,114,152,153],
[186,189,226,152,226,0,226,188],
[185,189,151,151,188,114,0,151],
[111,225,112,113,187,152,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,166,163,174,181,174,189],
[183,0,169,171,189,174,182,188],
[174,171,0,168,171,177,179,187],
[177,169,172,0,164,197,164,173],
[166,151,169,176,0,188,173,182],
[159,166,163,143,152,0,162,168],
[166,158,161,176,167,178,0,174],
[151,152,153,167,158,172,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,185,173,156,185,191,179],
[191,0,175,168,170,205,185,178],
[155,165,0,155,159,190,167,174],
[167,172,185,0,173,190,179,168],
[184,170,181,167,0,191,186,179],
[155,135,150,150,149,0,157,146],
[149,155,173,161,154,183,0,174],
[161,162,166,172,161,194,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,137,184,185,200,157,171],
[154,0,106,168,167,170,155,197],
[203,234,0,200,217,230,170,200],
[156,172,140,0,157,216,157,218],
[155,173,123,183,0,200,155,202],
[140,170,110,124,140,0,94,140],
[183,185,170,183,185,246,0,186],
[169,143,140,122,138,200,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,139,177,158,178,160,162],
[171,0,171,173,163,179,163,166],
[201,169,0,176,198,186,185,182],
[163,167,164,0,174,167,161,155],
[182,177,142,166,0,173,160,172],
[162,161,154,173,167,0,156,157],
[180,177,155,179,180,184,0,175],
[178,174,158,185,168,183,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,159,167,166,174,153,181],
[181,0,182,163,169,152,159,196],
[181,158,0,163,181,167,153,174],
[173,177,177,0,164,165,160,174],
[174,171,159,176,0,157,166,175],
[166,188,173,175,183,0,175,167],
[187,181,187,180,174,165,0,185],
[159,144,166,166,165,173,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,157,162,180,170,176,172],
[172,0,170,160,164,166,169,167],
[183,170,0,177,177,182,192,177],
[178,180,163,0,167,174,170,179],
[160,176,163,173,0,175,164,179],
[170,174,158,166,165,0,165,178],
[164,171,148,170,176,175,0,168],
[168,173,163,161,161,162,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,178,171,190,158,169,159],
[169,0,185,166,166,181,189,161],
[162,155,0,166,175,155,177,147],
[169,174,174,0,188,165,170,146],
[150,174,165,152,0,162,145,147],
[182,159,185,175,178,0,182,175],
[171,151,163,170,195,158,0,176],
[181,179,193,194,193,165,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,156,159,171,158,175,159],
[185,0,176,179,175,164,191,176],
[184,164,0,170,170,171,191,171],
[181,161,170,0,177,160,171,157],
[169,165,170,163,0,158,173,160],
[182,176,169,180,182,0,186,165],
[165,149,149,169,167,154,0,174],
[181,164,169,183,180,175,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,255,255,255,85,170,340],
[170,0,255,170,170,85,85,170],
[85,85,0,170,170,85,85,170],
[85,170,170,0,255,85,85,255],
[85,170,170,85,0,85,0,170],
[255,255,255,255,255,0,85,255],
[170,255,255,255,340,255,0,255],
[0,170,170,85,170,85,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,159,171,188,177,178,172],
[169,0,173,179,184,174,182,169],
[181,167,0,195,174,200,181,169],
[169,161,145,0,156,148,161,171],
[152,156,166,184,0,174,187,180],
[163,166,140,192,166,0,180,170],
[162,158,159,179,153,160,0,150],
[168,171,171,169,160,170,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,176,170,190,176,175,189],
[168,0,164,180,181,177,183,189],
[164,176,0,185,182,185,178,196],
[170,160,155,0,177,169,167,173],
[150,159,158,163,0,176,165,184],
[164,163,155,171,164,0,161,170],
[165,157,162,173,175,179,0,176],
[151,151,144,167,156,170,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,167,174,153,155,158,166],
[198,0,155,189,177,171,151,150],
[173,185,0,175,187,159,167,177],
[166,151,165,0,172,160,149,152],
[187,163,153,168,0,160,163,169],
[185,169,181,180,180,0,165,159],
[182,189,173,191,177,175,0,167],
[174,190,163,188,171,181,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,188,170,178,187,165,188],
[156,0,167,169,169,182,167,174],
[152,173,0,166,166,165,168,179],
[170,171,174,0,167,170,166,175],
[162,171,174,173,0,181,171,191],
[153,158,175,170,159,0,171,170],
[175,173,172,174,169,169,0,165],
[152,166,161,165,149,170,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,173,155,176,161,159,165],
[180,0,146,155,186,158,165,149],
[167,194,0,158,195,177,173,171],
[185,185,182,0,197,170,185,164],
[164,154,145,143,0,150,154,154],
[179,182,163,170,190,0,174,172],
[181,175,167,155,186,166,0,166],
[175,191,169,176,186,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,171,191,203,188,167,202],
[158,0,184,178,211,221,160,176],
[169,156,0,185,211,220,176,183],
[149,162,155,0,206,209,175,152],
[137,129,129,134,0,159,157,152],
[152,119,120,131,181,0,174,143],
[173,180,164,165,183,166,0,170],
[138,164,157,188,188,197,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,185,166,199,167,174,187],
[167,0,188,177,197,190,179,194],
[155,152,0,140,157,148,146,149],
[174,163,200,0,157,164,173,178],
[141,143,183,183,0,162,156,180],
[173,150,192,176,178,0,168,196],
[166,161,194,167,184,172,0,165],
[153,146,191,162,160,144,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,176,166,178,187,175,156],
[168,0,162,152,161,178,162,168],
[164,178,0,168,176,176,157,165],
[174,188,172,0,192,176,163,173],
[162,179,164,148,0,172,161,154],
[153,162,164,164,168,0,150,156],
[165,178,183,177,179,190,0,166],
[184,172,175,167,186,184,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,180,188,169,176,208,185],
[149,0,156,167,151,149,179,180],
[160,184,0,168,174,162,193,157],
[152,173,172,0,159,170,173,162],
[171,189,166,181,0,186,204,173],
[164,191,178,170,154,0,179,166],
[132,161,147,167,136,161,0,159],
[155,160,183,178,167,174,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,154,160,165,166,170,162],
[176,0,164,173,190,187,174,181],
[186,176,0,164,179,181,196,167],
[180,167,176,0,174,179,187,176],
[175,150,161,166,0,172,182,176],
[174,153,159,161,168,0,182,172],
[170,166,144,153,158,158,0,170],
[178,159,173,164,164,168,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,173,174,183,171,161,188],
[181,0,179,167,180,185,173,178],
[167,161,0,184,159,167,169,153],
[166,173,156,0,175,166,148,175],
[157,160,181,165,0,175,180,164],
[169,155,173,174,165,0,162,182],
[179,167,171,192,160,178,0,196],
[152,162,187,165,176,158,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,221,168,205,137,222,172],
[100,0,115,137,188,104,202,148],
[119,225,0,172,240,123,190,138],
[172,203,168,0,189,156,188,186],
[135,152,100,151,0,136,169,152],
[203,236,217,184,204,0,218,166],
[118,138,150,152,171,122,0,120],
[168,192,202,154,188,174,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,153,188,161,188,204,197],
[158,0,179,177,204,192,200,184],
[187,161,0,186,173,199,186,176],
[152,163,154,0,136,196,173,185],
[179,136,167,204,0,185,195,191],
[152,148,141,144,155,0,176,167],
[136,140,154,167,145,164,0,143],
[143,156,164,155,149,173,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,159,172,162,178,169,144],
[174,0,159,178,169,171,164,167],
[181,181,0,177,178,169,160,173],
[168,162,163,0,173,166,158,164],
[178,171,162,167,0,171,167,163],
[162,169,171,174,169,0,156,173],
[171,176,180,182,173,184,0,168],
[196,173,167,176,177,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,142,175,125,159,142,196],
[181,0,179,231,161,196,178,232],
[198,161,0,195,162,160,214,195],
[165,109,145,0,126,142,126,181],
[215,179,178,214,0,159,161,177],
[181,144,180,198,181,0,215,251],
[198,162,126,214,179,125,0,162],
[144,108,145,159,163,89,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,159,158,178,166,169,176],
[183,0,186,170,187,178,180,176],
[181,154,0,166,182,178,176,187],
[182,170,174,0,173,182,187,194],
[162,153,158,167,0,155,160,170],
[174,162,162,158,185,0,177,185],
[171,160,164,153,180,163,0,171],
[164,164,153,146,170,155,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,166,181,173,168,171,167],
[178,0,181,181,170,175,165,163],
[174,159,0,184,168,162,168,168],
[159,159,156,0,166,153,148,156],
[167,170,172,174,0,155,165,162],
[172,165,178,187,185,0,173,181],
[169,175,172,192,175,167,0,182],
[173,177,172,184,178,159,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,165,180,157,173,174,173],
[176,0,173,191,148,191,175,172],
[175,167,0,173,169,176,158,149],
[160,149,167,0,150,178,171,152],
[183,192,171,190,0,181,174,168],
[167,149,164,162,159,0,131,159],
[166,165,182,169,166,209,0,153],
[167,168,191,188,172,181,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,188,178,175,186,191,164],
[135,0,140,140,140,182,130,139],
[152,200,0,142,147,129,133,143],
[162,200,198,0,154,186,149,147],
[165,200,193,186,0,192,166,184],
[154,158,211,154,148,0,172,141],
[149,210,207,191,174,168,0,197],
[176,201,197,193,156,199,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,179,165,177,163,161,161],
[172,0,175,167,161,175,165,171],
[161,165,0,178,174,170,169,170],
[175,173,162,0,169,176,177,170],
[163,179,166,171,0,170,181,145],
[177,165,170,164,170,0,193,177],
[179,175,171,163,159,147,0,160],
[179,169,170,170,195,163,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,184,132,156,187,153,167],
[180,0,169,157,170,168,151,171],
[156,171,0,183,143,163,148,169],
[208,183,157,0,193,201,178,198],
[184,170,197,147,0,188,173,187],
[153,172,177,139,152,0,165,165],
[187,189,192,162,167,175,0,164],
[173,169,171,142,153,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,180,169,171,167,159,173],
[182,0,182,180,172,167,177,186],
[160,158,0,176,156,166,163,171],
[171,160,164,0,165,170,163,179],
[169,168,184,175,0,176,167,176],
[173,173,174,170,164,0,171,187],
[181,163,177,177,173,169,0,178],
[167,154,169,161,164,153,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,196,185,187,157,169,208],
[174,0,173,156,193,184,167,186],
[144,167,0,154,177,154,174,161],
[155,184,186,0,191,184,176,170],
[153,147,163,149,0,144,179,151],
[183,156,186,156,196,0,174,180],
[171,173,166,164,161,166,0,156],
[132,154,179,170,189,160,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,173,178,174,176,169,164],
[183,0,180,192,177,188,170,185],
[167,160,0,188,161,170,164,180],
[162,148,152,0,169,161,162,176],
[166,163,179,171,0,171,170,175],
[164,152,170,179,169,0,160,165],
[171,170,176,178,170,180,0,181],
[176,155,160,164,165,175,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,184,163,192,180,160,173],
[157,0,181,166,169,163,156,167],
[156,159,0,158,162,169,145,176],
[177,174,182,0,184,182,150,162],
[148,171,178,156,0,170,157,167],
[160,177,171,158,170,0,177,161],
[180,184,195,190,183,163,0,186],
[167,173,164,178,173,179,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,166,162,172,196,171,154],
[155,0,157,172,177,188,138,128],
[174,183,0,148,167,183,142,138],
[178,168,192,0,156,187,151,181],
[168,163,173,184,0,201,145,140],
[144,152,157,153,139,0,114,127],
[169,202,198,189,195,226,0,154],
[186,212,202,159,200,213,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,203,188,198,193,187,161],
[148,0,208,183,190,178,143,151],
[137,132,0,163,174,125,147,150],
[152,157,177,0,172,158,154,151],
[142,150,166,168,0,164,148,135],
[147,162,215,182,176,0,153,173],
[153,197,193,186,192,187,0,162],
[179,189,190,189,205,167,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,180,194,146,183,173,181],
[143,0,154,149,139,150,152,187],
[160,186,0,154,164,165,183,197],
[146,191,186,0,170,167,174,207],
[194,201,176,170,0,166,190,195],
[157,190,175,173,174,0,183,198],
[167,188,157,166,150,157,0,154],
[159,153,143,133,145,142,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,200,169,175,166,181,175],
[167,0,195,156,178,163,141,172],
[140,145,0,131,165,138,131,174],
[171,184,209,0,183,176,168,192],
[165,162,175,157,0,166,146,177],
[174,177,202,164,174,0,168,170],
[159,199,209,172,194,172,0,199],
[165,168,166,148,163,170,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,166,165,164,161,164,169],
[156,0,172,153,160,163,177,159],
[174,168,0,177,179,182,165,172],
[175,187,163,0,169,169,167,176],
[176,180,161,171,0,168,158,178],
[179,177,158,171,172,0,181,164],
[176,163,175,173,182,159,0,152],
[171,181,168,164,162,176,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,171,159,178,165,161,153],
[176,0,169,163,167,150,165,160],
[169,171,0,178,174,173,160,172],
[181,177,162,0,173,175,181,161],
[162,173,166,167,0,138,168,166],
[175,190,167,165,202,0,172,174],
[179,175,180,159,172,168,0,162],
[187,180,168,179,174,166,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,170,0,170,170,0],
[340,0,0,340,170,170,170,340],
[340,340,0,340,170,340,170,340],
[170,0,0,0,170,170,170,0],
[340,170,170,170,0,170,170,170],
[170,170,0,170,170,0,170,170],
[170,170,170,170,170,170,0,170],
[340,0,0,340,170,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,185,175,165,170,177,181],
[168,0,171,183,183,199,169,168],
[155,169,0,172,179,178,160,168],
[165,157,168,0,170,164,148,152],
[175,157,161,170,0,168,146,158],
[170,141,162,176,172,0,141,159],
[163,171,180,192,194,199,0,182],
[159,172,172,188,182,181,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,179,173,171,169,186,206],
[169,0,173,158,145,146,166,182],
[161,167,0,153,164,198,170,184],
[167,182,187,0,172,159,187,227],
[169,195,176,168,0,160,194,192],
[171,194,142,181,180,0,178,194],
[154,174,170,153,146,162,0,178],
[134,158,156,113,148,146,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,163,155,178,162,163,146],
[182,0,183,149,172,156,182,169],
[177,157,0,155,198,165,156,158],
[185,191,185,0,177,166,173,178],
[162,168,142,163,0,143,145,122],
[178,184,175,174,197,0,186,166],
[177,158,184,167,195,154,0,157],
[194,171,182,162,218,174,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,172,178,171,171,183,180],
[174,0,166,174,164,177,169,181],
[168,174,0,174,158,180,167,178],
[162,166,166,0,154,165,160,175],
[169,176,182,186,0,174,184,183],
[169,163,160,175,166,0,171,172],
[157,171,173,180,156,169,0,179],
[160,159,162,165,157,168,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,193,192,143,143,241,192],
[195,0,195,146,143,96,194,145],
[147,145,0,145,145,143,194,194],
[148,194,195,0,192,192,241,241],
[197,197,195,148,0,194,196,98],
[197,244,197,148,146,0,243,148],
[99,146,146,99,144,97,0,97],
[148,195,146,99,242,192,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,167,141,145,166,169,127],
[189,0,165,185,174,172,189,192],
[173,175,0,183,187,163,182,167],
[199,155,157,0,157,155,168,150],
[195,166,153,183,0,194,188,159],
[174,168,177,185,146,0,163,183],
[171,151,158,172,152,177,0,159],
[213,148,173,190,181,157,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,185,172,177,175,170,178],
[181,0,187,176,186,185,189,165],
[155,153,0,165,161,182,173,171],
[168,164,175,0,165,181,164,168],
[163,154,179,175,0,180,173,175],
[165,155,158,159,160,0,166,152],
[170,151,167,176,167,174,0,168],
[162,175,169,172,165,188,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,170,185,191,174,183,174],
[181,0,184,169,183,189,183,175],
[170,156,0,157,202,181,167,164],
[155,171,183,0,173,185,174,167],
[149,157,138,167,0,178,175,158],
[166,151,159,155,162,0,179,163],
[157,157,173,166,165,161,0,178],
[166,165,176,173,182,177,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,177,186,184,155,182,189],
[175,0,161,179,191,170,191,184],
[163,179,0,176,176,171,181,178],
[154,161,164,0,184,155,181,160],
[156,149,164,156,0,159,174,161],
[185,170,169,185,181,0,193,190],
[158,149,159,159,166,147,0,164],
[151,156,162,180,179,150,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,176,155,178,179,172,193],
[164,0,180,153,179,168,184,189],
[164,160,0,159,163,165,155,187],
[185,187,181,0,177,191,170,182],
[162,161,177,163,0,149,161,174],
[161,172,175,149,191,0,172,189],
[168,156,185,170,179,168,0,186],
[147,151,153,158,166,151,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,153,149,152,179,151,152],
[171,0,173,154,161,178,156,159],
[187,167,0,156,160,184,167,174],
[191,186,184,0,167,194,195,186],
[188,179,180,173,0,201,183,161],
[161,162,156,146,139,0,152,159],
[189,184,173,145,157,188,0,159],
[188,181,166,154,179,181,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,179,158,151,202,173,166],
[168,0,176,171,173,181,169,165],
[161,164,0,166,149,170,168,158],
[182,169,174,0,172,190,176,169],
[189,167,191,168,0,188,183,182],
[138,159,170,150,152,0,155,161],
[167,171,172,164,157,185,0,161],
[174,175,182,171,158,179,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,192,169,182,179,178,157],
[169,0,174,153,163,162,173,149],
[148,166,0,158,177,155,146,140],
[171,187,182,0,177,167,167,173],
[158,177,163,163,0,181,161,156],
[161,178,185,173,159,0,184,148],
[162,167,194,173,179,156,0,152],
[183,191,200,167,184,192,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,181,170,171,173,163,178],
[158,0,170,178,171,164,167,175],
[159,170,0,167,159,167,154,158],
[170,162,173,0,154,167,169,169],
[169,169,181,186,0,160,183,168],
[167,176,173,173,180,0,164,168],
[177,173,186,171,157,176,0,164],
[162,165,182,171,172,172,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,163,156,165,176,158,166],
[160,0,181,171,163,174,158,157],
[177,159,0,161,184,199,172,155],
[184,169,179,0,179,188,189,176],
[175,177,156,161,0,190,173,148],
[164,166,141,152,150,0,144,144],
[182,182,168,151,167,196,0,154],
[174,183,185,164,192,196,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,146,148,156,144,157,170],
[172,0,160,156,165,153,189,191],
[194,180,0,157,160,173,172,183],
[192,184,183,0,149,178,189,211],
[184,175,180,191,0,164,179,196],
[196,187,167,162,176,0,192,193],
[183,151,168,151,161,148,0,168],
[170,149,157,129,144,147,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,150,179,176,144,168,176],
[193,0,143,161,178,142,176,169],
[190,197,0,159,195,166,192,171],
[161,179,181,0,183,174,165,153],
[164,162,145,157,0,145,148,164],
[196,198,174,166,195,0,190,198],
[172,164,148,175,192,150,0,183],
[164,171,169,187,176,142,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,168,172,152,161,184],
[171,0,164,166,175,163,153,180],
[174,176,0,166,175,158,169,186],
[172,174,174,0,183,175,170,197],
[168,165,165,157,0,158,161,194],
[188,177,182,165,182,0,166,197],
[179,187,171,170,179,174,0,190],
[156,160,154,143,146,143,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,141,164,180,195,161,160],
[146,0,131,176,182,180,150,124],
[199,209,0,160,160,195,166,204],
[176,164,180,0,201,195,177,150],
[160,158,180,139,0,161,172,169],
[145,160,145,145,179,0,138,186],
[179,190,174,163,168,202,0,149],
[180,216,136,190,171,154,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,159,164,180,183,140,163],
[169,0,154,162,171,160,147,168],
[181,186,0,180,184,180,170,189],
[176,178,160,0,168,185,164,177],
[160,169,156,172,0,182,153,169],
[157,180,160,155,158,0,151,170],
[200,193,170,176,187,189,0,186],
[177,172,151,163,171,170,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,231,184,170,190,174],
[159,0,159,203,174,130,152,147],
[172,181,0,221,157,143,145,149],
[109,137,119,0,111,100,139,127],
[156,166,183,229,0,166,148,163],
[170,210,197,240,174,0,198,187],
[150,188,195,201,192,142,0,166],
[166,193,191,213,177,153,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,176,178,186,183,169,189],
[185,0,186,212,206,183,167,197],
[164,154,0,177,183,170,205,187],
[162,128,163,0,180,136,135,153],
[154,134,157,160,0,170,147,161],
[157,157,170,204,170,0,166,164],
[171,173,135,205,193,174,0,192],
[151,143,153,187,179,176,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,166,164,178,162,155,190],
[182,0,163,182,164,171,156,173],
[174,177,0,166,164,182,167,181],
[176,158,174,0,149,153,159,182],
[162,176,176,191,0,180,168,190],
[178,169,158,187,160,0,179,196],
[185,184,173,181,172,161,0,193],
[150,167,159,158,150,144,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,171,193,212,171,196,216],
[189,0,178,201,188,170,149,202],
[169,162,0,139,201,149,151,170],
[147,139,201,0,211,125,106,183],
[128,152,139,129,0,126,142,185],
[169,170,191,215,214,0,158,193],
[144,191,189,234,198,182,0,193],
[124,138,170,157,155,147,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,181,173,180,170,174,156],
[173,0,168,163,185,166,157,154],
[159,172,0,150,175,137,163,164],
[167,177,190,0,181,168,171,171],
[160,155,165,159,0,149,161,157],
[170,174,203,172,191,0,194,183],
[166,183,177,169,179,146,0,145],
[184,186,176,169,183,157,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,194,202,168,188,185,179],
[124,0,136,141,138,115,149,137],
[146,204,0,177,162,171,175,175],
[138,199,163,0,174,145,157,177],
[172,202,178,166,0,178,149,144],
[152,225,169,195,162,0,184,190],
[155,191,165,183,191,156,0,165],
[161,203,165,163,196,150,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,170,189,176,163,168,182],
[172,0,161,185,167,153,174,173],
[170,179,0,209,182,173,186,189],
[151,155,131,0,155,144,163,162],
[164,173,158,185,0,163,185,182],
[177,187,167,196,177,0,191,187],
[172,166,154,177,155,149,0,179],
[158,167,151,178,158,153,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,153,179,163,159,164,162],
[171,0,175,179,179,185,163,176],
[187,165,0,182,194,190,166,185],
[161,161,158,0,177,180,173,175],
[177,161,146,163,0,183,167,167],
[181,155,150,160,157,0,152,160],
[176,177,174,167,173,188,0,184],
[178,164,155,165,173,180,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,172,165,162,172,158,167],
[172,0,160,169,164,180,169,175],
[168,180,0,160,158,170,180,174],
[175,171,180,0,164,179,178,180],
[178,176,182,176,0,179,176,170],
[168,160,170,161,161,0,163,164],
[182,171,160,162,164,177,0,171],
[173,165,166,160,170,176,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,182,175,168,170,168],
[169,0,203,174,171,179,168,186],
[167,137,0,178,136,156,145,158],
[158,166,162,0,135,175,162,167],
[165,169,204,205,0,179,183,193],
[172,161,184,165,161,0,161,188],
[170,172,195,178,157,179,0,170],
[172,154,182,173,147,152,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,167,166,168,170,168,162],
[167,0,167,164,177,179,160,175],
[173,173,0,169,171,170,165,178],
[174,176,171,0,172,173,163,187],
[172,163,169,168,0,168,171,171],
[170,161,170,167,172,0,159,171],
[172,180,175,177,169,181,0,166],
[178,165,162,153,169,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,182,158,172,160,167,180],
[186,0,176,170,179,184,187,168],
[158,164,0,146,179,157,167,169],
[182,170,194,0,199,193,181,181],
[168,161,161,141,0,180,175,156],
[180,156,183,147,160,0,170,168],
[173,153,173,159,165,170,0,161],
[160,172,171,159,184,172,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,187,165,168,173,183,175],
[172,0,187,179,173,191,175,170],
[153,153,0,169,161,193,177,158],
[175,161,171,0,174,195,171,174],
[172,167,179,166,0,187,181,171],
[167,149,147,145,153,0,173,152],
[157,165,163,169,159,167,0,149],
[165,170,182,166,169,188,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,150,149,181,139,161,125],
[203,0,161,217,191,155,163,173],
[190,179,0,163,170,152,140,148],
[191,123,177,0,190,130,148,138],
[159,149,170,150,0,138,109,127],
[201,185,188,210,202,0,179,157],
[179,177,200,192,231,161,0,167],
[215,167,192,202,213,183,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,159,156,187,167,172,153],
[169,0,166,154,175,154,179,158],
[181,174,0,158,177,166,180,173],
[184,186,182,0,170,155,187,156],
[153,165,163,170,0,151,169,150],
[173,186,174,185,189,0,195,162],
[168,161,160,153,171,145,0,146],
[187,182,167,184,190,178,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,181,182,194,202,199,188],
[184,0,164,159,181,184,186,179],
[159,176,0,159,141,176,160,164],
[158,181,181,0,185,163,184,168],
[146,159,199,155,0,168,174,181],
[138,156,164,177,172,0,155,178],
[141,154,180,156,166,185,0,169],
[152,161,176,172,159,162,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,167,187,194,171,170,193],
[154,0,162,167,175,145,151,161],
[173,178,0,185,183,164,160,168],
[153,173,155,0,165,151,161,164],
[146,165,157,175,0,144,157,160],
[169,195,176,189,196,0,180,178],
[170,189,180,179,183,160,0,175],
[147,179,172,176,180,162,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,165,163,140,159,163,154],
[176,0,155,185,154,161,173,165],
[175,185,0,195,159,171,183,169],
[177,155,145,0,170,152,153,167],
[200,186,181,170,0,163,183,168],
[181,179,169,188,177,0,177,177],
[177,167,157,187,157,163,0,179],
[186,175,171,173,172,163,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,179,180,180,160,186,171],
[168,0,157,165,150,165,176,157],
[161,183,0,167,169,165,184,157],
[160,175,173,0,170,160,178,146],
[160,190,171,170,0,166,179,158],
[180,175,175,180,174,0,197,168],
[154,164,156,162,161,143,0,151],
[169,183,183,194,182,172,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,162,176,201,176,187,198],
[162,0,176,149,159,141,163,161],
[178,164,0,151,172,168,167,167],
[164,191,189,0,176,203,186,185],
[139,181,168,164,0,175,179,194],
[164,199,172,137,165,0,178,174],
[153,177,173,154,161,162,0,185],
[142,179,173,155,146,166,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,163,185,161,183,175,196],
[142,0,150,170,164,160,160,165],
[177,190,0,173,176,168,188,175],
[155,170,167,0,173,182,167,184],
[179,176,164,167,0,178,170,176],
[157,180,172,158,162,0,156,167],
[165,180,152,173,170,184,0,178],
[144,175,165,156,164,173,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,153,159,170,164,201,184],
[181,0,161,190,183,169,202,177],
[187,179,0,167,188,185,187,176],
[181,150,173,0,202,171,194,171],
[170,157,152,138,0,150,188,169],
[176,171,155,169,190,0,201,172],
[139,138,153,146,152,139,0,150],
[156,163,164,169,171,168,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,188,179,166,177,158,170],
[168,0,196,168,172,180,176,176],
[152,144,0,149,167,165,148,154],
[161,172,191,0,172,170,162,170],
[174,168,173,168,0,165,157,162],
[163,160,175,170,175,0,172,155],
[182,164,192,178,183,168,0,169],
[170,164,186,170,178,185,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,186,174,168,171,184,183],
[155,0,166,172,154,166,171,155],
[154,174,0,165,138,165,169,169],
[166,168,175,0,180,164,163,154],
[172,186,202,160,0,177,172,179],
[169,174,175,176,163,0,172,163],
[156,169,171,177,168,168,0,161],
[157,185,171,186,161,177,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,167,160,163,174,164,168],
[166,0,173,163,171,172,177,168],
[173,167,0,170,162,174,169,177],
[180,177,170,0,170,165,184,191],
[177,169,178,170,0,178,184,172],
[166,168,166,175,162,0,163,166],
[176,163,171,156,156,177,0,167],
[172,172,163,149,168,174,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,203,172,192,192,152,157],
[123,0,197,169,172,177,148,162],
[137,143,0,170,173,158,155,142],
[168,171,170,0,189,173,150,175],
[148,168,167,151,0,170,137,139],
[148,163,182,167,170,0,135,151],
[188,192,185,190,203,205,0,165],
[183,178,198,165,201,189,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,160,214,178,161,163,127],
[197,0,91,216,144,198,145,143],
[180,249,0,196,181,163,163,126],
[126,124,144,0,160,129,110,127],
[162,196,159,180,0,128,126,143],
[179,142,177,211,212,0,178,180],
[177,195,177,230,214,162,0,177],
[213,197,214,213,197,160,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,159,168,181,170,174,212],
[165,0,182,173,185,179,187,186],
[181,158,0,157,163,189,172,177],
[172,167,183,0,182,164,198,195],
[159,155,177,158,0,151,160,155],
[170,161,151,176,189,0,175,184],
[166,153,168,142,180,165,0,172],
[128,154,163,145,185,156,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,178,167,175,147,173,134],
[186,0,178,159,170,173,188,170],
[162,162,0,150,155,157,162,142],
[173,181,190,0,196,181,194,153],
[165,170,185,144,0,154,176,137],
[193,167,183,159,186,0,188,148],
[167,152,178,146,164,152,0,153],
[206,170,198,187,203,192,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,208,172,194,163,183,178],
[147,0,190,164,183,152,161,174],
[132,150,0,148,159,138,122,131],
[168,176,192,0,203,175,147,201],
[146,157,181,137,0,154,166,151],
[177,188,202,165,186,0,172,199],
[157,179,218,193,174,168,0,179],
[162,166,209,139,189,141,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,152,177,156,137,124,163],
[187,0,174,185,177,155,164,173],
[188,166,0,183,181,178,180,187],
[163,155,157,0,154,139,146,173],
[184,163,159,186,0,164,150,192],
[203,185,162,201,176,0,173,199],
[216,176,160,194,190,167,0,199],
[177,167,153,167,148,141,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,182,159,187,152,155,175],
[173,0,148,170,141,125,140,168],
[158,192,0,148,166,152,159,161],
[181,170,192,0,204,170,145,185],
[153,199,174,136,0,143,153,189],
[188,215,188,170,197,0,171,191],
[185,200,181,195,187,169,0,195],
[165,172,179,155,151,149,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,175,176,173,179,167,171],
[169,0,156,131,170,156,161,181],
[165,184,0,167,175,172,173,184],
[164,209,173,0,203,191,182,187],
[167,170,165,137,0,154,149,171],
[161,184,168,149,186,0,154,175],
[173,179,167,158,191,186,0,175],
[169,159,156,153,169,165,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,167,174,173,162,177,170],
[177,0,169,176,168,173,174,166],
[173,171,0,188,171,164,167,156],
[166,164,152,0,174,170,165,168],
[167,172,169,166,0,167,171,156],
[178,167,176,170,173,0,171,165],
[163,166,173,175,169,169,0,171],
[170,174,184,172,184,175,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,182,185,185,176,157,195],
[135,0,159,161,151,169,152,149],
[158,181,0,171,163,184,177,186],
[155,179,169,0,172,169,163,182],
[155,189,177,168,0,164,180,182],
[164,171,156,171,176,0,167,183],
[183,188,163,177,160,173,0,170],
[145,191,154,158,158,157,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,161,169,162,163,162],
[169,0,159,166,166,164,170,167],
[171,181,0,183,185,192,193,160],
[179,174,157,0,175,170,196,170],
[171,174,155,165,0,159,175,147],
[178,176,148,170,181,0,173,160],
[177,170,147,144,165,167,0,159],
[178,173,180,170,193,180,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,157,167,216,154,178,172],
[161,0,166,153,186,177,140,168],
[183,174,0,150,204,151,159,151],
[173,187,190,0,203,158,173,182],
[124,154,136,137,0,141,141,143],
[186,163,189,182,199,0,176,187],
[162,200,181,167,199,164,0,158],
[168,172,189,158,197,153,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,176,182,159,165,173,169],
[169,0,161,181,157,151,170,170],
[164,179,0,190,179,170,178,167],
[158,159,150,0,150,150,152,149],
[181,183,161,190,0,174,182,183],
[175,189,170,190,166,0,177,187],
[167,170,162,188,158,163,0,180],
[171,170,173,191,157,153,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,173,192,175,161,183,176],
[180,0,166,171,168,169,190,183],
[167,174,0,185,176,178,176,178],
[148,169,155,0,160,168,179,168],
[165,172,164,180,0,157,175,169],
[179,171,162,172,183,0,189,174],
[157,150,164,161,165,151,0,166],
[164,157,162,172,171,166,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,180,153,165,161,167,175],
[165,0,167,172,165,167,165,180],
[160,173,0,172,158,163,160,164],
[187,168,168,0,167,170,177,187],
[175,175,182,173,0,163,164,177],
[179,173,177,170,177,0,160,180],
[173,175,180,163,176,180,0,173],
[165,160,176,153,163,160,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,167,144,167,167,172,171],
[212,0,175,181,167,188,191,196],
[173,165,0,166,176,173,180,178],
[196,159,174,0,174,191,200,218],
[173,173,164,166,0,164,165,171],
[173,152,167,149,176,0,177,184],
[168,149,160,140,175,163,0,196],
[169,144,162,122,169,156,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,183,171,178,166,172,184],
[167,0,193,167,161,171,156,189],
[157,147,0,151,155,157,149,164],
[169,173,189,0,165,180,161,178],
[162,179,185,175,0,161,163,170],
[174,169,183,160,179,0,174,181],
[168,184,191,179,177,166,0,180],
[156,151,176,162,170,159,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,157,168,158,145,151,166],
[207,0,186,182,170,190,175,160],
[183,154,0,172,182,159,166,150],
[172,158,168,0,186,153,178,183],
[182,170,158,154,0,191,156,163],
[195,150,181,187,149,0,174,170],
[189,165,174,162,184,166,0,167],
[174,180,190,157,177,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,147,153,169,167,183,155],
[174,0,147,168,158,175,186,180],
[193,193,0,160,177,190,198,170],
[187,172,180,0,170,177,208,181],
[171,182,163,170,0,182,188,179],
[173,165,150,163,158,0,179,167],
[157,154,142,132,152,161,0,161],
[185,160,170,159,161,173,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,146,137,122,137,167,110],
[172,0,136,148,156,149,167,150],
[194,204,0,168,189,188,211,182],
[203,192,172,0,174,193,212,159],
[218,184,151,166,0,175,189,169],
[203,191,152,147,165,0,160,136],
[173,173,129,128,151,180,0,146],
[230,190,158,181,171,204,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,174,179,176,178,167,164],
[165,0,174,170,165,182,164,154],
[166,166,0,181,185,176,161,156],
[161,170,159,0,165,145,166,150],
[164,175,155,175,0,158,169,152],
[162,158,164,195,182,0,168,158],
[173,176,179,174,171,172,0,170],
[176,186,184,190,188,182,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,190,183,177,172,168,181],
[158,0,172,201,167,161,170,175],
[150,168,0,182,146,131,160,158],
[157,139,158,0,146,140,158,175],
[163,173,194,194,0,158,177,182],
[168,179,209,200,182,0,186,193],
[172,170,180,182,163,154,0,166],
[159,165,182,165,158,147,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,156,156,162,178,161,199],
[188,0,187,178,182,219,145,194],
[184,153,0,188,202,184,162,167],
[184,162,152,0,193,175,163,159],
[178,158,138,147,0,177,168,177],
[162,121,156,165,163,0,146,159],
[179,195,178,177,172,194,0,170],
[141,146,173,181,163,181,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,160,161,169,164,167,168],
[192,0,170,187,187,189,185,178],
[180,170,0,183,186,186,180,177],
[179,153,157,0,172,179,164,167],
[171,153,154,168,0,172,168,165],
[176,151,154,161,168,0,163,166],
[173,155,160,176,172,177,0,168],
[172,162,163,173,175,174,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,200,171,171,170,180,170],
[159,0,176,166,157,165,176,162],
[140,164,0,145,155,141,154,154],
[169,174,195,0,178,176,178,169],
[169,183,185,162,0,178,166,158],
[170,175,199,164,162,0,176,162],
[160,164,186,162,174,164,0,158],
[170,178,186,171,182,178,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,163,153,179,176,225,155],
[183,0,178,161,204,148,206,160],
[177,162,0,174,171,173,240,186],
[187,179,166,0,187,202,225,154],
[161,136,169,153,0,184,201,126],
[164,192,167,138,156,0,210,154],
[115,134,100,115,139,130,0,93],
[185,180,154,186,214,186,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,174,182,180,141,166,186],
[134,0,182,141,129,140,152,152],
[166,158,0,142,148,134,151,142],
[158,199,198,0,183,174,179,177],
[160,211,192,157,0,144,174,184],
[199,200,206,166,196,0,186,186],
[174,188,189,161,166,154,0,173],
[154,188,198,163,156,154,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,180,173,181,165,168,158],
[156,0,173,171,174,151,162,160],
[160,167,0,171,159,159,145,164],
[167,169,169,0,173,171,166,149],
[159,166,181,167,0,157,167,171],
[175,189,181,169,183,0,183,172],
[172,178,195,174,173,157,0,173],
[182,180,176,191,169,168,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,170,166,165,145,160,144],
[185,0,143,157,197,164,163,153],
[170,197,0,181,208,158,147,184],
[174,183,159,0,201,187,170,156],
[175,143,132,139,0,143,145,141],
[195,176,182,153,197,0,143,156],
[180,177,193,170,195,197,0,175],
[196,187,156,184,199,184,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,170,171,173,199,198,209],
[124,0,147,131,135,155,164,161],
[170,193,0,169,158,177,189,184],
[169,209,171,0,169,201,191,201],
[167,205,182,171,0,171,183,188],
[141,185,163,139,169,0,182,177],
[142,176,151,149,157,158,0,174],
[131,179,156,139,152,163,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,163,174,157,162,190,182],
[165,0,157,181,178,153,174,216],
[177,183,0,167,175,170,186,170],
[166,159,173,0,183,159,178,182],
[183,162,165,157,0,153,199,207],
[178,187,170,181,187,0,196,196],
[150,166,154,162,141,144,0,163],
[158,124,170,158,133,144,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,161,183,171,158,191,171],
[183,0,183,175,174,162,191,193],
[179,157,0,169,167,167,185,174],
[157,165,171,0,174,169,185,179],
[169,166,173,166,0,173,195,177],
[182,178,173,171,167,0,183,189],
[149,149,155,155,145,157,0,153],
[169,147,166,161,163,151,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,166,169,164,145,170,162],
[200,0,187,171,170,185,177,184],
[174,153,0,155,164,175,162,171],
[171,169,185,0,181,181,181,160],
[176,170,176,159,0,171,183,178],
[195,155,165,159,169,0,181,175],
[170,163,178,159,157,159,0,157],
[178,156,169,180,162,165,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,179,175,190,156,189,184],
[178,0,176,165,189,180,184,159],
[161,164,0,174,197,171,183,180],
[165,175,166,0,186,180,174,179],
[150,151,143,154,0,178,181,148],
[184,160,169,160,162,0,181,179],
[151,156,157,166,159,159,0,167],
[156,181,160,161,192,161,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,161,195,178,205,169,139],
[180,0,169,215,167,222,190,148],
[179,171,0,187,135,184,164,128],
[145,125,153,0,131,142,145,151],
[162,173,205,209,0,188,185,170],
[135,118,156,198,152,0,157,138],
[171,150,176,195,155,183,0,139],
[201,192,212,189,170,202,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,169,149,150,171,183,167],
[158,0,160,156,167,163,190,172],
[171,180,0,168,160,164,186,178],
[191,184,172,0,169,161,177,172],
[190,173,180,171,0,163,186,186],
[169,177,176,179,177,0,190,186],
[157,150,154,163,154,150,0,167],
[173,168,162,168,154,154,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,173,161,186,173,166],
[171,0,176,167,170,155,181,182],
[174,164,0,157,154,158,164,162],
[167,173,183,0,162,166,187,180],
[179,170,186,178,0,170,177,169],
[154,185,182,174,170,0,179,179],
[167,159,176,153,163,161,0,164],
[174,158,178,160,171,161,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,152,142,141,160,143,141],
[172,0,150,151,147,181,144,145],
[188,190,0,177,163,180,177,158],
[198,189,163,0,158,196,163,157],
[199,193,177,182,0,179,168,163],
[180,159,160,144,161,0,162,143],
[197,196,163,177,172,178,0,181],
[199,195,182,183,177,197,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,160,176,167,177,210,184],
[136,0,172,177,174,186,208,155],
[180,168,0,191,186,186,197,171],
[164,163,149,0,148,155,186,143],
[173,166,154,192,0,185,186,173],
[163,154,154,185,155,0,202,134],
[130,132,143,154,154,138,0,138],
[156,185,169,197,167,206,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,181,165,139,167,172,156],
[177,0,204,152,160,159,150,154],
[159,136,0,143,131,145,144,117],
[175,188,197,0,163,193,191,171],
[201,180,209,177,0,185,191,166],
[173,181,195,147,155,0,168,176],
[168,190,196,149,149,172,0,165],
[184,186,223,169,174,164,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,163,170,161,180,179,142],
[189,0,180,164,156,184,176,166],
[177,160,0,169,182,169,155,158],
[170,176,171,0,166,164,168,160],
[179,184,158,174,0,172,159,186],
[160,156,171,176,168,0,165,175],
[161,164,185,172,181,175,0,158],
[198,174,182,180,154,165,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,154,175,146,185,145,143],
[175,0,190,166,167,222,173,190],
[186,150,0,165,176,231,179,150],
[165,174,175,0,163,193,226,129],
[194,173,164,177,0,221,193,189],
[155,118,109,147,119,0,149,121],
[195,167,161,114,147,191,0,172],
[197,150,190,211,151,219,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,190,118,159,162,116,136],
[131,0,177,148,162,119,145,165],
[150,163,0,179,146,151,105,181],
[222,192,161,0,129,150,174,193],
[181,178,194,211,0,178,147,181],
[178,221,189,190,162,0,143,178],
[224,195,235,166,193,197,0,225],
[204,175,159,147,159,162,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,176,179,180,170,165,172],
[165,0,169,182,169,172,177,168],
[164,171,0,175,164,168,176,167],
[161,158,165,0,161,158,164,160],
[160,171,176,179,0,170,161,165],
[170,168,172,182,170,0,179,169],
[175,163,164,176,179,161,0,162],
[168,172,173,180,175,171,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,171,174,170,179,171,164],
[167,0,156,165,160,160,159,159],
[169,184,0,192,169,176,167,179],
[166,175,148,0,165,165,163,164],
[170,180,171,175,0,171,162,165],
[161,180,164,175,169,0,160,161],
[169,181,173,177,178,180,0,170],
[176,181,161,176,175,179,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,170,170,162,174,176,176],
[154,0,160,155,154,164,174,183],
[170,180,0,174,165,187,174,174],
[170,185,166,0,168,176,178,170],
[178,186,175,172,0,179,177,168],
[166,176,153,164,161,0,166,168],
[164,166,166,162,163,174,0,171],
[164,157,166,170,172,172,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,193,162,207,207,172,150],
[131,0,177,171,173,217,174,155],
[147,163,0,124,187,154,137,153],
[178,169,216,0,178,185,142,185],
[133,167,153,162,0,174,148,149],
[133,123,186,155,166,0,155,127],
[168,166,203,198,192,185,0,187],
[190,185,187,155,191,213,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,168,145,165,172,166,162],
[148,0,122,113,174,170,130,154],
[172,218,0,169,205,177,153,152],
[195,227,171,0,190,181,170,164],
[175,166,135,150,0,157,152,154],
[168,170,163,159,183,0,148,154],
[174,210,187,170,188,192,0,194],
[178,186,188,176,186,186,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,148,169,168,154,183,159],
[215,0,189,161,192,195,193,186],
[192,151,0,183,200,187,169,185],
[171,179,157,0,167,193,210,196],
[172,148,140,173,0,161,191,168],
[186,145,153,147,179,0,171,186],
[157,147,171,130,149,169,0,158],
[181,154,155,144,172,154,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,173,173,179,176,166,168],
[162,0,163,164,166,172,168,175],
[167,177,0,178,163,185,155,176],
[167,176,162,0,170,183,168,161],
[161,174,177,170,0,171,170,185],
[164,168,155,157,169,0,172,178],
[174,172,185,172,170,168,0,171],
[172,165,164,179,155,162,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,179,148,168,169,154,157],
[185,0,165,157,166,183,167,180],
[161,175,0,151,146,159,160,147],
[192,183,189,0,186,191,165,179],
[172,174,194,154,0,187,169,181],
[171,157,181,149,153,0,150,167],
[186,173,180,175,171,190,0,163],
[183,160,193,161,159,173,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,165,164,170,166,161,168],
[142,0,149,138,142,149,154,155],
[175,191,0,165,174,171,197,165],
[176,202,175,0,164,173,175,178],
[170,198,166,176,0,171,172,183],
[174,191,169,167,169,0,170,161],
[179,186,143,165,168,170,0,167],
[172,185,175,162,157,179,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,186,185,174,168,176,171],
[156,0,166,164,170,165,178,155],
[154,174,0,173,153,161,180,171],
[155,176,167,0,157,158,166,171],
[166,170,187,183,0,175,177,169],
[172,175,179,182,165,0,177,176],
[164,162,160,174,163,163,0,161],
[169,185,169,169,171,164,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,165,180,170,172,191,158],
[167,0,162,166,144,164,173,160],
[175,178,0,184,166,176,177,152],
[160,174,156,0,172,175,176,163],
[170,196,174,168,0,169,200,165],
[168,176,164,165,171,0,176,175],
[149,167,163,164,140,164,0,157],
[182,180,188,177,175,165,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,168,191,168,239,191,145],
[220,0,244,240,220,340,169,221],
[172,96,0,191,170,267,191,196],
[149,100,149,0,125,221,148,173],
[172,120,170,215,0,244,216,123],
[101,0,73,119,96,0,96,98],
[149,171,149,192,124,244,0,147],
[195,119,144,167,217,242,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,169,171,170,162,163,168],
[181,0,164,182,178,180,176,178],
[171,176,0,183,175,168,165,168],
[169,158,157,0,178,169,157,169],
[170,162,165,162,0,166,165,174],
[178,160,172,171,174,0,158,180],
[177,164,175,183,175,182,0,169],
[172,162,172,171,166,160,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,183,185,159,181,189,165],
[181,0,223,167,184,178,226,179],
[157,117,0,156,175,129,160,141],
[155,173,184,0,156,140,146,139],
[181,156,165,184,0,164,184,182],
[159,162,211,200,176,0,184,198],
[151,114,180,194,156,156,0,152],
[175,161,199,201,158,142,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,177,243,202,245,207,228],
[200,0,167,226,203,254,166,229],
[163,173,0,227,174,230,192,190],
[97,114,113,0,140,216,168,167],
[138,137,166,200,0,179,168,238],
[95,86,110,124,161,0,126,161],
[133,174,148,172,172,214,0,187],
[112,111,150,173,102,179,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,163,176,154,164,190,171],
[147,0,159,151,165,156,174,149],
[177,181,0,176,178,173,187,170],
[164,189,164,0,169,170,194,177],
[186,175,162,171,0,175,178,162],
[176,184,167,170,165,0,173,171],
[150,166,153,146,162,167,0,160],
[169,191,170,163,178,169,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,159,157,148,160,175,157],
[170,0,161,148,162,169,177,161],
[181,179,0,186,175,166,194,187],
[183,192,154,0,165,179,193,171],
[192,178,165,175,0,187,183,163],
[180,171,174,161,153,0,186,150],
[165,163,146,147,157,154,0,150],
[183,179,153,169,177,190,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,166,176,186,188,188,211],
[161,0,183,183,190,191,173,193],
[174,157,0,203,189,181,178,193],
[164,157,137,0,175,173,172,196],
[154,150,151,165,0,181,173,172],
[152,149,159,167,159,0,171,177],
[152,167,162,168,167,169,0,161],
[129,147,147,144,168,163,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,177,171,174,167,165,191],
[152,0,182,168,167,159,164,184],
[163,158,0,157,158,156,165,180],
[169,172,183,0,162,178,169,172],
[166,173,182,178,0,164,169,187],
[173,181,184,162,176,0,176,184],
[175,176,175,171,171,164,0,178],
[149,156,160,168,153,156,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,155,179,173,171,178,169],
[172,0,159,173,172,169,146,144],
[185,181,0,155,178,184,165,174],
[161,167,185,0,188,175,170,173],
[167,168,162,152,0,145,143,172],
[169,171,156,165,195,0,165,171],
[162,194,175,170,197,175,0,182],
[171,196,166,167,168,169,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,159,203,156,154,226,196],
[180,0,154,198,154,152,197,167],
[181,186,0,205,188,135,183,165],
[137,142,135,0,172,144,142,136],
[184,186,152,168,0,138,174,147],
[186,188,205,196,202,0,232,158],
[114,143,157,198,166,108,0,164],
[144,173,175,204,193,182,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,170,162,168,173,176,154],
[183,0,164,169,179,167,182,156],
[170,176,0,169,191,168,172,166],
[178,171,171,0,177,172,183,168],
[172,161,149,163,0,157,178,160],
[167,173,172,168,183,0,200,181],
[164,158,168,157,162,140,0,151],
[186,184,174,172,180,159,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,176,160,163,163,186,163],
[188,0,176,175,174,170,179,188],
[164,164,0,174,167,158,183,160],
[180,165,166,0,166,150,178,168],
[177,166,173,174,0,150,203,181],
[177,170,182,190,190,0,198,175],
[154,161,157,162,137,142,0,162],
[177,152,180,172,159,165,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,156,191,164,169,155,193],
[180,0,167,187,178,161,161,193],
[184,173,0,186,170,149,165,178],
[149,153,154,0,145,154,158,172],
[176,162,170,195,0,171,164,184],
[171,179,191,186,169,0,171,182],
[185,179,175,182,176,169,0,210],
[147,147,162,168,156,158,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,164,249,231,226,181,206],
[128,0,175,192,195,167,126,139],
[176,165,0,198,202,165,164,172],
[91,148,142,0,138,153,153,121],
[109,145,138,202,0,167,135,153],
[114,173,175,187,173,0,174,183],
[159,214,176,187,205,166,0,172],
[134,201,168,219,187,157,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,183,234,181,181,169,250],
[110,0,97,137,153,165,142,113],
[157,243,0,189,177,181,164,180],
[106,203,151,0,139,137,153,222],
[159,187,163,201,0,150,179,230],
[159,175,159,203,190,0,137,220],
[171,198,176,187,161,203,0,187],
[90,227,160,118,110,120,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,176,148,203,164,159,163],
[173,0,173,136,211,162,145,156],
[164,167,0,170,170,174,169,169],
[192,204,170,0,213,184,215,199],
[137,129,170,127,0,138,145,148],
[176,178,166,156,202,0,156,165],
[181,195,171,125,195,184,0,179],
[177,184,171,141,192,175,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,179,175,189,191,176,169],
[140,0,152,159,151,151,159,161],
[161,188,0,192,187,181,173,170],
[165,181,148,0,157,160,145,154],
[151,189,153,183,0,169,163,167],
[149,189,159,180,171,0,167,167],
[164,181,167,195,177,173,0,173],
[171,179,170,186,173,173,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,171,171,171,174,158,169],
[172,0,168,164,183,166,161,167],
[169,172,0,182,162,161,172,174],
[169,176,158,0,175,169,176,187],
[169,157,178,165,0,166,174,189],
[166,174,179,171,174,0,180,182],
[182,179,168,164,166,160,0,179],
[171,173,166,153,151,158,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,172,170,152,187,173,172],
[172,0,154,164,170,165,187,160],
[168,186,0,180,183,192,195,192],
[170,176,160,0,173,170,182,167],
[188,170,157,167,0,182,183,173],
[153,175,148,170,158,0,173,167],
[167,153,145,158,157,167,0,158],
[168,180,148,173,167,173,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,177,193,162,198,189,178],
[156,0,159,170,146,184,174,178],
[163,181,0,186,181,193,186,162],
[147,170,154,0,158,194,182,162],
[178,194,159,182,0,193,176,184],
[142,156,147,146,147,0,144,157],
[151,166,154,158,164,196,0,160],
[162,162,178,178,156,183,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,173,156,157,169,171,162],
[174,0,162,169,166,163,177,158],
[167,178,0,165,178,171,178,169],
[184,171,175,0,189,196,167,183],
[183,174,162,151,0,165,167,157],
[171,177,169,144,175,0,184,154],
[169,163,162,173,173,156,0,152],
[178,182,171,157,183,186,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,174,191,170,176,182,176],
[151,0,164,158,160,156,163,149],
[166,176,0,174,175,159,174,164],
[149,182,166,0,166,159,179,166],
[170,180,165,174,0,159,189,171],
[164,184,181,181,181,0,171,175],
[158,177,166,161,151,169,0,171],
[164,191,176,174,169,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,173,186,197,192,152,200],
[162,0,184,169,180,170,165,178],
[167,156,0,161,157,171,168,172],
[154,171,179,0,187,170,177,173],
[143,160,183,153,0,173,152,177],
[148,170,169,170,167,0,153,166],
[188,175,172,163,188,187,0,208],
[140,162,168,167,163,174,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,172,143,180,177,134,161],
[178,0,133,152,160,168,130,158],
[168,207,0,170,192,201,172,197],
[197,188,170,0,178,177,174,175],
[160,180,148,162,0,160,153,167],
[163,172,139,163,180,0,144,140],
[206,210,168,166,187,196,0,207],
[179,182,143,165,173,200,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,162,169,175,172,170,172],
[173,0,166,172,175,160,152,161],
[178,174,0,174,192,167,165,170],
[171,168,166,0,185,163,167,180],
[165,165,148,155,0,161,153,176],
[168,180,173,177,179,0,161,178],
[170,188,175,173,187,179,0,175],
[168,179,170,160,164,162,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,172,179,167,169,181,178],
[167,0,188,179,174,169,178,168],
[168,152,0,165,167,173,186,175],
[161,161,175,0,168,169,168,162],
[173,166,173,172,0,157,166,174],
[171,171,167,171,183,0,183,169],
[159,162,154,172,174,157,0,171],
[162,172,165,178,166,171,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,171,161,166,144,141,155],
[190,0,178,176,182,168,162,176],
[169,162,0,160,182,147,149,173],
[179,164,180,0,170,160,156,172],
[174,158,158,170,0,157,165,158],
[196,172,193,180,183,0,170,174],
[199,178,191,184,175,170,0,179],
[185,164,167,168,182,166,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,191,169,196,191,191,166],
[122,0,71,95,98,143,144,120],
[149,269,0,244,171,216,217,195],
[171,245,96,0,147,193,193,147],
[144,242,169,193,0,215,217,218],
[149,197,124,147,125,0,192,146],
[149,196,123,147,123,148,0,172],
[174,220,145,193,122,194,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,152,154,168,163,173,176],
[170,0,157,164,175,181,166,167],
[188,183,0,175,188,169,181,176],
[186,176,165,0,173,156,182,182],
[172,165,152,167,0,169,166,180],
[177,159,171,184,171,0,160,172],
[167,174,159,158,174,180,0,170],
[164,173,164,158,160,168,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,181,191,197,178,168,183],
[150,0,160,167,172,149,161,165],
[159,180,0,179,187,164,164,164],
[149,173,161,0,183,157,161,176],
[143,168,153,157,0,157,142,158],
[162,191,176,183,183,0,165,170],
[172,179,176,179,198,175,0,168],
[157,175,176,164,182,170,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,177,200,156,124,122,152],
[182,0,155,187,146,182,169,163],
[163,185,0,187,148,144,155,153],
[140,153,153,0,143,152,152,151],
[184,194,192,197,0,161,153,175],
[216,158,196,188,179,0,174,182],
[218,171,185,188,187,166,0,175],
[188,177,187,189,165,158,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,222,178,165,167,232,175],
[155,0,214,203,188,170,209,115],
[118,126,0,129,156,160,149,113],
[162,137,211,0,162,180,204,155],
[175,152,184,178,0,201,220,169],
[173,170,180,160,139,0,203,135],
[108,131,191,136,120,137,0,105],
[165,225,227,185,171,205,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,144,157,130,166,165,174],
[169,0,164,164,127,179,150,164],
[196,176,0,188,148,182,158,204],
[183,176,152,0,173,152,145,230],
[210,213,192,167,0,211,174,213],
[174,161,158,188,129,0,166,190],
[175,190,182,195,166,174,0,176],
[166,176,136,110,127,150,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,168,160,159,178,165,167],
[180,0,176,164,183,155,171,181],
[172,164,0,147,174,170,155,172],
[180,176,193,0,188,178,169,182],
[181,157,166,152,0,167,155,167],
[162,185,170,162,173,0,159,165],
[175,169,185,171,185,181,0,164],
[173,159,168,158,173,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,173,159,171,167,181,162],
[163,0,153,157,157,146,143,149],
[167,187,0,155,144,154,150,162],
[181,183,185,0,179,172,163,163],
[169,183,196,161,0,176,164,174],
[173,194,186,168,164,0,162,165],
[159,197,190,177,176,178,0,171],
[178,191,178,177,166,175,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,161,168,162,177,177,161],
[185,0,162,178,166,159,193,179],
[179,178,0,180,179,172,170,178],
[172,162,160,0,149,165,171,148],
[178,174,161,191,0,174,182,167],
[163,181,168,175,166,0,179,172],
[163,147,170,169,158,161,0,166],
[179,161,162,192,173,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,154,167,152,174,183,167],
[165,0,164,167,169,171,177,176],
[186,176,0,188,169,169,192,180],
[173,173,152,0,172,150,176,172],
[188,171,171,168,0,172,177,181],
[166,169,171,190,168,0,179,175],
[157,163,148,164,163,161,0,164],
[173,164,160,168,159,165,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,140,154,160,181,163,154],
[190,0,165,171,170,179,167,171],
[200,175,0,175,173,192,183,169],
[186,169,165,0,177,173,168,161],
[180,170,167,163,0,186,166,176],
[159,161,148,167,154,0,164,151],
[177,173,157,172,174,176,0,158],
[186,169,171,179,164,189,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,165,159,152,155,168,174],
[177,0,196,166,169,179,175,182],
[175,144,0,156,136,152,163,169],
[181,174,184,0,165,174,182,186],
[188,171,204,175,0,169,182,177],
[185,161,188,166,171,0,168,189],
[172,165,177,158,158,172,0,175],
[166,158,171,154,163,151,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,146,128,154,140,187,164],
[176,0,141,171,184,147,187,170],
[194,199,0,170,193,192,214,182],
[212,169,170,0,174,185,230,203],
[186,156,147,166,0,180,179,153],
[200,193,148,155,160,0,200,194],
[153,153,126,110,161,140,0,149],
[176,170,158,137,187,146,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,272,234,167,167,202,166],
[205,0,202,238,202,137,236,236],
[68,138,0,203,169,103,237,168],
[106,102,137,0,138,137,169,100],
[173,138,171,202,0,170,202,203],
[173,203,237,203,170,0,167,199],
[138,104,103,171,138,173,0,100],
[174,104,172,240,137,141,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,162,151,197,209,222,159],
[131,0,187,147,195,144,172,184],
[178,153,0,122,159,179,130,151],
[189,193,218,0,207,196,158,192],
[143,145,181,133,0,179,183,179],
[131,196,161,144,161,0,155,149],
[118,168,210,182,157,185,0,146],
[181,156,189,148,161,191,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,164,162,189,164,151,161],
[163,0,140,142,165,142,147,157],
[176,200,0,167,188,149,179,178],
[178,198,173,0,179,148,186,150],
[151,175,152,161,0,144,167,139],
[176,198,191,192,196,0,182,169],
[189,193,161,154,173,158,0,164],
[179,183,162,190,201,171,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,177,177,166,177,173,189],
[176,0,176,169,181,164,172,180],
[163,164,0,170,171,156,157,173],
[163,171,170,0,173,169,166,174],
[174,159,169,167,0,160,171,175],
[163,176,184,171,180,0,169,176],
[167,168,183,174,169,171,0,178],
[151,160,167,166,165,164,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,181,165,173,163,181,160],
[164,0,178,170,169,168,165,159],
[159,162,0,161,173,165,188,166],
[175,170,179,0,172,179,179,180],
[167,171,167,168,0,163,164,163],
[177,172,175,161,177,0,177,165],
[159,175,152,161,176,163,0,175],
[180,181,174,160,177,175,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,207,178,159,170,163,205],
[170,0,180,229,178,212,170,185],
[133,160,0,186,176,192,171,157],
[162,111,154,0,172,127,140,167],
[181,162,164,168,0,192,174,184],
[170,128,148,213,148,0,176,177],
[177,170,169,200,166,164,0,187],
[135,155,183,173,156,163,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,158,184,175,186,158,170],
[149,0,169,172,172,170,165,149],
[182,171,0,171,173,181,170,143],
[156,168,169,0,164,163,146,145],
[165,168,167,176,0,168,168,160],
[154,170,159,177,172,0,160,152],
[182,175,170,194,172,180,0,168],
[170,191,197,195,180,188,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,150,178,217,143,166,168],
[186,0,151,188,202,170,169,178],
[190,189,0,212,213,161,185,177],
[162,152,128,0,199,120,153,164],
[123,138,127,141,0,118,132,130],
[197,170,179,220,222,0,173,180],
[174,171,155,187,208,167,0,182],
[172,162,163,176,210,160,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,149,158,152,156,161,152],
[182,0,179,158,169,187,167,172],
[191,161,0,173,153,184,168,158],
[182,182,167,0,165,182,167,170],
[188,171,187,175,0,180,192,170],
[184,153,156,158,160,0,166,175],
[179,173,172,173,148,174,0,164],
[188,168,182,170,170,165,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,167,186,163,190,172,178],
[168,0,164,185,167,170,170,174],
[173,176,0,186,170,181,174,171],
[154,155,154,0,159,160,178,166],
[177,173,170,181,0,187,175,187],
[150,170,159,180,153,0,164,168],
[168,170,166,162,165,176,0,165],
[162,166,169,174,153,172,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,154,177,176,179,184,163],
[173,0,188,175,171,164,170,160],
[186,152,0,180,184,139,169,162],
[163,165,160,0,182,165,183,169],
[164,169,156,158,0,139,170,169],
[161,176,201,175,201,0,192,187],
[156,170,171,157,170,148,0,145],
[177,180,178,171,171,153,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,154,143,146,181,187,174],
[164,0,179,174,169,187,188,166],
[186,161,0,146,156,169,179,154],
[197,166,194,0,163,186,172,184],
[194,171,184,177,0,183,199,165],
[159,153,171,154,157,0,187,162],
[153,152,161,168,141,153,0,164],
[166,174,186,156,175,178,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,187,169,170,160,183,171],
[159,0,172,142,160,153,175,169],
[153,168,0,145,127,134,152,149],
[171,198,195,0,154,165,170,159],
[170,180,213,186,0,196,189,189],
[180,187,206,175,144,0,179,185],
[157,165,188,170,151,161,0,165],
[169,171,191,181,151,155,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,187,178,171,174,177,169],
[170,0,176,176,161,171,190,166],
[153,164,0,153,149,154,176,172],
[162,164,187,0,161,178,173,169],
[169,179,191,179,0,172,195,169],
[166,169,186,162,168,0,182,176],
[163,150,164,167,145,158,0,161],
[171,174,168,171,171,164,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,155,147,157,148,163,150],
[215,0,180,178,175,177,198,167],
[185,160,0,163,181,167,190,172],
[193,162,177,0,177,169,179,180],
[183,165,159,163,0,166,177,170],
[192,163,173,171,174,0,179,176],
[177,142,150,161,163,161,0,163],
[190,173,168,160,170,164,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,144,167,156,170,169,147],
[180,0,155,179,169,165,164,172],
[196,185,0,196,175,166,171,180],
[173,161,144,0,162,164,154,150],
[184,171,165,178,0,170,170,163],
[170,175,174,176,170,0,187,179],
[171,176,169,186,170,153,0,168],
[193,168,160,190,177,161,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,165,147,186,147,162,157],
[187,0,188,212,194,172,203,148],
[175,152,0,198,178,192,160,170],
[193,128,142,0,164,156,163,124],
[154,146,162,176,0,173,151,158],
[193,168,148,184,167,0,171,116],
[178,137,180,177,189,169,0,155],
[183,192,170,216,182,224,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,180,156,175,170,176,179],
[145,0,159,161,167,169,166,167],
[160,181,0,161,173,164,162,172],
[184,179,179,0,179,187,165,183],
[165,173,167,161,0,167,167,170],
[170,171,176,153,173,0,181,175],
[164,174,178,175,173,159,0,175],
[161,173,168,157,170,165,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,182,172,193,199,200,167],
[155,0,184,179,188,174,194,153],
[158,156,0,155,167,160,178,166],
[168,161,185,0,187,181,191,176],
[147,152,173,153,0,167,181,139],
[141,166,180,159,173,0,186,157],
[140,146,162,149,159,154,0,158],
[173,187,174,164,201,183,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,147,157,172,158,186,130],
[197,0,183,167,176,176,188,202],
[193,157,0,155,187,167,195,161],
[183,173,185,0,188,171,190,166],
[168,164,153,152,0,155,178,136],
[182,164,173,169,185,0,181,181],
[154,152,145,150,162,159,0,157],
[210,138,179,174,204,159,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,164,160,180,153,145,149],
[177,0,175,139,186,167,150,162],
[176,165,0,167,155,160,145,154],
[180,201,173,0,181,150,198,199],
[160,154,185,159,0,154,123,177],
[187,173,180,190,186,0,172,152],
[195,190,195,142,217,168,0,172],
[191,178,186,141,163,188,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,160,139,147,154,140,138],
[201,0,195,159,185,209,185,186],
[180,145,0,160,163,162,163,134],
[201,181,180,0,186,188,183,152],
[193,155,177,154,0,184,157,155],
[186,131,178,152,156,0,148,136],
[200,155,177,157,183,192,0,138],
[202,154,206,188,185,204,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,202,153,185,168,133,186],
[204,0,203,154,185,201,166,237],
[138,137,0,137,189,119,188,154],
[187,186,203,0,168,186,185,169],
[155,155,151,172,0,137,136,171],
[172,139,221,154,203,0,187,205],
[207,174,152,155,204,153,0,191],
[154,103,186,171,169,135,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,163,178,143,186,160,193],
[175,0,185,189,168,172,170,185],
[177,155,0,162,135,145,133,188],
[162,151,178,0,131,161,144,189],
[197,172,205,209,0,161,194,215],
[154,168,195,179,179,0,178,208],
[180,170,207,196,146,162,0,202],
[147,155,152,151,125,132,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,172,171,181,171,179,163],
[180,0,168,169,168,170,155,168],
[168,172,0,157,173,163,180,177],
[169,171,183,0,160,164,176,155],
[159,172,167,180,0,151,183,161],
[169,170,177,176,189,0,172,161],
[161,185,160,164,157,168,0,163],
[177,172,163,185,179,179,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,184,178,161,180,159,205],
[174,0,188,152,172,177,141,181],
[156,152,0,140,131,148,140,157],
[162,188,200,0,152,181,173,195],
[179,168,209,188,0,194,166,187],
[160,163,192,159,146,0,179,195],
[181,199,200,167,174,161,0,185],
[135,159,183,145,153,145,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,158,153,170,170,168,170],
[169,0,154,129,129,104,133,128],
[182,186,0,190,152,171,168,183],
[187,211,150,0,162,161,154,153],
[170,211,188,178,0,199,204,159],
[170,236,169,179,141,0,168,152],
[172,207,172,186,136,172,0,148],
[170,212,157,187,181,188,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,145,177,162,158,159,165],
[184,0,174,188,184,166,172,170],
[195,166,0,180,172,168,184,188],
[163,152,160,0,173,174,169,183],
[178,156,168,167,0,170,172,178],
[182,174,172,166,170,0,167,174],
[181,168,156,171,168,173,0,181],
[175,170,152,157,162,166,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,172,183,181,149,166,159],
[182,0,170,174,194,169,170,171],
[168,170,0,184,176,156,160,151],
[157,166,156,0,168,149,155,144],
[159,146,164,172,0,155,157,163],
[191,171,184,191,185,0,169,173],
[174,170,180,185,183,171,0,179],
[181,169,189,196,177,167,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,156,174,167,173,180,178],
[148,0,156,148,155,168,162,157],
[184,184,0,169,186,189,187,182],
[166,192,171,0,186,186,184,171],
[173,185,154,154,0,147,158,178],
[167,172,151,154,193,0,153,165],
[160,178,153,156,182,187,0,162],
[162,183,158,169,162,175,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,170,180,167,176,164,166],
[154,0,162,163,149,158,165,169],
[170,178,0,173,163,173,180,166],
[160,177,167,0,164,166,163,167],
[173,191,177,176,0,176,175,156],
[164,182,167,174,164,0,179,173],
[176,175,160,177,165,161,0,155],
[174,171,174,173,184,167,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,157,167,176,161,143,176],
[161,0,175,182,177,191,161,176],
[183,165,0,168,175,170,169,176],
[173,158,172,0,156,176,155,157],
[164,163,165,184,0,167,170,147],
[179,149,170,164,173,0,148,149],
[197,179,171,185,170,192,0,188],
[164,164,164,183,193,191,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,183,170,180,178,180,168],
[158,0,165,166,151,164,172,150],
[157,175,0,162,157,160,159,140],
[170,174,178,0,175,172,190,169],
[160,189,183,165,0,174,169,175],
[162,176,180,168,166,0,168,152],
[160,168,181,150,171,172,0,167],
[172,190,200,171,165,188,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,187,192,165,171,158,183],
[169,0,179,199,179,190,172,187],
[153,161,0,193,192,175,144,158],
[148,141,147,0,160,155,140,156],
[175,161,148,180,0,190,145,171],
[169,150,165,185,150,0,154,159],
[182,168,196,200,195,186,0,199],
[157,153,182,184,169,181,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,153,193,167,161,174,143],
[164,0,159,184,147,156,168,139],
[187,181,0,195,176,168,175,168],
[147,156,145,0,151,152,153,139],
[173,193,164,189,0,178,187,186],
[179,184,172,188,162,0,183,170],
[166,172,165,187,153,157,0,156],
[197,201,172,201,154,170,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,161,154,157,159,171,170],
[187,0,170,175,172,174,195,179],
[179,170,0,155,157,183,174,178],
[186,165,185,0,161,172,182,183],
[183,168,183,179,0,174,187,197],
[181,166,157,168,166,0,167,194],
[169,145,166,158,153,173,0,175],
[170,161,162,157,143,146,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,168,159,167,178,154,172],
[160,0,179,171,181,166,169,188],
[172,161,0,179,180,187,179,179],
[181,169,161,0,165,180,175,171],
[173,159,160,175,0,185,171,166],
[162,174,153,160,155,0,149,176],
[186,171,161,165,169,191,0,185],
[168,152,161,169,174,164,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,182,159,180,184,168,155],
[174,0,166,177,177,185,160,172],
[158,174,0,152,162,158,157,167],
[181,163,188,0,193,187,176,178],
[160,163,178,147,0,170,148,168],
[156,155,182,153,170,0,159,165],
[172,180,183,164,192,181,0,175],
[185,168,173,162,172,175,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,136,177,206,149,189,139],
[162,0,102,126,144,151,165,148],
[204,238,0,189,178,164,214,188],
[163,214,151,0,166,188,199,200],
[134,196,162,174,0,161,172,159],
[191,189,176,152,179,0,165,203],
[151,175,126,141,168,175,0,175],
[201,192,152,140,181,137,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,150,185,169,178,178,166],
[156,0,140,161,158,162,157,162],
[190,200,0,188,200,206,158,178],
[155,179,152,0,165,178,160,167],
[171,182,140,175,0,175,164,172],
[162,178,134,162,165,0,150,167],
[162,183,182,180,176,190,0,186],
[174,178,162,173,168,173,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,153,157,160,173,165,161],
[190,0,166,161,168,184,187,168],
[187,174,0,180,169,165,193,184],
[183,179,160,0,177,165,188,192],
[180,172,171,163,0,181,170,186],
[167,156,175,175,159,0,176,164],
[175,153,147,152,170,164,0,167],
[179,172,156,148,154,176,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,157,178,183,184,166,175],
[153,0,155,177,176,146,166,186],
[183,185,0,180,187,184,174,164],
[162,163,160,0,178,182,168,167],
[157,164,153,162,0,163,160,165],
[156,194,156,158,177,0,163,165],
[174,174,166,172,180,177,0,183],
[165,154,176,173,175,175,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,182,182,179,178,181,188],
[172,0,179,167,165,165,165,182],
[158,161,0,168,160,169,162,172],
[158,173,172,0,165,169,167,180],
[161,175,180,175,0,170,184,186],
[162,175,171,171,170,0,173,165],
[159,175,178,173,156,167,0,169],
[152,158,168,160,154,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,0,170,170,170,170,0],
[170,0,0,170,0,170,0,170],
[340,340,0,170,170,340,170,340],
[170,170,170,0,0,170,170,170],
[170,340,170,340,0,170,170,170],
[170,170,0,170,170,0,170,170],
[170,340,170,170,170,170,0,170],
[340,170,0,170,170,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,164,158,152,160,166,156],
[167,0,162,168,170,154,159,163],
[176,178,0,178,161,170,166,175],
[182,172,162,0,169,181,165,189],
[188,170,179,171,0,179,182,169],
[180,186,170,159,161,0,178,164],
[174,181,174,175,158,162,0,160],
[184,177,165,151,171,176,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_8_340.csv", index=False, header=False)
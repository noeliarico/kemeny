
rep = 5
results4 = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,5,4,5],
[5,0,7,6],
[6,3,0,5],
[5,4,5,0]])


import kemeny.azzinimunda.azzinimunda1 as am1
import kemeny.azzinimunda.azzinimunda1rec as am1rec

times = np.zeros(rep)
for i in range(rep):
    # Algorithm without Condorcet
    algorithm = am1.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 1, 1, 0, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am1rec.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 1, 1, 1, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

##############################################################
om = np.array([
[0,4,5,5],
[6,0,1,6],
[5,9,0,10],
[5,4,0,0]])


import kemeny.azzinimunda.azzinimunda1 as am1
import kemeny.azzinimunda.azzinimunda1rec as am1rec

times = np.zeros(rep)
for i in range(rep):
    # Algorithm without Condorcet
    algorithm = am1.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 1, 2, 0, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am1rec.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 1, 2, 1, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

##############################################################
om = np.array([
[0,6,3,5],
[4,0,5,5],
[7,5,0,6],
[5,5,4,0]])


import kemeny.azzinimunda.azzinimunda1 as am1
import kemeny.azzinimunda.azzinimunda1rec as am1rec

times = np.zeros(rep)
for i in range(rep):
    # Algorithm without Condorcet
    algorithm = am1.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 1, 3, 0, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am1rec.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 1, 3, 1, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

##############################################################
om = np.array([
[0,4,5,5],
[6,0,7,5],
[5,3,0,6],
[5,5,4,0]])


import kemeny.azzinimunda.azzinimunda1 as am1
import kemeny.azzinimunda.azzinimunda1rec as am1rec

times = np.zeros(rep)
for i in range(rep):
    # Algorithm without Condorcet
    algorithm = am1.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 1, 4, 0, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am1rec.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 1, 4, 1, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

##############################################################
om = np.array([
[0,7,5,2],
[3,0,5,5],
[5,5,0,2],
[8,5,8,0]])


import kemeny.azzinimunda.azzinimunda1 as am1
import kemeny.azzinimunda.azzinimunda1rec as am1rec

times = np.zeros(rep)
for i in range(rep):
    # Algorithm without Condorcet
    algorithm = am1.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 1, 5, 0, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am1rec.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 1, 5, 1, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

##############################################################
om = np.array([
[0,7,8,4],
[3,0,5,5],
[2,5,0,2],
[6,5,8,0]])


import kemeny.azzinimunda.azzinimunda1 as am1
import kemeny.azzinimunda.azzinimunda1rec as am1rec

times = np.zeros(rep)
for i in range(rep):
    # Algorithm without Condorcet
    algorithm = am1.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 2, 1, 0, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am1rec.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 2, 1, 1, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

##############################################################
om = np.array([
[0,2,3,2],
[8,0,6,5],
[7,4,0,3],
[8,5,7,0]])


import kemeny.azzinimunda.azzinimunda1 as am1
import kemeny.azzinimunda.azzinimunda1rec as am1rec

times = np.zeros(rep)
for i in range(rep):
    # Algorithm without Condorcet
    algorithm = am1.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 2, 2, 0, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am1rec.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 2, 2, 1, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

##############################################################
om = np.array([
[0,5,5,3],
[5,0,4,5],
[5,6,0,4],
[7,5,6,0]])


import kemeny.azzinimunda.azzinimunda1 as am1
import kemeny.azzinimunda.azzinimunda1rec as am1rec

times = np.zeros(rep)
for i in range(rep):
    # Algorithm without Condorcet
    algorithm = am1.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 2, 3, 0, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am1rec.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 2, 3, 1, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

##############################################################
om = np.array([
[0,6,7,4],
[4,0,5,5],
[3,5,0,3],
[6,5,7,0]])


import kemeny.azzinimunda.azzinimunda1 as am1
import kemeny.azzinimunda.azzinimunda1rec as am1rec

times = np.zeros(rep)
for i in range(rep):
    # Algorithm without Condorcet
    algorithm = am1.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 2, 4, 0, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am1rec.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 2, 4, 1, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

##############################################################
om = np.array([
[0,6,7,5],
[4,0,6,4],
[3,4,0,3],
[5,6,7,0]])


import kemeny.azzinimunda.azzinimunda1 as am1
import kemeny.azzinimunda.azzinimunda1rec as am1rec

times = np.zeros(rep)
for i in range(rep):
    # Algorithm without Condorcet
    algorithm = am1.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 2, 5, 0, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am1rec.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 2, 5, 1, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

##############################################################
om = np.array([
[0,8,6,5],
[2,0,2,3],
[4,8,0,5],
[5,7,5,0]])


import kemeny.azzinimunda.azzinimunda1 as am1
import kemeny.azzinimunda.azzinimunda1rec as am1rec

times = np.zeros(rep)
for i in range(rep):
    # Algorithm without Condorcet
    algorithm = am1.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 3, 1, 0, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am1rec.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 3, 1, 1, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

##############################################################
om = np.array([
[0,5,5,5],
[5,0,5,10],
[5,5,0,5],
[5,0,5,0]])


import kemeny.azzinimunda.azzinimunda1 as am1
import kemeny.azzinimunda.azzinimunda1rec as am1rec

times = np.zeros(rep)
for i in range(rep):
    # Algorithm without Condorcet
    algorithm = am1.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 3, 2, 0, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am1rec.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 3, 2, 1, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

##############################################################
om = np.array([
[0,4,6,6],
[6,0,4,8],
[4,6,0,6],
[4,2,4,0]])


import kemeny.azzinimunda.azzinimunda1 as am1
import kemeny.azzinimunda.azzinimunda1rec as am1rec

times = np.zeros(rep)
for i in range(rep):
    # Algorithm without Condorcet
    algorithm = am1.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 3, 3, 0, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am1rec.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 3, 3, 1, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

##############################################################
om = np.array([
[0,4,5,2],
[6,0,5,6],
[5,5,0,5],
[8,4,5,0]])


import kemeny.azzinimunda.azzinimunda1 as am1
import kemeny.azzinimunda.azzinimunda1rec as am1rec

times = np.zeros(rep)
for i in range(rep):
    # Algorithm without Condorcet
    algorithm = am1.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 3, 4, 0, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am1rec.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 3, 4, 1, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

##############################################################
om = np.array([
[0,5,5,5],
[5,0,10,5],
[5,0,0,5],
[5,5,5,0]])


import kemeny.azzinimunda.azzinimunda1 as am1
import kemeny.azzinimunda.azzinimunda1rec as am1rec

times = np.zeros(rep)
for i in range(rep):
    # Algorithm without Condorcet
    algorithm = am1.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 3, 5, 0, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am1rec.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([4, 3, 5, 1, exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:6])
results4 = np.vstack((results4, result))

 
pd.DataFrame(results4).to_csv("cwsinyconrec4prueba_azzini.csv")
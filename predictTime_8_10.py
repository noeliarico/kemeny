
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,8,6,6,5,6,5,7],
[2,0,5,6,4,1,4,5],
[4,5,0,5,3,5,4,4],
[4,4,5,0,3,4,3,6],
[5,6,7,7,0,5,9,6],
[4,9,5,6,5,0,5,7],
[5,6,6,7,1,5,0,4],
[3,5,6,4,4,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,5,4,3,3,4],
[5,0,5,3,5,5,3,5],
[7,5,0,6,5,7,4,8],
[5,7,4,0,4,6,7,5],
[6,5,5,6,0,7,3,8],
[7,5,3,4,3,0,5,5],
[7,7,6,3,7,5,0,7],
[6,5,2,5,2,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,5,3,5,5],
[6,0,6,5,7,4,6,6],
[6,4,0,5,6,6,5,5],
[6,5,5,0,9,6,5,7],
[5,3,4,1,0,4,5,6],
[7,6,4,4,6,0,5,6],
[5,4,5,5,5,5,0,5],
[5,4,5,3,4,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,2,4,5,8,6],
[6,0,3,2,4,2,7,6],
[6,7,0,7,5,7,7,7],
[8,8,3,0,5,7,7,9],
[6,6,5,5,0,4,9,8],
[5,8,3,3,6,0,8,7],
[2,3,3,3,1,2,0,4],
[4,4,3,1,2,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,6,5,6,5],
[5,0,3,4,7,6,7,6],
[5,7,0,6,8,5,10,6],
[5,6,4,0,6,6,9,6],
[4,3,2,4,0,3,6,4],
[5,4,5,4,7,0,9,7],
[4,3,0,1,4,1,0,4],
[5,4,4,4,6,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,5,6,4,5,7],
[3,0,5,4,4,4,3,5],
[3,5,0,4,4,6,3,6],
[5,6,6,0,5,6,5,7],
[4,6,6,5,0,5,6,8],
[6,6,4,4,5,0,6,5],
[5,7,7,5,4,4,0,5],
[3,5,4,3,2,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,9,7,5,9,7],
[4,0,7,9,9,4,9,7],
[2,3,0,5,2,5,4,3],
[1,1,5,0,6,2,3,4],
[3,1,8,4,0,4,4,4],
[5,6,5,8,6,0,5,6],
[1,1,6,7,6,5,0,5],
[3,3,7,6,6,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,2,2,3,3,2],
[7,0,3,5,5,2,8,5],
[7,7,0,5,5,7,7,7],
[8,5,5,0,7,5,8,5],
[8,5,5,3,0,5,5,5],
[7,8,3,5,5,0,6,5],
[7,2,3,2,5,4,0,7],
[8,5,3,5,5,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,2,3,3,3,6],
[7,0,3,2,3,0,5,4],
[7,7,0,4,5,2,4,7],
[8,8,6,0,6,4,6,8],
[7,7,5,4,0,5,6,6],
[7,10,8,6,5,0,8,9],
[7,5,6,4,4,2,0,5],
[4,6,3,2,4,1,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,10,6,5,4,4,4],
[4,0,7,7,5,1,2,7],
[0,3,0,6,2,4,4,3],
[4,3,4,0,5,3,1,3],
[5,5,8,5,0,2,6,3],
[6,9,6,7,8,0,5,9],
[6,8,6,9,4,5,0,6],
[6,3,7,7,7,1,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,1,5,6,9,4,7],
[3,0,2,4,7,7,4,6],
[9,8,0,4,7,9,8,8],
[5,6,6,0,6,6,6,6],
[4,3,3,4,0,9,3,4],
[1,3,1,4,1,0,2,4],
[6,6,2,4,7,8,0,7],
[3,4,2,4,6,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,4,6,5,6,3],
[5,0,3,4,5,3,8,2],
[6,7,0,5,9,5,7,5],
[6,6,5,0,5,3,5,2],
[4,5,1,5,0,5,3,4],
[5,7,5,7,5,0,7,5],
[4,2,3,5,7,3,0,2],
[7,8,5,8,6,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,8,5,8,8,5],
[5,0,10,8,5,5,5,5],
[3,0,0,3,3,3,3,0],
[2,2,7,0,2,2,2,2],
[5,5,7,8,0,3,8,5],
[2,5,7,8,7,0,10,7],
[2,5,7,8,2,0,0,0],
[5,5,10,8,5,3,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,6,6,5,6,5],
[5,0,3,4,3,4,4,2],
[5,7,0,5,5,7,5,3],
[4,6,5,0,6,2,5,4],
[4,7,5,4,0,3,4,2],
[5,6,3,8,7,0,5,3],
[4,6,5,5,6,5,0,3],
[5,8,7,6,8,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,9,5,7,4,6],
[3,0,4,2,3,4,4,4],
[4,6,0,8,5,8,4,7],
[1,8,2,0,3,5,2,2],
[5,7,5,7,0,7,7,7],
[3,6,2,5,3,0,2,2],
[6,6,6,8,3,8,0,8],
[4,6,3,8,3,8,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,8,6,8,5,5],
[3,0,8,6,6,4,7,4],
[4,2,0,4,3,3,4,2],
[2,4,6,0,4,4,6,2],
[4,4,7,6,0,5,4,6],
[2,6,7,6,5,0,4,4],
[5,3,6,4,6,6,0,5],
[5,6,8,8,4,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,7,4,6,7,4],
[4,0,4,4,5,5,8,5],
[6,6,0,7,2,7,9,6],
[3,6,3,0,2,3,7,4],
[6,5,8,8,0,5,8,4],
[4,5,3,7,5,0,7,2],
[3,2,1,3,2,3,0,4],
[6,5,4,6,6,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,6,2,4,5,4],
[6,0,3,7,4,3,4,4],
[6,7,0,8,5,6,7,7],
[4,3,2,0,2,3,5,4],
[8,6,5,8,0,5,6,5],
[6,7,4,7,5,0,6,6],
[5,6,3,5,4,4,0,5],
[6,6,3,6,5,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,8,5,7,6,4,5],
[7,0,7,3,6,5,1,5],
[2,3,0,5,4,5,4,4],
[5,7,5,0,4,5,4,5],
[3,4,6,6,0,6,4,7],
[4,5,5,5,4,0,6,5],
[6,9,6,6,6,4,0,8],
[5,5,6,5,3,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,7,5,6,6,5],
[4,0,4,5,3,3,3,4],
[5,6,0,7,5,6,5,4],
[3,5,3,0,4,3,6,2],
[5,7,5,6,0,6,7,4],
[4,7,4,7,4,0,5,3],
[4,7,5,4,3,5,0,2],
[5,6,6,8,6,7,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,8,3,3,8,3],
[2,0,2,0,0,0,2,0],
[2,8,0,8,3,3,5,3],
[2,10,2,0,0,3,2,3],
[7,10,7,10,0,10,7,5],
[7,10,7,7,0,0,7,0],
[2,8,5,8,3,3,0,3],
[7,10,7,7,5,10,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,2,3,3,2,4],
[6,0,4,4,2,5,4,3],
[7,6,0,3,4,3,5,3],
[8,6,7,0,5,5,4,5],
[7,8,6,5,0,6,6,5],
[7,5,7,5,4,0,4,4],
[8,6,5,6,4,6,0,4],
[6,7,7,5,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,5,5,2,5,3],
[7,0,4,2,5,5,7,6],
[7,6,0,2,7,7,7,6],
[5,8,8,0,10,7,8,8],
[5,5,3,0,0,0,4,6],
[8,5,3,3,10,0,8,8],
[5,3,3,2,6,2,0,4],
[7,4,4,2,4,2,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,3,8,5,7,5],
[3,0,8,4,5,6,7,6],
[2,2,0,3,4,5,2,7],
[7,6,7,0,5,7,4,9],
[2,5,6,5,0,5,5,7],
[5,4,5,3,5,0,4,2],
[3,3,8,6,5,6,0,8],
[5,4,3,1,3,8,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,0,2,5,5,5],
[10,0,7,7,10,5,5,8],
[5,3,0,0,5,0,5,3],
[10,3,10,0,10,8,8,8],
[8,0,5,0,0,5,5,5],
[5,5,10,2,5,0,5,3],
[5,5,5,2,5,5,0,5],
[5,2,7,2,5,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,5,5,8,5,2],
[4,0,7,4,4,4,4,4],
[5,3,0,2,4,7,0,0],
[5,6,8,0,7,10,5,2],
[5,6,6,3,0,10,6,3],
[2,6,3,0,0,0,3,0],
[5,6,10,5,4,7,0,5],
[8,6,10,8,7,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,4,6,2,3,4],
[4,0,3,4,5,3,4,4],
[6,7,0,3,4,3,5,2],
[6,6,7,0,4,5,8,5],
[4,5,6,6,0,3,4,3],
[8,7,7,5,7,0,6,5],
[7,6,5,2,6,4,0,3],
[6,6,8,5,7,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,7,6,7,3,7,6],
[8,0,5,5,5,8,5,8],
[3,5,0,1,8,3,5,9],
[4,5,9,0,9,3,6,9],
[3,5,2,1,0,3,6,4],
[7,2,7,7,7,0,7,7],
[3,5,5,4,4,3,0,4],
[4,2,1,1,6,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,8,7,7,4,8],
[4,0,2,5,4,5,3,8],
[4,8,0,4,5,5,5,7],
[2,5,6,0,5,5,5,6],
[3,6,5,5,0,6,7,5],
[3,5,5,5,4,0,4,8],
[6,7,5,5,3,6,0,7],
[2,2,3,4,5,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,2,0,2,4,0],
[10,0,0,2,0,2,4,4],
[10,10,0,6,6,2,6,10],
[8,8,4,0,8,6,8,8],
[10,10,4,2,0,6,6,4],
[8,8,8,4,4,0,4,8],
[6,6,4,2,4,6,0,4],
[10,6,0,2,6,2,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,5,6,6,5,5],
[6,0,7,9,6,7,5,7],
[5,3,0,5,6,5,3,6],
[5,1,5,0,5,5,3,4],
[4,4,4,5,0,6,5,5],
[4,3,5,5,4,0,3,5],
[5,5,7,7,5,7,0,5],
[5,3,4,6,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,2,7,5,5,6],
[7,0,5,5,7,5,5,5],
[5,5,0,0,5,8,4,8],
[8,5,10,0,5,8,10,8],
[3,3,5,5,0,5,5,3],
[5,5,2,2,5,0,2,5],
[5,5,6,0,5,8,0,6],
[4,5,2,2,7,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,1,5,5,7,4,5],
[3,0,4,3,1,3,3,1],
[9,6,0,4,5,7,4,5],
[5,7,6,0,5,7,7,7],
[5,9,5,5,0,5,3,5],
[3,7,3,3,5,0,1,3],
[6,7,6,3,7,9,0,7],
[5,9,5,3,5,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,4,4,4,4,4],
[4,0,7,5,5,5,4,4],
[5,3,0,3,3,5,2,2],
[6,5,7,0,5,6,4,5],
[6,5,7,5,0,4,5,3],
[6,5,5,4,6,0,5,5],
[6,6,8,6,5,5,0,4],
[6,6,8,5,7,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,0,10,10],
[5,0,10,10,10,5,10,10],
[5,0,0,0,10,5,5,5],
[5,0,10,0,10,5,10,10],
[5,0,0,0,0,0,5,5],
[10,5,5,5,10,0,10,10],
[0,0,5,0,5,0,0,5],
[0,0,5,0,5,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,3,6,8,7,3,10],
[2,0,2,2,4,4,0,6],
[7,8,0,7,9,7,5,9],
[4,8,3,0,8,7,5,7],
[2,6,1,2,0,7,3,4],
[3,6,3,3,3,0,4,7],
[7,10,5,5,7,6,0,7],
[0,4,1,3,6,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,1,3,5,6,5],
[7,0,10,7,5,10,8,7],
[6,0,0,2,0,4,5,4],
[9,3,8,0,4,7,8,8],
[7,5,10,6,0,5,6,8],
[5,0,6,3,5,0,5,5],
[4,2,5,2,4,5,0,2],
[5,3,6,2,2,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,0,0,5,5,5],
[10,0,10,10,10,10,10,5],
[5,0,0,5,5,10,10,5],
[10,0,5,0,5,10,10,5],
[10,0,5,5,0,10,10,5],
[5,0,0,0,0,0,0,5],
[5,0,0,0,0,10,0,5],
[5,5,5,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,3,3,7,3,7],
[5,0,7,5,5,7,6,10],
[4,3,0,3,3,5,1,6],
[7,5,7,0,5,9,5,10],
[7,5,7,5,0,5,4,7],
[3,3,5,1,5,0,4,8],
[7,4,9,5,6,6,0,7],
[3,0,4,0,3,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,5,4,7,7,6],
[2,0,4,5,4,6,5,4],
[5,6,0,7,5,5,6,5],
[5,5,3,0,8,5,6,6],
[6,6,5,2,0,5,7,7],
[3,4,5,5,5,0,6,4],
[3,5,4,4,3,4,0,3],
[4,6,5,4,3,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,8,6,7,7,4,6],
[1,0,6,4,3,3,2,6],
[2,4,0,5,4,4,1,2],
[4,6,5,0,6,6,4,4],
[3,7,6,4,0,5,5,4],
[3,7,6,4,5,0,4,5],
[6,8,9,6,5,6,0,8],
[4,4,8,6,6,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,5,5,6,5,5,6],
[1,0,2,2,5,4,0,4],
[5,8,0,5,5,5,3,4],
[5,8,5,0,5,4,5,6],
[4,5,5,5,0,6,5,4],
[5,6,5,6,4,0,4,5],
[5,10,7,5,5,6,0,4],
[4,6,6,4,6,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,7,4,4,3,2],
[6,0,5,7,5,5,5,6],
[5,5,0,5,4,5,6,4],
[3,3,5,0,1,2,3,3],
[6,5,6,9,0,4,5,5],
[6,5,5,8,6,0,5,4],
[7,5,4,7,5,5,0,7],
[8,4,6,7,5,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,3,6,4,3,5],
[3,0,7,4,8,5,5,5],
[3,3,0,3,4,4,3,3],
[7,6,7,0,5,7,5,5],
[4,2,6,5,0,5,4,4],
[6,5,6,3,5,0,4,6],
[7,5,7,5,6,6,0,4],
[5,5,7,5,6,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,4,7,3,4,3],
[3,0,5,2,4,3,1,1],
[3,5,0,2,3,4,6,2],
[6,8,8,0,7,5,6,5],
[3,6,7,3,0,3,6,3],
[7,7,6,5,7,0,7,3],
[6,9,4,4,4,3,0,2],
[7,9,8,5,7,7,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,2,3,6,3,4],
[5,0,4,6,4,5,3,6],
[7,6,0,6,6,7,6,5],
[8,4,4,0,4,5,3,5],
[7,6,4,6,0,7,3,5],
[4,5,3,5,3,0,1,2],
[7,7,4,7,7,9,0,7],
[6,4,5,5,5,8,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,8,8,8,8,5],
[5,0,2,4,5,5,5,2],
[5,8,0,6,6,5,6,3],
[2,6,4,0,6,6,6,4],
[2,5,4,4,0,4,6,2],
[2,5,5,4,6,0,7,1],
[2,5,4,4,4,3,0,1],
[5,8,7,6,8,9,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,2,5,6,3,5],
[4,0,2,0,2,2,0,2],
[5,8,0,3,2,5,3,5],
[8,10,7,0,7,6,6,5],
[5,8,8,3,0,8,3,6],
[4,8,5,4,2,0,2,3],
[7,10,7,4,7,8,0,7],
[5,8,5,5,4,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,7,6,6,9],
[5,0,8,7,7,6,7,8],
[4,2,0,4,8,6,6,3],
[4,3,6,0,7,6,8,3],
[3,3,2,3,0,4,4,4],
[4,4,4,4,6,0,5,4],
[4,3,4,2,6,5,0,3],
[1,2,7,7,6,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,5,10,5,5,0],
[5,0,5,5,5,5,10,5],
[0,5,0,5,10,5,5,0],
[5,5,5,0,5,5,10,5],
[0,5,0,5,0,0,5,0],
[5,5,5,5,10,0,5,0],
[5,0,5,0,5,5,0,0],
[10,5,10,5,10,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,10,8,8,10,7,3],
[7,0,7,8,5,10,7,5],
[0,3,0,3,3,5,2,3],
[2,2,7,0,7,7,7,5],
[2,5,7,3,0,10,2,5],
[0,0,5,3,0,0,0,3],
[3,3,8,3,8,10,0,3],
[7,5,7,5,5,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,4,4,8,4,6],
[6,0,6,2,2,6,6,4],
[4,4,0,2,4,6,4,2],
[6,8,8,0,4,6,8,6],
[6,8,6,6,0,4,8,4],
[2,4,4,4,6,0,4,4],
[6,4,6,2,2,6,0,6],
[4,6,8,4,6,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,5,1,1,2,2],
[8,0,5,8,5,6,9,6],
[5,5,0,5,3,3,6,7],
[5,2,5,0,1,1,2,2],
[9,5,7,9,0,4,6,7],
[9,4,7,9,6,0,6,9],
[8,1,4,8,4,4,0,4],
[8,4,3,8,3,1,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,7,9,6,5,5,4],
[1,0,5,4,2,6,5,2],
[3,5,0,3,4,8,5,4],
[1,6,7,0,6,5,5,2],
[4,8,6,4,0,6,4,3],
[5,4,2,5,4,0,2,4],
[5,5,5,5,6,8,0,5],
[6,8,6,8,7,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,3,8,3,3,3,5],
[2,0,5,0,0,5,2,5],
[7,5,0,5,0,10,7,5],
[2,10,5,0,5,5,2,5],
[7,10,10,5,0,10,7,5],
[7,5,0,5,0,0,5,5],
[7,8,3,8,3,5,0,5],
[5,5,5,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,2,3,2,9,7],
[7,0,6,5,4,5,8,7],
[7,4,0,2,4,2,9,9],
[8,5,8,0,5,4,9,9],
[7,6,6,5,0,3,7,7],
[8,5,8,6,7,0,10,9],
[1,2,1,1,3,0,0,4],
[3,3,1,1,3,1,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,5,7,10,5,5],
[8,0,8,5,5,8,8,5],
[5,2,0,5,7,10,5,0],
[5,5,5,0,5,5,3,3],
[3,5,3,5,0,5,8,0],
[0,2,0,5,5,0,5,0],
[5,2,5,7,2,5,0,0],
[5,5,10,7,10,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,3,0,3,8,0,3],
[2,0,5,2,3,3,0,0],
[7,5,0,7,8,8,5,5],
[10,8,3,0,3,8,5,8],
[7,7,2,7,0,8,5,7],
[2,7,2,2,2,0,0,2],
[10,10,5,5,5,10,0,5],
[7,10,5,2,3,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,6,6,8,6,8],
[5,0,5,4,5,6,7,9],
[6,5,0,4,4,8,6,7],
[4,6,6,0,4,6,6,6],
[4,5,6,6,0,5,7,7],
[2,4,2,4,5,0,4,8],
[4,3,4,4,3,6,0,7],
[2,1,3,4,3,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,7,2,5,6,4,6],
[8,0,7,5,9,7,6,8],
[3,3,0,2,5,3,3,3],
[8,5,8,0,10,7,7,7],
[5,1,5,0,0,5,4,3],
[4,3,7,3,5,0,4,7],
[6,4,7,3,6,6,0,4],
[4,2,7,3,7,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,2,3,0,2,0,2],
[9,0,8,8,4,5,6,6],
[8,2,0,7,3,4,4,5],
[7,2,3,0,2,4,3,3],
[10,6,7,8,0,6,7,5],
[8,5,6,6,4,0,6,6],
[10,4,6,7,3,4,0,8],
[8,4,5,7,5,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,1,2,7,3,5,2],
[8,0,2,4,7,5,5,4],
[9,8,0,7,7,8,6,5],
[8,6,3,0,7,3,5,3],
[3,3,3,3,0,5,5,3],
[7,5,2,7,5,0,4,6],
[5,5,4,5,5,6,0,3],
[8,6,5,7,7,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,2,3,3,3,5],
[6,0,5,6,5,6,6,5],
[8,5,0,6,6,7,7,6],
[8,4,4,0,6,5,5,5],
[7,5,4,4,0,5,6,4],
[7,4,3,5,5,0,8,6],
[7,4,3,5,4,2,0,5],
[5,5,4,5,6,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,2,4,2,2,5],
[10,0,10,7,8,9,8,5],
[5,0,0,2,4,2,4,5],
[8,3,8,0,5,3,5,3],
[6,2,6,5,0,4,2,3],
[8,1,8,7,6,0,6,3],
[8,2,6,5,8,4,0,5],
[5,5,5,7,7,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,3,3,6,3,5],
[6,0,5,7,5,4,4,3],
[5,5,0,5,5,5,4,3],
[7,3,5,0,4,5,5,3],
[7,5,5,6,0,6,4,5],
[4,6,5,5,4,0,5,5],
[7,6,6,5,6,5,0,4],
[5,7,7,7,5,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,0,3,3,3,0,1],
[6,0,1,5,3,5,1,3],
[10,9,0,6,6,6,3,4],
[7,5,4,0,4,3,4,5],
[7,7,4,6,0,9,5,4],
[7,5,4,7,1,0,1,5],
[10,9,7,6,5,9,0,4],
[9,7,6,5,6,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,8,5,2,4,6],
[5,0,8,9,6,5,6,7],
[5,2,0,7,5,4,3,4],
[2,1,3,0,1,3,2,3],
[5,4,5,9,0,4,4,4],
[8,5,6,7,6,0,4,5],
[6,4,7,8,6,6,0,4],
[4,3,6,7,6,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,4,6,4,4,5],
[4,0,6,4,4,5,2,4],
[5,4,0,2,6,3,5,5],
[6,6,8,0,8,6,5,8],
[4,6,4,2,0,4,3,6],
[6,5,7,4,6,0,5,7],
[6,8,5,5,7,5,0,6],
[5,6,5,2,4,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,3,3,1,2,7],
[6,0,3,6,6,2,4,3],
[8,7,0,4,6,6,5,5],
[7,4,6,0,6,3,6,7],
[7,4,4,4,0,2,2,5],
[9,8,4,7,8,0,4,7],
[8,6,5,4,8,6,0,5],
[3,7,5,3,5,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,4,6,6,6,8],
[4,0,7,5,6,8,7,5],
[3,3,0,3,4,6,5,3],
[6,5,7,0,8,8,7,7],
[4,4,6,2,0,6,8,4],
[4,2,4,2,4,0,5,5],
[4,3,5,3,2,5,0,5],
[2,5,7,3,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,5,5,5,5,0],
[10,0,5,10,10,5,10,5],
[5,5,0,5,5,5,5,5],
[5,0,5,0,0,5,5,5],
[5,0,5,10,0,5,5,5],
[5,5,5,5,5,0,5,5],
[5,0,5,5,5,5,0,5],
[10,5,5,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,5,4,5,5,5],
[5,0,5,4,3,4,3,4],
[3,5,0,4,4,5,2,5],
[5,6,6,0,5,6,7,6],
[6,7,6,5,0,4,3,7],
[5,6,5,4,6,0,3,7],
[5,7,8,3,7,7,0,5],
[5,6,5,4,3,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,3,6,3,7,6,6],
[2,0,2,4,2,5,2,2],
[7,8,0,4,3,7,5,4],
[4,6,6,0,6,10,6,3],
[7,8,7,4,0,7,5,6],
[3,5,3,0,3,0,5,1],
[4,8,5,4,5,5,0,5],
[4,8,6,7,4,9,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,0,0,6,3,3,3],
[7,0,3,5,5,2,4,8],
[10,7,0,4,10,7,7,7],
[10,5,6,0,8,5,7,5],
[4,5,0,2,0,4,4,5],
[7,8,3,5,6,0,5,8],
[7,6,3,3,6,5,0,6],
[7,2,3,5,5,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,7,7,5,7,7],
[7,0,7,10,10,7,4,4],
[3,3,0,8,10,3,5,5],
[3,0,2,0,5,0,0,0],
[3,0,0,5,0,0,2,2],
[5,3,7,10,10,0,7,4],
[3,6,5,10,8,3,0,4],
[3,6,5,10,8,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,10,2,5,8,8],
[7,0,2,7,2,7,7,5],
[7,8,0,7,2,7,7,5],
[0,3,3,0,2,0,3,0],
[8,8,8,8,0,5,8,8],
[5,3,3,10,5,0,8,3],
[2,3,3,7,2,2,0,0],
[2,5,5,10,2,7,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,5,8,5,7,4],
[3,0,3,7,4,1,6,7],
[2,7,0,7,7,3,7,4],
[5,3,3,0,4,3,6,4],
[2,6,3,6,0,3,6,4],
[5,9,7,7,7,0,6,7],
[3,4,3,4,4,4,0,3],
[6,3,6,6,6,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,2,8,6,5,7],
[6,0,7,5,6,6,6,4],
[3,3,0,2,6,6,5,3],
[8,5,8,0,7,6,6,5],
[2,4,4,3,0,4,3,4],
[4,4,4,4,6,0,5,4],
[5,4,5,4,7,5,0,3],
[3,6,7,5,6,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,1,5,1,2,1,2],
[7,0,4,7,7,5,1,4],
[9,6,0,6,7,6,5,6],
[5,3,4,0,5,6,3,2],
[9,3,3,5,0,3,1,3],
[8,5,4,4,7,0,3,5],
[9,9,5,7,9,7,0,5],
[8,6,4,8,7,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,6,5,5,4,6],
[3,0,8,6,6,8,6,6],
[4,2,0,6,4,5,4,5],
[4,4,4,0,6,6,4,4],
[5,4,6,4,0,5,3,4],
[5,2,5,4,5,0,4,5],
[6,4,6,6,7,6,0,6],
[4,4,5,6,6,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,7,8,6,5,8],
[4,0,7,6,6,5,5,6],
[5,3,0,6,5,6,4,4],
[3,4,4,0,6,3,3,4],
[2,4,5,4,0,3,3,4],
[4,5,4,7,7,0,5,3],
[5,5,6,7,7,5,0,6],
[2,4,6,6,6,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,2,5,3,2,0,5],
[8,0,10,10,5,7,5,8],
[8,0,0,8,5,7,3,6],
[5,0,2,0,0,2,0,3],
[7,5,5,10,0,7,3,5],
[8,3,3,8,3,0,3,6],
[10,5,7,10,7,7,0,8],
[5,2,4,7,5,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,3,4,3,5,5],
[6,0,2,1,5,2,4,4],
[8,8,0,7,7,5,8,6],
[7,9,3,0,5,3,6,6],
[6,5,3,5,0,4,3,6],
[7,8,5,7,6,0,6,5],
[5,6,2,4,7,4,0,4],
[5,6,4,4,4,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,1,5,1,2,6],
[5,0,5,1,5,1,2,6],
[5,5,0,1,5,1,2,6],
[9,9,9,0,9,5,10,10],
[5,5,5,1,0,1,5,5],
[9,9,9,5,9,0,5,9],
[8,8,8,0,5,5,0,9],
[4,4,4,0,5,1,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,4,4,5,3],
[4,0,4,5,4,2,3,3],
[4,6,0,6,6,5,7,3],
[5,5,4,0,6,2,4,3],
[6,6,4,4,0,4,6,2],
[6,8,5,8,6,0,6,5],
[5,7,3,6,4,4,0,3],
[7,7,7,7,8,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,10,10,10,7,7,7],
[6,0,6,6,6,6,6,3],
[0,4,0,3,7,6,4,4],
[0,4,7,0,7,7,7,7],
[0,4,3,3,0,6,4,4],
[3,4,4,3,4,0,4,1],
[3,4,6,3,6,6,0,4],
[3,7,6,3,6,9,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,7,5,4,4],
[5,0,4,8,7,5,6,5],
[5,6,0,6,7,7,5,4],
[5,2,4,0,5,4,6,3],
[3,3,3,5,0,1,4,3],
[5,5,3,6,9,0,5,5],
[6,4,5,4,6,5,0,6],
[6,5,6,7,7,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,6,5,3,2,5],
[5,0,6,6,4,3,3,4],
[5,4,0,6,4,3,3,2],
[4,4,4,0,6,3,4,3],
[5,6,6,4,0,3,1,3],
[7,7,7,7,7,0,5,5],
[8,7,7,6,9,5,0,7],
[5,6,8,7,7,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,2,5,3,4,4,3],
[7,0,4,6,7,3,6,4],
[8,6,0,7,7,5,7,7],
[5,4,3,0,5,5,5,6],
[7,3,3,5,0,6,5,4],
[6,7,5,5,4,0,6,4],
[6,4,3,5,5,4,0,5],
[7,6,3,4,6,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,3,3,5,4,3],
[4,0,2,2,2,4,4,5],
[7,8,0,7,6,6,5,6],
[7,8,3,0,4,5,5,7],
[7,8,4,6,0,6,6,8],
[5,6,4,5,4,0,5,5],
[6,6,5,5,4,5,0,5],
[7,5,4,3,2,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,7,1,1,7,3],
[6,0,7,7,7,5,4,6],
[7,3,0,4,5,4,7,4],
[3,3,6,0,4,3,7,5],
[9,3,5,6,0,7,7,6],
[9,5,6,7,3,0,7,2],
[3,6,3,3,3,3,0,3],
[7,4,6,5,4,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,5,10,5],
[5,0,0,0,0,5,5,0],
[5,10,0,5,5,5,10,5],
[5,10,5,0,0,10,5,10],
[5,10,5,10,0,10,5,10],
[5,5,5,0,0,0,5,5],
[0,5,0,5,5,5,0,5],
[5,10,5,0,0,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,7,7,7,5,7],
[5,0,6,6,5,4,4,9],
[4,4,0,6,7,5,4,3],
[3,4,4,0,5,3,6,5],
[3,5,3,5,0,5,4,4],
[3,6,5,7,5,0,6,7],
[5,6,6,4,6,4,0,6],
[3,1,7,5,6,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,5,5,6,6,4],
[4,0,5,4,5,3,5,4],
[5,5,0,2,2,4,4,4],
[5,6,8,0,4,3,9,5],
[5,5,8,6,0,3,8,5],
[4,7,6,7,7,0,7,4],
[4,5,6,1,2,3,0,4],
[6,6,6,5,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,2,5,1,4,3],
[7,0,5,7,5,5,5,7],
[3,5,0,3,7,3,1,3],
[8,3,7,0,5,8,7,7],
[5,5,3,5,0,5,3,5],
[9,5,7,2,5,0,4,9],
[6,5,9,3,7,6,0,6],
[7,3,7,3,5,1,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,6,6,5,7],
[6,0,7,7,7,6,7,5],
[6,3,0,4,6,5,6,6],
[6,3,6,0,6,6,6,5],
[4,3,4,4,0,4,4,5],
[4,4,5,4,6,0,5,6],
[5,3,4,4,6,5,0,7],
[3,5,4,5,5,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,1,3,3,5,2,0],
[8,0,4,7,1,3,3,3],
[9,6,0,7,3,5,5,2],
[7,3,3,0,1,3,3,3],
[7,9,7,9,0,3,7,7],
[5,7,5,7,7,0,5,4],
[8,7,5,7,3,5,0,0],
[10,7,8,7,3,6,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,8,7,5,10,6],
[5,0,5,5,5,5,7,5],
[3,5,0,3,2,3,3,3],
[2,5,7,0,2,2,7,5],
[3,5,8,8,0,3,8,4],
[5,5,7,8,7,0,7,6],
[0,3,7,3,2,3,0,6],
[4,5,7,5,6,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,3,0,0,0,2],
[8,0,8,8,5,5,5,7],
[7,2,0,2,2,2,2,2],
[7,2,8,0,5,5,2,7],
[10,5,8,5,0,0,5,2],
[10,5,8,5,10,0,5,5],
[10,5,8,8,5,5,0,7],
[8,3,8,3,8,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,4,6,6,6,7],
[4,0,5,3,5,6,4,6],
[5,5,0,5,5,7,5,9],
[6,7,5,0,4,7,5,6],
[4,5,5,6,0,5,5,5],
[4,4,3,3,5,0,3,3],
[4,6,5,5,5,7,0,6],
[3,4,1,4,5,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,6,5,5,5,6],
[7,0,6,6,5,7,5,8],
[6,4,0,6,7,6,7,6],
[4,4,4,0,5,5,5,7],
[5,5,3,5,0,7,5,6],
[5,3,4,5,3,0,6,6],
[5,5,3,5,5,4,0,5],
[4,2,4,3,4,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,10,2,0,7,2],
[10,0,3,10,10,8,10,10],
[10,7,0,10,7,5,7,7],
[0,0,0,0,0,0,7,0],
[8,0,3,10,0,8,7,8],
[10,2,5,10,2,0,7,5],
[3,0,3,3,3,3,0,3],
[8,0,3,10,2,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,2,7,4,6,2],
[6,0,6,2,5,6,6,5],
[8,4,0,4,5,4,4,4],
[8,8,6,0,7,8,10,5],
[3,5,5,3,0,3,5,5],
[6,4,6,2,7,0,8,4],
[4,4,6,0,5,2,0,2],
[8,5,6,5,5,6,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,10,10,5,5,5],
[5,0,5,5,10,10,5,5],
[0,5,0,10,10,5,5,5],
[0,5,0,0,10,5,0,5],
[0,0,0,0,0,0,0,5],
[5,0,5,5,10,0,5,5],
[5,5,5,10,10,5,0,10],
[5,5,5,5,5,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,2,3,2,2,2],
[7,0,3,5,4,5,3,5],
[6,7,0,4,7,6,6,4],
[8,5,6,0,6,6,5,5],
[7,6,3,4,0,5,3,4],
[8,5,4,4,5,0,2,3],
[8,7,4,5,7,8,0,5],
[8,5,6,5,6,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,4,4,4,0,0],
[7,0,7,7,5,7,5,5],
[6,3,0,5,4,3,3,0],
[6,3,5,0,6,5,0,0],
[6,5,6,4,0,6,4,4],
[6,3,7,5,4,0,3,0],
[10,5,7,10,6,7,0,5],
[10,5,10,10,6,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,8,9,10,9,9,4],
[6,0,8,6,10,5,6,7],
[2,2,0,2,2,2,5,2],
[1,4,8,0,7,9,7,4],
[0,0,8,3,0,5,3,4],
[1,5,8,1,5,0,4,5],
[1,4,5,3,7,6,0,5],
[6,3,8,6,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,7,4,3,7,3,4],
[8,0,8,5,6,9,3,6],
[3,2,0,4,3,7,1,5],
[6,5,6,0,6,6,4,6],
[7,4,7,4,0,7,5,6],
[3,1,3,4,3,0,1,5],
[7,7,9,6,5,9,0,7],
[6,4,5,4,4,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,10,6,6,6,8,4],
[6,0,6,2,2,2,4,0],
[0,4,0,0,2,0,4,0],
[4,8,10,0,6,2,4,4],
[4,8,8,4,0,4,8,8],
[4,8,10,8,6,0,8,4],
[2,6,6,6,2,2,0,2],
[6,10,10,6,2,6,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,9,5,9,8,3],
[4,0,4,4,4,4,4,4],
[6,6,0,9,5,10,10,3],
[1,6,1,0,3,1,1,3],
[5,6,5,7,0,7,5,7],
[1,6,0,9,3,0,8,3],
[2,6,0,9,5,2,0,3],
[7,6,7,7,3,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,3,6,5,8,6],
[7,0,3,6,6,7,7,7],
[6,7,0,3,6,8,9,6],
[7,4,7,0,7,8,7,6],
[4,4,4,3,0,6,3,4],
[5,3,2,2,4,0,4,3],
[2,3,1,3,7,6,0,4],
[4,3,4,4,6,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,6,6,6,4,4],
[7,0,7,7,6,8,7,5],
[6,3,0,6,5,3,5,3],
[4,3,4,0,4,3,5,3],
[4,4,5,6,0,5,6,6],
[4,2,7,7,5,0,6,3],
[6,3,5,5,4,4,0,3],
[6,5,7,7,4,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,4,5,6,6,4,5],
[9,0,7,6,9,5,5,7],
[6,3,0,4,7,5,3,2],
[5,4,6,0,5,5,3,3],
[4,1,3,5,0,5,3,5],
[4,5,5,5,5,0,5,6],
[6,5,7,7,7,5,0,4],
[5,3,8,7,5,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,4,4,4,3,0],
[3,0,3,0,3,6,3,3],
[6,7,0,3,7,7,3,3],
[6,10,7,0,4,7,3,3],
[6,7,3,6,0,10,3,6],
[6,4,3,3,0,0,3,3],
[7,7,7,7,7,7,0,3],
[10,7,7,7,4,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,8,3,7,5,5,5],
[8,0,8,8,5,3,5,3],
[2,2,0,5,5,2,5,0],
[7,2,5,0,4,5,2,2],
[3,5,5,6,0,5,5,3],
[5,7,8,5,5,0,5,5],
[5,5,5,8,5,5,0,3],
[5,7,10,8,7,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,6,4,7,4,2],
[4,0,6,8,3,6,4,4],
[5,4,0,7,5,5,5,4],
[4,2,3,0,3,5,3,3],
[6,7,5,7,0,7,3,5],
[3,4,5,5,3,0,4,4],
[6,6,5,7,7,6,0,4],
[8,6,6,7,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,4,6,5,3,3],
[4,0,4,4,7,8,4,5],
[6,6,0,5,6,6,5,5],
[6,6,5,0,8,6,5,6],
[4,3,4,2,0,4,2,3],
[5,2,4,4,6,0,4,6],
[7,6,5,5,8,6,0,7],
[7,5,5,4,7,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,4,6,4,4,5],
[6,0,3,3,6,3,6,5],
[8,7,0,4,7,4,6,6],
[6,7,6,0,7,3,7,6],
[4,4,3,3,0,5,3,6],
[6,7,6,7,5,0,5,4],
[6,4,4,3,7,5,0,4],
[5,5,4,4,4,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,8,5,2,4,5],
[2,0,6,6,3,1,1,3],
[3,4,0,7,5,2,3,4],
[2,4,3,0,4,2,4,3],
[5,7,5,6,0,5,5,4],
[8,9,8,8,5,0,4,7],
[6,9,7,6,5,6,0,6],
[5,7,6,7,6,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,3,4,2,5,4],
[8,0,6,3,7,5,6,5],
[5,4,0,4,4,4,4,4],
[7,7,6,0,5,7,4,4],
[6,3,6,5,0,4,8,4],
[8,5,6,3,6,0,5,4],
[5,4,6,6,2,5,0,4],
[6,5,6,6,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,9,9,10,9,4,10],
[1,0,10,10,10,10,5,10],
[1,0,0,5,5,9,4,1],
[1,0,5,0,5,5,5,1],
[0,0,5,5,0,9,0,1],
[1,0,1,5,1,0,0,1],
[6,5,6,5,10,10,0,6],
[0,0,9,9,9,9,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,5,4,6,7,3,4],
[9,0,6,7,7,8,5,7],
[5,4,0,5,3,7,5,6],
[6,3,5,0,7,7,5,6],
[4,3,7,3,0,8,6,5],
[3,2,3,3,2,0,3,5],
[7,5,5,5,4,7,0,6],
[6,3,4,4,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,2,6,9,6,5,5],
[4,0,5,5,5,6,5,4],
[8,5,0,8,9,5,8,4],
[4,5,2,0,9,2,8,5],
[1,5,1,1,0,1,5,0],
[4,4,5,8,9,0,8,8],
[5,5,2,2,5,2,0,1],
[5,6,6,5,10,2,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,8,7,4,7,5],
[2,0,5,6,6,4,7,5],
[5,5,0,8,6,6,8,6],
[2,4,2,0,4,3,7,4],
[3,4,4,6,0,3,5,5],
[6,6,4,7,7,0,7,5],
[3,3,2,3,5,3,0,3],
[5,5,4,6,5,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,6,4,5,3,6],
[6,0,6,8,5,10,5,8],
[6,4,0,7,4,7,1,6],
[4,2,3,0,4,4,2,5],
[6,5,6,6,0,8,1,6],
[5,0,3,6,2,0,1,5],
[7,5,9,8,9,9,0,8],
[4,2,4,5,4,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,0,2,4,2,2],
[8,0,5,4,5,4,7,5],
[6,5,0,5,4,5,8,5],
[10,6,5,0,5,9,6,6],
[8,5,6,5,0,5,7,6],
[6,6,5,1,5,0,6,4],
[8,3,2,4,3,4,0,6],
[8,5,5,4,4,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,4,5,5,4,1],
[6,0,1,4,5,10,5,6],
[5,9,0,9,9,9,5,5],
[6,6,1,0,10,6,5,6],
[5,5,1,0,0,6,5,5],
[5,0,1,4,4,0,0,0],
[6,5,5,5,5,10,0,1],
[9,4,5,4,5,10,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,9,5,4,6,6,6],
[5,0,6,6,4,5,8,7],
[1,4,0,2,2,4,5,5],
[5,4,8,0,4,4,6,6],
[6,6,8,6,0,5,7,6],
[4,5,6,6,5,0,7,7],
[4,2,5,4,3,3,0,8],
[4,3,5,4,4,3,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,2,2,4,0,0],
[10,0,2,2,2,4,2,1],
[10,8,0,7,6,6,2,3],
[8,8,3,0,5,4,2,3],
[8,8,4,5,0,4,2,1],
[6,6,4,6,6,0,6,1],
[10,8,8,8,8,4,0,5],
[10,9,7,7,9,9,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,2,2,3,2,6],
[7,0,10,5,1,7,1,7],
[3,0,0,1,0,3,1,3],
[8,5,9,0,5,4,6,9],
[8,9,10,5,0,9,2,8],
[7,3,7,6,1,0,2,8],
[8,9,9,4,8,8,0,7],
[4,3,7,1,2,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,3,4,6,7,7],
[5,0,4,3,3,8,5,7],
[4,6,0,5,4,8,6,9],
[7,7,5,0,5,9,5,8],
[6,7,6,5,0,8,6,8],
[4,2,2,1,2,0,3,3],
[3,5,4,5,4,7,0,8],
[3,3,1,2,2,7,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,2,2,3,2,2,6],
[3,0,3,2,2,3,4,3],
[8,7,0,2,3,2,4,7],
[8,8,8,0,4,4,4,8],
[7,8,7,6,0,5,6,7],
[8,7,8,6,5,0,4,7],
[8,6,6,6,4,6,0,6],
[4,7,3,2,3,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,4,6,3,7,7],
[5,0,4,4,5,7,4,6],
[2,6,0,3,3,4,3,5],
[6,6,7,0,5,7,4,6],
[4,5,7,5,0,5,5,7],
[7,3,6,3,5,0,6,5],
[3,6,7,6,5,4,0,7],
[3,4,5,4,3,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,3,3,4,6,3],
[4,0,5,2,1,2,5,4],
[3,5,0,2,1,3,4,4],
[7,8,8,0,5,6,8,5],
[7,9,9,5,0,6,7,6],
[6,8,7,4,4,0,8,7],
[4,5,6,2,3,2,0,4],
[7,6,6,5,4,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,4,7,7,7,4],
[7,0,4,4,7,7,7,6],
[7,6,0,5,10,8,10,7],
[6,6,5,0,7,9,7,5],
[3,3,0,3,0,6,6,3],
[3,3,2,1,4,0,4,3],
[3,3,0,3,4,6,0,4],
[6,4,3,5,7,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,5,3,5,2,6],
[5,0,5,10,3,8,7,5],
[7,5,0,5,2,7,2,10],
[5,0,5,0,3,2,5,5],
[7,7,8,7,0,7,4,10],
[5,2,3,8,3,0,5,5],
[8,3,8,5,6,5,0,8],
[4,5,0,5,0,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,5,5,6,6,7],
[3,0,5,4,6,6,5,7],
[5,5,0,7,6,5,7,5],
[5,6,3,0,6,6,5,6],
[5,4,4,4,0,7,6,5],
[4,4,5,4,3,0,4,5],
[4,5,3,5,4,6,0,4],
[3,3,5,4,5,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,3,8,9,5,6,8],
[1,0,0,4,2,2,4,3],
[7,10,0,8,8,5,7,8],
[2,6,2,0,7,2,2,6],
[1,8,2,3,0,4,4,5],
[5,8,5,8,6,0,3,10],
[4,6,3,8,6,7,0,8],
[2,7,2,4,5,0,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,6,5,6,4,6],
[4,0,4,6,6,3,3,7],
[6,6,0,6,7,5,6,7],
[4,4,4,0,4,4,3,5],
[5,4,3,6,0,4,5,5],
[4,7,5,6,6,0,5,6],
[6,7,4,7,5,5,0,7],
[4,3,3,5,5,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,5,4,3,3,3],
[3,0,5,2,4,1,1,3],
[2,5,0,5,4,1,5,4],
[5,8,5,0,6,4,7,6],
[6,6,6,4,0,6,5,7],
[7,9,9,6,4,0,6,8],
[7,9,5,3,5,4,0,8],
[7,7,6,4,3,2,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,6,6,7,5,5],
[5,0,7,8,7,6,6,6],
[2,3,0,5,4,4,4,3],
[4,2,5,0,4,5,4,4],
[4,3,6,6,0,4,5,5],
[3,4,6,5,6,0,5,4],
[5,4,6,6,5,5,0,4],
[5,4,7,6,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,5,6,2,5,4],
[4,0,5,7,4,3,6,3],
[6,5,0,4,6,3,5,4],
[5,3,6,0,3,5,5,1],
[4,6,4,7,0,3,6,4],
[8,7,7,5,7,0,7,6],
[5,4,5,5,4,3,0,3],
[6,7,6,9,6,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,5,5,6,9,10,0],
[1,0,5,5,6,5,1,0],
[5,5,0,5,5,5,5,5],
[5,5,5,0,6,5,5,0],
[4,4,5,4,0,4,4,0],
[1,5,5,5,6,0,5,0],
[0,9,5,5,6,5,0,0],
[10,10,5,10,10,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,5,4,3,5,5],
[5,0,7,6,6,6,3,7],
[4,3,0,5,4,4,2,4],
[5,4,5,0,4,3,4,7],
[6,4,6,6,0,7,6,5],
[7,4,6,7,3,0,4,4],
[5,7,8,6,4,6,0,7],
[5,3,6,3,5,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,3,3,3,3,3],
[7,0,3,4,3,6,3,3],
[7,7,0,7,6,4,6,6],
[7,6,3,0,0,3,3,3],
[7,7,4,10,0,7,3,4],
[7,4,6,7,3,0,6,3],
[7,7,4,7,7,4,0,7],
[7,7,4,7,6,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,6,6,8,5,8],
[2,0,2,2,8,4,2,2],
[4,8,0,7,10,8,4,8],
[4,8,3,0,8,8,5,8],
[4,2,0,2,0,2,2,2],
[2,6,2,2,8,0,2,6],
[5,8,6,5,8,8,0,8],
[2,8,2,2,8,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,3,4,4,7,1],
[7,0,4,7,8,3,8,2],
[6,6,0,3,5,3,6,1],
[7,3,7,0,4,4,5,3],
[6,2,5,6,0,5,5,2],
[6,7,7,6,5,0,5,7],
[3,2,4,5,5,5,0,2],
[9,8,9,7,8,3,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,3,4,3,4,6],
[7,0,7,3,2,1,2,4],
[3,3,0,1,1,0,2,6],
[7,7,9,0,3,4,3,7],
[6,8,9,7,0,5,6,8],
[7,9,10,6,5,0,7,7],
[6,8,8,7,4,3,0,7],
[4,6,4,3,2,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,5,3,2,2,4],
[7,0,3,6,3,6,3,5],
[7,7,0,7,7,6,3,6],
[5,4,3,0,3,4,0,5],
[7,7,3,7,0,7,4,5],
[8,4,4,6,3,0,5,6],
[8,7,7,10,6,5,0,7],
[6,5,4,5,5,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,5,5,4,7,8],
[3,0,4,6,4,4,4,4],
[5,6,0,5,5,5,4,4],
[5,4,5,0,3,3,3,4],
[5,6,5,7,0,5,4,5],
[6,6,5,7,5,0,4,6],
[3,6,6,7,6,6,0,8],
[2,6,6,6,5,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,8,4,4,5,5],
[6,0,5,6,7,6,6,5],
[6,5,0,9,8,5,7,4],
[2,4,1,0,5,4,5,3],
[6,3,2,5,0,3,6,1],
[6,4,5,6,7,0,7,6],
[5,4,3,5,4,3,0,2],
[5,5,6,7,9,4,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,5,3,3,5],
[6,0,3,4,5,5,4,6],
[6,7,0,6,4,5,3,6],
[6,6,4,0,6,6,5,7],
[5,5,6,4,0,5,3,6],
[7,5,5,4,5,0,3,6],
[7,6,7,5,7,7,0,8],
[5,4,4,3,4,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,4,4,4,9,9,0],
[1,0,0,0,0,0,0,0],
[6,10,0,5,5,5,5,5],
[6,10,5,0,9,9,5,5],
[6,10,5,1,0,9,5,1],
[1,10,5,1,1,0,1,1],
[1,10,5,5,5,9,0,1],
[10,10,5,5,9,9,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,10,10,5,10,5,5],
[0,0,5,0,0,0,0,0],
[0,5,0,5,0,5,5,5],
[0,10,5,0,0,5,0,5],
[5,10,10,10,0,10,5,5],
[0,10,5,5,0,0,0,5],
[5,10,5,10,5,10,0,10],
[5,10,5,5,5,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,3,2,5,5,3],
[3,0,4,3,3,5,3,3],
[5,6,0,4,2,7,3,4],
[7,7,6,0,5,7,4,3],
[8,7,8,5,0,8,8,7],
[5,5,3,3,2,0,2,2],
[5,7,7,6,2,8,0,4],
[7,7,6,7,3,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,1,9,5,6,6,6],
[9,0,5,9,9,9,9,5],
[9,5,0,9,10,10,10,10],
[1,1,1,0,1,6,1,1],
[5,1,0,9,0,6,5,6],
[4,1,0,4,4,0,4,1],
[4,1,0,9,5,6,0,1],
[4,5,0,9,4,9,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,7,4,6,7,7],
[4,0,8,5,6,7,7,4],
[3,2,0,4,4,2,6,4],
[3,5,6,0,2,5,5,2],
[6,4,6,8,0,4,5,4],
[4,3,8,5,6,0,7,6],
[3,3,4,5,5,3,0,3],
[3,6,6,8,6,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,9,6,8,5,7],
[4,0,3,3,2,5,1,5],
[2,7,0,9,6,6,5,4],
[1,7,1,0,4,5,3,3],
[4,8,4,6,0,7,5,6],
[2,5,4,5,3,0,2,3],
[5,9,5,7,5,8,0,7],
[3,5,6,7,4,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,2,3,2,9,4],
[5,0,5,3,3,4,9,3],
[6,5,0,6,4,5,7,4],
[8,7,4,0,3,5,9,4],
[7,7,6,7,0,6,7,5],
[8,6,5,5,4,0,9,4],
[1,1,3,1,3,1,0,1],
[6,7,6,6,5,6,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,8,4,4,8,7],
[2,0,6,9,5,6,4,2],
[5,4,0,3,5,4,7,3],
[2,1,7,0,3,4,4,2],
[6,5,5,7,0,4,4,4],
[6,4,6,6,6,0,4,6],
[2,6,3,6,6,6,0,5],
[3,8,7,8,6,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,6,7,6,8,6],
[7,0,3,6,7,7,10,6],
[7,7,0,4,10,7,7,3],
[4,4,6,0,7,4,7,3],
[3,3,0,3,0,7,3,3],
[4,3,3,6,3,0,4,4],
[2,0,3,3,7,6,0,6],
[4,4,7,7,7,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,4,2,2,4],
[5,0,6,7,4,6,4,7],
[6,4,0,2,4,3,0,2],
[5,3,8,0,6,3,5,4],
[6,6,6,4,0,3,3,4],
[8,4,7,7,7,0,5,4],
[8,6,10,5,7,5,0,7],
[6,3,8,6,6,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,3,7,3,7,7],
[6,0,7,3,7,3,3,7],
[3,3,0,3,3,6,3,3],
[7,7,7,0,4,7,4,4],
[3,3,7,6,0,6,3,10],
[7,7,4,3,4,0,4,4],
[3,7,7,6,7,6,0,7],
[3,3,7,6,0,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,5,4,6,4,6],
[5,0,2,0,6,6,1,7],
[7,8,0,5,6,8,4,10],
[5,10,5,0,8,10,8,7],
[6,4,4,2,0,6,3,5],
[4,4,2,0,4,0,0,6],
[6,9,6,2,7,10,0,7],
[4,3,0,3,5,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,6,6,6,4,7],
[6,0,6,5,3,5,6,4],
[6,4,0,4,4,4,5,3],
[4,5,6,0,2,5,4,3],
[4,7,6,8,0,4,5,5],
[4,5,6,5,6,0,4,6],
[6,4,5,6,5,6,0,5],
[3,6,7,7,5,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,10,5,5,5,5,10],
[0,0,5,0,0,0,0,5],
[0,5,0,5,0,0,0,0],
[5,10,5,0,5,5,5,5],
[5,10,10,5,0,0,5,10],
[5,10,10,5,10,0,5,10],
[5,10,10,5,5,5,0,10],
[0,5,10,5,0,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,4,5,4,3,6],
[5,0,8,7,4,6,5,8],
[5,2,0,2,4,4,2,4],
[6,3,8,0,4,5,4,6],
[5,6,6,6,0,6,5,6],
[6,4,6,5,4,0,4,7],
[7,5,8,6,5,6,0,7],
[4,2,6,4,4,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,1,4,6,4],
[5,0,4,6,2,4,1,3],
[6,6,0,8,7,7,5,4],
[5,4,2,0,0,2,4,3],
[9,8,3,10,0,7,7,5],
[6,6,3,8,3,0,3,4],
[4,9,5,6,3,7,0,8],
[6,7,6,7,5,6,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,4,8,3,6,5],
[6,0,2,4,6,4,2,4],
[4,8,0,3,6,3,5,3],
[6,6,7,0,8,6,7,4],
[2,4,4,2,0,0,2,2],
[7,6,7,4,10,0,7,5],
[4,8,5,3,8,3,0,3],
[5,6,7,6,8,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,4,2,4,2,4],
[7,0,7,6,4,7,3,7],
[4,3,0,2,3,4,2,2],
[6,4,8,0,6,4,4,4],
[8,6,7,4,0,6,4,4],
[6,3,6,6,4,0,5,5],
[8,7,8,6,6,5,0,6],
[6,3,8,6,6,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,4,5,5,4,6],
[4,0,7,5,7,3,6,4],
[2,3,0,2,5,3,3,4],
[6,5,8,0,8,4,4,5],
[5,3,5,2,0,5,4,4],
[5,7,7,6,5,0,5,3],
[6,4,7,6,6,5,0,4],
[4,6,6,5,6,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,0,5,5],
[5,0,5,5,5,0,0,0],
[5,5,0,5,5,5,5,5],
[5,5,5,0,5,5,5,5],
[5,5,5,5,0,0,0,0],
[10,10,5,5,10,0,10,10],
[5,10,5,5,10,0,0,5],
[5,10,5,5,10,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,2,2,2,2],
[4,0,2,2,2,2,2,2],
[4,8,0,6,2,6,6,2],
[4,8,4,0,6,6,6,6],
[8,8,8,4,0,4,8,0],
[8,8,4,4,6,0,8,0],
[8,8,4,4,2,2,0,2],
[8,8,8,4,10,10,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,8,5,6,3,7,9],
[7,0,7,5,4,4,7,10],
[2,3,0,2,2,3,6,9],
[5,5,8,0,4,6,7,8],
[4,6,8,6,0,6,7,9],
[7,6,7,4,4,0,6,9],
[3,3,4,3,3,4,0,6],
[1,0,1,2,1,1,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,6,7,5,2,7],
[5,0,8,6,10,8,2,3],
[2,2,0,0,9,2,2,2],
[4,4,10,0,10,4,5,3],
[3,0,1,0,0,2,2,0],
[5,2,8,6,8,0,4,4],
[8,8,8,5,8,6,0,5],
[3,7,8,7,10,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,9,9,8,6,7],
[6,0,6,6,8,4,7,7],
[4,4,0,9,7,4,4,8],
[1,4,1,0,3,4,1,4],
[1,2,3,7,0,4,4,5],
[2,6,6,6,6,0,6,6],
[4,3,6,9,6,4,0,7],
[3,3,2,6,5,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,5,5,4,3,1],
[7,0,6,3,8,6,8,3],
[4,4,0,7,4,3,7,5],
[5,7,3,0,5,5,7,5],
[5,2,6,5,0,4,6,1],
[6,4,7,5,6,0,5,3],
[7,2,3,3,4,5,0,5],
[9,7,5,5,9,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,6,2,6,6,6],
[4,0,6,6,4,6,7,2],
[2,4,0,4,4,5,6,1],
[4,4,6,0,3,4,6,4],
[8,6,6,7,0,5,6,6],
[4,4,5,6,5,0,6,4],
[4,3,4,4,4,4,0,3],
[4,8,9,6,4,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,5,4,4,6,7],
[4,0,1,3,1,7,4,7],
[6,9,0,3,3,6,5,9],
[5,7,7,0,7,7,9,7],
[6,9,7,3,0,7,7,8],
[6,3,4,3,3,0,4,4],
[4,6,5,1,3,6,0,4],
[3,3,1,3,2,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,6,4,4,2,4],
[4,0,2,3,1,1,2,3],
[5,8,0,3,2,2,5,6],
[4,7,7,0,3,2,5,7],
[6,9,8,7,0,6,5,6],
[6,9,8,8,4,0,6,7],
[8,8,5,5,5,4,0,7],
[6,7,4,3,4,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,3,1,4,4,3],
[6,0,4,5,5,4,5,5],
[4,6,0,5,4,7,4,4],
[7,5,5,0,4,5,4,6],
[9,5,6,6,0,7,6,4],
[6,6,3,5,3,0,5,5],
[6,5,6,6,4,5,0,6],
[7,5,6,4,6,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,7,2,4,4,3],
[5,0,3,6,3,5,2,3],
[7,7,0,7,3,6,4,3],
[3,4,3,0,2,2,2,3],
[8,7,7,8,0,5,3,4],
[6,5,4,8,5,0,4,5],
[6,8,6,8,7,6,0,3],
[7,7,7,7,6,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,6,5,4,6,7],
[6,0,4,7,7,3,6,6],
[4,6,0,7,4,5,5,7],
[4,3,3,0,5,3,3,7],
[5,3,6,5,0,4,6,6],
[6,7,5,7,6,0,8,7],
[4,4,5,7,4,2,0,5],
[3,4,3,3,4,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,9,6,4,4,7,6],
[1,0,4,5,3,1,5,2],
[1,6,0,5,1,1,6,2],
[4,5,5,0,4,5,4,2],
[6,7,9,6,0,5,7,6],
[6,9,9,5,5,0,8,6],
[3,5,4,6,3,2,0,4],
[4,8,8,8,4,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,4,5,4,5,5],
[6,0,6,6,7,5,7,7],
[3,4,0,4,5,1,6,3],
[6,4,6,0,6,4,7,4],
[5,3,5,4,0,5,5,5],
[6,5,9,6,5,0,7,5],
[5,3,4,3,5,3,0,3],
[5,3,7,6,5,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,3,6,4,5,4],
[4,0,6,2,5,6,5,5],
[4,4,0,5,6,3,5,1],
[7,8,5,0,6,6,6,5],
[4,5,4,4,0,4,6,1],
[6,4,7,4,6,0,5,4],
[5,5,5,4,4,5,0,3],
[6,5,9,5,9,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,5,4,6,3,2],
[6,0,4,6,6,6,3,4],
[5,6,0,5,5,6,2,5],
[5,4,5,0,3,5,4,3],
[6,4,5,7,0,6,4,3],
[4,4,4,5,4,0,3,4],
[7,7,8,6,6,7,0,5],
[8,6,5,7,7,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,5,5,6,5,7],
[3,0,5,6,5,4,4,3],
[4,5,0,6,7,6,5,4],
[5,4,4,0,4,6,3,5],
[5,5,3,6,0,7,3,5],
[4,6,4,4,3,0,4,5],
[5,6,5,7,7,6,0,6],
[3,7,6,5,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,4,7,4,5],
[6,0,5,5,6,6,6,5],
[6,5,0,3,6,7,7,5],
[6,5,7,0,6,6,7,6],
[6,4,4,4,0,5,5,5],
[3,4,3,4,5,0,3,5],
[6,4,3,3,5,7,0,4],
[5,5,5,4,5,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,10,3,3,7,6,7],
[3,0,6,3,5,7,4,9],
[0,4,0,0,0,4,0,6],
[7,7,10,0,6,4,10,9],
[7,5,10,4,0,5,4,10],
[3,3,6,6,5,0,6,6],
[4,6,10,0,6,4,0,6],
[3,1,4,1,0,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,2,1,5,6,5,6],
[8,0,3,9,6,9,8,6],
[8,7,0,8,5,8,9,6],
[9,1,2,0,5,9,5,5],
[5,4,5,5,0,6,6,4],
[4,1,2,1,4,0,5,5],
[5,2,1,5,4,5,0,5],
[4,4,4,5,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,6,6,5,1,4],
[7,0,3,5,7,7,5,6],
[6,7,0,6,6,8,7,4],
[4,5,4,0,4,7,5,4],
[4,3,4,6,0,5,4,1],
[5,3,2,3,5,0,2,4],
[9,5,3,5,6,8,0,7],
[6,4,6,6,9,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,6,3,10,5,5],
[3,0,1,5,1,9,3,4],
[6,9,0,5,6,9,5,6],
[4,5,5,0,5,8,5,5],
[7,9,4,5,0,9,4,5],
[0,1,1,2,1,0,2,2],
[5,7,5,5,6,8,0,5],
[5,6,4,5,5,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,9,7,9,4,4,2],
[6,0,6,4,6,5,7,4],
[1,4,0,3,3,3,2,1],
[3,6,7,0,5,6,5,4],
[1,4,7,5,0,4,3,3],
[6,5,7,4,6,0,2,3],
[6,3,8,5,7,8,0,5],
[8,6,9,6,7,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,4,1,2,2,1],
[10,0,5,8,7,6,8,6],
[10,5,0,8,5,6,9,8],
[6,2,2,0,3,4,4,3],
[9,3,5,7,0,5,8,4],
[8,4,4,6,5,0,5,5],
[8,2,1,6,2,5,0,3],
[9,4,2,7,6,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,6,9,2,7,5,4],
[8,0,4,9,0,7,7,4],
[4,6,0,6,6,10,6,8],
[1,1,4,0,1,5,3,5],
[8,10,4,9,0,10,7,5],
[3,3,0,5,0,0,3,4],
[5,3,4,7,3,7,0,5],
[6,6,2,5,5,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,3,3,5,4,4],
[5,0,6,5,5,7,3,2],
[6,4,0,5,7,8,5,5],
[7,5,5,0,4,6,7,6],
[7,5,3,6,0,5,4,3],
[5,3,2,4,5,0,6,5],
[6,7,5,3,6,4,0,7],
[6,8,5,4,7,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,3,7,6,5,3],
[3,0,4,4,6,5,5,4],
[4,6,0,4,5,5,6,4],
[7,6,6,0,7,8,8,5],
[3,4,5,3,0,6,4,3],
[4,5,5,2,4,0,5,4],
[5,5,4,2,6,5,0,3],
[7,6,6,5,7,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,4,4,8,6,6],
[4,0,8,5,5,8,6,5],
[4,2,0,1,4,5,2,2],
[6,5,9,0,8,8,4,4],
[6,5,6,2,0,5,4,6],
[2,2,5,2,5,0,2,2],
[4,4,8,6,6,8,0,6],
[4,5,8,6,4,8,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,3,2,5,2,4],
[6,0,6,4,2,5,4,5],
[3,4,0,3,2,4,1,2],
[7,6,7,0,2,4,4,5],
[8,8,8,8,0,5,5,9],
[5,5,6,6,5,0,4,4],
[8,6,9,6,5,6,0,7],
[6,5,8,5,1,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,0,5,3,0,5,2],
[7,0,2,10,5,2,10,2],
[10,8,0,8,8,5,10,5],
[5,0,2,0,5,2,8,0],
[7,5,2,5,0,5,7,2],
[10,8,5,8,5,0,10,2],
[5,0,0,2,3,0,0,2],
[8,8,5,10,8,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,6,5,4,7,4],
[3,0,2,3,4,3,2,3],
[5,8,0,6,2,2,3,4],
[4,7,4,0,4,4,5,3],
[5,6,8,6,0,5,5,5],
[6,7,8,6,5,0,7,4],
[3,8,7,5,5,3,0,5],
[6,7,6,7,5,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,10,6,7,7,5],
[4,0,1,4,4,8,6,1],
[4,9,0,8,8,8,6,5],
[0,6,2,0,4,6,2,0],
[4,6,2,6,0,7,6,1],
[3,2,2,4,3,0,6,1],
[3,4,4,8,4,4,0,5],
[5,9,5,10,9,9,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,2,0,0,2,4,2],
[8,0,7,5,6,7,9,7],
[8,3,0,4,0,6,6,4],
[10,5,6,0,3,7,6,3],
[10,4,10,7,0,10,8,5],
[8,3,4,3,0,0,5,4],
[6,1,4,4,2,5,0,3],
[8,3,6,7,5,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,4,5,6,4,4],
[5,0,6,5,5,7,3,6],
[4,4,0,4,8,5,3,6],
[6,5,6,0,5,6,5,6],
[5,5,2,5,0,6,3,4],
[4,3,5,4,4,0,3,4],
[6,7,7,5,7,7,0,6],
[6,4,4,4,6,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,3,3,4,4,6],
[3,0,4,3,4,4,5,5],
[7,6,0,5,5,5,5,6],
[7,7,5,0,6,5,5,5],
[7,6,5,4,0,6,7,7],
[6,6,5,5,4,0,5,6],
[6,5,5,5,3,5,0,5],
[4,5,4,5,3,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,5,7,4,2,3],
[7,0,6,6,8,6,6,5],
[5,4,0,5,8,4,2,4],
[5,4,5,0,7,3,3,4],
[3,2,2,3,0,2,2,4],
[6,4,6,7,8,0,2,6],
[8,4,8,7,8,8,0,8],
[7,5,6,6,6,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,5,6,5,0,8],
[5,0,6,5,6,5,5,10],
[7,4,0,5,8,9,4,8],
[5,5,5,0,5,5,5,8],
[4,4,2,5,0,6,0,8],
[5,5,1,5,4,0,1,8],
[10,5,6,5,10,9,0,8],
[2,0,2,2,2,2,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,2,4,5,2,4],
[7,0,6,3,5,5,4,5],
[4,4,0,2,4,2,4,4],
[8,7,8,0,7,7,8,3],
[6,5,6,3,0,5,4,3],
[5,5,8,3,5,0,6,5],
[8,6,6,2,6,4,0,4],
[6,5,6,7,7,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,8,6,4,6,3],
[8,0,5,8,8,6,6,7],
[5,5,0,5,6,2,5,4],
[2,2,5,0,4,4,1,3],
[4,2,4,6,0,2,4,0],
[6,4,8,6,8,0,7,8],
[4,4,5,9,6,3,0,5],
[7,3,6,7,10,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,6,7,5,6,8],
[3,0,4,7,2,3,3,4],
[2,6,0,5,5,5,1,2],
[4,3,5,0,3,5,4,3],
[3,8,5,7,0,7,4,3],
[5,7,5,5,3,0,2,5],
[4,7,9,6,6,8,0,6],
[2,6,8,7,7,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,0,10,5,0,5],
[5,0,5,5,5,10,5,10],
[5,5,0,0,5,5,0,5],
[10,5,10,0,10,10,10,10],
[0,5,5,0,0,5,0,5],
[5,0,5,0,5,0,5,10],
[10,5,10,0,10,5,0,10],
[5,0,5,0,5,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,10,6,3,3,6,6],
[4,0,7,3,7,7,0,3],
[0,3,0,3,3,0,3,3],
[4,7,7,0,7,7,0,7],
[7,3,7,3,0,7,3,6],
[7,3,10,3,3,0,3,3],
[4,10,7,10,7,7,0,10],
[4,7,7,3,4,7,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,3,6,8,7,3],
[5,0,4,4,7,6,8,6],
[5,6,0,4,8,8,8,6],
[7,6,6,0,5,6,7,5],
[4,3,2,5,0,6,3,5],
[2,4,2,4,4,0,3,2],
[3,2,2,3,7,7,0,4],
[7,4,4,5,5,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,3,3,3,4,5],
[6,0,7,5,4,4,5,7],
[5,3,0,2,4,3,5,1],
[7,5,8,0,6,5,7,3],
[7,6,6,4,0,6,7,4],
[7,6,7,5,4,0,3,7],
[6,5,5,3,3,7,0,4],
[5,3,9,7,6,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,1,4,3,2,5],
[7,0,8,5,8,4,5,8],
[7,2,0,0,4,2,4,2],
[9,5,10,0,6,3,6,7],
[6,2,6,4,0,4,3,4],
[7,6,8,7,6,0,4,6],
[8,5,6,4,7,6,0,5],
[5,2,8,3,6,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,6,6,6,7,7],
[4,0,7,6,6,5,7,9],
[5,3,0,5,5,6,8,9],
[4,4,5,0,4,5,5,6],
[4,4,5,6,0,5,5,5],
[4,5,4,5,5,0,8,5],
[3,3,2,5,5,2,0,6],
[3,1,1,4,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,7,7,6,4,8],
[7,0,6,5,9,10,6,8],
[6,4,0,6,7,6,7,8],
[3,5,4,0,7,7,4,4],
[3,1,3,3,0,6,3,5],
[4,0,4,3,4,0,2,4],
[6,4,3,6,7,8,0,5],
[2,2,2,6,5,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,9,9,4,6,5],
[3,0,3,6,8,3,3,6],
[3,7,0,8,6,5,6,6],
[1,4,2,0,3,4,2,2],
[1,2,4,7,0,2,4,3],
[6,7,5,6,8,0,5,5],
[4,7,4,8,6,5,0,6],
[5,4,4,8,7,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,4,6,7,9,8],
[3,0,8,2,5,6,8,7],
[3,2,0,4,5,2,5,5],
[6,8,6,0,5,6,8,7],
[4,5,5,5,0,4,4,7],
[3,4,8,4,6,0,6,6],
[1,2,5,2,6,4,0,4],
[2,3,5,3,3,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,3,6,3,3,6],
[5,0,5,4,7,2,5,5],
[7,5,0,6,6,5,5,5],
[7,6,4,0,6,4,4,5],
[4,3,4,4,0,1,4,6],
[7,8,5,6,9,0,7,7],
[7,5,5,6,6,3,0,7],
[4,5,5,5,4,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,3,6,7,6,5],
[4,0,4,3,1,6,5,4],
[4,6,0,4,4,6,6,5],
[7,7,6,0,5,8,4,4],
[4,9,6,5,0,7,7,6],
[3,4,4,2,3,0,6,3],
[4,5,4,6,3,4,0,2],
[5,6,5,6,4,7,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,1,5,7,1,2,2],
[9,0,8,5,8,9,8,5],
[9,2,0,5,8,5,3,4],
[5,5,5,0,4,5,4,2],
[3,2,2,6,0,2,2,2],
[9,1,5,5,8,0,4,5],
[8,2,7,6,8,6,0,6],
[8,5,6,8,8,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,5,4,7,8,6],
[6,0,4,6,3,5,6,6],
[6,6,0,7,8,5,8,8],
[5,4,3,0,5,4,7,6],
[6,7,2,5,0,4,7,9],
[3,5,5,6,6,0,5,7],
[2,4,2,3,3,5,0,7],
[4,4,2,4,1,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,6,6,7,4,6],
[3,0,4,6,4,4,5,2],
[3,6,0,5,5,5,4,4],
[4,4,5,0,6,4,5,3],
[4,6,5,4,0,5,3,3],
[3,6,5,6,5,0,3,3],
[6,5,6,5,7,7,0,4],
[4,8,6,7,7,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,6,7,7,4,6],
[6,0,5,7,10,7,7,7],
[7,5,0,7,9,8,7,7],
[4,3,3,0,4,6,3,4],
[3,0,1,6,0,5,3,2],
[3,3,2,4,5,0,5,2],
[6,3,3,7,7,5,0,6],
[4,3,3,6,8,8,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,2,3,3,5,5],
[8,0,6,10,4,3,8,5],
[7,4,0,6,5,2,9,5],
[8,0,4,0,4,3,3,3],
[7,6,5,6,0,5,6,7],
[7,7,8,7,5,0,7,5],
[5,2,1,7,4,3,0,5],
[5,5,5,7,3,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,8,6,7,6,3],
[0,0,3,1,4,1,6,1],
[5,7,0,5,8,7,4,7],
[2,9,5,0,6,7,5,3],
[4,6,2,4,0,5,5,5],
[3,9,3,3,5,0,6,2],
[4,4,6,5,5,4,0,4],
[7,9,3,7,5,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,2,2,5,4,7,3],
[4,0,2,3,3,3,6,1],
[8,8,0,6,5,5,8,6],
[8,7,4,0,5,4,9,5],
[5,7,5,5,0,2,6,4],
[6,7,5,6,8,0,7,5],
[3,4,2,1,4,3,0,1],
[7,9,4,5,6,5,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,9,5,10,6,10,7],
[0,0,3,2,1,1,1,3],
[1,7,0,1,2,2,7,2],
[5,8,9,0,6,6,9,6],
[0,9,8,4,0,3,7,3],
[4,9,8,4,7,0,9,4],
[0,9,3,1,3,1,0,3],
[3,7,8,4,7,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,7,6,5,3,5],
[4,0,3,3,6,4,5,4],
[3,7,0,8,6,3,4,5],
[3,7,2,0,7,2,4,3],
[4,4,4,3,0,4,4,4],
[5,6,7,8,6,0,3,6],
[7,5,6,6,6,7,0,6],
[5,6,5,7,6,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,3,3,4,5,4],
[8,0,3,7,6,5,3,4],
[7,7,0,4,8,6,7,5],
[7,3,6,0,6,4,5,4],
[7,4,2,4,0,4,5,1],
[6,5,4,6,6,0,5,2],
[5,7,3,5,5,5,0,3],
[6,6,5,6,9,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,2,3,3,5,5],
[5,0,3,1,3,7,6,6],
[5,7,0,5,5,7,4,4],
[8,9,5,0,7,7,6,5],
[7,7,5,3,0,9,3,5],
[7,3,3,3,1,0,3,3],
[5,4,6,4,7,7,0,6],
[5,4,6,5,5,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,5,7,5,8,6],
[3,0,4,5,5,2,4,5],
[4,6,0,6,5,4,4,6],
[5,5,4,0,6,3,7,4],
[3,5,5,4,0,3,4,5],
[5,8,6,7,7,0,7,5],
[2,6,6,3,6,3,0,2],
[4,5,4,6,5,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,4,6,4,5,4],
[3,0,5,4,4,5,6,5],
[5,5,0,5,4,4,5,4],
[6,6,5,0,7,7,8,6],
[4,6,6,3,0,4,4,4],
[6,5,6,3,6,0,6,5],
[5,4,5,2,6,4,0,5],
[6,5,6,4,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,6,4,4,6,2],
[7,0,6,9,7,6,6,4],
[4,4,0,4,3,3,5,3],
[4,1,6,0,3,3,5,1],
[6,3,7,7,0,3,4,2],
[6,4,7,7,7,0,5,6],
[4,4,5,5,6,5,0,3],
[8,6,7,9,8,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,8,5,10,5,10,5],
[0,0,8,5,8,3,10,3],
[2,2,0,5,2,5,2,5],
[5,5,5,0,5,5,7,5],
[0,2,8,5,0,5,5,5],
[5,7,5,5,5,0,7,5],
[0,0,8,3,5,3,0,3],
[5,7,5,5,5,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,5,6,6,5],
[6,0,1,2,7,5,7,5],
[6,9,0,5,9,6,9,8],
[6,8,5,0,8,5,6,6],
[5,3,1,2,0,3,4,4],
[4,5,4,5,7,0,5,3],
[4,3,1,4,6,5,0,4],
[5,5,2,4,6,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,4,3,2,4,4],
[5,0,3,5,3,3,2,4],
[6,7,0,4,6,5,3,5],
[6,5,6,0,3,3,2,3],
[7,7,4,7,0,5,5,6],
[8,7,5,7,5,0,5,8],
[6,8,7,8,5,5,0,5],
[6,6,5,7,4,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,6,6,4,8,6],
[5,0,4,5,4,3,6,7],
[3,6,0,7,5,4,7,7],
[4,5,3,0,4,4,8,6],
[4,6,5,6,0,5,9,6],
[6,7,6,6,5,0,8,6],
[2,4,3,2,1,2,0,6],
[4,3,3,4,4,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,5,6,5,4,6],
[4,0,3,7,6,4,4,6],
[6,7,0,8,6,6,6,5],
[5,3,2,0,6,4,3,4],
[4,4,4,4,0,5,1,5],
[5,6,4,6,5,0,6,6],
[6,6,4,7,9,4,0,6],
[4,4,5,6,5,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,10,2,6,8,5],
[7,0,7,7,7,5,7,7],
[6,3,0,8,6,6,6,6],
[0,3,2,0,2,3,3,3],
[8,3,4,8,0,8,8,5],
[4,5,4,7,2,0,5,5],
[2,3,4,7,2,5,0,3],
[5,3,4,7,5,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,6,3,5,3,2],
[6,0,4,6,2,3,2,6],
[5,6,0,5,3,4,2,2],
[4,4,5,0,4,4,1,2],
[7,8,7,6,0,7,4,5],
[5,7,6,6,3,0,6,5],
[7,8,8,9,6,4,0,5],
[8,4,8,8,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,7,5,8,3,4],
[2,0,7,6,3,7,3,3],
[3,3,0,5,4,4,3,3],
[3,4,5,0,4,4,2,3],
[5,7,6,6,0,7,6,7],
[2,3,6,6,3,0,3,3],
[7,7,7,8,4,7,0,7],
[6,7,7,7,3,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,5,8,8,7,6],
[3,0,5,6,3,3,5,5],
[2,5,0,4,7,4,5,4],
[5,4,6,0,6,6,4,7],
[2,7,3,4,0,3,5,5],
[2,7,6,4,7,0,7,7],
[3,5,5,6,5,3,0,5],
[4,5,6,3,5,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,5,4,6,5,5],
[6,0,7,5,4,4,5,5],
[6,3,0,5,3,4,4,6],
[5,5,5,0,0,2,6,3],
[6,6,7,10,0,4,7,6],
[4,6,6,8,6,0,7,8],
[5,5,6,4,3,3,0,5],
[5,5,4,7,4,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,1,4,1,2,0,0],
[6,0,2,4,6,6,6,6],
[9,8,0,4,10,6,6,6],
[6,6,6,0,6,3,2,3],
[9,4,0,4,0,2,0,0],
[8,4,4,7,8,0,0,0],
[10,4,4,8,10,10,0,5],
[10,4,4,7,10,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,5,9,5,8,10,9],
[1,0,1,0,3,1,4,6],
[5,9,0,6,5,5,10,10],
[1,10,4,0,6,6,10,6],
[5,7,5,4,0,3,8,7],
[2,9,5,4,7,0,7,5],
[0,6,0,0,2,3,0,5],
[1,4,0,4,3,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,6,4,5,3,5],
[7,0,8,5,5,7,3,5],
[3,2,0,5,3,3,4,1],
[4,5,5,0,6,4,3,3],
[6,5,7,4,0,7,4,3],
[5,3,7,6,3,0,4,3],
[7,7,6,7,6,6,0,4],
[5,5,9,7,7,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,5,4,3,7,7],
[3,0,2,0,0,3,0,3],
[5,8,0,3,4,3,5,5],
[5,10,7,0,5,4,5,5],
[6,10,6,5,0,5,10,7],
[7,7,7,6,5,0,7,7],
[3,10,5,5,0,3,0,4],
[3,7,5,5,3,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,4,5,6,5,6],
[4,0,4,5,6,4,5,5],
[2,6,0,3,3,3,4,5],
[6,5,7,0,4,6,5,6],
[5,4,7,6,0,7,2,5],
[4,6,7,4,3,0,3,6],
[5,5,6,5,8,7,0,7],
[4,5,5,4,5,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,7,8,5,6,4],
[5,0,5,6,6,6,7,4],
[5,5,0,5,8,4,5,6],
[3,4,5,0,8,4,6,4],
[2,4,2,2,0,2,4,2],
[5,4,6,6,8,0,6,4],
[4,3,5,4,6,4,0,3],
[6,6,4,6,8,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,8,4,9,4,0],
[6,0,9,9,5,9,9,6],
[6,1,0,8,4,9,7,0],
[2,1,2,0,6,5,3,2],
[6,5,6,4,0,9,7,4],
[1,1,1,5,1,0,1,0],
[6,1,3,7,3,9,0,0],
[10,4,10,8,6,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,5,5,5,2,5],
[10,0,10,10,10,10,5,10],
[5,0,0,3,3,3,2,3],
[5,0,7,0,10,8,2,8],
[5,0,7,0,0,3,2,3],
[5,0,7,2,7,0,2,5],
[8,5,8,8,8,8,0,8],
[5,0,7,2,7,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,7,7,5,7,6],
[4,0,8,6,8,3,8,6],
[2,2,0,3,3,0,2,2],
[3,4,7,0,4,0,4,4],
[3,2,7,6,0,2,5,2],
[5,7,10,10,8,0,8,5],
[3,2,8,6,5,2,0,4],
[4,4,8,6,8,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,5,5,6,5,3],
[5,0,8,5,5,5,5,3],
[2,2,0,3,3,2,4,3],
[5,5,7,0,5,8,5,5],
[5,5,7,5,0,7,6,3],
[4,5,8,2,3,0,5,5],
[5,5,6,5,4,5,0,5],
[7,7,7,5,7,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,7,5,7,6,4],
[3,0,1,5,1,1,1,2],
[5,9,0,6,4,5,4,6],
[3,5,4,0,5,3,6,2],
[5,9,6,5,0,5,2,4],
[3,9,5,7,5,0,4,2],
[4,9,6,4,8,6,0,4],
[6,8,4,8,6,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,4,4,4,2,2],
[7,0,9,3,7,4,8,4],
[7,1,0,2,3,3,5,2],
[6,7,8,0,5,7,5,7],
[6,3,7,5,0,5,6,2],
[6,6,7,3,5,0,6,2],
[8,2,5,5,4,4,0,5],
[8,6,8,3,8,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,6,5,8,6,6],
[7,0,7,7,5,6,8,6],
[3,3,0,6,5,5,5,5],
[4,3,4,0,2,5,5,3],
[5,5,5,8,0,5,7,5],
[2,4,5,5,5,0,5,6],
[4,2,5,5,3,5,0,5],
[4,4,5,7,5,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,3,6,5,5],
[5,0,4,5,3,5,7,4],
[6,6,0,5,5,5,6,5],
[5,5,5,0,5,4,6,7],
[7,7,5,5,0,5,7,5],
[4,5,5,6,5,0,5,6],
[5,3,4,4,3,5,0,4],
[5,6,5,3,5,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,10,5,5,5,5],
[5,0,5,5,0,10,5,5],
[5,5,0,10,5,10,5,5],
[0,5,0,0,5,5,5,0],
[5,10,5,5,0,10,10,5],
[5,0,0,5,0,0,0,0],
[5,5,5,5,0,10,0,5],
[5,5,5,10,5,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,4,6,8,7],
[5,0,7,5,6,3,9,9],
[5,3,0,3,4,2,4,4],
[5,5,7,0,2,4,9,5],
[6,4,6,8,0,3,9,6],
[4,7,8,6,7,0,7,7],
[2,1,6,1,1,3,0,4],
[3,1,6,5,4,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,8,4,3,4,3],
[7,0,2,7,1,4,3,2],
[6,8,0,6,8,8,4,8],
[2,3,4,0,2,3,6,2],
[6,9,2,8,0,5,4,4],
[7,6,2,7,5,0,3,1],
[6,7,6,4,6,7,0,6],
[7,8,2,8,6,9,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,6,5,4,4,4],
[7,0,5,6,5,1,4,5],
[5,5,0,7,5,1,5,5],
[4,4,3,0,5,4,5,5],
[5,5,5,5,0,6,2,4],
[6,9,9,6,4,0,6,4],
[6,6,5,5,8,4,0,8],
[6,5,5,5,6,6,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,3,5,6,6,6],
[6,0,6,5,8,7,7,8],
[5,4,0,4,5,3,2,6],
[7,5,6,0,6,8,7,6],
[5,2,5,4,0,6,7,7],
[4,3,7,2,4,0,8,4],
[4,3,8,3,3,2,0,4],
[4,2,4,4,3,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,1,3,4,3,6,1],
[6,0,4,6,4,6,5,4],
[9,6,0,4,4,2,8,3],
[7,4,6,0,3,4,6,5],
[6,6,6,7,0,8,6,5],
[7,4,8,6,2,0,8,7],
[4,5,2,4,4,2,0,5],
[9,6,7,5,5,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,4,3,3,6,3],
[4,0,3,5,3,2,5,4],
[7,7,0,6,6,4,6,6],
[6,5,4,0,3,2,5,4],
[7,7,4,7,0,5,5,6],
[7,8,6,8,5,0,7,6],
[4,5,4,5,5,3,0,5],
[7,6,4,6,4,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,9,5,7,5,7,7],
[2,0,5,7,6,4,6,9],
[1,5,0,2,4,5,2,7],
[5,3,8,0,8,4,3,8],
[3,4,6,2,0,5,4,6],
[5,6,5,6,5,0,3,8],
[3,4,8,7,6,7,0,9],
[3,1,3,2,4,2,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,0,5,5,5],
[5,0,5,5,5,10,10,5],
[5,5,0,10,5,10,10,10],
[5,5,0,0,5,10,10,5],
[10,5,5,5,0,5,10,5],
[5,0,0,0,5,0,5,5],
[5,0,0,0,0,5,0,0],
[5,5,0,5,5,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,0,3,3,3,3],
[7,0,4,1,6,4,0,6],
[7,6,0,4,9,7,3,3],
[10,9,6,0,9,7,3,6],
[7,4,1,1,0,4,4,4],
[7,6,3,3,6,0,6,6],
[7,10,7,7,6,4,0,10],
[7,4,7,4,6,4,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,4,4,3,9,8],
[5,0,6,1,5,7,9,7],
[5,4,0,1,4,7,7,7],
[6,9,9,0,4,6,9,8],
[6,5,6,6,0,6,8,8],
[7,3,3,4,4,0,8,8],
[1,1,3,1,2,2,0,1],
[2,3,3,2,2,2,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,7,5,8,6,9],
[3,0,5,6,4,3,5,8],
[3,5,0,4,5,4,2,4],
[3,4,6,0,5,5,2,5],
[5,6,5,5,0,7,4,6],
[2,7,6,5,3,0,6,6],
[4,5,8,8,6,4,0,4],
[1,2,6,5,4,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,4,5,5,4,6],
[4,0,5,4,4,5,3,5],
[2,5,0,3,4,2,4,5],
[6,6,7,0,5,4,5,6],
[5,6,6,5,0,6,5,6],
[5,5,8,6,4,0,5,7],
[6,7,6,5,5,5,0,6],
[4,5,5,4,4,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,6,6,5,3],
[6,0,5,4,8,7,4,5],
[6,5,0,6,9,7,5,4],
[6,6,4,0,6,6,4,4],
[4,2,1,4,0,5,3,3],
[4,3,3,4,5,0,3,3],
[5,6,5,6,7,7,0,4],
[7,5,6,6,7,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,4,6,3,9,4],
[4,0,6,3,6,5,7,5],
[5,4,0,3,4,4,5,3],
[6,7,7,0,6,4,7,6],
[4,4,6,4,0,2,6,4],
[7,5,6,6,8,0,9,4],
[1,3,5,3,4,1,0,3],
[6,5,7,4,6,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,5,7,3,4,7],
[5,0,5,4,4,5,5,4],
[8,5,0,5,7,8,2,7],
[5,6,5,0,5,5,5,10],
[3,6,3,5,0,3,3,8],
[7,5,2,5,7,0,2,7],
[6,5,8,5,7,8,0,7],
[3,6,3,0,2,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,2,4,1,4,6],
[6,0,5,2,1,4,3,3],
[7,5,0,4,4,3,5,5],
[8,8,6,0,3,8,4,4],
[6,9,6,7,0,6,5,5],
[9,6,7,2,4,0,5,5],
[6,7,5,6,5,5,0,3],
[4,7,5,6,5,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,1,4,6,3,1,1],
[8,0,8,7,9,6,5,4],
[9,2,0,4,6,5,3,2],
[6,3,6,0,9,5,4,3],
[4,1,4,1,0,5,0,1],
[7,4,5,5,5,0,2,2],
[9,5,7,6,10,8,0,9],
[9,6,8,7,9,8,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,8,5,8,3],
[5,0,7,3,3,5,5,4],
[4,3,0,6,6,3,8,5],
[4,7,4,0,8,2,6,7],
[2,7,4,2,0,4,7,4],
[5,5,7,8,6,0,10,5],
[2,5,2,4,3,0,0,4],
[7,6,5,3,6,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,5,4,8,4,5],
[6,0,7,4,7,8,6,8],
[6,3,0,3,4,6,2,4],
[5,6,7,0,6,9,5,6],
[6,3,6,4,0,6,5,8],
[2,2,4,1,4,0,3,4],
[6,4,8,5,5,7,0,7],
[5,2,6,4,2,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,6,8,7,8,7],
[4,0,6,5,5,6,3,4],
[5,4,0,4,5,5,5,5],
[4,5,6,0,7,7,6,7],
[2,5,5,3,0,4,2,3],
[3,4,5,3,6,0,4,5],
[2,7,5,4,8,6,0,4],
[3,6,5,3,7,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,8,7,5,7,5],
[4,0,6,6,5,4,6,5],
[3,4,0,5,6,4,7,4],
[2,4,5,0,7,4,4,3],
[3,5,4,3,0,4,4,2],
[5,6,6,6,6,0,5,4],
[3,4,3,6,6,5,0,4],
[5,5,6,7,8,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,6,8,6,8,8],
[2,0,6,3,5,5,6,6],
[5,4,0,5,5,5,6,7],
[4,7,5,0,5,5,8,8],
[2,5,5,5,0,3,6,8],
[4,5,5,5,7,0,6,9],
[2,4,4,2,4,4,0,7],
[2,4,3,2,2,1,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,7,6,6,4,5],
[3,0,3,6,4,3,5,3],
[5,7,0,6,8,6,7,5],
[3,4,4,0,5,3,5,3],
[4,6,2,5,0,3,4,3],
[4,7,4,7,7,0,5,6],
[6,5,3,5,6,5,0,4],
[5,7,5,7,7,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,4,4,1,2,5],
[7,0,6,7,7,3,6,5],
[5,4,0,5,4,3,4,5],
[6,3,5,0,3,1,2,3],
[6,3,6,7,0,5,6,6],
[9,7,7,9,5,0,5,5],
[8,4,6,8,4,5,0,5],
[5,5,5,7,4,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,5,6,6,7,9],
[7,0,6,5,4,5,7,7],
[6,4,0,5,4,4,7,7],
[5,5,5,0,3,3,5,6],
[4,6,6,7,0,4,6,6],
[4,5,6,7,6,0,8,6],
[3,3,3,5,4,2,0,5],
[1,3,3,4,4,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,5,3,2,3,2],
[8,0,4,9,7,5,8,8],
[6,6,0,9,7,5,7,7],
[5,1,1,0,3,1,3,3],
[7,3,3,7,0,3,6,6],
[8,5,5,9,7,0,7,4],
[7,2,3,7,4,3,0,4],
[8,2,3,7,4,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,5,6,6,5,5],
[6,0,6,5,5,5,5,3],
[3,4,0,5,6,5,3,3],
[5,5,5,0,6,6,5,5],
[4,5,4,4,0,7,4,2],
[4,5,5,4,3,0,5,2],
[5,5,7,5,6,5,0,3],
[5,7,7,5,8,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,4,4,5,5,5],
[6,0,6,5,5,7,6,5],
[7,4,0,4,3,6,4,5],
[6,5,6,0,7,7,6,6],
[6,5,7,3,0,8,7,6],
[5,3,4,3,2,0,4,4],
[5,4,6,4,3,6,0,6],
[5,5,5,4,4,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,5,0,10],
[5,0,5,5,5,10,0,10],
[5,5,0,0,0,5,5,5],
[5,5,10,0,5,10,5,10],
[5,5,10,5,0,10,5,10],
[5,0,5,0,0,0,0,5],
[10,10,5,5,5,10,0,10],
[0,0,5,0,0,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,4,7,6,6,7],
[5,0,5,5,5,4,6,7],
[7,5,0,6,6,5,6,7],
[6,5,4,0,6,8,7,7],
[3,5,4,4,0,4,5,6],
[4,6,5,2,6,0,9,7],
[4,4,4,3,5,1,0,2],
[3,3,3,3,4,3,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,6,3,6,3],
[4,0,6,4,4,4,5,5],
[4,4,0,6,3,4,3,3],
[4,6,4,0,3,4,2,5],
[4,6,7,7,0,5,5,4],
[7,6,6,6,5,0,5,7],
[4,5,7,8,5,5,0,5],
[7,5,7,5,6,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,5,3,3,4,5],
[7,0,5,6,6,6,5,5],
[6,5,0,6,3,6,8,6],
[5,4,4,0,3,4,5,3],
[7,4,7,7,0,6,5,5],
[7,4,4,6,4,0,6,5],
[6,5,2,5,5,4,0,4],
[5,5,4,7,5,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,6,6,7,4,3],
[7,0,4,6,5,6,6,4],
[6,6,0,7,5,5,5,4],
[4,4,3,0,5,3,3,2],
[4,5,5,5,0,4,3,4],
[3,4,5,7,6,0,3,3],
[6,4,5,7,7,7,0,5],
[7,6,6,8,6,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,5,4,8,4,5],
[6,0,9,4,8,9,9,8],
[6,1,0,4,2,6,5,3],
[5,6,6,0,5,6,9,6],
[6,2,8,5,0,9,8,3],
[2,1,4,4,1,0,4,2],
[6,1,5,1,2,6,0,2],
[5,2,7,4,7,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,1,1,1,1],
[4,0,6,6,2,2,2,3],
[4,4,0,2,2,1,2,2],
[4,4,8,0,5,4,5,5],
[9,8,8,5,0,1,1,2],
[9,8,9,6,9,0,1,3],
[9,8,8,5,9,9,0,8],
[9,7,8,5,8,7,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,3,8,5,5,2],
[5,0,5,3,6,5,4,4],
[7,5,0,2,9,5,5,5],
[7,7,8,0,7,5,5,6],
[2,4,1,3,0,4,5,2],
[5,5,5,5,6,0,4,5],
[5,6,5,5,5,6,0,4],
[8,6,5,4,8,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,3,8,8,4,3],
[3,0,6,3,9,6,5,3],
[3,4,0,4,7,5,4,1],
[7,7,6,0,7,8,7,5],
[2,1,3,3,0,3,2,1],
[2,4,5,2,7,0,4,1],
[6,5,6,3,8,6,0,4],
[7,7,9,5,9,9,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,7,8,8,3,5],
[5,0,8,6,7,7,7,6],
[2,2,0,5,5,6,3,4],
[3,4,5,0,3,4,3,3],
[2,3,5,7,0,3,2,3],
[2,3,4,6,7,0,3,5],
[7,3,7,7,8,7,0,5],
[5,4,6,7,7,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,7,7,8,6,6,5],
[0,0,5,5,6,6,6,2],
[3,5,0,5,6,6,6,5],
[3,5,5,0,8,6,6,0],
[2,4,4,2,0,8,5,2],
[4,4,4,4,2,0,4,4],
[4,4,4,4,5,6,0,2],
[5,8,5,10,8,6,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,1,3,4,4,2],
[8,0,5,3,5,6,6,5],
[5,5,0,3,7,3,6,7],
[9,7,7,0,5,5,6,4],
[7,5,3,5,0,5,6,5],
[6,4,7,5,5,0,3,6],
[6,4,4,4,4,7,0,4],
[8,5,3,6,5,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,7,5,4,7,6],
[5,0,8,7,6,4,4,4],
[3,2,0,3,2,2,4,2],
[3,3,7,0,5,2,4,4],
[5,4,8,5,0,4,6,4],
[6,6,8,8,6,0,8,5],
[3,6,6,6,4,2,0,2],
[4,6,8,6,6,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,4,9,4,3,4],
[6,0,7,5,8,4,5,7],
[7,3,0,4,8,6,4,4],
[6,5,6,0,8,4,7,4],
[1,2,2,2,0,2,1,4],
[6,6,4,6,8,0,4,4],
[7,5,6,3,9,6,0,4],
[6,3,6,6,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,6,5,5,7,6],
[6,0,2,6,5,2,6,3],
[8,8,0,7,9,6,8,5],
[4,4,3,0,4,3,4,4],
[5,5,1,6,0,3,4,1],
[5,8,4,7,7,0,7,5],
[3,4,2,6,6,3,0,2],
[4,7,5,6,9,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,10,10,10,10,10],
[5,0,5,10,10,5,10,10],
[5,5,0,5,5,10,5,5],
[0,0,5,0,0,5,5,5],
[0,0,5,10,0,5,10,10],
[0,5,0,5,5,0,5,5],
[0,0,5,5,0,5,0,5],
[0,0,5,5,0,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,4,5,6,7,5,8],
[2,0,4,5,6,4,5,6],
[6,6,0,5,8,5,5,6],
[5,5,5,0,7,6,3,6],
[4,4,2,3,0,4,3,6],
[3,6,5,4,6,0,4,6],
[5,5,5,7,7,6,0,7],
[2,4,4,4,4,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,0,2,4,2,2,0],
[9,0,4,2,4,2,2,2],
[10,6,0,4,7,3,6,4],
[8,8,6,0,5,3,2,6],
[6,6,3,5,0,3,2,6],
[8,8,7,7,7,0,5,6],
[8,8,4,8,8,5,0,7],
[10,8,6,4,4,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,0,4,0,0,4],
[5,0,9,4,6,5,5,4],
[6,1,0,0,2,2,0,2],
[10,6,10,0,7,6,4,6],
[6,4,8,3,0,4,4,3],
[10,5,8,4,6,0,6,4],
[10,5,10,6,6,4,0,6],
[6,6,8,4,7,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,4,1,3,4,4],
[5,0,7,5,1,5,5,4],
[8,3,0,4,1,1,4,4],
[6,5,6,0,3,3,3,6],
[9,9,9,7,0,10,7,3],
[7,5,9,7,0,0,3,3],
[6,5,6,7,3,7,0,6],
[6,6,6,4,7,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,8,8,8,4,7],
[3,0,4,6,6,3,1,7],
[5,6,0,7,8,8,6,5],
[2,4,3,0,6,4,4,3],
[2,4,2,4,0,1,2,2],
[2,7,2,6,9,0,2,7],
[6,9,4,6,8,8,0,7],
[3,3,5,7,8,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,6,5,7,6,4],
[6,0,5,8,6,8,7,5],
[8,5,0,6,7,7,7,8],
[4,2,4,0,5,5,4,7],
[5,4,3,5,0,6,6,5],
[3,2,3,5,4,0,4,4],
[4,3,3,6,4,6,0,4],
[6,5,2,3,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,9,8,6,8,4,6],
[3,0,10,6,5,8,3,5],
[1,0,0,2,1,2,0,0],
[2,4,8,0,3,4,1,2],
[4,5,9,7,0,6,5,3],
[2,2,8,6,4,0,3,2],
[6,7,10,9,5,7,0,5],
[4,5,10,8,7,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,6,9,9,10,8],
[0,0,5,1,1,4,5,0],
[5,5,0,1,4,4,9,5],
[4,9,9,0,5,9,10,4],
[1,9,6,5,0,5,5,5],
[1,6,6,1,5,0,6,5],
[0,5,1,0,5,4,0,4],
[2,10,5,6,5,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,8,6,7,6],
[5,0,6,4,5,4,6,8],
[4,4,0,1,4,3,4,6],
[4,6,9,0,6,8,6,6],
[2,5,6,4,0,5,4,5],
[4,6,7,2,5,0,6,7],
[3,4,6,4,6,4,0,6],
[4,2,4,4,5,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,6,5,6,5,6],
[3,0,6,6,3,6,8,3],
[2,4,0,0,4,3,4,5],
[4,4,10,0,4,6,4,5],
[5,7,6,6,0,6,5,6],
[4,4,7,4,4,0,4,5],
[5,2,6,6,5,6,0,5],
[4,7,5,5,4,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,4,4,2,5,5,7],
[2,0,2,2,1,3,6,3],
[6,8,0,7,4,6,7,6],
[6,8,3,0,5,4,7,7],
[8,9,6,5,0,5,6,8],
[5,7,4,6,5,0,7,6],
[5,4,3,3,4,3,0,4],
[3,7,4,3,2,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,3,3,2,1,5],
[4,0,5,1,4,4,2,6],
[5,5,0,1,3,3,3,6],
[7,9,9,0,6,6,5,5],
[7,6,7,4,0,4,5,5],
[8,6,7,4,6,0,3,6],
[9,8,7,5,5,7,0,6],
[5,4,4,5,5,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,8,4,7,7,6],
[2,0,2,3,1,2,6,2],
[4,8,0,5,2,8,8,5],
[2,7,5,0,5,6,6,3],
[6,9,8,5,0,8,8,7],
[3,8,2,4,2,0,7,4],
[3,4,2,4,2,3,0,2],
[4,8,5,7,3,6,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,2,5,2,5,4,7],
[3,0,1,2,2,4,2,5],
[8,9,0,5,5,7,7,7],
[5,8,5,0,3,6,6,8],
[8,8,5,7,0,9,5,7],
[5,6,3,4,1,0,3,6],
[6,8,3,4,5,7,0,7],
[3,5,3,2,3,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,7,0,2,4,1,2],
[10,0,9,6,4,6,7,8],
[3,1,0,1,1,6,3,1],
[10,4,9,0,6,8,3,4],
[8,6,9,4,0,6,7,7],
[6,4,4,2,4,0,4,2],
[9,3,7,7,3,6,0,7],
[8,2,9,6,3,8,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,5,10,10,10,10],
[0,0,1,4,10,0,5,5],
[5,9,0,9,10,9,5,9],
[5,6,1,0,10,5,5,5],
[0,0,0,0,0,0,0,5],
[0,10,1,5,10,0,6,9],
[0,5,5,5,10,4,0,9],
[0,5,1,5,5,1,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,6,8,8,9,5,6],
[1,0,3,3,2,4,2,3],
[4,7,0,7,6,8,7,4],
[2,7,3,0,4,6,2,5],
[2,8,4,6,0,6,4,5],
[1,6,2,4,4,0,3,4],
[5,8,3,8,6,7,0,4],
[4,7,6,5,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,2,2,2,0,3],
[8,0,4,2,2,2,2,8],
[6,6,0,7,7,6,5,8],
[8,8,3,0,2,8,2,10],
[8,8,3,8,0,8,5,8],
[8,8,4,2,2,0,2,8],
[10,8,5,8,5,8,0,10],
[7,2,2,0,2,2,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,1,5,1,0,4,0],
[10,0,1,5,6,6,5,5],
[9,9,0,10,10,5,4,9],
[5,5,0,0,6,5,4,0],
[9,4,0,4,0,5,4,4],
[10,4,5,5,5,0,4,4],
[6,5,6,6,6,6,0,6],
[10,5,1,10,6,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,5,5,0,3,3],
[7,0,10,2,7,4,2,6],
[7,0,0,2,5,4,0,3],
[5,8,8,0,8,5,5,6],
[5,3,5,2,0,2,2,3],
[10,6,6,5,8,0,3,6],
[7,8,10,5,8,7,0,6],
[7,4,7,4,7,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,5,7,8,6,6,3],
[1,0,2,5,8,5,6,0],
[5,8,0,8,6,9,10,6],
[3,5,2,0,5,3,5,1],
[2,2,4,5,0,4,5,1],
[4,5,1,7,6,0,4,1],
[4,4,0,5,5,6,0,0],
[7,10,4,9,9,9,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,4,3,3,6,6],
[7,0,3,3,3,4,7,5],
[6,7,0,5,4,2,6,8],
[6,7,5,0,4,2,5,8],
[7,7,6,6,0,5,8,8],
[7,6,8,8,5,0,10,8],
[4,3,4,5,2,0,0,8],
[4,5,2,2,2,2,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,6,4,6,4,5],
[4,0,2,4,2,6,3,4],
[5,8,0,6,5,6,3,6],
[4,6,4,0,3,6,1,3],
[6,8,5,7,0,9,3,6],
[4,4,4,4,1,0,2,3],
[6,7,7,9,7,8,0,5],
[5,6,4,7,4,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,7,7,3,5,4],
[3,0,3,3,5,3,4,5],
[6,7,0,8,6,6,4,8],
[3,7,2,0,3,3,6,5],
[3,5,4,7,0,5,6,7],
[7,7,4,7,5,0,5,5],
[5,6,6,4,4,5,0,4],
[6,5,2,5,3,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,5,6,7,8,4],
[5,0,9,10,3,6,4,5],
[3,1,0,5,2,2,4,1],
[5,0,5,0,2,4,4,0],
[4,7,8,8,0,8,9,8],
[3,4,8,6,2,0,8,0],
[2,6,6,6,1,2,0,1],
[6,5,9,10,2,10,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,7,5,4,3,0],
[3,0,2,5,4,2,3,2],
[5,8,0,7,5,4,4,3],
[3,5,3,0,2,2,3,2],
[5,6,5,8,0,3,5,4],
[6,8,6,8,7,0,3,5],
[7,7,6,7,5,7,0,3],
[10,8,7,8,6,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,3,3,3,3,3],
[4,0,0,4,4,0,4,4],
[7,10,0,7,7,3,7,10],
[7,6,3,0,3,3,3,6],
[7,6,3,7,0,6,10,6],
[7,10,7,7,4,0,7,7],
[7,6,3,7,0,3,0,3],
[7,6,0,4,4,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,3,4,4,4,6],
[6,0,6,5,5,10,10,6],
[6,4,0,6,8,7,4,6],
[7,5,4,0,2,7,5,5],
[6,5,2,8,0,6,6,5],
[6,0,3,3,4,0,3,6],
[6,0,6,5,4,7,0,6],
[4,4,4,5,5,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,7,6,5,5,5],
[3,0,2,4,6,2,2,3],
[6,8,0,9,8,4,5,6],
[3,6,1,0,7,5,5,3],
[4,4,2,3,0,3,2,4],
[5,8,6,5,7,0,3,6],
[5,8,5,5,8,7,0,6],
[5,7,4,7,6,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,4,3,3,5,3],
[8,0,6,4,4,5,7,5],
[7,4,0,7,6,8,6,8],
[6,6,3,0,3,5,5,8],
[7,6,4,7,0,4,6,7],
[7,5,2,5,6,0,5,8],
[5,3,4,5,4,5,0,7],
[7,5,2,2,3,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,5,3,4,4,2],
[8,0,7,6,7,5,6,5],
[5,3,0,6,2,5,4,3],
[5,4,4,0,3,3,6,4],
[7,3,8,7,0,6,5,6],
[6,5,5,7,4,0,6,5],
[6,4,6,4,5,4,0,5],
[8,5,7,6,4,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,3,5,2,4,6],
[8,0,7,7,6,6,4,7],
[6,3,0,5,7,6,4,7],
[7,3,5,0,6,5,5,5],
[5,4,3,4,0,3,3,4],
[8,4,4,5,7,0,5,6],
[6,6,6,5,7,5,0,4],
[4,3,3,5,6,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,8,8,6,6,8,6],
[6,0,5,4,10,5,5,6],
[2,5,0,8,7,7,9,7],
[2,6,2,0,7,2,6,6],
[4,0,3,3,0,1,3,1],
[4,5,3,8,9,0,9,5],
[2,5,1,4,7,1,0,6],
[4,4,3,4,9,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,3,4,5,6,4],
[7,0,4,4,5,5,6,4],
[5,6,0,4,5,7,9,5],
[7,6,6,0,5,8,8,4],
[6,5,5,5,0,5,8,5],
[5,5,3,2,5,0,7,4],
[4,4,1,2,2,3,0,3],
[6,6,5,6,5,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,5,6,6,6,6],
[2,0,2,2,2,2,2,3],
[5,8,0,4,1,5,5,5],
[5,8,6,0,5,6,4,4],
[4,8,9,5,0,6,6,6],
[4,8,5,4,4,0,4,6],
[4,8,5,6,4,6,0,6],
[4,7,5,6,4,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,8,9,6,5,7],
[3,0,3,7,7,0,7,3],
[2,7,0,9,9,6,6,9],
[2,3,1,0,9,2,0,3],
[1,3,1,1,0,0,1,3],
[4,10,4,8,10,0,8,3],
[5,3,4,10,9,2,0,5],
[3,7,1,7,7,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,7,6,7,6,5],
[2,0,1,6,3,2,3,1],
[5,9,0,8,4,7,6,6],
[3,4,2,0,4,4,5,3],
[4,7,6,6,0,6,6,4],
[3,8,3,6,4,0,5,4],
[4,7,4,5,4,5,0,3],
[5,9,4,7,6,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,5,3,4,6,7],
[6,0,4,6,3,6,5,6],
[6,6,0,6,5,7,5,6],
[5,4,4,0,5,4,5,6],
[7,7,5,5,0,4,6,5],
[6,4,3,6,6,0,5,7],
[4,5,5,5,4,5,0,5],
[3,4,4,4,5,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,4,2,3,5,3],
[6,0,6,5,5,7,3,6],
[5,4,0,3,2,3,5,4],
[6,5,7,0,5,6,5,5],
[8,5,8,5,0,6,5,6],
[7,3,7,4,4,0,2,7],
[5,7,5,5,5,8,0,6],
[7,4,6,5,4,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,4,6,2,3,3],
[4,0,6,3,5,4,4,5],
[3,4,0,3,5,4,5,5],
[6,7,7,0,7,5,6,4],
[4,5,5,3,0,3,3,3],
[8,6,6,5,7,0,4,5],
[7,6,5,4,7,6,0,4],
[7,5,5,6,7,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,7,5,5,6,5],
[4,0,7,5,7,6,4,6],
[6,3,0,6,6,7,5,5],
[3,5,4,0,4,5,6,5],
[5,3,4,6,0,8,6,5],
[5,4,3,5,2,0,3,4],
[4,6,5,4,4,7,0,4],
[5,4,5,5,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,5,1,5,3,5],
[5,0,1,5,0,4,7,5],
[7,9,0,8,5,6,9,7],
[5,5,2,0,0,2,5,5],
[9,10,5,10,0,6,9,7],
[5,6,4,8,4,0,6,3],
[7,3,1,5,1,4,0,5],
[5,5,3,5,3,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,8,2,7,4,6,5],
[7,0,7,5,5,7,7,5],
[2,3,0,0,5,4,6,5],
[8,5,10,0,9,7,6,9],
[3,5,5,1,0,4,6,0],
[6,3,6,3,6,0,6,6],
[4,3,4,4,4,4,0,4],
[5,5,5,1,10,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,3,6,8,6,8],
[5,0,6,3,4,5,5,6],
[3,4,0,4,6,8,7,7],
[7,7,6,0,4,7,6,6],
[4,6,4,6,0,6,6,6],
[2,5,2,3,4,0,4,5],
[4,5,3,4,4,6,0,4],
[2,4,3,4,4,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,6,7,8,7,4],
[5,0,9,6,5,8,6,6],
[3,1,0,6,5,8,6,4],
[4,4,4,0,6,7,4,4],
[3,5,5,4,0,7,3,5],
[2,2,2,3,3,0,3,0],
[3,4,4,6,7,7,0,3],
[6,4,6,6,5,10,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,4,5,4,7,7],
[3,0,5,3,3,4,5,4],
[6,5,0,4,5,7,5,5],
[6,7,6,0,7,4,4,8],
[5,7,5,3,0,6,2,6],
[6,6,3,6,4,0,6,7],
[3,5,5,6,8,4,0,8],
[3,6,5,2,4,3,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,3,6,7,6,5],
[4,0,6,3,8,6,6,5],
[5,4,0,5,6,7,7,4],
[7,7,5,0,8,7,7,7],
[4,2,4,2,0,3,4,3],
[3,4,3,3,7,0,5,4],
[4,4,3,3,6,5,0,5],
[5,5,6,3,7,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,5,10,5],
[5,0,5,5,5,5,5,5],
[5,5,0,5,5,5,10,5],
[5,5,5,0,5,5,5,5],
[5,5,5,5,0,0,5,5],
[5,5,5,5,10,0,10,10],
[0,5,0,5,5,0,0,5],
[5,5,5,5,5,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,8,8,8,5,5],
[2,0,5,5,8,4,3,4],
[2,5,0,5,6,2,3,2],
[2,5,5,0,6,4,3,3],
[2,2,4,4,0,4,3,3],
[2,6,8,6,6,0,4,4],
[5,7,7,7,7,6,0,5],
[5,6,8,7,7,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,8,3,5,5,5],
[2,0,5,6,3,3,5,5],
[5,5,0,5,5,5,7,5],
[2,4,5,0,5,0,4,4],
[7,7,5,5,0,2,5,4],
[5,7,5,10,8,0,10,7],
[5,5,3,6,5,0,0,5],
[5,5,5,6,6,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,5,10,6,6,6],
[3,0,4,8,8,1,9,8],
[4,6,0,5,9,6,6,6],
[5,2,5,0,9,1,9,6],
[0,2,1,1,0,2,5,2],
[4,9,4,9,8,0,9,9],
[4,1,4,1,5,1,0,2],
[4,2,4,4,8,1,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,6,4,7,6],
[4,0,8,5,7,5,7,5],
[4,2,0,4,7,3,7,5],
[4,5,6,0,7,4,7,7],
[4,3,3,3,0,4,7,5],
[6,5,7,6,6,0,7,6],
[3,3,3,3,3,3,0,4],
[4,5,5,3,5,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,9,5,9,7,7],
[5,0,10,10,5,10,10,10],
[3,0,0,5,2,5,6,6],
[1,0,5,0,1,5,6,4],
[5,5,8,9,0,8,8,6],
[1,0,5,5,2,0,8,6],
[3,0,4,4,2,2,0,0],
[3,0,4,6,4,4,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,8,2,3,7,5,3],
[10,0,8,7,3,7,10,8],
[2,2,0,2,5,2,2,0],
[8,3,8,0,3,10,10,8],
[7,7,5,7,0,7,7,5],
[3,3,8,0,3,0,5,3],
[5,0,8,0,3,5,0,5],
[7,2,10,2,5,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,4,3,1,5,4],
[5,0,4,6,5,4,7,5],
[8,6,0,9,6,5,7,4],
[6,4,1,0,3,3,4,2],
[7,5,4,7,0,5,6,5],
[9,6,5,7,5,0,8,6],
[5,3,3,6,4,2,0,4],
[6,5,6,8,5,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,9,2,5,6,5,8],
[2,0,3,2,2,4,1,3],
[1,7,0,3,4,5,2,7],
[8,8,7,0,9,4,5,9],
[5,8,6,1,0,4,4,5],
[4,6,5,6,6,0,5,7],
[5,9,8,5,6,5,0,10],
[2,7,3,1,5,3,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,6,5,7,8,7],
[5,0,5,6,4,6,8,7],
[6,5,0,7,4,5,7,8],
[4,4,3,0,3,5,6,7],
[5,6,6,7,0,6,7,8],
[3,4,5,5,4,0,5,6],
[2,2,3,4,3,5,0,7],
[3,3,2,3,2,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,10,10,10,4,2],
[2,0,7,3,5,7,4,0],
[3,3,0,3,5,3,5,3],
[0,7,7,0,7,7,2,2],
[0,5,5,3,0,7,2,0],
[0,3,7,3,3,0,4,2],
[6,6,5,8,8,6,0,5],
[8,10,7,8,10,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,10,6,9,9,3,6],
[1,0,7,3,4,4,3,6],
[0,3,0,3,6,5,3,6],
[4,7,7,0,7,5,6,6],
[1,6,4,3,0,2,4,6],
[1,6,5,5,8,0,3,6],
[7,7,7,4,6,7,0,6],
[4,4,4,4,4,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,4,5,4,4,5],
[3,0,2,3,4,1,2,3],
[5,8,0,7,7,6,5,6],
[6,7,3,0,6,5,2,5],
[5,6,3,4,0,3,2,4],
[6,9,4,5,7,0,4,5],
[6,8,5,8,8,6,0,4],
[5,7,4,5,6,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,3,4,1,4,5],
[5,0,4,2,5,4,4,5],
[6,6,0,4,6,4,6,7],
[7,8,6,0,6,5,7,8],
[6,5,4,4,0,1,5,6],
[9,6,6,5,9,0,7,8],
[6,6,4,3,5,3,0,4],
[5,5,3,2,4,2,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,8,5,4,4,6],
[5,0,8,7,7,4,3,7],
[4,2,0,6,7,4,3,6],
[2,3,4,0,4,2,2,6],
[5,3,3,6,0,3,3,6],
[6,6,6,8,7,0,5,8],
[6,7,7,8,7,5,0,7],
[4,3,4,4,4,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,4,6,5,4,8],
[6,0,6,4,5,6,5,7],
[3,4,0,6,6,3,5,6],
[6,6,4,0,6,5,8,8],
[4,5,4,4,0,5,5,7],
[5,4,7,5,5,0,8,8],
[6,5,5,2,5,2,0,8],
[2,3,4,2,3,2,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,7,5,8,7,8],
[4,0,7,7,3,5,8,6],
[3,3,0,5,2,4,6,4],
[3,3,5,0,3,4,5,6],
[5,7,8,7,0,7,6,6],
[2,5,6,6,3,0,3,4],
[3,2,4,5,4,7,0,5],
[2,4,6,4,4,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,5,5,5,5,2],
[7,0,2,2,2,5,5,2],
[5,8,0,3,5,5,8,5],
[5,8,7,0,5,10,10,5],
[5,8,5,5,0,8,8,5],
[5,5,5,0,2,0,5,5],
[5,5,2,0,2,5,0,5],
[8,8,5,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,7,7,8,8],
[5,0,7,5,8,6,8,7],
[6,3,0,5,8,5,8,6],
[5,5,5,0,9,6,6,7],
[3,2,2,1,0,5,4,3],
[3,4,5,4,5,0,6,6],
[2,2,2,4,6,4,0,4],
[2,3,4,3,7,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,6,7,5,7,4],
[6,0,5,3,6,6,7,7],
[5,5,0,3,6,5,5,6],
[4,7,7,0,5,7,5,6],
[3,4,4,5,0,6,4,5],
[5,4,5,3,4,0,4,6],
[3,3,5,5,6,6,0,5],
[6,3,4,4,5,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,6,5,3,4,6],
[6,0,5,4,6,4,4,4],
[3,5,0,7,4,4,3,6],
[4,6,3,0,5,4,3,5],
[5,4,6,5,0,4,3,6],
[7,6,6,6,6,0,3,6],
[6,6,7,7,7,7,0,5],
[4,6,4,5,4,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,4,9,7,4,4],
[8,0,7,8,8,5,5,5],
[5,3,0,6,10,6,7,6],
[6,2,4,0,6,6,1,2],
[1,2,0,4,0,4,4,4],
[3,5,4,4,6,0,5,4],
[6,5,3,9,6,5,0,3],
[6,5,4,8,6,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,9,6,6,9,6,4],
[3,0,8,5,5,7,5,5],
[1,2,0,4,3,4,4,1],
[4,5,6,0,5,7,6,5],
[4,5,7,5,0,6,7,4],
[1,3,6,3,4,0,4,3],
[4,5,6,4,3,6,0,5],
[6,5,9,5,6,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,5,5,5,9,1],
[4,0,0,0,4,4,4,4],
[5,10,0,4,5,5,9,5],
[5,10,6,0,10,10,9,5],
[5,6,5,0,0,5,9,1],
[5,6,5,0,5,0,9,5],
[1,6,1,1,1,1,0,1],
[9,6,5,5,9,5,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,4,6,7,7,5],
[3,0,3,3,5,4,6,3],
[3,7,0,3,5,7,6,5],
[6,7,7,0,3,7,4,5],
[4,5,5,7,0,8,8,6],
[3,6,3,3,2,0,6,8],
[3,4,4,6,2,4,0,3],
[5,7,5,5,4,2,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,7,3,8,8,6],
[2,0,2,3,0,4,4,3],
[5,8,0,5,3,6,5,8],
[3,7,5,0,3,6,7,4],
[7,10,7,7,0,5,7,7],
[2,6,4,4,5,0,3,5],
[2,6,5,3,3,7,0,3],
[4,7,2,6,3,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,5,3,5,9,8,5],
[9,0,4,8,10,9,8,10],
[5,6,0,5,7,9,8,10],
[7,2,5,0,5,10,10,5],
[5,0,3,5,0,9,8,3],
[1,1,1,0,1,0,6,1],
[2,2,2,0,2,4,0,2],
[5,0,0,5,7,9,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,2,3,1,3,1,4],
[7,0,7,4,4,4,4,7],
[8,3,0,4,4,4,3,8],
[7,6,6,0,5,4,4,6],
[9,6,6,5,0,3,4,7],
[7,6,6,6,7,0,5,6],
[9,6,7,6,6,5,0,9],
[6,3,2,4,3,4,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,1,3,2,4,0,2],
[10,0,3,8,3,4,6,5],
[9,7,0,9,7,9,5,7],
[7,2,1,0,2,4,5,2],
[8,7,3,8,0,4,7,2],
[6,6,1,6,6,0,6,3],
[10,4,5,5,3,4,0,5],
[8,5,3,8,8,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,6,6,3,4,5],
[5,0,6,5,6,5,4,4],
[2,4,0,2,2,3,1,1],
[4,5,8,0,6,2,0,1],
[4,4,8,4,0,3,3,4],
[7,5,7,8,7,0,7,6],
[6,6,9,10,7,3,0,8],
[5,6,9,9,6,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,7,6,4,5,6],
[5,0,3,5,6,3,3,6],
[6,7,0,6,6,4,5,7],
[3,5,4,0,4,5,4,6],
[4,4,4,6,0,2,5,6],
[6,7,6,5,8,0,7,8],
[5,7,5,6,5,3,0,7],
[4,4,3,4,4,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,7,10,9,9,7],
[5,0,2,3,5,5,7,3],
[5,8,0,10,10,10,8,10],
[3,7,0,0,6,2,4,7],
[0,5,0,4,0,6,2,4],
[1,5,0,8,4,0,6,5],
[1,3,2,6,8,4,0,5],
[3,7,0,3,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,7,6,7,5,7],
[3,0,5,5,4,5,3,6],
[5,5,0,9,7,7,6,9],
[3,5,1,0,6,2,3,7],
[4,6,3,4,0,3,1,8],
[3,5,3,8,7,0,4,8],
[5,7,4,7,9,6,0,9],
[3,4,1,3,2,2,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,4,5,10,9,9,5],
[10,0,5,5,10,10,10,6],
[6,5,0,5,6,10,6,6],
[5,5,5,0,6,9,5,5],
[0,0,4,4,0,4,8,4],
[1,0,0,1,6,0,4,4],
[1,0,4,5,2,6,0,6],
[5,4,4,5,6,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,5,0,5,5,5],
[10,0,5,5,5,5,5,5],
[10,5,0,5,5,10,10,10],
[5,5,5,0,5,5,5,5],
[10,5,5,5,0,10,10,10],
[5,5,0,5,0,0,5,5],
[5,5,0,5,0,5,0,5],
[5,5,0,5,0,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,6,6,4,7,6],
[6,0,4,5,7,6,5,7],
[5,6,0,5,6,4,4,5],
[4,5,5,0,6,6,7,4],
[4,3,4,4,0,2,5,5],
[6,4,6,4,8,0,6,4],
[3,5,6,3,5,4,0,3],
[4,3,5,6,5,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,7,6,7,6,2],
[4,0,10,10,9,10,9,5],
[3,0,0,4,3,4,4,4],
[3,0,6,0,0,6,3,4],
[4,1,7,10,0,10,5,5],
[3,0,6,4,0,0,3,5],
[4,1,6,7,5,7,0,2],
[8,5,6,6,5,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,0,6,6,8,4],
[6,0,4,2,6,8,8,4],
[8,6,0,6,6,4,8,8],
[10,8,4,0,8,8,10,10],
[4,4,4,2,0,6,4,4],
[4,2,6,2,4,0,6,4],
[2,2,2,0,6,4,0,4],
[6,6,2,0,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,8,7,8,8,6],
[5,0,5,6,6,5,5,6],
[5,5,0,6,4,5,3,6],
[2,4,4,0,4,4,3,5],
[3,4,6,6,0,5,4,2],
[2,5,5,6,5,0,4,4],
[2,5,7,7,6,6,0,3],
[4,4,4,5,8,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,10,0,0,5,5],
[10,0,5,10,10,5,5,10],
[5,5,0,10,5,5,5,10],
[0,0,0,0,0,0,0,5],
[10,0,5,10,0,0,5,5],
[10,5,5,10,10,0,5,10],
[5,5,5,10,5,5,0,10],
[5,0,0,5,5,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,7,5,7,6,7],
[3,0,2,2,0,2,2,2],
[4,8,0,5,5,7,6,10],
[3,8,5,0,0,7,5,10],
[5,10,5,10,0,7,5,10],
[3,8,3,3,3,0,5,3],
[4,8,4,5,5,5,0,8],
[3,8,0,0,0,7,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,8,6,10,5,3,5],
[1,0,6,4,6,1,4,4],
[2,4,0,3,4,0,2,0],
[4,6,7,0,9,2,5,4],
[0,4,6,1,0,0,3,0],
[5,9,10,8,10,0,7,7],
[7,6,8,5,7,3,0,4],
[5,6,10,6,10,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,4,5,6,5,4],
[5,0,7,4,4,4,5,1],
[3,3,0,3,0,4,7,4],
[6,6,7,0,2,3,5,3],
[5,6,10,8,0,6,8,4],
[4,6,6,7,4,0,5,4],
[5,5,3,5,2,5,0,6],
[6,9,6,7,6,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,4,4,4,6,2],
[6,0,8,9,9,5,9,6],
[4,2,0,3,2,1,2,3],
[6,1,7,0,6,1,9,4],
[6,1,8,4,0,1,5,2],
[6,5,9,9,9,0,8,6],
[4,1,8,1,5,2,0,2],
[8,4,7,6,8,4,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,5,8,7,5,4],
[3,0,2,2,8,7,5,4],
[7,8,0,8,9,6,5,5],
[5,8,2,0,9,6,4,5],
[2,2,1,1,0,6,2,3],
[3,3,4,4,4,0,2,2],
[5,5,5,6,8,8,0,7],
[6,6,5,5,7,8,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,10,10,7,6,10,10],
[7,0,7,7,10,3,10,7],
[0,3,0,0,3,0,3,3],
[0,3,10,0,3,3,10,3],
[3,0,7,7,0,3,7,3],
[4,7,10,7,7,0,7,7],
[0,0,7,0,3,3,0,0],
[0,3,7,7,7,3,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,8,5,5,8,7],
[5,0,3,9,5,5,5,5],
[7,7,0,8,7,4,8,7],
[2,1,2,0,2,5,1,1],
[5,5,3,8,0,7,6,7],
[5,5,6,5,3,0,5,5],
[2,5,2,9,4,5,0,8],
[3,5,3,9,3,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,3,4,7,4,6],
[6,0,6,6,5,7,6,6],
[6,4,0,4,8,9,4,6],
[7,4,6,0,7,6,4,7],
[6,5,2,3,0,6,3,4],
[3,3,1,4,4,0,3,4],
[6,4,6,6,7,7,0,5],
[4,4,4,3,6,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,5,4,5,3,6,4],
[9,0,6,4,9,6,7,6],
[5,4,0,3,4,3,6,5],
[6,6,7,0,7,4,8,7],
[5,1,6,3,0,3,8,7],
[7,4,7,6,7,0,10,7],
[4,3,4,2,2,0,0,5],
[6,4,5,3,3,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,7,8,6,4,6,9],
[1,0,2,1,1,4,1,1],
[3,8,0,6,3,7,3,6],
[2,9,4,0,3,4,3,3],
[4,9,7,7,0,7,7,7],
[6,6,3,6,3,0,6,6],
[4,9,7,7,3,4,0,10],
[1,9,4,7,3,4,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,5,0,0,5,0],
[10,0,5,10,10,10,10,5],
[5,5,0,10,5,5,10,0],
[5,0,0,0,0,0,5,0],
[10,0,5,10,0,10,5,0],
[10,0,5,10,0,0,5,0],
[5,0,0,5,5,5,0,0],
[10,5,10,10,10,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,10,7,9,9,8,5],
[3,0,7,7,6,9,5,3],
[0,3,0,3,0,4,1,1],
[3,3,7,0,7,6,6,3],
[1,4,10,3,0,9,5,6],
[1,1,6,4,1,0,5,1],
[2,5,9,4,5,5,0,5],
[5,7,9,7,4,9,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,6,6,5,5,7],
[8,0,5,6,7,4,5,6],
[5,5,0,3,6,5,5,4],
[4,4,7,0,5,5,5,5],
[4,3,4,5,0,5,5,4],
[5,6,5,5,5,0,4,7],
[5,5,5,5,5,6,0,3],
[3,4,6,5,6,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,3,3,6,7,3],
[5,0,10,6,3,5,8,5],
[3,0,0,5,3,4,5,3],
[7,4,5,0,4,4,6,4],
[7,7,7,6,0,5,7,6],
[4,5,6,6,5,0,7,4],
[3,2,5,4,3,3,0,2],
[7,5,7,6,4,6,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,3,7,1,4,6],
[6,0,8,4,4,4,5,4],
[3,2,0,2,4,1,2,3],
[7,6,8,0,7,5,5,5],
[3,6,6,3,0,3,4,6],
[9,6,9,5,7,0,4,5],
[6,5,8,5,6,6,0,2],
[4,6,7,5,4,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,2,3,5,6,5],
[5,0,7,5,3,8,7,6],
[4,3,0,3,6,6,6,6],
[8,5,7,0,3,7,7,6],
[7,7,4,7,0,7,7,6],
[5,2,4,3,3,0,6,6],
[4,3,4,3,3,4,0,7],
[5,4,4,4,4,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,3,5,5,3,6],
[7,0,5,7,6,6,4,7],
[6,5,0,5,6,7,5,6],
[7,3,5,0,6,7,6,6],
[5,4,4,4,0,8,4,6],
[5,4,3,3,2,0,5,4],
[7,6,5,4,6,5,0,8],
[4,3,4,4,4,6,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,4,4,3,6,4],
[5,0,5,5,3,5,4,4],
[7,5,0,3,3,5,5,5],
[6,5,7,0,6,6,6,4],
[6,7,7,4,0,3,4,4],
[7,5,5,4,7,0,5,5],
[4,6,5,4,6,5,0,3],
[6,6,5,6,6,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,6,6,10,5,1],
[5,0,10,6,5,9,4,1],
[0,0,0,1,5,0,0,1],
[4,4,9,0,5,9,4,0],
[4,5,5,5,0,4,4,1],
[0,1,10,1,6,0,4,1],
[5,6,10,6,6,6,0,6],
[9,9,9,10,9,9,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,2,5,5,4,3],
[5,0,2,2,5,3,4,5],
[8,8,0,5,6,5,5,5],
[8,8,5,0,3,6,5,8],
[5,5,4,7,0,5,4,5],
[5,7,5,4,5,0,7,5],
[6,6,5,5,6,3,0,3],
[7,5,5,2,5,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,2,0,2,2,2],
[7,0,7,7,4,6,5,3],
[6,3,0,5,3,3,4,3],
[8,3,5,0,0,3,3,2],
[10,6,7,10,0,6,4,5],
[8,4,7,7,4,0,6,4],
[8,5,6,7,6,4,0,4],
[8,7,7,8,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,3,3,3,3,3],
[7,0,3,2,2,2,5,0],
[7,7,0,4,2,2,7,0],
[7,8,6,0,5,7,7,5],
[7,8,8,5,0,7,7,6],
[7,8,8,3,3,0,8,4],
[7,5,3,3,3,2,0,1],
[7,10,10,5,4,6,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,1,6,5,4,5],
[7,0,5,4,9,8,6,6],
[5,5,0,1,7,5,3,3],
[9,6,9,0,9,6,5,6],
[4,1,3,1,0,1,1,4],
[5,2,5,4,9,0,4,4],
[6,4,7,5,9,6,0,7],
[5,4,7,4,6,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,0,7,4,3,3,3],
[6,0,6,4,3,4,6,4],
[10,4,0,7,6,5,7,3],
[3,6,3,0,3,3,6,5],
[6,7,4,7,0,4,7,4],
[7,6,5,7,6,0,8,5],
[7,4,3,4,3,2,0,4],
[7,6,7,5,6,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,5,5,5,5,10],
[0,0,5,5,0,0,0,5],
[5,5,0,5,0,5,0,5],
[5,5,5,0,0,5,0,5],
[5,10,10,10,0,10,5,5],
[5,10,5,5,0,0,5,5],
[5,10,10,10,5,5,0,5],
[0,5,5,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,6,5,7,7,7],
[6,0,6,8,5,6,8,7],
[5,4,0,6,4,7,6,7],
[4,2,4,0,4,7,7,6],
[5,5,6,6,0,5,4,6],
[3,4,3,3,5,0,5,6],
[3,2,4,3,6,5,0,4],
[3,3,3,4,4,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,4,6,1,5,2],
[7,0,3,7,5,3,4,5],
[7,7,0,9,7,5,7,5],
[6,3,1,0,3,5,5,4],
[4,5,3,7,0,3,3,4],
[9,7,5,5,7,0,7,5],
[5,6,3,5,7,3,0,5],
[8,5,5,6,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,9,8,6,8,4,7],
[2,0,8,8,6,8,4,8],
[1,2,0,4,5,4,2,7],
[2,2,6,0,3,8,4,5],
[4,4,5,7,0,6,6,7],
[2,2,6,2,4,0,3,6],
[6,6,8,6,4,7,0,7],
[3,2,3,5,3,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,6,3,5,5,6],
[5,0,9,9,7,5,7,6],
[3,1,0,4,5,3,2,1],
[4,1,6,0,5,4,6,5],
[7,3,5,5,0,5,5,5],
[5,5,7,6,5,0,4,2],
[5,3,8,4,5,6,0,3],
[4,4,9,5,5,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,8,4,6,10,4],
[2,0,5,4,5,6,7,4],
[2,5,0,7,5,5,8,2],
[2,6,3,0,3,5,7,2],
[6,5,5,7,0,7,7,6],
[4,4,5,5,3,0,7,5],
[0,3,2,3,3,3,0,0],
[6,6,8,8,4,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,5,5,8,8,5],
[6,0,8,5,5,8,8,8],
[5,2,0,3,5,5,7,5],
[5,5,7,0,5,7,10,7],
[5,5,5,5,0,5,5,5],
[2,2,5,3,5,0,7,2],
[2,2,3,0,5,3,0,0],
[5,2,5,3,5,8,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,8,3,5,5,4],
[7,0,7,5,6,5,4,4],
[5,3,0,8,3,2,3,4],
[2,5,2,0,3,2,5,4],
[7,4,7,7,0,5,4,4],
[5,5,8,8,5,0,5,4],
[5,6,7,5,6,5,0,9],
[6,6,6,6,6,6,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,7,6,4,5],
[4,0,1,4,2,6,4,3],
[4,9,0,6,3,5,5,4],
[4,6,4,0,3,6,6,3],
[3,8,7,7,0,6,6,3],
[4,4,5,4,4,0,5,4],
[6,6,5,4,4,5,0,4],
[5,7,6,7,7,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,8,4,4,1,4],
[7,0,7,7,3,5,4,4],
[3,3,0,4,4,4,3,4],
[2,3,6,0,4,2,2,4],
[6,7,6,6,0,6,5,6],
[6,5,6,8,4,0,5,4],
[9,6,7,8,5,5,0,3],
[6,6,6,6,4,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,2,4,5,5,2],
[6,0,6,3,4,8,8,5],
[5,4,0,0,2,6,4,3],
[8,7,10,0,4,9,6,6],
[6,6,8,6,0,8,7,5],
[5,2,4,1,2,0,6,1],
[5,2,6,4,3,4,0,4],
[8,5,7,4,5,9,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,7,5,10,5,4,5],
[0,0,2,5,6,5,4,3],
[3,8,0,5,8,5,4,3],
[5,5,5,0,8,3,7,8],
[0,4,2,2,0,2,4,3],
[5,5,5,7,8,0,4,5],
[6,6,6,3,6,6,0,6],
[5,7,7,2,7,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,8,7,4,5,6],
[2,0,4,5,5,3,1,3],
[5,6,0,6,6,5,3,4],
[2,5,4,0,3,3,0,3],
[3,5,4,7,0,5,4,5],
[6,7,5,7,5,0,5,7],
[5,9,7,10,6,5,0,6],
[4,7,6,7,5,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,6,5,7,8,9],
[5,0,7,8,6,7,7,7],
[5,3,0,5,5,6,7,7],
[4,2,5,0,2,5,4,4],
[5,4,5,8,0,5,7,4],
[3,3,4,5,5,0,4,5],
[2,3,3,6,3,6,0,5],
[1,3,3,6,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,6,7,7,3,6],
[3,0,4,7,5,4,4,4],
[4,6,0,6,7,6,5,4],
[4,3,4,0,4,6,4,4],
[3,5,3,6,0,7,5,4],
[3,6,4,4,3,0,5,4],
[7,6,5,6,5,5,0,7],
[4,6,6,6,6,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,7,7,9,4,3],
[3,0,3,1,4,3,4,0],
[4,7,0,4,7,4,4,5],
[3,9,6,0,4,6,5,4],
[3,6,3,6,0,7,3,4],
[1,7,6,4,3,0,3,4],
[6,6,6,5,7,7,0,4],
[7,10,5,6,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,10,5,0,0,10,5],
[10,0,10,10,10,5,10,10],
[0,0,0,0,0,0,5,0],
[5,0,10,0,5,0,5,5],
[10,0,10,5,0,5,10,5],
[10,5,10,10,5,0,10,10],
[0,0,5,5,0,0,0,0],
[5,0,10,5,5,0,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,9,7,4,6,6],
[5,0,3,6,7,3,3,4],
[6,7,0,9,7,4,6,7],
[1,4,1,0,6,0,2,4],
[3,3,3,4,0,4,6,3],
[6,7,6,10,6,0,6,5],
[4,7,4,8,4,4,0,4],
[4,6,3,6,7,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,4,4,4,4,5],
[6,0,2,6,9,7,3,10],
[8,8,0,7,8,5,5,8],
[6,4,3,0,4,4,4,4],
[6,1,2,6,0,2,2,6],
[6,3,5,6,8,0,4,4],
[6,7,5,6,8,6,0,8],
[5,0,2,6,4,6,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,10,10,5,7,5,10],
[0,0,5,7,2,7,2,10],
[0,5,0,5,0,5,0,8],
[0,3,5,0,5,5,3,8],
[5,8,10,5,0,5,5,8],
[3,3,5,5,5,0,3,10],
[5,8,10,7,5,7,0,10],
[0,0,2,2,2,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,8,6,3,7,3],
[4,0,4,3,4,3,4,6],
[6,6,0,7,6,7,6,4],
[2,7,3,0,2,2,7,5],
[4,6,4,8,0,3,7,3],
[7,7,3,8,7,0,7,4],
[3,6,4,3,3,3,0,3],
[7,4,6,5,7,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,0,0,5,5,0],
[5,0,10,0,5,5,5,0],
[5,0,0,0,5,0,0,0],
[10,10,10,0,10,5,5,5],
[10,5,5,0,0,5,5,0],
[5,5,10,5,5,0,5,5],
[5,5,10,5,5,5,0,5],
[10,10,10,5,10,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,5,10,5,10,10],
[0,0,5,0,5,0,0,0],
[5,5,0,5,10,0,5,5],
[5,10,5,0,5,5,5,10],
[0,5,0,5,0,0,0,5],
[5,10,10,5,10,0,5,10],
[0,10,5,5,10,5,0,10],
[0,10,5,0,5,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,3,3,4,4,6],
[6,0,6,5,6,4,6,7],
[5,4,0,3,3,5,4,4],
[7,5,7,0,4,5,5,4],
[7,4,7,6,0,5,4,5],
[6,6,5,5,5,0,6,4],
[6,4,6,5,6,4,0,5],
[4,3,6,6,5,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,2,5,2,6,2,4],
[2,0,2,5,2,0,2,3],
[8,8,0,7,5,6,5,6],
[5,5,3,0,3,3,3,3],
[8,8,5,7,0,6,5,4],
[4,10,4,7,4,0,5,6],
[8,8,5,7,5,5,0,6],
[6,7,4,7,6,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,5,7,8,9,8],
[6,0,4,4,7,7,7,9],
[5,6,0,4,7,7,7,8],
[5,6,6,0,3,4,8,8],
[3,3,3,7,0,5,7,6],
[2,3,3,6,5,0,4,5],
[1,3,3,2,3,6,0,7],
[2,1,2,2,4,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,6,6,5,5,5],
[5,0,6,3,4,4,3,3],
[5,4,0,4,5,6,4,4],
[4,7,6,0,7,4,5,6],
[4,6,5,3,0,5,4,6],
[5,6,4,6,5,0,5,4],
[5,7,6,5,6,5,0,5],
[5,7,6,4,4,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,10,5,5,10,5],
[5,0,0,5,0,5,5,0],
[5,10,0,5,5,5,10,0],
[0,5,5,0,5,5,5,0],
[5,10,5,5,0,5,10,5],
[5,5,5,5,5,0,5,5],
[0,5,0,5,0,5,0,0],
[5,10,10,10,5,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,4,4,5,7,5],
[6,0,6,7,4,7,6,3],
[5,4,0,4,4,5,5,5],
[6,3,6,0,2,3,7,3],
[6,6,6,8,0,5,5,3],
[5,3,5,7,5,0,5,5],
[3,4,5,3,5,5,0,2],
[5,7,5,7,7,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,7,7,7,7,7],
[5,0,10,5,7,5,5,7],
[3,0,0,3,5,5,3,5],
[3,5,7,0,7,7,5,5],
[3,3,5,3,0,5,3,3],
[3,5,5,3,5,0,3,5],
[3,5,7,5,7,7,0,7],
[3,3,5,5,7,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,9,6,6,4,5],
[3,0,6,5,6,6,4,4],
[5,4,0,6,5,7,6,4],
[1,5,4,0,5,4,2,1],
[4,4,5,5,0,7,4,4],
[4,4,3,6,3,0,5,4],
[6,6,4,8,6,5,0,4],
[5,6,6,9,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,9,8,7,8,5,6],
[7,0,8,8,7,7,3,6],
[1,2,0,3,4,4,4,2],
[2,2,7,0,2,6,3,4],
[3,3,6,8,0,6,5,5],
[2,3,6,4,4,0,3,3],
[5,7,6,7,5,7,0,5],
[4,4,8,6,5,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,10,5,3,5,8,10],
[6,0,10,3,6,8,8,8],
[0,0,0,3,3,0,5,0],
[5,7,7,0,3,5,5,7],
[7,4,7,7,0,7,10,7],
[5,2,10,5,3,0,10,8],
[2,2,5,5,0,0,0,5],
[0,2,10,3,3,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,4,6,4,3],
[6,0,6,4,6,5,5,4],
[6,4,0,3,7,4,4,6],
[6,6,7,0,6,5,6,7],
[6,4,3,4,0,6,3,5],
[4,5,6,5,4,0,5,5],
[6,5,6,4,7,5,0,7],
[7,6,4,3,5,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,4,6,6,3,5],
[7,0,6,4,7,7,4,7],
[3,4,0,5,5,7,4,4],
[6,6,5,0,6,6,5,8],
[4,3,5,4,0,4,4,5],
[4,3,3,4,6,0,3,5],
[7,6,6,5,6,7,0,5],
[5,3,6,2,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,4,6,3,4,7],
[7,0,6,5,7,7,5,6],
[5,4,0,3,7,7,5,6],
[6,5,7,0,6,6,5,5],
[4,3,3,4,0,2,4,5],
[7,3,3,4,8,0,5,5],
[6,5,5,5,6,5,0,6],
[3,4,4,5,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,6,6,5,7,5],
[2,0,2,1,5,4,1,5],
[4,8,0,1,6,3,4,6],
[4,9,9,0,5,5,6,6],
[4,5,4,5,0,6,4,7],
[5,6,7,5,4,0,6,6],
[3,9,6,4,6,4,0,7],
[5,5,4,4,3,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,4,1,4,0],
[10,0,1,5,10,6,5,6],
[10,9,0,9,9,10,9,5],
[10,5,1,0,9,6,9,5],
[6,0,1,1,0,1,4,0],
[9,4,0,4,9,0,4,0],
[6,5,1,1,6,6,0,6],
[10,4,5,5,10,10,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,4,7,5,4,5,4],
[2,0,4,6,3,2,6,5],
[6,6,0,8,5,4,5,5],
[3,4,2,0,4,3,5,4],
[5,7,5,6,0,5,8,4],
[6,8,6,7,5,0,5,5],
[5,4,5,5,2,5,0,4],
[6,5,5,6,6,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,5,8,5,5,8],
[3,0,7,7,7,5,7,8],
[3,3,0,3,4,2,3,4],
[5,3,7,0,8,5,7,6],
[2,3,6,2,0,1,3,3],
[5,5,8,5,9,0,9,5],
[5,3,7,3,7,1,0,5],
[2,2,6,4,7,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,1,4,3,4,3,3],
[9,0,5,9,9,9,6,6],
[9,5,0,7,9,7,6,3],
[6,1,3,0,4,2,1,3],
[7,1,1,6,0,5,3,1],
[6,1,3,8,5,0,2,5],
[7,4,4,9,7,8,0,6],
[7,4,7,7,9,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,7,4,5,5,5],
[6,0,5,6,6,6,3,8],
[4,5,0,4,3,3,3,5],
[3,4,6,0,4,6,5,6],
[6,4,7,6,0,3,3,3],
[5,4,7,4,7,0,3,5],
[5,7,7,5,7,7,0,7],
[5,2,5,4,7,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,6,7,7,8,5,7],
[0,0,3,3,4,4,0,4],
[4,7,0,5,4,5,2,4],
[3,7,5,0,4,5,1,4],
[3,6,6,6,0,4,4,5],
[2,6,5,5,6,0,2,4],
[5,10,8,9,6,8,0,7],
[3,6,6,6,5,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,4,4,2,4,6],
[6,0,6,5,4,3,2,7],
[5,4,0,5,4,4,5,7],
[6,5,5,0,4,5,5,7],
[6,6,6,6,0,5,6,8],
[8,7,6,5,5,0,6,7],
[6,8,5,5,4,4,0,7],
[4,3,3,3,2,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,6,3,5,7,3],
[4,0,3,4,2,3,2,5],
[3,7,0,7,3,7,4,2],
[4,6,3,0,3,1,3,3],
[7,8,7,7,0,7,7,3],
[5,7,3,9,3,0,2,4],
[3,8,6,7,3,8,0,3],
[7,5,8,7,7,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,5,6,2,5,6],
[6,0,5,4,7,3,7,3],
[4,5,0,5,6,3,4,6],
[5,6,5,0,7,5,6,6],
[4,3,4,3,0,3,7,4],
[8,7,7,5,7,0,10,7],
[5,3,6,4,3,0,0,3],
[4,7,4,4,6,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,9,6,6,4,6,4],
[3,0,6,3,3,3,3,5],
[1,4,0,1,2,5,4,2],
[4,7,9,0,2,4,7,7],
[4,7,8,8,0,8,7,7],
[6,7,5,6,2,0,5,7],
[4,7,6,3,3,5,0,5],
[6,5,8,3,3,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,3,2,5,7,10],
[5,0,6,6,7,4,6,9],
[3,4,0,6,4,4,7,8],
[7,4,4,0,5,5,8,9],
[8,3,6,5,0,4,8,8],
[5,6,6,5,6,0,5,9],
[3,4,3,2,2,5,0,6],
[0,1,2,1,2,1,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,6,9,10,8,3],
[4,0,2,4,6,8,7,2],
[7,8,0,6,8,9,10,5],
[4,6,4,0,6,8,7,3],
[1,4,2,4,0,7,6,1],
[0,2,1,2,3,0,3,1],
[2,3,0,3,4,7,0,1],
[7,8,5,7,9,9,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,4,8,4,9,7,6],
[0,0,4,2,4,6,4,6],
[6,6,0,4,5,8,6,9],
[2,8,6,0,4,9,4,6],
[6,6,5,6,0,8,3,8],
[1,4,2,1,2,0,2,6],
[3,6,4,6,7,8,0,5],
[4,4,1,4,2,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,5,3,4,3,5],
[5,0,4,4,3,4,4,3],
[7,6,0,5,4,3,2,5],
[5,6,5,0,7,5,3,3],
[7,7,6,3,0,5,4,5],
[6,6,7,5,5,0,7,6],
[7,6,8,7,6,3,0,6],
[5,7,5,7,5,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,5,7,7,7,7],
[2,0,2,1,3,4,4,3],
[5,8,0,2,5,5,4,4],
[5,9,8,0,5,5,10,7],
[3,7,5,5,0,5,5,9],
[3,6,5,5,5,0,7,5],
[3,6,6,0,5,3,0,4],
[3,7,6,3,1,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,6,7,6,5,4],
[7,0,4,4,8,7,6,4],
[5,6,0,2,7,5,4,5],
[4,6,8,0,9,5,5,4],
[3,2,3,1,0,2,3,2],
[4,3,5,5,8,0,4,3],
[5,4,6,5,7,6,0,4],
[6,6,5,6,8,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,3,7,5,3,5],
[3,0,6,3,5,3,3,4],
[2,4,0,5,7,4,2,2],
[7,7,5,0,7,7,2,5],
[3,5,3,3,0,1,3,2],
[5,7,6,3,9,0,3,5],
[7,7,8,8,7,7,0,5],
[5,6,8,5,8,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,5,7,7,8],
[4,0,7,4,3,5,7,9],
[4,3,0,3,2,5,6,5],
[5,6,7,0,4,8,8,7],
[5,7,8,6,0,6,7,9],
[3,5,5,2,4,0,6,7],
[3,3,4,2,3,4,0,5],
[2,1,5,3,1,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,1,7,4,6],
[5,0,8,3,3,6,5,5],
[5,2,0,2,1,4,4,4],
[5,7,8,0,4,10,4,7],
[9,7,9,6,0,9,5,8],
[3,4,6,0,1,0,1,0],
[6,5,6,6,5,9,0,6],
[4,5,6,3,2,10,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,8,7,7,5,5],
[2,0,7,5,2,2,7,2],
[3,3,0,3,3,3,8,5],
[2,5,7,0,2,2,7,2],
[3,8,7,8,0,2,5,5],
[3,8,7,8,8,0,5,5],
[5,3,2,3,5,5,0,5],
[5,8,5,8,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,3,5,6,6,6],
[5,0,6,5,6,7,6,5],
[3,4,0,3,4,6,5,5],
[7,5,7,0,6,8,7,6],
[5,4,6,4,0,7,5,6],
[4,3,4,2,3,0,2,5],
[4,4,5,3,5,8,0,5],
[4,5,5,4,4,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,10,10,5,10,10,10],
[0,0,5,5,5,10,10,10],
[0,5,0,5,5,10,10,10],
[0,5,5,0,0,5,5,5],
[5,5,5,10,0,10,10,5],
[0,0,0,5,0,0,5,5],
[0,0,0,5,0,5,0,5],
[0,0,0,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,0,5,0,0,5,0],
[5,0,0,5,0,5,10,5],
[10,10,0,10,5,5,10,5],
[5,5,0,0,0,0,5,0],
[10,10,5,10,0,5,10,5],
[10,5,5,10,5,0,10,5],
[5,0,0,5,0,0,0,0],
[10,5,5,10,5,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,2,1,5,4,2],
[8,0,4,4,1,4,4,1],
[5,6,0,6,6,6,8,5],
[8,6,4,0,6,4,3,1],
[9,9,4,4,0,4,4,4],
[5,6,4,6,6,0,3,1],
[6,6,2,7,6,7,0,7],
[8,9,5,9,6,9,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,4,7,7,9,3],
[4,0,6,5,7,4,9,4],
[5,4,0,6,5,6,6,5],
[6,5,4,0,7,6,9,5],
[3,3,5,3,0,4,9,3],
[3,6,4,4,6,0,6,2],
[1,1,4,1,1,4,0,3],
[7,6,5,5,7,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,2,3,2,4,4,6],
[7,0,5,4,6,5,3,8],
[8,5,0,5,5,5,3,7],
[7,6,5,0,4,3,7,8],
[8,4,5,6,0,7,6,7],
[6,5,5,7,3,0,5,7],
[6,7,7,3,4,5,0,7],
[4,2,3,2,3,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,0,5,0,5,5],
[5,0,0,5,10,5,10,5],
[5,10,0,5,10,5,10,10],
[10,5,5,0,10,10,5,5],
[5,0,0,0,0,0,5,0],
[10,5,5,0,10,0,5,5],
[5,0,0,5,5,5,0,5],
[5,5,0,5,10,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,7,7,4,4,2],
[4,0,3,3,4,4,2,2],
[7,7,0,9,5,4,7,4],
[3,7,1,0,1,1,3,1],
[3,6,5,9,0,6,3,4],
[6,6,6,9,4,0,6,6],
[6,8,3,7,7,4,0,3],
[8,8,6,9,6,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,3,2,2,5,4],
[7,0,7,3,4,3,7,4],
[7,3,0,3,4,5,6,5],
[7,7,7,0,6,5,7,6],
[8,6,6,4,0,3,7,6],
[8,7,5,5,7,0,9,7],
[5,3,4,3,3,1,0,4],
[6,6,5,4,4,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,8,9,5,8,7],
[3,0,5,7,6,2,4,6],
[4,5,0,5,5,3,4,8],
[2,3,5,0,7,3,4,5],
[1,4,5,3,0,4,4,4],
[5,8,7,7,6,0,9,8],
[2,6,6,6,6,1,0,7],
[3,4,2,5,6,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,3,0,7,0,3],
[7,0,3,6,7,7,7,7],
[4,7,0,7,4,7,4,7],
[7,4,3,0,4,7,4,4],
[10,3,6,6,0,7,10,7],
[3,3,3,3,3,0,3,3],
[10,3,6,6,0,7,0,3],
[7,3,3,6,3,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,10,8,5,9,7],
[3,0,4,5,5,4,5,5],
[2,6,0,4,3,4,3,7],
[0,5,6,0,2,5,3,5],
[2,5,7,8,0,6,5,8],
[5,6,6,5,4,0,4,6],
[1,5,7,7,5,6,0,5],
[3,5,3,5,2,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,8,8,3,4,6],
[3,0,5,5,9,3,4,4],
[4,5,0,4,8,4,4,2],
[2,5,6,0,6,5,6,4],
[2,1,2,4,0,2,3,1],
[7,7,6,5,8,0,5,5],
[6,6,6,4,7,5,0,6],
[4,6,8,6,9,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,5,6,9,8,9],
[5,0,5,4,8,9,8,4],
[2,5,0,5,8,5,9,5],
[5,6,5,0,7,6,8,5],
[4,2,2,3,0,3,4,3],
[1,1,5,4,7,0,8,4],
[2,2,1,2,6,2,0,6],
[1,6,5,5,7,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,6,4,6,5,4],
[3,0,5,7,7,4,3,3],
[6,5,0,3,6,7,4,3],
[4,3,7,0,5,5,4,3],
[6,3,4,5,0,6,3,4],
[4,6,3,5,4,0,1,4],
[5,7,6,6,7,9,0,6],
[6,7,7,7,6,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,6,3,2,3,5],
[6,0,8,8,7,5,6,7],
[5,2,0,5,3,4,4,4],
[4,2,5,0,4,3,5,6],
[7,3,7,6,0,2,4,5],
[8,5,6,7,8,0,5,7],
[7,4,6,5,6,5,0,6],
[5,3,6,4,5,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,7,8,8,8,5],
[2,0,5,2,2,3,5,5],
[2,5,0,7,0,6,5,3],
[3,8,3,0,3,3,6,6],
[2,8,10,7,0,8,10,3],
[2,7,4,7,2,0,7,5],
[2,5,5,4,0,3,0,0],
[5,5,7,4,7,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,4,6,6,3,4],
[4,0,6,3,6,6,6,5],
[4,4,0,3,6,5,2,2],
[6,7,7,0,6,6,5,5],
[4,4,4,4,0,4,4,3],
[4,4,5,4,6,0,3,3],
[7,4,8,5,6,7,0,4],
[6,5,8,5,7,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,1,3,7,4,2],
[3,0,6,4,3,7,1,2],
[7,4,0,4,7,10,4,5],
[9,6,6,0,6,7,4,4],
[7,7,3,4,0,10,4,5],
[3,3,0,3,0,0,4,5],
[6,9,6,6,6,6,0,4],
[8,8,5,6,5,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,6,5,5,2,4,4],
[8,0,6,5,5,5,4,4],
[4,4,0,1,4,4,2,2],
[5,5,9,0,7,3,7,9],
[5,5,6,3,0,5,2,2],
[8,5,6,7,5,0,4,6],
[6,6,8,3,8,6,0,8],
[6,6,8,1,8,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,3,6,6,6,5],
[5,0,2,3,7,7,6,6],
[3,8,0,5,5,8,5,5],
[7,7,5,0,6,9,6,6],
[4,3,5,4,0,3,4,3],
[4,3,2,1,7,0,4,3],
[4,4,5,4,6,6,0,6],
[5,4,5,4,7,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,2,3,3,6,4,5],
[9,0,7,8,8,10,8,5],
[8,3,0,1,2,4,2,3],
[7,2,9,0,3,9,1,4],
[7,2,8,7,0,9,5,3],
[4,0,6,1,1,0,0,1],
[6,2,8,9,5,10,0,5],
[5,5,7,6,7,9,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,2,4,5,4,3],
[7,0,6,3,6,6,7,5],
[5,4,0,4,6,7,5,6],
[8,7,6,0,7,8,6,4],
[6,4,4,3,0,4,3,4],
[5,4,3,2,6,0,6,4],
[6,3,5,4,7,4,0,5],
[7,5,4,6,6,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,5,8,5,3],
[4,0,5,5,4,4,5,4],
[4,5,0,5,1,7,5,4],
[5,5,5,0,6,7,6,5],
[5,6,9,4,0,7,6,5],
[2,6,3,3,3,0,7,3],
[5,5,5,4,4,3,0,5],
[7,6,6,5,5,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,4,7,3,3,5],
[7,0,4,7,9,4,6,5],
[6,6,0,5,7,6,6,6],
[6,3,5,0,8,4,4,4],
[3,1,3,2,0,2,1,3],
[7,6,4,6,8,0,4,6],
[7,4,4,6,9,6,0,7],
[5,5,4,6,7,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,8,8,2,4,4,6],
[9,0,9,10,5,6,6,8],
[2,1,0,3,2,2,4,4],
[2,0,7,0,1,4,3,4],
[8,5,8,9,0,7,9,7],
[6,4,8,6,3,0,5,4],
[6,4,6,7,1,5,0,7],
[4,2,6,6,3,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,4,8,6,5,4],
[5,0,4,5,8,4,7,4],
[5,6,0,4,6,3,6,7],
[6,5,6,0,8,6,8,5],
[2,2,4,2,0,3,4,3],
[4,6,7,4,7,0,4,5],
[5,3,4,2,6,6,0,5],
[6,6,3,5,7,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,7,4,4,6,6],
[6,0,7,8,4,4,6,6],
[6,3,0,8,4,0,6,3],
[3,2,2,0,2,2,2,2],
[6,6,6,8,0,5,7,5],
[6,6,10,8,5,0,9,7],
[4,4,4,8,3,1,0,3],
[4,4,7,8,5,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,10,5,5,3,5],
[6,0,8,9,8,4,5,8],
[4,2,0,9,4,5,6,8],
[0,1,1,0,0,1,1,3],
[5,2,6,10,0,2,3,5],
[5,6,5,9,8,0,5,5],
[7,5,4,9,7,5,0,7],
[5,2,2,7,5,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,8,5,7,5,5],
[2,0,5,5,7,7,5,5],
[2,5,0,8,7,2,0,0],
[2,5,2,0,2,2,2,2],
[5,3,3,8,0,5,3,3],
[3,3,8,8,5,0,8,5],
[5,5,10,8,7,2,0,2],
[5,5,10,8,7,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,6,4,5,5,4],
[7,0,5,7,5,6,4,5],
[5,5,0,7,4,6,3,7],
[4,3,3,0,3,3,2,2],
[6,5,6,7,0,6,5,7],
[5,4,4,7,4,0,4,3],
[5,6,7,8,5,6,0,6],
[6,5,3,8,3,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,5,6,3,8,5],
[7,0,7,6,5,5,7,8],
[5,3,0,6,7,3,5,4],
[5,4,4,0,5,3,7,7],
[4,5,3,5,0,3,4,3],
[7,5,7,7,7,0,7,5],
[2,3,5,3,6,3,0,5],
[5,2,6,3,7,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,4,4,0,0,4,0],
[10,0,8,4,8,4,8,6],
[6,2,0,6,2,2,6,2],
[6,6,4,0,4,4,4,2],
[10,2,8,6,0,6,10,6],
[10,6,8,6,4,0,6,6],
[6,2,4,6,0,4,0,2],
[10,4,8,8,4,4,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,5,0,0,0,0],
[0,0,0,0,0,0,0,0],
[5,10,0,10,5,0,5,0],
[5,10,0,0,0,0,0,0],
[10,10,5,10,0,0,5,5],
[10,10,10,10,10,0,10,5],
[10,10,5,10,5,0,0,5],
[10,10,10,10,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,9,5,7,9,7],
[0,0,2,4,3,2,4,2],
[5,8,0,6,3,4,6,8],
[1,6,4,0,1,2,4,2],
[5,7,7,9,0,7,5,5],
[3,8,6,8,3,0,7,6],
[1,6,4,6,5,3,0,2],
[3,8,2,8,5,4,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,7,6,7,5,4,6],
[9,0,6,9,7,5,9,8],
[3,4,0,6,6,6,5,5],
[4,1,4,0,4,3,5,6],
[3,3,4,6,0,4,5,6],
[5,5,4,7,6,0,5,8],
[6,1,5,5,5,5,0,6],
[4,2,5,4,4,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,6,6,4,5,4],
[5,0,5,7,5,5,5,4],
[7,5,0,6,6,5,6,5],
[4,3,4,0,5,6,5,4],
[4,5,4,5,0,5,4,3],
[6,5,5,4,5,0,6,5],
[5,5,4,5,6,4,0,4],
[6,6,5,6,7,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,5,3,10,3,5],
[5,0,5,7,5,5,5,4],
[7,5,0,9,3,7,3,9],
[5,3,1,0,1,5,1,4],
[7,5,7,9,0,8,4,9],
[0,5,3,5,2,0,3,5],
[7,5,7,9,6,7,0,9],
[5,6,1,6,1,5,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,5,4,5,5,5],
[5,0,2,4,6,6,3,5],
[7,8,0,6,6,6,5,7],
[5,6,4,0,6,5,6,6],
[6,4,4,4,0,5,4,5],
[5,4,4,5,5,0,4,6],
[5,7,5,4,6,6,0,5],
[5,5,3,4,5,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,2,6,6,1,2,1],
[8,0,2,4,9,0,4,1],
[8,8,0,4,9,4,4,4],
[4,6,6,0,10,4,6,5],
[4,1,1,0,0,0,4,0],
[9,10,6,6,10,0,6,5],
[8,6,6,4,6,4,0,1],
[9,9,6,5,10,5,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,6,5,6,4,4],
[6,0,5,6,6,5,5,6],
[5,5,0,6,7,4,4,4],
[4,4,4,0,5,4,4,3],
[5,4,3,5,0,4,5,3],
[4,5,6,6,6,0,6,4],
[6,5,6,6,5,4,0,4],
[6,4,6,7,7,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,4,5,6,6,7,8],
[2,0,3,3,5,5,2,4],
[6,7,0,5,6,7,5,8],
[5,7,5,0,5,6,5,8],
[4,5,4,5,0,5,4,8],
[4,5,3,4,5,0,5,6],
[3,8,5,5,6,5,0,8],
[2,6,2,2,2,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,1,4,1,4,1,4],
[6,0,5,1,5,6,4,1],
[9,5,0,6,5,5,3,6],
[6,9,4,0,6,5,4,1],
[9,5,5,4,0,6,2,4],
[6,4,5,5,4,0,5,4],
[9,6,7,6,8,5,0,4],
[6,9,4,9,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,5,7,5,6,6],
[4,0,7,6,6,3,6,6],
[5,3,0,5,4,2,7,4],
[5,4,5,0,5,2,5,4],
[3,4,6,5,0,4,6,6],
[5,7,8,8,6,0,9,5],
[4,4,3,5,4,1,0,4],
[4,4,6,6,4,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,6,8,8,5,6],
[3,0,5,0,2,5,2,6],
[7,5,0,4,6,8,3,4],
[4,10,6,0,9,6,6,6],
[2,8,4,1,0,5,2,5],
[2,5,2,4,5,0,1,3],
[5,8,7,4,8,9,0,6],
[4,4,6,4,5,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,1,4,9,4,5],
[4,0,8,4,4,5,4,5],
[3,2,0,1,4,5,4,5],
[9,6,9,0,5,10,5,9],
[6,6,6,5,0,7,6,5],
[1,5,5,0,3,0,5,3],
[6,6,6,5,4,5,0,7],
[5,5,5,1,5,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,3,2,5,2,3],
[5,0,2,4,3,6,4,4],
[8,8,0,3,1,8,6,4],
[7,6,7,0,6,7,5,5],
[8,7,9,4,0,9,8,6],
[5,4,2,3,1,0,3,3],
[8,6,4,5,2,7,0,1],
[7,6,6,5,4,7,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,3,5,6,4],
[5,0,3,4,3,7,7,4],
[4,7,0,6,4,6,5,3],
[4,6,4,0,2,4,7,4],
[7,7,6,8,0,6,7,5],
[5,3,4,6,4,0,8,4],
[4,3,5,3,3,2,0,4],
[6,6,7,6,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,5,3,5,3],
[5,0,5,5,4,5,6,2],
[6,5,0,6,5,6,5,3],
[5,5,4,0,4,5,6,5],
[5,6,5,6,0,5,4,4],
[7,5,4,5,5,0,7,3],
[5,4,5,4,6,3,0,4],
[7,8,7,5,6,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,10,10,8,8,5,8],
[0,0,4,10,8,5,2,2],
[0,6,0,8,8,8,0,3],
[0,0,2,0,0,0,2,2],
[2,2,2,10,0,4,2,2],
[2,5,2,10,6,0,2,5],
[5,8,10,8,8,8,0,8],
[2,8,7,8,8,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,6,4,6,6,6],
[2,0,4,8,6,4,2,6],
[2,6,0,8,4,4,2,6],
[4,2,2,0,4,4,2,6],
[6,4,6,6,0,6,2,8],
[4,6,6,6,4,0,6,4],
[4,8,8,8,8,4,0,8],
[4,4,4,4,2,6,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,6,7,7,5,8],
[3,0,5,5,7,6,5,8],
[3,5,0,5,8,2,4,7],
[4,5,5,0,7,4,4,7],
[3,3,2,3,0,4,2,5],
[3,4,8,6,6,0,5,8],
[5,5,6,6,8,5,0,6],
[2,2,3,3,5,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,4,3,6,5,4],
[5,0,4,4,2,6,5,3],
[6,6,0,7,5,8,5,6],
[6,6,3,0,4,7,4,4],
[7,8,5,6,0,8,7,8],
[4,4,2,3,2,0,3,2],
[5,5,5,6,3,7,0,7],
[6,7,4,6,2,8,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,7,3,3,0,5],
[3,0,0,0,3,3,0,0],
[5,10,0,7,3,5,2,5],
[3,10,3,0,3,3,0,8],
[7,7,7,7,0,5,2,5],
[7,7,5,7,5,0,5,5],
[10,10,8,10,8,5,0,8],
[5,10,5,2,5,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,7,6,7,7,5],
[2,0,4,7,2,5,4,5],
[4,6,0,4,5,5,5,4],
[3,3,6,0,3,3,3,2],
[4,8,5,7,0,6,8,6],
[3,5,5,7,4,0,3,6],
[3,6,5,7,2,7,0,5],
[5,5,6,8,4,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,7,6,5,6,4],
[5,0,6,7,8,7,4,6],
[7,4,0,8,4,6,8,6],
[3,3,2,0,4,6,6,3],
[4,2,6,6,0,6,5,5],
[5,3,4,4,4,0,6,7],
[4,6,2,4,5,4,0,3],
[6,4,4,7,5,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,6,4,4,7,4],
[3,0,0,0,4,0,4,0],
[6,10,0,3,7,6,10,4],
[4,10,7,0,7,7,10,7],
[6,6,3,3,0,6,7,6],
[6,10,4,3,4,0,7,1],
[3,6,0,0,3,3,0,0],
[6,10,6,3,4,9,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,10,5,10,10,10,5],
[0,0,0,5,0,10,0,5],
[0,10,0,5,5,10,10,5],
[5,5,5,0,5,10,5,10],
[0,10,5,5,0,10,10,5],
[0,0,0,0,0,0,0,0],
[0,10,0,5,0,10,0,5],
[5,5,5,0,5,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,8,8,8,8,8,5],
[6,0,5,4,4,4,4,4],
[2,5,0,4,5,7,0,2],
[2,6,6,0,5,10,2,2],
[2,6,5,5,0,8,1,3],
[2,6,3,0,2,0,2,0],
[2,6,10,8,9,8,0,5],
[5,6,8,8,7,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,8,4,10,4,4],
[6,0,6,4,4,6,4,4],
[4,4,0,4,0,4,4,0],
[2,6,6,0,4,2,0,0],
[6,6,10,6,0,6,6,2],
[0,4,6,8,4,0,0,4],
[6,6,6,10,4,10,0,6],
[6,6,10,10,8,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,4,7,7,4,5],
[4,0,7,6,5,8,4,6],
[5,3,0,3,5,4,2,4],
[6,4,7,0,5,6,5,6],
[3,5,5,5,0,4,5,6],
[3,2,6,4,6,0,4,6],
[6,6,8,5,5,6,0,7],
[5,4,6,4,4,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,6,6,6,7,6],
[4,0,5,7,4,7,4,6],
[5,5,0,5,4,5,4,6],
[4,3,5,0,4,6,4,6],
[4,6,6,6,0,6,6,6],
[4,3,5,4,4,0,6,7],
[3,6,6,6,4,4,0,7],
[4,4,4,4,4,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,2,2,5,2,0,2],
[10,0,10,6,10,5,6,8],
[8,0,0,3,10,5,4,5],
[8,4,7,0,8,7,2,8],
[5,0,0,2,0,4,3,2],
[8,5,5,3,6,0,4,3],
[10,4,6,8,7,6,0,9],
[8,2,5,2,8,7,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,10,10,5,10,10],
[5,0,5,10,10,5,10,10],
[5,5,0,5,5,5,5,5],
[0,0,5,0,0,5,0,5],
[0,0,5,10,0,5,5,10],
[5,5,5,5,5,0,5,5],
[0,0,5,10,5,5,0,10],
[0,0,5,5,0,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,5,3,4,2,3],
[7,0,7,9,4,9,7,8],
[3,3,0,6,6,6,5,5],
[5,1,4,0,2,3,2,2],
[7,6,4,8,0,8,3,6],
[6,1,4,7,2,0,1,3],
[8,3,5,8,7,9,0,6],
[7,2,5,8,4,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,6,6,5,7,7],
[6,0,6,5,4,3,6,4],
[5,4,0,6,5,5,7,7],
[4,5,4,0,5,7,6,6],
[4,6,5,5,0,6,8,7],
[5,7,5,3,4,0,9,7],
[3,4,3,4,2,1,0,6],
[3,6,3,4,3,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,8,4,7,6,3],
[4,0,5,4,4,3,5,2],
[2,5,0,4,3,1,4,2],
[2,6,6,0,3,1,5,2],
[6,6,7,7,0,5,5,5],
[3,7,9,9,5,0,5,4],
[4,5,6,5,5,5,0,4],
[7,8,8,8,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,3,3,10,5,8],
[5,0,6,8,6,8,6,8],
[5,4,0,2,5,8,2,8],
[7,2,8,0,6,10,5,8],
[7,4,5,4,0,10,2,10],
[0,2,2,0,0,0,2,3],
[5,4,8,5,8,8,0,8],
[2,2,2,2,0,7,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,3,4,4,4,4],
[3,0,3,0,7,3,7,7],
[7,7,0,7,4,7,7,7],
[7,10,3,0,7,7,7,7],
[6,3,6,3,0,6,6,6],
[6,7,3,3,4,0,7,7],
[6,3,3,3,4,3,0,3],
[6,3,3,3,4,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,4,7,5,7,6],
[3,0,3,2,6,4,4,3],
[4,7,0,5,7,3,6,7],
[6,8,5,0,6,4,6,5],
[3,4,3,4,0,6,5,5],
[5,6,7,6,4,0,4,6],
[3,6,4,4,5,6,0,4],
[4,7,3,5,5,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,5,5,5],
[5,0,5,5,5,5,5,5],
[5,5,0,10,5,10,10,10],
[5,5,0,0,5,10,0,0],
[5,5,5,5,0,5,5,5],
[5,5,0,0,5,0,0,0],
[5,5,0,10,5,10,0,10],
[5,5,0,10,5,10,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,10,5,5,0,3,3],
[10,0,10,10,10,7,5,5],
[0,0,0,0,0,0,0,0],
[5,0,10,0,2,0,5,3],
[5,0,10,8,0,0,3,3],
[10,3,10,10,10,0,5,5],
[7,5,10,5,7,5,0,3],
[7,5,10,7,7,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,4,2,2,4,7],
[5,0,7,3,5,4,4,3],
[8,3,0,2,5,5,7,5],
[6,7,8,0,5,5,10,6],
[8,5,5,5,0,3,5,6],
[8,6,5,5,7,0,9,8],
[6,6,3,0,5,1,0,3],
[3,7,5,4,4,2,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,5,7,6,6,7],
[4,0,2,3,4,7,3,5],
[5,8,0,7,9,5,5,9],
[5,7,3,0,8,6,2,6],
[3,6,1,2,0,4,3,4],
[4,3,5,4,6,0,6,6],
[4,7,5,8,7,4,0,10],
[3,5,1,4,6,4,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,7,5,5,5,6],
[5,0,5,6,5,5,4,5],
[6,5,0,6,6,8,6,6],
[3,4,4,0,5,6,4,6],
[5,5,4,5,0,6,5,7],
[5,5,2,4,4,0,5,4],
[5,6,4,6,5,5,0,4],
[4,5,4,4,3,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,4,5,3,3,6],
[5,0,3,7,4,4,4,5],
[5,7,0,6,6,6,5,5],
[6,3,4,0,4,4,2,4],
[5,6,4,6,0,6,4,6],
[7,6,4,6,4,0,4,5],
[7,6,5,8,6,6,0,5],
[4,5,5,6,4,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,8,5,8,8,3,3],
[7,0,5,7,7,7,3,8],
[2,5,0,2,5,8,5,3],
[5,3,8,0,5,8,3,6],
[2,3,5,5,0,5,3,3],
[2,3,2,2,5,0,0,3],
[7,7,5,7,7,10,0,8],
[7,2,7,4,7,7,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,8,4,5,5,7],
[4,0,7,7,5,4,5,6],
[3,3,0,7,5,3,3,5],
[2,3,3,0,4,3,4,4],
[6,5,5,6,0,4,4,5],
[5,6,7,7,6,0,5,6],
[5,5,7,6,6,5,0,8],
[3,4,5,6,5,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,2,3,6,6,4,5],
[7,0,4,7,6,6,6,5],
[8,6,0,3,9,6,4,8],
[7,3,7,0,7,6,7,5],
[4,4,1,3,0,6,5,6],
[4,4,4,4,4,0,4,2],
[6,4,6,3,5,6,0,4],
[5,5,2,5,4,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,2,7,9,5,2],
[7,0,3,0,6,8,8,1],
[5,7,0,2,4,6,6,7],
[8,10,8,0,8,8,8,5],
[3,4,6,2,0,6,4,3],
[1,2,4,2,4,0,1,2],
[5,2,4,2,6,9,0,2],
[8,9,3,5,7,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,2,2,0,0,6,4],
[4,0,0,4,0,0,2,4],
[8,10,0,4,8,8,10,8],
[8,6,6,0,4,4,6,8],
[10,10,2,6,0,2,10,6],
[10,10,2,6,8,0,10,8],
[4,8,0,4,0,0,0,4],
[6,6,2,2,4,2,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,4,4,7,3,4],
[6,0,9,6,6,9,5,6],
[3,1,0,1,2,3,3,1],
[6,4,9,0,5,5,5,10],
[6,4,8,5,0,4,6,5],
[3,1,7,5,6,0,3,5],
[7,5,7,5,4,7,0,5],
[6,4,9,0,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,4,6,3,3,2],
[3,0,2,4,6,2,3,1],
[6,8,0,6,5,2,4,2],
[6,6,4,0,4,3,6,3],
[4,4,5,6,0,3,4,4],
[7,8,8,7,7,0,5,5],
[7,7,6,4,6,5,0,2],
[8,9,8,7,6,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,5,3,4,3,4,3],
[9,0,6,7,7,3,6,7],
[5,4,0,7,5,4,4,5],
[7,3,3,0,4,3,4,7],
[6,3,5,6,0,3,4,4],
[7,7,6,7,7,0,4,8],
[6,4,6,6,6,6,0,7],
[7,3,5,3,6,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,3,8,6,5,7],
[5,0,5,4,7,5,4,7],
[4,5,0,2,7,6,4,5],
[7,6,8,0,7,8,5,5],
[2,3,3,3,0,5,0,4],
[4,5,4,2,5,0,2,5],
[5,6,6,5,10,8,0,7],
[3,3,5,5,6,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,6,7,6,8,6],
[3,0,6,0,5,6,9,2],
[7,4,0,4,6,6,8,6],
[4,10,6,0,5,7,9,3],
[3,5,4,5,0,5,7,5],
[4,4,4,3,5,0,7,2],
[2,1,2,1,3,3,0,1],
[4,8,4,7,5,8,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,2,1,4,1,0,3],
[9,0,7,5,6,6,5,4],
[8,3,0,3,4,4,4,4],
[9,5,7,0,6,8,6,6],
[6,4,6,4,0,3,4,5],
[9,4,6,2,7,0,4,5],
[10,5,6,4,6,6,0,6],
[7,6,6,4,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,5,5,3,4,5],
[8,0,6,6,5,5,6,5],
[6,4,0,7,4,5,4,3],
[5,4,3,0,4,2,4,5],
[5,5,6,6,0,8,3,5],
[7,5,5,8,2,0,5,4],
[6,4,6,6,7,5,0,5],
[5,5,7,5,5,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,5,2,3,5,2],
[7,0,5,4,4,4,6,4],
[7,5,0,6,4,5,7,6],
[5,6,4,0,5,3,8,2],
[8,6,6,5,0,4,5,5],
[7,6,5,7,6,0,9,3],
[5,4,3,2,5,1,0,2],
[8,6,4,8,5,7,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,7,7,3,3,4],
[5,0,6,7,6,4,4,4],
[8,4,0,8,7,7,5,4],
[3,3,2,0,3,1,3,0],
[3,4,3,7,0,1,4,5],
[7,6,3,9,9,0,8,6],
[7,6,5,7,6,2,0,6],
[6,6,6,10,5,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,5,4,7,8,8],
[4,0,4,5,3,6,2,3],
[5,6,0,4,3,8,3,4],
[5,5,6,0,5,6,6,6],
[6,7,7,5,0,9,5,6],
[3,4,2,4,1,0,2,3],
[2,8,7,4,5,8,0,6],
[2,7,6,4,4,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,8,10,3,5,10],
[2,0,3,0,5,3,0,7],
[2,7,0,2,5,2,2,7],
[2,10,8,0,5,5,2,7],
[0,5,5,5,0,0,5,5],
[7,7,8,5,10,0,7,7],
[5,10,8,8,5,3,0,10],
[0,3,3,3,5,3,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,5,9,7,10,10,5],
[1,0,1,8,0,6,2,4],
[5,9,0,8,7,9,8,4],
[1,2,2,0,0,7,1,4],
[3,10,3,10,0,10,6,6],
[0,4,1,3,0,0,1,4],
[0,8,2,9,4,9,0,5],
[5,6,6,6,4,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,8,3,7,10,7,7],
[1,0,2,3,3,3,3,4],
[2,8,0,3,4,5,4,8],
[7,7,7,0,5,8,5,5],
[3,7,6,5,0,7,6,8],
[0,7,5,2,3,0,6,5],
[3,7,6,5,4,4,0,5],
[3,6,2,5,2,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,4,6,5,5,7],
[7,0,7,5,5,3,5,6],
[3,3,0,3,4,6,6,8],
[6,5,7,0,4,4,6,8],
[4,5,6,6,0,6,6,10],
[5,7,4,6,4,0,8,8],
[5,5,4,4,4,2,0,5],
[3,4,2,2,0,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,5,5,4,5],
[4,0,4,4,3,4,3,5],
[4,6,0,5,4,6,2,5],
[4,6,5,0,4,8,4,6],
[5,7,6,6,0,7,5,5],
[5,6,4,2,3,0,4,2],
[6,7,8,6,5,6,0,6],
[5,5,5,4,5,8,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,3,7,5,3,5],
[3,0,3,4,4,7,5,5],
[7,7,0,5,6,7,5,8],
[7,6,5,0,6,4,7,6],
[3,6,4,4,0,6,5,5],
[5,3,3,6,4,0,5,5],
[7,5,5,3,5,5,0,6],
[5,5,2,4,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,7,5,4,3,4],
[7,0,6,7,5,7,6,7],
[3,4,0,4,3,4,5,5],
[3,3,6,0,5,3,5,5],
[5,5,7,5,0,6,6,4],
[6,3,6,7,4,0,3,5],
[7,4,5,5,4,7,0,7],
[6,3,5,5,6,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,9,9,9,9,5,9],
[1,0,0,2,2,0,2,4],
[1,10,0,2,6,6,2,6],
[1,8,8,0,9,8,5,8],
[1,8,4,1,0,1,0,5],
[1,10,4,2,9,0,5,7],
[5,8,8,5,10,5,0,8],
[1,6,4,2,5,3,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,7,6,5,6,7],
[5,0,3,6,4,7,5,5],
[7,7,0,6,5,8,8,7],
[3,4,4,0,5,4,6,3],
[4,6,5,5,0,7,5,3],
[5,3,2,6,3,0,3,5],
[4,5,2,4,5,7,0,6],
[3,5,3,7,7,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,6,6,10,4,6],
[7,0,6,10,6,10,4,6],
[6,4,0,9,7,9,8,9],
[4,0,1,0,3,4,1,0],
[4,4,3,7,0,7,3,3],
[0,0,1,6,3,0,1,0],
[6,6,2,9,7,9,0,6],
[4,4,1,10,7,10,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,3,4,7,4,4],
[6,0,7,3,3,3,0,3],
[6,3,0,3,3,3,3,3],
[7,7,7,0,4,4,4,7],
[6,7,7,6,0,6,7,3],
[3,7,7,6,4,0,7,7],
[6,10,7,6,3,3,0,6],
[6,7,7,3,7,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,5,4,4,5,5],
[6,0,8,5,6,7,6,6],
[6,2,0,3,3,4,6,4],
[5,5,7,0,7,6,8,7],
[6,4,7,3,0,7,7,7],
[6,3,6,4,3,0,8,8],
[5,4,4,2,3,2,0,5],
[5,4,6,3,3,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,3,7,3,7,3],
[3,0,3,3,4,0,7,0],
[7,7,0,3,7,3,4,3],
[7,7,7,0,7,7,7,3],
[3,6,3,3,0,0,7,3],
[7,10,7,3,10,0,7,6],
[3,3,6,3,3,3,0,3],
[7,10,7,7,7,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,5,5,2,5,5],
[4,0,2,5,0,2,2,1],
[6,8,0,5,5,4,6,6],
[5,5,5,0,2,2,3,3],
[5,10,5,8,0,4,5,7],
[8,8,6,8,6,0,4,4],
[5,8,4,7,5,6,0,6],
[5,9,4,7,3,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,0,2,5,4,2,2],
[7,0,2,2,5,4,5,4],
[10,8,0,5,7,7,5,7],
[8,8,5,0,5,5,5,5],
[5,5,3,5,0,7,2,7],
[6,6,3,5,3,0,3,3],
[8,5,5,5,8,7,0,5],
[8,6,3,5,3,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,3,2,5,1,1,1],
[9,0,9,9,9,4,8,8],
[7,1,0,1,5,1,2,6],
[8,1,9,0,5,1,6,6],
[5,1,5,5,0,4,4,1],
[9,6,9,9,6,0,6,5],
[9,2,8,4,6,4,0,7],
[9,2,4,4,9,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,6,4,4,5,4],
[3,0,4,6,5,3,2,4],
[6,6,0,6,5,5,4,5],
[4,4,4,0,3,1,4,2],
[6,5,5,7,0,5,5,5],
[6,7,5,9,5,0,4,4],
[5,8,6,6,5,6,0,6],
[6,6,5,8,5,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,7,4,6,5,5],
[4,0,5,7,4,5,4,3],
[4,5,0,5,5,5,3,4],
[3,3,5,0,2,2,0,4],
[6,6,5,8,0,6,5,5],
[4,5,5,8,4,0,4,2],
[5,6,7,10,5,6,0,5],
[5,7,6,6,5,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,0,7,8,4,7,2],
[4,0,0,7,6,7,7,2],
[10,10,0,8,8,8,10,5],
[3,3,2,0,6,6,5,3],
[2,4,2,4,0,5,7,2],
[6,3,2,4,5,0,6,2],
[3,3,0,5,3,4,0,3],
[8,8,5,7,8,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,7,7,7,4,7],
[3,0,3,3,2,3,2,3],
[5,7,0,6,5,6,1,6],
[3,7,4,0,5,4,4,6],
[3,8,5,5,0,5,5,5],
[3,7,4,6,5,0,2,4],
[6,8,9,6,5,8,0,7],
[3,7,4,4,5,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,5,6,7,9,9],
[3,0,4,3,4,5,4,7],
[4,6,0,7,1,5,8,6],
[5,7,3,0,2,6,6,6],
[4,6,9,8,0,6,8,7],
[3,5,5,4,4,0,5,6],
[1,6,2,4,2,5,0,5],
[1,3,4,4,3,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,6,5,4,5,5],
[6,0,8,7,5,7,8,6],
[3,2,0,6,2,3,5,3],
[4,3,4,0,3,5,4,4],
[5,5,8,7,0,6,7,8],
[6,3,7,5,4,0,8,3],
[5,2,5,6,3,2,0,2],
[5,4,7,6,2,7,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,5,3,5,4,8],
[7,0,8,8,5,9,6,8],
[3,2,0,3,1,4,3,6],
[5,2,7,0,4,5,5,6],
[7,5,9,6,0,5,7,8],
[5,1,6,5,5,0,5,6],
[6,4,7,5,3,5,0,8],
[2,2,4,4,2,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,2,3,4,2,3,4],
[8,0,5,6,5,4,6,5],
[8,5,0,6,5,7,5,5],
[7,4,4,0,5,5,3,3],
[6,5,5,5,0,7,6,6],
[8,6,3,5,3,0,5,5],
[7,4,5,7,4,5,0,4],
[6,5,5,7,4,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,4,1,4,4,3],
[5,0,5,3,1,4,3,4],
[4,5,0,4,2,5,4,3],
[6,7,6,0,5,8,7,7],
[9,9,8,5,0,9,6,6],
[6,6,5,2,1,0,3,1],
[6,7,6,3,4,7,0,4],
[7,6,7,3,4,9,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,5,4,2,3],
[4,0,5,7,5,6,4,4],
[4,5,0,7,7,7,4,5],
[4,3,3,0,6,3,5,4],
[5,5,3,4,0,5,2,3],
[6,4,3,7,5,0,3,5],
[8,6,6,5,8,7,0,5],
[7,6,5,6,7,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,4,4,3,4,5],
[4,0,3,2,3,2,1,4],
[4,7,0,5,3,5,3,4],
[6,8,5,0,6,6,4,5],
[6,7,7,4,0,6,5,7],
[7,8,5,4,4,0,4,5],
[6,9,7,6,5,6,0,6],
[5,6,6,5,3,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,7,6,4,6,5],
[5,0,6,8,6,5,6,5],
[4,4,0,7,6,7,5,3],
[3,2,3,0,3,4,4,3],
[4,4,4,7,0,3,5,4],
[6,5,3,6,7,0,4,5],
[4,4,5,6,5,6,0,4],
[5,5,7,7,6,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,2,0,5,8,3,0],
[10,0,5,3,7,8,3,5],
[8,5,0,8,5,8,8,5],
[10,7,2,0,7,8,3,5],
[5,3,5,3,0,3,3,0],
[2,2,2,2,7,0,3,0],
[7,7,2,7,7,7,0,5],
[10,5,5,5,10,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,5,5,5,6,6,4],
[1,0,4,3,4,3,3,4],
[5,6,0,4,4,3,3,4],
[5,7,6,0,5,4,5,5],
[5,6,6,5,0,6,5,4],
[4,7,7,6,4,0,6,5],
[4,7,7,5,5,4,0,7],
[6,6,6,5,6,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,2,3,2,8,6],
[6,0,7,0,1,8,8,6],
[6,3,0,0,1,2,5,4],
[8,10,10,0,5,8,10,6],
[7,9,9,5,0,8,10,7],
[8,2,8,2,2,0,8,4],
[2,2,5,0,0,2,0,4],
[4,4,6,4,3,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,6,5,6,6,4],
[4,0,5,3,3,5,3,4],
[5,5,0,4,3,3,3,4],
[4,7,6,0,6,8,6,7],
[5,7,7,4,0,4,3,2],
[4,5,7,2,6,0,3,4],
[4,7,7,4,7,7,0,7],
[6,6,6,3,8,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,2,2,5,2,7],
[5,0,3,5,5,3,5,7],
[8,7,0,5,5,7,4,10],
[8,5,5,0,3,5,5,8],
[8,5,5,7,0,5,2,10],
[5,7,3,5,5,0,2,10],
[8,5,6,5,8,8,0,10],
[3,3,0,2,0,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,1,5,3,4,4,3],
[6,0,3,4,3,6,4,2],
[9,7,0,5,5,8,8,6],
[5,6,5,0,3,7,4,6],
[7,7,5,7,0,7,6,6],
[6,4,2,3,3,0,5,5],
[6,6,2,6,4,5,0,3],
[7,8,4,4,4,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,3,6,5,7,6],
[5,0,5,2,5,4,4,5],
[7,5,0,7,4,5,5,6],
[7,8,3,0,5,7,7,5],
[4,5,6,5,0,5,7,7],
[5,6,5,3,5,0,6,5],
[3,6,5,3,3,4,0,4],
[4,5,4,5,3,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,4,7,6,5],
[5,0,5,6,5,6,6,7],
[6,5,0,6,7,8,8,5],
[5,4,4,0,4,5,5,6],
[6,5,3,6,0,7,7,5],
[3,4,2,5,3,0,6,4],
[4,4,2,5,3,4,0,4],
[5,3,5,4,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,0,2,2,2,2],
[8,0,8,8,8,5,5,10],
[5,2,0,3,5,2,2,2],
[10,2,7,0,7,7,2,2],
[8,2,5,3,0,0,0,2],
[8,5,8,3,10,0,2,5],
[8,5,8,8,10,8,0,10],
[8,0,8,8,8,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,3,8,2,5,3,8],
[2,0,5,5,4,5,5,7],
[7,5,0,5,2,5,5,5],
[2,5,5,0,2,5,3,5],
[8,6,8,8,0,5,6,8],
[5,5,5,5,5,0,3,5],
[7,5,5,7,4,7,0,7],
[2,3,5,5,2,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,8,4,8,4,10],
[4,0,6,8,8,8,4,10],
[4,4,0,8,4,8,8,10],
[2,2,2,0,6,6,2,6],
[6,2,6,4,0,4,4,6],
[2,2,2,4,6,0,2,2],
[6,6,2,8,6,8,0,10],
[0,0,0,4,4,8,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,6,5,5,6],
[5,0,0,4,4,3,6,5],
[6,10,0,9,7,5,8,8],
[5,6,1,0,2,2,4,6],
[4,6,3,8,0,4,6,7],
[5,7,5,8,6,0,6,7],
[5,4,2,6,4,4,0,6],
[4,5,2,4,3,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,2,5,0,5,2,3],
[7,0,4,5,6,6,4,4],
[8,6,0,8,2,7,2,5],
[5,5,2,0,2,4,2,2],
[10,4,8,8,0,10,6,4],
[5,4,3,6,0,0,2,0],
[8,6,8,8,4,8,0,4],
[7,6,5,8,6,10,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,6,3,7,6,6],
[4,0,4,4,2,5,4,5],
[6,6,0,5,7,5,6,7],
[4,6,5,0,5,6,5,5],
[7,8,3,5,0,5,8,5],
[3,5,5,4,5,0,6,4],
[4,6,4,5,2,4,0,5],
[4,5,3,5,5,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,6,3,0,3,5],
[10,0,3,10,7,2,5,10],
[10,7,0,10,7,5,8,7],
[4,0,0,0,3,0,5,5],
[7,3,3,7,0,5,5,5],
[10,8,5,10,5,0,5,10],
[7,5,2,5,5,5,0,5],
[5,0,3,5,5,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,2,2,2,2,5],
[5,0,10,7,7,5,5,7],
[5,0,0,2,0,0,0,0],
[8,3,8,0,0,5,0,8],
[8,3,10,10,0,8,8,10],
[8,5,10,5,2,0,2,10],
[8,5,10,10,2,8,0,10],
[5,3,10,2,0,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,3,6,4,6,3],
[6,0,8,6,5,6,6,6],
[6,2,0,5,5,6,6,5],
[7,4,5,0,5,4,7,7],
[4,5,5,5,0,6,7,6],
[6,4,4,6,4,0,5,5],
[4,4,4,3,3,5,0,6],
[7,4,5,3,4,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,6,4,6,5,4],
[5,0,4,4,4,4,3,3],
[5,6,0,7,5,5,4,5],
[4,6,3,0,6,5,2,3],
[6,6,5,4,0,7,5,3],
[4,6,5,5,3,0,4,3],
[5,7,6,8,5,6,0,3],
[6,7,5,7,7,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,6,0,2,1,0,5],
[1,0,5,1,2,1,1,5],
[4,5,0,4,5,1,4,4],
[10,9,6,0,2,3,1,7],
[8,8,5,8,0,5,8,8],
[9,9,9,7,5,0,7,8],
[10,9,6,9,2,3,0,7],
[5,5,6,3,2,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,2,4,2,4,6],
[4,0,3,2,2,2,3,5],
[5,7,0,4,5,4,5,6],
[8,8,6,0,5,9,6,6],
[6,8,5,5,0,4,5,6],
[8,8,6,1,6,0,4,6],
[6,7,5,4,5,6,0,5],
[4,5,4,4,4,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,10,5,8,8,5,8],
[3,0,8,5,8,8,5,8],
[0,2,0,5,5,5,5,2],
[5,5,5,0,6,6,4,7],
[2,2,5,4,0,5,4,4],
[2,2,5,4,5,0,4,4],
[5,5,5,6,6,6,0,3],
[2,2,8,3,6,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,4,6,5,5,7],
[6,0,5,4,6,8,6,7],
[5,5,0,4,5,8,6,4],
[6,6,6,0,7,7,5,7],
[4,4,5,3,0,6,4,5],
[5,2,2,3,4,0,5,4],
[5,4,4,5,6,5,0,6],
[3,3,6,3,5,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,3,4,1,2,2,3],
[2,0,2,2,2,2,0,2],
[7,8,0,3,4,3,8,8],
[6,8,7,0,7,6,5,5],
[9,8,6,3,0,1,5,8],
[8,8,7,4,9,0,5,7],
[8,10,2,5,5,5,0,7],
[7,8,2,5,2,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,6,5,6,5,6],
[7,0,6,7,6,7,6,5],
[3,4,0,2,4,5,4,3],
[4,3,8,0,5,6,5,3],
[5,4,6,5,0,5,6,4],
[4,3,5,4,5,0,4,3],
[5,4,6,5,4,6,0,6],
[4,5,7,7,6,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,9,4,4,8,7,5],
[4,0,3,3,7,4,3,3],
[1,7,0,0,4,1,0,2],
[6,7,10,0,7,6,5,6],
[6,3,6,3,0,4,3,6],
[2,6,9,4,6,0,6,2],
[3,7,10,5,7,4,0,6],
[5,7,8,4,4,8,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,9,5,8,5,5,7],
[4,0,7,3,5,2,3,6],
[1,3,0,1,2,1,2,3],
[5,7,9,0,5,7,6,8],
[2,5,8,5,0,4,6,6],
[5,8,9,3,6,0,4,10],
[5,7,8,4,4,6,0,7],
[3,4,7,2,4,0,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,3,7,2,3,3],
[7,0,5,4,7,8,4,7],
[5,5,0,5,8,7,5,8],
[7,6,5,0,10,9,3,6],
[3,3,2,0,0,2,3,3],
[8,2,3,1,8,0,4,4],
[7,6,5,7,7,6,0,5],
[7,3,2,4,7,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,3,5,5,5,3],
[5,0,9,6,9,4,7,5],
[4,1,0,4,4,1,6,4],
[7,4,6,0,6,6,4,0],
[5,1,6,4,0,3,5,3],
[5,6,9,4,7,0,7,3],
[5,3,4,6,5,3,0,3],
[7,5,6,10,7,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,2,6,2,2,6],
[3,0,2,1,4,2,2,4],
[6,8,0,3,8,5,4,7],
[8,9,7,0,6,7,5,6],
[4,6,2,4,0,5,2,5],
[8,8,5,3,5,0,1,7],
[8,8,6,5,8,9,0,7],
[4,6,3,4,5,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,4,5,7,5,6],
[3,0,8,6,5,6,5,3],
[2,2,0,1,2,3,1,1],
[6,4,9,0,7,5,5,5],
[5,5,8,3,0,5,7,5],
[3,4,7,5,5,0,7,5],
[5,5,9,5,3,3,0,5],
[4,7,9,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,5,6,2,7,5],
[5,0,4,2,5,4,6,4],
[7,6,0,3,6,3,6,4],
[5,8,7,0,6,7,5,3],
[4,5,4,4,0,5,6,3],
[8,6,7,3,5,0,6,4],
[3,4,4,5,4,4,0,2],
[5,6,6,7,7,6,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,3,3,6,4,4,6],
[1,0,3,1,0,4,1,4],
[7,7,0,1,7,7,1,4],
[7,9,9,0,6,7,7,3],
[4,10,3,4,0,4,4,7],
[6,6,3,3,6,0,3,3],
[6,9,9,3,6,7,0,6],
[4,6,6,7,3,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,4,5,4,4],
[4,0,2,1,4,1,4,4],
[4,8,0,8,8,5,8,4],
[5,9,2,0,5,1,8,4],
[6,6,2,5,0,1,8,4],
[5,9,5,9,9,0,9,5],
[6,6,2,2,2,1,0,6],
[6,6,6,6,6,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,1,8,4,4,5,4],
[7,0,5,9,9,6,7,7],
[9,5,0,7,9,5,4,7],
[2,1,3,0,4,3,7,2],
[6,1,1,6,0,4,5,6],
[6,4,5,7,6,0,5,4],
[5,3,6,3,5,5,0,5],
[6,3,3,8,4,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,6,6,6,3,3],
[5,0,2,6,5,5,5,2],
[7,8,0,8,5,3,5,6],
[4,4,2,0,2,0,2,2],
[4,5,5,8,0,7,3,7],
[4,5,7,10,3,0,3,3],
[7,5,5,8,7,7,0,7],
[7,8,4,8,3,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,4,6,3,4,6],
[6,0,4,5,5,5,5,5],
[8,6,0,6,8,5,7,9],
[6,5,4,0,4,4,3,5],
[4,5,2,6,0,3,5,4],
[7,5,5,6,7,0,4,8],
[6,5,3,7,5,6,0,6],
[4,5,1,5,6,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,4,4,4,2,4],
[4,0,8,4,2,3,5,4],
[2,2,0,4,2,2,3,1],
[6,6,6,0,4,6,2,4],
[6,8,8,6,0,3,5,8],
[6,7,8,4,7,0,5,5],
[8,5,7,8,5,5,0,5],
[6,6,9,6,2,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,5,5,4,5,5],
[4,0,2,4,5,4,3,3],
[7,8,0,7,5,4,4,5],
[5,6,3,0,4,3,2,4],
[5,5,5,6,0,3,5,6],
[6,6,6,7,7,0,5,6],
[5,7,6,8,5,5,0,5],
[5,7,5,6,4,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,8,7,9,9,9],
[5,0,7,5,5,6,6,5],
[3,3,0,4,3,5,5,5],
[2,5,6,0,6,6,8,6],
[3,5,7,4,0,9,7,6],
[1,4,5,4,1,0,6,4],
[1,4,5,2,3,4,0,5],
[1,5,5,4,4,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,7,4,7,6,10],
[4,0,4,10,5,5,6,9],
[2,6,0,7,4,8,6,10],
[3,0,3,0,0,3,1,4],
[6,5,6,10,0,6,6,9],
[3,5,2,7,4,0,6,9],
[4,4,4,9,4,4,0,4],
[0,1,0,6,1,1,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,4,3,4,4,3],
[8,0,7,7,5,7,8,4],
[5,3,0,6,5,7,7,2],
[6,3,4,0,3,4,5,4],
[7,5,5,7,0,6,8,6],
[6,3,3,6,4,0,9,3],
[6,2,3,5,2,1,0,3],
[7,6,8,6,4,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,4,4,4,4,5],
[4,0,7,7,4,4,4,4],
[3,3,0,6,2,1,6,4],
[6,3,4,0,4,1,7,5],
[6,6,8,6,0,5,6,4],
[6,6,9,9,5,0,9,9],
[6,6,4,3,4,1,0,6],
[5,6,6,5,6,1,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,2,10,2,4,5,5],
[4,0,6,6,6,4,4,8],
[8,4,0,8,1,4,6,3],
[0,4,2,0,0,3,0,4],
[8,4,9,10,0,6,8,10],
[6,6,6,7,4,0,4,4],
[5,6,4,10,2,6,0,5],
[5,2,7,6,0,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,5,5,0],
[5,0,0,5,5,5,0,5],
[5,10,0,10,10,10,5,5],
[5,5,0,0,5,5,0,0],
[5,5,0,5,0,5,0,5],
[5,5,0,5,5,0,0,0],
[5,10,5,10,10,10,0,5],
[10,5,5,10,5,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,3,3,3,10,6,6],
[0,0,0,0,0,4,3,0],
[7,10,0,6,3,7,6,6],
[7,10,4,0,4,7,7,7],
[7,10,7,6,0,7,10,3],
[0,6,3,3,3,0,6,6],
[4,7,4,3,0,4,0,0],
[4,10,4,3,7,4,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,8,6,7,5,5],
[5,0,6,6,9,5,6,8],
[4,4,0,6,9,5,4,5],
[2,4,4,0,6,5,5,3],
[4,1,1,4,0,3,3,5],
[3,5,5,5,7,0,6,7],
[5,4,6,5,7,4,0,5],
[5,2,5,7,5,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,7,6,8,9,5],
[3,0,3,3,4,4,6,4],
[2,7,0,3,4,5,5,3],
[3,7,7,0,4,6,8,7],
[4,6,6,6,0,6,6,7],
[2,6,5,4,4,0,6,5],
[1,4,5,2,4,4,0,3],
[5,6,7,3,3,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,9,4,2,7,3,1],
[9,0,10,8,5,8,5,6],
[1,0,0,3,1,4,1,1],
[6,2,7,0,0,5,3,4],
[8,5,9,10,0,8,5,7],
[3,2,6,5,2,0,2,1],
[7,5,9,7,5,8,0,2],
[9,4,9,6,3,9,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,4,5,7,4,6],
[6,0,2,7,7,7,3,4],
[7,8,0,9,8,10,5,4],
[6,3,1,0,5,7,3,4],
[5,3,2,5,0,8,3,2],
[3,3,0,3,2,0,1,2],
[6,7,5,7,7,9,0,8],
[4,6,6,6,8,8,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,2,3,5,5,8],
[5,0,5,5,0,0,3,5],
[3,5,0,5,3,5,5,3],
[8,5,5,0,3,3,5,8],
[7,10,7,7,0,5,5,10],
[5,10,5,7,5,0,10,8],
[5,7,5,5,5,0,0,5],
[2,5,7,2,0,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,6,6,4,5,8],
[4,0,1,5,1,2,4,4],
[6,9,0,9,6,5,9,8],
[4,5,1,0,2,1,5,4],
[4,9,4,8,0,4,7,6],
[6,8,5,9,6,0,6,6],
[5,6,1,5,3,4,0,5],
[2,6,2,6,4,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,7,6,6,5,8],
[2,0,4,6,5,6,5,3],
[2,6,0,6,4,5,4,5],
[3,4,4,0,5,5,2,4],
[4,5,6,5,0,3,3,5],
[4,4,5,5,7,0,4,5],
[5,5,6,8,7,6,0,7],
[2,7,5,6,5,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,3,3,8,3,2],
[7,0,4,5,3,9,3,9],
[6,6,0,6,6,7,5,6],
[7,5,4,0,7,9,8,5],
[7,7,4,3,0,8,1,7],
[2,1,3,1,2,0,3,1],
[7,7,5,2,9,7,0,7],
[8,1,4,5,3,9,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,5,6,7,5,6],
[3,0,4,3,3,7,3,7],
[4,6,0,4,6,7,3,5],
[5,7,6,0,6,7,4,6],
[4,7,4,4,0,7,3,5],
[3,3,3,3,3,0,2,3],
[5,7,7,6,7,8,0,5],
[4,3,5,4,5,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,4,6,6,6,7],
[4,0,4,4,6,3,1,7],
[3,6,0,3,6,3,6,6],
[6,6,7,0,3,3,3,10],
[4,4,4,7,0,3,4,7],
[4,7,7,7,7,0,7,10],
[4,9,4,7,6,3,0,7],
[3,3,4,0,3,0,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,7,6,7,5,4],
[6,0,4,8,6,7,4,6],
[4,6,0,8,5,4,8,5],
[3,2,2,0,5,2,4,2],
[4,4,5,5,0,6,6,4],
[3,3,6,8,4,0,6,2],
[5,6,2,6,4,4,0,3],
[6,4,5,8,6,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,4,4,5,7,5],
[5,0,5,7,6,4,7,6],
[5,5,0,7,7,3,6,5],
[6,3,3,0,5,3,4,5],
[6,4,3,5,0,3,6,5],
[5,6,7,7,7,0,8,8],
[3,3,4,6,4,2,0,5],
[5,4,5,5,5,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,9,6,7,1,5],
[3,0,5,8,0,1,3,5],
[3,5,0,3,3,1,3,0],
[1,2,7,0,2,2,0,0],
[4,10,7,8,0,1,3,5],
[3,9,9,8,9,0,3,5],
[9,7,7,10,7,7,0,5],
[5,5,10,10,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,2,4,3,7,4],
[8,0,8,7,5,5,5,2],
[7,2,0,6,4,2,6,4],
[8,3,4,0,5,1,6,2],
[6,5,6,5,0,5,6,6],
[7,5,8,9,5,0,6,2],
[3,5,4,4,4,4,0,4],
[6,8,6,8,4,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,3,3,3,8],
[5,0,8,8,3,6,0,8],
[5,2,0,8,3,6,0,6],
[5,2,2,0,3,3,0,3],
[7,7,7,7,0,5,5,8],
[7,4,4,7,5,0,2,5],
[7,10,10,10,5,8,0,8],
[2,2,4,7,2,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,5,6,2,5,3],
[7,0,5,5,7,3,5,3],
[5,5,0,3,5,3,5,4],
[5,5,7,0,6,4,6,5],
[4,3,5,4,0,1,4,3],
[8,7,7,6,9,0,7,4],
[5,5,5,4,6,3,0,5],
[7,7,6,5,7,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,7,9,7,8,5],
[3,0,7,7,6,5,6,1],
[3,3,0,7,6,7,4,2],
[3,3,3,0,6,5,3,3],
[1,4,4,4,0,5,4,2],
[3,5,3,5,5,0,3,3],
[2,4,6,7,6,7,0,2],
[5,9,8,7,8,7,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,8,4,5,7,5,5],
[6,0,6,6,6,7,4,5],
[2,4,0,2,3,3,4,4],
[6,4,8,0,6,6,5,4],
[5,4,7,4,0,6,5,4],
[3,3,7,4,4,0,4,4],
[5,6,6,5,5,6,0,6],
[5,5,6,6,6,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,7,8,6,6,4],
[6,0,6,6,8,8,9,5],
[4,4,0,3,6,5,6,3],
[3,4,7,0,5,6,6,6],
[2,2,4,5,0,5,6,3],
[4,2,5,4,5,0,5,3],
[4,1,4,4,4,5,0,3],
[6,5,7,4,7,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,5,6,6,5,4],
[5,0,6,8,7,4,5,6],
[4,4,0,4,5,1,2,1],
[5,2,6,0,3,2,2,4],
[4,3,5,7,0,4,3,5],
[4,6,9,8,6,0,6,6],
[5,5,8,8,7,4,0,7],
[6,4,9,6,5,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,8,8,6,10,9],
[2,0,0,3,2,3,3,4],
[5,10,0,8,5,5,8,9],
[2,7,2,0,4,4,9,6],
[2,8,5,6,0,1,6,7],
[4,7,5,6,9,0,9,9],
[0,7,2,1,4,1,0,6],
[1,6,1,4,3,1,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,8,6,7,7,5],
[6,0,7,6,6,5,6,6],
[3,3,0,4,5,4,4,3],
[2,4,6,0,5,7,5,5],
[4,4,5,5,0,5,5,4],
[3,5,6,3,5,0,6,4],
[3,4,6,5,5,4,0,4],
[5,4,7,5,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,5,6,6,2,5],
[5,0,5,4,5,5,5,3],
[0,5,0,5,6,6,0,5],
[5,6,5,0,3,3,5,5],
[4,5,4,7,0,9,4,5],
[4,5,4,7,1,0,4,3],
[8,5,10,5,6,6,0,5],
[5,7,5,5,5,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,7,4,4,3,5],
[2,0,2,3,2,2,1,1],
[5,8,0,7,4,6,5,6],
[3,7,3,0,5,2,4,3],
[6,8,6,5,0,6,6,5],
[6,8,4,8,4,0,4,3],
[7,9,5,6,4,6,0,6],
[5,9,4,7,5,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,0,2,6,3],
[5,0,5,8,0,3,5,2],
[5,5,0,3,2,5,2,5],
[5,2,7,0,2,5,2,4],
[10,10,8,8,0,8,10,3],
[8,7,5,5,2,0,6,3],
[4,5,8,8,0,4,0,3],
[7,8,5,6,7,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,3,6,6,7,4],
[5,0,4,5,4,6,3,5],
[3,6,0,3,6,7,4,5],
[7,5,7,0,7,8,6,6],
[4,6,4,3,0,7,6,4],
[4,4,3,2,3,0,3,2],
[3,7,6,4,4,7,0,6],
[6,5,5,4,6,8,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,4,7,7,5,6],
[3,0,6,3,7,7,2,7],
[6,4,0,5,7,4,2,6],
[6,7,5,0,8,7,6,7],
[3,3,3,2,0,5,2,4],
[3,3,6,3,5,0,1,4],
[5,8,8,4,8,9,0,8],
[4,3,4,3,6,6,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,4,5,5,4,7],
[3,0,7,4,5,4,6,6],
[5,3,0,5,4,4,4,7],
[6,6,5,0,7,8,7,8],
[5,5,6,3,0,5,5,7],
[5,6,6,2,5,0,6,6],
[6,4,6,3,5,4,0,7],
[3,4,3,2,3,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,2,5,1,0,1,6],
[10,0,8,8,7,3,9,9],
[8,2,0,10,8,5,8,8],
[5,2,0,0,3,2,2,5],
[9,3,2,7,0,2,6,6],
[10,7,5,8,8,0,6,7],
[9,1,2,8,4,4,0,6],
[4,1,2,5,4,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,4,2,5,6,5],
[5,0,5,3,2,3,7,6],
[3,5,0,2,2,3,8,5],
[6,7,8,0,5,7,8,7],
[8,8,8,5,0,5,9,9],
[5,7,7,3,5,0,8,6],
[4,3,2,2,1,2,0,6],
[5,4,5,3,1,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,10,3,10,4,0],
[3,0,7,7,6,7,7,3],
[6,3,0,6,6,10,6,6],
[0,3,4,0,3,7,0,0],
[7,4,4,7,0,7,7,0],
[0,3,0,3,3,0,0,0],
[6,3,4,10,3,10,0,0],
[10,7,4,10,10,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,2,2,1,1,6,5],
[8,0,0,4,5,5,5,9],
[8,10,0,5,9,5,6,9],
[8,6,5,0,9,9,10,9],
[9,5,1,1,0,1,6,5],
[9,5,5,1,9,0,10,10],
[4,5,4,0,4,0,0,4],
[5,1,1,1,5,0,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,3,8,7,5,10],
[3,0,5,3,2,3,1,5],
[2,5,0,1,7,1,5,5],
[7,7,9,0,8,5,6,7],
[2,8,3,2,0,4,0,3],
[3,7,9,5,6,0,6,4],
[5,9,5,4,10,4,0,5],
[0,5,5,3,7,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,8,6,5,7,7],
[4,0,4,4,2,1,5,3],
[4,6,0,5,3,2,4,7],
[2,6,5,0,5,3,4,7],
[4,8,7,5,0,2,7,7],
[5,9,8,7,8,0,8,7],
[3,5,6,6,3,2,0,7],
[3,7,3,3,3,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,5,5,5,5,10],
[0,0,5,0,5,0,0,0],
[5,5,0,0,10,0,5,5],
[5,10,10,0,10,10,5,5],
[5,5,0,0,0,0,5,5],
[5,10,10,0,10,0,5,5],
[5,10,5,5,5,5,0,10],
[0,10,5,5,5,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,7,6,6,8,8],
[5,0,8,7,8,8,8,8],
[2,2,0,2,5,3,3,8],
[3,3,8,0,6,6,8,8],
[4,2,5,4,0,0,8,5],
[4,2,7,4,10,0,8,7],
[2,2,7,2,2,2,0,7],
[2,2,2,2,5,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,6,8,6,10,7],
[3,0,6,4,8,7,8,6],
[6,4,0,4,4,5,7,5],
[4,6,6,0,8,6,10,7],
[2,2,6,2,0,8,7,4],
[4,3,5,4,2,0,8,3],
[0,2,3,0,3,2,0,1],
[3,4,5,3,6,7,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,6,5,7,4,6],
[3,0,4,2,3,4,4,3],
[5,6,0,4,5,5,4,2],
[4,8,6,0,4,7,5,4],
[5,7,5,6,0,6,6,5],
[3,6,5,3,4,0,3,3],
[6,6,6,5,4,7,0,4],
[4,7,8,6,5,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,3,4,4,2,2],
[8,0,6,5,7,7,6,3],
[5,4,0,5,6,7,5,5],
[7,5,5,0,4,6,7,6],
[6,3,4,6,0,5,6,4],
[6,3,3,4,5,0,4,3],
[8,4,5,3,4,6,0,3],
[8,7,5,4,6,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,5,6,4,5,9],
[5,0,4,2,4,2,3,4],
[3,6,0,0,4,0,5,4],
[5,8,10,0,4,2,9,7],
[4,6,6,6,0,6,6,5],
[6,8,10,8,4,0,8,7],
[5,7,5,1,4,2,0,4],
[1,6,6,3,5,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,3,3,3,5,2],
[3,0,3,3,3,3,3,3],
[7,7,0,9,6,9,3,3],
[7,7,1,0,4,6,3,0],
[7,7,4,6,0,9,6,5],
[7,7,1,4,1,0,3,0],
[5,7,7,7,4,7,0,6],
[8,7,7,10,5,10,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,1,5,5,5,5],
[6,0,3,4,6,7,5,4],
[5,7,0,5,5,8,6,5],
[9,6,5,0,8,8,5,7],
[5,4,5,2,0,5,5,4],
[5,3,2,2,5,0,5,2],
[5,5,4,5,5,5,0,4],
[5,6,5,3,6,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,2,4,6,0,4],
[6,0,2,2,2,2,6,0],
[8,8,0,6,4,8,4,8],
[8,8,4,0,4,8,4,4],
[6,8,6,6,0,6,4,4],
[4,8,2,2,4,0,4,0],
[10,4,6,6,6,6,0,4],
[6,10,2,6,6,10,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,9,5,9,6,5,1],
[5,0,5,5,6,5,6,6],
[1,5,0,1,10,5,2,1],
[5,5,9,0,9,6,5,5],
[1,4,0,1,0,1,0,0],
[4,5,5,4,9,0,5,5],
[5,4,8,5,10,5,0,4],
[9,4,9,5,10,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,4,6,3,5,4],
[6,0,2,7,7,4,6,4],
[7,8,0,6,8,5,7,5],
[6,3,4,0,8,2,6,4],
[4,3,2,2,0,1,3,3],
[7,6,5,8,9,0,7,9],
[5,4,3,4,7,3,0,4],
[6,6,5,6,7,1,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,7,7,6,7,6],
[5,0,7,2,5,4,4,4],
[4,3,0,4,6,4,4,5],
[3,8,6,0,6,8,7,7],
[3,5,4,4,0,6,6,6],
[4,6,6,2,4,0,4,8],
[3,6,6,3,4,6,0,6],
[4,6,5,3,4,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,5,4,4,5,5],
[7,0,7,5,6,3,4,3],
[4,3,0,6,2,0,4,3],
[5,5,4,0,4,2,4,3],
[6,4,8,6,0,2,5,4],
[6,7,10,8,8,0,4,6],
[5,6,6,6,5,6,0,3],
[5,7,7,7,6,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,8,8,9,10,10,4],
[0,0,4,3,3,5,4,1],
[2,6,0,3,2,6,6,4],
[2,7,7,0,3,6,7,4],
[1,7,8,7,0,9,7,5],
[0,5,4,4,1,0,5,1],
[0,6,4,3,3,5,0,4],
[6,9,6,6,5,9,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,8,4,6,6,6,8],
[1,0,9,5,7,6,6,7],
[2,1,0,2,1,1,7,6],
[6,5,8,0,6,5,7,6],
[4,3,9,4,0,1,9,7],
[4,4,9,5,9,0,9,9],
[4,4,3,3,1,1,0,7],
[2,3,4,4,3,1,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,4,6,5,4,7],
[5,0,6,5,6,6,5,6],
[3,4,0,5,5,6,4,5],
[6,5,5,0,5,5,4,6],
[4,4,5,5,0,7,5,7],
[5,4,4,5,3,0,4,8],
[6,5,6,6,5,6,0,7],
[3,4,5,4,3,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,0,3,8,8,3,5],
[8,0,8,8,10,10,5,8],
[10,2,0,10,10,10,5,8],
[7,2,0,0,8,10,3,5],
[2,0,0,2,0,4,2,2],
[2,0,0,0,6,0,0,2],
[7,5,5,7,8,10,0,8],
[5,2,2,5,8,8,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,4,5,6,4,5],
[4,0,4,2,4,5,4,6],
[4,6,0,3,4,5,4,5],
[6,8,7,0,5,7,6,7],
[5,6,6,5,0,6,5,7],
[4,5,5,3,4,0,4,6],
[6,6,6,4,5,6,0,7],
[5,4,5,3,3,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,4,1,0,3,1,1],
[9,0,7,7,7,7,5,1],
[6,3,0,0,2,2,7,3],
[9,3,10,0,9,9,7,3],
[10,3,8,1,0,9,7,3],
[7,3,8,1,1,0,5,3],
[9,5,3,3,3,5,0,6],
[9,9,7,7,7,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,6,6,6,6,3],
[3,0,3,1,1,1,3,1],
[4,7,0,4,6,3,5,4],
[4,9,6,0,4,4,5,4],
[4,9,4,6,0,4,3,4],
[4,9,7,6,6,0,5,7],
[4,7,5,5,7,5,0,2],
[7,9,6,6,6,3,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,10,5,5,5,3,2],
[10,0,10,5,5,8,8,5],
[0,0,0,2,0,0,0,2],
[5,5,8,0,0,5,8,7],
[5,5,10,10,0,5,8,7],
[5,2,10,5,5,0,3,5],
[7,2,10,2,2,7,0,2],
[8,5,8,3,3,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,9,9,7,5,8],
[5,0,6,6,7,6,8,8],
[4,4,0,6,6,5,6,4],
[1,4,4,0,6,3,4,5],
[1,3,4,4,0,5,4,5],
[3,4,5,7,5,0,5,7],
[5,2,4,6,6,5,0,4],
[2,2,6,5,5,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,4,2,4,2,6],
[5,0,2,6,2,5,3,6],
[6,8,0,6,3,8,6,7],
[6,4,4,0,4,2,1,4],
[8,8,7,6,0,8,5,8],
[6,5,2,8,2,0,2,3],
[8,7,4,9,5,8,0,5],
[4,4,3,6,2,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,5,4,3,5,4],
[5,0,5,5,3,5,5,3],
[7,5,0,6,5,4,5,3],
[5,5,4,0,4,5,5,3],
[6,7,5,6,0,6,7,5],
[7,5,6,5,4,0,6,3],
[5,5,5,5,3,4,0,2],
[6,7,7,7,5,7,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,4,5,7,5,8],
[4,0,5,6,5,5,6,7],
[4,5,0,5,5,5,5,8],
[6,4,5,0,5,5,6,7],
[5,5,5,5,0,4,4,8],
[3,5,5,5,6,0,6,7],
[5,4,5,4,6,4,0,8],
[2,3,2,3,2,3,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,8,6,5,5,6],
[5,0,5,6,6,5,5,8],
[5,5,0,6,2,4,5,9],
[2,4,4,0,2,3,3,4],
[4,4,8,8,0,6,8,8],
[5,5,6,7,4,0,6,8],
[5,5,5,7,2,4,0,4],
[4,2,1,6,2,2,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,5,4,3,4,5],
[6,0,6,5,6,5,4,7],
[4,4,0,5,4,4,2,4],
[5,5,5,0,3,3,4,4],
[6,4,6,7,0,5,5,6],
[7,5,6,7,5,0,5,7],
[6,6,8,6,5,5,0,6],
[5,3,6,6,4,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,4,2,4,8,3,3],
[2,0,3,3,3,5,3,3],
[6,7,0,8,8,8,6,4],
[8,7,2,0,7,10,2,2],
[6,7,2,3,0,10,2,2],
[2,5,2,0,0,0,0,2],
[7,7,4,8,8,10,0,5],
[7,7,6,8,8,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,9,8,5,6,8],
[4,0,6,7,7,7,3,7],
[3,4,0,6,5,5,2,6],
[1,3,4,0,6,6,3,8],
[2,3,5,4,0,4,4,7],
[5,3,5,4,6,0,2,4],
[4,7,8,7,6,8,0,8],
[2,3,4,2,3,6,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,7,4,4,8,7],
[6,0,3,6,3,4,4,3],
[3,7,0,3,4,1,1,7],
[3,4,7,0,6,7,3,4],
[6,7,6,4,0,4,7,4],
[6,6,9,3,6,0,4,6],
[2,6,9,7,3,6,0,6],
[3,7,3,6,6,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,7,7,4,5,5],
[5,0,4,4,6,5,4,7],
[5,6,0,7,9,6,7,8],
[3,6,3,0,8,4,3,6],
[3,4,1,2,0,1,2,4],
[6,5,4,6,9,0,5,5],
[5,6,3,7,8,5,0,7],
[5,3,2,4,6,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,0,10,10,5,10,5],
[0,0,0,0,0,0,5,5],
[10,10,0,10,10,5,10,5],
[0,10,0,0,5,0,5,5],
[0,10,0,5,0,0,5,5],
[5,10,5,10,10,0,5,5],
[0,5,0,5,5,5,0,5],
[5,5,5,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,2,5,5,6,5],
[5,0,9,5,7,6,5,5],
[3,1,0,5,6,5,5,4],
[8,5,5,0,7,6,6,3],
[5,3,4,3,0,5,8,3],
[5,4,5,4,5,0,4,5],
[4,5,5,4,2,6,0,4],
[5,5,6,7,7,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,8,5,6,6,5],
[2,0,6,4,2,6,7,3],
[4,4,0,6,3,7,6,4],
[2,6,4,0,2,6,8,1],
[5,8,7,8,0,8,6,7],
[4,4,3,4,2,0,3,4],
[4,3,4,2,4,7,0,3],
[5,7,6,9,3,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,7,6,6,4,7],
[7,0,6,8,8,4,9,7],
[5,4,0,5,7,7,7,6],
[3,2,5,0,4,6,5,3],
[4,2,3,6,0,5,4,6],
[4,6,3,4,5,0,5,6],
[6,1,3,5,6,5,0,5],
[3,3,4,7,4,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,8,3,7,4,4,5],
[8,0,8,6,7,6,4,5],
[2,2,0,1,3,2,5,3],
[7,4,9,0,7,6,5,5],
[3,3,7,3,0,4,3,4],
[6,4,8,4,6,0,6,6],
[6,6,5,5,7,4,0,5],
[5,5,7,5,6,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,4,2,7,6,5],
[6,0,7,4,4,6,7,6],
[3,3,0,4,3,6,7,5],
[6,6,6,0,5,6,7,5],
[8,6,7,5,0,7,6,6],
[3,4,4,4,3,0,3,5],
[4,3,3,3,4,7,0,3],
[5,4,5,5,4,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,3,4,4,3,8],
[5,0,10,3,7,7,6,8],
[2,0,0,0,1,0,1,4],
[7,7,10,0,5,7,8,8],
[6,3,9,5,0,4,4,7],
[6,3,10,3,6,0,5,8],
[7,4,9,2,6,5,0,8],
[2,2,6,2,3,2,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,5,0,5,10,5],
[0,0,5,5,0,5,10,5],
[5,5,0,0,0,5,5,0],
[5,5,10,0,5,10,5,5],
[10,10,10,5,0,10,10,5],
[5,5,5,0,0,0,5,0],
[0,0,5,5,0,5,0,0],
[5,5,10,5,5,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,5,6,0,6,9],
[5,0,6,5,6,1,6,10],
[4,4,0,4,0,4,1,4],
[5,5,6,0,6,5,1,5],
[4,4,10,4,0,4,5,4],
[10,9,6,5,6,0,6,9],
[4,4,9,9,5,4,0,4],
[1,0,6,5,6,1,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,10,5,7,7,7,7],
[6,0,8,3,7,3,5,6],
[0,2,0,0,2,1,3,6],
[5,7,10,0,10,5,10,7],
[3,3,8,0,0,3,5,5],
[3,7,9,5,7,0,9,9],
[3,5,7,0,5,1,0,6],
[3,4,4,3,5,1,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,6,6,5,7,6],
[4,0,6,7,3,3,7,6],
[3,4,0,5,3,4,6,5],
[4,3,5,0,1,5,6,4],
[4,7,7,9,0,5,6,8],
[5,7,6,5,5,0,6,7],
[3,3,4,4,4,4,0,3],
[4,4,5,6,2,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,6,5,3,8,8,4],
[9,0,8,9,5,10,10,10],
[4,2,0,2,2,7,7,4],
[5,1,8,0,5,10,8,5],
[7,5,8,5,0,5,8,5],
[2,0,3,0,5,0,3,3],
[2,0,3,2,2,7,0,0],
[6,0,6,5,5,7,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,3,6,4,5,3],
[4,0,2,2,4,0,2,2],
[4,8,0,1,6,2,4,3],
[7,8,9,0,10,8,8,5],
[4,6,4,0,0,2,5,0],
[6,10,8,2,8,0,7,5],
[5,8,6,2,5,3,0,5],
[7,8,7,5,10,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,8,6,5,5,7,6],
[7,0,5,3,6,2,4,3],
[2,5,0,2,3,0,3,1],
[4,7,8,0,5,0,7,3],
[5,4,7,5,0,2,4,5],
[5,8,10,10,8,0,10,8],
[3,6,7,3,6,0,0,3],
[4,7,9,7,5,2,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,3,9,6,7,7],
[4,0,5,4,7,4,4,6],
[4,5,0,4,6,5,7,7],
[7,6,6,0,7,5,7,6],
[1,3,4,3,0,3,3,5],
[4,6,5,5,7,0,7,7],
[3,6,3,3,7,3,0,7],
[3,4,3,4,5,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,6,5,6,5,5,5],
[1,0,1,6,1,6,5,5],
[4,9,0,9,9,9,4,4],
[5,4,1,0,5,9,5,5],
[4,9,1,5,0,5,4,4],
[5,4,1,1,5,0,5,5],
[5,5,6,5,6,5,0,0],
[5,5,6,5,6,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,3,6,6,5,5],
[5,0,5,4,5,5,6,4],
[6,5,0,5,6,6,6,7],
[7,6,5,0,6,6,5,7],
[4,5,4,4,0,7,5,5],
[4,5,4,4,3,0,4,4],
[5,4,4,5,5,6,0,6],
[5,6,3,3,5,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,1,4,9],
[5,0,4,4,5,5,3,4],
[5,6,0,1,6,1,4,9],
[5,6,9,0,9,2,4,10],
[5,5,4,1,0,1,4,8],
[9,5,9,8,9,0,7,8],
[6,7,6,6,6,3,0,10],
[1,6,1,0,2,2,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,5,5,5,6,6],
[6,0,7,5,5,6,5,6],
[4,3,0,4,3,4,4,5],
[5,5,6,0,3,6,7,6],
[5,5,7,7,0,6,8,6],
[5,4,6,4,4,0,4,5],
[4,5,6,3,2,6,0,4],
[4,4,5,4,4,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,8,6,7,10,8],
[5,0,8,4,4,3,6,4],
[2,2,0,3,2,2,3,6],
[2,6,7,0,6,6,8,8],
[4,6,8,4,0,6,6,4],
[3,7,8,4,4,0,6,6],
[0,4,7,2,4,4,0,6],
[2,6,4,2,6,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,9,5,5,7,6,4],
[3,0,10,7,7,3,5,6],
[1,0,0,1,1,3,1,0],
[5,3,9,0,0,5,3,3],
[5,3,9,10,0,5,5,7],
[3,7,7,5,5,0,3,4],
[4,5,9,7,5,7,0,4],
[6,4,10,7,3,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,5,2,3,4,7],
[6,0,7,8,4,4,6,7],
[3,3,0,5,2,1,4,7],
[5,2,5,0,1,4,3,6],
[8,6,8,9,0,6,5,8],
[7,6,9,6,4,0,5,7],
[6,4,6,7,5,5,0,7],
[3,3,3,4,2,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,6,5,5,4,3],
[6,0,6,7,4,6,5,5],
[5,4,0,5,6,5,4,5],
[4,3,5,0,4,5,2,3],
[5,6,4,6,0,4,5,3],
[5,4,5,5,6,0,4,5],
[6,5,6,8,5,6,0,3],
[7,5,5,7,7,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,6,6,5,6,4],
[5,0,5,7,8,5,5,6],
[6,5,0,7,8,4,6,7],
[4,3,3,0,6,3,5,4],
[4,2,2,4,0,2,3,1],
[5,5,6,7,8,0,4,6],
[4,5,4,5,7,6,0,5],
[6,4,3,6,9,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,1,3,2,4,2,4],
[6,0,3,6,7,5,3,4],
[9,7,0,7,8,8,5,5],
[7,4,3,0,3,5,3,3],
[8,3,2,7,0,6,2,4],
[6,5,2,5,4,0,4,5],
[8,7,5,7,8,6,0,5],
[6,6,5,7,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,2,4,2,5,6,5],
[2,0,1,2,2,3,2,2],
[8,9,0,4,3,5,7,4],
[6,8,6,0,6,4,4,5],
[8,8,7,4,0,8,6,7],
[5,7,5,6,2,0,7,5],
[4,8,3,6,4,3,0,4],
[5,8,6,5,3,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,4,6,6,5,7],
[5,0,6,3,4,5,3,5],
[2,4,0,3,6,2,3,3],
[6,7,7,0,7,7,4,7],
[4,6,4,3,0,2,1,4],
[4,5,8,3,8,0,2,6],
[5,7,7,6,9,8,0,5],
[3,5,7,3,6,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,4,5,7,10,5],
[3,0,7,7,5,4,7,4],
[2,3,0,5,6,2,9,4],
[6,3,5,0,1,4,10,5],
[5,5,4,9,0,6,9,7],
[3,6,8,6,4,0,9,7],
[0,3,1,0,1,1,0,3],
[5,6,6,5,3,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,2,2,3,4,5,1],
[8,0,6,4,6,4,5,4],
[8,4,0,3,4,3,3,2],
[8,6,7,0,7,5,6,5],
[7,4,6,3,0,5,4,4],
[6,6,7,5,5,0,4,4],
[5,5,7,4,6,6,0,4],
[9,6,8,5,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,6,7,9,3,1],
[5,0,1,6,8,6,3,1],
[6,9,0,6,7,9,7,5],
[4,4,4,0,4,5,3,1],
[3,2,3,6,0,6,3,1],
[1,4,1,5,4,0,2,1],
[7,7,3,7,7,8,0,8],
[9,9,5,9,9,9,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,5,5,5],
[5,0,2,0,2,2,0,0],
[5,8,0,3,10,5,0,3],
[5,10,7,0,10,7,7,10],
[5,8,0,0,0,5,0,3],
[5,8,5,3,5,0,0,3],
[5,10,10,3,10,10,0,5],
[5,10,7,0,7,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,6,5,7,8,4],
[3,0,3,3,5,5,6,5],
[3,7,0,5,4,5,6,4],
[4,7,5,0,3,6,7,5],
[5,5,6,7,0,7,7,7],
[3,5,5,4,3,0,5,4],
[2,4,4,3,3,5,0,5],
[6,5,6,5,3,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,7,3,6,6,6],
[6,0,3,6,5,8,4,6],
[3,7,0,6,5,7,7,7],
[3,4,4,0,5,5,4,4],
[7,5,5,5,0,7,6,6],
[4,2,3,5,3,0,4,4],
[4,6,3,6,4,6,0,5],
[4,4,3,6,4,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,6,6,6,6,7],
[3,0,4,3,4,3,6,3],
[5,6,0,3,2,5,4,6],
[4,7,7,0,3,7,6,7],
[4,6,8,7,0,5,6,7],
[4,7,5,3,5,0,6,6],
[4,4,6,4,4,4,0,5],
[3,7,4,3,3,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,7,5,7,7,7],
[4,0,7,7,5,7,7,6],
[4,3,0,4,5,7,6,5],
[3,3,6,0,5,5,5,5],
[5,5,5,5,0,5,6,5],
[3,3,3,5,5,0,3,4],
[3,3,4,5,4,7,0,5],
[3,4,5,5,5,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,6,2,2,6,3],
[3,0,4,6,4,4,7,3],
[6,6,0,3,4,1,4,6],
[4,4,7,0,2,5,10,4],
[8,6,6,8,0,4,9,5],
[8,6,9,5,6,0,8,8],
[4,3,6,0,1,2,0,3],
[7,7,4,6,5,2,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,3,0,0,0,3,2],
[10,0,5,10,5,2,5,7],
[7,5,0,7,5,2,2,7],
[10,0,3,0,0,0,5,7],
[10,5,5,10,0,2,5,7],
[10,8,8,10,8,0,5,7],
[7,5,8,5,5,5,0,7],
[8,3,3,3,3,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,1,5,1,0,1,1],
[9,0,9,9,5,9,4,10],
[9,1,0,5,0,0,0,1],
[5,1,5,0,1,1,1,1],
[9,5,10,9,0,4,4,5],
[10,1,10,9,6,0,5,10],
[9,6,10,9,6,5,0,6],
[9,0,9,9,5,0,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,8,9,5,7,6,7],
[1,0,4,8,4,4,6,6],
[2,6,0,6,2,4,5,4],
[1,2,4,0,4,3,6,6],
[5,6,8,6,0,7,6,4],
[3,6,6,7,3,0,6,5],
[4,4,5,4,4,4,0,2],
[3,4,6,4,6,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,3,6,6,5,7],
[3,0,4,3,7,5,5,4],
[4,6,0,5,6,5,4,6],
[7,7,5,0,7,6,6,6],
[4,3,4,3,0,4,6,5],
[4,5,5,4,6,0,5,5],
[5,5,6,4,4,5,0,4],
[3,6,4,4,5,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,4,6,6,8,6],
[2,0,3,3,4,4,4,3],
[5,7,0,7,8,6,8,7],
[6,7,3,0,2,9,5,6],
[4,6,2,8,0,7,6,7],
[4,6,4,1,3,0,4,3],
[2,6,2,5,4,6,0,5],
[4,7,3,4,3,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,0,10,10,5,10,5],
[5,0,0,10,5,0,5,0],
[10,10,0,10,10,10,10,5],
[0,0,0,0,5,0,0,0],
[0,5,0,5,0,5,5,5],
[5,10,0,10,5,0,5,0],
[0,5,0,10,5,5,0,0],
[5,10,5,10,5,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,6,4,6,2,6],
[8,0,4,7,6,7,5,9],
[6,6,0,6,5,7,6,8],
[4,3,4,0,2,3,4,6],
[6,4,5,8,0,5,4,5],
[4,3,3,7,5,0,3,6],
[8,5,4,6,6,7,0,7],
[4,1,2,4,5,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,10,6,10,7,8],
[5,0,7,7,5,5,5,5],
[0,3,0,6,3,6,3,5],
[0,3,4,0,6,6,3,6],
[4,5,7,4,0,8,5,5],
[0,5,4,4,2,0,4,5],
[3,5,7,7,5,6,0,8],
[2,5,5,4,5,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,6,5,6,3,6],
[5,0,3,7,4,7,1,4],
[5,7,0,6,5,9,5,6],
[4,3,4,0,5,5,2,4],
[5,6,5,5,0,9,5,6],
[4,3,1,5,1,0,4,1],
[7,9,5,8,5,6,0,5],
[4,6,4,6,4,9,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,5,4,7,4,5],
[7,0,6,5,4,7,4,7],
[6,4,0,5,4,5,3,5],
[5,5,5,0,3,5,4,5],
[6,6,6,7,0,6,5,6],
[3,3,5,5,4,0,2,4],
[6,6,7,6,5,8,0,6],
[5,3,5,5,4,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,0,5,8,2,6],
[5,0,6,3,10,10,3,8],
[7,4,0,4,10,10,5,5],
[10,7,6,0,10,10,5,10],
[5,0,0,0,0,5,2,3],
[2,0,0,0,5,0,2,1],
[8,7,5,5,8,8,0,8],
[4,2,5,0,7,9,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,6,6,3,5,4],
[7,0,5,6,7,3,7,6],
[7,5,0,5,5,3,4,5],
[4,4,5,0,7,3,6,6],
[4,3,5,3,0,3,4,3],
[7,7,7,7,7,0,4,4],
[5,3,6,4,6,6,0,2],
[6,4,5,4,7,6,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,5,5,7,6,6],
[4,0,4,3,5,6,4,5],
[3,6,0,4,4,5,5,6],
[5,7,6,0,3,6,4,5],
[5,5,6,7,0,8,5,5],
[3,4,5,4,2,0,3,4],
[4,6,5,6,5,7,0,6],
[4,5,4,5,5,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,4,6,4,0,9,7],
[0,0,0,3,2,0,9,4],
[6,10,0,6,4,6,9,9],
[4,7,4,0,4,1,9,4],
[6,8,6,6,0,3,9,6],
[10,10,4,9,7,0,9,9],
[1,1,1,1,1,1,0,3],
[3,6,1,6,4,1,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,6,3,6,7,1],
[5,0,5,4,3,7,7,2],
[7,5,0,6,5,6,8,5],
[4,6,4,0,4,5,6,4],
[7,7,5,6,0,7,8,5],
[4,3,4,5,3,0,5,2],
[3,3,2,4,2,5,0,2],
[9,8,5,6,5,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,4,6,9,7,6,5],
[1,0,3,2,5,6,2,5],
[6,7,0,4,6,6,4,4],
[4,8,6,0,8,6,4,5],
[1,5,4,2,0,3,2,5],
[3,4,4,4,7,0,1,3],
[4,8,6,6,8,9,0,5],
[5,5,6,5,5,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,3,3,5,5,3],
[8,0,7,5,6,6,7,7],
[7,3,0,4,3,4,8,5],
[7,5,6,0,6,8,8,7],
[7,4,7,4,0,8,8,7],
[5,4,6,2,2,0,6,3],
[5,3,2,2,2,4,0,5],
[7,3,5,3,3,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,1,3,3,2,4],
[4,0,4,3,2,3,4,6],
[6,6,0,3,0,6,2,4],
[9,7,7,0,4,6,1,5],
[7,8,10,6,0,6,7,4],
[7,7,4,4,4,0,4,8],
[8,6,8,9,3,6,0,4],
[6,4,6,5,6,2,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,6,5,7,4,4],
[3,0,2,7,5,4,4,4],
[5,8,0,7,7,8,5,5],
[4,3,3,0,2,2,4,2],
[5,5,3,8,0,6,6,6],
[3,6,2,8,4,0,4,2],
[6,6,5,6,4,6,0,2],
[6,6,5,8,4,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,7,3,6,6,2],
[6,0,3,8,4,6,7,4],
[7,7,0,6,5,7,8,4],
[3,2,4,0,4,6,4,4],
[7,6,5,6,0,8,7,5],
[4,4,3,4,2,0,4,4],
[4,3,2,6,3,6,0,4],
[8,6,6,6,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,6,4,3,5,5],
[3,0,7,5,5,3,5,5],
[3,3,0,3,2,3,3,3],
[4,5,7,0,2,5,5,4],
[6,5,8,8,0,5,5,4],
[7,7,7,5,5,0,7,4],
[5,5,7,5,5,3,0,3],
[5,5,7,6,6,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,3,5,0,5,0],
[6,0,4,5,5,5,4,4],
[8,6,0,6,4,5,5,5],
[7,5,4,0,7,4,4,3],
[5,5,6,3,0,4,2,3],
[10,5,5,6,6,0,5,3],
[5,6,5,6,8,5,0,3],
[10,6,5,7,7,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,4,5,6,6,6],
[2,0,5,4,5,6,6,4],
[5,5,0,4,6,3,7,5],
[6,6,6,0,6,4,8,4],
[5,5,4,4,0,3,7,3],
[4,4,7,6,7,0,8,6],
[4,4,3,2,3,2,0,2],
[4,6,5,6,7,4,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,4,6,3,6,5],
[4,0,5,2,3,4,4,3],
[6,5,0,4,5,6,6,5],
[6,8,6,0,6,7,5,6],
[4,7,5,4,0,5,4,5],
[7,6,4,3,5,0,6,4],
[4,6,4,5,6,4,0,6],
[5,7,5,4,5,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,5,6,4,8],
[4,0,6,4,3,2,4,5],
[4,4,0,5,6,6,5,6],
[4,6,5,0,6,5,2,6],
[5,7,4,4,0,4,4,5],
[4,8,4,5,6,0,5,5],
[6,6,5,8,6,5,0,7],
[2,5,4,4,5,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,10,6,3,4,6,7],
[2,0,3,4,3,4,2,5],
[0,7,0,4,1,3,6,5],
[4,6,6,0,5,7,4,7],
[7,7,9,5,0,6,6,6],
[6,6,7,3,4,0,4,6],
[4,8,4,6,4,6,0,6],
[3,5,5,3,4,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,3,7,4,8,6],
[2,0,3,2,5,2,5,6],
[2,7,0,2,3,2,4,5],
[7,8,8,0,4,7,7,8],
[3,5,7,6,0,4,4,7],
[6,8,8,3,6,0,6,7],
[2,5,6,3,6,4,0,6],
[4,4,5,2,3,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,6,6,4,5,2],
[3,0,5,5,5,3,6,3],
[3,5,0,5,5,3,4,4],
[4,5,5,0,5,5,1,4],
[4,5,5,5,0,4,2,4],
[6,7,7,5,6,0,5,8],
[5,4,6,9,8,5,0,5],
[8,7,6,6,6,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,2,7,2,2,2],
[6,0,2,2,5,3,0,2],
[8,8,0,5,8,8,6,5],
[8,8,5,0,8,8,3,7],
[3,5,2,2,0,3,0,2],
[8,7,2,2,7,0,0,2],
[8,10,4,7,10,10,0,4],
[8,8,5,3,8,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,6,6,4,4,7],
[7,0,6,5,6,4,4,5],
[5,4,0,3,4,3,6,9],
[4,5,7,0,3,4,6,7],
[4,4,6,7,0,5,6,7],
[6,6,7,6,5,0,7,7],
[6,6,4,4,4,3,0,5],
[3,5,1,3,3,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,7,7,3,4,6],
[5,0,4,9,7,5,5,7],
[6,6,0,9,6,4,4,7],
[3,1,1,0,4,4,3,5],
[3,3,4,6,0,2,2,4],
[7,5,6,6,8,0,5,7],
[6,5,6,7,8,5,0,6],
[4,3,3,5,6,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,6,7,7,4,6],
[4,0,3,2,2,4,0,1],
[7,7,0,6,9,7,5,7],
[4,8,4,0,6,7,3,5],
[3,8,1,4,0,7,2,4],
[3,6,3,3,3,0,2,2],
[6,10,5,7,8,8,0,9],
[4,9,3,5,6,8,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,5,4,5,7,6],
[5,0,3,6,5,3,3,4],
[8,7,0,7,6,7,5,9],
[5,4,3,0,6,3,4,6],
[6,5,4,4,0,4,3,5],
[5,7,3,7,6,0,2,4],
[3,7,5,6,7,8,0,7],
[4,6,1,4,5,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,4,3,6,7,3],
[8,0,7,6,5,8,7,6],
[5,3,0,1,4,7,5,3],
[6,4,9,0,4,9,6,6],
[7,5,6,6,0,7,7,5],
[4,2,3,1,3,0,4,4],
[3,3,5,4,3,6,0,1],
[7,4,7,4,5,6,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,5,6,5,6,5],
[6,0,8,7,5,7,10,7],
[6,2,0,6,6,4,6,3],
[5,3,4,0,6,4,4,3],
[4,5,4,4,0,4,6,4],
[5,3,6,6,6,0,6,4],
[4,0,4,6,4,4,0,3],
[5,3,7,7,6,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,8,6,6,3,8],
[2,0,5,4,0,5,2,7],
[4,5,0,5,0,7,0,5],
[2,6,5,0,3,8,3,8],
[4,10,10,7,0,10,7,10],
[4,5,3,2,0,0,0,5],
[7,8,10,7,3,10,0,8],
[2,3,5,2,0,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,3,8,3,5,6],
[5,0,5,3,6,5,8,6],
[7,5,0,5,7,7,9,5],
[7,7,5,0,7,6,8,7],
[2,4,3,3,0,3,6,4],
[7,5,3,4,7,0,5,6],
[5,2,1,2,4,5,0,3],
[4,4,5,3,6,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,5,4,3,8,3],
[4,0,7,2,5,2,8,2],
[2,3,0,1,2,2,3,2],
[5,8,9,0,7,5,7,4],
[6,5,8,3,0,5,6,5],
[7,8,8,5,5,0,7,5],
[2,2,7,3,4,3,0,3],
[7,8,8,6,5,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,6,6,6,4],
[5,0,6,7,7,8,7,5],
[6,4,0,7,6,6,7,5],
[5,3,3,0,5,5,8,6],
[4,3,4,5,0,4,8,6],
[4,2,4,5,6,0,8,3],
[4,3,3,2,2,2,0,4],
[6,5,5,4,4,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,3,5,6,3,4],
[5,0,6,5,4,6,6,5],
[4,4,0,2,3,3,4,2],
[7,5,8,0,5,3,5,5],
[5,6,7,5,0,5,6,7],
[4,4,7,7,5,0,4,4],
[7,4,6,5,4,6,0,3],
[6,5,8,5,3,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,5,8,6,6],
[4,0,10,9,4,7,6,5],
[4,0,0,7,4,7,6,5],
[4,1,3,0,2,7,3,2],
[5,6,6,8,0,9,7,5],
[2,3,3,3,1,0,2,2],
[4,4,4,7,3,8,0,4],
[4,5,5,8,5,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,4,7,7,5,8],
[3,0,5,5,6,5,5,7],
[5,5,0,4,6,5,3,7],
[6,5,6,0,7,7,4,7],
[3,4,4,3,0,3,3,5],
[3,5,5,3,7,0,4,5],
[5,5,7,6,7,6,0,8],
[2,3,3,3,5,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,5,4,4,5,4],
[5,0,7,4,7,4,6,6],
[4,3,0,4,4,2,2,2],
[5,6,6,0,5,4,6,4],
[6,3,6,5,0,4,5,5],
[6,6,8,6,6,0,6,4],
[5,4,8,4,5,4,0,1],
[6,4,8,6,5,6,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,3,3,3,3,7],
[6,0,4,4,3,4,7,6],
[4,6,0,5,6,4,6,9],
[7,6,5,0,4,5,5,6],
[7,7,4,6,0,5,8,7],
[7,6,6,5,5,0,6,8],
[7,3,4,5,2,4,0,6],
[3,4,1,4,3,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,4,5,4,3,5],
[5,0,2,4,4,5,4,3],
[5,8,0,7,7,7,5,5],
[6,6,3,0,6,8,6,5],
[5,6,3,4,0,4,3,3],
[6,5,3,2,6,0,5,3],
[7,6,5,4,7,5,0,6],
[5,7,5,5,7,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,9,4,6,6,7,6],
[4,0,4,7,1,4,7,7],
[1,6,0,4,5,5,8,7],
[6,3,6,0,3,3,4,7],
[4,9,5,7,0,6,8,10],
[4,6,5,7,4,0,7,9],
[3,3,2,6,2,3,0,4],
[4,3,3,3,0,1,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,6,4,5,6],
[5,0,7,8,7,5,7,5],
[4,3,0,5,5,1,4,3],
[4,2,5,0,7,4,4,3],
[4,3,5,3,0,4,3,4],
[6,5,9,6,6,0,6,5],
[5,3,6,6,7,4,0,5],
[4,5,7,7,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,10,10,10],
[5,0,5,5,5,10,5,10],
[5,5,0,10,10,10,5,10],
[5,5,0,0,5,5,5,5],
[5,5,0,5,0,5,5,5],
[0,0,0,5,5,0,0,5],
[0,5,5,5,5,10,0,5],
[0,0,0,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,5,4,5,4,4],
[7,0,6,7,6,6,4,7],
[6,4,0,5,3,4,3,4],
[5,3,5,0,4,4,3,4],
[6,4,7,6,0,5,5,5],
[5,4,6,6,5,0,5,5],
[6,6,7,7,5,5,0,5],
[6,3,6,6,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,2,3,2,5,5],
[3,0,6,5,6,3,3,5],
[4,4,0,2,4,4,2,2],
[8,5,8,0,5,5,5,5],
[7,4,6,5,0,7,5,5],
[8,7,6,5,3,0,5,5],
[5,7,8,5,5,5,0,7],
[5,5,8,5,5,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,3,3,2,5,5],
[6,0,2,3,2,5,5,4],
[8,8,0,6,5,8,7,7],
[7,7,4,0,3,4,6,7],
[7,8,5,7,0,7,7,6],
[8,5,2,6,3,0,6,6],
[5,5,3,4,3,4,0,4],
[5,6,3,3,4,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,8,8,6,8,8],
[5,0,6,7,6,7,8,6],
[2,4,0,4,7,4,7,5],
[2,3,6,0,6,5,6,3],
[2,4,3,4,0,6,6,3],
[4,3,6,5,4,0,6,4],
[2,2,3,4,4,4,0,2],
[2,4,5,7,7,6,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,6,5,6,7,6],
[4,0,7,7,7,6,5,6],
[2,3,0,4,4,4,3,3],
[4,3,6,0,7,4,5,5],
[5,3,6,3,0,5,6,6],
[4,4,6,6,5,0,5,5],
[3,5,7,5,4,5,0,6],
[4,4,7,5,4,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,0,2,2,3,7,0],
[7,0,3,5,5,5,7,3],
[10,7,0,2,7,8,10,0],
[8,5,8,0,7,8,10,6],
[8,5,3,3,0,3,7,3],
[7,5,2,2,7,0,4,0],
[3,3,0,0,3,6,0,0],
[10,7,10,4,7,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,1,9,10,10,6,10],
[1,0,1,4,1,5,1,5],
[9,9,0,9,9,9,5,9],
[1,6,1,0,1,5,1,1],
[0,9,1,9,0,9,6,9],
[0,5,1,5,1,0,1,6],
[4,9,5,9,4,9,0,9],
[0,5,1,9,1,4,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,7,4,3,3,2,3],
[9,0,9,5,6,5,3,8],
[3,1,0,2,0,0,0,0],
[6,5,8,0,3,4,7,4],
[7,4,10,7,0,4,4,4],
[7,5,10,6,6,0,5,6],
[8,7,10,3,6,5,0,7],
[7,2,10,6,6,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,6,5,2,7,5,4],
[1,0,5,0,1,2,5,4],
[4,5,0,4,2,5,5,4],
[5,10,6,0,3,7,9,9],
[8,9,8,7,0,5,9,7],
[3,8,5,3,5,0,8,7],
[5,5,5,1,1,2,0,1],
[6,6,6,1,3,3,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,5,6,4,8,2],
[6,0,3,5,3,4,6,3],
[5,7,0,3,7,5,5,7],
[5,5,7,0,7,8,7,6],
[4,7,3,3,0,5,5,1],
[6,6,5,2,5,0,7,2],
[2,4,5,3,5,3,0,2],
[8,7,3,4,9,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,1,0,0,0,2,0],
[8,0,3,4,3,4,4,4],
[9,7,0,7,5,3,9,6],
[10,6,3,0,4,4,5,4],
[10,7,5,6,0,6,6,6],
[10,6,7,6,4,0,7,6],
[8,6,1,5,4,3,0,2],
[10,6,4,6,4,4,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,1,5,10,1,8],
[2,0,4,0,6,5,3,3],
[5,6,0,6,6,6,6,6],
[9,10,4,0,6,9,7,10],
[5,4,4,4,0,5,4,6],
[0,5,4,1,5,0,1,5],
[9,7,4,3,6,9,0,9],
[2,7,4,0,4,5,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,7,8,7,7,10,2],
[0,0,5,5,5,5,0,0],
[3,5,0,8,10,10,5,5],
[2,5,2,0,7,7,2,2],
[3,5,0,3,0,5,3,5],
[3,5,0,3,5,0,3,0],
[0,10,5,8,7,7,0,2],
[8,10,5,8,5,10,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,5,7,6,6,5],
[3,0,3,4,3,1,3,4],
[4,7,0,6,6,6,8,7],
[5,6,4,0,6,5,7,6],
[3,7,4,4,0,5,5,7],
[4,9,4,5,5,0,5,6],
[4,7,2,3,5,5,0,5],
[5,6,3,4,3,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,3,3,4,5,5],
[5,0,3,5,6,3,5,6],
[6,7,0,5,5,6,6,6],
[7,5,5,0,4,3,6,6],
[7,4,5,6,0,4,4,5],
[6,7,4,7,6,0,8,7],
[5,5,4,4,6,2,0,3],
[5,4,4,4,5,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,5,7,7,5,4],
[4,0,6,3,4,5,3,5],
[5,4,0,5,4,7,5,4],
[5,7,5,0,6,6,6,3],
[3,6,6,4,0,6,3,5],
[3,5,3,4,4,0,3,2],
[5,7,5,4,7,7,0,6],
[6,5,6,7,5,8,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,7,10,5,5],
[5,0,8,3,2,5,0,0],
[5,2,0,3,2,5,0,0],
[5,7,7,0,2,5,2,7],
[3,8,8,8,0,10,0,5],
[0,5,5,5,0,0,0,5],
[5,10,10,8,10,10,0,10],
[5,10,10,3,5,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,9,1,6,5,6,1],
[10,0,9,10,10,10,6,5],
[1,1,0,1,6,1,6,1],
[9,0,9,0,9,4,5,4],
[4,0,4,1,0,5,6,5],
[5,0,9,6,5,0,5,0],
[4,4,4,5,4,5,0,4],
[9,5,9,6,5,10,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,8,6,5,4,6,5],
[6,0,5,5,3,3,4,4],
[2,5,0,5,5,3,4,5],
[4,5,5,0,5,3,5,5],
[5,7,5,5,0,3,3,5],
[6,7,7,7,7,0,4,6],
[4,6,6,5,7,6,0,5],
[5,6,5,5,5,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,8,7,4,6,5],
[3,0,4,5,4,4,4,5],
[6,6,0,6,5,3,3,4],
[2,5,4,0,4,2,3,5],
[3,6,5,6,0,4,5,6],
[6,6,7,8,6,0,5,7],
[4,6,7,7,5,5,0,6],
[5,5,6,5,4,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,3,6,4,6,4],
[4,0,6,5,5,4,6,4],
[4,4,0,2,5,5,4,2],
[7,5,8,0,6,5,8,6],
[4,5,5,4,0,1,5,3],
[6,6,5,5,9,0,6,4],
[4,4,6,2,5,4,0,5],
[6,6,8,4,7,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,1,6,2,4,3],
[4,0,6,3,4,4,3,3],
[4,4,0,4,1,4,4,3],
[9,7,6,0,6,4,7,6],
[4,6,9,4,0,4,7,6],
[8,6,6,6,6,0,5,4],
[6,7,6,3,3,5,0,3],
[7,7,7,4,4,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,5,6,8,8,8],
[7,0,5,5,6,7,8,8],
[5,5,0,2,5,5,5,8],
[5,5,8,0,8,8,10,8],
[4,4,5,2,0,4,5,8],
[2,3,5,2,6,0,8,8],
[2,2,5,0,5,2,0,8],
[2,2,2,2,2,2,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,5,4,4,9,8],
[3,0,4,7,3,3,7,8],
[4,6,0,6,5,6,8,7],
[5,3,4,0,3,3,4,5],
[6,7,5,7,0,6,7,7],
[6,7,4,7,4,0,8,9],
[1,3,2,6,3,2,0,8],
[2,2,3,5,3,1,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,2,3,2,5,4],
[6,0,5,4,5,4,5,5],
[6,5,0,2,5,3,5,5],
[8,6,8,0,4,5,8,4],
[7,5,5,6,0,8,5,4],
[8,6,7,5,2,0,7,4],
[5,5,5,2,5,3,0,3],
[6,5,5,6,6,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,9,5,2,6,3],
[6,0,4,8,10,5,6,5],
[7,6,0,8,9,6,4,7],
[1,2,2,0,3,2,3,2],
[5,0,1,7,0,5,3,5],
[8,5,4,8,5,0,4,7],
[4,4,6,7,7,6,0,5],
[7,5,3,8,5,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,6,7,5,5,6,7],
[1,0,2,3,0,3,3,4],
[4,8,0,7,5,5,6,8],
[3,7,3,0,1,3,3,4],
[5,10,5,9,0,5,6,9],
[5,7,5,7,5,0,4,6],
[4,7,4,7,4,6,0,7],
[3,6,2,6,1,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,4,6,6,4],
[5,0,7,8,3,7,6,4],
[4,3,0,4,3,6,4,2],
[4,2,6,0,3,5,5,5],
[6,7,7,7,0,8,8,5],
[4,3,4,5,2,0,6,3],
[4,4,6,5,2,4,0,4],
[6,6,8,5,5,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,9,7,5,5,6],
[5,0,7,6,8,4,5,5],
[7,3,0,8,10,4,5,4],
[1,4,2,0,5,6,5,2],
[3,2,0,5,0,2,2,1],
[5,6,6,4,8,0,7,6],
[5,5,5,5,8,3,0,6],
[4,5,6,8,9,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,5,6,6,5,3],
[5,0,4,6,5,2,5,4],
[3,6,0,5,3,3,4,3],
[5,4,5,0,6,6,4,2],
[4,5,7,4,0,5,2,3],
[4,8,7,4,5,0,6,5],
[5,5,6,6,8,4,0,4],
[7,6,7,8,7,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,6,4,6,6,4],
[3,0,1,7,3,4,4,3],
[5,9,0,8,7,9,7,6],
[4,3,2,0,3,5,4,3],
[6,7,3,7,0,6,5,6],
[4,6,1,5,4,0,5,3],
[4,6,3,6,5,5,0,5],
[6,7,4,7,4,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,4,3,8,7],
[4,0,6,4,3,3,6,5],
[4,4,0,4,0,1,6,4],
[5,6,6,0,2,1,8,5],
[6,7,10,8,0,5,8,7],
[7,7,9,9,5,0,9,8],
[2,4,4,2,2,1,0,3],
[3,5,6,5,3,2,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,5,5,5,3,6],
[0,0,0,3,0,0,3,0],
[5,10,0,9,7,5,8,4],
[5,7,1,0,7,2,5,1],
[5,10,3,3,0,3,8,4],
[5,10,5,8,7,0,8,1],
[7,7,2,5,2,2,0,3],
[4,10,6,9,6,9,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,4,3,6,6,2],
[4,0,3,3,3,3,4,1],
[6,7,0,5,6,5,6,5],
[6,7,5,0,6,5,6,5],
[7,7,4,4,0,6,6,5],
[4,7,5,5,4,0,8,2],
[4,6,4,4,4,2,0,3],
[8,9,5,5,5,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,6,4,4,4,1],
[6,0,5,7,5,5,6,5],
[5,5,0,4,3,3,4,3],
[4,3,6,0,3,3,2,4],
[6,5,7,7,0,5,4,2],
[6,5,7,7,5,0,4,6],
[6,4,6,8,6,6,0,7],
[9,5,7,6,8,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,9,4,5,8,8,5],
[5,0,8,9,5,8,5,8],
[1,2,0,5,3,5,5,4],
[6,1,5,0,2,6,5,9],
[5,5,7,8,0,7,8,8],
[2,2,5,4,3,0,6,5],
[2,5,5,5,2,4,0,4],
[5,2,6,1,2,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,6,6,6,5,7],
[4,0,5,4,5,7,4,6],
[6,5,0,6,6,6,6,6],
[4,6,4,0,7,6,2,8],
[4,5,4,3,0,5,3,8],
[4,3,4,4,5,0,2,5],
[5,6,4,8,7,8,0,6],
[3,4,4,2,2,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,9,2,3,9,5,6],
[4,0,9,4,4,9,3,9],
[1,1,0,2,2,5,1,6],
[8,6,8,0,5,9,4,5],
[7,6,8,5,0,9,4,6],
[1,1,5,1,1,0,0,4],
[5,7,9,6,6,10,0,6],
[4,1,4,5,4,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,4,5,3,4,3],
[6,0,4,6,3,5,4,5],
[8,6,0,7,7,9,5,7],
[6,4,3,0,4,5,4,4],
[5,7,3,6,0,6,4,4],
[7,5,1,5,4,0,2,5],
[6,6,5,6,6,8,0,6],
[7,5,3,6,6,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,7,5,5,7,6],
[2,0,4,4,2,5,7,4],
[4,6,0,3,4,6,7,6],
[3,6,7,0,8,6,7,6],
[5,8,6,2,0,3,6,5],
[5,5,4,4,7,0,9,5],
[3,3,3,3,4,1,0,6],
[4,6,4,4,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,5,4,5,7,3],
[4,0,5,4,5,5,6,4],
[5,5,0,5,4,4,5,4],
[5,6,5,0,5,4,5,5],
[6,5,6,5,0,4,6,3],
[5,5,6,6,6,0,7,5],
[3,4,5,5,4,3,0,3],
[7,6,6,5,7,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,9,7,7,5,5,9],
[5,0,7,7,5,6,4,8],
[1,3,0,7,6,4,3,7],
[3,3,3,0,1,4,2,4],
[3,5,4,9,0,6,4,7],
[5,4,6,6,4,0,4,6],
[5,6,7,8,6,6,0,8],
[1,2,3,6,3,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,3,5,5,5,3],
[5,0,8,8,8,10,8,8],
[5,2,0,3,5,5,5,0],
[7,2,7,0,7,5,7,0],
[5,2,5,3,0,5,0,0],
[5,0,5,5,5,0,5,0],
[5,2,5,3,10,5,0,0],
[7,2,10,10,10,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,4,2,5,2,5],
[5,0,7,6,6,5,1,5],
[7,3,0,3,7,7,3,7],
[6,4,7,0,5,5,2,6],
[8,4,3,5,0,3,2,5],
[5,5,3,5,7,0,5,7],
[8,9,7,8,8,5,0,8],
[5,5,3,4,5,3,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,7,7,3,7,8],
[6,0,4,6,6,6,8,8],
[5,6,0,4,5,6,5,6],
[3,4,6,0,6,3,5,7],
[3,4,5,4,0,1,6,9],
[7,4,4,7,9,0,9,9],
[3,2,5,5,4,1,0,6],
[2,2,4,3,1,1,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,7,10,8,7,9],
[5,0,5,6,9,7,7,6],
[3,5,0,7,6,7,7,5],
[3,4,3,0,5,4,4,3],
[0,1,4,5,0,4,5,4],
[2,3,3,6,6,0,3,6],
[3,3,3,6,5,7,0,3],
[1,4,5,7,6,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,3,3,4,4,3,6],
[9,0,7,4,9,7,4,8],
[7,3,0,5,5,4,3,6],
[7,6,5,0,5,5,5,6],
[6,1,5,5,0,4,3,7],
[6,3,6,5,6,0,6,8],
[7,6,7,5,7,4,0,7],
[4,2,4,4,3,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,7,6,4,4,6],
[6,0,6,8,8,5,6,7],
[5,4,0,7,4,2,7,6],
[3,2,3,0,1,1,2,3],
[4,2,6,9,0,2,6,6],
[6,5,8,9,8,0,8,6],
[6,4,3,8,4,2,0,7],
[4,3,4,7,4,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,3,6,4,3,3,5],
[9,0,5,7,6,3,5,6],
[7,5,0,5,5,3,3,3],
[4,3,5,0,4,5,5,3],
[6,4,5,6,0,4,1,4],
[7,7,7,5,6,0,5,5],
[7,5,7,5,9,5,0,3],
[5,4,7,7,6,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,4,6,6,4,5],
[3,0,3,5,5,4,4,5],
[7,7,0,5,5,5,5,5],
[6,5,5,0,6,6,6,6],
[4,5,5,4,0,6,7,6],
[4,6,5,4,4,0,5,4],
[6,6,5,4,3,5,0,6],
[5,5,5,4,4,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,7,5,1,3,4],
[5,0,3,4,6,2,4,2],
[4,7,0,7,7,2,2,4],
[3,6,3,0,6,3,2,1],
[5,4,3,4,0,3,3,3],
[9,8,8,7,7,0,6,5],
[7,6,8,8,7,4,0,5],
[6,8,6,9,7,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,3,4,7,5],
[4,0,6,7,6,2,7,9],
[4,4,0,5,5,1,4,6],
[4,3,5,0,7,5,6,6],
[7,4,5,3,0,2,7,5],
[6,8,9,5,8,0,7,7],
[3,3,6,4,3,3,0,6],
[5,1,4,4,5,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,4,6,7,4,7],
[2,0,1,2,4,3,3,2],
[4,9,0,5,6,9,5,7],
[6,8,5,0,3,9,5,6],
[4,6,4,7,0,7,5,6],
[3,7,1,1,3,0,4,3],
[6,7,5,5,5,6,0,7],
[3,8,3,4,4,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,9,4,3,3,7,6],
[4,0,9,5,2,4,7,7],
[1,1,0,3,2,2,0,6],
[6,5,7,0,4,2,6,5],
[7,8,8,6,0,5,7,7],
[7,6,8,8,5,0,8,7],
[3,3,10,4,3,2,0,6],
[4,3,4,5,3,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,5,4,5,4,6],
[7,0,6,7,4,8,6,9],
[7,4,0,5,3,7,5,8],
[5,3,5,0,5,6,4,5],
[6,6,7,5,0,6,7,8],
[5,2,3,4,4,0,4,4],
[6,4,5,6,3,6,0,8],
[4,1,2,5,2,6,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,2,5,0,4,3],
[8,0,8,10,3,5,10,8],
[7,2,0,7,2,4,4,7],
[8,0,3,0,3,2,4,3],
[5,7,8,7,0,5,7,5],
[10,5,6,8,5,0,7,8],
[6,0,6,6,3,3,0,6],
[7,2,3,7,5,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,5,4,2,2],
[6,0,3,1,3,4,2,3],
[6,7,0,2,4,6,4,6],
[6,9,8,0,5,8,6,7],
[5,7,6,5,0,6,4,5],
[6,6,4,2,4,0,5,4],
[8,8,6,4,6,5,0,6],
[8,7,4,3,5,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,1,5,4,1,3,4],
[7,0,5,5,5,4,5,5],
[9,5,0,10,8,6,7,5],
[5,5,0,0,6,1,5,5],
[6,5,2,4,0,3,5,5],
[9,6,4,9,7,0,7,7],
[7,5,3,5,5,3,0,6],
[6,5,5,5,5,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,3,5,4,8,5],
[2,0,2,0,0,1,2,1],
[4,8,0,3,6,5,6,6],
[7,10,7,0,6,7,8,4],
[5,10,4,4,0,5,6,4],
[6,9,5,3,5,0,5,2],
[2,8,4,2,4,5,0,3],
[5,9,4,6,6,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,5,6,3,5,7],
[3,0,4,4,8,6,5,6],
[7,6,0,6,8,6,5,7],
[5,6,4,0,7,3,7,7],
[4,2,2,3,0,2,4,4],
[7,4,4,7,8,0,7,6],
[5,5,5,3,6,3,0,5],
[3,4,3,3,6,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,7,4,7,7,7],
[7,0,10,7,7,7,7,4],
[3,0,0,7,0,7,4,4],
[3,3,3,0,3,3,7,3],
[6,3,10,7,0,7,7,7],
[3,3,3,7,3,0,7,7],
[3,3,6,3,3,3,0,3],
[3,6,6,7,3,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,6,6,6,6,3],
[2,0,3,6,6,0,3,3],
[4,7,0,5,5,4,7,4],
[4,4,5,0,10,2,2,4],
[4,4,5,0,0,2,2,2],
[4,10,6,8,8,0,10,5],
[4,7,3,8,8,0,0,5],
[7,7,6,6,8,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,7,6,9,7,4],
[4,0,8,4,8,8,8,7],
[3,2,0,4,7,9,5,4],
[3,6,6,0,4,8,6,4],
[4,2,3,6,0,7,5,7],
[1,2,1,2,3,0,4,3],
[3,2,5,4,5,6,0,4],
[6,3,6,6,3,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,1,5,4,2,8,9],
[4,0,4,5,5,5,8,9],
[9,6,0,5,5,9,7,9],
[5,5,5,0,5,5,4,5],
[6,5,5,5,0,5,4,5],
[8,5,1,5,5,0,7,8],
[2,2,3,6,6,3,0,2],
[1,1,1,5,5,2,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,10,4,9,10,10],
[5,0,4,10,5,9,10,10],
[6,6,0,6,6,5,6,6],
[0,0,4,0,4,4,4,5],
[6,5,4,6,0,9,10,10],
[1,1,5,6,1,0,5,10],
[0,0,4,6,0,5,0,6],
[0,0,4,5,0,0,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,9,7,7,9,9,5],
[1,0,4,4,1,3,6,2],
[1,6,0,5,1,5,6,2],
[3,6,5,0,6,6,6,3],
[3,9,9,4,0,5,7,4],
[1,7,5,4,5,0,4,6],
[1,4,4,4,3,6,0,3],
[5,8,8,7,6,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,5,4,2,7,4],
[7,0,7,7,8,5,5,5],
[5,3,0,8,4,5,6,6],
[5,3,2,0,3,2,4,4],
[6,2,6,7,0,3,4,3],
[8,5,5,8,7,0,7,7],
[3,5,4,6,6,3,0,3],
[6,5,4,6,7,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,6,4,7,6,4],
[2,0,4,4,3,3,5,3],
[3,6,0,3,4,2,4,2],
[4,6,7,0,5,4,4,4],
[6,7,6,5,0,7,6,6],
[3,7,8,6,3,0,5,7],
[4,5,6,6,4,5,0,5],
[6,7,8,6,4,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,5,7,5,3,7],
[3,0,5,5,5,6,3,5],
[5,5,0,4,5,4,4,4],
[5,5,6,0,6,4,4,4],
[3,5,5,4,0,6,3,6],
[5,4,6,6,4,0,5,5],
[7,7,6,6,7,5,0,6],
[3,5,6,6,4,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,4,5,5,4,3],
[5,0,7,8,6,6,6,6],
[5,3,0,5,4,4,4,3],
[6,2,5,0,4,6,7,4],
[5,4,6,6,0,5,6,4],
[5,4,6,4,5,0,7,3],
[6,4,6,3,4,3,0,3],
[7,4,7,6,6,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,8,4,6,5,5,4],
[6,0,7,2,6,7,3,4],
[2,3,0,1,2,3,1,4],
[6,8,9,0,8,5,6,7],
[4,4,8,2,0,4,4,8],
[5,3,7,5,6,0,4,5],
[5,7,9,4,6,6,0,4],
[6,6,6,3,2,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,2,2,4,3,1],
[8,0,4,3,7,8,3,1],
[7,6,0,3,6,9,3,3],
[8,7,7,0,5,10,7,5],
[8,3,4,5,0,6,4,1],
[6,2,1,0,4,0,2,0],
[7,7,7,3,6,8,0,3],
[9,9,7,5,9,10,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,9,5,3,5,4,2],
[3,0,5,6,5,5,4,2],
[1,5,0,3,4,5,5,3],
[5,4,7,0,4,8,3,2],
[7,5,6,6,0,6,7,4],
[5,5,5,2,4,0,5,2],
[6,6,5,7,3,5,0,5],
[8,8,7,8,6,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,6,2,2,5,6],
[5,0,6,5,4,3,5,5],
[2,4,0,7,3,4,5,5],
[4,5,3,0,4,5,5,4],
[8,6,7,6,0,5,6,6],
[8,7,6,5,5,0,7,6],
[5,5,5,5,4,3,0,4],
[4,5,5,6,4,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,1,3,1,3,4,2],
[7,0,5,4,6,5,5,7],
[9,5,0,5,5,5,5,6],
[7,6,5,0,4,5,4,5],
[9,4,5,6,0,6,5,7],
[7,5,5,5,4,0,7,4],
[6,5,5,6,5,3,0,5],
[8,3,4,5,3,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,2,4,2,2,4],
[5,0,4,1,3,3,3,3],
[6,6,0,4,8,3,3,4],
[8,9,6,0,6,5,5,7],
[6,7,2,4,0,4,1,4],
[8,7,7,5,6,0,6,6],
[8,7,7,5,9,4,0,7],
[6,7,6,3,6,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,2,10,7,4,5,9],
[0,0,0,9,7,3,4,7],
[8,10,0,10,8,8,5,10],
[0,1,0,0,7,3,4,3],
[3,3,2,3,0,3,7,2],
[6,7,2,7,7,0,6,9],
[5,6,5,6,3,4,0,5],
[1,3,0,7,8,1,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,6,4,8,6,5],
[2,0,4,2,2,7,4,2],
[3,6,0,6,4,8,8,1],
[4,8,4,0,5,9,6,2],
[6,8,6,5,0,9,8,4],
[2,3,2,1,1,0,0,1],
[4,6,2,4,2,10,0,1],
[5,8,9,8,6,9,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,4,5,5,5,6],
[6,0,5,7,4,6,6,6],
[7,5,0,7,8,7,8,6],
[6,3,3,0,4,6,5,5],
[5,6,2,6,0,4,6,3],
[5,4,3,4,6,0,5,4],
[5,4,2,5,4,5,0,5],
[4,4,4,5,7,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,9,10,5,10,10,5],
[0,0,9,9,5,7,2,5],
[1,1,0,9,5,7,2,5],
[0,1,1,0,5,2,2,2],
[5,5,5,5,0,6,7,7],
[0,3,3,8,4,0,4,4],
[0,8,8,8,3,6,0,4],
[5,5,5,8,3,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,8,5,8,8,6],
[5,0,7,8,8,9,8,5],
[2,3,0,8,6,5,5,3],
[2,2,2,0,6,4,4,4],
[5,2,4,4,0,7,4,2],
[2,1,5,6,3,0,6,2],
[2,2,5,6,6,4,0,0],
[4,5,7,6,8,8,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,3,3,2,2,2],
[6,0,4,3,8,3,3,2],
[8,6,0,4,6,5,3,3],
[7,7,6,0,7,5,5,7],
[7,2,4,3,0,3,4,2],
[8,7,5,5,7,0,3,4],
[8,7,7,5,6,7,0,5],
[8,8,7,3,8,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,4,8,3,4],
[5,0,3,2,3,7,3,1],
[6,7,0,5,5,5,4,7],
[5,8,5,0,7,8,4,6],
[6,7,5,3,0,8,7,3],
[2,3,5,2,2,0,1,2],
[7,7,6,6,3,9,0,4],
[6,9,3,4,7,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,5,6,2,4,4],
[7,0,5,8,10,5,3,4],
[5,5,0,5,5,4,6,5],
[5,2,5,0,7,3,3,3],
[4,0,5,3,0,3,3,4],
[8,5,6,7,7,0,6,5],
[6,7,4,7,7,4,0,5],
[6,6,5,7,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,2,3,4,5,5],
[6,0,5,5,4,8,6,9],
[8,5,0,2,3,5,5,7],
[8,5,8,0,7,7,8,9],
[7,6,7,3,0,7,5,9],
[6,2,5,3,3,0,5,8],
[5,4,5,2,5,5,0,7],
[5,1,3,1,1,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,7,6,5,5,6],
[4,0,9,7,5,5,6,2],
[4,1,0,5,4,4,3,2],
[3,3,5,0,5,3,3,2],
[4,5,6,5,0,6,5,5],
[5,5,6,7,4,0,3,3],
[5,4,7,7,5,7,0,4],
[4,8,8,8,5,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,7,7,7,5],
[4,0,7,6,8,6,4,7],
[4,3,0,4,7,4,4,6],
[5,4,6,0,6,6,7,5],
[3,2,3,4,0,3,3,4],
[3,4,6,4,7,0,5,6],
[3,6,6,3,7,5,0,6],
[5,3,4,5,6,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,7,4,6,7,3],
[5,0,4,5,6,3,3,3],
[6,6,0,6,6,5,6,4],
[3,5,4,0,3,3,5,3],
[6,4,4,7,0,6,4,4],
[4,7,5,7,4,0,7,5],
[3,7,4,5,6,3,0,1],
[7,7,6,7,6,5,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,6,5,4,5,5,4],
[8,0,7,4,7,6,6,7],
[4,3,0,5,2,2,3,3],
[5,6,5,0,6,4,4,4],
[6,3,8,4,0,4,4,8],
[5,4,8,6,6,0,4,6],
[5,4,7,6,6,6,0,5],
[6,3,7,6,2,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,4,7,7,4],
[6,0,6,8,5,6,10,5],
[6,4,0,2,4,8,7,2],
[6,2,8,0,5,8,5,0],
[6,5,6,5,0,6,5,5],
[3,4,2,2,4,0,4,2],
[3,0,3,5,5,6,0,2],
[6,5,8,10,5,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,2,3,4,4],
[4,0,5,2,4,4,6,2],
[4,5,0,4,3,3,6,2],
[5,8,6,0,4,7,7,4],
[8,6,7,6,0,4,6,5],
[7,6,7,3,6,0,7,3],
[6,4,4,3,4,3,0,4],
[6,8,8,6,5,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,5,6,7,6],
[5,0,7,6,5,6,7,5],
[4,3,0,6,4,5,5,4],
[4,4,4,0,4,2,3,2],
[5,5,6,6,0,6,6,4],
[4,4,5,8,4,0,5,4],
[3,3,5,7,4,5,0,4],
[4,5,6,8,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,2,6,6,4,6],
[4,0,4,6,6,0,0,2],
[6,6,0,2,6,6,6,6],
[8,4,8,0,10,4,4,6],
[4,4,4,0,0,4,4,6],
[4,10,4,6,6,0,4,6],
[6,10,4,6,6,6,0,6],
[4,8,4,4,4,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,6,3,5,6,6],
[2,0,7,5,3,5,6,7],
[5,3,0,4,5,4,7,5],
[4,5,6,0,6,5,6,7],
[7,7,5,4,0,4,7,5],
[5,5,6,5,6,0,5,5],
[4,4,3,4,3,5,0,4],
[4,3,5,3,5,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,7,8,8,6,6],
[4,0,5,5,6,8,6,5],
[5,5,0,4,5,4,3,6],
[3,5,6,0,6,5,5,4],
[2,4,5,4,0,5,5,5],
[2,2,6,5,5,0,5,3],
[4,4,7,5,5,5,0,3],
[4,5,4,6,5,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,7,7,7,2,10,7],
[8,0,5,5,7,3,10,7],
[3,5,0,5,5,5,5,2],
[3,5,5,0,10,3,10,7],
[3,3,5,0,0,3,3,5],
[8,7,5,7,7,0,10,7],
[0,0,5,0,7,0,0,7],
[3,3,8,3,5,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,5,5,0,5],
[10,0,10,5,10,10,5,5],
[10,0,0,5,10,5,5,5],
[10,5,5,0,5,5,5,5],
[5,0,0,5,0,0,0,0],
[5,0,5,5,10,0,0,5],
[10,5,5,5,10,10,0,10],
[5,5,5,5,10,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,7,7,6,4,6],
[4,0,5,7,7,6,4,5],
[6,5,0,9,8,7,7,8],
[3,3,1,0,5,4,4,3],
[3,3,2,5,0,6,3,4],
[4,4,3,6,4,0,4,3],
[6,6,3,6,7,6,0,3],
[4,5,2,7,6,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,7,8,5,5,4],
[4,0,4,7,2,6,4,4],
[3,6,0,3,4,3,0,3],
[3,3,7,0,5,5,4,4],
[2,8,6,5,0,5,5,5],
[5,4,7,5,5,0,2,4],
[5,6,10,6,5,8,0,3],
[6,6,7,6,5,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,2,8,0,0,0,3],
[10,0,5,10,8,10,5,5],
[8,5,0,8,5,5,8,8],
[2,0,2,0,0,0,2,2],
[10,2,5,10,0,10,5,5],
[10,0,5,10,0,0,5,5],
[10,5,2,8,5,5,0,8],
[7,5,2,8,5,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,3,6,5,6,5],
[4,0,3,5,5,6,6,5],
[7,7,0,4,5,6,7,5],
[7,5,6,0,4,4,7,5],
[4,5,5,6,0,6,5,2],
[5,4,4,6,4,0,6,3],
[4,4,3,3,5,4,0,4],
[5,5,5,5,8,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,4,3,4,4,4],
[4,0,3,4,3,4,3,3],
[7,7,0,8,7,7,5,10],
[6,6,2,0,6,6,4,9],
[7,7,3,4,0,6,4,4],
[6,6,3,4,4,0,0,7],
[6,7,5,6,6,10,0,9],
[6,7,0,1,6,3,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,3,6,7,6,6,7],
[1,0,3,3,3,3,1,3],
[7,7,0,4,7,4,4,9],
[4,7,6,0,5,4,1,7],
[3,7,3,5,0,4,4,4],
[4,7,6,6,6,0,4,7],
[4,9,6,9,6,6,0,7],
[3,7,1,3,6,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,4,4,4,3,6],
[6,0,6,5,6,8,5,6],
[7,4,0,3,5,4,5,7],
[6,5,7,0,6,7,6,7],
[6,4,5,4,0,4,7,8],
[6,2,6,3,6,0,3,5],
[7,5,5,4,3,7,0,7],
[4,4,3,3,2,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,5,5,5,8,4],
[5,0,7,6,6,7,9,5],
[4,3,0,2,2,4,6,4],
[5,4,8,0,8,7,8,2],
[5,4,8,2,0,5,7,2],
[5,3,6,3,5,0,7,2],
[2,1,4,2,3,3,0,4],
[6,5,6,8,8,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,3,6,3,5,3],
[8,0,7,5,8,5,3,5],
[7,3,0,5,8,8,4,7],
[7,5,5,0,9,7,5,5],
[4,2,2,1,0,7,4,2],
[7,5,2,3,3,0,2,3],
[5,7,6,5,6,8,0,5],
[7,5,3,5,8,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,4,4,7,4],
[5,0,3,4,3,3,5,3],
[6,7,0,4,5,5,6,6],
[5,6,6,0,5,6,7,5],
[6,7,5,5,0,5,6,4],
[6,7,5,4,5,0,6,4],
[3,5,4,3,4,4,0,3],
[6,7,4,5,6,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,7,3,5,4,4,7],
[8,0,7,3,7,4,5,7],
[3,3,0,2,2,4,2,1],
[7,7,8,0,7,5,5,9],
[5,3,8,3,0,6,4,6],
[6,6,6,5,4,0,5,5],
[6,5,8,5,6,5,0,8],
[3,3,9,1,4,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,2,3,2,3,4],
[4,0,3,2,2,2,3,2],
[6,7,0,3,4,7,6,5],
[8,8,7,0,7,7,9,5],
[7,8,6,3,0,7,7,8],
[8,8,3,3,3,0,6,5],
[7,7,4,1,3,4,0,4],
[6,8,5,5,2,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,7,7,4,7,6],
[4,0,4,5,7,5,5,5],
[5,6,0,5,7,4,7,6],
[3,5,5,0,6,6,6,5],
[3,3,3,4,0,3,5,3],
[6,5,6,4,7,0,8,5],
[3,5,3,4,5,2,0,3],
[4,5,4,5,7,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,7,9,8,4,5,5],
[1,0,4,7,5,2,3,4],
[3,6,0,8,7,4,4,4],
[1,3,2,0,3,1,2,2],
[2,5,3,7,0,2,3,3],
[6,8,6,9,8,0,5,6],
[5,7,6,8,7,5,0,6],
[5,6,6,8,7,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,6,5,7,7,6],
[5,0,4,7,7,5,6,2],
[6,6,0,8,9,7,7,4],
[4,3,2,0,5,5,6,5],
[5,3,1,5,0,6,7,3],
[3,5,3,5,4,0,6,3],
[3,4,3,4,3,4,0,3],
[4,8,6,5,7,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,2,2,1,4,4,2],
[8,0,2,5,8,7,5,5],
[8,8,0,9,6,7,3,6],
[8,5,1,0,7,6,3,4],
[9,2,4,3,0,4,4,7],
[6,3,3,4,6,0,4,6],
[6,5,7,7,6,6,0,7],
[8,5,4,6,3,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,8,6,6,5,5],
[5,0,5,8,8,3,7,2],
[5,5,0,5,5,5,7,2],
[2,2,5,0,0,0,4,2],
[4,2,5,10,0,3,4,4],
[4,7,5,10,7,0,4,4],
[5,3,3,6,6,6,0,5],
[5,8,8,8,6,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,9,6,5,6,7,5],
[5,0,8,7,6,6,8,8],
[1,2,0,3,5,5,5,3],
[4,3,7,0,5,7,7,5],
[5,4,5,5,0,5,5,6],
[4,4,5,3,5,0,5,4],
[3,2,5,3,5,5,0,5],
[5,2,7,5,4,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,6,3,5,5,5],
[7,0,7,7,8,8,8,5],
[4,3,0,4,3,4,4,3],
[4,3,6,0,4,3,4,4],
[7,2,7,6,0,4,7,2],
[5,2,6,7,6,0,6,4],
[5,2,6,6,3,4,0,5],
[5,5,7,6,8,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,5,2,4,4],
[6,0,2,6,5,2,4,4],
[6,8,0,4,6,7,3,4],
[6,4,6,0,3,6,2,3],
[5,5,4,7,0,4,1,3],
[8,8,3,4,6,0,5,4],
[6,6,7,8,9,5,0,7],
[6,6,6,7,7,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,2,4,8,4,5],
[2,0,7,2,4,4,5,2],
[4,3,0,4,2,3,4,2],
[8,8,6,0,4,8,8,5],
[6,6,8,6,0,5,7,4],
[2,6,7,2,5,0,6,3],
[6,5,6,2,3,4,0,4],
[5,8,8,5,6,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,0,8,0,0,0,5],
[5,0,2,10,5,2,5,10],
[10,8,0,10,5,5,8,10],
[2,0,0,0,0,2,0,2],
[10,5,5,10,0,7,5,7],
[10,8,5,8,3,0,8,8],
[10,5,2,10,5,2,0,10],
[5,0,0,8,3,2,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,6,9,7,6,6],
[5,0,3,7,6,8,5,5],
[5,7,0,8,8,8,6,7],
[4,3,2,0,8,8,4,6],
[1,4,2,2,0,4,1,2],
[3,2,2,2,6,0,2,2],
[4,5,4,6,9,8,0,3],
[4,5,3,4,8,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,5,5,6,5,3],
[6,0,1,6,5,2,3,5],
[8,9,0,6,5,4,7,5],
[5,4,4,0,7,4,4,5],
[5,5,5,3,0,6,6,5],
[4,8,6,6,4,0,6,5],
[5,7,3,6,4,4,0,3],
[7,5,5,5,5,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,1,5,5,1,5,2],
[4,0,4,8,5,4,8,4],
[9,6,0,9,6,2,10,6],
[5,2,1,0,1,1,1,2],
[5,5,4,9,0,5,4,5],
[9,6,8,9,5,0,8,6],
[5,2,0,9,6,2,0,3],
[8,6,4,8,5,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,4,5,4,4,8],
[6,0,3,4,3,2,3,6],
[4,7,0,4,6,6,6,5],
[6,6,6,0,6,4,4,8],
[5,7,4,4,0,6,7,6],
[6,8,4,6,4,0,5,6],
[6,7,4,6,3,5,0,6],
[2,4,5,2,4,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,2,4,6,2,2,2],
[8,0,6,5,6,5,5,7],
[8,4,0,6,6,5,2,7],
[6,5,4,0,4,3,3,5],
[4,4,4,6,0,3,3,4],
[8,5,5,7,7,0,3,8],
[8,5,8,7,7,7,0,9],
[8,3,3,5,6,2,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,5,3,4,2],
[5,0,4,6,6,5,3,4],
[6,6,0,6,7,4,6,6],
[5,4,4,0,5,4,5,4],
[5,4,3,5,0,4,5,4],
[7,5,6,6,6,0,5,6],
[6,7,4,5,5,5,0,4],
[8,6,4,6,6,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,0,5,3,3,6,8],
[4,0,0,5,3,2,6,8],
[10,10,0,8,5,7,6,10],
[5,5,2,0,5,2,8,10],
[7,7,5,5,0,4,5,10],
[7,8,3,8,6,0,6,10],
[4,4,4,2,5,4,0,7],
[2,2,0,0,0,0,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,4,4,6,6,4],
[2,0,6,4,0,2,4,2],
[4,4,0,2,2,2,4,4],
[6,6,8,0,6,4,6,6],
[6,10,8,4,0,6,6,4],
[4,8,8,6,4,0,6,6],
[4,6,6,4,4,4,0,6],
[6,8,6,4,6,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,2,3,1,3,2,8],
[8,0,3,3,3,8,3,8],
[8,7,0,3,6,8,2,6],
[7,7,7,0,5,5,7,5],
[9,7,4,5,0,7,4,10],
[7,2,2,5,3,0,4,8],
[8,7,8,3,6,6,0,6],
[2,2,4,5,0,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,4,4,7,8,5],
[4,0,6,5,1,6,6,4],
[3,4,0,3,0,4,3,4],
[6,5,7,0,2,6,8,4],
[6,9,10,8,0,7,8,5],
[3,4,6,4,3,0,4,5],
[2,4,7,2,2,6,0,4],
[5,6,6,6,5,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,10,10,10,10,5],
[0,0,0,9,0,9,10,1],
[5,10,0,10,9,9,10,5],
[0,1,0,0,0,9,6,1],
[0,10,1,10,0,9,10,1],
[0,1,1,1,1,0,6,1],
[0,0,0,4,0,4,0,0],
[5,9,5,9,9,9,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,7,5,4,4,6],
[4,0,6,4,5,1,4,5],
[2,4,0,4,6,3,4,3],
[3,6,6,0,6,4,4,3],
[5,5,4,4,0,5,7,3],
[6,9,7,6,5,0,5,6],
[6,6,6,6,3,5,0,3],
[4,5,7,7,7,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,10,5,5,7,2,5],
[7,0,10,7,5,7,7,7],
[0,0,0,0,0,3,2,2],
[5,3,10,0,5,5,5,8],
[5,5,10,5,0,10,7,7],
[3,3,7,5,0,0,2,5],
[8,3,8,5,3,8,0,5],
[5,3,8,2,3,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,6,4,6,5,3],
[6,0,4,3,6,8,7,5],
[6,6,0,5,6,8,7,5],
[4,7,5,0,7,9,5,5],
[6,4,4,3,0,7,6,4],
[4,2,2,1,3,0,2,1],
[5,3,3,5,4,8,0,3],
[7,5,5,5,6,9,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,7,7,5,6,4],
[4,0,7,5,7,4,5,6],
[5,3,0,6,6,2,7,6],
[3,5,4,0,4,4,3,3],
[3,3,4,6,0,2,6,4],
[5,6,8,6,8,0,6,8],
[4,5,3,7,4,4,0,4],
[6,4,4,7,6,2,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,4,6,8,5,7],
[4,0,9,5,6,8,5,7],
[4,1,0,3,3,6,5,6],
[6,5,7,0,7,7,6,8],
[4,4,7,3,0,7,7,6],
[2,2,4,3,3,0,4,4],
[5,5,5,4,3,6,0,6],
[3,3,4,2,4,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,7,3,7,8,7],
[5,0,0,3,3,3,3,2],
[7,10,0,7,5,8,7,7],
[3,7,3,0,3,5,7,7],
[7,7,5,7,0,7,10,7],
[3,7,2,5,3,0,5,4],
[2,7,3,3,0,5,0,4],
[3,8,3,3,3,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,6,8,6,8,3],
[2,0,2,0,2,2,2,2],
[2,8,0,8,10,6,10,3],
[4,10,2,0,8,8,8,3],
[2,8,0,2,0,5,4,2],
[4,8,4,2,5,0,5,5],
[2,8,0,2,6,5,0,2],
[7,8,7,7,8,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,5,5,3,3,2],
[7,0,8,6,7,7,7,5],
[7,2,0,5,5,3,5,3],
[5,4,5,0,3,4,4,4],
[5,3,5,7,0,4,5,2],
[7,3,7,6,6,0,4,3],
[7,3,5,6,5,6,0,5],
[8,5,7,6,8,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,2,1,3,8,6,9],
[8,0,3,3,6,8,6,8],
[8,7,0,3,6,6,6,10],
[9,7,7,0,5,7,7,9],
[7,4,4,5,0,8,7,9],
[2,2,4,3,2,0,4,9],
[4,4,4,3,3,6,0,9],
[1,2,0,1,1,1,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,2,2,4,3,1,1],
[7,0,8,7,8,7,5,5],
[8,2,0,3,5,2,4,2],
[8,3,7,0,4,5,2,4],
[6,2,5,6,0,5,4,3],
[7,3,8,5,5,0,4,8],
[9,5,6,8,6,6,0,6],
[9,5,8,6,7,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,3,7,3,4,3],
[7,0,8,7,7,8,5,7],
[3,2,0,5,5,2,1,4],
[7,3,5,0,7,3,3,6],
[3,3,5,3,0,3,4,4],
[7,2,8,7,7,0,5,7],
[6,5,9,7,6,5,0,5],
[7,3,6,4,6,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,5,6,7,7,4],
[4,0,1,3,2,5,5,2],
[6,9,0,7,6,9,9,4],
[5,7,3,0,6,7,5,5],
[4,8,4,4,0,7,5,1],
[3,5,1,3,3,0,2,3],
[3,5,1,5,5,8,0,5],
[6,8,6,5,9,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,5,0,0,0],
[10,0,5,8,5,2,8,3],
[10,5,0,5,5,5,3,3],
[10,2,5,0,5,2,3,3],
[5,5,5,5,0,5,5,5],
[10,8,5,8,5,0,8,8],
[10,2,7,7,5,2,0,5],
[10,7,7,7,5,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,4,3,4,2,4],
[7,0,6,4,6,8,4,7],
[5,4,0,6,3,7,4,4],
[6,6,4,0,5,7,5,6],
[7,4,7,5,0,6,4,7],
[6,2,3,3,4,0,2,5],
[8,6,6,5,6,8,0,9],
[6,3,6,4,3,5,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,6,4,5,6,5],
[6,0,5,7,4,4,6,6],
[6,5,0,7,3,4,4,6],
[4,3,3,0,2,2,5,5],
[6,6,7,8,0,5,7,5],
[5,6,6,8,5,0,7,4],
[4,4,6,5,3,3,0,6],
[5,4,4,5,5,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,7,8,5,6,4],
[4,0,3,6,8,4,3,4],
[4,7,0,6,8,5,5,6],
[3,4,4,0,4,3,1,4],
[2,2,2,6,0,4,2,3],
[5,6,5,7,6,0,8,4],
[4,7,5,9,8,2,0,3],
[6,6,4,6,7,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,8,7,7,7],
[6,0,8,5,8,6,7,9],
[6,2,0,2,6,7,5,7],
[6,5,8,0,10,6,5,7],
[2,2,4,0,0,5,1,6],
[3,4,3,4,5,0,5,7],
[3,3,5,5,9,5,0,8],
[3,1,3,3,4,3,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,7,5,5,7,3],
[3,0,3,3,7,3,5,3],
[7,7,0,5,7,7,5,6],
[3,7,5,0,6,7,7,5],
[5,3,3,4,0,3,5,2],
[5,7,3,3,7,0,6,4],
[3,5,5,3,5,4,0,3],
[7,7,4,5,8,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,6,6,4,3,6],
[7,0,5,5,8,4,4,8],
[6,5,0,7,6,4,5,5],
[4,5,3,0,3,1,4,4],
[4,2,4,7,0,2,3,2],
[6,6,6,9,8,0,4,8],
[7,6,5,6,7,6,0,5],
[4,2,5,6,8,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,3,5,7,5,6],
[4,0,4,2,5,6,6,3],
[7,6,0,2,6,9,5,5],
[7,8,8,0,6,9,8,5],
[5,5,4,4,0,5,5,3],
[3,4,1,1,5,0,1,2],
[5,4,5,2,5,9,0,5],
[4,7,5,5,7,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,6,3,6,6,7],
[3,0,3,6,3,5,7,6],
[4,7,0,7,6,6,8,8],
[4,4,3,0,6,5,5,5],
[7,7,4,4,0,5,6,5],
[4,5,4,5,5,0,6,6],
[4,3,2,5,4,4,0,8],
[3,4,2,5,5,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,7,7,5,4,5],
[4,0,6,4,6,5,4,4],
[6,4,0,5,7,5,4,5],
[3,6,5,0,5,6,6,5],
[3,4,3,5,0,5,4,5],
[5,5,5,4,5,0,3,5],
[6,6,6,4,6,7,0,5],
[5,6,5,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,7,6,4,8,10],
[3,0,5,7,3,3,6,7],
[4,5,0,7,4,5,8,5],
[3,3,3,0,5,4,3,3],
[4,7,6,5,0,8,8,8],
[6,7,5,6,2,0,9,6],
[2,4,2,7,2,1,0,6],
[0,3,5,7,2,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,4,8,0,6,4],
[5,0,5,5,5,5,5,5],
[6,5,0,7,8,0,6,7],
[6,5,3,0,6,3,6,5],
[2,5,2,4,0,2,5,4],
[10,5,10,7,8,0,8,7],
[4,5,4,4,5,2,0,4],
[6,5,3,5,6,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,3,5,1,3,6,2],
[9,0,6,6,7,5,5,6],
[7,4,0,5,5,3,6,6],
[5,4,5,0,5,5,5,5],
[9,3,5,5,0,5,6,6],
[7,5,7,5,5,0,6,5],
[4,5,4,5,4,4,0,3],
[8,4,4,5,4,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,3,3,3,5,3],
[7,0,5,2,4,6,9,7],
[6,5,0,5,5,6,7,7],
[7,8,5,0,5,8,9,8],
[7,6,5,5,0,5,9,8],
[7,4,4,2,5,0,7,7],
[5,1,3,1,1,3,0,2],
[7,3,3,2,2,3,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,2,1,1,1,2,4],
[9,0,7,6,8,5,9,9],
[8,3,0,5,7,6,6,8],
[9,4,5,0,3,5,7,6],
[9,2,3,7,0,3,4,6],
[9,5,4,5,7,0,7,9],
[8,1,4,3,6,3,0,9],
[6,1,2,4,4,1,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,5,4,3,8,7],
[7,0,6,6,5,4,7,7],
[6,4,0,3,7,5,5,7],
[5,4,7,0,6,6,6,5],
[6,5,3,4,0,5,5,4],
[7,6,5,4,5,0,6,6],
[2,3,5,4,5,4,0,7],
[3,3,3,5,6,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,2,2,3,4,1],
[6,0,5,5,2,4,5,3],
[8,5,0,4,3,5,5,3],
[8,5,6,0,5,4,4,4],
[8,8,7,5,0,6,7,5],
[7,6,5,6,4,0,7,4],
[6,5,5,6,3,3,0,4],
[9,7,7,6,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,7,4,4,4,7],
[6,0,3,8,7,5,5,5],
[8,7,0,10,7,5,4,5],
[3,2,0,0,4,2,2,5],
[6,3,3,6,0,5,5,3],
[6,5,5,8,5,0,5,5],
[6,5,6,8,5,5,0,5],
[3,5,5,5,7,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,6,5,5,4,5],
[3,0,8,4,7,4,6,5],
[4,2,0,4,3,5,3,5],
[4,6,6,0,6,6,5,6],
[5,3,7,4,0,4,6,4],
[5,6,5,4,6,0,5,6],
[6,4,7,5,4,5,0,4],
[5,5,5,4,6,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,5,5,5,7,8],
[2,0,6,6,4,4,4,7],
[3,4,0,3,6,3,4,4],
[5,4,7,0,4,6,4,8],
[5,6,4,6,0,4,6,6],
[5,6,7,4,6,0,6,6],
[3,6,6,6,4,4,0,8],
[2,3,6,2,4,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,4,5,6,6],
[5,0,4,4,3,4,8,4],
[4,6,0,6,3,5,6,3],
[4,6,4,0,3,4,6,3],
[6,7,7,7,0,5,9,6],
[5,6,5,6,5,0,7,3],
[4,2,4,4,1,3,0,1],
[4,6,7,7,4,7,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,6,5,4,6,4],
[7,0,7,6,5,7,8,8],
[7,3,0,6,7,6,8,6],
[4,4,4,0,5,5,7,5],
[5,5,3,5,0,4,4,4],
[6,3,4,5,6,0,6,3],
[4,2,2,3,6,4,0,4],
[6,2,4,5,6,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,4,4,4,4,9],
[5,0,4,4,6,6,4,9],
[6,6,0,4,7,7,7,9],
[6,6,6,0,7,7,3,6],
[6,4,3,3,0,1,0,5],
[6,4,3,3,9,0,3,5],
[6,6,3,7,10,7,0,5],
[1,1,1,4,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,3,4,5,1,6],
[8,0,6,5,6,6,5,6],
[5,4,0,4,3,5,3,6],
[7,5,6,0,5,6,5,7],
[6,4,7,5,0,5,4,5],
[5,4,5,4,5,0,5,7],
[9,5,7,5,6,5,0,8],
[4,4,4,3,5,3,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,3,4,4,4,5],
[5,0,5,5,5,5,6,5],
[5,5,0,5,3,6,7,4],
[7,5,5,0,5,5,6,5],
[6,5,7,5,0,5,5,5],
[6,5,4,5,5,0,5,5],
[6,4,3,4,5,5,0,5],
[5,5,6,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,0,2,7,5,2,3],
[4,0,0,3,7,5,4,4],
[10,10,0,5,7,5,6,4],
[8,7,5,0,8,5,3,8],
[3,3,3,2,0,2,3,4],
[5,5,5,5,8,0,1,8],
[8,6,4,7,7,9,0,7],
[7,6,6,2,6,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,3,7,5,4,4],
[6,0,4,5,6,4,3,4],
[8,6,0,5,9,8,8,2],
[7,5,5,0,10,7,7,5],
[3,4,1,0,0,0,4,0],
[5,6,2,3,10,0,5,3],
[6,7,2,3,6,5,0,4],
[6,6,8,5,10,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,6,5,6,5,2],
[6,0,2,5,5,5,5,2],
[8,8,0,6,7,6,5,6],
[4,5,4,0,4,3,3,3],
[5,5,3,6,0,5,5,2],
[4,5,4,7,5,0,6,3],
[5,5,5,7,5,4,0,5],
[8,8,4,7,8,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,5,7,8,5,7],
[3,0,3,8,3,4,4,10],
[3,7,0,8,8,7,8,7],
[5,2,2,0,3,5,6,5],
[3,7,2,7,0,7,8,7],
[2,6,3,5,3,0,5,7],
[5,6,2,4,2,5,0,6],
[3,0,3,5,3,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,5,5,4,5],
[5,0,8,5,4,6,5,6],
[4,2,0,1,2,2,4,3],
[4,5,9,0,4,5,5,5],
[5,6,8,6,0,7,6,4],
[5,4,8,5,3,0,6,4],
[6,5,6,5,4,4,0,4],
[5,4,7,5,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,8,4,4,7,5,4],
[6,0,6,4,3,8,3,4],
[2,4,0,5,4,6,4,3],
[6,6,5,0,6,9,7,5],
[6,7,6,4,0,7,5,6],
[3,2,4,1,3,0,3,2],
[5,7,6,3,5,7,0,6],
[6,6,7,5,4,8,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,5,6,6,7,6],
[4,0,5,3,4,5,6,6],
[5,5,0,3,4,6,7,6],
[5,7,7,0,7,7,7,9],
[4,6,6,3,0,7,7,9],
[4,5,4,3,3,0,7,7],
[3,4,3,3,3,3,0,4],
[4,4,4,1,1,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,5,3,6,4,3],
[8,0,6,8,4,6,4,3],
[7,4,0,5,1,4,4,5],
[5,2,5,0,2,6,5,2],
[7,6,9,8,0,6,3,6],
[4,4,6,4,4,0,4,6],
[6,6,6,5,7,6,0,6],
[7,7,5,8,4,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,6,6,6,4,4],
[4,0,4,6,6,5,4,3],
[7,6,0,8,8,9,5,5],
[4,4,2,0,4,7,5,3],
[4,4,2,6,0,5,3,2],
[4,5,1,3,5,0,5,3],
[6,6,5,5,7,5,0,5],
[6,7,5,7,8,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,3,2,3,0,3],
[7,0,8,8,5,6,7,8],
[5,2,0,4,2,6,5,4],
[7,2,6,0,4,8,7,8],
[8,5,8,6,0,8,8,8],
[7,4,4,2,2,0,4,2],
[10,3,5,3,2,6,0,5],
[7,2,6,2,2,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,6,2,4,2,4],
[6,0,6,6,6,6,2,6],
[4,4,0,4,6,4,0,4],
[4,4,6,0,2,4,2,4],
[8,4,4,8,0,8,4,4],
[6,4,6,6,2,0,6,6],
[8,8,10,8,6,4,0,8],
[6,4,6,6,6,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,10,10,10,10],
[5,0,5,0,5,5,5,5],
[5,5,0,5,10,10,10,10],
[5,10,5,0,10,10,10,10],
[0,5,0,0,0,5,5,5],
[0,5,0,0,5,0,0,10],
[0,5,0,0,5,10,0,10],
[0,5,0,0,5,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,5,5,5,4,4],
[4,0,4,2,6,7,2,6],
[6,6,0,6,7,9,5,6],
[5,8,4,0,7,9,5,7],
[5,4,3,3,0,8,3,5],
[5,3,1,1,2,0,2,3],
[6,8,5,5,7,8,0,7],
[6,4,4,3,5,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,6,3,5,6,5],
[4,0,6,8,6,5,5,3],
[7,4,0,6,5,5,5,4],
[4,2,4,0,5,5,3,4],
[7,4,5,5,0,2,4,4],
[5,5,5,5,8,0,5,7],
[4,5,5,7,6,5,0,5],
[5,7,6,6,6,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,8,8,8,6,7],
[3,0,5,5,6,4,2,3],
[5,5,0,6,8,5,5,6],
[2,5,4,0,7,7,5,5],
[2,4,2,3,0,2,3,3],
[2,6,5,3,8,0,4,6],
[4,8,5,5,7,6,0,5],
[3,7,4,5,7,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,2,8,4,5,4,2],
[8,0,6,8,8,9,5,5],
[8,4,0,9,7,7,7,5],
[2,2,1,0,3,3,4,2],
[6,2,3,7,0,4,5,4],
[5,1,3,7,6,0,3,3],
[6,5,3,6,5,7,0,5],
[8,5,5,8,6,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,3,6,6,6,4],
[6,0,7,3,4,5,6,6],
[4,3,0,2,5,5,5,3],
[7,7,8,0,5,8,9,7],
[4,6,5,5,0,5,6,4],
[4,5,5,2,5,0,3,3],
[4,4,5,1,4,7,0,3],
[6,4,7,3,6,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,1,6,6,5,4,6],
[8,0,0,5,8,8,2,5],
[9,10,0,5,10,8,7,7],
[4,5,5,0,7,4,4,6],
[4,2,0,3,0,4,2,3],
[5,2,2,6,6,0,4,6],
[6,8,3,6,8,6,0,5],
[4,5,3,4,7,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,6,5,5,5,5],
[7,0,5,6,5,4,3,7],
[6,5,0,8,7,6,8,7],
[4,4,2,0,4,5,7,6],
[5,5,3,6,0,4,6,5],
[5,6,4,5,6,0,4,7],
[5,7,2,3,4,6,0,4],
[5,3,3,4,5,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,7,8,7,10,8],
[2,0,2,5,6,6,7,3],
[5,8,0,8,8,8,8,7],
[3,5,2,0,7,7,7,4],
[2,4,2,3,0,4,7,4],
[3,4,2,3,6,0,3,6],
[0,3,2,3,3,7,0,4],
[2,7,3,6,6,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,8,3,5,7,7],
[2,0,6,5,3,4,4,7],
[5,4,0,3,1,3,3,5],
[2,5,7,0,2,2,4,5],
[7,7,9,8,0,5,8,8],
[5,6,7,8,5,0,5,7],
[3,6,7,6,2,5,0,5],
[3,3,5,5,2,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,5,8,8,5,7],
[4,0,7,4,7,6,3,4],
[3,3,0,4,7,5,3,5],
[5,6,6,0,8,8,5,8],
[2,3,3,2,0,5,3,4],
[2,4,5,2,5,0,4,4],
[5,7,7,5,7,6,0,5],
[3,6,5,2,6,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,5,6,4,10,8],
[5,0,6,8,6,4,7,9],
[4,4,0,6,5,6,6,8],
[5,2,4,0,6,2,7,9],
[4,4,5,4,0,4,8,8],
[6,6,4,8,6,0,8,8],
[0,3,4,3,2,2,0,5],
[2,1,2,1,2,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,7,5,5,6,6],
[3,0,4,5,5,5,4,6],
[4,6,0,6,7,5,3,9],
[3,5,4,0,5,6,2,6],
[5,5,3,5,0,5,4,5],
[5,5,5,4,5,0,5,4],
[4,6,7,8,6,5,0,6],
[4,4,1,4,5,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,1,2,2,6,4,1],
[4,0,1,2,1,4,1,2],
[9,9,0,6,5,8,5,7],
[8,8,4,0,2,9,5,4],
[8,9,5,8,0,7,5,8],
[4,6,2,1,3,0,3,1],
[6,9,5,5,5,7,0,4],
[9,8,3,6,2,9,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,1,1,4,3,2],
[8,0,6,5,4,5,6,8],
[6,4,0,3,3,6,4,5],
[9,5,7,0,3,6,4,8],
[9,6,7,7,0,6,5,9],
[6,5,4,4,4,0,5,5],
[7,4,6,6,5,5,0,6],
[8,2,5,2,1,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,3,0,1,3,0],
[4,0,5,5,2,3,4,4],
[7,5,0,3,0,3,5,0],
[7,5,7,0,2,0,7,0],
[10,8,10,8,0,3,10,2],
[9,7,7,10,7,0,7,5],
[7,6,5,3,0,3,0,0],
[10,6,10,10,8,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,7,5,7,6,7],
[3,0,6,6,3,5,4,7],
[7,4,0,5,5,7,6,5],
[3,4,5,0,3,4,4,4],
[5,7,5,7,0,8,7,6],
[3,5,3,6,2,0,4,4],
[4,6,4,6,3,6,0,4],
[3,3,5,6,4,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,1,3,2,6,1],
[6,0,7,3,8,3,6,3],
[7,3,0,4,6,4,5,4],
[9,7,6,0,5,5,7,6],
[7,2,4,5,0,5,5,4],
[8,7,6,5,5,0,7,8],
[4,4,5,3,5,3,0,4],
[9,7,6,4,6,2,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,1,4,1,3,4,1],
[9,0,4,6,6,9,9,8],
[9,6,0,7,4,6,7,10],
[6,4,3,0,3,5,5,6],
[9,4,6,7,0,6,8,8],
[7,1,4,5,4,0,5,5],
[6,1,3,5,2,5,0,4],
[9,2,0,4,2,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,5,5,3,4,8],
[8,0,8,8,3,6,7,8],
[6,2,0,6,3,5,4,8],
[5,2,4,0,3,3,4,8],
[5,7,7,7,0,6,7,7],
[7,4,5,7,4,0,7,5],
[6,3,6,6,3,3,0,6],
[2,2,2,2,3,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,7,4,7,4,8],
[4,0,4,6,5,7,6,6],
[4,6,0,7,5,9,5,5],
[3,4,3,0,1,3,4,3],
[6,5,5,9,0,8,4,8],
[3,3,1,7,2,0,5,4],
[6,4,5,6,6,5,0,6],
[2,4,5,7,2,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,2,2,5,2],
[5,0,4,3,2,0,4,1],
[5,6,0,2,2,6,5,5],
[5,7,8,0,2,6,6,5],
[8,8,8,8,0,4,4,5],
[8,10,4,4,6,0,9,4],
[5,6,5,4,6,1,0,2],
[8,9,5,5,5,6,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,8,8,3,2,0],
[10,0,5,10,10,5,10,2],
[5,5,0,5,5,0,7,0],
[2,0,5,0,2,2,2,2],
[2,0,5,8,0,2,2,2],
[7,5,10,8,8,0,7,5],
[8,0,3,8,8,3,0,0],
[10,8,10,8,8,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,8,7,5,7,5],
[4,0,5,6,5,3,3,4],
[4,5,0,7,7,4,6,5],
[2,4,3,0,6,4,5,4],
[3,5,3,4,0,3,3,3],
[5,7,6,6,7,0,7,5],
[3,7,4,5,7,3,0,4],
[5,6,5,6,7,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,8,7,6,4,6],
[6,0,6,7,8,5,7,8],
[6,4,0,8,6,5,5,7],
[2,3,2,0,4,3,4,5],
[3,2,4,6,0,3,4,7],
[4,5,5,7,7,0,5,6],
[6,3,5,6,6,5,0,8],
[4,2,3,5,3,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,1,7,4,8,8,5],
[5,0,6,7,4,4,4,2],
[9,4,0,6,4,8,7,5],
[3,3,4,0,4,4,3,5],
[6,6,6,6,0,9,4,4],
[2,6,2,6,1,0,4,1],
[2,6,3,7,6,6,0,4],
[5,8,5,5,6,9,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,6,8,6,5],
[4,0,7,6,6,6,5,3],
[4,3,0,5,7,5,4,3],
[5,4,5,0,7,5,3,5],
[4,4,3,3,0,5,4,5],
[2,4,5,5,5,0,3,2],
[4,5,6,7,6,7,0,3],
[5,7,7,5,5,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,4,6,6,5,6],
[4,0,8,6,4,5,4,7],
[5,2,0,4,6,4,4,6],
[6,4,6,0,5,7,7,4],
[4,6,4,5,0,6,5,3],
[4,5,6,3,4,0,5,4],
[5,6,6,3,5,5,0,4],
[4,3,4,6,7,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,7,5,8,5,8,9],
[1,0,6,3,1,3,3,3],
[3,4,0,3,3,2,6,3],
[5,7,7,0,4,3,5,8],
[2,9,7,6,0,4,6,4],
[5,7,8,7,6,0,5,9],
[2,7,4,5,4,5,0,6],
[1,7,7,2,6,1,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,4,3,3,2],
[5,0,8,6,6,3,3,4],
[6,2,0,5,3,3,2,3],
[5,4,5,0,7,4,1,3],
[6,4,7,3,0,3,0,3],
[7,7,7,6,7,0,4,5],
[7,7,8,9,10,6,0,4],
[8,6,7,7,7,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,6,5,6,3,7],
[3,0,6,4,4,5,3,4],
[5,4,0,5,5,6,4,5],
[4,6,5,0,6,8,4,7],
[5,6,5,4,0,5,4,7],
[4,5,4,2,5,0,5,6],
[7,7,6,6,6,5,0,9],
[3,6,5,3,3,4,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,8,5,6,6,8],
[2,0,4,3,7,3,3,5],
[3,6,0,6,6,7,3,7],
[2,7,4,0,7,3,2,6],
[5,3,4,3,0,6,3,4],
[4,7,3,7,4,0,4,8],
[4,7,7,8,7,6,0,9],
[2,5,3,4,6,2,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,7,6,4,5,6],
[5,0,7,7,7,7,7,6],
[4,3,0,6,8,5,5,3],
[3,3,4,0,3,3,5,3],
[4,3,2,7,0,4,5,3],
[6,3,5,7,6,0,5,4],
[5,3,5,5,5,5,0,6],
[4,4,7,7,7,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,8,5,5,4,5],
[4,0,1,4,2,1,4,5],
[5,9,0,4,5,8,6,8],
[2,6,6,0,2,5,3,5],
[5,8,5,8,0,8,6,7],
[5,9,2,5,2,0,4,5],
[6,6,4,7,4,6,0,4],
[5,5,2,5,3,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,2,7,2,2,4,0],
[3,0,2,5,4,2,5,2],
[8,8,0,5,5,5,7,5],
[3,5,5,0,5,3,7,3],
[8,6,5,5,0,2,5,0],
[8,8,5,7,8,0,5,4],
[6,5,3,3,5,5,0,5],
[10,8,5,7,10,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,5,3,3,5,4],
[7,0,5,4,6,4,5,4],
[7,5,0,5,6,4,7,5],
[5,6,5,0,5,6,5,7],
[7,4,4,5,0,6,6,5],
[7,6,6,4,4,0,6,5],
[5,5,3,5,4,4,0,6],
[6,6,5,3,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,0,4,0,7],
[6,0,10,7,3,4,3,7],
[6,0,0,7,3,4,3,7],
[6,3,3,0,3,7,3,6],
[10,7,7,7,0,7,3,10],
[6,6,6,3,3,0,6,3],
[10,7,7,7,7,4,0,7],
[3,3,3,4,0,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,6,7,7,5,7],
[2,0,6,5,8,6,3,8],
[2,4,0,3,6,3,5,2],
[4,5,7,0,6,8,5,7],
[3,2,4,4,0,4,5,4],
[3,4,7,2,6,0,4,5],
[5,7,5,5,5,6,0,5],
[3,2,8,3,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,2,6,4,7,3],
[5,0,6,5,4,5,5,6],
[5,4,0,2,6,5,9,4],
[8,5,8,0,6,7,10,6],
[4,6,4,4,0,4,4,6],
[6,5,5,3,6,0,6,5],
[3,5,1,0,6,4,0,3],
[7,4,6,4,4,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,0,10,0,10,0],
[10,0,5,0,10,0,10,0],
[5,5,0,5,10,5,5,5],
[10,10,5,0,10,5,10,5],
[0,0,0,0,0,0,0,0],
[10,10,5,5,10,0,10,5],
[0,0,5,0,10,0,0,0],
[10,10,5,5,10,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,4,6,5,4,7],
[2,0,3,3,4,3,4,2],
[4,7,0,5,6,6,4,5],
[6,7,5,0,4,5,6,6],
[4,6,4,6,0,3,5,6],
[5,7,4,5,7,0,6,4],
[6,6,6,4,5,4,0,5],
[3,8,5,4,4,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,4,5,4,8,5],
[4,0,4,3,3,4,5,3],
[2,6,0,2,2,4,3,1],
[6,7,8,0,5,5,8,5],
[5,7,8,5,0,6,6,5],
[6,6,6,5,4,0,5,5],
[2,5,7,2,4,5,0,3],
[5,7,9,5,5,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,2,3,5,1,1,1],
[7,0,6,5,7,6,8,6],
[8,4,0,4,5,6,5,7],
[7,5,6,0,4,5,3,5],
[5,3,5,6,0,5,3,3],
[9,4,4,5,5,0,7,3],
[9,2,5,7,7,3,0,5],
[9,4,3,5,7,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,5,5,3,3,2],
[5,0,8,6,7,4,5,6],
[4,2,0,6,3,4,6,2],
[5,4,4,0,4,4,4,3],
[5,3,7,6,0,5,6,3],
[7,6,6,6,5,0,7,5],
[7,5,4,6,4,3,0,3],
[8,4,8,7,7,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,2,0,2,2,5,4],
[8,0,7,5,8,8,7,7],
[8,3,0,3,3,5,8,10],
[10,5,7,0,8,5,10,10],
[8,2,7,2,0,5,7,7],
[8,2,5,5,5,0,5,7],
[5,3,2,0,3,5,0,2],
[6,3,0,0,3,3,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,10,0,5,0],
[5,0,5,5,5,5,5,5],
[5,5,0,5,10,5,5,0],
[5,5,5,0,5,0,5,0],
[0,5,0,5,0,0,5,0],
[10,5,5,10,10,0,5,0],
[5,5,5,5,5,5,0,5],
[10,5,10,10,10,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,2,3,4,3,4],
[7,0,6,7,6,6,5,7],
[5,4,0,3,5,6,1,5],
[8,3,7,0,7,5,4,7],
[7,4,5,3,0,6,4,4],
[6,4,4,5,4,0,5,5],
[7,5,9,6,6,5,0,6],
[6,3,5,3,6,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,5,5,6,6,3],
[4,0,2,4,6,5,5,4],
[7,8,0,5,6,5,7,4],
[5,6,5,0,5,4,6,4],
[5,4,4,5,0,4,4,1],
[4,5,5,6,6,0,5,3],
[4,5,3,4,6,5,0,5],
[7,6,6,6,9,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,4,4,4,6],
[6,0,5,6,7,5,5,4],
[6,5,0,6,4,3,5,3],
[6,4,4,0,5,4,9,4],
[6,3,6,5,0,3,8,3],
[6,5,7,6,7,0,6,4],
[6,5,5,1,2,4,0,2],
[4,6,7,6,7,6,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,0,10,4,2,6,8],
[4,0,4,6,0,0,0,4],
[10,6,0,10,4,6,6,10],
[0,4,0,0,0,0,0,4],
[6,10,6,10,0,2,2,6],
[8,10,4,10,8,0,8,8],
[4,10,4,10,8,2,0,4],
[2,6,0,6,4,2,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,5,5,8,7,3],
[3,0,6,5,4,6,4,2],
[5,4,0,3,5,6,5,4],
[5,5,7,0,4,6,4,3],
[5,6,5,6,0,6,7,5],
[2,4,4,4,4,0,4,3],
[3,6,5,6,3,6,0,5],
[7,8,6,7,5,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,3,6,7,3,2],
[6,0,5,3,5,8,6,1],
[4,5,0,4,3,9,4,3],
[7,7,6,0,5,8,5,5],
[4,5,7,5,0,8,5,2],
[3,2,1,2,2,0,1,1],
[7,4,6,5,5,9,0,1],
[8,9,7,5,8,9,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,10,5,5,5,0],
[5,0,5,5,5,5,0,5],
[0,5,0,5,0,0,5,0],
[0,5,5,0,0,0,0,0],
[5,5,10,10,0,5,5,5],
[5,5,10,10,5,0,5,5],
[5,10,5,10,5,5,0,5],
[10,5,10,10,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,3,5,3,5,3],
[8,0,6,5,6,5,6,5],
[6,4,0,6,6,6,7,7],
[7,5,4,0,6,6,7,5],
[5,4,4,4,0,5,4,6],
[7,5,4,4,5,0,7,8],
[5,4,3,3,6,3,0,4],
[7,5,3,5,4,2,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,3,5,3,4,2],
[5,0,8,6,6,3,7,3],
[5,2,0,2,2,3,3,3],
[7,4,8,0,5,3,6,5],
[5,4,8,5,0,3,7,5],
[7,7,7,7,7,0,7,4],
[6,3,7,4,3,3,0,5],
[8,7,7,5,5,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,8,5,10,10,10],
[5,0,10,10,3,10,10,5],
[0,0,0,3,0,3,3,3],
[2,0,7,0,0,10,2,5],
[5,7,10,10,0,10,10,10],
[0,0,7,0,0,0,2,2],
[0,0,7,8,0,8,0,3],
[0,5,7,5,0,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,1,2,2,2,2,2],
[8,0,4,6,6,4,9,3],
[9,6,0,5,6,5,9,2],
[8,4,5,0,6,7,9,2],
[8,4,4,4,0,4,7,6],
[8,6,5,3,6,0,9,2],
[8,1,1,1,3,1,0,3],
[8,7,8,8,4,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,2,3,2,6],
[4,0,8,9,4,2,6,9],
[4,2,0,5,1,2,6,9],
[4,1,5,0,2,1,6,6],
[8,6,9,8,0,2,6,9],
[7,8,8,9,8,0,5,9],
[8,4,4,4,4,5,0,5],
[4,1,1,4,1,1,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,7,4,7,7],
[6,0,10,9,9,3,4,7],
[6,0,0,6,9,3,4,7],
[6,1,4,0,10,4,4,7],
[3,1,1,0,0,4,4,4],
[6,7,7,6,6,0,4,7],
[3,6,6,6,6,6,0,3],
[3,3,3,3,6,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,6,6,5,5,6],
[6,0,5,6,6,4,5,6],
[8,5,0,5,6,4,5,6],
[4,4,5,0,6,7,5,5],
[4,4,4,4,0,6,5,6],
[5,6,6,3,4,0,5,7],
[5,5,5,5,5,5,0,3],
[4,4,4,5,4,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,4,7,3,4,6],
[4,0,4,5,8,5,6,6],
[6,6,0,5,8,6,6,9],
[6,5,5,0,8,5,5,8],
[3,2,2,2,0,2,4,4],
[7,5,4,5,8,0,7,8],
[6,4,4,5,6,3,0,6],
[4,4,1,2,6,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,7,6,4,6,6],
[5,0,3,5,3,2,6,6],
[5,7,0,6,5,6,6,5],
[3,5,4,0,5,4,7,6],
[4,7,5,5,0,5,5,7],
[6,8,4,6,5,0,8,7],
[4,4,4,3,5,2,0,5],
[4,4,5,4,3,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,7,3,5,1,1],
[6,0,4,9,6,7,4,6],
[5,6,0,9,2,10,3,2],
[3,1,1,0,3,3,1,1],
[7,4,8,7,0,8,8,7],
[5,3,0,7,2,0,0,0],
[9,6,7,9,2,10,0,5],
[9,4,8,9,3,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,10,5,10,5,10],
[5,0,10,10,5,10,5,5],
[0,0,0,0,0,5,0,0],
[0,0,10,0,0,5,5,5],
[5,5,10,10,0,10,5,5],
[0,0,5,5,0,0,0,0],
[5,5,10,5,5,10,0,5],
[0,5,10,5,5,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,3,2,8,6,8,3],
[2,0,4,2,2,5,6,2],
[7,6,0,5,6,6,6,6],
[8,8,5,0,8,10,8,7],
[2,8,4,2,0,7,6,2],
[4,5,4,0,3,0,6,3],
[2,4,4,2,4,4,0,2],
[7,8,4,3,8,7,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,4,4,3,3,4],
[4,0,2,2,5,2,3,3],
[5,8,0,5,5,5,6,7],
[6,8,5,0,6,6,7,8],
[6,5,5,4,0,4,6,4],
[7,8,5,4,6,0,6,5],
[7,7,4,3,4,4,0,4],
[6,7,3,2,6,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,6,5,6,5,6],
[6,0,3,6,6,3,5,5],
[5,7,0,6,8,5,4,8],
[4,4,4,0,5,4,6,5],
[5,4,2,5,0,3,3,3],
[4,7,5,6,7,0,5,7],
[5,5,6,4,7,5,0,7],
[4,5,2,5,7,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,5,5,6,7],
[6,0,4,2,4,8,5,5],
[6,6,0,5,5,8,6,8],
[6,8,5,0,6,8,6,8],
[5,6,5,4,0,6,8,7],
[5,2,2,2,4,0,5,5],
[4,5,4,4,2,5,0,6],
[3,5,2,2,3,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,4,6,6,6,5],
[4,0,5,4,5,7,7,7],
[4,5,0,5,6,7,6,5],
[6,6,5,0,6,6,4,4],
[4,5,4,4,0,7,7,3],
[4,3,3,4,3,0,5,3],
[4,3,4,6,3,5,0,1],
[5,3,5,6,7,7,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,4,6,5,5],
[5,0,6,5,6,3,5,2],
[4,4,0,2,4,4,3,4],
[4,5,8,0,7,5,6,6],
[6,4,6,3,0,3,5,4],
[4,7,6,5,7,0,6,7],
[5,5,7,4,5,4,0,6],
[5,8,6,4,6,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,4,7,3,4],
[5,0,6,5,3,7,4,4],
[5,4,0,5,4,5,4,3],
[5,5,5,0,5,5,5,4],
[6,7,6,5,0,6,6,4],
[3,3,5,5,4,0,4,4],
[7,6,6,5,4,6,0,6],
[6,6,7,6,6,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,9,2,0,7,2],
[2,0,3,2,1,2,5,0],
[5,7,0,8,5,5,7,4],
[1,8,2,0,1,1,3,0],
[8,9,5,9,0,4,7,6],
[10,8,5,9,6,0,7,2],
[3,5,3,7,3,3,0,2],
[8,10,6,10,4,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,8,5,8,8,6],
[4,0,6,6,6,3,6,6],
[3,4,0,5,3,6,6,4],
[2,4,5,0,3,6,6,2],
[5,4,7,7,0,4,6,5],
[2,7,4,4,6,0,5,3],
[2,4,4,4,4,5,0,4],
[4,4,6,8,5,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,4,2,3,8,3],
[5,0,6,7,5,7,6,5],
[4,4,0,2,0,3,4,1],
[6,3,8,0,2,3,7,2],
[8,5,10,8,0,7,9,7],
[7,3,7,7,3,0,8,3],
[2,4,6,3,1,2,0,1],
[7,5,9,8,3,7,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,2,2,5,5,2],
[5,0,0,5,4,0,3,0],
[5,10,0,5,7,5,7,4],
[8,5,5,0,5,5,5,5],
[8,6,3,5,0,3,3,0],
[5,10,5,5,7,0,5,5],
[5,7,3,5,7,5,0,5],
[8,10,6,5,10,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,7,6,6,6,4],
[5,0,7,7,10,10,7,5],
[3,3,0,6,6,4,3,3],
[3,3,4,0,6,3,3,3],
[4,0,4,4,0,3,1,0],
[4,0,6,7,7,0,6,4],
[4,3,7,7,9,4,0,4],
[6,5,7,7,10,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,0,5,5,5,5,5],
[5,0,5,0,5,0,5,5],
[10,5,0,5,10,5,5,5],
[5,10,5,0,10,5,10,10],
[5,5,0,0,0,0,5,5],
[5,10,5,5,10,0,10,10],
[5,5,5,0,5,0,0,0],
[5,5,5,0,5,0,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,7,5,6,7,8],
[5,0,7,7,7,7,7,8],
[6,3,0,3,3,2,3,7],
[3,3,7,0,4,5,4,9],
[5,3,7,6,0,6,6,10],
[4,3,8,5,4,0,6,10],
[3,3,7,6,4,4,0,9],
[2,2,3,1,0,0,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,0,0,5,0],
[5,0,5,0,0,5,5,0],
[5,5,0,5,5,5,10,0],
[5,10,5,0,0,5,5,0],
[10,10,5,10,0,10,10,5],
[10,5,5,5,0,0,10,0],
[5,5,0,5,0,0,0,0],
[10,10,10,10,5,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,8,5,5,6,7],
[2,0,6,9,5,4,6,5],
[3,4,0,6,6,3,4,5],
[2,1,4,0,4,2,5,4],
[5,5,4,6,0,2,3,4],
[5,6,7,8,8,0,6,5],
[4,4,6,5,7,4,0,4],
[3,5,5,6,6,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,3,6,5,5,6],
[5,0,5,7,7,8,3,6],
[6,5,0,7,8,8,1,8],
[7,3,3,0,4,10,4,4],
[4,3,2,6,0,8,2,6],
[5,2,2,0,2,0,2,4],
[5,7,9,6,8,8,0,8],
[4,4,2,6,4,6,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,4,7,6,4,5],
[6,0,5,4,6,5,2,4],
[3,5,0,2,7,6,4,4],
[6,6,8,0,10,9,5,5],
[3,4,3,0,0,6,3,2],
[4,5,4,1,4,0,3,2],
[6,8,6,5,7,7,0,7],
[5,6,6,5,8,8,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,3,5,3,5,5,8],
[2,0,1,3,2,2,5,5],
[7,9,0,5,3,7,7,7],
[5,7,5,0,5,6,6,5],
[7,8,7,5,0,6,8,7],
[5,8,3,4,4,0,6,6],
[5,5,3,4,2,4,0,5],
[2,5,3,5,3,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,7,6,4,10,3],
[5,0,6,5,7,5,6,7],
[3,4,0,0,6,0,9,2],
[3,5,10,0,9,2,10,6],
[4,3,4,1,0,1,7,2],
[6,5,10,8,9,0,9,5],
[0,4,1,0,3,1,0,3],
[7,3,8,4,8,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,7,3,4,5,5],
[4,0,5,5,3,1,4,6],
[4,5,0,4,2,3,3,7],
[3,5,6,0,4,3,4,4],
[7,7,8,6,0,5,6,7],
[6,9,7,7,5,0,8,7],
[5,6,7,6,4,2,0,6],
[5,4,3,6,3,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,5,10,4,4,6],
[3,0,8,7,8,4,4,4],
[2,2,0,5,7,2,2,4],
[5,3,5,0,7,3,5,7],
[0,2,3,3,0,4,2,2],
[6,6,8,7,6,0,5,5],
[6,6,8,5,8,5,0,7],
[4,6,6,3,8,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,4,4,6,5,7],
[3,0,5,3,2,3,3,5],
[5,5,0,7,5,7,2,8],
[6,7,3,0,4,6,3,5],
[6,8,5,6,0,5,3,7],
[4,7,3,4,5,0,1,8],
[5,7,8,7,7,9,0,10],
[3,5,2,5,3,2,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,10,3,3,6,6],
[3,0,3,4,4,4,3,4],
[4,7,0,10,3,5,4,4],
[0,6,0,0,1,1,0,1],
[7,6,7,9,0,8,3,4],
[7,6,5,9,2,0,5,3],
[4,7,6,10,7,5,0,5],
[4,6,6,9,6,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,3,6,3,7,7],
[7,0,8,10,4,8,10,5],
[5,2,0,5,6,2,3,3],
[7,0,5,0,4,0,7,5],
[4,6,4,6,0,6,6,7],
[7,2,8,10,4,0,10,5],
[3,0,7,3,4,0,0,1],
[3,5,7,5,3,5,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,5,4,6,4,4],
[7,0,7,5,6,8,5,5],
[4,3,0,3,6,6,2,4],
[5,5,7,0,6,5,5,6],
[6,4,4,4,0,6,4,4],
[4,2,4,5,4,0,3,4],
[6,5,8,5,6,7,0,7],
[6,5,6,4,6,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,4,4,4,5,4],
[6,0,3,5,5,5,4,4],
[7,7,0,5,6,8,7,5],
[6,5,5,0,6,5,6,5],
[6,5,4,4,0,6,7,5],
[6,5,2,5,4,0,4,4],
[5,6,3,4,3,6,0,4],
[6,6,5,5,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,3,2,4,2,2],
[6,0,5,4,5,6,3,4],
[5,5,0,4,3,5,6,4],
[7,6,6,0,7,8,5,6],
[8,5,7,3,0,7,7,7],
[6,4,5,2,3,0,4,6],
[8,7,4,5,3,6,0,5],
[8,6,6,4,3,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,4,3,3,2,6],
[6,0,6,4,2,6,1,4],
[5,4,0,2,2,6,1,4],
[6,6,8,0,3,7,3,4],
[7,8,8,7,0,7,5,6],
[7,4,4,3,3,0,3,5],
[8,9,9,7,5,7,0,8],
[4,6,6,6,4,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,10,3,10,7,7],
[6,0,7,6,6,6,6,3],
[3,3,0,3,3,3,3,6],
[0,4,7,0,3,3,0,3],
[7,4,7,7,0,7,7,7],
[0,4,7,7,3,0,0,3],
[3,4,7,10,3,10,0,3],
[3,7,4,7,3,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,0,5,5,10,5],
[10,0,5,5,5,5,10,10],
[5,5,0,5,10,0,5,5],
[10,5,5,0,5,5,10,10],
[5,5,0,5,0,0,5,5],
[5,5,10,5,10,0,10,5],
[0,0,5,0,5,0,0,5],
[5,0,5,0,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,2,2,5,2,4],
[6,0,7,5,5,7,6,3],
[7,3,0,4,3,5,3,3],
[8,5,6,0,5,6,5,4],
[8,5,7,5,0,6,6,4],
[5,3,5,4,4,0,3,4],
[8,4,7,5,4,7,0,6],
[6,7,7,6,6,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,6,6,3,6],
[4,0,7,6,10,6,5,6],
[4,3,0,3,5,5,2,6],
[5,4,7,0,7,6,5,6],
[4,0,5,3,0,1,3,4],
[4,4,5,4,9,0,5,6],
[7,5,8,5,7,5,0,6],
[4,4,4,4,6,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,7,7,7,6,6],
[4,0,3,7,7,5,5,6],
[6,7,0,7,6,6,5,5],
[3,3,3,0,3,3,2,2],
[3,3,4,7,0,5,5,6],
[3,5,4,7,5,0,5,5],
[4,5,5,8,5,5,0,5],
[4,4,5,8,4,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,5,9,9,8,7],
[2,0,5,2,5,6,7,4],
[3,5,0,1,5,7,5,3],
[5,8,9,0,7,8,8,7],
[1,5,5,3,0,7,5,5],
[1,4,3,2,3,0,4,4],
[2,3,5,2,5,6,0,3],
[3,6,7,3,5,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,5,5,5],
[5,0,5,5,10,10,5,10],
[5,5,0,10,10,10,5,5],
[5,5,0,0,5,5,5,5],
[5,0,0,5,0,0,0,0],
[5,0,0,5,10,0,0,0],
[5,5,5,5,10,10,0,10],
[5,0,5,5,10,10,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,5,5,6,8,2],
[5,0,5,7,8,9,7,4],
[3,5,0,4,7,8,7,5],
[5,3,6,0,6,5,8,3],
[5,2,3,4,0,3,8,2],
[4,1,2,5,7,0,8,2],
[2,3,3,2,2,2,0,3],
[8,6,5,7,8,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,6,5,4,7,7],
[6,0,6,5,4,6,5,7],
[5,4,0,6,5,5,6,5],
[4,5,4,0,5,6,5,6],
[5,6,5,5,0,6,7,6],
[6,4,5,4,4,0,8,7],
[3,5,4,5,3,2,0,6],
[3,3,5,4,4,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,9,3,8,6,2,7],
[4,0,9,5,6,8,4,4],
[1,1,0,3,6,4,1,4],
[7,5,7,0,7,7,4,5],
[2,4,4,3,0,8,4,4],
[4,2,6,3,2,0,0,2],
[8,6,9,6,6,10,0,5],
[3,6,6,5,6,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,6,6,2,6],
[4,0,10,5,7,3,3,1],
[4,0,0,5,2,1,0,0],
[5,5,5,0,7,5,5,5],
[4,3,8,3,0,1,3,4],
[4,7,9,5,9,0,5,7],
[8,7,10,5,7,5,0,5],
[4,9,10,5,6,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,5,5,5,5,9],
[3,0,3,6,1,0,3,7],
[3,7,0,8,1,4,4,7],
[5,4,2,0,2,2,5,5],
[5,9,9,8,0,4,4,8],
[5,10,6,8,6,0,4,9],
[5,7,6,5,6,6,0,6],
[1,3,3,5,2,1,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,6,3,5,5,3],
[7,0,6,6,6,7,6,4],
[7,4,0,3,3,5,3,4],
[4,4,7,0,4,4,3,5],
[7,4,7,6,0,7,4,4],
[5,3,5,6,3,0,3,3],
[5,4,7,7,6,7,0,6],
[7,6,6,5,6,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,5,4,6,7,2],
[6,0,5,6,5,6,7,6],
[7,5,0,6,4,6,7,3],
[5,4,4,0,4,6,7,3],
[6,5,6,6,0,6,5,4],
[4,4,4,4,4,0,3,5],
[3,3,3,3,5,7,0,3],
[8,4,7,7,6,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,6,8,7,6,5],
[5,0,5,7,9,7,7,5],
[2,5,0,5,8,4,3,6],
[4,3,5,0,7,6,7,4],
[2,1,2,3,0,6,3,2],
[3,3,6,4,4,0,4,3],
[4,3,7,3,7,6,0,5],
[5,5,4,6,8,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,6,6,0,6],
[4,0,10,5,9,9,0,9],
[4,0,0,5,5,9,0,5],
[5,5,5,0,10,10,5,10],
[4,1,5,0,0,5,0,5],
[4,1,1,0,5,0,0,6],
[10,10,10,5,10,10,0,10],
[4,1,5,0,5,4,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,10,7,4,6,7],
[3,0,3,4,4,4,0,4],
[4,7,0,7,7,4,6,7],
[0,6,3,0,3,3,3,4],
[3,6,3,7,0,7,0,7],
[6,6,6,7,3,0,3,7],
[4,10,4,7,10,7,0,7],
[3,6,3,6,3,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,7,7,8,5,7],
[2,0,2,2,4,10,5,7],
[3,8,0,4,4,8,5,7],
[3,8,6,0,2,8,3,5],
[3,6,6,8,0,8,3,5],
[2,0,2,2,2,0,5,7],
[5,5,5,7,7,5,0,7],
[3,3,3,5,5,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,6,4,4,4,6],
[5,0,4,6,4,6,5,4],
[6,6,0,6,5,6,5,5],
[4,4,4,0,4,4,5,5],
[6,6,5,6,0,5,4,6],
[6,4,4,6,5,0,4,5],
[6,5,5,5,6,6,0,6],
[4,6,5,5,4,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,0,0,3,3,3],
[7,0,3,3,0,0,10,3],
[7,7,0,7,7,3,10,10],
[10,7,3,0,4,3,10,3],
[10,10,3,6,0,6,10,6],
[7,10,7,7,4,0,10,10],
[7,0,0,0,0,0,0,0],
[7,7,0,7,4,0,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,5,4,4,9,8],
[2,0,8,4,6,1,6,6],
[2,2,0,0,4,1,3,4],
[5,6,10,0,6,6,5,6],
[6,4,6,4,0,5,8,7],
[6,9,9,4,5,0,8,7],
[1,4,7,5,2,2,0,6],
[2,4,6,4,3,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,3,5,4,4,4],
[4,0,5,4,6,4,4,4],
[7,5,0,6,6,6,7,7],
[7,6,4,0,5,4,3,5],
[5,4,4,5,0,4,4,4],
[6,6,4,6,6,0,5,5],
[6,6,3,7,6,5,0,7],
[6,6,3,5,6,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,9,8,8,8,5,8],
[3,0,6,4,3,7,1,3],
[1,4,0,3,6,5,5,3],
[2,6,7,0,6,6,3,2],
[2,7,4,4,0,7,3,4],
[2,3,5,4,3,0,0,2],
[5,9,5,7,7,10,0,3],
[2,7,7,8,6,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,4,8,7,6,6],
[7,0,5,4,7,6,5,6],
[6,5,0,3,7,6,4,5],
[6,6,7,0,6,8,5,6],
[2,3,3,4,0,4,4,5],
[3,4,4,2,6,0,5,6],
[4,5,6,5,6,5,0,5],
[4,4,5,4,5,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,5,9,5,6,9],
[6,0,7,6,7,5,7,8],
[4,3,0,3,5,6,4,7],
[5,4,7,0,7,6,5,9],
[1,3,5,3,0,6,3,9],
[5,5,4,4,4,0,5,7],
[4,3,6,5,7,5,0,9],
[1,2,3,1,1,3,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,3,2,1,3],
[6,0,5,6,5,4,5,4],
[6,5,0,6,4,6,3,5],
[6,4,4,0,4,4,4,6],
[7,5,6,6,0,5,5,7],
[8,6,4,6,5,0,3,3],
[9,5,7,6,5,7,0,5],
[7,6,5,4,3,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,5,6,8,8,6],
[3,0,6,5,5,4,5,6],
[4,4,0,5,5,5,7,6],
[5,5,5,0,5,5,4,7],
[4,5,5,5,0,5,4,6],
[2,6,5,5,5,0,4,6],
[2,5,3,6,6,6,0,5],
[4,4,4,3,4,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,9,4,3,6,3,5],
[7,0,9,7,4,8,4,6],
[1,1,0,2,2,3,1,5],
[6,3,8,0,5,7,6,7],
[7,6,8,5,0,8,5,7],
[4,2,7,3,2,0,2,5],
[7,6,9,4,5,8,0,7],
[5,4,5,3,3,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,6,6,4,4],
[5,0,7,5,5,5,5,6],
[4,3,0,6,5,5,4,5],
[4,5,4,0,7,4,4,4],
[4,5,5,3,0,4,4,5],
[4,5,5,6,6,0,3,3],
[6,5,6,6,6,7,0,6],
[6,4,5,6,5,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,0,0,10,0,5],
[0,0,0,0,0,5,0,0],
[5,10,0,5,5,5,5,10],
[10,10,5,0,0,10,5,5],
[10,10,5,10,0,10,5,5],
[0,5,5,0,0,0,0,5],
[10,10,5,5,5,10,0,10],
[5,10,0,5,5,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,5,5,6,7,4],
[3,0,2,4,3,4,5,3],
[6,8,0,4,4,7,7,6],
[5,6,6,0,5,5,6,6],
[5,7,6,5,0,7,6,6],
[4,6,3,5,3,0,5,3],
[3,5,3,4,4,5,0,3],
[6,7,4,4,4,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,0,4,4,7,4,5],
[5,0,5,4,7,5,7,5],
[10,5,0,4,10,7,4,8],
[6,6,6,0,10,6,5,8],
[6,3,0,0,0,3,0,3],
[3,5,3,4,7,0,5,5],
[6,3,6,5,10,5,0,6],
[5,5,2,2,7,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,5,4,5,4,4],
[5,0,4,5,4,8,6,5],
[7,6,0,4,4,5,5,4],
[5,5,6,0,3,3,7,2],
[6,6,6,7,0,6,8,5],
[5,2,5,7,4,0,7,4],
[6,4,5,3,2,3,0,2],
[6,5,6,8,5,6,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,9,5,6,4,2,4],
[4,0,7,5,4,6,4,5],
[1,3,0,3,1,2,3,3],
[5,5,7,0,4,5,4,3],
[4,6,9,6,0,3,5,5],
[6,4,8,5,7,0,4,5],
[8,6,7,6,5,6,0,5],
[6,5,7,7,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,6,4,6,5,4],
[8,0,5,9,7,7,7,7],
[7,5,0,6,5,6,6,4],
[4,1,4,0,3,4,4,3],
[6,3,5,7,0,7,6,7],
[4,3,4,6,3,0,5,4],
[5,3,4,6,4,5,0,6],
[6,3,6,7,3,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,2,7,3,10,6],
[4,0,5,4,7,2,7,3],
[4,5,0,6,4,5,7,3],
[8,6,4,0,8,4,10,6],
[3,3,6,2,0,3,3,3],
[7,8,5,6,7,0,9,5],
[0,3,3,0,7,1,0,0],
[4,7,7,4,7,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,6,7,6,4,7],
[6,0,6,6,6,8,5,8],
[4,4,0,7,5,7,4,4],
[4,4,3,0,6,9,3,7],
[3,4,5,4,0,5,3,5],
[4,2,3,1,5,0,3,5],
[6,5,6,7,7,7,0,7],
[3,2,6,3,5,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,3,6,7,4,4],
[6,0,5,5,5,6,5,4],
[7,5,0,4,6,7,3,6],
[7,5,6,0,6,7,5,5],
[4,5,4,4,0,4,6,4],
[3,4,3,3,6,0,3,2],
[6,5,7,5,4,7,0,6],
[6,6,4,5,6,8,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,5,10,5,5,10],
[0,0,5,5,5,5,5,5],
[5,5,0,10,5,10,10,5],
[5,5,0,0,5,10,5,5],
[0,5,5,5,0,5,5,10],
[5,5,0,0,5,0,5,5],
[5,5,0,5,5,5,0,5],
[0,5,5,5,0,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,9,7,9,5,10],
[3,0,7,7,7,9,6,7],
[3,3,0,5,5,7,3,5],
[1,3,5,0,7,7,4,5],
[3,3,5,3,0,4,2,5],
[1,1,3,3,6,0,3,8],
[5,4,7,6,8,7,0,8],
[0,3,5,5,5,2,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,5,5,6,5,5],
[3,0,8,2,3,7,1,6],
[4,2,0,2,0,4,0,3],
[5,8,8,0,6,7,5,6],
[5,7,10,4,0,7,2,5],
[4,3,6,3,3,0,2,3],
[5,9,10,5,8,8,0,7],
[5,4,7,4,5,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,6,5,6,8,2],
[5,0,8,8,8,5,8,4],
[6,2,0,8,8,7,8,5],
[4,2,2,0,2,4,6,4],
[5,2,2,8,0,3,8,5],
[4,5,3,6,7,0,8,4],
[2,2,2,4,2,2,0,1],
[8,6,5,6,5,6,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,7,4,3,2,2],
[6,0,4,6,3,5,5,1],
[5,6,0,6,5,6,4,7],
[3,4,4,0,2,2,1,3],
[6,7,5,8,0,6,6,6],
[7,5,4,8,4,0,3,5],
[8,5,6,9,4,7,0,4],
[8,9,3,7,4,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,2,4,2,2,4],
[5,0,3,7,5,3,2,2],
[8,7,0,4,8,6,5,5],
[8,3,6,0,8,6,5,5],
[6,5,2,2,0,5,5,7],
[8,7,4,4,5,0,5,5],
[8,8,5,5,5,5,0,10],
[6,8,5,5,3,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,1,3,2,1,4,1],
[5,0,6,6,5,5,6,5],
[9,4,0,4,2,2,8,4],
[7,4,6,0,2,5,6,7],
[8,5,8,8,0,6,8,6],
[9,5,8,5,4,0,8,4],
[6,4,2,4,2,2,0,1],
[9,5,6,3,4,6,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,5,5,5,5,5],
[0,0,5,5,5,5,5,5],
[5,5,0,5,5,5,0,5],
[5,5,5,0,5,0,0,5],
[5,5,5,5,0,5,0,5],
[5,5,5,10,5,0,5,5],
[5,5,10,10,10,5,0,5],
[5,5,5,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,4,3,2,2,4],
[6,0,4,7,6,5,5,5],
[8,6,0,9,8,5,4,4],
[6,3,1,0,6,5,3,1],
[7,4,2,4,0,2,2,2],
[8,5,5,5,8,0,3,4],
[8,5,6,7,8,7,0,6],
[6,5,6,9,8,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,6,4,7,2,4],
[4,0,4,4,4,5,3,4],
[5,6,0,6,5,7,3,5],
[4,6,4,0,4,7,3,6],
[6,6,5,6,0,6,6,6],
[3,5,3,3,4,0,4,5],
[8,7,7,7,4,6,0,8],
[6,6,5,4,4,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,5,7,4,5],
[4,0,5,3,4,5,5,7],
[4,5,0,3,3,4,3,4],
[5,7,7,0,7,5,6,5],
[5,6,7,3,0,6,4,6],
[3,5,6,5,4,0,4,5],
[6,5,7,4,6,6,0,6],
[5,3,6,5,4,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,7,6,4,6,7],
[3,0,7,5,3,5,3,4],
[3,3,0,4,2,4,3,3],
[3,5,6,0,5,4,6,6],
[4,7,8,5,0,4,4,7],
[6,5,6,6,6,0,6,7],
[4,7,7,4,6,4,0,7],
[3,6,7,4,3,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,3,3,4,6,2],
[5,0,5,5,4,5,4,4],
[7,5,0,7,4,3,7,6],
[7,5,3,0,4,3,5,2],
[7,6,6,6,0,3,7,4],
[6,5,7,7,7,0,6,5],
[4,6,3,5,3,4,0,3],
[8,6,4,8,6,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,5,5,4,6,5],
[6,0,4,4,5,3,6,2],
[6,6,0,5,6,4,7,6],
[5,6,5,0,6,6,7,7],
[5,5,4,4,0,3,6,4],
[6,7,6,4,7,0,7,8],
[4,4,3,3,4,3,0,4],
[5,8,4,3,6,2,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,4,4,5,5,3],
[4,0,7,2,2,3,4,2],
[5,3,0,4,3,4,3,2],
[6,8,6,0,7,6,7,5],
[6,8,7,3,0,4,3,3],
[5,7,6,4,6,0,6,5],
[5,6,7,3,7,4,0,6],
[7,8,8,5,7,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,9,4,5,9,5,7],
[3,0,6,5,4,5,6,8],
[1,4,0,2,1,5,2,4],
[6,5,8,0,8,6,4,7],
[5,6,9,2,0,6,3,4],
[1,5,5,4,4,0,5,6],
[5,4,8,6,7,5,0,4],
[3,2,6,3,6,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,8,5,5,5,7],
[5,0,7,6,7,5,6,6],
[2,3,0,4,4,3,5,4],
[2,4,6,0,5,4,5,4],
[5,3,6,5,0,5,3,5],
[5,5,7,6,5,0,5,7],
[5,4,5,5,7,5,0,4],
[3,4,6,6,5,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,6,1,7,4,5],
[5,0,6,7,5,6,7,6],
[6,4,0,5,2,5,5,7],
[4,3,5,0,5,7,4,2],
[9,5,8,5,0,6,6,7],
[3,4,5,3,4,0,5,4],
[6,3,5,6,4,5,0,5],
[5,4,3,8,3,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,9,8,8,9,10,8],
[5,0,7,6,5,9,9,6],
[1,3,0,6,5,4,4,7],
[2,4,4,0,8,5,6,8],
[2,5,5,2,0,5,6,9],
[1,1,6,5,5,0,2,5],
[0,1,6,4,4,8,0,5],
[2,4,3,2,1,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,0,0,5,5],
[10,0,10,10,10,5,10,10],
[10,0,0,0,0,0,5,5],
[10,0,10,0,0,5,5,5],
[10,0,10,10,0,5,5,10],
[10,5,10,5,5,0,5,5],
[5,0,5,5,5,5,0,10],
[5,0,5,5,0,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,7,5,5,4,5],
[6,0,5,6,4,6,3,5],
[4,5,0,2,3,5,5,3],
[3,4,8,0,5,6,3,6],
[5,6,7,5,0,8,6,5],
[5,4,5,4,2,0,4,4],
[6,7,5,7,4,6,0,7],
[5,5,7,4,5,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,6,6,5,6,8],
[4,0,7,5,5,4,3,4],
[3,3,0,5,4,1,2,3],
[4,5,5,0,6,2,5,4],
[4,5,6,4,0,2,3,4],
[5,6,9,8,8,0,6,8],
[4,7,8,5,7,4,0,4],
[2,6,7,6,6,2,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,2,3,5,8,8],
[5,0,4,4,2,2,8,10],
[3,6,0,5,5,4,6,7],
[8,6,5,0,7,4,8,9],
[7,8,5,3,0,3,8,8],
[5,8,6,6,7,0,9,8],
[2,2,4,2,2,1,0,4],
[2,0,3,1,2,2,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,5,5,4,4,7],
[8,0,5,7,7,7,7,9],
[6,5,0,7,6,5,4,9],
[5,3,3,0,7,5,5,4],
[5,3,4,3,0,4,7,5],
[6,3,5,5,6,0,5,6],
[6,3,6,5,3,5,0,5],
[3,1,1,6,5,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,5,3,6,5,5],
[4,0,5,7,5,5,5,2],
[7,5,0,10,8,5,7,4],
[5,3,0,0,3,3,2,2],
[7,5,2,7,0,5,2,2],
[4,5,5,7,5,0,4,4],
[5,5,3,8,8,6,0,2],
[5,8,6,8,8,6,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,1,5,5,4,9,9],
[5,0,5,5,6,5,10,10],
[9,5,0,5,5,4,9,9],
[5,5,5,0,5,4,5,5],
[5,4,5,5,0,5,10,5],
[6,5,6,6,5,0,6,6],
[1,0,1,5,0,4,0,1],
[1,0,1,5,5,4,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,7,7,8,4,7],
[6,0,5,7,6,6,3,6],
[5,5,0,7,8,5,4,5],
[3,3,3,0,5,4,4,3],
[3,4,2,5,0,5,2,5],
[2,4,5,6,5,0,5,4],
[6,7,6,6,8,5,0,7],
[3,4,5,7,5,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,5,6,6,5,6],
[5,0,5,4,4,3,5,5],
[3,5,0,5,6,4,4,5],
[5,6,5,0,6,5,4,6],
[4,6,4,4,0,3,6,5],
[4,7,6,5,7,0,6,6],
[5,5,6,6,4,4,0,4],
[4,5,5,4,5,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,9,6,6,9,6,6],
[6,0,9,6,9,6,3,6],
[1,1,0,3,6,4,1,7],
[4,4,7,0,6,7,4,7],
[4,1,4,4,0,4,1,4],
[1,4,6,3,6,0,4,7],
[4,7,9,6,9,6,0,10],
[4,4,3,3,6,3,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,5,5,3,5,3],
[5,0,5,5,5,2,5,5],
[8,5,0,10,8,5,8,8],
[5,5,0,0,8,3,3,2],
[5,5,2,2,0,0,5,2],
[7,8,5,7,10,0,7,5],
[5,5,2,7,5,3,0,5],
[7,5,2,8,8,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,6,9,4,7,2],
[3,0,5,4,7,3,6,2],
[4,5,0,5,8,4,8,4],
[4,6,5,0,6,5,5,3],
[1,3,2,4,0,3,4,2],
[6,7,6,5,7,0,7,5],
[3,4,2,5,6,3,0,4],
[8,8,6,7,8,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,2,3,4,2,6],
[4,0,5,6,5,5,6,5],
[7,5,0,5,2,3,3,6],
[8,4,5,0,6,4,6,6],
[7,5,8,4,0,5,6,6],
[6,5,7,6,5,0,6,6],
[8,4,7,4,4,4,0,5],
[4,5,4,4,4,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,0,6,4,2,4,4],
[6,0,6,8,10,6,4,8],
[10,4,0,6,4,6,8,4],
[4,2,4,0,4,4,4,2],
[6,0,6,6,0,6,4,4],
[8,4,4,6,4,0,4,6],
[6,6,2,6,6,6,0,6],
[6,2,6,8,6,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,5,4,6,2,5],
[6,0,1,3,5,3,0,6],
[8,9,0,7,5,5,7,9],
[5,7,3,0,4,7,4,5],
[6,5,5,6,0,3,3,8],
[4,7,5,3,7,0,5,5],
[8,10,3,6,7,5,0,8],
[5,4,1,5,2,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,7,8,5,9,3],
[3,0,3,5,6,2,5,4],
[4,7,0,6,6,5,6,6],
[3,5,4,0,5,2,3,2],
[2,4,4,5,0,3,4,3],
[5,8,5,8,7,0,6,7],
[1,5,4,7,6,4,0,4],
[7,6,4,8,7,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,5,0,0,5,5],
[10,0,5,10,0,10,5,10],
[5,5,0,5,5,5,10,5],
[5,0,5,0,0,5,5,10],
[10,10,5,10,0,10,5,10],
[10,0,5,5,0,0,5,10],
[5,5,0,5,5,5,0,5],
[5,0,5,0,0,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,2,5,2,2,3,2],
[7,0,4,4,1,5,6,3],
[8,6,0,7,4,9,8,4],
[5,6,3,0,5,5,5,4],
[8,9,6,5,0,6,6,6],
[8,5,1,5,4,0,8,0],
[7,4,2,5,4,2,0,2],
[8,7,6,6,4,10,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,10,9,6,5,5,9],
[2,0,9,8,4,5,4,9],
[0,1,0,5,4,5,4,7],
[1,2,5,0,4,5,5,7],
[4,6,6,6,0,8,8,6],
[5,5,5,5,2,0,7,4],
[5,6,6,5,2,3,0,6],
[1,1,3,3,4,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,2,5,5,5,5],
[6,0,6,3,5,4,8,5],
[7,4,0,5,6,6,8,6],
[8,7,5,0,7,8,9,9],
[5,5,4,3,0,4,7,5],
[5,6,4,2,6,0,6,5],
[5,2,2,1,3,4,0,3],
[5,5,4,1,5,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,3,4,4,4,6],
[7,0,6,5,6,4,5,8],
[4,4,0,3,4,3,2,4],
[7,5,7,0,6,4,6,8],
[6,4,6,4,0,5,5,7],
[6,6,7,6,5,0,7,8],
[6,5,8,4,5,3,0,6],
[4,2,6,2,3,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,8,1,4,4,4,4],
[6,0,7,4,5,4,6,3],
[2,3,0,1,4,1,3,0],
[9,6,9,0,7,5,5,7],
[6,5,6,3,0,5,4,3],
[6,6,9,5,5,0,6,4],
[6,4,7,5,6,4,0,4],
[6,7,10,3,7,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,10,5,5,5,10],
[5,0,0,10,0,0,10,5],
[5,10,0,10,5,0,10,10],
[0,0,0,0,0,0,0,5],
[5,10,5,10,0,0,10,10],
[5,10,10,10,10,0,10,10],
[5,0,0,10,0,0,0,5],
[0,5,0,5,0,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,3,6,4,4,8],
[5,0,5,1,5,3,3,5],
[4,5,0,3,4,1,1,6],
[7,9,7,0,5,3,5,8],
[4,5,6,5,0,2,3,4],
[6,7,9,7,8,0,3,8],
[6,7,9,5,7,7,0,9],
[2,5,4,2,6,2,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,5,5,5,5,5],
[10,0,10,5,5,10,10,10],
[5,0,0,5,5,5,5,5],
[5,5,5,0,10,10,5,5],
[5,5,5,0,0,5,5,5],
[5,0,5,0,5,0,5,5],
[5,0,5,5,5,5,0,10],
[5,0,5,5,5,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,3,8,8,8,8],
[2,0,7,5,10,5,5,5],
[5,3,0,5,10,3,5,5],
[7,5,5,0,5,5,5,5],
[2,0,0,5,0,3,5,5],
[2,5,7,5,7,0,5,5],
[2,5,5,5,5,5,0,5],
[2,5,5,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,6,6,6,6,6],
[6,0,5,7,4,8,5,7],
[6,5,0,4,7,7,5,7],
[4,3,6,0,5,6,3,8],
[4,6,3,5,0,6,1,7],
[4,2,3,4,4,0,3,6],
[4,5,5,7,9,7,0,9],
[4,3,3,2,3,4,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,5,5,4,3,6],
[4,0,5,4,5,5,3,6],
[5,5,0,4,6,4,3,4],
[5,6,6,0,4,6,4,7],
[5,5,4,6,0,4,4,6],
[6,5,6,4,6,0,5,7],
[7,7,7,6,6,5,0,8],
[4,4,6,3,4,3,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,5,9,5,8,6],
[2,0,6,3,6,5,7,4],
[3,4,0,3,7,5,7,6],
[5,7,7,0,10,6,7,5],
[1,4,3,0,0,2,4,4],
[5,5,5,4,8,0,7,6],
[2,3,3,3,6,3,0,4],
[4,6,4,5,6,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,4,6,6,5,7],
[2,0,6,5,5,7,3,8],
[4,4,0,8,5,8,4,10],
[6,5,2,0,3,6,5,10],
[4,5,5,7,0,7,5,8],
[4,3,2,4,3,0,4,8],
[5,7,6,5,5,6,0,9],
[3,2,0,0,2,2,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,8,0,3,4,4,3],
[8,0,9,5,5,5,5,8],
[2,1,0,1,2,4,1,1],
[10,5,9,0,7,7,9,8],
[7,5,8,3,0,5,6,6],
[6,5,6,3,5,0,3,6],
[6,5,9,1,4,7,0,4],
[7,2,9,2,4,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,3,4,4,3,2],
[8,0,6,5,4,5,5,5],
[6,4,0,5,3,5,3,4],
[7,5,5,0,5,6,6,5],
[6,6,7,5,0,7,8,6],
[6,5,5,4,3,0,3,3],
[7,5,7,4,2,7,0,3],
[8,5,6,5,4,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,6,5,4,9,5],
[5,0,4,6,3,5,8,5],
[6,6,0,8,5,7,8,7],
[4,4,2,0,2,3,8,4],
[5,7,5,8,0,6,8,7],
[6,5,3,7,4,0,9,7],
[1,2,2,2,2,1,0,1],
[5,5,3,6,3,3,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,3,4,4,4,3],
[7,0,5,5,4,5,5,4],
[6,5,0,6,5,4,5,4],
[7,5,4,0,6,6,6,5],
[6,6,5,4,0,5,6,5],
[6,5,6,4,5,0,6,4],
[6,5,5,4,4,4,0,4],
[7,6,6,5,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,5,7,5,6,5],
[4,0,7,6,6,5,5,6],
[2,3,0,4,7,3,2,3],
[5,4,6,0,7,6,6,6],
[3,4,3,3,0,4,3,3],
[5,5,7,4,6,0,4,4],
[4,5,8,4,7,6,0,4],
[5,4,7,4,7,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,4,7,6,7],
[5,0,5,4,4,4,5,5],
[5,5,0,3,4,3,3,5],
[5,6,7,0,4,6,3,5],
[6,6,6,6,0,5,6,8],
[3,6,7,4,5,0,5,5],
[4,5,7,7,4,5,0,7],
[3,5,5,5,2,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,7,5,7,5,7],
[3,0,5,5,5,4,5,5],
[3,5,0,3,3,5,4,5],
[3,5,7,0,4,6,7,6],
[5,5,7,6,0,5,4,7],
[3,6,5,4,5,0,4,6],
[5,5,6,3,6,6,0,7],
[3,5,5,4,3,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,9,8,9,7,5,7],
[4,0,7,7,8,4,5,8],
[1,3,0,6,7,5,5,2],
[2,3,4,0,5,2,1,5],
[1,2,3,5,0,1,3,5],
[3,6,5,8,9,0,6,7],
[5,5,5,9,7,4,0,5],
[3,2,8,5,5,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,8,4,7,7,7],
[6,0,5,5,6,7,4,5],
[3,5,0,5,4,8,5,4],
[2,5,5,0,3,8,4,5],
[6,4,6,7,0,8,7,5],
[3,3,2,2,2,0,3,2],
[3,6,5,6,3,7,0,4],
[3,5,6,5,5,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,8,3,4,10,6],
[6,0,6,4,6,5,6,5],
[6,4,0,5,8,6,6,5],
[2,6,5,0,5,6,8,8],
[7,4,2,5,0,6,7,5],
[6,5,4,4,4,0,9,8],
[0,4,4,2,3,1,0,3],
[4,5,5,2,5,2,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,8,5,5,6,10],
[4,0,6,6,5,4,7,9],
[2,4,0,5,4,3,4,8],
[2,4,5,0,2,2,2,5],
[5,5,6,8,0,6,5,8],
[5,6,7,8,4,0,6,8],
[4,3,6,8,5,4,0,8],
[0,1,2,5,2,2,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,7,9,6,3,6],
[7,0,4,6,6,6,5,6],
[6,6,0,8,5,8,4,9],
[3,4,2,0,5,3,3,4],
[1,4,5,5,0,4,0,5],
[4,4,2,7,6,0,1,1],
[7,5,6,7,10,9,0,6],
[4,4,1,6,5,9,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,6,6,6,6,6],
[6,0,10,7,10,4,7,7],
[3,0,0,5,5,3,4,5],
[4,3,5,0,10,3,4,2],
[4,0,5,0,0,2,1,1],
[4,6,7,7,8,0,7,4],
[4,3,6,6,9,3,0,3],
[4,3,5,8,9,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,5,2,2,3,3],
[6,0,4,7,2,3,5,2],
[7,6,0,5,5,1,7,2],
[5,3,5,0,4,5,4,4],
[8,8,5,6,0,6,6,5],
[8,7,9,5,4,0,7,2],
[7,5,3,6,4,3,0,4],
[7,8,8,6,5,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,1,3,5,6,0,5],
[5,0,6,6,6,6,3,2],
[9,4,0,9,6,10,2,5],
[7,4,1,0,3,3,0,5],
[5,4,4,7,0,6,4,4],
[4,4,0,7,4,0,1,5],
[10,7,8,10,6,9,0,5],
[5,8,5,5,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,5,9,8,8,8],
[4,0,8,5,9,7,7,8],
[3,2,0,4,5,4,4,4],
[5,5,6,0,8,7,7,6],
[1,1,5,2,0,4,2,5],
[2,3,6,3,6,0,3,7],
[2,3,6,3,8,7,0,6],
[2,2,6,4,5,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,9,4,4,6,6],
[7,0,9,8,9,6,9,5],
[3,1,0,5,3,3,7,3],
[1,2,5,0,2,2,6,1],
[6,1,7,8,0,4,6,5],
[6,4,7,8,6,0,6,6],
[4,1,3,4,4,4,0,5],
[4,5,7,9,5,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,2,1,5,2,0,3],
[3,0,0,4,4,1,3,5],
[8,10,0,8,7,5,7,8],
[9,6,2,0,9,6,5,3],
[5,6,3,1,0,3,1,4],
[8,9,5,4,7,0,7,6],
[10,7,3,5,9,3,0,7],
[7,5,2,7,6,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,3,5,3,7,10],
[2,0,0,0,5,3,7,2],
[5,10,0,5,5,5,10,10],
[7,10,5,0,5,3,7,7],
[5,5,5,5,0,0,5,7],
[7,7,5,7,10,0,7,7],
[3,3,0,3,5,3,0,5],
[0,8,0,3,3,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,5,5,7,8,3],
[7,0,10,7,5,10,7,6],
[5,0,0,2,0,2,5,3],
[5,3,8,0,3,5,8,6],
[5,5,10,7,0,5,5,8],
[3,0,8,5,5,0,5,6],
[2,3,5,2,5,5,0,3],
[7,4,7,4,2,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,8,5,0,8,5,8],
[7,0,8,5,5,8,5,8],
[2,2,0,0,0,2,7,0],
[5,5,10,0,2,10,10,5],
[10,5,10,8,0,10,10,10],
[2,2,8,0,0,0,5,0],
[5,5,3,0,0,5,0,3],
[2,2,10,5,0,10,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,7,7,5,6,5],
[6,0,7,3,7,5,6,3],
[3,3,0,6,6,1,2,1],
[3,7,4,0,6,5,4,0],
[3,3,4,4,0,1,0,0],
[5,5,9,5,9,0,6,5],
[4,4,8,6,10,4,0,4],
[5,7,9,10,10,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,4,8,4,5,6],
[6,0,8,7,10,4,6,7],
[4,2,0,2,7,3,4,3],
[6,3,8,0,9,5,7,8],
[2,0,3,1,0,2,2,2],
[6,6,7,5,8,0,6,5],
[5,4,6,3,8,4,0,6],
[4,3,7,2,8,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,10,5,5,5,5,5],
[0,0,0,0,0,0,0,0],
[0,10,0,0,5,0,0,0],
[5,10,10,0,5,0,5,0],
[5,10,5,5,0,5,0,5],
[5,10,10,10,5,0,5,0],
[5,10,10,5,10,5,0,5],
[5,10,10,10,5,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,10,10,5,8,10,6],
[6,0,10,9,5,7,6,6],
[0,0,0,3,0,0,0,2],
[0,1,7,0,5,5,3,3],
[5,5,10,5,0,6,5,6],
[2,3,10,5,4,0,5,5],
[0,4,10,7,5,5,0,6],
[4,4,8,7,4,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,5,4,6,4,5],
[7,0,4,4,5,7,5,6],
[4,6,0,6,4,7,6,6],
[5,6,4,0,5,6,6,5],
[6,5,6,5,0,7,8,7],
[4,3,3,4,3,0,6,5],
[6,5,4,4,2,4,0,6],
[5,4,4,5,3,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,4,4,8,6,3],
[6,0,6,5,4,7,6,5],
[5,4,0,6,3,7,7,4],
[6,5,4,0,3,5,6,3],
[6,6,7,7,0,9,8,5],
[2,3,3,5,1,0,4,2],
[4,4,3,4,2,6,0,5],
[7,5,6,7,5,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,0,0,0,8,3,8],
[5,0,0,0,0,8,3,10],
[10,10,0,8,3,8,8,10],
[10,10,2,0,5,8,5,10],
[10,10,7,5,0,8,8,10],
[2,2,2,2,2,0,2,7],
[7,7,2,5,2,8,0,7],
[2,0,0,0,0,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,4,6,6,7,4],
[4,0,5,3,5,4,7,4],
[5,5,0,3,5,6,5,2],
[6,7,7,0,5,6,8,5],
[4,5,5,5,0,5,8,5],
[4,6,4,4,5,0,6,2],
[3,3,5,2,2,4,0,4],
[6,6,8,5,5,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,4,8,0,8,8],
[6,0,3,3,8,0,5,8],
[7,7,0,6,5,6,5,6],
[6,7,4,0,9,6,5,8],
[2,2,5,1,0,2,0,4],
[10,10,4,4,8,0,8,9],
[2,5,5,5,10,2,0,9],
[2,2,4,2,6,1,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,8,7,6,5,7],
[5,0,8,7,5,6,5,5],
[2,2,0,2,3,3,3,4],
[2,3,8,0,5,5,4,7],
[3,5,7,5,0,5,6,5],
[4,4,7,5,5,0,4,7],
[5,5,7,6,4,6,0,6],
[3,5,6,3,5,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,5,0,5,10,5],
[10,0,5,10,0,10,10,5],
[5,5,0,5,5,5,5,10],
[5,0,5,0,0,5,10,5],
[10,10,5,10,0,10,10,5],
[5,0,5,5,0,0,5,5],
[0,0,5,0,0,5,0,5],
[5,5,0,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,5,6,6,5,8],
[4,0,7,4,6,6,7,7],
[3,3,0,4,6,3,4,4],
[5,6,6,0,5,7,7,6],
[4,4,4,5,0,4,5,2],
[4,4,7,3,6,0,5,4],
[5,3,6,3,5,5,0,5],
[2,3,6,4,8,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,4,0,4,4,9],
[10,0,10,10,10,5,4,10],
[5,0,0,9,5,0,4,9],
[6,0,1,0,1,1,4,10],
[10,0,5,9,0,5,4,9],
[6,5,10,9,5,0,9,9],
[6,6,6,6,6,1,0,10],
[1,0,1,0,1,1,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,0,0,0,0,3,3],
[6,0,3,3,0,3,3,3],
[10,7,0,6,7,3,6,6],
[10,7,4,0,7,3,3,6],
[10,10,3,3,0,3,3,6],
[10,7,7,7,7,0,3,3],
[7,7,4,7,7,7,0,7],
[7,7,4,4,4,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,7,7,8,7,8],
[5,0,8,3,10,10,5,8],
[3,2,0,0,10,8,5,10],
[3,7,10,0,10,10,10,10],
[3,0,0,0,0,8,3,6],
[2,0,2,0,2,0,2,7],
[3,5,5,0,7,8,0,6],
[2,2,0,0,4,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,4,5,5,6,5],
[6,0,8,7,5,5,6,7],
[3,2,0,4,4,4,4,4],
[6,3,6,0,5,4,5,5],
[5,5,6,5,0,5,7,4],
[5,5,6,6,5,0,7,6],
[4,4,6,5,3,3,0,4],
[5,3,6,5,6,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,10,0,10,5,5],
[5,0,5,5,5,5,5,5],
[5,5,0,10,0,10,10,5],
[0,5,0,0,0,5,0,0],
[10,5,10,10,0,10,10,10],
[0,5,0,5,0,0,0,0],
[5,5,0,10,0,10,0,0],
[5,5,5,10,0,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,5,5,5,10,5],
[0,0,5,5,5,5,10,0],
[5,5,0,0,5,5,5,5],
[5,5,10,0,10,10,5,5],
[5,5,5,0,0,0,5,0],
[5,5,5,0,10,0,5,5],
[0,0,5,5,5,5,0,0],
[5,10,5,5,10,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,4,6,6,5,4],
[6,0,6,5,5,6,5,4],
[5,4,0,4,6,3,4,5],
[6,5,6,0,5,5,5,4],
[4,5,4,5,0,4,2,1],
[4,4,7,5,6,0,6,5],
[5,5,6,5,8,4,0,4],
[6,6,5,6,9,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,4,4,3,6,5],
[5,0,3,4,5,3,5,6],
[8,7,0,3,4,5,8,5],
[6,6,7,0,4,4,7,6],
[6,5,6,6,0,3,7,5],
[7,7,5,6,7,0,8,6],
[4,5,2,3,3,2,0,5],
[5,4,5,4,5,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,3,5,9,5,4],
[5,0,2,5,2,4,0,3],
[6,8,0,4,5,7,4,4],
[7,5,6,0,6,8,4,5],
[5,8,5,4,0,7,2,4],
[1,6,3,2,3,0,5,1],
[5,10,6,6,8,5,0,5],
[6,7,6,5,6,9,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,7,3,6,5,6],
[5,0,7,4,3,5,7,4],
[5,3,0,3,2,4,7,4],
[3,6,7,0,6,5,8,5],
[7,7,8,4,0,6,9,7],
[4,5,6,5,4,0,7,1],
[5,3,3,2,1,3,0,2],
[4,6,6,5,3,9,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,8,5,5,6,7],
[5,0,3,8,2,5,7,7],
[4,7,0,8,8,8,7,7],
[2,2,2,0,2,3,2,2],
[5,8,2,8,0,5,6,7],
[5,5,2,7,5,0,5,2],
[4,3,3,8,4,5,0,3],
[3,3,3,8,3,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,2,6,4,4,5,5],
[7,0,4,8,7,7,6,5],
[8,6,0,6,8,7,7,5],
[4,2,4,0,5,5,3,5],
[6,3,2,5,0,4,2,3],
[6,3,3,5,6,0,5,4],
[5,4,3,7,8,5,0,5],
[5,5,5,5,7,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,4,4,4,4,2],
[5,0,9,2,3,4,2,1],
[5,1,0,2,2,2,2,1],
[6,8,8,0,7,4,6,5],
[6,7,8,3,0,4,6,6],
[6,6,8,6,6,0,6,5],
[6,8,8,4,4,4,0,5],
[8,9,9,5,4,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,3,3,5,2,3,1],
[9,0,5,6,6,5,7,8],
[7,5,0,10,4,5,5,6],
[7,4,0,0,3,4,3,5],
[5,4,6,7,0,3,4,4],
[8,5,5,6,7,0,8,8],
[7,3,5,7,6,2,0,5],
[9,2,4,5,6,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,4,7,3],
[5,0,6,4,6,5,3,3],
[5,4,0,3,8,5,4,6],
[5,6,7,0,6,6,8,4],
[5,4,2,4,0,5,5,5],
[6,5,5,4,5,0,5,4],
[3,7,6,2,5,5,0,5],
[7,7,4,6,5,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,5,3,2,3,4],
[6,0,6,8,6,4,7,8],
[5,4,0,6,5,3,5,7],
[5,2,4,0,1,2,4,4],
[7,4,5,9,0,3,4,6],
[8,6,7,8,7,0,4,7],
[7,3,5,6,6,6,0,5],
[6,2,3,6,4,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,5,5,0,5,5],
[5,0,10,0,5,5,5,5],
[0,0,0,0,0,0,0,0],
[5,10,10,0,10,5,5,10],
[5,5,10,0,0,0,0,5],
[10,5,10,5,10,0,10,10],
[5,5,10,5,10,0,0,5],
[5,5,10,0,5,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,3,3,5,3,2],
[7,0,5,3,3,6,6,3],
[7,5,0,4,4,6,5,3],
[7,7,6,0,5,6,5,4],
[7,7,6,5,0,5,7,6],
[5,4,4,4,5,0,6,3],
[7,4,5,5,3,4,0,7],
[8,7,7,6,4,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,0,5,0,10,5],
[0,0,5,0,0,0,5,5],
[5,5,0,5,5,5,10,5],
[10,10,5,0,10,5,10,5],
[5,10,5,0,0,0,10,5],
[10,10,5,5,10,0,10,5],
[0,5,0,0,0,0,0,5],
[5,5,5,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,4,5,4,5,3],
[8,0,5,6,5,4,7,4],
[7,5,0,7,6,7,6,6],
[6,4,3,0,4,3,4,3],
[5,5,4,6,0,5,6,4],
[6,6,3,7,5,0,6,4],
[5,3,4,6,4,4,0,3],
[7,6,4,7,6,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,6,6,8,4,3],
[6,0,6,4,7,5,4,3],
[4,4,0,5,6,6,4,3],
[4,6,5,0,4,4,4,5],
[4,3,4,6,0,3,3,4],
[2,5,4,6,7,0,6,5],
[6,6,6,6,7,4,0,5],
[7,7,7,5,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,1,5,2,3,6,2],
[5,0,3,5,5,4,8,5],
[9,7,0,6,9,4,10,5],
[5,5,4,0,5,1,5,2],
[8,5,1,5,0,2,6,1],
[7,6,6,9,8,0,6,1],
[4,2,0,5,4,4,0,5],
[8,5,5,8,9,9,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,2,1,3,5,5,8],
[7,0,3,5,7,9,8,7],
[8,7,0,3,5,7,6,10],
[9,5,7,0,7,7,7,8],
[7,3,5,3,0,3,5,5],
[5,1,3,3,7,0,8,7],
[5,2,4,3,5,2,0,5],
[2,3,0,2,5,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,2,6,3,3,5,5],
[7,0,7,7,4,9,4,4],
[8,3,0,6,5,6,5,4],
[4,3,4,0,5,5,5,6],
[7,6,5,5,0,6,8,8],
[7,1,4,5,4,0,3,3],
[5,6,5,5,2,7,0,2],
[5,6,6,4,2,7,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,5,6,5,5,7],
[2,0,4,5,5,2,4,5],
[2,6,0,4,6,4,6,7],
[5,5,6,0,6,3,6,7],
[4,5,4,4,0,3,6,6],
[5,8,6,7,7,0,4,6],
[5,6,4,4,4,6,0,6],
[3,5,3,3,4,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,8,5,5,5,7],
[3,0,1,7,2,4,5,3],
[4,9,0,8,4,7,5,7],
[2,3,2,0,2,2,3,0],
[5,8,6,8,0,6,6,7],
[5,6,3,8,4,0,3,6],
[5,5,5,7,4,7,0,6],
[3,7,3,10,3,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,2,1,5,10,3],
[6,0,5,6,6,8,10,6],
[5,5,0,5,5,5,5,5],
[8,4,5,0,3,5,10,6],
[9,4,5,7,0,4,10,8],
[5,2,5,5,6,0,8,4],
[0,0,5,0,0,2,0,1],
[7,4,5,4,2,6,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,5,5,10,5,5],
[5,0,10,5,0,10,5,5],
[0,0,0,5,0,10,5,5],
[5,5,5,0,5,10,10,5],
[5,10,10,5,0,10,5,5],
[0,0,0,0,0,0,0,0],
[5,5,5,0,5,10,0,5],
[5,5,5,5,5,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,4,4,4,8,7],
[3,0,2,6,2,3,6,2],
[6,8,0,6,6,6,5,8],
[6,4,4,0,5,6,9,6],
[6,8,4,5,0,4,5,5],
[6,7,4,4,6,0,6,7],
[2,4,5,1,5,4,0,5],
[3,8,2,4,5,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,10,7,5,2,7],
[7,0,4,8,8,7,7,7],
[4,6,0,9,8,5,4,6],
[0,2,1,0,1,4,0,6],
[3,2,2,9,0,4,3,6],
[5,3,5,6,6,0,5,7],
[8,3,6,10,7,5,0,9],
[3,3,4,4,4,3,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,0,3,3,5,5],
[7,0,6,3,3,6,8,7],
[4,4,0,0,5,2,7,4],
[10,7,10,0,5,10,7,7],
[7,7,5,5,0,5,5,4],
[7,4,8,0,5,0,5,7],
[5,2,3,3,5,5,0,7],
[5,3,6,3,6,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,4,6,6,3,10],
[7,0,7,7,10,10,4,10],
[7,3,0,4,10,3,7,10],
[6,3,6,0,6,6,3,10],
[4,0,0,4,0,3,4,4],
[4,0,7,4,7,0,4,7],
[7,6,3,7,6,6,0,10],
[0,0,0,0,6,3,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,5,9,4,5,8,6],
[1,0,1,4,4,2,0,5],
[5,9,0,8,7,6,8,8],
[1,6,2,0,5,3,1,6],
[6,6,3,5,0,6,5,5],
[5,8,4,7,4,0,7,4],
[2,10,2,9,5,3,0,6],
[4,5,2,4,5,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,2,3,0,0,6,2],
[10,0,2,5,5,3,10,2],
[8,8,0,3,3,3,8,3],
[7,5,7,0,5,5,8,7],
[10,5,7,5,0,5,10,7],
[10,7,7,5,5,0,10,2],
[4,0,2,2,0,0,0,2],
[8,8,7,3,3,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,2,2,2,2,5],
[4,0,9,4,6,2,4,7],
[5,1,0,2,2,2,1,6],
[8,6,8,0,5,6,3,8],
[8,4,8,5,0,6,6,6],
[8,8,8,4,4,0,5,8],
[8,6,9,7,4,5,0,7],
[5,3,4,2,4,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,1,6,1,5,3,2],
[7,0,2,6,4,5,4,4],
[9,8,0,9,6,4,7,8],
[4,4,1,0,1,1,1,5],
[9,6,4,9,0,6,6,7],
[5,5,6,9,4,0,4,5],
[7,6,3,9,4,6,0,8],
[8,6,2,5,3,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,3,3,6,6,3],
[7,0,10,7,7,3,6,3],
[4,0,0,7,3,3,6,3],
[7,3,3,0,0,3,3,0],
[7,3,7,10,0,3,3,0],
[4,7,7,7,7,0,10,7],
[4,4,4,7,7,0,0,3],
[7,7,7,10,10,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,6,7,6,7,2],
[4,0,4,4,5,5,4,4],
[7,6,0,5,7,7,6,5],
[4,6,5,0,3,4,5,3],
[3,5,3,7,0,6,7,3],
[4,5,3,6,4,0,5,5],
[3,6,4,5,3,5,0,3],
[8,6,5,7,7,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,4,6,6,6,2,6],
[9,0,6,7,7,8,5,8],
[6,4,0,7,3,3,4,4],
[4,3,3,0,3,3,3,2],
[4,3,7,7,0,3,2,7],
[4,2,7,7,7,0,4,7],
[8,5,6,7,8,6,0,6],
[4,2,6,8,3,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,1,1,4,1,7],
[5,0,3,3,0,3,0,2],
[2,7,0,3,2,5,2,6],
[9,7,7,0,4,3,0,6],
[9,10,8,6,0,4,6,10],
[6,7,5,7,6,0,6,6],
[9,10,8,10,4,4,0,9],
[3,8,4,4,0,4,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,6,5,5,8,6],
[5,0,5,4,5,5,6,7],
[5,5,0,4,4,4,4,4],
[4,6,6,0,5,6,6,5],
[5,5,6,5,0,5,8,6],
[5,5,6,4,5,0,5,7],
[2,4,6,4,2,5,0,2],
[4,3,6,5,4,3,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,3,5,6,8,5,8],
[2,0,5,5,8,5,7,2],
[7,5,0,10,8,8,7,7],
[5,5,0,0,6,8,5,5],
[4,2,2,4,0,2,2,2],
[2,5,2,2,8,0,4,2],
[5,3,3,5,8,6,0,3],
[2,8,3,5,8,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,5,5,6,5,7],
[3,0,4,5,4,6,5,5],
[5,6,0,6,7,8,8,8],
[5,5,4,0,5,7,5,7],
[5,6,3,5,0,6,6,7],
[4,4,2,3,4,0,4,6],
[5,5,2,5,4,6,0,4],
[3,5,2,3,3,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,4,4,4,4,4],
[4,0,5,6,5,5,4,4],
[6,5,0,6,7,6,5,6],
[6,4,4,0,6,6,4,4],
[6,5,3,4,0,6,7,5],
[6,5,4,4,4,0,4,3],
[6,6,5,6,3,6,0,3],
[6,6,4,6,5,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,6,6,7,7,3],
[3,0,2,3,6,2,5,3],
[6,8,0,3,8,7,7,4],
[4,7,7,0,7,5,6,5],
[4,4,2,3,0,3,3,3],
[3,8,3,5,7,0,7,4],
[3,5,3,4,7,3,0,4],
[7,7,6,5,7,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,5,5,3,5,4],
[5,0,5,4,5,4,5,3],
[7,5,0,4,6,5,5,4],
[5,6,6,0,7,6,5,6],
[5,5,4,3,0,3,3,4],
[7,6,5,4,7,0,5,4],
[5,5,5,5,7,5,0,4],
[6,7,6,4,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,4,5,2,5,2],
[4,0,6,2,3,4,4,2],
[6,4,0,3,5,5,4,4],
[6,8,7,0,3,4,9,6],
[5,7,5,7,0,4,7,4],
[8,6,5,6,6,0,5,7],
[5,6,6,1,3,5,0,3],
[8,8,6,4,6,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,3,5,3,7,2],
[4,0,9,5,5,5,4,4],
[3,1,0,1,3,2,1,2],
[7,5,9,0,7,7,5,5],
[5,5,7,3,0,3,6,3],
[7,5,8,3,7,0,7,4],
[3,6,9,5,4,3,0,4],
[8,6,8,5,7,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,3,6,3,2,5],
[6,0,5,5,7,5,4,5],
[7,5,0,3,7,6,3,6],
[7,5,7,0,7,6,4,6],
[4,3,3,3,0,3,3,2],
[7,5,4,4,7,0,3,6],
[8,6,7,6,7,7,0,5],
[5,5,4,4,8,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,5,10,10,5,10],
[5,0,10,10,10,10,10,10],
[0,0,0,0,0,0,5,10],
[5,0,10,0,10,10,10,10],
[0,0,10,0,0,10,5,10],
[0,0,10,0,0,0,5,10],
[5,0,5,0,5,5,0,5],
[0,0,0,0,0,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,2,8,6,6,3,3],
[4,0,3,8,6,8,3,4],
[8,7,0,8,7,6,5,9],
[2,2,2,0,1,2,1,2],
[4,4,3,9,0,8,5,5],
[4,2,4,8,2,0,2,4],
[7,7,5,9,5,8,0,8],
[7,6,1,8,5,6,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,5,4,5,8],
[5,0,6,6,7,4,5,6],
[6,4,0,6,3,4,5,6],
[5,4,4,0,4,3,4,6],
[5,3,7,6,0,3,6,7],
[6,6,6,7,7,0,5,10],
[5,5,5,6,4,5,0,8],
[2,4,4,4,3,0,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,3,3,7,4,4],
[7,0,6,3,3,5,6,4],
[5,4,0,3,4,6,5,4],
[7,7,7,0,5,5,7,4],
[7,7,6,5,0,6,6,6],
[3,5,4,5,4,0,5,5],
[6,4,5,3,4,5,0,4],
[6,6,6,6,4,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,6,3,3,4,4,4],
[8,0,5,5,7,4,7,6],
[4,5,0,4,5,4,7,5],
[7,5,6,0,5,5,5,6],
[7,3,5,5,0,4,3,4],
[6,6,6,5,6,0,5,7],
[6,3,3,5,7,5,0,4],
[6,4,5,4,6,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,5,5,5,7,5],
[3,0,2,5,0,5,7,5],
[5,8,0,3,3,5,5,5],
[5,5,7,0,5,5,5,7],
[5,10,7,5,0,5,7,7],
[5,5,5,5,5,0,2,2],
[3,3,5,5,3,8,0,2],
[5,5,5,3,3,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,7,8,5,7,7],
[5,0,8,5,6,6,6,8],
[2,2,0,4,5,5,1,6],
[3,5,6,0,5,6,3,6],
[2,4,5,5,0,4,3,5],
[5,4,5,4,6,0,5,5],
[3,4,9,7,7,5,0,6],
[3,2,4,4,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,4,4,7,5,5,5],
[0,0,2,2,0,0,0,0],
[6,8,0,2,8,5,5,5],
[6,8,8,0,6,3,3,3],
[3,10,2,4,0,3,5,3],
[5,10,5,7,7,0,5,3],
[5,10,5,7,5,5,0,5],
[5,10,5,7,7,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,5,8,5,5,2],
[10,0,5,8,8,8,8,2],
[5,5,0,5,5,7,5,5],
[5,2,5,0,8,5,5,2],
[2,2,5,2,0,5,2,0],
[5,2,3,5,5,0,3,2],
[5,2,5,5,8,7,0,2],
[8,8,5,8,10,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,7,4,6,7,7],
[7,0,6,9,5,6,8,7],
[3,4,0,6,3,3,5,6],
[3,1,4,0,2,2,3,3],
[6,5,7,8,0,4,5,7],
[4,4,7,8,6,0,4,5],
[3,2,5,7,5,6,0,6],
[3,3,4,7,3,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,5,4,7,6,6],
[7,0,3,6,4,7,5,6],
[5,7,0,5,3,5,6,4],
[5,4,5,0,3,6,5,5],
[6,6,7,7,0,8,5,6],
[3,3,5,4,2,0,5,4],
[4,5,4,5,5,5,0,3],
[4,4,6,5,4,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,5,5,5],
[5,0,5,5,10,10,5,5],
[5,5,0,5,10,5,5,10],
[5,5,5,0,5,5,5,10],
[5,0,0,5,0,5,5,5],
[5,0,5,5,5,0,5,5],
[5,5,5,5,5,5,0,10],
[5,5,0,0,5,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,7,6,7,6,6],
[5,0,7,4,7,5,6,4],
[3,3,0,3,8,5,5,5],
[3,6,7,0,7,5,5,6],
[4,3,2,3,0,3,3,5],
[3,5,5,5,7,0,4,6],
[4,4,5,5,7,6,0,7],
[4,6,5,4,5,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,4,4,4,5,4],
[6,0,6,5,5,8,5,8],
[5,4,0,3,4,4,4,4],
[6,5,7,0,8,8,5,5],
[6,5,6,2,0,5,2,5],
[6,2,6,2,5,0,5,5],
[5,5,6,5,8,5,0,4],
[6,2,6,5,5,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,3,1,3,2,3],
[6,0,4,4,4,4,4,3],
[6,6,0,4,3,4,3,6],
[7,6,6,0,5,3,3,6],
[9,6,7,5,0,5,4,5],
[7,6,6,7,5,0,8,5],
[8,6,7,7,6,2,0,4],
[7,7,4,4,5,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,3,4,4,1,4,5],
[9,0,5,8,6,8,10,7],
[7,5,0,7,5,7,7,7],
[6,2,3,0,7,4,9,7],
[6,4,5,3,0,3,5,4],
[9,2,3,6,7,0,8,6],
[6,0,3,1,5,2,0,2],
[5,3,3,3,6,4,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,9,8,7,2,2,7],
[5,0,9,7,5,5,2,6],
[1,1,0,1,4,3,3,5],
[2,3,9,0,6,2,2,7],
[3,5,6,4,0,3,3,4],
[8,5,7,8,7,0,6,8],
[8,8,7,8,7,4,0,8],
[3,4,5,3,6,2,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,8,7,6,3,6],
[2,0,4,4,4,3,4,2],
[5,6,0,3,3,5,5,5],
[2,6,7,0,3,2,4,3],
[3,6,7,7,0,8,5,5],
[4,7,5,8,2,0,5,3],
[7,6,5,6,5,5,0,4],
[4,8,5,7,5,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,3,6,10,4,8],
[5,0,10,5,10,10,8,8],
[0,0,0,0,6,9,0,5],
[7,5,10,0,10,10,6,10],
[4,0,4,0,0,6,0,4],
[0,0,1,0,4,0,1,5],
[6,2,10,4,10,9,0,10],
[2,2,5,0,6,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,7,4,8,5,6],
[6,0,6,8,5,8,6,6],
[3,4,0,6,4,5,5,7],
[3,2,4,0,2,5,3,3],
[6,5,6,8,0,8,7,8],
[2,2,5,5,2,0,3,5],
[5,4,5,7,3,7,0,4],
[4,4,3,7,2,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,10,10,10,10,10],
[0,0,5,10,10,10,10,10],
[5,5,0,5,5,5,5,5],
[0,0,5,0,5,0,0,5],
[0,0,5,5,0,0,0,0],
[0,0,5,10,10,0,10,10],
[0,0,5,10,10,0,0,5],
[0,0,5,5,10,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,5,10,7,6,8],
[4,0,7,4,7,4,3,5],
[3,3,0,5,5,2,3,3],
[5,6,5,0,8,2,3,8],
[0,3,5,2,0,2,2,5],
[3,6,8,8,8,0,3,6],
[4,7,7,7,8,7,0,8],
[2,5,7,2,5,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,6,5,6,2,3,3],
[8,0,5,6,6,7,4,4],
[4,5,0,4,5,5,4,6],
[5,4,6,0,5,4,4,4],
[4,4,5,5,0,5,6,6],
[8,3,5,6,5,0,4,4],
[7,6,6,6,4,6,0,6],
[7,6,4,6,4,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,7,6,5,4,7],
[6,0,7,8,7,6,4,5],
[3,3,0,5,3,3,4,5],
[3,2,5,0,5,6,2,5],
[4,3,7,5,0,6,5,6],
[5,4,7,4,4,0,4,7],
[6,6,6,8,5,6,0,9],
[3,5,5,5,4,3,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,5,7,3,5,5],
[7,0,7,8,8,5,9,5],
[7,3,0,6,6,3,4,3],
[5,2,4,0,5,2,5,2],
[3,2,4,5,0,4,4,3],
[7,5,7,8,6,0,5,6],
[5,1,6,5,6,5,0,3],
[5,5,7,8,7,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,3,6,2,7,8],
[4,0,5,4,4,5,5,7],
[4,5,0,5,3,4,4,4],
[7,6,5,0,5,3,9,7],
[4,6,7,5,0,4,5,4],
[8,5,6,7,6,0,7,7],
[3,5,6,1,5,3,0,6],
[2,3,6,3,6,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,8,4,8,4,4],
[2,0,2,6,2,0,0,0],
[4,8,0,8,4,4,8,8],
[2,4,2,0,0,0,4,4],
[6,8,6,10,0,8,4,4],
[2,10,6,10,2,0,6,6],
[6,10,2,6,6,4,0,2],
[6,10,2,6,6,4,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,0,3,1,4,3],
[8,0,5,0,3,1,5,3],
[6,5,0,5,6,6,10,8],
[10,10,5,0,8,8,10,10],
[7,7,4,2,0,2,4,5],
[9,9,4,2,8,0,9,10],
[6,5,0,0,6,1,0,6],
[7,7,2,0,5,0,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,10,10,3,5,3,6],
[10,0,10,10,8,5,5,6],
[0,0,0,8,0,3,0,0],
[0,0,2,0,0,0,0,0],
[7,2,10,10,0,5,2,8],
[5,5,7,10,5,0,2,5],
[7,5,10,10,8,8,0,8],
[4,4,10,10,2,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,8,8,9,5,9],
[3,0,5,7,7,8,5,4],
[4,5,0,4,4,5,9,3],
[2,3,6,0,7,8,7,4],
[2,3,6,3,0,5,7,2],
[1,2,5,2,5,0,5,2],
[5,5,1,3,3,5,0,4],
[1,6,7,6,8,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,2,5,3,4,3,2],
[4,0,1,3,3,3,1,2],
[8,9,0,5,10,7,7,8],
[5,7,5,0,6,5,6,5],
[7,7,0,4,0,5,6,4],
[6,7,3,5,5,0,5,5],
[7,9,3,4,4,5,0,2],
[8,8,2,5,6,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,6,6,6,6,6],
[4,0,3,7,5,3,2,6],
[6,7,0,5,2,4,4,7],
[4,3,5,0,2,2,2,7],
[4,5,8,8,0,6,5,7],
[4,7,6,8,4,0,5,7],
[4,8,6,8,5,5,0,8],
[4,4,3,3,3,3,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,6,3,2,2,3,3],
[8,0,8,4,7,4,4,6],
[4,2,0,3,3,2,4,0],
[7,6,7,0,6,4,6,6],
[8,3,7,4,0,5,5,2],
[8,6,8,6,5,0,4,4],
[7,6,6,4,5,6,0,4],
[7,4,10,4,8,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,7,2,5,5,5,5],
[0,0,4,0,2,5,3,2],
[3,6,0,0,3,3,3,0],
[8,10,10,0,5,10,8,10],
[5,8,7,5,0,5,5,5],
[5,5,7,0,5,0,5,2],
[5,7,7,2,5,5,0,2],
[5,8,10,0,5,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,3,5,1,3,2],
[4,0,3,1,2,3,3,2],
[6,7,0,5,7,5,5,5],
[7,9,5,0,5,4,7,2],
[5,8,3,5,0,6,7,5],
[9,7,5,6,4,0,6,4],
[7,7,5,3,3,4,0,2],
[8,8,5,8,5,6,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,5,3,5,5,3],
[5,0,3,6,4,5,5,4],
[4,7,0,8,6,7,7,6],
[5,4,2,0,5,6,4,5],
[7,6,4,5,0,5,4,3],
[5,5,3,4,5,0,3,4],
[5,5,3,6,6,7,0,7],
[7,6,4,5,7,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,8,7,5,7,6,9],
[1,0,2,5,4,3,2,6],
[2,8,0,6,4,6,4,6],
[3,5,4,0,5,5,4,7],
[5,6,6,5,0,6,6,10],
[3,7,4,5,4,0,6,8],
[4,8,6,6,4,4,0,6],
[1,4,4,3,0,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,3,5,4,5,7],
[5,0,5,4,6,3,7,6],
[7,5,0,4,6,5,7,6],
[7,6,6,0,7,5,6,7],
[5,4,4,3,0,5,5,6],
[6,7,5,5,5,0,4,6],
[5,3,3,4,5,6,0,4],
[3,4,4,3,4,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,4,4,5,3,8],
[6,0,4,2,4,3,5,8],
[4,6,0,6,6,6,4,7],
[6,8,4,0,7,8,5,9],
[6,6,4,3,0,7,4,8],
[5,7,4,2,3,0,4,8],
[7,5,6,5,6,6,0,9],
[2,2,3,1,2,2,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,5,4,4,3,4],
[4,0,8,5,6,3,4,6],
[6,2,0,6,5,2,3,6],
[5,5,4,0,4,3,2,4],
[6,4,5,6,0,3,2,5],
[6,7,8,7,7,0,5,9],
[7,6,7,8,8,5,0,7],
[6,4,4,6,5,1,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,6,3,6,4,3],
[4,0,4,4,4,4,4,4],
[7,6,0,6,6,3,7,6],
[4,6,4,0,0,3,4,0],
[7,6,4,10,0,3,7,6],
[4,6,7,7,7,0,4,3],
[6,6,3,6,3,6,0,3],
[7,6,4,10,4,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,3,5,5,4,10],
[6,0,6,6,5,2,3,6],
[4,4,0,6,6,6,7,6],
[7,4,4,0,5,3,4,9],
[5,5,4,5,0,0,4,7],
[5,8,4,7,10,0,8,10],
[6,7,3,6,6,2,0,6],
[0,4,4,1,3,0,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,6,5,7,3,6],
[7,0,3,5,8,5,6,8],
[5,7,0,7,7,4,5,5],
[4,5,3,0,7,3,6,7],
[5,2,3,3,0,4,6,6],
[3,5,6,7,6,0,4,8],
[7,4,5,4,4,6,0,6],
[4,2,5,3,4,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,0,5,5,0,0,5],
[0,0,0,0,5,0,0,5],
[10,10,0,5,10,10,5,5],
[5,10,5,0,10,5,5,10],
[5,5,0,0,0,0,0,5],
[10,10,0,5,10,0,5,5],
[10,10,5,5,10,5,0,5],
[5,5,5,0,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,3,5,6,5,8],
[5,0,6,5,5,7,5,5],
[5,4,0,2,3,4,4,7],
[7,5,8,0,5,7,6,8],
[5,5,7,5,0,6,5,7],
[4,3,6,3,4,0,5,6],
[5,5,6,4,5,5,0,10],
[2,5,3,2,3,4,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,10,5,0,5,0],
[5,0,5,10,5,5,5,0],
[5,5,0,10,5,5,0,0],
[0,0,0,0,0,0,0,0],
[5,5,5,10,0,0,5,0],
[10,5,5,10,10,0,5,5],
[5,5,10,10,5,5,0,0],
[10,10,10,10,10,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,3,0,7,8,3],
[4,0,5,3,1,5,8,3],
[5,5,0,2,3,2,3,5],
[7,7,8,0,3,8,7,3],
[10,9,7,7,0,7,8,3],
[3,5,8,2,3,0,3,5],
[2,2,7,3,2,7,0,3],
[7,7,5,7,7,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,5,8,7,3,5,8],
[1,0,3,6,1,1,1,1],
[5,7,0,7,7,8,8,7],
[2,4,3,0,4,1,3,4],
[3,9,3,6,0,4,4,5],
[7,9,2,9,6,0,2,9],
[5,9,2,7,6,8,0,9],
[2,9,3,6,5,1,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,2,4,4,4,8],
[6,0,4,4,6,2,4,8],
[4,6,0,4,4,4,6,6],
[8,6,6,0,8,8,4,8],
[6,4,6,2,0,2,4,6],
[6,8,6,2,8,0,4,6],
[6,6,4,6,6,6,0,6],
[2,2,4,2,4,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,5,4,5,8,4],
[2,0,4,2,3,5,4,3],
[4,6,0,4,3,5,5,4],
[5,8,6,0,2,5,4,6],
[6,7,7,8,0,5,8,7],
[5,5,5,5,5,0,5,5],
[2,6,5,6,2,5,0,3],
[6,7,6,4,3,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,4,4,3,0],
[10,0,6,10,10,10,6,3],
[10,4,0,10,7,10,6,7],
[10,0,0,0,7,7,3,3],
[6,0,3,3,0,7,6,3],
[6,0,0,3,3,0,3,3],
[7,4,4,7,4,7,0,7],
[10,7,3,7,7,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,3,5,3,3,5],
[5,0,7,3,4,4,6,3],
[5,3,0,5,3,4,4,3],
[7,7,5,0,5,8,8,6],
[5,6,7,5,0,5,6,5],
[7,6,6,2,5,0,8,5],
[7,4,6,2,4,2,0,3],
[5,7,7,4,5,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,9,5,6,8,8,4],
[3,0,6,4,4,9,4,1],
[1,4,0,5,1,6,4,4],
[5,6,5,0,4,6,7,5],
[4,6,9,6,0,9,6,5],
[2,1,4,4,1,0,3,1],
[2,6,6,3,4,7,0,3],
[6,9,6,5,5,9,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,4,4,4,6],
[6,0,2,5,4,5,3,8],
[6,8,0,6,5,7,7,8],
[6,5,4,0,6,4,3,6],
[6,6,5,4,0,5,5,9],
[6,5,3,6,5,0,3,8],
[6,7,3,7,5,7,0,8],
[4,2,2,4,1,2,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,6,4,7,9],
[4,0,6,6,5,6,10,8],
[4,4,0,6,7,7,10,9],
[4,4,4,0,4,2,5,9],
[4,5,3,6,0,8,8,10],
[6,4,3,8,2,0,5,7],
[3,0,0,5,2,5,0,7],
[1,2,1,1,0,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,2,9,6,5,7,3],
[1,0,2,2,1,3,2,1],
[8,8,0,8,5,4,7,6],
[1,8,2,0,3,3,1,1],
[4,9,5,7,0,3,5,2],
[5,7,6,7,7,0,8,7],
[3,8,3,9,5,2,0,3],
[7,9,4,9,8,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,6,4,5,4,5],
[8,0,9,10,3,5,5,9],
[7,1,0,8,4,4,4,8],
[4,0,2,0,2,1,1,8],
[6,7,6,8,0,4,4,6],
[5,5,6,9,6,0,5,8],
[6,5,6,9,6,5,0,7],
[5,1,2,2,4,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,10,10,6,3,4,6],
[4,0,7,4,7,7,4,7],
[0,3,0,3,6,3,0,6],
[0,6,7,0,6,3,0,6],
[4,3,4,4,0,7,4,3],
[7,3,7,7,3,0,7,6],
[6,6,10,10,6,3,0,6],
[4,3,4,4,7,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,4,2,1,0,1],
[5,0,1,4,5,4,4,5],
[5,9,0,4,6,6,4,6],
[6,6,6,0,7,6,5,6],
[8,5,4,3,0,5,4,5],
[9,6,4,4,5,0,5,5],
[10,6,6,5,6,5,0,9],
[9,5,4,4,5,5,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,8,5,7,7,8,7],
[0,0,8,4,0,5,0,2],
[2,2,0,6,1,5,2,2],
[5,6,4,0,3,7,3,3],
[3,10,9,7,0,5,8,7],
[3,5,5,3,5,0,3,5],
[2,10,8,7,2,7,0,2],
[3,8,8,7,3,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,3,5,5,5,6],
[5,0,4,7,5,5,6,7],
[5,6,0,4,4,6,4,6],
[7,3,6,0,5,5,6,8],
[5,5,6,5,0,6,5,6],
[5,5,4,5,4,0,6,6],
[5,4,6,4,5,4,0,5],
[4,3,4,2,4,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,2,3,1,3,3,6],
[9,0,7,8,3,5,8,8],
[8,3,0,4,2,6,7,8],
[7,2,6,0,1,4,7,7],
[9,7,8,9,0,5,8,8],
[7,5,4,6,5,0,5,5],
[7,2,3,3,2,5,0,8],
[4,2,2,3,2,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,1,2,4,4,2,1],
[5,0,2,2,6,4,3,2],
[9,8,0,5,9,6,4,4],
[8,8,5,0,8,8,5,4],
[6,4,1,2,0,4,2,2],
[6,6,4,2,6,0,5,3],
[8,7,6,5,8,5,0,5],
[9,8,6,6,8,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,3,6,7,5,6],
[6,0,4,5,4,6,5,6],
[7,6,0,3,5,7,5,7],
[7,5,7,0,3,7,4,6],
[4,6,5,7,0,5,4,5],
[3,4,3,3,5,0,3,5],
[5,5,5,6,6,7,0,6],
[4,4,3,4,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,5,6,6,4,7],
[4,0,3,3,4,3,3,5],
[2,7,0,6,6,4,6,6],
[5,7,4,0,8,5,6,8],
[4,6,4,2,0,3,4,4],
[4,7,6,5,7,0,6,8],
[6,7,4,4,6,4,0,7],
[3,5,4,2,6,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,4,3,4,5,7,6],
[9,0,8,5,9,6,9,9],
[6,2,0,7,4,7,8,5],
[7,5,3,0,6,7,9,8],
[6,1,6,4,0,6,7,5],
[5,4,3,3,4,0,4,5],
[3,1,2,1,3,6,0,5],
[4,1,5,2,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,4,6,5,4,6],
[5,0,7,6,5,6,4,5],
[4,3,0,4,4,4,4,4],
[6,4,6,0,5,5,4,7],
[4,5,6,5,0,5,6,6],
[5,4,6,5,5,0,4,4],
[6,6,6,6,4,6,0,6],
[4,5,6,3,4,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,4,8,2,7,6,5],
[2,0,1,5,4,5,5,1],
[6,9,0,8,4,7,9,4],
[2,5,2,0,2,4,3,2],
[8,6,6,8,0,6,5,5],
[3,5,3,6,4,0,3,1],
[4,5,1,7,5,7,0,5],
[5,9,6,8,5,9,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,4,7,8,6,7],
[5,0,6,3,7,6,3,7],
[3,4,0,3,8,4,4,4],
[6,7,7,0,8,5,7,8],
[3,3,2,2,0,4,3,5],
[2,4,6,5,6,0,3,8],
[4,7,6,3,7,7,0,8],
[3,3,6,2,5,2,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,2,6,4,4,6],
[6,0,4,6,3,5,3,6],
[6,6,0,5,4,4,6,4],
[8,4,5,0,6,5,5,5],
[4,7,6,4,0,5,4,4],
[6,5,6,5,5,0,3,6],
[6,7,4,5,6,7,0,6],
[4,4,6,5,6,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,5,3,6,4,3],
[2,0,5,3,3,8,3,3],
[4,5,0,4,3,4,5,4],
[5,7,6,0,3,6,4,3],
[7,7,7,7,0,7,2,5],
[4,2,6,4,3,0,5,3],
[6,7,5,6,8,5,0,3],
[7,7,6,7,5,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,0,0,5,0,5,0],
[5,0,5,5,5,0,0,5],
[10,5,0,0,5,0,5,5],
[10,5,10,0,5,5,5,10],
[5,5,5,5,0,0,5,5],
[10,10,10,5,10,0,10,10],
[5,10,5,5,5,0,0,5],
[10,5,5,0,5,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,6,6,6,6,3],
[2,0,7,0,7,6,3,1],
[2,3,0,3,3,3,1,1],
[4,10,7,0,7,6,5,3],
[4,3,7,3,0,5,0,1],
[4,4,7,4,5,0,2,3],
[4,7,9,5,10,8,0,5],
[7,9,9,7,9,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,8,1,3,1,3],
[7,0,9,8,7,8,7,3],
[7,1,0,8,5,3,0,3],
[2,2,2,0,2,3,0,3],
[9,3,5,8,0,5,3,5],
[7,2,7,7,5,0,5,0],
[9,3,10,10,7,5,0,5],
[7,7,7,7,5,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,3,2,6,3,2],
[5,0,2,3,1,5,2,4],
[7,8,0,10,5,6,5,5],
[7,7,0,0,2,6,5,3],
[8,9,5,8,0,7,7,8],
[4,5,4,4,3,0,5,3],
[7,8,5,5,3,5,0,6],
[8,6,5,7,2,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,5,5,3,5,4],
[6,0,6,6,4,2,6,6],
[5,4,0,3,6,4,3,2],
[5,4,7,0,7,5,4,4],
[5,6,4,3,0,3,5,4],
[7,8,6,5,7,0,6,6],
[5,4,7,6,5,4,0,3],
[6,4,8,6,6,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,4,6,3,4,3],
[5,0,6,5,8,7,3,5],
[8,4,0,5,10,7,4,7],
[6,5,5,0,7,5,5,6],
[4,2,0,3,0,1,2,4],
[7,3,3,5,9,0,4,7],
[6,7,6,5,8,6,0,5],
[7,5,3,4,6,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,2,2,2,2,7],
[5,0,5,5,5,5,7,5],
[8,5,0,10,10,10,10,10],
[8,5,0,0,3,8,10,8],
[8,5,0,7,0,5,10,7],
[8,5,0,2,5,0,10,10],
[8,3,0,0,0,0,0,5],
[3,5,0,2,3,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,3,5,9,5,3],
[5,0,7,5,5,7,4,4],
[3,3,0,3,5,7,3,3],
[7,5,7,0,7,9,2,7],
[5,5,5,3,0,6,2,5],
[1,3,3,1,4,0,0,3],
[5,6,7,8,8,10,0,7],
[7,6,7,3,5,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,3,4,7,8,4],
[2,0,5,5,3,6,6,2],
[5,5,0,3,4,4,8,2],
[7,5,7,0,1,7,5,7],
[6,7,6,9,0,7,4,6],
[3,4,6,3,3,0,6,0],
[2,4,2,5,6,4,0,3],
[6,8,8,3,4,10,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,5,10,10,5,5],
[5,0,5,5,10,5,5,0],
[0,5,0,0,10,5,5,5],
[5,5,10,0,10,10,5,5],
[0,0,0,0,0,5,0,0],
[0,5,5,0,5,0,5,5],
[5,5,5,5,10,5,0,5],
[5,10,5,5,10,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,2,3,4,2,4],
[7,0,4,5,5,7,6,9],
[7,6,0,4,7,6,5,7],
[8,5,6,0,6,8,7,8],
[7,5,3,4,0,5,6,7],
[6,3,4,2,5,0,7,5],
[8,4,5,3,4,3,0,4],
[6,1,3,2,3,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,5,4,4,5,4],
[3,0,3,3,3,4,2,5],
[7,7,0,6,5,7,5,6],
[5,7,4,0,4,3,5,6],
[6,7,5,6,0,8,5,7],
[6,6,3,7,2,0,6,5],
[5,8,5,5,5,4,0,6],
[6,5,4,4,3,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,6,5,8,5,6],
[3,0,5,4,3,5,5,4],
[2,5,0,2,3,4,5,4],
[4,6,8,0,4,5,6,7],
[5,7,7,6,0,8,4,6],
[2,5,6,5,2,0,5,6],
[5,5,5,4,6,5,0,6],
[4,6,6,3,4,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,4,6,5,6,3],
[5,0,4,2,1,5,1,0],
[4,6,0,4,7,4,5,2],
[6,8,6,0,8,8,6,4],
[4,9,3,2,0,5,8,5],
[5,5,6,2,5,0,3,3],
[4,9,5,4,2,7,0,3],
[7,10,8,6,5,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,4,8,7,3,7,8],
[2,0,4,5,2,2,5,7],
[6,6,0,6,6,3,6,8],
[2,5,4,0,7,5,5,10],
[3,8,4,3,0,0,5,8],
[7,8,7,5,10,0,10,10],
[3,5,4,5,5,0,0,5],
[2,3,2,0,2,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,9,6,6,4,9,6],
[4,0,5,3,7,3,6,2],
[1,5,0,3,6,1,6,2],
[4,7,7,0,7,4,6,2],
[4,3,4,3,0,4,8,3],
[6,7,9,6,6,0,8,3],
[1,4,4,4,2,2,0,4],
[4,8,8,8,7,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,9,4,6,6,7,8],
[2,0,6,4,5,6,2,4],
[1,4,0,2,4,4,3,3],
[6,6,8,0,5,4,6,7],
[4,5,6,5,0,4,6,8],
[4,4,6,6,6,0,4,6],
[3,8,7,4,4,6,0,4],
[2,6,7,3,2,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,5,4,4,4,4],
[5,0,4,4,2,5,2,2],
[2,6,0,2,3,4,2,1],
[5,6,8,0,7,7,8,5],
[6,8,7,3,0,7,7,4],
[6,5,6,3,3,0,4,4],
[6,8,8,2,3,6,0,4],
[6,8,9,5,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,4,5,4,3,4],
[5,0,3,4,4,4,3,4],
[6,7,0,6,6,5,5,6],
[6,6,4,0,7,6,3,4],
[5,6,4,3,0,4,2,4],
[6,6,5,4,6,0,3,5],
[7,7,5,7,8,7,0,5],
[6,6,4,6,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,5,4,6,5,5],
[5,0,7,4,8,7,5,3],
[3,3,0,2,6,2,3,4],
[5,6,8,0,7,8,7,6],
[6,2,4,3,0,5,4,3],
[4,3,8,2,5,0,3,4],
[5,5,7,3,6,7,0,4],
[5,7,6,4,7,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,10,10,10,5,10],
[10,0,5,10,10,10,5,10],
[5,5,0,5,10,5,0,5],
[0,0,5,0,5,5,0,0],
[0,0,0,5,0,5,0,0],
[0,0,5,5,5,0,5,5],
[5,5,10,10,10,5,0,10],
[0,0,5,10,10,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,8,8,5,10,9],
[3,0,4,3,5,8,9,4],
[2,6,0,5,8,5,8,6],
[2,7,5,0,9,6,7,7],
[2,5,2,1,0,6,5,1],
[5,2,5,4,4,0,5,4],
[0,1,2,3,5,5,0,5],
[1,6,4,3,9,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,4,5,3,0,5,4],
[2,0,5,6,5,2,6,5],
[6,5,0,6,5,3,6,1],
[5,4,4,0,4,1,5,1],
[7,5,5,6,0,2,6,5],
[10,8,7,9,8,0,9,4],
[5,4,4,5,4,1,0,0],
[6,5,9,9,5,6,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,0,6,4,8,4],
[8,0,6,4,6,6,8,6],
[6,4,0,6,4,4,4,4],
[10,6,4,0,6,8,8,8],
[4,4,6,4,0,2,6,4],
[6,4,6,2,8,0,8,6],
[2,2,6,2,4,2,0,2],
[6,4,6,2,6,4,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,5,3,4,2,4],
[6,0,4,4,6,5,5,7],
[5,6,0,3,5,5,5,7],
[5,6,7,0,5,4,3,5],
[7,4,5,5,0,5,5,5],
[6,5,5,6,5,0,5,5],
[8,5,5,7,5,5,0,5],
[6,3,3,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,0,0,10,10],
[5,0,0,5,5,5,5,10],
[5,10,0,5,5,5,5,10],
[5,5,5,0,0,0,5,10],
[10,5,5,10,0,10,10,10],
[10,5,5,10,0,0,10,10],
[0,5,5,5,0,0,0,5],
[0,0,0,0,0,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,6,7,7,4,4],
[7,0,6,5,5,8,5,6],
[4,4,0,4,4,6,5,4],
[4,5,6,0,4,6,5,5],
[3,5,6,6,0,7,4,3],
[3,2,4,4,3,0,3,3],
[6,5,5,5,6,7,0,5],
[6,4,6,5,7,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,8,4,5,6,5],
[8,0,7,9,5,7,8,6],
[5,3,0,8,7,8,7,5],
[2,1,2,0,4,5,6,7],
[6,5,3,6,0,8,6,4],
[5,3,2,5,2,0,4,2],
[4,2,3,4,4,6,0,4],
[5,4,5,3,6,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,7,7,7,7,6],
[3,0,7,6,7,7,7,3],
[6,3,0,3,6,10,10,6],
[3,4,7,0,7,7,7,3],
[3,3,4,3,0,7,10,6],
[3,3,0,3,3,0,10,6],
[3,3,0,3,0,0,0,6],
[4,7,4,7,4,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,4,9,2,3,2,1],
[10,0,9,10,3,4,8,6],
[6,1,0,9,2,0,1,0],
[1,0,1,0,2,0,1,0],
[8,7,8,8,0,2,8,5],
[7,6,10,10,8,0,6,5],
[8,2,9,9,2,4,0,0],
[9,4,10,10,5,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,4,5,5,4,6,4],
[2,0,2,4,5,2,5,2],
[6,8,0,5,6,7,8,6],
[5,6,5,0,7,6,6,5],
[5,5,4,3,0,5,7,3],
[6,8,3,4,5,0,9,5],
[4,5,2,4,3,1,0,2],
[6,8,4,5,7,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,8,6,7,8,4],
[4,0,8,5,7,7,6,5],
[3,2,0,2,4,7,4,5],
[2,5,8,0,6,7,7,3],
[4,3,6,4,0,7,4,4],
[3,3,3,3,3,0,4,5],
[2,4,6,3,6,6,0,4],
[6,5,5,7,6,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,7,0,5,2,10,7],
[0,0,2,0,5,2,2,2],
[3,8,0,3,5,5,5,5],
[10,10,7,0,5,5,10,10],
[5,5,5,5,0,0,5,5],
[8,8,5,5,10,0,8,5],
[0,8,5,0,5,2,0,2],
[3,8,5,0,5,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,5,6,8,7,6],
[5,0,5,5,4,8,7,7],
[3,5,0,6,4,5,8,5],
[5,5,4,0,4,7,6,7],
[4,6,6,6,0,7,8,6],
[2,2,5,3,3,0,5,4],
[3,3,2,4,2,5,0,5],
[4,3,5,3,4,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,7,4,6,9],
[4,0,4,3,8,4,6,7],
[4,6,0,4,5,5,6,6],
[5,7,6,0,5,4,6,7],
[3,2,5,5,0,2,8,6],
[6,6,5,6,8,0,7,6],
[4,4,4,4,2,3,0,3],
[1,3,4,3,4,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,6,8,3,3,6],
[7,0,10,6,10,5,5,8],
[7,0,0,6,7,0,2,5],
[4,4,4,0,7,2,2,5],
[2,0,3,3,0,0,0,3],
[7,5,10,8,10,0,7,8],
[7,5,8,8,10,3,0,6],
[4,2,5,5,7,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,8,8,5,8,3,8],
[7,0,7,5,5,5,2,7],
[2,3,0,5,5,5,5,8],
[2,5,5,0,2,5,5,5],
[5,5,5,8,0,8,5,5],
[2,5,5,5,2,0,5,5],
[7,8,5,5,5,5,0,5],
[2,3,2,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,0,4,2,0,4,2],
[6,0,1,4,2,3,4,2],
[10,9,0,9,7,8,7,5],
[6,6,1,0,4,3,1,2],
[8,8,3,6,0,8,3,5],
[10,7,2,7,2,0,4,5],
[6,6,3,9,7,6,0,5],
[8,8,5,8,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,5,8,6,8,6],
[0,0,2,0,3,3,5,3],
[5,8,0,0,3,6,7,6],
[5,10,10,0,8,6,7,8],
[2,7,7,2,0,3,4,8],
[4,7,4,4,7,0,7,5],
[2,5,3,3,6,3,0,6],
[4,7,4,2,2,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,6,6,2,4,3],
[7,0,7,4,7,2,4,6],
[4,3,0,4,4,1,4,2],
[4,6,6,0,6,2,4,5],
[4,3,6,4,0,1,4,3],
[8,8,9,8,9,0,7,5],
[6,6,6,6,6,3,0,5],
[7,4,8,5,7,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,3,6,4,4,5],
[6,0,6,6,6,6,6,4],
[5,4,0,5,4,5,4,5],
[7,4,5,0,5,6,4,6],
[4,4,6,5,0,5,5,4],
[6,4,5,4,5,0,5,4],
[6,4,6,6,5,5,0,5],
[5,6,5,4,6,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,6,6,6,10,4],
[2,0,6,6,6,0,8,4],
[4,4,0,8,2,4,4,6],
[4,4,2,0,0,2,4,6],
[4,4,8,10,0,2,6,6],
[4,10,6,8,8,0,8,4],
[0,2,6,6,4,2,0,4],
[6,6,4,4,4,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,3,1,2,1,8],
[2,0,4,3,2,2,2,7],
[4,6,0,5,2,4,3,7],
[7,7,5,0,4,7,5,7],
[9,8,8,6,0,6,4,10],
[8,8,6,3,4,0,3,9],
[9,8,7,5,6,7,0,9],
[2,3,3,3,0,1,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,1,5,5,5,6,4],
[4,0,4,9,9,7,9,7],
[9,6,0,9,9,5,6,9],
[5,1,1,0,8,4,7,8],
[5,1,1,2,0,1,3,5],
[5,3,5,6,9,0,10,8],
[4,1,4,3,7,0,0,7],
[6,3,1,2,5,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,4,1,10,4,4],
[6,0,9,5,5,10,9,4],
[5,1,0,5,5,5,9,5],
[6,5,5,0,1,10,8,0],
[9,5,5,9,0,10,8,4],
[0,0,5,0,0,0,4,0],
[6,1,1,2,2,6,0,1],
[6,6,5,10,6,10,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,6,5,7,5,5],
[3,0,6,5,4,3,4,2],
[3,4,0,4,2,3,4,4],
[4,5,6,0,2,2,3,2],
[5,6,8,8,0,5,5,4],
[3,7,7,8,5,0,6,3],
[5,6,6,7,5,4,0,3],
[5,8,6,8,6,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,0,4,4,4],
[10,0,0,4,2,8,4,4],
[10,10,0,4,6,8,4,4],
[10,6,6,0,2,8,4,6],
[10,8,4,8,0,8,4,8],
[6,2,2,2,2,0,6,6],
[6,6,6,6,6,4,0,10],
[6,6,6,4,2,4,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,5,5,5,6,7],
[5,0,6,2,6,4,4,6],
[4,4,0,2,2,1,4,4],
[5,8,8,0,4,4,8,7],
[5,4,8,6,0,4,6,6],
[5,6,9,6,6,0,6,8],
[4,6,6,2,4,4,0,7],
[3,4,6,3,4,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,9,6,5,4,10],
[0,0,5,6,3,5,1,8],
[5,5,0,4,3,5,5,5],
[1,4,6,0,3,3,4,7],
[4,7,7,7,0,7,3,7],
[5,5,5,7,3,0,5,8],
[6,9,5,6,7,5,0,9],
[0,2,5,3,3,2,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,8,4,2,6,6,4],
[6,0,6,3,2,6,6,5],
[2,4,0,4,0,1,2,5],
[6,7,6,0,0,4,4,2],
[8,8,10,10,0,9,6,5],
[4,4,9,6,1,0,2,6],
[4,4,8,6,4,8,0,6],
[6,5,5,8,5,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,9,5,6,5,5],
[4,0,0,4,0,0,0,0],
[5,10,0,4,6,6,1,1],
[1,6,6,0,6,6,1,1],
[5,10,4,4,0,1,0,0],
[4,10,4,4,9,0,0,0],
[5,10,9,9,10,10,0,1],
[5,10,9,9,10,10,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,8,6,6,7],
[5,0,7,4,7,7,6,7],
[4,3,0,5,6,4,4,6],
[4,6,5,0,7,8,6,6],
[2,3,4,3,0,4,4,3],
[4,3,6,2,6,0,6,7],
[4,4,6,4,6,4,0,7],
[3,3,4,4,7,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,6,6,6,3,6],
[3,0,3,3,3,6,0,6],
[3,7,0,3,3,6,3,3],
[4,7,7,0,3,7,7,3],
[4,7,7,7,0,7,4,3],
[4,4,4,3,3,0,0,0],
[7,10,7,3,6,10,0,6],
[4,4,7,7,7,10,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,5,5,5,5,5],
[0,0,5,5,0,5,5,0],
[5,5,0,5,5,5,0,5],
[5,5,5,0,5,0,0,5],
[5,10,5,5,0,5,5,5],
[5,5,5,10,5,0,5,5],
[5,5,10,10,5,5,0,5],
[5,10,5,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,7,2,3,2,3],
[6,0,6,8,3,4,4,4],
[5,4,0,6,2,2,2,3],
[3,2,4,0,3,2,1,1],
[8,7,8,7,0,5,6,5],
[7,6,8,8,5,0,4,4],
[8,6,8,9,4,6,0,6],
[7,6,7,9,5,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,6,5,6,6,7],
[6,0,7,8,6,5,6,6],
[3,3,0,4,2,4,2,3],
[4,2,6,0,2,3,3,4],
[5,4,8,8,0,6,5,7],
[4,5,6,7,4,0,5,5],
[4,4,8,7,5,5,0,5],
[3,4,7,6,3,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,7,8,8,5,8],
[3,0,6,6,4,6,3,4],
[5,4,0,6,6,6,3,6],
[3,4,4,0,6,5,5,6],
[2,6,4,4,0,6,4,6],
[2,4,4,5,4,0,5,4],
[5,7,7,5,6,5,0,7],
[2,6,4,4,4,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,0,4,4,0,7],
[6,0,7,3,7,4,3,10],
[6,3,0,6,3,7,6,6],
[10,7,4,0,7,4,7,10],
[6,3,7,3,0,4,3,6],
[6,6,3,6,6,0,6,6],
[10,7,4,3,7,4,0,10],
[3,0,4,0,4,4,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,2,3,3,5,6],
[4,0,7,6,5,4,6,7],
[5,3,0,2,5,2,5,7],
[8,4,8,0,6,6,8,6],
[7,5,5,4,0,6,5,7],
[7,6,8,4,4,0,6,8],
[5,4,5,2,5,4,0,8],
[4,3,3,4,3,2,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,6,3,5,6,4],
[6,0,5,5,6,6,5,5],
[6,5,0,8,6,7,6,5],
[4,5,2,0,2,5,6,5],
[7,4,4,8,0,4,6,3],
[5,4,3,5,6,0,6,4],
[4,5,4,4,4,4,0,4],
[6,5,5,5,7,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,6,3,6,6,7],
[2,0,3,4,1,3,4,3],
[5,7,0,7,3,4,5,7],
[4,6,3,0,5,4,4,6],
[7,9,7,5,0,7,6,8],
[4,7,6,6,3,0,4,6],
[4,6,5,6,4,6,0,7],
[3,7,3,4,2,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,7,3,3,3,7],
[3,0,6,3,6,3,3,3],
[7,4,0,4,4,7,4,4],
[3,7,6,0,3,3,3,0],
[7,4,6,7,0,3,3,4],
[7,7,3,7,7,0,7,7],
[7,7,6,7,7,3,0,4],
[3,7,6,10,6,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,10,10,5,10],
[5,0,5,0,10,10,10,10],
[5,5,0,0,10,10,5,10],
[5,10,10,0,10,10,10,10],
[0,0,0,0,0,5,5,0],
[0,0,0,0,5,0,0,5],
[5,0,5,0,5,10,0,5],
[0,0,0,0,10,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,10,7,2,10,10,5],
[3,0,5,5,5,3,3,3],
[0,5,0,0,0,3,0,0],
[3,5,10,0,5,8,8,5],
[8,5,10,5,0,8,8,5],
[0,7,7,2,2,0,5,5],
[0,7,10,2,2,5,0,0],
[5,7,10,5,5,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,6,1,7,4,4,4],
[8,0,5,6,6,6,6,9],
[4,5,0,5,2,4,3,7],
[9,4,5,0,7,3,3,7],
[3,4,8,3,0,6,6,6],
[6,4,6,7,4,0,6,7],
[6,4,7,7,4,4,0,7],
[6,1,3,3,4,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,8,4,7,4,4],
[5,0,5,5,6,9,5,7],
[3,5,0,6,6,9,6,6],
[2,5,4,0,5,8,2,4],
[6,4,4,5,0,8,5,5],
[3,1,1,2,2,0,3,2],
[6,5,4,8,5,7,0,6],
[6,3,4,6,5,8,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,3,2,5,7,2],
[5,0,7,1,3,6,5,3],
[7,3,0,4,5,5,5,5],
[7,9,6,0,5,9,7,2],
[8,7,5,5,0,8,7,3],
[5,4,5,1,2,0,4,2],
[3,5,5,3,3,6,0,3],
[8,7,5,8,7,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,5,5,5,4,3],
[4,0,4,4,3,4,5,0],
[5,6,0,6,6,4,7,5],
[5,6,4,0,6,4,4,1],
[5,7,4,4,0,4,5,1],
[5,6,6,6,6,0,5,4],
[6,5,3,6,5,5,0,3],
[7,10,5,9,9,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,9,5,10,5,5],
[5,0,1,5,5,6,6,5],
[5,9,0,5,9,5,10,9],
[1,5,5,0,5,2,6,5],
[5,5,1,5,0,6,1,1],
[0,4,5,8,4,0,5,4],
[5,4,0,4,9,5,0,8],
[5,5,1,5,9,6,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,6,7,6,5,6],
[5,0,5,9,7,9,6,8],
[6,5,0,7,7,8,6,7],
[4,1,3,0,3,4,3,2],
[3,3,3,7,0,7,3,7],
[4,1,2,6,3,0,3,5],
[5,4,4,7,7,7,0,7],
[4,2,3,8,3,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,7,4,6,6,5],
[6,0,4,6,5,7,6,6],
[8,6,0,7,6,9,5,7],
[3,4,3,0,5,5,5,5],
[6,5,4,5,0,6,4,4],
[4,3,1,5,4,0,4,4],
[4,4,5,5,6,6,0,5],
[5,4,3,5,6,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,5,4,3,6,4],
[4,0,5,5,5,2,7,5],
[6,5,0,7,5,3,6,4],
[5,5,3,0,4,4,6,7],
[6,5,5,6,0,5,7,6],
[7,8,7,6,5,0,6,8],
[4,3,4,4,3,4,0,5],
[6,5,6,3,4,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,6,4,5,4,3],
[4,0,4,5,5,4,5,4],
[5,6,0,8,6,4,5,4],
[4,5,2,0,4,2,3,1],
[6,5,4,6,0,7,6,4],
[5,6,6,8,3,0,4,5],
[6,5,5,7,4,6,0,4],
[7,6,6,9,6,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,4,7,7,4,4],
[4,0,5,5,7,4,4,4],
[3,5,0,3,7,5,5,4],
[6,5,7,0,8,5,5,4],
[3,3,3,2,0,3,3,1],
[3,6,5,5,7,0,2,3],
[6,6,5,5,7,8,0,6],
[6,6,6,6,9,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,8,8,5,6,7],
[4,0,3,2,7,2,5,1],
[5,7,0,7,8,6,4,5],
[2,8,3,0,5,2,3,1],
[2,3,2,5,0,2,3,1],
[5,8,4,8,8,0,6,8],
[4,5,6,7,7,4,0,2],
[3,9,5,9,9,2,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,8,6,6,5],
[5,0,3,5,4,3,7,6],
[5,7,0,7,9,5,6,5],
[5,5,3,0,5,3,7,6],
[2,6,1,5,0,1,6,3],
[4,7,5,7,9,0,6,8],
[4,3,4,3,4,4,0,7],
[5,4,5,4,7,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,4,4,5,4,5],
[2,0,7,3,3,3,4,6],
[5,3,0,5,5,5,6,5],
[6,7,5,0,3,3,5,7],
[6,7,5,7,0,4,6,7],
[5,7,5,7,6,0,7,7],
[6,6,4,5,4,3,0,6],
[5,4,5,3,3,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,6,5,4,4,5],
[5,0,7,6,9,7,7,7],
[7,3,0,8,8,4,4,6],
[4,4,2,0,5,4,4,6],
[5,1,2,5,0,2,5,4],
[6,3,6,6,8,0,6,7],
[6,3,6,6,5,4,0,4],
[5,3,4,4,6,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,0,5,5,5],
[5,0,5,5,5,5,5,10],
[5,5,0,5,5,5,5,10],
[5,5,5,0,5,5,5,10],
[10,5,5,5,0,10,10,10],
[5,5,5,5,0,0,0,5],
[5,5,5,5,0,10,0,5],
[5,0,0,0,0,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,8,6,8,8,4,8],
[6,0,4,8,6,8,6,6],
[2,6,0,8,4,4,2,6],
[4,2,2,0,4,4,4,6],
[2,4,6,6,0,6,2,6],
[2,2,6,6,4,0,2,6],
[6,4,8,6,8,8,0,8],
[2,4,4,4,4,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,6,4,4,4,5],
[6,0,5,7,6,6,5,7],
[6,5,0,9,8,8,5,5],
[4,3,1,0,6,6,5,5],
[6,4,2,4,0,5,5,4],
[6,4,2,4,5,0,6,2],
[6,5,5,5,5,4,0,5],
[5,3,5,5,6,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,6,2,6,6,6,6],
[8,0,9,5,9,9,6,6],
[4,1,0,2,2,7,6,6],
[8,5,8,0,8,7,7,6],
[4,1,8,2,0,7,7,6],
[4,1,3,3,3,0,7,3],
[4,4,4,3,3,3,0,3],
[4,4,4,4,4,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,5,5,5,5,8],
[2,0,0,3,3,3,5,3],
[5,10,0,7,5,5,7,8],
[5,7,3,0,3,5,8,5],
[5,7,5,7,0,5,5,8],
[5,7,5,5,5,0,5,8],
[5,5,3,2,5,5,0,3],
[2,7,2,5,2,2,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,7,3,4,6,5],
[7,0,4,5,4,4,6,4],
[5,6,0,6,3,4,7,5],
[3,5,4,0,0,2,5,2],
[7,6,7,10,0,5,9,5],
[6,6,6,8,5,0,7,5],
[4,4,3,5,1,3,0,4],
[5,6,5,8,5,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,3,4,6,5,4,3],
[1,0,3,1,6,5,2,1],
[7,7,0,3,8,7,6,3],
[6,9,7,0,8,7,5,6],
[4,4,2,2,0,5,4,2],
[5,5,3,3,5,0,4,3],
[6,8,4,5,6,6,0,2],
[7,9,7,4,8,7,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,5,6,6,5,6],
[5,0,8,5,6,5,4,5],
[4,2,0,4,5,3,3,4],
[5,5,6,0,4,4,6,3],
[4,4,5,6,0,3,5,5],
[4,5,7,6,7,0,5,6],
[5,6,7,4,5,5,0,5],
[4,5,6,7,5,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,4,5,5,6,7],
[4,0,4,4,6,8,6,8],
[6,6,0,4,6,7,6,8],
[6,6,6,0,4,7,6,8],
[5,4,4,6,0,5,5,9],
[5,2,3,3,5,0,5,6],
[4,4,4,4,5,5,0,5],
[3,2,2,2,1,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,2,7,4,7,6],
[3,0,7,5,3,1,2,3],
[3,3,0,5,4,1,1,1],
[8,5,5,0,5,5,6,6],
[3,7,6,5,0,1,2,1],
[6,9,9,5,9,0,4,6],
[3,8,9,4,8,6,0,5],
[4,7,9,4,9,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,0,3,7,0],
[10,0,3,4,7,7,7,10],
[10,7,0,4,7,7,10,10],
[10,6,6,0,7,3,10,6],
[10,3,3,3,0,6,10,6],
[7,3,3,7,4,0,10,3],
[3,3,0,0,0,0,0,3],
[10,0,0,4,4,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,6,8,5,7,9],
[4,0,5,5,7,5,7,8],
[3,5,0,4,6,4,8,6],
[4,5,6,0,5,6,7,6],
[2,3,4,5,0,4,4,8],
[5,5,6,4,6,0,7,7],
[3,3,2,3,6,3,0,4],
[1,2,4,4,2,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,6,3,7,3,7],
[4,0,4,8,3,7,2,4],
[5,6,0,9,7,7,6,9],
[4,2,1,0,2,4,4,4],
[7,7,3,8,0,10,3,7],
[3,3,3,6,0,0,3,3],
[7,8,4,6,7,7,0,9],
[3,6,1,6,3,7,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,5,3,4,5,4],
[6,0,6,5,3,6,4,3],
[5,4,0,4,4,5,4,4],
[5,5,6,0,6,8,8,5],
[7,7,6,4,0,7,7,6],
[6,4,5,2,3,0,3,3],
[5,6,6,2,3,7,0,5],
[6,7,6,5,4,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,0,0,0,0,0,0],
[5,0,5,5,5,5,5,0],
[10,5,0,5,10,5,0,0],
[10,5,5,0,5,5,0,0],
[10,5,0,5,0,5,0,0],
[10,5,5,5,5,0,5,5],
[10,5,10,10,10,5,0,0],
[10,10,10,10,10,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,7,5,6,0,4],
[7,0,7,5,3,6,4,6],
[7,3,0,6,5,7,5,5],
[3,5,4,0,2,3,1,6],
[5,7,5,8,0,5,3,7],
[4,4,3,7,5,0,2,6],
[10,6,5,9,7,8,0,6],
[6,4,5,4,3,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,0,5,5,0,5,0],
[5,0,5,5,5,0,5,0],
[10,5,0,5,5,0,5,0],
[5,5,5,0,0,5,0,0],
[5,5,5,10,0,5,5,5],
[10,10,10,5,5,0,5,0],
[5,5,5,10,5,5,0,5],
[10,10,10,10,5,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,8,5,7,7,9],
[4,0,3,2,1,3,5,7],
[5,7,0,5,5,4,4,8],
[2,8,5,0,3,4,4,8],
[5,9,5,7,0,4,4,8],
[3,7,6,6,6,0,8,7],
[3,5,6,6,6,2,0,5],
[1,3,2,2,2,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,4,7,0,0,0],
[7,0,4,7,7,7,7,7],
[6,6,0,10,10,6,3,3],
[6,3,0,0,3,3,3,3],
[3,3,0,7,0,3,3,3],
[10,3,4,7,7,0,0,0],
[10,3,7,7,7,10,0,4],
[10,3,7,7,7,10,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,1,4,8,4,2],
[6,0,5,5,6,9,6,4],
[8,5,0,4,7,9,8,6],
[9,5,6,0,8,8,7,5],
[6,4,3,2,0,7,5,1],
[2,1,1,2,3,0,2,2],
[6,4,2,3,5,8,0,4],
[8,6,4,5,9,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,5,0,5,5,5],
[0,0,5,0,0,5,0,0],
[5,5,0,0,0,10,0,5],
[5,10,10,0,0,10,0,5],
[10,10,10,10,0,10,5,10],
[5,5,0,0,0,0,0,0],
[5,10,10,10,5,10,0,5],
[5,10,5,5,0,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,3,6,3,5],
[4,0,5,6,5,6,5,5],
[4,5,0,4,2,5,3,5],
[5,4,6,0,4,5,5,6],
[7,5,8,6,0,7,5,6],
[4,4,5,5,3,0,4,7],
[7,5,7,5,5,6,0,6],
[5,5,5,4,4,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,7,4,0,0,0,1],
[10,0,7,6,8,6,5,6],
[3,3,0,2,1,3,1,3],
[6,4,8,0,4,6,1,4],
[10,2,9,6,0,5,7,3],
[10,4,7,4,5,0,5,1],
[10,5,9,9,3,5,0,6],
[9,4,7,6,7,9,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,1,5,2,4,7,3],
[3,0,0,4,2,4,7,0],
[9,10,0,8,2,4,9,10],
[5,6,2,0,2,2,5,2],
[8,8,8,8,0,5,7,8],
[6,6,6,8,5,0,9,6],
[3,3,1,5,3,1,0,3],
[7,10,0,8,2,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,1,2,4,1,2],
[7,0,4,3,4,5,4,5],
[6,6,0,7,8,9,3,7],
[9,7,3,0,5,6,5,5],
[8,6,2,5,0,9,3,6],
[6,5,1,4,1,0,0,4],
[9,6,7,5,7,10,0,8],
[8,5,3,5,4,6,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,8,8,7,8,5],
[5,0,8,10,10,10,10,8],
[2,2,0,2,2,2,2,2],
[2,0,8,0,10,7,5,5],
[2,0,8,0,0,2,5,0],
[3,0,8,3,8,0,3,5],
[2,0,8,5,5,7,0,5],
[5,2,8,5,10,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,7,6,6,6,3],
[6,0,3,4,4,3,6,4],
[5,7,0,5,7,5,8,6],
[3,6,5,0,6,6,5,4],
[4,6,3,4,0,5,5,3],
[4,7,5,4,5,0,5,5],
[4,4,2,5,5,5,0,4],
[7,6,4,6,7,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,7,7,7,4,8],
[2,0,3,6,6,6,4,5],
[5,7,0,8,7,7,5,5],
[3,4,2,0,2,5,4,4],
[3,4,3,8,0,8,4,6],
[3,4,3,5,2,0,5,4],
[6,6,5,6,6,5,0,6],
[2,5,5,6,4,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,6,3,4,4,6],
[3,0,3,3,1,2,2,2],
[4,7,0,7,6,6,4,8],
[4,7,3,0,3,5,2,5],
[7,9,4,7,0,5,5,6],
[6,8,4,5,5,0,5,5],
[6,8,6,8,5,5,0,7],
[4,8,2,5,4,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,8,3,4,5,4,5],
[7,0,7,1,6,5,6,5],
[2,3,0,1,4,5,1,2],
[7,9,9,0,8,5,8,6],
[6,4,6,2,0,5,2,2],
[5,5,5,5,5,0,3,3],
[6,4,9,2,8,7,0,5],
[5,5,8,4,8,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,8,4,5,5,5,5],
[7,0,6,7,5,6,9,9],
[2,4,0,6,0,5,4,5],
[6,3,4,0,4,5,8,8],
[5,5,10,6,0,8,5,6],
[5,4,5,5,2,0,5,5],
[5,1,6,2,5,5,0,8],
[5,1,5,2,4,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,4,5,5,4],
[4,0,5,6,4,3,4,3],
[4,5,0,1,1,2,4,4],
[5,4,9,0,1,3,4,3],
[6,6,9,9,0,5,6,4],
[5,7,8,7,5,0,5,3],
[5,6,6,6,4,5,0,5],
[6,7,6,7,6,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,1,2,3,3,0,3],
[5,0,6,5,5,6,5,5],
[9,4,0,4,7,5,5,5],
[8,5,6,0,5,6,3,7],
[7,5,3,5,0,4,3,6],
[7,4,5,4,6,0,4,6],
[10,5,5,7,7,6,0,8],
[7,5,5,3,4,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,3,6,6,6,6],
[4,0,3,7,0,10,7,3],
[4,7,0,7,4,10,7,10],
[7,3,3,0,3,7,7,6],
[4,10,6,7,0,10,10,6],
[4,0,0,3,0,0,0,3],
[4,3,3,3,0,10,0,6],
[4,7,0,4,4,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,3,1,1,7,0,5],
[9,0,5,6,4,9,4,9],
[7,5,0,7,6,5,6,6],
[9,4,3,0,2,7,3,8],
[9,6,4,8,0,9,7,8],
[3,1,5,3,1,0,1,7],
[10,6,4,7,3,9,0,9],
[5,1,4,2,2,3,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,7,8,6,7,7],
[6,0,4,7,4,4,7,7],
[3,6,0,3,3,2,6,5],
[3,3,7,0,4,2,3,10],
[2,6,7,6,0,2,6,8],
[4,6,8,8,8,0,5,8],
[3,3,4,7,4,5,0,9],
[3,3,5,0,2,2,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,5,6,9,3,5],
[2,0,4,4,6,7,1,6],
[5,6,0,5,5,8,6,7],
[5,6,5,0,6,8,6,7],
[4,4,5,4,0,5,4,7],
[1,3,2,2,5,0,2,6],
[7,9,4,4,6,8,0,6],
[5,4,3,3,3,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,10,8,7,8,5,10],
[2,0,7,10,7,8,7,5],
[0,3,0,5,2,3,2,5],
[2,0,5,0,5,5,2,2],
[3,3,8,5,0,3,5,5],
[2,2,7,5,7,0,2,4],
[5,3,8,8,5,8,0,5],
[0,5,5,8,5,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,5,5,10,5,5],
[5,0,10,6,4,5,5,4],
[0,0,0,5,0,1,4,0],
[5,4,5,0,4,5,5,4],
[5,6,10,6,0,5,5,4],
[0,5,9,5,5,0,4,0],
[5,5,6,5,5,6,0,5],
[5,6,10,6,6,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,5,5,10,10,10],
[5,0,5,5,0,5,5,5],
[0,5,0,5,5,10,5,10],
[5,5,5,0,0,5,5,5],
[5,10,5,10,0,5,5,5],
[0,5,0,5,5,0,0,0],
[0,5,5,5,5,10,0,10],
[0,5,0,5,5,10,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,5,4,7,6,7],
[3,0,4,2,5,3,1,5],
[3,6,0,3,4,5,4,6],
[5,8,7,0,7,4,4,6],
[6,5,6,3,0,5,4,6],
[3,7,5,6,5,0,5,7],
[4,9,6,6,6,5,0,7],
[3,5,4,4,4,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,5,6,5,5,3],
[3,0,5,3,3,3,5,4],
[6,5,0,6,6,6,5,6],
[5,7,4,0,4,7,5,6],
[4,7,4,6,0,4,4,5],
[5,7,4,3,6,0,5,3],
[5,5,5,5,6,5,0,3],
[7,6,4,4,5,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,4,5,5,6,7],
[7,0,7,6,6,5,7,5],
[4,3,0,4,7,1,4,6],
[6,4,6,0,5,3,6,7],
[5,4,3,5,0,3,5,5],
[5,5,9,7,7,0,8,7],
[4,3,6,4,5,2,0,6],
[3,5,4,3,5,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,6,5,6,4,6],
[3,0,6,1,4,1,2,4],
[5,4,0,4,3,5,3,4],
[4,9,6,0,6,8,5,8],
[5,6,7,4,0,5,4,6],
[4,9,5,2,5,0,4,5],
[6,8,7,5,6,6,0,6],
[4,6,6,2,4,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,1,3,3,5,5],
[7,0,7,4,5,5,6,6],
[6,3,0,1,3,3,4,2],
[9,6,9,0,6,5,6,6],
[7,5,7,4,0,3,7,5],
[7,5,7,5,7,0,7,5],
[5,4,6,4,3,3,0,3],
[5,4,8,4,5,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,0,3,0,3,6,4],
[9,0,1,10,3,5,6,6],
[10,9,0,9,9,5,10,6],
[7,0,1,0,1,3,6,4],
[10,7,1,9,0,3,6,6],
[7,5,5,7,7,0,5,4],
[4,4,0,4,4,5,0,6],
[6,4,4,6,4,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,4,4,6,3,6],
[5,0,6,4,4,4,5,6],
[6,4,0,5,3,6,4,7],
[6,6,5,0,3,6,4,7],
[6,6,7,7,0,4,4,7],
[4,6,4,4,6,0,3,5],
[7,5,6,6,6,7,0,7],
[4,4,3,3,3,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,4,4,6,4,6],
[4,0,6,4,2,6,6,4],
[6,4,0,4,2,4,6,2],
[6,6,6,0,2,8,8,6],
[6,8,8,8,0,6,8,4],
[4,4,6,2,4,0,4,2],
[6,4,4,2,2,6,0,4],
[4,6,8,4,6,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,6,2,6,6,6],
[4,0,6,6,4,4,5,5],
[3,4,0,2,2,3,5,3],
[4,4,8,0,4,5,6,7],
[8,6,8,6,0,7,5,7],
[4,6,7,5,3,0,6,6],
[4,5,5,4,5,4,0,5],
[4,5,7,3,3,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,3,2,1,2,2],
[7,0,3,4,5,5,4,3],
[7,7,0,4,5,5,6,4],
[7,6,6,0,6,5,5,3],
[8,5,5,4,0,4,5,4],
[9,5,5,5,6,0,5,5],
[8,6,4,5,5,5,0,3],
[8,7,6,7,6,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,9,5,5,3],
[5,0,5,7,7,6,5,4],
[4,5,0,6,7,2,3,4],
[4,3,4,0,6,5,5,5],
[1,3,3,4,0,5,4,2],
[5,4,8,5,5,0,7,7],
[5,5,7,5,6,3,0,3],
[7,6,6,5,8,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,8,5,5,7,6],
[3,0,3,3,1,4,5,5],
[2,7,0,4,5,3,7,7],
[2,7,6,0,1,3,4,3],
[5,9,5,9,0,5,7,8],
[5,6,7,7,5,0,7,6],
[3,5,3,6,3,3,0,7],
[4,5,3,7,2,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,5,5,6,5,3],
[6,0,8,6,7,6,5,5],
[6,2,0,4,4,6,3,5],
[5,4,6,0,3,6,4,3],
[5,3,6,7,0,7,5,5],
[4,4,4,4,3,0,5,4],
[5,5,7,6,5,5,0,6],
[7,5,5,7,5,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,1,5,6,5,5,6],
[9,0,4,9,5,5,10,9],
[9,6,0,10,5,6,10,10],
[5,1,0,0,5,2,10,5],
[4,5,5,5,0,1,9,9],
[5,5,4,8,9,0,9,9],
[5,0,0,0,1,1,0,5],
[4,1,0,5,1,1,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,8,7,4,5,6],
[3,0,1,2,2,3,3,2],
[6,9,0,5,7,7,5,6],
[2,8,5,0,6,3,5,7],
[3,8,3,4,0,2,2,5],
[6,7,3,7,8,0,7,6],
[5,7,5,5,8,3,0,7],
[4,8,4,3,5,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,4,8,4,8],
[4,0,2,6,4,6,3,4],
[4,8,0,9,6,10,3,10],
[5,4,1,0,5,3,1,6],
[6,6,4,5,0,6,6,4],
[2,4,0,7,4,0,3,6],
[6,7,7,9,4,7,0,7],
[2,6,0,4,6,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,4,4,4,5,4],
[7,0,3,10,3,4,5,5],
[7,7,0,8,5,8,9,5],
[6,0,2,0,2,0,5,5],
[6,7,5,8,0,3,9,8],
[6,6,2,10,7,0,9,7],
[5,5,1,5,1,1,0,5],
[6,5,5,5,2,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,5,8,6,6,6],
[5,0,6,6,5,5,7,5],
[3,4,0,5,4,5,5,6],
[5,4,5,0,4,5,5,4],
[2,5,6,6,0,5,5,6],
[4,5,5,5,5,0,7,5],
[4,3,5,5,5,3,0,4],
[4,5,4,6,4,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,5,5,4,6,5],
[4,0,6,4,6,6,4,3],
[3,4,0,2,2,3,2,1],
[5,6,8,0,6,3,3,3],
[5,4,8,4,0,5,5,3],
[6,4,7,7,5,0,7,6],
[4,6,8,7,5,3,0,3],
[5,7,9,7,7,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,7,8,7,10,10],
[5,0,7,7,6,10,10,10],
[5,3,0,5,6,8,8,8],
[3,3,5,0,3,5,7,8],
[2,4,4,7,0,4,4,7],
[3,0,2,5,6,0,5,8],
[0,0,2,3,6,5,0,6],
[0,0,2,2,3,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,8,7,7,6,7],
[5,0,2,3,8,2,8,2],
[3,8,0,7,6,7,7,7],
[2,7,3,0,6,1,5,8],
[3,2,4,4,0,2,1,3],
[3,8,3,9,8,0,7,9],
[4,2,3,5,9,3,0,4],
[3,8,3,2,7,1,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,4,5,6,4,4],
[7,0,6,4,2,5,6,4],
[4,4,0,5,6,6,6,5],
[6,6,5,0,5,5,5,4],
[5,8,4,5,0,7,7,6],
[4,5,4,5,3,0,5,2],
[6,4,4,5,3,5,0,1],
[6,6,5,6,4,8,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,3,5,4,10,7,5],
[2,0,3,1,3,7,4,3],
[7,7,0,6,5,7,7,6],
[5,9,4,0,5,7,7,4],
[6,7,5,5,0,8,6,3],
[0,3,3,3,2,0,0,1],
[3,6,3,3,4,10,0,5],
[5,7,4,6,7,9,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,2,5,5,10],
[5,0,5,5,2,5,5,10],
[5,5,0,7,7,10,5,8],
[5,5,3,0,2,5,0,8],
[8,8,3,8,0,5,8,8],
[5,5,0,5,5,0,5,5],
[5,5,5,10,2,5,0,10],
[0,0,2,2,2,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,6,6,9,5,7],
[3,0,6,5,4,7,6,5],
[3,4,0,6,5,7,5,3],
[4,5,4,0,4,5,4,4],
[4,6,5,6,0,7,6,5],
[1,3,3,5,3,0,2,3],
[5,4,5,6,4,8,0,4],
[3,5,7,6,5,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,5,8,3,8,8],
[2,0,7,7,10,5,10,8],
[5,3,0,2,7,3,5,5],
[5,3,8,0,5,3,5,5],
[2,0,3,5,0,0,5,0],
[7,5,7,7,10,0,5,7],
[2,0,5,5,5,5,0,5],
[2,2,5,5,10,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,7,4,6,5],
[5,0,7,4,6,4,6,4],
[4,3,0,6,9,4,6,3],
[4,6,4,0,5,6,5,3],
[3,4,1,5,0,3,4,3],
[6,6,6,4,7,0,6,5],
[4,4,4,5,6,4,0,2],
[5,6,7,7,7,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,6,7,4,8,7],
[6,0,7,7,9,3,9,9],
[3,3,0,6,9,2,6,10],
[4,3,4,0,9,5,7,9],
[3,1,1,1,0,1,5,7],
[6,7,8,5,9,0,8,9],
[2,1,4,3,5,2,0,9],
[3,1,0,1,3,1,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,2,2,2,4,2,3],
[8,0,5,4,8,7,4,5],
[8,5,0,1,4,7,4,5],
[8,6,9,0,8,7,6,5],
[8,2,6,2,0,3,2,3],
[6,3,3,3,7,0,3,4],
[8,6,6,4,8,7,0,5],
[7,5,5,5,7,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,7,5,1,6,8],
[7,0,5,7,5,5,6,9],
[4,5,0,2,4,4,5,7],
[3,3,8,0,5,2,5,8],
[5,5,6,5,0,3,6,8],
[9,5,6,8,7,0,5,8],
[4,4,5,5,4,5,0,7],
[2,1,3,2,2,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,3,7,5,2,5],
[8,0,5,8,6,7,6,8],
[6,5,0,5,10,7,5,8],
[7,2,5,0,7,5,2,7],
[3,4,0,3,0,5,2,6],
[5,3,3,5,5,0,3,7],
[8,4,5,8,8,7,0,6],
[5,2,2,3,4,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,5,5,0],
[5,0,10,5,10,10,5,0],
[5,0,0,5,10,5,5,0],
[5,5,5,0,5,10,5,5],
[5,0,0,5,0,5,5,0],
[5,0,5,0,5,0,5,0],
[5,5,5,5,5,5,0,5],
[10,10,10,5,10,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,8,6,4,8,8,6],
[6,0,6,6,4,6,6,4],
[2,4,0,6,6,6,6,2],
[4,4,4,0,6,4,6,4],
[6,6,4,4,0,6,6,6],
[2,4,4,6,4,0,2,2],
[2,4,4,4,4,8,0,4],
[4,6,8,6,4,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,1,3,5,7,5,3],
[5,0,1,5,3,6,6,4],
[9,9,0,4,7,9,8,5],
[7,5,6,0,6,7,7,7],
[5,7,3,4,0,6,7,6],
[3,4,1,3,4,0,5,3],
[5,4,2,3,3,5,0,6],
[7,6,5,3,4,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,0,4,6,0,8,2],
[0,0,0,4,4,0,4,0],
[10,10,0,8,10,4,8,6],
[6,6,2,0,6,6,10,2],
[4,6,0,4,0,4,4,4],
[10,10,6,4,6,0,8,2],
[2,6,2,0,6,2,0,2],
[8,10,4,8,6,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,7,7,5,8,5],
[3,0,3,7,4,3,3,4],
[3,7,0,6,7,4,3,4],
[3,3,4,0,3,4,5,3],
[3,6,3,7,0,2,2,4],
[5,7,6,6,8,0,5,6],
[2,7,7,5,8,5,0,5],
[5,6,6,7,6,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,6,8,6,5,6],
[7,0,4,5,6,6,7,6],
[5,6,0,5,9,8,5,9],
[4,5,5,0,9,7,5,7],
[2,4,1,1,0,6,3,5],
[4,4,2,3,4,0,2,4],
[5,3,5,5,7,8,0,6],
[4,4,1,3,5,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,3,4,1,5,3],
[8,0,6,7,4,5,6,5],
[5,4,0,4,6,3,4,3],
[7,3,6,0,4,1,5,3],
[6,6,4,6,0,3,3,4],
[9,5,7,9,7,0,7,5],
[5,4,6,5,7,3,0,5],
[7,5,7,7,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,0,0,0,5],
[10,0,0,5,0,5,5,5],
[10,10,0,5,0,5,10,5],
[10,5,5,0,0,5,10,10],
[10,10,10,10,0,5,10,10],
[10,5,5,5,5,0,5,5],
[10,5,0,0,0,5,0,5],
[5,5,5,0,0,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,5,6,4,6,5],
[5,0,7,6,7,7,7,3],
[7,3,0,5,6,3,6,4],
[5,4,5,0,6,7,6,2],
[4,3,4,4,0,2,2,3],
[6,3,7,3,8,0,7,3],
[4,3,4,4,8,3,0,4],
[5,7,6,8,7,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,5,0,0,5,5],
[10,0,5,5,5,5,5,5],
[10,5,0,5,5,5,5,5],
[5,5,5,0,5,5,0,5],
[10,5,5,5,0,5,5,5],
[10,5,5,5,5,0,5,10],
[5,5,5,10,5,5,0,5],
[5,5,5,5,5,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,7,6,6,8,6],
[6,0,8,3,5,6,5,7],
[3,2,0,1,3,5,5,7],
[3,7,9,0,4,6,9,9],
[4,5,7,6,0,9,8,7],
[4,4,5,4,1,0,5,5],
[2,5,5,1,2,5,0,7],
[4,3,3,1,3,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,8,4,7,4,6],
[5,0,6,7,6,7,7,6],
[6,4,0,7,6,5,7,5],
[2,3,3,0,2,4,1,1],
[6,4,4,8,0,3,3,6],
[3,3,5,6,7,0,7,5],
[6,3,3,9,7,3,0,6],
[4,4,5,9,4,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,5,2,4,4,3],
[5,0,6,5,4,5,5,4],
[8,4,0,4,4,6,4,4],
[5,5,6,0,4,5,5,1],
[8,6,6,6,0,6,7,4],
[6,5,4,5,4,0,4,4],
[6,5,6,5,3,6,0,5],
[7,6,6,9,6,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,10,5,10,0,5,10],
[0,0,0,0,0,0,0,0],
[0,10,0,5,5,0,0,0],
[5,10,5,0,10,5,5,5],
[0,10,5,0,0,0,5,5],
[10,10,10,5,10,0,5,10],
[5,10,10,5,5,5,0,10],
[0,10,10,5,5,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,3,2,3,5,3],
[5,0,5,3,2,3,3,3],
[5,5,0,6,5,6,6,6],
[7,7,4,0,2,10,7,7],
[8,8,5,8,0,8,5,5],
[7,7,4,0,2,0,7,3],
[5,7,4,3,5,3,0,3],
[7,7,4,3,5,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,8,7,5,3,6],
[6,0,5,7,6,5,6,6],
[4,5,0,7,6,7,3,6],
[2,3,3,0,4,5,3,4],
[3,4,4,6,0,3,5,6],
[5,5,3,5,7,0,5,7],
[7,4,7,7,5,5,0,6],
[4,4,4,6,4,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,2,4,5,7,4,7],
[3,0,0,0,2,3,3,3],
[8,10,0,5,7,7,10,10],
[6,10,5,0,8,10,5,5],
[5,8,3,2,0,8,5,5],
[3,7,3,0,2,0,3,5],
[6,7,0,5,5,7,0,8],
[3,7,0,5,5,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,8,5,5,4,4,6],
[6,0,8,7,5,6,7,6],
[2,2,0,3,4,2,2,3],
[5,3,7,0,4,4,4,5],
[5,5,6,6,0,4,4,6],
[6,4,8,6,6,0,6,7],
[6,3,8,6,6,4,0,7],
[4,4,7,5,4,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,6,6,6,6,6],
[7,0,7,10,4,10,4,6],
[4,3,0,6,4,6,7,6],
[4,0,4,0,4,6,4,6],
[4,6,6,6,0,6,7,6],
[4,0,4,4,4,0,4,6],
[4,6,3,6,3,6,0,3],
[4,4,4,4,4,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,3,2,3,0,3,0],
[10,0,5,9,5,9,10,10],
[7,5,0,5,7,5,5,5],
[8,1,5,0,3,3,8,8],
[7,5,3,7,0,7,7,7],
[10,1,5,7,3,0,8,8],
[7,0,5,2,3,2,0,0],
[10,0,5,2,3,2,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,0,0,1,1,1,5],
[7,0,4,2,5,2,1,6],
[10,6,0,4,5,6,5,8],
[10,8,6,0,6,5,5,8],
[9,5,5,4,0,4,4,7],
[9,8,4,5,6,0,4,9],
[9,9,5,5,6,6,0,9],
[5,4,2,2,3,1,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,4,6,6,4,6],
[4,0,8,8,10,8,8,10],
[4,2,0,0,2,0,0,2],
[6,2,10,0,10,6,6,6],
[4,0,8,0,0,4,4,2],
[4,2,10,4,6,0,0,2],
[6,2,10,4,6,10,0,6],
[4,0,8,4,8,8,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,4,0,4,1,4,0],
[9,0,8,5,8,5,8,1],
[6,2,0,2,6,2,5,2],
[10,5,8,0,4,5,8,5],
[6,2,4,6,0,2,4,1],
[9,5,8,5,8,0,8,0],
[6,2,5,2,6,2,0,2],
[10,9,8,5,9,10,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,4,8,7,6,6],
[6,0,5,8,8,8,4,4],
[5,5,0,4,8,6,3,6],
[6,2,6,0,7,6,5,6],
[2,2,2,3,0,1,2,3],
[3,2,4,4,9,0,4,6],
[4,6,7,5,8,6,0,8],
[4,6,4,4,7,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,8,5,5,7,7],
[4,0,4,8,4,4,4,7],
[2,6,0,7,5,3,5,7],
[2,2,3,0,3,5,5,4],
[5,6,5,7,0,4,5,6],
[5,6,7,5,6,0,5,5],
[3,6,5,5,5,5,0,5],
[3,3,3,6,4,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,5,7,7,5,5],
[3,0,4,5,7,4,6,3],
[2,6,0,5,6,5,6,3],
[5,5,5,0,5,8,3,4],
[3,3,4,5,0,4,3,5],
[3,6,5,2,6,0,4,5],
[5,4,4,7,7,6,0,2],
[5,7,7,6,5,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,8,4,10,10,6,8],
[6,0,4,0,10,6,6,6],
[2,6,0,6,10,6,6,6],
[6,10,4,0,10,6,6,10],
[0,0,0,0,0,2,2,0],
[0,4,4,4,8,0,2,4],
[4,4,4,4,8,8,0,4],
[2,4,4,0,10,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,5,4,3,9,3],
[4,0,5,4,6,6,7,5],
[6,5,0,4,3,6,9,3],
[5,6,6,0,4,4,8,2],
[6,4,7,6,0,5,6,5],
[7,4,4,6,5,0,8,4],
[1,3,1,2,4,2,0,2],
[7,5,7,8,5,6,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,2,0,6,2,0],
[10,0,2,4,10,8,4,6],
[10,8,0,4,10,8,4,6],
[8,6,6,0,6,6,2,4],
[10,0,0,4,0,8,2,4],
[4,2,2,4,2,0,4,0],
[8,6,6,8,8,6,0,4],
[10,4,4,6,6,10,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,1,4,6,3,4,3],
[6,0,5,6,5,4,5,4],
[9,5,0,7,5,5,5,6],
[6,4,3,0,6,5,5,6],
[4,5,5,4,0,5,4,5],
[7,6,5,5,5,0,5,6],
[6,5,5,5,6,5,0,5],
[7,6,4,4,5,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,6,6,3,4,6],
[3,0,5,6,4,1,0,6],
[3,5,0,7,5,2,1,5],
[4,4,3,0,3,2,0,5],
[4,6,5,7,0,3,2,5],
[7,9,8,8,7,0,5,8],
[6,10,9,10,8,5,0,8],
[4,4,5,5,5,2,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,2,3,8,2],
[5,0,4,5,3,3,6,1],
[5,6,0,6,4,4,5,1],
[5,5,4,0,3,5,4,3],
[8,7,6,7,0,6,7,5],
[7,7,6,5,4,0,7,6],
[2,4,5,6,3,3,0,0],
[8,9,9,7,5,4,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,5,0,0,5,0],
[10,0,10,10,5,10,10,10],
[10,0,0,10,0,5,10,5],
[5,0,0,0,0,0,5,0],
[10,5,10,10,0,10,10,10],
[10,0,5,10,0,0,10,5],
[5,0,0,5,0,0,0,0],
[10,0,5,10,0,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,7,8,6,5,3,6],
[8,0,7,9,5,7,7,8],
[3,3,0,6,2,2,3,2],
[2,1,4,0,3,1,2,2],
[4,5,8,7,0,4,4,7],
[5,3,8,9,6,0,4,4],
[7,3,7,8,6,6,0,7],
[4,2,8,8,3,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,4,4,4,4,6],
[7,0,9,7,6,5,8,6],
[4,1,0,2,1,2,2,2],
[6,3,8,0,4,4,6,6],
[6,4,9,6,0,6,8,5],
[6,5,8,6,4,0,6,6],
[6,2,8,4,2,4,0,4],
[4,4,8,4,5,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,1,2,2,3,5],
[6,0,4,2,4,1,4,4],
[7,6,0,6,5,4,6,7],
[9,8,4,0,7,7,7,7],
[8,6,5,3,0,5,3,6],
[8,9,6,3,5,0,5,8],
[7,6,4,3,7,5,0,7],
[5,6,3,3,4,2,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,0,7,4,4,4],
[3,0,3,0,4,4,4,4],
[3,7,0,0,4,4,4,7],
[10,10,10,0,7,7,4,10],
[3,6,6,3,0,0,4,3],
[6,6,6,3,10,0,7,3],
[6,6,6,6,6,3,0,6],
[6,6,3,0,7,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,3,5,6,5,3],
[8,0,8,5,7,7,8,7],
[6,2,0,1,4,6,6,4],
[7,5,9,0,7,6,8,6],
[5,3,6,3,0,6,7,5],
[4,3,4,4,4,0,3,1],
[5,2,4,2,3,7,0,4],
[7,3,6,4,5,9,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,8,4,4,6,8],
[4,0,2,2,4,4,4,2],
[6,8,0,8,4,6,8,8],
[2,8,2,0,6,2,2,8],
[6,6,6,4,0,6,6,6],
[6,6,4,8,4,0,8,8],
[4,6,2,8,4,2,0,8],
[2,8,2,2,4,2,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,5,4,5,5,6],
[5,0,8,5,5,6,3,6],
[2,2,0,4,2,6,5,6],
[5,5,6,0,5,8,2,5],
[6,5,8,5,0,7,5,6],
[5,4,4,2,3,0,2,4],
[5,7,5,8,5,8,0,6],
[4,4,4,5,4,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,2,4,2,2,4],
[6,0,8,6,4,6,8,6],
[4,2,0,2,4,4,6,4],
[8,4,8,0,4,8,8,8],
[6,6,6,6,0,6,8,4],
[8,4,6,2,4,0,8,8],
[8,2,4,2,2,2,0,2],
[6,4,6,2,6,2,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,0,0,5,5,0],
[10,0,5,0,0,5,5,0],
[5,5,0,5,5,5,5,5],
[10,10,5,0,5,10,10,10],
[10,10,5,5,0,10,5,5],
[5,5,5,0,0,0,5,0],
[5,5,5,0,5,5,0,5],
[10,10,5,0,5,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,6,6,4,7,4],
[6,0,5,6,4,6,5,5],
[4,5,0,6,5,4,8,2],
[4,4,4,0,3,5,5,2],
[4,6,5,7,0,7,7,4],
[6,4,6,5,3,0,6,4],
[3,5,2,5,3,4,0,3],
[6,5,8,8,6,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,2,3,5,4,3,4],
[7,0,3,4,6,4,3,6],
[8,7,0,9,7,5,7,8],
[7,6,1,0,6,3,5,6],
[5,4,3,4,0,5,3,5],
[6,6,5,7,5,0,5,6],
[7,7,3,5,7,5,0,7],
[6,4,2,4,5,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,4,1,5,3,4],
[6,0,4,4,1,4,6,4],
[7,6,0,5,5,5,5,3],
[6,6,5,0,4,3,5,5],
[9,9,5,6,0,8,8,6],
[5,6,5,7,2,0,6,5],
[7,4,5,5,2,4,0,6],
[6,6,7,5,4,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,7,8,5,5,8],
[8,0,6,7,10,6,5,6],
[5,4,0,7,10,5,5,3],
[3,3,3,0,8,6,6,6],
[2,0,0,2,0,3,3,3],
[5,4,5,4,7,0,5,5],
[5,5,5,4,7,5,0,3],
[2,4,7,4,7,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,6,4,1,1,3],
[7,0,6,9,5,4,6,6],
[7,4,0,6,4,5,5,4],
[4,1,4,0,4,2,3,2],
[6,5,6,6,0,7,3,2],
[9,6,5,8,3,0,3,4],
[9,4,5,7,7,7,0,5],
[7,4,6,8,8,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,8,4,2,4,2,2],
[7,0,5,5,5,7,7,5],
[2,5,0,4,4,2,2,4],
[6,5,6,0,4,5,6,4],
[8,5,6,6,0,7,5,6],
[6,3,8,5,3,0,2,4],
[8,3,8,4,5,8,0,4],
[8,5,6,6,4,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,6,6,4,6,6],
[5,0,6,3,5,3,4,7],
[5,4,0,4,4,3,4,4],
[4,7,6,0,5,5,6,6],
[4,5,6,5,0,4,4,4],
[6,7,7,5,6,0,6,8],
[4,6,6,4,6,4,0,5],
[4,3,6,4,6,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,4,1,4,5,4],
[7,0,5,7,5,6,7,5],
[7,5,0,5,4,6,6,4],
[6,3,5,0,5,6,5,5],
[9,5,6,5,0,7,6,5],
[6,4,4,4,3,0,5,3],
[5,3,4,5,4,5,0,5],
[6,5,6,5,5,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,1,2,0,3,2],
[7,0,5,4,5,1,8,6],
[7,5,0,2,3,1,5,3],
[9,6,8,0,7,5,7,5],
[8,5,7,3,0,0,6,6],
[10,9,9,5,10,0,7,8],
[7,2,5,3,4,3,0,4],
[8,4,7,5,4,2,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,4,0,0,0,0],
[10,0,4,6,0,2,10,6],
[10,6,0,6,4,6,6,2],
[6,4,4,0,4,4,4,0],
[10,10,6,6,0,2,10,6],
[10,8,4,6,8,0,10,6],
[10,0,4,6,0,0,0,0],
[10,4,8,10,4,4,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,7,7,7,5,5],
[4,0,4,7,6,5,7,3],
[6,6,0,8,7,6,8,5],
[3,3,2,0,3,4,6,2],
[3,4,3,7,0,5,7,3],
[3,5,4,6,5,0,6,5],
[5,3,2,4,3,4,0,2],
[5,7,5,8,7,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,7,3,4,4,5],
[4,0,8,5,7,6,5,7],
[2,2,0,6,2,4,0,2],
[3,5,4,0,4,4,4,5],
[7,3,8,6,0,4,5,3],
[6,4,6,6,6,0,4,3],
[6,5,10,6,5,6,0,5],
[5,3,8,5,7,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,0,8,3,8,4,7],
[8,0,3,8,8,8,2,10],
[10,7,0,10,5,10,7,10],
[2,2,0,0,5,8,2,5],
[7,2,5,5,0,5,4,7],
[2,2,0,2,5,0,2,4],
[6,8,3,8,6,8,0,8],
[3,0,0,5,3,6,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,5,7,3,5,7],
[3,0,2,0,2,0,0,5],
[4,8,0,2,1,3,3,4],
[5,10,8,0,7,4,7,8],
[3,8,9,3,0,3,6,4],
[7,10,7,6,7,0,4,7],
[5,10,7,3,4,6,0,7],
[3,5,6,2,6,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,5,6,4,5,6],
[2,0,4,3,6,3,3,2],
[4,6,0,3,6,3,5,3],
[5,7,7,0,7,4,3,6],
[4,4,4,3,0,3,4,4],
[6,7,7,6,7,0,6,5],
[5,7,5,7,6,4,0,6],
[4,8,7,4,6,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,4,4,4,5,4,7],
[1,0,5,2,4,4,2,3],
[6,5,0,5,5,7,6,6],
[6,8,5,0,6,8,4,8],
[6,6,5,4,0,7,4,7],
[5,6,3,2,3,0,4,5],
[6,8,4,6,6,6,0,9],
[3,7,4,2,3,5,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,3,4,5,4,5],
[5,0,6,4,6,8,6,7],
[6,4,0,4,5,5,4,7],
[7,6,6,0,5,7,6,8],
[6,4,5,5,0,6,4,6],
[5,2,5,3,4,0,2,5],
[6,4,6,4,6,8,0,6],
[5,3,3,2,4,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,5,6,5,6,7],
[6,0,6,8,6,6,5,8],
[4,4,0,9,7,7,5,7],
[5,2,1,0,5,2,5,3],
[4,4,3,5,0,5,4,3],
[5,4,3,8,5,0,3,8],
[4,5,5,5,6,7,0,6],
[3,2,3,7,7,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,1,10,5,4],
[4,0,5,5,0,9,5,3],
[4,5,0,5,5,10,5,8],
[5,5,5,0,5,9,7,5],
[9,10,5,5,0,10,5,4],
[0,1,0,1,0,0,5,1],
[5,5,5,3,5,5,0,5],
[6,7,2,5,6,9,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,0,3,3,1,3,1],
[9,0,8,5,5,8,5,8],
[10,2,0,4,6,8,4,4],
[7,5,6,0,7,7,4,5],
[7,5,4,3,0,7,6,5],
[9,2,2,3,3,0,3,1],
[7,5,6,6,4,7,0,8],
[9,2,6,5,5,9,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,6,6,8,6,9],
[4,0,6,5,8,7,5,9],
[5,4,0,5,4,7,5,8],
[4,5,5,0,7,6,3,6],
[4,2,6,3,0,6,2,7],
[2,3,3,4,4,0,4,3],
[4,5,5,7,8,6,0,6],
[1,1,2,4,3,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,9,4,3,1,4,3],
[6,0,9,4,4,3,5,4],
[1,1,0,4,4,1,1,3],
[6,6,6,0,6,3,6,7],
[7,6,6,4,0,3,6,8],
[9,7,9,7,7,0,7,5],
[6,5,9,4,4,3,0,4],
[7,6,7,3,2,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,2,7,10,10,2,7],
[10,0,5,10,10,10,5,10],
[8,5,0,10,10,8,3,7],
[3,0,0,0,5,3,0,2],
[0,0,0,5,0,8,0,5],
[0,0,2,7,2,0,2,7],
[8,5,7,10,10,8,0,7],
[3,0,3,8,5,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,10,10,10,10,5],
[5,0,0,5,5,5,10,5],
[5,10,0,10,10,10,10,10],
[0,5,0,0,10,5,10,5],
[0,5,0,0,0,0,5,0],
[0,5,0,5,10,0,5,5],
[0,0,0,0,5,5,0,0],
[5,5,0,5,10,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,4,5,3,2,6],
[6,0,4,5,7,5,3,5],
[7,6,0,5,5,4,4,8],
[6,5,5,0,5,4,3,6],
[5,3,5,5,0,3,3,4],
[7,5,6,6,7,0,5,6],
[8,7,6,7,7,5,0,5],
[4,5,2,4,6,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,5,4,5,7,4],
[2,0,3,4,4,3,8,4],
[3,7,0,5,7,7,6,6],
[5,6,5,0,7,8,9,7],
[6,6,3,3,0,5,7,3],
[5,7,3,2,5,0,7,3],
[3,2,4,1,3,3,0,4],
[6,6,4,3,7,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,3,5,7,7,5],
[7,0,7,6,6,9,8,5],
[3,3,0,2,3,5,2,3],
[7,4,8,0,7,9,8,6],
[5,4,7,3,0,5,5,6],
[3,1,5,1,5,0,5,3],
[3,2,8,2,5,5,0,5],
[5,5,7,4,4,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,10,10,5,10,10],
[0,0,0,5,0,5,5,10],
[5,10,0,10,10,5,10,10],
[0,5,0,0,5,5,5,10],
[0,10,0,5,0,5,10,10],
[5,5,5,5,5,0,10,10],
[0,5,0,5,0,0,0,5],
[0,0,0,0,0,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,7,7,7,6,7],
[4,0,4,8,7,6,8,4],
[5,6,0,8,8,9,7,8],
[3,2,2,0,4,6,7,6],
[3,3,2,6,0,4,7,4],
[3,4,1,4,6,0,4,3],
[4,2,3,3,3,6,0,3],
[3,6,2,4,6,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,8,6,5],
[5,0,3,6,6,6,8,5],
[5,7,0,8,7,10,5,5],
[5,4,2,0,7,7,5,5],
[5,4,3,3,0,8,8,2],
[2,4,0,3,2,0,2,2],
[4,2,5,5,2,8,0,2],
[5,5,5,5,8,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,4,6,6,5,5],
[6,0,6,3,6,2,4,1],
[5,4,0,4,5,4,3,4],
[6,7,6,0,6,2,4,1],
[4,4,5,4,0,2,4,5],
[4,8,6,8,8,0,4,7],
[5,6,7,6,6,6,0,5],
[5,9,6,9,5,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,10,5,5,5,5],
[10,0,10,10,5,5,5,10],
[10,0,0,10,5,5,5,10],
[0,0,0,0,0,0,5,0],
[5,5,5,10,0,0,5,10],
[5,5,5,10,10,0,10,10],
[5,5,5,5,5,0,0,5],
[5,0,0,10,0,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,6,9,4,5,6],
[8,0,7,8,8,5,8,7],
[7,3,0,8,6,3,7,6],
[4,2,2,0,5,2,2,5],
[1,2,4,5,0,3,4,3],
[6,5,7,8,7,0,9,7],
[5,2,3,8,6,1,0,5],
[4,3,4,5,7,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,7,4,8,2,6,8],
[8,0,8,5,10,4,8,10],
[3,2,0,3,2,2,1,2],
[6,5,7,0,5,5,8,7],
[2,0,8,5,0,3,8,2],
[8,6,8,5,7,0,8,7],
[4,2,9,2,2,2,0,2],
[2,0,8,3,8,3,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,6,3,2,6,8],
[6,0,5,5,3,4,8,8],
[5,5,0,2,4,3,4,8],
[4,5,8,0,3,5,7,7],
[7,7,6,7,0,5,8,7],
[8,6,7,5,5,0,7,9],
[4,2,6,3,2,3,0,6],
[2,2,2,3,3,1,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,7,6,4,5,2],
[5,0,7,7,6,5,7,4],
[7,3,0,8,4,3,5,4],
[3,3,2,0,1,3,3,1],
[4,4,6,9,0,5,8,4],
[6,5,7,7,5,0,9,5],
[5,3,5,7,2,1,0,2],
[8,6,6,9,6,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,6,6,9,7,5],
[3,0,5,5,6,7,6,3],
[5,5,0,6,8,7,7,6],
[4,5,4,0,6,8,5,7],
[4,4,2,4,0,8,4,4],
[1,3,3,2,2,0,4,5],
[3,4,3,5,6,6,0,6],
[5,7,4,3,6,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,0,7,5,10,5,5],
[5,0,0,5,5,5,0,0],
[10,10,0,10,5,10,10,5],
[3,5,0,0,5,10,5,5],
[5,5,5,5,0,5,5,3],
[0,5,0,0,5,0,0,5],
[5,10,0,5,5,10,0,5],
[5,10,5,5,7,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,7,5,7,8,5],
[5,0,7,5,5,4,7,7],
[5,3,0,4,6,5,6,5],
[3,5,6,0,5,6,3,5],
[5,5,4,5,0,8,5,5],
[3,6,5,4,2,0,4,6],
[2,3,4,7,5,6,0,4],
[5,3,5,5,5,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,0,0,0,0,5],
[5,0,5,5,5,5,5,5],
[5,5,0,5,5,0,5,5],
[10,5,5,0,5,5,5,5],
[10,5,5,5,0,5,5,5],
[10,5,10,5,5,0,10,10],
[10,5,5,5,5,0,0,5],
[5,5,5,5,5,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,3,4,4,6,7,5],
[2,0,3,2,4,6,5,3],
[7,7,0,6,5,6,8,6],
[6,8,4,0,5,7,7,7],
[6,6,5,5,0,7,5,5],
[4,4,4,3,3,0,8,4],
[3,5,2,3,5,2,0,1],
[5,7,4,3,5,6,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,2,3,5,1,1,3],
[9,0,5,4,8,3,1,7],
[8,5,0,2,7,2,2,4],
[7,6,8,0,6,5,6,6],
[5,2,3,4,0,3,3,5],
[9,7,8,5,7,0,6,8],
[9,9,8,4,7,4,0,9],
[7,3,6,4,5,2,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,4,3,4,4,2],
[7,0,5,3,5,6,6,4],
[6,5,0,4,6,6,6,5],
[6,7,6,0,5,6,5,5],
[7,5,4,5,0,3,5,5],
[6,4,4,4,7,0,4,3],
[6,4,4,5,5,6,0,3],
[8,6,5,5,5,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,7,6,8,5,6],
[3,0,4,4,4,3,4,3],
[4,6,0,6,3,6,5,6],
[3,6,4,0,5,5,2,3],
[4,6,7,5,0,8,6,6],
[2,7,4,5,2,0,7,6],
[5,6,5,8,4,3,0,3],
[4,7,4,7,4,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,5,4,3,5,8],
[7,0,8,6,6,4,7,8],
[6,2,0,5,5,5,4,7],
[5,4,5,0,5,5,4,4],
[6,4,5,5,0,6,6,7],
[7,6,5,5,4,0,4,6],
[5,3,6,6,4,6,0,8],
[2,2,3,6,3,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,1,1,4,4,4,4],
[4,0,5,5,6,3,5,7],
[9,5,0,7,5,5,7,7],
[9,5,3,0,4,3,5,4],
[6,4,5,6,0,7,7,6],
[6,7,5,7,3,0,5,7],
[6,5,3,5,3,5,0,4],
[6,3,3,6,4,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,7,7,4,7,6],
[6,0,4,7,5,1,7,4],
[5,6,0,9,9,6,6,8],
[3,3,1,0,2,1,2,2],
[3,5,1,8,0,1,5,3],
[6,9,4,9,9,0,8,7],
[3,3,4,8,5,2,0,5],
[4,6,2,8,7,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,4,4,2,3,3],
[7,0,5,6,9,3,7,6],
[6,5,0,4,5,4,7,5],
[6,4,6,0,5,5,8,4],
[6,1,5,5,0,3,5,5],
[8,7,6,5,7,0,7,6],
[7,3,3,2,5,3,0,4],
[7,4,5,6,5,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,5,5,5,5,0],
[10,0,10,5,5,10,10,0],
[5,0,0,0,0,10,0,0],
[5,5,10,0,5,10,10,0],
[5,5,10,5,0,10,5,5],
[5,0,0,0,0,0,0,0],
[5,0,10,0,5,10,0,0],
[10,10,10,10,5,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,0,0,5,0],
[10,0,5,5,5,5,10,0],
[10,5,0,0,5,0,5,5],
[10,5,10,0,5,5,10,5],
[10,5,5,5,0,0,10,0],
[10,5,10,5,10,0,10,5],
[5,0,5,0,0,0,0,0],
[10,10,5,5,10,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,3,5,3,3,3],
[5,0,3,4,6,3,5,3],
[8,7,0,6,6,4,6,4],
[7,6,4,0,6,3,4,3],
[5,4,4,4,0,5,6,4],
[7,7,6,7,5,0,5,3],
[7,5,4,6,4,5,0,5],
[7,7,6,7,6,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,3,4,5,4,5],
[5,0,3,2,5,4,4,7],
[6,7,0,2,5,6,8,7],
[7,8,8,0,7,5,6,8],
[6,5,5,3,0,3,5,7],
[5,6,4,5,7,0,6,8],
[6,6,2,4,5,4,0,5],
[5,3,3,2,3,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,0,0,0,0],
[10,0,5,0,5,0,5,5],
[10,5,0,5,5,5,5,5],
[10,10,5,0,5,5,10,10],
[10,5,5,5,0,5,5,5],
[10,10,5,5,5,0,5,10],
[10,5,5,0,5,5,0,5],
[10,5,5,0,5,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,10,4,3,0,0,0],
[7,0,7,7,7,3,7,7],
[0,3,0,0,3,0,0,0],
[6,3,10,0,6,6,6,6],
[7,3,7,4,0,3,3,7],
[10,7,10,4,7,0,7,4],
[10,3,10,4,7,3,0,4],
[10,3,10,4,3,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,1,4,1,5,1,2],
[7,0,7,7,1,5,3,3],
[9,3,0,4,3,5,2,2],
[6,3,6,0,0,2,3,3],
[9,9,7,10,0,5,4,7],
[5,5,5,8,5,0,6,7],
[9,7,8,7,6,4,0,4],
[8,7,8,7,3,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,5,5,8,5,6],
[4,0,6,7,8,8,6,9],
[7,4,0,2,6,9,4,7],
[5,3,8,0,6,8,5,8],
[5,2,4,4,0,6,4,5],
[2,2,1,2,4,0,3,2],
[5,4,6,5,6,7,0,7],
[4,1,3,2,5,8,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,6,6,8,5,5],
[3,0,5,6,4,5,4,4],
[5,5,0,5,4,8,2,5],
[4,4,5,0,6,5,5,4],
[4,6,6,4,0,6,6,5],
[2,5,2,5,4,0,4,3],
[5,6,8,5,4,6,0,4],
[5,6,5,6,5,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,3,4,6,4,3],
[4,0,2,3,3,5,3,1],
[6,8,0,6,7,8,5,4],
[7,7,4,0,7,9,5,5],
[6,7,3,3,0,5,5,5],
[4,5,2,1,5,0,3,3],
[6,7,5,5,5,7,0,3],
[7,9,6,5,5,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,5,3,3,8,3],
[2,0,7,5,4,4,8,1],
[4,3,0,5,4,4,6,1],
[5,5,5,0,4,3,6,6],
[7,6,6,6,0,3,6,4],
[7,6,6,7,7,0,7,3],
[2,2,4,4,4,3,0,3],
[7,9,9,4,6,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,6,6,7,5,6],
[3,0,3,2,1,7,1,4],
[3,7,0,4,1,8,3,3],
[4,8,6,0,5,8,7,8],
[4,9,9,5,0,8,6,9],
[3,3,2,2,2,0,2,2],
[5,9,7,3,4,8,0,6],
[4,6,7,2,1,8,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,6,5,6,7,3],
[6,0,7,4,4,6,8,4],
[4,3,0,4,4,6,5,4],
[4,6,6,0,5,8,8,4],
[5,6,6,5,0,7,7,5],
[4,4,4,2,3,0,4,3],
[3,2,5,2,3,6,0,4],
[7,6,6,6,5,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,4,3,7,5,3,4],
[2,0,2,1,6,3,3,2],
[6,8,0,6,8,4,7,8],
[7,9,4,0,9,5,4,5],
[3,4,2,1,0,3,2,3],
[5,7,6,5,7,0,5,6],
[7,7,3,6,8,5,0,7],
[6,8,2,5,7,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,3,4,3,7,7],
[5,0,4,2,2,2,7,6],
[4,6,0,3,5,4,6,5],
[7,8,7,0,5,5,6,7],
[6,8,5,5,0,4,8,8],
[7,8,6,5,6,0,7,8],
[3,3,4,4,2,3,0,5],
[3,4,5,3,2,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,7,5,5,3,4,6],
[0,0,5,5,5,2,4,5],
[3,5,0,5,5,3,2,4],
[5,5,5,0,5,4,5,3],
[5,5,5,5,0,4,5,4],
[7,8,7,6,6,0,7,5],
[6,6,8,5,5,3,0,6],
[4,5,6,7,6,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,2,5,2,7,5,5],
[7,0,5,7,3,7,8,7],
[8,5,0,5,4,7,6,7],
[5,3,5,0,5,5,8,7],
[8,7,6,5,0,7,10,7],
[3,3,3,5,3,0,5,5],
[5,2,4,2,0,5,0,4],
[5,3,3,3,3,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,0,5,5,0,5],
[0,0,0,0,0,0,0,0],
[5,10,0,0,5,5,0,5],
[10,10,10,0,5,5,0,5],
[5,10,5,5,0,5,0,5],
[5,10,5,5,5,0,5,5],
[10,10,10,10,10,5,0,5],
[5,10,5,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,3,5,4,1,3],
[5,0,6,3,5,6,1,3],
[6,4,0,5,5,7,1,2],
[7,7,5,0,7,5,3,5],
[5,5,5,3,0,3,5,2],
[6,4,3,5,7,0,3,2],
[9,9,9,7,5,7,0,4],
[7,7,8,5,8,8,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,3,7,7,7,3],
[7,0,4,3,4,7,7,7],
[3,6,0,3,6,3,3,6],
[7,7,7,0,7,4,7,10],
[3,6,4,3,0,3,7,6],
[3,3,7,6,7,0,10,6],
[3,3,7,3,3,0,0,6],
[7,3,4,0,4,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,8,7,5,6,5],
[3,0,2,5,2,3,5,4],
[6,8,0,7,5,6,7,5],
[2,5,3,0,5,5,6,6],
[3,8,5,5,0,5,6,4],
[5,7,4,5,5,0,5,4],
[4,5,3,4,4,5,0,4],
[5,6,5,4,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,6,8,5,4,5],
[6,0,5,3,7,5,6,6],
[5,5,0,7,5,4,5,5],
[4,7,3,0,6,3,5,5],
[2,3,5,4,0,1,2,2],
[5,5,6,7,9,0,4,3],
[6,4,5,5,8,6,0,4],
[5,4,5,5,8,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,7,5,5,10,7],
[3,0,8,7,5,5,5,7],
[5,2,0,2,0,0,5,2],
[3,3,8,0,8,3,3,3],
[5,5,10,2,0,0,5,2],
[5,5,10,7,10,0,5,7],
[0,5,5,7,5,5,0,7],
[3,3,8,7,8,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,6,3,5,4,5],
[5,0,3,4,5,5,4,3],
[5,7,0,4,5,7,4,4],
[4,6,6,0,4,7,2,7],
[7,5,5,6,0,9,6,6],
[5,5,3,3,1,0,3,1],
[6,6,6,8,4,7,0,5],
[5,7,6,3,4,9,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,6,6,6,7,8],
[5,0,7,4,3,4,4,5],
[3,3,0,4,3,4,5,4],
[4,6,6,0,3,5,6,7],
[4,7,7,7,0,4,7,6],
[4,6,6,5,6,0,5,6],
[3,6,5,4,3,5,0,4],
[2,5,6,3,4,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,5,8,6,8,6],
[2,0,6,4,6,7,7,6],
[5,4,0,3,4,6,6,8],
[5,6,7,0,7,6,8,7],
[2,4,6,3,0,7,7,7],
[4,3,4,4,3,0,5,4],
[2,3,4,2,3,5,0,7],
[4,4,2,3,3,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,3,3,3,5,5],
[7,0,5,10,10,8,10,10],
[5,5,0,5,8,5,10,5],
[7,0,5,0,10,5,10,7],
[7,0,2,0,0,0,5,2],
[7,2,5,5,10,0,10,7],
[5,0,0,0,5,0,0,0],
[5,0,5,3,8,3,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,6,5,2,5,6],
[5,0,4,3,6,4,4,4],
[7,6,0,7,8,4,7,7],
[4,7,3,0,5,4,6,4],
[5,4,2,5,0,1,5,6],
[8,6,6,6,9,0,5,6],
[5,6,3,4,5,5,0,5],
[4,6,3,6,4,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,10,0,5,5,5,5],
[0,0,5,0,0,0,0,5],
[0,5,0,0,5,0,0,5],
[10,10,10,0,10,5,10,10],
[5,10,5,0,0,0,5,5],
[5,10,10,5,10,0,5,5],
[5,10,10,0,5,5,0,10],
[5,5,5,0,5,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,8,4,6,6,7],
[2,0,2,3,5,1,2,3],
[4,8,0,4,5,2,6,5],
[2,7,6,0,5,5,6,5],
[6,5,5,5,0,5,6,6],
[4,9,8,5,5,0,5,6],
[4,8,4,4,4,5,0,6],
[3,7,5,5,4,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,2,5,5,5,4,2],
[7,0,5,7,5,6,5,7],
[8,5,0,5,8,7,4,5],
[5,3,5,0,7,4,7,5],
[5,5,2,3,0,6,4,3],
[5,4,3,6,4,0,5,4],
[6,5,6,3,6,5,0,6],
[8,3,5,5,7,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,3,1,3,5,4],
[7,0,1,4,3,1,7,2],
[7,9,0,3,5,6,9,5],
[7,6,7,0,6,7,9,4],
[9,7,5,4,0,7,7,7],
[7,9,4,3,3,0,6,6],
[5,3,1,1,3,4,0,4],
[6,8,5,6,3,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,6,4,8,6,7],
[4,0,7,6,7,5,6,6],
[3,3,0,3,5,3,5,6],
[4,4,7,0,6,6,4,7],
[6,3,5,4,0,4,6,4],
[2,5,7,4,6,0,4,4],
[4,4,5,6,4,6,0,4],
[3,4,4,3,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,3,8,4,6,3],
[7,0,10,5,8,8,10,4],
[3,0,0,1,5,4,6,3],
[7,5,9,0,8,4,6,5],
[2,2,5,2,0,4,6,5],
[6,2,6,6,6,0,3,2],
[4,0,4,4,4,7,0,3],
[7,6,7,5,5,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,5,4,4,2,1,4],
[9,0,10,9,5,9,6,7],
[5,0,0,2,3,5,3,0],
[6,1,8,0,4,5,1,0],
[6,5,7,6,0,6,7,4],
[8,1,5,5,4,0,1,4],
[9,4,7,9,3,9,0,4],
[6,3,10,10,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,1,3,3,6,3,1],
[5,0,2,5,2,7,4,3],
[9,8,0,5,4,5,3,5],
[7,5,5,0,0,5,2,3],
[7,8,6,10,0,5,3,7],
[4,3,5,5,5,0,3,2],
[7,6,7,8,7,7,0,5],
[9,7,5,7,3,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,0,3,7,4,8],
[3,0,3,0,0,2,3,5],
[2,7,0,2,3,7,4,5],
[10,10,8,0,5,9,6,10],
[7,10,7,5,0,7,3,7],
[3,8,3,1,3,0,4,5],
[6,7,6,4,7,6,0,4],
[2,5,5,0,3,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,7,6,6,6,6],
[5,0,8,8,6,4,6,8],
[4,2,0,5,5,3,4,9],
[3,2,5,0,5,5,5,7],
[4,4,5,5,0,1,4,6],
[4,6,7,5,9,0,8,8],
[4,4,6,5,6,2,0,6],
[4,2,1,3,4,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,6,7,5,8,7],
[3,0,4,3,6,7,7,6],
[5,6,0,5,7,6,5,4],
[4,7,5,0,8,6,8,5],
[3,4,3,2,0,5,6,5],
[5,3,4,4,5,0,5,4],
[2,3,5,2,4,5,0,1],
[3,4,6,5,5,6,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,6,6,7,4,6],
[4,0,5,7,4,4,6,5],
[3,5,0,5,4,4,5,5],
[4,3,5,0,4,5,3,6],
[4,6,6,6,0,6,6,5],
[3,6,6,5,4,0,5,7],
[6,4,5,7,4,5,0,6],
[4,5,5,4,5,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,7,6,4,4,8,4],
[8,0,8,5,5,5,8,4],
[3,2,0,3,3,5,8,4],
[4,5,7,0,5,5,6,5],
[6,5,7,5,0,5,6,5],
[6,5,5,5,5,0,8,4],
[2,2,2,4,4,2,0,2],
[6,6,6,5,5,6,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,3,4,4,4,8],
[2,0,6,4,3,5,5,4],
[3,4,0,4,5,5,5,3],
[7,6,6,0,7,9,4,7],
[6,7,5,3,0,3,7,6],
[6,5,5,1,7,0,5,7],
[6,5,5,6,3,5,0,5],
[2,6,7,3,4,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,6,3,6,6,5],
[5,0,3,4,3,5,4,4],
[3,7,0,6,5,7,7,5],
[4,6,4,0,4,7,4,4],
[7,7,5,6,0,5,7,4],
[4,5,3,3,5,0,5,5],
[4,6,3,6,3,5,0,6],
[5,6,5,6,6,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,6,7,4,7,7],
[4,0,4,7,7,4,7,8],
[5,6,0,4,8,6,7,8],
[4,3,6,0,8,5,5,6],
[3,3,2,2,0,1,6,5],
[6,6,4,5,9,0,7,7],
[3,3,3,5,4,3,0,7],
[3,2,2,4,5,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,3,3,7,6,3],
[2,0,3,5,1,4,6,3],
[4,7,0,4,5,6,7,4],
[7,5,6,0,6,6,6,6],
[7,9,5,4,0,6,5,7],
[3,6,4,4,4,0,4,6],
[4,4,3,4,5,6,0,5],
[7,7,6,4,3,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,0,10,10,5,0,10],
[0,0,0,5,10,0,0,5],
[10,10,0,10,10,10,5,10],
[0,5,0,0,5,0,0,5],
[0,0,0,5,0,0,0,0],
[5,10,0,10,10,0,5,10],
[10,10,5,10,10,5,0,10],
[0,5,0,5,10,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,4,3,3,4,3],
[5,0,2,4,3,4,6,4],
[8,8,0,7,6,5,8,5],
[6,6,3,0,4,5,7,4],
[7,7,4,6,0,3,9,5],
[7,6,5,5,7,0,10,8],
[6,4,2,3,1,0,0,4],
[7,6,5,6,5,2,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,5,5,0,0,10],
[10,0,5,5,5,0,0,10],
[5,5,0,0,0,0,0,10],
[5,5,10,0,5,0,0,10],
[5,5,10,5,0,5,5,10],
[10,10,10,10,5,0,10,10],
[10,10,10,10,5,0,0,10],
[0,0,0,0,0,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,4,3,3,3,7],
[3,0,6,7,6,6,6,10],
[7,4,0,4,4,0,7,4],
[6,3,6,0,3,3,6,3],
[7,4,6,7,0,3,6,4],
[7,4,10,7,7,0,10,4],
[7,4,3,4,4,0,0,4],
[3,0,6,7,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,7,4,3,5,8],
[7,0,8,8,7,8,5,8],
[6,2,0,6,4,6,2,5],
[3,2,4,0,4,4,2,3],
[6,3,6,6,0,5,4,5],
[7,2,4,6,5,0,4,6],
[5,5,8,8,6,6,0,6],
[2,2,5,7,5,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,6,4,8,6,8],
[3,0,5,3,5,5,5,6],
[2,5,0,5,2,5,4,6],
[4,7,5,0,2,7,4,8],
[6,5,8,8,0,6,8,6],
[2,5,5,3,4,0,3,6],
[4,5,6,6,2,7,0,6],
[2,4,4,2,4,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,7,5,4,2,4],
[6,0,5,6,7,4,4,8],
[6,5,0,7,4,5,4,6],
[3,4,3,0,4,3,3,5],
[5,3,6,6,0,3,1,4],
[6,6,5,7,7,0,6,7],
[8,6,6,7,9,4,0,8],
[6,2,4,5,6,3,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,8,7,8,5,8],
[3,0,2,2,2,2,4,4],
[6,8,0,7,5,6,2,7],
[2,8,3,0,4,4,2,2],
[3,8,5,6,0,5,5,3],
[2,8,4,6,5,0,2,3],
[5,6,8,8,5,8,0,8],
[2,6,3,8,7,7,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,7,7,4,7,4],
[6,0,3,6,3,3,7,3],
[3,7,0,7,7,4,7,4],
[3,4,3,0,3,3,7,7],
[3,7,3,7,0,7,7,7],
[6,7,6,7,3,0,7,7],
[3,3,3,3,3,3,0,0],
[6,7,6,3,3,3,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,6,7,6,3,5],
[4,0,2,7,6,4,4,4],
[5,8,0,8,7,9,8,7],
[4,3,2,0,4,6,2,3],
[3,4,3,6,0,5,4,3],
[4,6,1,4,5,0,5,6],
[7,6,2,8,6,5,0,3],
[5,6,3,7,7,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,5,7,6,7,5],
[5,0,6,6,5,6,7,5],
[4,4,0,2,5,6,6,5],
[5,4,8,0,5,7,8,6],
[3,5,5,5,0,5,6,6],
[4,4,4,3,5,0,5,4],
[3,3,4,2,4,5,0,4],
[5,5,5,4,4,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,4,6,3,6,5],
[5,0,4,3,5,4,3,1],
[6,6,0,4,7,5,7,4],
[6,7,6,0,5,6,6,4],
[4,5,3,5,0,4,4,4],
[7,6,5,4,6,0,7,4],
[4,7,3,4,6,3,0,6],
[5,9,6,6,6,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,4,4,5,5,4,6],
[1,0,2,3,2,3,2,3],
[6,8,0,7,7,6,4,5],
[6,7,3,0,4,7,6,6],
[5,8,3,6,0,6,7,5],
[5,7,4,3,4,0,4,6],
[6,8,6,4,3,6,0,5],
[4,7,5,4,5,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,4,4,6,4,6],
[5,0,5,3,4,6,5,7],
[6,5,0,6,5,7,7,6],
[6,7,4,0,4,4,7,7],
[6,6,5,6,0,8,5,7],
[4,4,3,6,2,0,3,5],
[6,5,3,3,5,7,0,5],
[4,3,4,3,3,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,8,5,2,8,8],
[5,0,5,3,0,5,3,3],
[2,5,0,6,3,0,3,0],
[2,7,4,0,3,2,2,2],
[5,10,7,7,0,7,7,5],
[8,5,10,8,3,0,8,6],
[2,7,7,8,3,2,0,5],
[2,7,10,8,5,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,9,2,6,4,5,7],
[3,0,5,1,6,4,3,4],
[1,5,0,0,2,4,3,2],
[8,9,10,0,6,4,5,7],
[4,4,8,4,0,5,1,6],
[6,6,6,6,5,0,1,5],
[5,7,7,5,9,9,0,7],
[3,6,8,3,4,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,4,5,4,6],
[5,0,4,4,4,4,3,4],
[6,6,0,6,6,5,5,9],
[5,6,4,0,6,5,4,4],
[6,6,4,4,0,3,4,5],
[5,6,5,5,7,0,2,5],
[6,7,5,6,6,8,0,6],
[4,6,1,6,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,6,6,5,5,9,5],
[8,0,4,6,3,7,7,6],
[4,6,0,5,5,5,7,8],
[4,4,5,0,4,6,5,4],
[5,7,5,6,0,8,7,8],
[5,3,5,4,2,0,7,5],
[1,3,3,5,3,3,0,3],
[5,4,2,6,2,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,7,7,7,4,7,10],
[0,0,3,2,3,0,2,1],
[3,7,0,5,6,5,7,4],
[3,8,5,0,7,5,5,3],
[3,7,4,3,0,5,4,4],
[6,10,5,5,5,0,7,6],
[3,8,3,5,6,3,0,4],
[0,9,6,7,6,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,0,2,2,2,4,4],
[8,0,3,5,6,8,8,5],
[10,7,0,5,6,10,7,7],
[8,5,5,0,8,7,10,5],
[8,4,4,2,0,4,6,6],
[8,2,0,3,6,0,7,5],
[6,2,3,0,4,3,0,5],
[6,5,3,5,4,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,5,5,5,0,5],
[10,0,10,10,10,10,10,5],
[5,0,0,0,5,5,0,0],
[5,0,10,0,5,5,5,5],
[5,0,5,5,0,5,5,5],
[5,0,5,5,5,0,5,5],
[10,0,10,5,5,5,0,5],
[5,5,10,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,7,4,4,4,5],
[4,0,4,4,5,4,4,3],
[3,6,0,5,3,6,4,3],
[3,6,5,0,5,5,6,4],
[6,5,7,5,0,6,5,5],
[6,6,4,5,4,0,4,5],
[6,6,6,4,5,6,0,5],
[5,7,7,6,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,2,4,3,4,7,5],
[4,0,3,4,4,7,5,5],
[8,7,0,5,1,4,7,5],
[6,6,5,0,6,9,3,1],
[7,6,9,4,0,4,6,5],
[6,3,6,1,6,0,3,1],
[3,5,3,7,4,7,0,1],
[5,5,5,9,5,9,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,7,7,9,2,9,5],
[1,0,2,3,7,2,5,6],
[3,8,0,4,8,3,8,7],
[3,7,6,0,8,3,8,4],
[1,3,2,2,0,0,5,4],
[8,8,7,7,10,0,10,5],
[1,5,2,2,5,0,0,3],
[5,4,3,6,6,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,5,5,5,5,5],
[5,0,10,5,5,10,5,5],
[0,0,0,0,0,0,0,0],
[5,5,10,0,5,10,10,10],
[5,5,10,5,0,10,5,5],
[5,0,10,0,0,0,5,0],
[5,5,10,0,5,5,0,5],
[5,5,10,0,5,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,8,8,9,7,7],
[4,0,2,7,7,8,4,6],
[5,8,0,9,9,9,4,9],
[2,3,1,0,4,5,4,4],
[2,3,1,6,0,4,3,3],
[1,2,1,5,6,0,4,3],
[3,6,6,6,7,6,0,6],
[3,4,1,6,7,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,3,6,4,4,1],
[8,0,4,2,6,3,3,2],
[6,6,0,3,5,4,5,3],
[7,8,7,0,7,6,3,8],
[4,4,5,3,0,2,3,2],
[6,7,6,4,8,0,6,6],
[6,7,5,7,7,4,0,6],
[9,8,7,2,8,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,5,3,5,4,6],
[7,0,5,7,8,5,6,8],
[7,5,0,8,7,9,6,9],
[5,3,2,0,6,7,6,7],
[7,2,3,4,0,6,5,8],
[5,5,1,3,4,0,5,6],
[6,4,4,4,5,5,0,7],
[4,2,1,3,2,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,8,5,9,6,5],
[3,0,8,7,5,8,5,3],
[2,2,0,2,3,4,3,3],
[2,3,8,0,5,8,6,3],
[5,5,7,5,0,6,5,3],
[1,2,6,2,4,0,3,4],
[4,5,7,4,5,7,0,5],
[5,7,7,7,7,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,0,0,5,10,5],
[5,0,0,5,5,0,5,5],
[5,10,0,5,5,5,5,10],
[10,5,5,0,10,5,10,5],
[10,5,5,0,0,5,10,5],
[5,10,5,5,5,0,5,10],
[0,5,5,0,0,5,0,5],
[5,5,0,5,5,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,5,6,6,7,5],
[5,0,5,5,5,6,6,6],
[3,5,0,5,3,6,5,5],
[5,5,5,0,4,6,4,6],
[4,5,7,6,0,6,5,6],
[4,4,4,4,4,0,4,6],
[3,4,5,6,5,6,0,5],
[5,4,5,4,4,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,9,5,1,6,10,6],
[5,0,6,8,5,6,8,5],
[1,4,0,4,1,1,4,6],
[5,2,6,0,0,6,6,5],
[9,5,9,10,0,9,10,6],
[4,4,9,4,1,0,4,6],
[0,2,6,4,0,6,0,5],
[4,5,4,5,4,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,5,4,4,6,5],
[7,0,3,4,6,4,8,6],
[7,7,0,9,4,6,8,7],
[5,6,1,0,5,5,6,8],
[6,4,6,5,0,8,4,5],
[6,6,4,5,2,0,4,5],
[4,2,2,4,6,6,0,2],
[5,4,3,2,5,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,5,5,5,3,8],
[7,0,6,4,4,3,4,5],
[4,4,0,3,4,4,4,3],
[5,6,7,0,6,4,2,6],
[5,6,6,4,0,4,5,3],
[5,7,6,6,6,0,3,8],
[7,6,6,8,5,7,0,6],
[2,5,7,4,7,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,7,6,7,7,6],
[5,0,4,5,6,9,6,7],
[3,6,0,6,4,7,6,7],
[3,5,4,0,2,6,3,5],
[4,4,6,8,0,5,5,6],
[3,1,3,4,5,0,3,3],
[3,4,4,7,5,7,0,5],
[4,3,3,5,4,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,2,6,4,0,8],
[6,0,4,4,8,4,6,4],
[6,6,0,6,4,8,6,8],
[8,6,4,0,6,6,6,6],
[4,2,6,4,0,4,4,4],
[6,6,2,4,6,0,6,6],
[10,4,4,4,6,4,0,8],
[2,6,2,4,6,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,6,4,4,5,3],
[5,0,6,8,5,5,7,3],
[6,4,0,9,6,6,10,5],
[4,2,1,0,3,1,5,4],
[6,5,4,7,0,4,8,6],
[6,5,4,9,6,0,8,5],
[5,3,0,5,2,2,0,5],
[7,7,5,6,4,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,5,6,5,3,5],
[4,0,5,4,5,2,5,3],
[5,5,0,4,7,4,4,4],
[5,6,6,0,6,4,2,5],
[4,5,3,4,0,2,3,5],
[5,8,6,6,8,0,5,7],
[7,5,6,8,7,5,0,3],
[5,7,6,5,5,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,10,10,5,10,5],
[0,0,5,5,5,0,5,0],
[5,5,0,5,5,5,5,5],
[0,5,5,0,10,5,0,0],
[0,5,5,0,0,5,0,0],
[5,10,5,5,5,0,5,5],
[0,5,5,10,10,5,0,5],
[5,10,5,10,10,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,5,7,5,10,6],
[3,0,3,8,7,6,7,0],
[3,7,0,5,4,8,7,2],
[5,2,5,0,5,5,6,2],
[3,3,6,5,0,6,4,3],
[5,4,2,5,4,0,7,1],
[0,3,3,4,6,3,0,0],
[4,10,8,8,7,9,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,7,7,5,5,4],
[4,0,5,3,4,5,3,4],
[3,5,0,3,5,4,4,3],
[3,7,7,0,5,5,4,5],
[3,6,5,5,0,3,3,2],
[5,5,6,5,7,0,3,4],
[5,7,6,6,7,7,0,5],
[6,6,7,5,8,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,7,7,5,5,8],
[5,0,5,7,8,3,4,8],
[2,5,0,7,6,3,5,7],
[3,3,3,0,6,3,4,8],
[3,2,4,4,0,1,5,5],
[5,7,7,7,9,0,8,9],
[5,6,5,6,5,2,0,7],
[2,2,3,2,5,1,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,9,5,6,6,5],
[5,0,4,6,4,4,5,4],
[4,6,0,6,3,4,4,4],
[1,4,4,0,2,2,3,0],
[5,6,7,8,0,6,8,5],
[4,6,6,8,4,0,5,6],
[4,5,6,7,2,5,0,4],
[5,6,6,10,5,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,3,3,2,3,4],
[4,0,5,3,3,3,2,3],
[5,5,0,3,3,2,2,3],
[7,7,7,0,6,6,4,5],
[7,7,7,4,0,4,3,4],
[8,7,8,4,6,0,6,5],
[7,8,8,6,7,4,0,6],
[6,7,7,5,6,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,1,5,5,4,7],
[5,0,8,4,8,10,3,5],
[2,2,0,1,4,7,0,2],
[9,6,9,0,4,6,9,9],
[5,2,6,6,0,10,5,5],
[5,0,3,4,0,0,3,5],
[6,7,10,1,5,7,0,10],
[3,5,8,1,5,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,7,7,4,2,5],
[3,0,6,5,8,4,4,6],
[5,4,0,3,6,4,3,6],
[3,5,7,0,7,5,4,5],
[3,2,4,3,0,5,3,4],
[6,6,6,5,5,0,6,5],
[8,6,7,6,7,4,0,5],
[5,4,4,5,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,6,1,7,5,3],
[5,0,7,6,1,7,5,3],
[3,3,0,6,1,5,6,2],
[4,4,4,0,0,2,5,2],
[9,9,9,10,0,8,5,8],
[3,3,5,8,2,0,6,5],
[5,5,4,5,5,4,0,3],
[7,7,8,8,2,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,2,2,3,4,6],
[8,0,9,5,2,4,4,7],
[5,1,0,4,1,1,2,4],
[8,5,6,0,5,5,5,6],
[8,8,9,5,0,9,5,7],
[7,6,9,5,1,0,6,6],
[6,6,8,5,5,4,0,7],
[4,3,6,4,3,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,0,6,2,4,2,3],
[6,0,4,7,0,2,1,3],
[10,6,0,10,6,6,5,5],
[4,3,0,0,1,1,0,3],
[8,10,4,9,0,7,4,8],
[6,8,4,9,3,0,3,7],
[8,9,5,10,6,7,0,8],
[7,7,5,7,2,3,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,4,5,8,3,4],
[7,0,5,6,7,9,5,5],
[7,5,0,6,6,7,1,6],
[6,4,4,0,7,6,4,7],
[5,3,4,3,0,7,1,6],
[2,1,3,4,3,0,3,2],
[7,5,9,6,9,7,0,5],
[6,5,4,3,4,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,5,4,4,4,3],
[8,0,7,9,4,9,6,7],
[7,3,0,7,4,9,5,6],
[5,1,3,0,4,7,3,3],
[6,6,6,6,0,8,5,5],
[6,1,1,3,2,0,2,2],
[6,4,5,7,5,8,0,5],
[7,3,4,7,5,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,5,6,6,7],
[5,0,8,3,5,4,6,7],
[4,2,0,2,3,3,2,4],
[4,7,8,0,3,5,6,8],
[5,5,7,7,0,5,7,7],
[4,6,7,5,5,0,7,6],
[4,4,8,4,3,3,0,3],
[3,3,6,2,3,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,6,4,3,4,3],
[6,0,3,5,1,3,5,3],
[7,7,0,7,6,7,4,4],
[4,5,3,0,5,4,5,5],
[6,9,4,5,0,6,5,3],
[7,7,3,6,4,0,4,4],
[6,5,6,5,5,6,0,5],
[7,7,6,5,7,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,7,3,8,4,6],
[7,0,6,5,4,7,5,4],
[5,4,0,7,5,7,6,7],
[3,5,3,0,5,4,7,3],
[7,6,5,5,0,7,5,6],
[2,3,3,6,3,0,4,4],
[6,5,4,3,5,6,0,4],
[4,6,3,7,4,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,5,6,8,5],
[4,0,4,8,6,6,9,9],
[4,6,0,7,4,6,8,9],
[4,2,3,0,3,3,4,6],
[5,4,6,7,0,6,9,9],
[4,4,4,7,4,0,8,8],
[2,1,2,6,1,2,0,5],
[5,1,1,4,1,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,4,5,5,4,6],
[4,0,3,3,2,4,3,3],
[6,7,0,4,5,8,6,7],
[6,7,6,0,4,8,7,7],
[5,8,5,6,0,7,5,8],
[5,6,2,2,3,0,7,6],
[6,7,4,3,5,3,0,6],
[4,7,3,3,2,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,0,6,4,4,2,6],
[6,0,6,4,4,6,4,6],
[10,4,0,8,6,8,6,6],
[4,6,2,0,4,6,2,4],
[6,6,4,6,0,4,6,6],
[6,4,2,4,6,0,2,2],
[8,6,4,8,4,8,0,8],
[4,4,4,6,4,8,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,7,6,5,6,5],
[4,0,5,7,3,5,6,5],
[2,5,0,5,4,5,3,3],
[3,3,5,0,5,7,6,5],
[4,7,6,5,0,7,7,7],
[5,5,5,3,3,0,6,5],
[4,4,7,4,3,4,0,7],
[5,5,7,5,3,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,0,3,3,3,3],
[7,0,3,3,3,7,7,3],
[7,7,0,7,7,7,4,7],
[10,7,3,0,7,7,7,7],
[7,7,3,3,0,7,4,3],
[7,3,3,3,3,0,7,3],
[7,3,6,3,6,3,0,6],
[7,7,3,3,7,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,3,4,4,6,5],
[8,0,7,7,7,7,5,5],
[5,3,0,7,7,8,5,4],
[7,3,3,0,4,4,5,5],
[6,3,3,6,0,4,5,6],
[6,3,2,6,6,0,3,3],
[4,5,5,5,5,7,0,4],
[5,5,6,5,4,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,0,2,2,2,7,1],
[8,0,2,6,5,3,7,5],
[10,8,0,5,5,6,9,9],
[8,4,5,0,7,5,6,5],
[8,5,5,3,0,5,7,5],
[8,7,4,5,5,0,8,8],
[3,3,1,4,3,2,0,2],
[9,5,1,5,5,2,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,1,5,7,4,8,1],
[5,0,6,9,7,3,9,3],
[9,4,0,9,7,7,9,4],
[5,1,1,0,3,4,9,1],
[3,3,3,7,0,3,7,3],
[6,7,3,6,7,0,9,6],
[2,1,1,1,3,1,0,1],
[9,7,6,9,7,4,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,2,5,6,2],
[5,0,4,6,5,3,8,5],
[5,6,0,5,4,7,5,4],
[5,4,5,0,3,4,9,4],
[8,5,6,7,0,7,7,6],
[5,7,3,6,3,0,5,5],
[4,2,5,1,3,5,0,3],
[8,5,6,6,4,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,9,9,5,5,7,5],
[1,0,6,6,2,0,5,0],
[1,4,0,7,6,0,1,0],
[1,4,3,0,3,3,1,3],
[5,8,4,7,0,4,5,4],
[5,10,10,7,6,0,5,7],
[3,5,9,9,5,5,0,5],
[5,10,10,7,6,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,2,3,5,0,2,4],
[7,0,7,7,7,5,5,7],
[8,3,0,3,5,0,5,5],
[7,3,7,0,9,6,6,9],
[5,3,5,1,0,3,3,5],
[10,5,10,4,7,0,8,10],
[8,5,5,4,7,2,0,10],
[6,3,5,1,5,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,6,10,6,6],
[5,0,7,5,3,7,7,5],
[4,3,0,7,0,4,4,7],
[4,5,3,0,2,6,7,5],
[4,7,10,8,0,5,5,8],
[0,3,6,4,5,0,3,4],
[4,3,6,3,5,7,0,4],
[4,5,3,5,2,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,7,6,4,6,7],
[6,0,7,6,3,4,8,7],
[4,3,0,7,5,4,7,8],
[3,4,3,0,7,6,4,7],
[4,7,5,3,0,4,6,7],
[6,6,6,4,6,0,6,9],
[4,2,3,6,4,4,0,6],
[3,3,2,3,3,1,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,7,7,8,5,4],
[2,0,5,7,4,5,0,4],
[3,5,0,8,2,8,3,7],
[3,3,2,0,2,5,3,2],
[3,6,8,8,0,8,3,7],
[2,5,2,5,2,0,2,4],
[5,10,7,7,7,8,0,4],
[6,6,3,8,3,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,7,4,5,7,6],
[6,0,5,7,4,7,8,7],
[6,5,0,5,4,6,5,5],
[3,3,5,0,3,5,4,5],
[6,6,6,7,0,7,7,5],
[5,3,4,5,3,0,5,5],
[3,2,5,6,3,5,0,6],
[4,3,5,5,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,1,2,1,3,3],
[6,0,6,5,6,5,5,7],
[6,4,0,5,2,4,3,6],
[9,5,5,0,3,7,5,7],
[8,4,8,7,0,7,5,8],
[9,5,6,3,3,0,5,5],
[7,5,7,5,5,5,0,4],
[7,3,4,3,2,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,6,3,4,5,4],
[2,0,3,1,1,1,2,1],
[3,7,0,4,2,2,2,2],
[4,9,6,0,4,4,6,4],
[7,9,8,6,0,7,6,5],
[6,9,8,6,3,0,6,5],
[5,8,8,4,4,4,0,5],
[6,9,8,6,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,8,7,4,4,5,3],
[6,0,5,4,7,7,6,4],
[2,5,0,9,3,5,5,3],
[3,6,1,0,4,6,2,0],
[6,3,7,6,0,6,2,6],
[6,3,5,4,4,0,2,4],
[5,4,5,8,8,8,0,7],
[7,6,7,10,4,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,6,4,5,3,4],
[7,0,7,8,6,7,3,5],
[6,3,0,6,4,4,3,4],
[4,2,4,0,3,3,2,4],
[6,4,6,7,0,6,4,7],
[5,3,6,7,4,0,5,3],
[7,7,7,8,6,5,0,5],
[6,5,6,6,3,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,2,4,4,5,1,5],
[4,0,6,7,3,5,4,5],
[8,4,0,4,2,6,5,6],
[6,3,6,0,1,5,2,4],
[6,7,8,9,0,6,6,5],
[5,5,4,5,4,0,0,3],
[9,6,5,8,4,10,0,7],
[5,5,4,6,5,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,3,5,8,4,6],
[4,0,5,4,5,7,5,5],
[2,5,0,4,6,7,0,6],
[7,6,6,0,6,6,4,8],
[5,5,4,4,0,4,3,6],
[2,3,3,4,6,0,2,4],
[6,5,10,6,7,8,0,9],
[4,5,4,2,4,6,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,5,9,8,6],
[4,0,5,5,6,7,8,6],
[4,5,0,5,3,5,7,4],
[4,5,5,0,4,5,5,7],
[5,4,7,6,0,7,7,5],
[1,3,5,5,3,0,6,5],
[2,2,3,5,3,4,0,4],
[4,4,6,3,5,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,3,7,5,5,4,7],
[9,0,3,7,4,5,4,8],
[7,7,0,6,6,7,5,9],
[3,3,4,0,3,5,2,4],
[5,6,4,7,0,7,3,8],
[5,5,3,5,3,0,1,4],
[6,6,5,8,7,9,0,7],
[3,2,1,6,2,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,9,6,7,7,8,5],
[2,0,4,4,3,2,3,4],
[1,6,0,4,5,7,5,2],
[4,6,6,0,4,4,4,6],
[3,7,5,6,0,3,3,4],
[3,8,3,6,7,0,3,4],
[2,7,5,6,7,7,0,4],
[5,6,8,4,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,4,4,4,6,6],
[5,0,6,4,5,6,8,6],
[5,4,0,2,5,4,3,4],
[6,6,8,0,5,6,7,6],
[6,5,5,5,0,4,7,7],
[6,4,6,4,6,0,5,7],
[4,2,7,3,3,5,0,4],
[4,4,6,4,3,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,2,2,3,3,5,2],
[8,0,6,6,5,8,6,5],
[8,4,0,7,5,7,5,7],
[8,4,3,0,2,4,5,3],
[7,5,5,8,0,5,5,6],
[7,2,3,6,5,0,5,3],
[5,4,5,5,5,5,0,6],
[8,5,3,7,4,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,4,7,6,6,7],
[4,0,7,5,7,6,7,9],
[4,3,0,3,5,5,4,4],
[6,5,7,0,8,6,7,8],
[3,3,5,2,0,4,4,3],
[4,4,5,4,6,0,6,4],
[4,3,6,3,6,4,0,4],
[3,1,6,2,7,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,0,4,4,6,7,9],
[3,0,1,2,4,2,2,2],
[10,9,0,6,4,6,9,9],
[6,8,4,0,4,2,7,9],
[6,6,6,6,0,2,5,5],
[4,8,4,8,8,0,8,9],
[3,8,1,3,5,2,0,2],
[1,8,1,1,5,1,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,0,5,5,10,5,0],
[5,0,5,5,5,5,5,5],
[10,5,0,5,10,10,5,5],
[5,5,5,0,10,10,0,5],
[5,5,0,0,0,10,0,0],
[0,5,0,0,0,0,0,0],
[5,5,5,10,10,10,0,5],
[10,5,5,5,10,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,5,7,5,2,4],
[6,0,5,7,8,5,4,6],
[8,5,0,6,6,3,0,6],
[5,3,4,0,9,6,3,8],
[3,2,4,1,0,2,1,2],
[5,5,7,4,8,0,6,5],
[8,6,10,7,9,4,0,8],
[6,4,4,2,8,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,2,3,2,2,4,4],
[7,0,3,6,1,4,3,7],
[8,7,0,6,5,4,4,7],
[7,4,4,0,3,3,7,5],
[8,9,5,7,0,6,6,7],
[8,6,6,7,4,0,5,7],
[6,7,6,3,4,5,0,4],
[6,3,3,5,3,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,7,4,7,4,4],
[6,0,4,3,0,6,3,3],
[6,6,0,6,0,6,3,6],
[3,7,4,0,4,10,7,3],
[6,10,10,6,0,10,3,6],
[3,4,4,0,0,0,0,3],
[6,7,7,3,7,10,0,6],
[6,7,4,7,4,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,3,5,4,5,5],
[7,0,7,4,6,4,7,4],
[5,3,0,3,4,4,6,2],
[7,6,7,0,5,4,6,6],
[5,4,6,5,0,5,6,6],
[6,6,6,6,5,0,6,6],
[5,3,4,4,4,4,0,4],
[5,6,8,4,4,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,3,10,0,2,5,2],
[10,0,10,10,10,10,5,5],
[7,0,0,7,5,7,5,2],
[0,0,3,0,0,0,5,0],
[10,0,5,10,0,10,5,5],
[8,0,3,10,0,0,5,5],
[5,5,5,5,5,5,0,0],
[8,5,8,10,5,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,4,6,6,4,4],
[4,0,8,4,10,10,8,4],
[2,2,0,2,2,2,0,4],
[6,6,8,0,6,6,4,8],
[4,0,8,4,0,0,0,4],
[4,0,8,4,10,0,0,4],
[6,2,10,6,10,10,0,4],
[6,6,6,2,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,0,1,1,4,1,3],
[5,0,4,2,3,4,3,1],
[10,6,0,4,3,7,5,4],
[9,8,6,0,6,7,7,4],
[9,7,7,4,0,7,6,7],
[6,6,3,3,3,0,3,5],
[9,7,5,3,4,7,0,4],
[7,9,6,6,3,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,7,5,7,5,7],
[6,0,5,6,6,8,6,8],
[3,5,0,8,5,10,8,5],
[3,4,2,0,3,7,3,4],
[5,4,5,7,0,7,6,4],
[3,2,0,3,3,0,6,0],
[5,4,2,7,4,4,0,4],
[3,2,5,6,6,10,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,3,3,2,6,4],
[6,0,2,5,6,5,5,5],
[5,8,0,5,6,4,5,6],
[7,5,5,0,5,5,5,4],
[7,4,4,5,0,2,6,4],
[8,5,6,5,8,0,4,3],
[4,5,5,5,4,6,0,5],
[6,5,4,6,6,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,6,6,2,6,3],
[5,0,4,9,7,5,6,5],
[8,6,0,8,6,5,9,5],
[4,1,2,0,2,1,3,1],
[4,3,4,8,0,4,4,3],
[8,5,5,9,6,0,9,5],
[4,4,1,7,6,1,0,3],
[7,5,5,9,7,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,6,6,5,7,7],
[4,0,3,4,5,4,5,5],
[5,7,0,5,6,7,7,7],
[4,6,5,0,5,4,7,7],
[4,5,4,5,0,5,5,5],
[5,6,3,6,5,0,4,4],
[3,5,3,3,5,6,0,5],
[3,5,3,3,5,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,7,4,6,6,6],
[4,0,5,3,4,4,7,2],
[4,5,0,4,5,3,6,4],
[3,7,6,0,2,4,8,3],
[6,6,5,8,0,5,9,7],
[4,6,7,6,5,0,7,5],
[4,3,4,2,1,3,0,1],
[4,8,6,7,3,5,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,9,7,5,6,4],
[5,0,5,7,6,6,6,9],
[7,5,0,8,8,8,8,7],
[1,3,2,0,5,3,6,3],
[3,4,2,5,0,4,6,4],
[5,4,2,7,6,0,6,8],
[4,4,2,4,4,4,0,3],
[6,1,3,7,6,2,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,4,4,7,2,5],
[6,0,5,5,3,5,3,5],
[4,5,0,5,3,4,4,4],
[6,5,5,0,4,4,4,6],
[6,7,7,6,0,5,5,5],
[3,5,6,6,5,0,3,5],
[8,7,6,6,5,7,0,6],
[5,5,6,4,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,9,9,7,7,5,6],
[6,0,8,8,9,9,4,5],
[1,2,0,4,3,3,3,1],
[1,2,6,0,6,6,3,1],
[3,1,7,4,0,4,3,4],
[3,1,7,4,6,0,5,3],
[5,6,7,7,7,5,0,2],
[4,5,9,9,6,7,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,8,4,4,6,7],
[3,0,4,6,4,3,6,3],
[7,6,0,5,4,3,5,7],
[2,4,5,0,3,2,5,2],
[6,6,6,7,0,5,7,6],
[6,7,7,8,5,0,6,7],
[4,4,5,5,3,4,0,4],
[3,7,3,8,4,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,4,6,5,7,5],
[6,0,8,4,4,4,6,7],
[3,2,0,2,4,2,4,4],
[6,6,8,0,6,5,8,6],
[4,6,6,4,0,4,7,6],
[5,6,8,5,6,0,7,7],
[3,4,6,2,3,3,0,5],
[5,3,6,4,4,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,10,6,5,7,5],
[2,0,2,4,0,5,5,2],
[5,8,0,7,3,6,5,3],
[0,6,3,0,3,3,3,3],
[4,10,7,7,0,5,7,7],
[5,5,4,7,5,0,5,2],
[3,5,5,7,3,5,0,5],
[5,8,7,7,3,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,6,2,10,6,6,6],
[8,0,8,8,8,8,4,8],
[4,2,0,2,8,2,6,6],
[8,2,8,0,8,10,6,10],
[0,2,2,2,0,2,2,2],
[4,2,8,0,8,0,4,4],
[4,6,4,4,8,6,0,8],
[4,2,4,0,8,6,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,7,8,8,5,5],
[2,0,9,4,6,6,7,4],
[2,1,0,2,2,1,2,4],
[3,6,8,0,6,5,5,6],
[2,4,8,4,0,5,5,3],
[2,4,9,5,5,0,4,7],
[5,3,8,5,5,6,0,7],
[5,6,6,4,7,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,4,0,4,0,0,4],
[10,0,8,4,8,4,4,8],
[6,2,0,2,6,6,6,6],
[10,6,8,0,8,4,6,10],
[6,2,4,2,0,4,6,10],
[10,6,4,6,6,0,6,6],
[10,6,4,4,4,4,0,6],
[6,2,4,0,0,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,6,1,10,5,6,9],
[1,0,1,1,6,5,1,0],
[4,9,0,0,9,4,5,9],
[9,9,10,0,9,4,5,9],
[0,4,1,1,0,5,0,4],
[5,5,6,6,5,0,5,5],
[4,9,5,5,10,5,0,4],
[1,10,1,1,6,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,4,3,6,5,4],
[4,0,6,5,2,4,5,3],
[3,4,0,5,2,4,4,1],
[6,5,5,0,6,5,6,2],
[7,8,8,4,0,7,6,3],
[4,6,6,5,3,0,5,5],
[5,5,6,4,4,5,0,3],
[6,7,9,8,7,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,3,3,6,3,4],
[2,0,1,2,2,3,3,1],
[5,9,0,7,7,5,3,6],
[7,8,3,0,6,6,6,3],
[7,8,3,4,0,5,5,3],
[4,7,5,4,5,0,6,4],
[7,7,7,4,5,4,0,6],
[6,9,4,7,7,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,4,5,6,6,5],
[6,0,4,4,5,7,7,4],
[4,6,0,5,5,7,7,4],
[6,6,5,0,7,6,7,5],
[5,5,5,3,0,7,6,4],
[4,3,3,4,3,0,5,4],
[4,3,3,3,4,5,0,5],
[5,6,6,5,6,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,0,0,9,0,4,4],
[6,0,5,5,9,5,4,5],
[10,5,0,1,9,4,4,10],
[10,5,9,0,9,4,4,10],
[1,1,1,1,0,0,0,1],
[10,5,6,6,10,0,5,10],
[6,6,6,6,10,5,0,6],
[6,5,0,0,9,0,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,10,10,5,10,0],
[5,0,10,10,5,5,5,5],
[5,0,0,10,5,5,5,0],
[0,0,0,0,0,0,0,0],
[0,5,5,10,0,5,10,0],
[5,5,5,10,5,0,5,0],
[0,5,5,10,0,5,0,0],
[10,5,10,10,10,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,0,5,4,5,5,3],
[8,0,4,6,4,6,7,5],
[10,6,0,7,6,7,9,5],
[5,4,3,0,3,7,6,3],
[6,6,4,7,0,7,8,4],
[5,4,3,3,3,0,4,1],
[5,3,1,4,2,6,0,3],
[7,5,5,7,6,9,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,3,2,2,2,5],
[5,0,0,3,3,5,7,6],
[5,10,0,7,5,5,7,8],
[7,7,3,0,5,2,9,5],
[8,7,5,5,0,2,9,5],
[8,5,5,8,8,0,8,7],
[8,3,3,1,1,2,0,3],
[5,4,2,5,5,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,4,6,4,4,5],
[6,0,5,4,4,6,4,5],
[5,5,0,3,5,5,5,4],
[6,6,7,0,6,8,5,7],
[4,6,5,4,0,5,4,5],
[6,4,5,2,5,0,5,5],
[6,6,5,5,6,5,0,6],
[5,5,6,3,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,5,2,3,5,6],
[7,0,6,5,3,4,8,6],
[6,4,0,6,3,2,5,3],
[5,5,4,0,2,2,4,4],
[8,7,7,8,0,5,7,6],
[7,6,8,8,5,0,5,5],
[5,2,5,6,3,5,0,4],
[4,4,7,6,4,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,4,5,4,3,1],
[5,0,6,2,3,7,6,6],
[6,4,0,2,2,6,5,6],
[6,8,8,0,6,7,7,5],
[5,7,8,4,0,6,6,5],
[6,3,4,3,4,0,7,4],
[7,4,5,3,4,3,0,6],
[9,4,4,5,5,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,4,5,4,7,5],
[7,0,6,6,6,3,5,3],
[7,4,0,5,6,4,4,5],
[6,4,5,0,6,6,6,5],
[5,4,4,4,0,5,5,3],
[6,7,6,4,5,0,5,5],
[3,5,6,4,5,5,0,5],
[5,7,5,5,7,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,2,4,5,3,3],
[5,0,2,5,4,5,4,3],
[6,8,0,4,6,7,5,5],
[8,5,6,0,4,7,5,5],
[6,6,4,6,0,7,4,5],
[5,5,3,3,3,0,6,3],
[7,6,5,5,6,4,0,5],
[7,7,5,5,5,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,3,4,5,4,4],
[5,0,4,4,4,4,4,4],
[5,6,0,6,4,8,7,6],
[7,6,4,0,6,5,6,4],
[6,6,6,4,0,6,6,6],
[5,6,2,5,4,0,6,6],
[6,6,3,4,4,4,0,4],
[6,6,4,6,4,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,5,5,3,2,3],
[3,0,2,3,3,4,3,4],
[6,8,0,5,5,4,3,4],
[5,7,5,0,3,3,3,1],
[5,7,5,7,0,3,2,3],
[7,6,6,7,7,0,5,6],
[8,7,7,7,8,5,0,6],
[7,6,6,9,7,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,5,0,0,5,0],
[10,0,5,5,5,5,5,5],
[5,5,0,5,0,5,0,5],
[5,5,5,0,5,5,5,5],
[10,5,10,5,0,5,10,10],
[10,5,5,5,5,0,5,5],
[5,5,10,5,0,5,0,5],
[10,5,5,5,0,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,7,5,6,6,6],
[5,0,8,6,4,3,5,6],
[4,2,0,5,4,2,6,5],
[3,4,5,0,4,6,5,4],
[5,6,6,6,0,3,7,8],
[4,7,8,4,7,0,7,7],
[4,5,4,5,3,3,0,6],
[4,4,5,6,2,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,5,6,6,6,6],
[6,0,3,5,4,7,5,7],
[5,7,0,8,7,9,8,9],
[5,5,2,0,4,6,3,6],
[4,6,3,6,0,9,7,8],
[4,3,1,4,1,0,3,7],
[4,5,2,7,3,7,0,7],
[4,3,1,4,2,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,5,5,5,4,4],
[7,0,5,4,7,7,4,5],
[6,5,0,5,5,6,2,6],
[5,6,5,0,5,5,5,6],
[5,3,5,5,0,6,3,6],
[5,3,4,5,4,0,3,4],
[6,6,8,5,7,7,0,8],
[6,5,4,4,4,6,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,4,2,2,4,3,3],
[9,0,7,3,8,8,6,6],
[6,3,0,4,4,3,3,4],
[8,7,6,0,7,9,5,7],
[8,2,6,3,0,4,3,5],
[6,2,7,1,6,0,3,3],
[7,4,7,5,7,7,0,7],
[7,4,6,3,5,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,2,2,7,2,5,7],
[3,0,2,2,5,5,3,5],
[8,8,0,5,8,5,5,5],
[8,8,5,0,10,8,3,10],
[3,5,2,0,0,5,3,7],
[8,5,5,2,5,0,3,5],
[5,7,5,7,7,7,0,7],
[3,5,5,0,3,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,1,3,1,3,5,2],
[8,0,4,5,5,4,7,2],
[9,6,0,7,6,5,6,5],
[7,5,3,0,5,4,4,4],
[9,5,4,5,0,5,6,4],
[7,6,5,6,5,0,7,5],
[5,3,4,6,4,3,0,3],
[8,8,5,6,6,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,6,5,8,6,5],
[4,0,5,3,5,5,3,6],
[3,5,0,4,5,3,1,5],
[4,7,6,0,7,7,5,6],
[5,5,5,3,0,4,5,7],
[2,5,7,3,6,0,3,4],
[4,7,9,5,5,7,0,5],
[5,4,5,4,3,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,6,2,7,8,7],
[7,0,6,9,6,5,10,8],
[6,4,0,4,4,4,8,6],
[4,1,6,0,5,6,10,6],
[8,4,6,5,0,7,10,5],
[3,5,6,4,3,0,8,5],
[2,0,2,0,0,2,0,1],
[3,2,4,4,5,5,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,5,6,4,4,5],
[3,0,3,4,6,2,2,4],
[5,7,0,4,6,4,4,4],
[5,6,6,0,9,5,5,7],
[4,4,4,1,0,2,3,2],
[6,8,6,5,8,0,6,7],
[6,8,6,5,7,4,0,5],
[5,6,6,3,8,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,3,4,3,4,4],
[6,0,4,3,4,4,4,4],
[6,6,0,3,5,5,6,5],
[7,7,7,0,7,5,6,6],
[6,6,5,3,0,5,5,5],
[7,6,5,5,5,0,5,5],
[6,6,4,4,5,5,0,6],
[6,6,5,4,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,4,3,7,5,5],
[5,0,6,6,5,8,5,3],
[6,4,0,7,5,5,5,4],
[6,4,3,0,6,6,6,3],
[7,5,5,4,0,9,6,6],
[3,2,5,4,1,0,3,3],
[5,5,5,4,4,7,0,4],
[5,7,6,7,4,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,3,6,5,5,5],
[7,0,5,3,8,5,5,5],
[5,5,0,3,5,5,8,5],
[7,7,7,0,10,7,8,5],
[4,2,5,0,0,2,5,2],
[5,5,5,3,8,0,8,5],
[5,5,2,2,5,2,0,3],
[5,5,5,5,8,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,4,5,3,8,6],
[6,0,5,4,7,5,8,6],
[8,5,0,4,8,7,8,9],
[6,6,6,0,5,4,7,6],
[5,3,2,5,0,4,7,6],
[7,5,3,6,6,0,7,7],
[2,2,2,3,3,3,0,4],
[4,4,1,4,4,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,6,6,6,5,7],
[3,0,5,5,4,6,5,8],
[6,5,0,6,5,6,3,8],
[4,5,4,0,5,5,5,7],
[4,6,5,5,0,5,4,7],
[4,4,4,5,5,0,6,8],
[5,5,7,5,6,4,0,9],
[3,2,2,3,3,2,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,1,6,4,4,3,4],
[6,0,3,4,3,8,4,5],
[9,7,0,9,4,9,6,9],
[4,6,1,0,3,4,5,3],
[6,7,6,7,0,8,5,7],
[6,2,1,6,2,0,3,6],
[7,6,4,5,5,7,0,7],
[6,5,1,7,3,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,5,5,5,4,5],
[4,0,4,2,3,6,3,7],
[2,6,0,3,4,4,3,6],
[5,8,7,0,5,7,6,8],
[5,7,6,5,0,5,4,8],
[5,4,6,3,5,0,5,5],
[6,7,7,4,6,5,0,7],
[5,3,4,2,2,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,3,5,4,4,4],
[6,0,6,4,6,6,4,4],
[6,4,0,4,7,4,3,4],
[7,6,6,0,4,6,6,4],
[5,4,3,6,0,6,5,5],
[6,4,6,4,4,0,3,3],
[6,6,7,4,5,7,0,4],
[6,6,6,6,5,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,10,10,5,5,10,10],
[0,0,0,0,0,0,5,5],
[0,10,0,5,0,5,10,10],
[0,10,5,0,0,0,10,10],
[5,10,10,10,0,5,10,10],
[5,10,5,10,5,0,10,10],
[0,5,0,0,0,0,0,0],
[0,5,0,0,0,0,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,5,5,4,5,4],
[5,0,8,5,5,6,5,4],
[2,2,0,3,4,2,3,4],
[5,5,7,0,4,4,4,5],
[5,5,6,6,0,5,6,6],
[6,4,8,6,5,0,6,5],
[5,5,7,6,4,4,0,3],
[6,6,6,5,4,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,7,6,5,5],
[5,0,6,8,7,6,6,6],
[4,4,0,6,4,5,4,6],
[4,2,4,0,4,6,7,5],
[3,3,6,6,0,3,4,5],
[4,4,5,4,7,0,5,7],
[5,4,6,3,6,5,0,3],
[5,4,4,5,5,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,8,4,5,5,7,4],
[7,0,6,8,5,5,6,7],
[2,4,0,2,5,5,4,3],
[6,2,8,0,6,5,4,3],
[5,5,5,4,0,5,4,4],
[5,5,5,5,5,0,5,5],
[3,4,6,6,6,5,0,4],
[6,3,7,7,6,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,5,2,5,6,4],
[4,0,5,4,5,5,6,5],
[3,5,0,4,3,4,6,2],
[5,6,6,0,5,6,5,4],
[8,5,7,5,0,6,6,5],
[5,5,6,4,4,0,8,5],
[4,4,4,5,4,2,0,4],
[6,5,8,6,5,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,6,9,7,9,9],
[5,0,1,6,5,6,8,6],
[5,9,0,6,9,6,8,6],
[4,4,4,0,9,6,9,10],
[1,5,1,1,0,1,8,6],
[3,4,4,4,9,0,9,9],
[1,2,2,1,2,1,0,7],
[1,4,4,0,4,1,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,2,6,5,6,3],
[7,0,6,8,4,8,9,5],
[7,4,0,8,4,4,5,4],
[8,2,2,0,5,4,4,2],
[4,6,6,5,0,8,5,5],
[5,2,6,6,2,0,6,1],
[4,1,5,6,5,4,0,2],
[7,5,6,8,5,9,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,5,5,3,7,5],
[5,0,2,5,5,3,2,3],
[3,8,0,5,5,5,3,7],
[5,5,5,0,3,4,3,5],
[5,5,5,7,0,3,5,5],
[7,7,5,6,7,0,5,2],
[3,8,7,7,5,5,0,5],
[5,7,3,5,5,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,7,5,6,7],
[4,0,3,6,8,5,7,3],
[4,7,0,7,8,4,7,4],
[4,4,3,0,7,3,7,4],
[3,2,2,3,0,2,1,4],
[5,5,6,7,8,0,5,5],
[4,3,3,3,9,5,0,3],
[3,7,6,6,6,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,4,1,4,3,4],
[6,0,7,6,5,5,6,5],
[7,3,0,6,1,6,8,4],
[6,4,4,0,1,5,5,2],
[9,5,9,9,0,7,8,4],
[6,5,4,5,3,0,5,4],
[7,4,2,5,2,5,0,5],
[6,5,6,8,6,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,3,2,4,3,3],
[5,0,3,2,4,5,1,6],
[6,7,0,5,6,7,5,8],
[7,8,5,0,7,6,3,7],
[8,6,4,3,0,4,2,4],
[6,5,3,4,6,0,3,6],
[7,9,5,7,8,7,0,8],
[7,4,2,3,6,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,10,7,3,7,5],
[3,0,4,9,7,1,7,5],
[6,6,0,9,9,6,7,4],
[0,1,1,0,3,1,3,1],
[3,3,1,7,0,3,7,5],
[7,9,4,9,7,0,7,4],
[3,3,3,7,3,3,0,3],
[5,5,6,9,5,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,5,5,0,10,10],
[5,0,10,5,5,0,10,5],
[0,0,0,0,0,0,5,0],
[5,5,10,0,5,5,10,10],
[5,5,10,5,0,5,10,5],
[10,10,10,5,5,0,10,10],
[0,0,5,0,0,0,0,0],
[0,5,10,0,5,0,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,4,2,2,1,6],
[8,0,5,6,2,6,3,8],
[7,5,0,5,4,6,5,8],
[6,4,5,0,5,6,3,6],
[8,8,6,5,0,6,2,9],
[8,4,4,4,4,0,4,6],
[9,7,5,7,8,6,0,9],
[4,2,2,4,1,4,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,5,6,6,7,5],
[5,0,3,5,3,5,4,4],
[7,7,0,5,6,7,7,10],
[5,5,5,0,6,5,5,6],
[4,7,4,4,0,4,2,4],
[4,5,3,5,6,0,1,4],
[3,6,3,5,8,9,0,5],
[5,6,0,4,6,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,7,0,0,4,3],
[6,0,4,6,4,6,4,3],
[6,6,0,6,1,3,1,4],
[3,4,4,0,0,2,4,3],
[10,6,9,10,0,6,5,4],
[10,4,7,8,4,0,5,4],
[6,6,9,6,5,5,0,5],
[7,7,6,7,6,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,2,0,2,4,4],
[6,0,10,4,0,5,10,5],
[6,0,0,2,0,0,2,0],
[8,6,8,0,3,1,8,3],
[10,10,10,7,0,5,10,7],
[8,5,10,9,5,0,10,4],
[6,0,8,2,0,0,0,0],
[6,5,10,7,3,6,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,4,5,4,5,5],
[5,0,3,4,5,4,4,5],
[4,7,0,4,4,4,6,5],
[6,6,6,0,5,6,6,4],
[5,5,6,5,0,5,5,4],
[6,6,6,4,5,0,5,5],
[5,6,4,4,5,5,0,5],
[5,5,5,6,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,3,3,6,6,4],
[5,0,4,1,1,3,3,3],
[6,6,0,5,7,6,6,7],
[7,9,5,0,5,5,5,6],
[7,9,3,5,0,9,9,4],
[4,7,4,5,1,0,9,3],
[4,7,4,5,1,1,0,4],
[6,7,3,4,6,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,10,10,10,5,10,10],
[0,0,5,5,5,0,5,5],
[0,5,0,5,5,5,5,10],
[0,5,5,0,10,5,0,10],
[0,5,5,0,0,5,0,5],
[5,10,5,5,5,0,5,5],
[0,5,5,10,10,5,0,10],
[0,5,0,0,5,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,1,1,4,3,4,1],
[9,0,6,7,7,3,3,6],
[9,4,0,4,4,3,3,4],
[9,3,6,0,6,6,3,9],
[6,3,6,4,0,3,3,3],
[7,7,7,4,7,0,7,4],
[6,7,7,7,7,3,0,7],
[9,4,6,1,7,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,4,2,5,4,8],
[5,0,5,5,3,7,5,5],
[7,5,0,3,5,7,5,6],
[6,5,7,0,5,6,3,6],
[8,7,5,5,0,7,7,7],
[5,3,3,4,3,0,3,6],
[6,5,5,7,3,7,0,8],
[2,5,4,4,3,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,5,5,5,5,7],
[3,0,4,6,5,6,4,8],
[4,6,0,5,6,5,4,9],
[5,4,5,0,5,5,3,6],
[5,5,4,5,0,7,4,7],
[5,4,5,5,3,0,2,7],
[5,6,6,7,6,8,0,9],
[3,2,1,4,3,3,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,6,8,6,7,8],
[6,0,5,5,6,5,4,7],
[3,5,0,4,5,4,3,8],
[4,5,6,0,7,6,5,8],
[2,4,5,3,0,4,2,6],
[4,5,6,4,6,0,4,6],
[3,6,7,5,8,6,0,9],
[2,3,2,2,4,4,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,3,3,4,3,3],
[7,0,8,7,5,7,6,4],
[6,2,0,5,5,4,3,5],
[7,3,5,0,4,3,3,4],
[7,5,5,6,0,4,5,5],
[6,3,6,7,6,0,6,5],
[7,4,7,7,5,4,0,6],
[7,6,5,6,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,6,6,5,7,6],
[4,0,3,4,4,6,8,3],
[5,7,0,6,5,8,10,6],
[4,6,4,0,6,7,9,7],
[4,6,5,4,0,7,9,8],
[5,4,2,3,3,0,9,6],
[3,2,0,1,1,1,0,4],
[4,7,4,3,2,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,9,9,8,7,7,9],
[5,0,7,7,7,4,5,7],
[1,3,0,4,6,3,3,4],
[1,3,6,0,4,2,4,6],
[2,3,4,6,0,2,2,3],
[3,6,7,8,8,0,8,8],
[3,5,7,6,8,2,0,4],
[1,3,6,4,7,2,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,3,3,7,8,5,7],
[2,0,1,2,6,2,1,5],
[7,9,0,7,8,5,7,6],
[7,8,3,0,8,6,5,6],
[3,4,2,2,0,4,2,2],
[2,8,5,4,6,0,5,4],
[5,9,3,5,8,5,0,6],
[3,5,4,4,8,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,7,10,5,5,5],
[5,0,4,9,6,7,5,8],
[5,6,0,6,5,7,5,8],
[3,1,4,0,6,4,4,8],
[0,4,5,4,0,4,0,5],
[5,3,3,6,6,0,3,5],
[5,5,5,6,10,7,0,8],
[5,2,2,2,5,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,3,7,4,4,6,3],
[2,0,2,5,2,2,5,2],
[7,8,0,9,3,3,4,2],
[3,5,1,0,0,3,4,2],
[6,8,7,10,0,6,4,5],
[6,8,7,7,4,0,4,4],
[4,5,6,6,6,6,0,2],
[7,8,8,8,5,6,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,10,2,3,5,8,6],
[3,0,3,3,3,3,6,3],
[0,7,0,0,1,0,5,4],
[8,7,10,0,8,3,10,6],
[7,7,9,2,0,2,7,5],
[5,7,10,7,8,0,10,6],
[2,4,5,0,3,0,0,1],
[4,7,6,4,5,4,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,9,8,6,5,7,6],
[1,0,5,2,4,2,1,1],
[1,5,0,6,4,2,4,5],
[2,8,4,0,2,4,2,5],
[4,6,6,8,0,2,4,4],
[5,8,8,6,8,0,7,7],
[3,9,6,8,6,3,0,5],
[4,9,5,5,6,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,7,7,7,10,4,6],
[1,0,1,3,1,6,1,1],
[3,9,0,5,3,8,5,5],
[3,7,5,0,5,6,4,3],
[3,9,7,5,0,5,2,2],
[0,4,2,4,5,0,1,3],
[6,9,5,6,8,9,0,5],
[4,9,5,7,8,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,6,7,5,4,3],
[4,0,7,8,6,5,5,5],
[3,3,0,5,4,3,2,1],
[4,2,5,0,6,5,5,5],
[3,4,6,4,0,7,6,4],
[5,5,7,5,3,0,4,3],
[6,5,8,5,4,6,0,4],
[7,5,9,5,6,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,5,0,10,0,0],
[5,0,10,10,5,5,0,5],
[0,0,0,0,0,5,0,0],
[5,0,10,0,5,5,0,5],
[10,5,10,5,0,10,5,0],
[0,5,5,5,0,0,0,0],
[10,10,10,10,5,10,0,5],
[10,5,10,5,10,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,6,5,1,7,5],
[7,0,4,7,4,5,4,7],
[7,6,0,7,3,1,6,5],
[4,3,3,0,3,1,4,3],
[5,6,7,7,0,3,4,5],
[9,5,9,9,7,0,9,7],
[3,6,4,6,6,1,0,3],
[5,3,5,7,5,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,8,6,5,10,7,5],
[0,0,5,3,4,4,4,3],
[2,5,0,2,5,4,5,4],
[4,7,8,0,5,8,8,4],
[5,6,5,5,0,7,6,2],
[0,6,6,2,3,0,4,3],
[3,6,5,2,4,6,0,1],
[5,7,6,6,8,7,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,7,4,4,9,3,7],
[1,0,7,1,4,4,4,4],
[3,3,0,3,4,3,0,4],
[6,9,7,0,7,9,3,7],
[6,6,6,3,0,6,6,6],
[1,6,7,1,4,0,3,7],
[7,6,10,7,4,7,0,4],
[3,6,6,3,4,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,7,7,4,7,7,7],
[6,0,4,4,4,7,9,4],
[3,6,0,0,6,7,9,6],
[3,6,10,0,6,7,9,9],
[6,6,4,4,0,7,6,10],
[3,3,3,3,3,0,6,3],
[3,1,1,1,4,4,0,4],
[3,6,4,1,0,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,4,7,5,2,6],
[3,0,2,3,7,4,1,3],
[5,8,0,2,7,5,5,4],
[6,7,8,0,8,8,5,6],
[3,3,3,2,0,5,1,4],
[5,6,5,2,5,0,4,4],
[8,9,5,5,9,6,0,7],
[4,7,6,4,6,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,7,8,6,4,6],
[4,0,0,6,6,5,7,5],
[5,10,0,6,8,8,8,9],
[3,4,4,0,6,4,3,3],
[2,4,2,4,0,3,4,2],
[4,5,2,6,7,0,6,7],
[6,3,2,7,6,4,0,7],
[4,5,1,7,8,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,9,7,5,8,5],
[2,0,2,7,2,3,4,2],
[5,8,0,7,4,5,6,6],
[1,3,3,0,3,3,3,3],
[3,8,6,7,0,3,6,4],
[5,7,5,7,7,0,6,4],
[2,6,4,7,4,4,0,4],
[5,8,4,7,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,6,6,5,6],
[4,0,4,5,4,3,5,3],
[4,6,0,6,6,5,5,3],
[4,5,4,0,5,7,3,5],
[4,6,4,5,0,4,6,5],
[4,7,5,3,6,0,4,5],
[5,5,5,7,4,6,0,5],
[4,7,7,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,8,5,5,5],
[5,0,7,5,8,6,6,5],
[6,3,0,6,6,4,5,3],
[5,5,4,0,7,4,6,6],
[2,2,4,3,0,4,3,4],
[5,4,6,6,6,0,6,3],
[5,4,5,4,7,4,0,5],
[5,5,7,4,6,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,6,5,4,6,10],
[5,0,9,6,4,4,4,9],
[6,1,0,5,2,4,4,8],
[4,4,5,0,4,4,2,4],
[5,6,8,6,0,8,6,8],
[6,6,6,6,2,0,4,9],
[4,6,6,8,4,6,0,9],
[0,1,2,6,2,1,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,2,1,3,3,3,7],
[9,0,5,7,8,9,4,9],
[8,5,0,7,7,7,5,7],
[9,3,3,0,5,5,3,6],
[7,2,3,5,0,5,4,9],
[7,1,3,5,5,0,5,7],
[7,6,5,7,6,5,0,7],
[3,1,3,4,1,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,8,5,4,2,4],
[5,0,5,8,2,2,5,4],
[5,5,0,5,2,3,5,3],
[2,2,5,0,1,2,3,6],
[5,8,8,9,0,8,6,8],
[6,8,7,8,2,0,5,7],
[8,5,5,7,4,5,0,4],
[6,6,7,4,2,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,4,1,4,3,3],
[7,0,7,9,6,7,8,5],
[7,3,0,8,7,4,8,2],
[6,1,2,0,1,3,7,0],
[9,4,3,9,0,6,8,3],
[6,3,6,7,4,0,6,3],
[7,2,2,3,2,4,0,1],
[7,5,8,10,7,7,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,5,3,1,7,5],
[4,0,4,4,4,2,6,4],
[5,6,0,7,7,4,4,7],
[5,6,3,0,6,4,6,7],
[7,6,3,4,0,5,5,3],
[9,8,6,6,5,0,8,5],
[3,4,6,4,5,2,0,5],
[5,6,3,3,7,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,4,4,5,5,2],
[6,0,8,6,7,9,8,5],
[5,2,0,5,5,6,5,4],
[6,4,5,0,6,8,7,4],
[6,3,5,4,0,8,8,3],
[5,1,4,2,2,0,5,3],
[5,2,5,3,2,5,0,3],
[8,5,6,6,7,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,2,0,8,6,6],
[5,0,8,6,4,5,1,5],
[6,2,0,6,6,4,2,2],
[8,4,4,0,3,8,4,4],
[10,6,4,7,0,8,6,6],
[2,5,6,2,2,0,6,2],
[4,9,8,6,4,4,0,6],
[4,5,8,6,4,8,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,3,3,6,7,7],
[3,0,3,3,4,3,7,8],
[5,7,0,5,7,7,5,5],
[7,7,5,0,6,9,8,10],
[7,6,3,4,0,9,7,8],
[4,7,3,1,1,0,5,5],
[3,3,5,2,3,5,0,7],
[3,2,5,0,2,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,2,4,4,4,2,7],
[7,0,5,4,5,7,5,6],
[8,5,0,5,5,7,4,5],
[6,6,5,0,5,6,5,7],
[6,5,5,5,0,4,5,7],
[6,3,3,4,6,0,2,6],
[8,5,6,5,5,8,0,7],
[3,4,5,3,3,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,6,4,5,6,7],
[5,0,5,6,4,5,7,7],
[6,5,0,6,5,6,8,7],
[4,4,4,0,4,4,6,5],
[6,6,5,6,0,7,9,7],
[5,5,4,6,3,0,7,8],
[4,3,2,4,1,3,0,5],
[3,3,3,5,3,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,7,5,5,3,3],
[5,0,10,8,10,5,5,3],
[2,0,0,2,2,0,2,0],
[3,2,8,0,2,0,3,0],
[5,0,8,8,0,2,5,3],
[5,5,10,10,8,0,8,6],
[7,5,8,7,5,2,0,2],
[7,7,10,10,7,4,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,7,8,7,6,4],
[6,0,5,4,6,7,7,5],
[6,5,0,7,7,6,6,4],
[3,6,3,0,5,4,6,4],
[2,4,3,5,0,6,6,5],
[3,3,4,6,4,0,5,4],
[4,3,4,4,4,5,0,4],
[6,5,6,6,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,2,4,4,7,4,5],
[6,0,2,0,0,5,4,5],
[8,8,0,8,8,8,8,5],
[6,10,2,0,3,7,7,5],
[6,10,2,7,0,7,10,5],
[3,5,2,3,3,0,7,2],
[6,6,2,3,0,3,0,3],
[5,5,5,5,5,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,6,5,4,2,4],
[5,0,2,7,6,4,2,5],
[6,8,0,8,4,5,8,6],
[4,3,2,0,4,1,0,8],
[5,4,6,6,0,4,4,7],
[6,6,5,9,6,0,5,7],
[8,8,2,10,6,5,0,8],
[6,5,4,2,3,3,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,5,7,4,6,7],
[7,0,4,5,8,5,6,6],
[6,6,0,3,5,4,7,6],
[5,5,7,0,8,3,8,9],
[3,2,5,2,0,3,4,4],
[6,5,6,7,7,0,7,8],
[4,4,3,2,6,3,0,3],
[3,4,4,1,6,2,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,10,10,10,5,5],
[0,0,0,5,5,10,5,5],
[5,10,0,5,5,10,5,5],
[0,5,5,0,10,5,0,0],
[0,5,5,0,0,5,0,0],
[0,0,0,5,5,0,5,0],
[5,5,5,10,10,5,0,5],
[5,5,5,10,10,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,7,5,9,7,8],
[2,0,6,4,3,6,5,4],
[3,4,0,4,3,6,5,5],
[3,6,6,0,5,9,7,6],
[5,7,7,5,0,9,6,7],
[1,4,4,1,1,0,4,2],
[3,5,5,3,4,6,0,5],
[2,6,5,4,3,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,5,5,5],
[5,0,10,5,5,10,5,0],
[5,0,0,0,5,0,5,0],
[5,5,10,0,5,5,5,0],
[5,5,5,5,0,5,5,5],
[5,0,10,5,5,0,5,0],
[5,5,5,5,5,5,0,0],
[5,10,10,10,5,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,6,7,7,7,7],
[4,0,3,10,4,4,4,4],
[7,7,0,10,4,4,4,4],
[4,0,0,0,4,4,4,4],
[3,6,6,6,0,0,10,0],
[3,6,6,6,10,0,10,7],
[3,6,6,6,0,0,0,0],
[3,6,6,6,10,3,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,9,3,6,3,3],
[7,0,7,7,7,7,4,7],
[6,3,0,6,3,3,6,3],
[1,3,4,0,3,3,0,0],
[7,3,7,7,0,6,6,3],
[4,3,7,7,4,0,3,0],
[7,6,4,10,4,7,0,6],
[7,3,7,10,7,10,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,4,4,8,7,7],
[4,0,8,7,5,8,6,8],
[4,2,0,5,3,8,6,8],
[6,3,5,0,6,6,6,10],
[6,5,7,4,0,8,8,5],
[2,2,2,4,2,0,0,5],
[3,4,4,4,2,10,0,7],
[3,2,2,0,5,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,2,3,3,3,4],
[6,0,3,3,3,3,7,6],
[6,7,0,4,4,4,5,6],
[8,7,6,0,3,4,7,7],
[7,7,6,7,0,4,6,6],
[7,7,6,6,6,0,7,5],
[7,3,5,3,4,3,0,6],
[6,4,4,3,4,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,8,3,5,5,3,3],
[9,0,10,9,8,9,5,8],
[2,0,0,2,2,4,1,1],
[7,1,8,0,6,7,4,5],
[5,2,8,4,0,6,4,2],
[5,1,6,3,4,0,3,4],
[7,5,9,6,6,7,0,6],
[7,2,9,5,8,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,0,1,4,7,0,0],
[6,0,5,5,8,3,4,6],
[10,5,0,8,8,8,7,4],
[9,5,2,0,4,6,8,2],
[6,2,2,6,0,3,6,3],
[3,7,2,4,7,0,3,3],
[10,6,3,2,4,7,0,4],
[10,4,6,8,7,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,5,5,8,4,9],
[4,0,9,6,5,5,5,6],
[2,1,0,2,1,6,5,2],
[5,4,8,0,6,9,5,5],
[5,5,9,4,0,8,4,5],
[2,5,4,1,2,0,3,2],
[6,5,5,5,6,7,0,6],
[1,4,8,5,5,8,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,5,8,8,5,7],
[2,0,8,6,9,4,5,5],
[2,2,0,5,5,2,3,2],
[5,4,5,0,4,4,3,2],
[2,1,5,6,0,2,1,0],
[2,6,8,6,8,0,4,4],
[5,5,7,7,9,6,0,4],
[3,5,8,8,10,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,5,10,10,5,5],
[5,0,2,5,5,5,7,5],
[3,8,0,3,5,5,5,3],
[5,5,7,0,5,10,5,5],
[0,5,5,5,0,8,2,2],
[0,5,5,0,2,0,2,0],
[5,3,5,5,8,8,0,5],
[5,5,7,5,8,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,4,4,8,4,0],
[2,0,1,1,0,10,4,0],
[5,9,0,9,1,9,9,5],
[6,9,1,0,1,10,9,0],
[6,10,9,9,0,10,9,5],
[2,0,1,0,0,0,4,0],
[6,6,1,1,1,6,0,1],
[10,10,5,10,5,10,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,3,5,5,4,5],
[4,0,6,3,6,5,4,5],
[5,4,0,5,5,5,4,4],
[7,7,5,0,8,4,5,6],
[5,4,5,2,0,4,2,5],
[5,5,5,6,6,0,4,6],
[6,6,6,5,8,6,0,7],
[5,5,6,4,5,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,2,7,0,7,0],
[7,0,5,2,7,0,7,0],
[5,5,0,0,7,0,5,0],
[8,8,10,0,7,0,5,3],
[3,3,3,3,0,0,3,3],
[10,10,10,10,10,0,10,5],
[3,3,5,5,7,0,0,3],
[10,10,10,7,7,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,5,5,8,8,7],
[5,0,4,3,6,6,7,8],
[8,6,0,4,6,8,8,8],
[5,7,6,0,6,9,7,9],
[5,4,4,4,0,6,4,6],
[2,4,2,1,4,0,6,5],
[2,3,2,3,6,4,0,4],
[3,2,2,1,4,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,2,5,5,3,6],
[6,0,8,4,4,6,7,5],
[7,2,0,5,3,8,5,5],
[8,6,5,0,7,7,4,6],
[5,6,7,3,0,6,5,4],
[5,4,2,3,4,0,4,7],
[7,3,5,6,5,6,0,5],
[4,5,5,4,6,3,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,5,6,5,7,7],
[2,0,6,3,4,3,2,5],
[2,4,0,4,3,3,4,5],
[5,7,6,0,4,4,7,4],
[4,6,7,6,0,7,7,6],
[5,7,7,6,3,0,5,5],
[3,8,6,3,3,5,0,7],
[3,5,5,6,4,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,6,5,3,6,2],
[4,0,7,8,3,3,4,3],
[6,3,0,4,4,5,3,2],
[4,2,6,0,2,3,3,3],
[5,7,6,8,0,4,4,4],
[7,7,5,7,6,0,7,6],
[4,6,7,7,6,3,0,3],
[8,7,8,7,6,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,2,4,5,7,2,7],
[8,0,5,5,6,8,3,8],
[8,5,0,5,6,5,3,10],
[6,5,5,0,6,5,5,8],
[5,4,4,4,0,7,4,7],
[3,2,5,5,3,0,0,7],
[8,7,7,5,6,10,0,10],
[3,2,0,2,3,3,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,7,5,4,5,6],
[6,0,6,4,2,4,6,5],
[5,4,0,6,4,3,8,7],
[3,6,4,0,3,3,4,5],
[5,8,6,7,0,4,6,5],
[6,6,7,7,6,0,7,5],
[5,4,2,6,4,3,0,2],
[4,5,3,5,5,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,5,5,10,5,5],
[0,0,5,5,0,10,5,5],
[5,5,0,10,5,10,10,5],
[5,5,0,0,5,10,0,5],
[5,10,5,5,0,10,5,5],
[0,0,0,0,0,0,0,0],
[5,5,0,10,5,10,0,5],
[5,5,5,5,5,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,4,6,4,5,5],
[3,0,4,4,5,3,4,5],
[4,6,0,6,5,4,5,6],
[6,6,4,0,7,6,5,8],
[4,5,5,3,0,1,4,4],
[6,7,6,4,9,0,5,7],
[5,6,5,5,6,5,0,8],
[5,5,4,2,6,3,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,4,6,3,6,4],
[6,0,5,4,6,5,7,5],
[5,5,0,5,7,5,3,5],
[6,6,5,0,6,5,6,6],
[4,4,3,4,0,3,3,4],
[7,5,5,5,7,0,8,7],
[4,3,7,4,7,2,0,3],
[6,5,5,4,6,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,5,6,6,6,6],
[4,0,3,5,4,6,3,4],
[7,7,0,6,6,7,5,6],
[5,5,4,0,6,5,5,4],
[4,6,4,4,0,6,5,4],
[4,4,3,5,4,0,5,5],
[4,7,5,5,5,5,0,6],
[4,6,4,6,6,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,7,6,7,5,8],
[4,0,8,5,6,6,4,6],
[3,2,0,2,3,2,2,4],
[3,5,8,0,4,4,3,5],
[4,4,7,6,0,4,4,8],
[3,4,8,6,6,0,4,6],
[5,6,8,7,6,6,0,8],
[2,4,6,5,2,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,5,5,6,2,2],
[6,0,6,6,7,7,4,5],
[5,4,0,5,4,8,5,6],
[5,4,5,0,5,6,4,4],
[5,3,6,5,0,6,2,4],
[4,3,2,4,4,0,4,3],
[8,6,5,6,8,6,0,6],
[8,5,4,6,6,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,10,7,5,4,4,4],
[3,0,5,5,0,7,2,4],
[0,5,0,7,2,2,4,4],
[3,5,3,0,3,4,3,4],
[5,10,8,7,0,9,7,7],
[6,3,8,6,1,0,3,5],
[6,8,6,7,3,7,0,4],
[6,6,6,6,3,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,0,5,5,5,5,5],
[5,0,5,5,5,5,10,5],
[10,5,0,10,5,5,10,5],
[5,5,0,0,0,0,10,0],
[5,5,5,10,0,5,10,5],
[5,5,5,10,5,0,10,5],
[5,0,0,0,0,0,0,0],
[5,5,5,10,5,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,6,6,6,5,5],
[6,0,5,5,5,5,4,6],
[4,5,0,4,3,6,4,4],
[4,5,6,0,5,7,4,6],
[4,5,7,5,0,6,5,4],
[4,5,4,3,4,0,4,6],
[5,6,6,6,5,6,0,5],
[5,4,6,4,6,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,5,6,3,7,6],
[4,0,3,5,5,2,4,6],
[6,7,0,8,7,4,7,5],
[5,5,2,0,5,5,5,5],
[4,5,3,5,0,1,4,4],
[7,8,6,5,9,0,7,8],
[3,6,3,5,6,3,0,4],
[4,4,5,5,6,2,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,6,6,3,6,9],
[3,0,5,7,8,2,7,6],
[7,5,0,9,7,5,8,7],
[4,3,1,0,4,1,7,4],
[4,2,3,6,0,1,6,7],
[7,8,5,9,9,0,8,9],
[4,3,2,3,4,2,0,3],
[1,4,3,6,3,1,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,1,4,3,4,4],
[7,0,8,3,5,4,4,6],
[7,2,0,2,6,2,4,6],
[9,7,8,0,7,5,5,7],
[6,5,4,3,0,4,4,4],
[7,6,8,5,6,0,5,6],
[6,6,6,5,6,5,0,6],
[6,4,4,3,6,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,4,5,7,4,5],
[5,0,4,6,4,6,5,5],
[6,6,0,5,3,4,4,6],
[6,4,5,0,4,6,4,5],
[5,6,7,6,0,7,6,4],
[3,4,6,4,3,0,3,3],
[6,5,6,6,4,7,0,5],
[5,5,4,5,6,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,5,5,7,7,7],
[4,0,3,4,5,5,6,5],
[4,7,0,5,6,7,7,6],
[5,6,5,0,4,7,6,6],
[5,5,4,6,0,6,7,5],
[3,5,3,3,4,0,6,4],
[3,4,3,4,3,4,0,4],
[3,5,4,4,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,4,3,5,6,8],
[3,0,3,4,4,5,4,4],
[5,7,0,4,3,3,6,6],
[6,6,6,0,5,6,7,6],
[7,6,7,5,0,4,7,7],
[5,5,7,4,6,0,8,8],
[4,6,4,3,3,2,0,3],
[2,6,4,4,3,2,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,8,7,6,7,7],
[3,0,4,9,7,4,4,8],
[6,6,0,9,7,6,4,6],
[2,1,1,0,2,2,1,6],
[3,3,3,8,0,3,3,6],
[4,6,4,8,7,0,6,7],
[3,6,6,9,7,4,0,7],
[3,2,4,4,4,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,5,3,7,4,3],
[3,0,2,3,1,6,0,1],
[7,8,0,8,4,9,5,2],
[5,7,2,0,4,6,3,2],
[7,9,6,6,0,8,4,6],
[3,4,1,4,2,0,1,1],
[6,10,5,7,6,9,0,5],
[7,9,8,8,4,9,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,4,7,10,5,8],
[2,0,7,0,7,4,5,4],
[3,3,0,0,7,4,6,4],
[6,10,10,0,9,6,8,5],
[3,3,3,1,0,6,2,4],
[0,6,6,4,4,0,5,5],
[5,5,4,2,8,5,0,5],
[2,6,6,5,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,10,0,5,0,10],
[5,0,5,5,0,0,0,10],
[5,5,0,10,0,5,0,10],
[0,5,0,0,0,0,0,5],
[10,10,10,10,0,5,5,10],
[5,10,5,10,5,0,0,10],
[10,10,10,10,5,10,0,10],
[0,0,0,5,0,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,3,5,4,7,7],
[5,0,5,4,5,5,2,6],
[0,5,0,1,0,2,0,3],
[7,6,9,0,7,4,6,7],
[5,5,10,3,0,5,7,5],
[6,5,8,6,5,0,3,5],
[3,8,10,4,3,7,0,8],
[3,4,7,3,5,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,3,1,2,3,3],
[7,0,4,4,2,5,3,4],
[6,6,0,3,3,5,4,4],
[7,6,7,0,5,6,5,6],
[9,8,7,5,0,5,5,6],
[8,5,5,4,5,0,5,4],
[7,7,6,5,5,5,0,4],
[7,6,6,4,4,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,5,3,6,5,3],
[6,0,9,5,9,5,6,3],
[6,1,0,3,5,4,6,2],
[5,5,7,0,5,6,5,4],
[7,1,5,5,0,5,4,1],
[4,5,6,4,5,0,4,5],
[5,4,4,5,6,6,0,4],
[7,7,8,6,9,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,5,2,7],
[5,0,5,5,10,5,5,7],
[5,5,0,5,5,5,2,2],
[5,5,5,0,10,0,5,7],
[5,0,5,0,0,0,0,5],
[5,5,5,10,10,0,5,7],
[8,5,8,5,10,5,0,10],
[3,3,8,3,5,3,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,5,3,5,5,5],
[3,0,5,4,5,4,3,4],
[6,5,0,6,6,6,6,6],
[5,6,4,0,5,6,3,6],
[7,5,4,5,0,8,6,5],
[5,6,4,4,2,0,3,3],
[5,7,4,7,4,7,0,5],
[5,6,4,4,5,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,0,0,0,5],
[10,0,5,5,5,5,0,5],
[10,5,0,5,5,0,0,5],
[10,5,5,0,5,0,0,5],
[10,5,5,5,0,5,5,5],
[10,5,10,10,5,0,0,10],
[10,10,10,10,5,10,0,10],
[5,5,5,5,5,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,0,0,0,5,5],
[5,0,0,0,5,0,10,5],
[5,10,0,5,5,5,10,10],
[10,10,5,0,10,5,10,5],
[10,5,5,0,0,5,5,5],
[10,10,5,5,5,0,10,5],
[5,0,0,0,5,0,0,5],
[5,5,0,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,5,4,7,6,7],
[7,0,6,7,5,6,7,8],
[4,4,0,4,2,3,6,5],
[5,3,6,0,6,6,7,6],
[6,5,8,4,0,6,7,7],
[3,4,7,4,4,0,6,6],
[4,3,4,3,3,4,0,4],
[3,2,5,4,3,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,6,5,7,6,5,7],
[2,0,7,2,7,7,1,4],
[4,3,0,4,5,6,3,7],
[5,8,6,0,6,7,6,5],
[3,3,5,4,0,7,3,6],
[4,3,4,3,3,0,2,4],
[5,9,7,4,7,8,0,5],
[3,6,3,5,4,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,0,7,4,4,4,4],
[6,0,3,6,7,3,3,7],
[10,7,0,7,7,10,7,4],
[3,4,3,0,7,7,7,4],
[6,3,3,3,0,3,0,0],
[6,7,0,3,7,0,4,4],
[6,7,3,3,10,6,0,7],
[6,3,6,6,10,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,4,7,7,7,7],
[3,0,3,2,3,4,2,2],
[3,7,0,3,4,4,4,6],
[6,8,7,0,5,6,6,5],
[3,7,6,5,0,5,5,7],
[3,6,6,4,5,0,5,6],
[3,8,6,4,5,5,0,7],
[3,8,4,5,3,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,5,3,6,9,7],
[5,0,5,7,6,7,7,6],
[2,5,0,6,3,8,9,8],
[5,3,4,0,3,7,9,5],
[7,4,7,7,0,7,9,5],
[4,3,2,3,3,0,6,2],
[1,3,1,1,1,4,0,5],
[3,4,2,5,5,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,5,5,3,3,2,3],
[10,0,10,5,5,8,8,10],
[5,0,0,2,5,4,2,2],
[5,5,8,0,8,8,5,7],
[7,5,5,2,0,7,7,5],
[7,2,6,2,3,0,4,2],
[8,2,8,5,3,6,0,8],
[7,0,8,3,5,8,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,5,7,7,6],
[4,0,6,3,4,4,4,4],
[4,4,0,3,3,6,3,5],
[4,7,7,0,4,6,6,3],
[5,6,7,6,0,7,5,6],
[3,6,4,4,3,0,4,5],
[3,6,7,4,5,6,0,6],
[4,6,5,7,4,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,10,10,10,10,10],
[5,0,10,10,10,10,10,10],
[0,0,0,5,5,5,5,10],
[0,0,5,0,5,5,5,10],
[0,0,5,5,0,5,5,5],
[0,0,5,5,5,0,5,5],
[0,0,5,5,5,5,0,10],
[0,0,0,0,5,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,4,6,5,7,4],
[7,0,7,5,5,7,10,6],
[6,3,0,5,6,5,10,6],
[6,5,5,0,5,6,7,5],
[4,5,4,5,0,5,7,6],
[5,3,5,4,5,0,5,5],
[3,0,0,3,3,5,0,3],
[6,4,4,5,4,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,2,4,9,6,8,5],
[4,0,4,4,8,6,7,7],
[8,6,0,5,9,7,10,7],
[6,6,5,0,9,7,7,5],
[1,2,1,1,0,3,3,2],
[4,4,3,3,7,0,6,4],
[2,3,0,3,7,4,0,3],
[5,3,3,5,8,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,1,3,2,7,6],
[7,0,4,4,8,5,7,9],
[5,6,0,6,6,5,6,9],
[9,6,4,0,7,6,6,6],
[7,2,4,3,0,5,6,9],
[8,5,5,4,5,0,5,4],
[3,3,4,4,4,5,0,9],
[4,1,1,4,1,6,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,4,5,6,3,2],
[6,0,7,5,5,6,6,5],
[5,3,0,3,4,5,3,2],
[6,5,7,0,5,7,5,5],
[5,5,6,5,0,4,4,3],
[4,4,5,3,6,0,4,3],
[7,4,7,5,6,6,0,4],
[8,5,8,5,7,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,6,4,2,3,5],
[7,0,7,7,5,4,4,5],
[4,3,0,4,3,2,3,4],
[4,3,6,0,5,3,3,2],
[6,5,7,5,0,3,6,3],
[8,6,8,7,7,0,6,5],
[7,6,7,7,4,4,0,4],
[5,5,6,8,7,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,8,3,5,7,8],
[0,0,5,3,0,0,4,5],
[5,5,0,3,0,0,4,3],
[2,7,7,0,2,0,4,5],
[7,10,10,8,0,5,7,8],
[5,10,10,10,5,0,7,10],
[3,6,6,6,3,3,0,6],
[2,5,7,5,2,0,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,8,7,5,5,6],
[3,0,7,6,2,1,6,3],
[2,3,0,5,3,1,3,1],
[2,4,5,0,2,3,2,3],
[3,8,7,8,0,3,6,4],
[5,9,9,7,7,0,6,3],
[5,4,7,8,4,4,0,5],
[4,7,9,7,6,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,4,7,4,3,6,7],
[1,0,3,7,4,2,3,5],
[6,7,0,7,4,4,5,7],
[3,3,3,0,4,2,2,4],
[6,6,6,6,0,6,5,7],
[7,8,6,8,4,0,7,6],
[4,7,5,8,5,3,0,8],
[3,5,3,6,3,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,5,7,6,4,2],
[3,0,8,5,9,7,4,4],
[4,2,0,4,7,5,4,5],
[5,5,6,0,5,3,5,6],
[3,1,3,5,0,4,3,2],
[4,3,5,7,6,0,4,5],
[6,6,6,5,7,6,0,3],
[8,6,5,4,8,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,3,6,7,5,6],
[6,0,7,5,6,6,4,6],
[5,3,0,2,4,4,3,6],
[7,5,8,0,7,7,5,8],
[4,4,6,3,0,9,6,5],
[3,4,6,3,1,0,3,5],
[5,6,7,5,4,7,0,6],
[4,4,4,2,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,2,5,5,5,5],
[4,0,5,5,7,5,8,6],
[5,5,0,4,5,5,6,7],
[8,5,6,0,5,5,7,7],
[5,3,5,5,0,4,4,6],
[5,5,5,5,6,0,6,8],
[5,2,4,3,6,4,0,5],
[5,4,3,3,4,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,0,3,3,3,3],
[7,0,3,0,7,7,3,3],
[7,7,0,4,7,7,7,10],
[10,10,6,0,10,10,3,6],
[7,3,3,0,0,3,3,3],
[7,3,3,0,7,0,3,3],
[7,7,3,7,7,7,0,6],
[7,7,0,4,7,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,8,2,8,4,6],
[7,0,3,6,3,7,5,6],
[7,7,0,7,5,7,4,7],
[2,4,3,0,2,2,4,4],
[8,7,5,8,0,8,4,6],
[2,3,3,8,2,0,4,4],
[6,5,6,6,6,6,0,8],
[4,4,3,6,4,6,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,7,2,4,9,10],
[4,0,4,6,1,4,6,4],
[5,6,0,6,1,3,9,6],
[3,4,4,0,4,3,6,3],
[8,9,9,6,0,5,9,9],
[6,6,7,7,5,0,9,10],
[1,4,1,4,1,1,0,1],
[0,6,4,7,1,0,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,2,5,1,5,3,1],
[9,0,2,5,0,4,5,6],
[8,8,0,8,3,10,6,6],
[5,5,2,0,2,5,5,5],
[9,10,7,8,0,9,5,8],
[5,6,0,5,1,0,5,6],
[7,5,4,5,5,5,0,6],
[9,4,4,5,2,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,5,5,5,5,5],
[5,0,10,5,5,5,5,5],
[0,0,0,0,5,5,0,0],
[5,5,10,0,10,10,0,5],
[5,5,5,0,0,5,0,5],
[5,5,5,0,5,0,0,5],
[5,5,10,10,10,10,0,10],
[5,5,10,5,5,5,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,3,0,3,2,0,0],
[10,0,7,5,7,7,5,8],
[7,3,0,0,0,4,0,5],
[10,5,10,0,5,7,0,5],
[7,3,10,5,0,7,5,5],
[8,3,6,3,3,0,3,6],
[10,5,10,10,5,7,0,5],
[10,2,5,5,5,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,1,5,2,4,1,4],
[7,0,3,7,4,5,7,8],
[9,7,0,8,4,4,7,8],
[5,3,2,0,2,4,1,3],
[8,6,6,8,0,8,5,7],
[6,5,6,6,2,0,6,8],
[9,3,3,9,5,4,0,8],
[6,2,2,7,3,2,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,3,2,2,5,1,2],
[9,0,6,6,6,7,8,5],
[7,4,0,3,3,4,5,3],
[8,4,7,0,3,5,6,5],
[8,4,7,7,0,8,7,5],
[5,3,6,5,2,0,4,5],
[9,2,5,4,3,6,0,3],
[8,5,7,5,5,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,8,8,9,3,7],
[4,0,7,6,4,6,3,7],
[4,3,0,9,5,6,2,7],
[2,4,1,0,2,4,3,6],
[2,6,5,8,0,3,2,5],
[1,4,4,6,7,0,3,6],
[7,7,8,7,8,7,0,5],
[3,3,3,4,5,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,7,7,5,5,6],
[2,0,5,4,3,2,3,4],
[2,5,0,4,4,3,5,5],
[3,6,6,0,7,4,6,5],
[3,7,6,3,0,3,7,2],
[5,8,7,6,7,0,6,6],
[5,7,5,4,3,4,0,3],
[4,6,5,5,8,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,0,0,0,5],
[5,0,5,0,5,0,5,0],
[5,5,0,5,5,0,0,0],
[5,10,5,0,5,0,5,0],
[10,5,5,5,0,5,0,5],
[10,10,10,10,5,0,5,5],
[10,5,10,5,10,5,0,5],
[5,10,10,10,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,3,7,5,3,10],
[4,0,7,7,7,7,3,7],
[2,3,0,2,2,2,2,2],
[7,3,8,0,4,10,5,7],
[3,3,8,6,0,6,6,10],
[5,3,8,0,4,0,3,7],
[7,7,8,5,4,7,0,7],
[0,3,8,3,0,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,5,5,10,5,0],
[0,0,5,0,5,10,5,0],
[5,5,0,5,0,5,5,5],
[5,10,5,0,5,10,5,5],
[5,5,10,5,0,10,5,5],
[0,0,5,0,0,0,0,0],
[5,5,5,5,5,10,0,5],
[10,10,5,5,5,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,10,0,10,5,5],
[5,0,5,5,0,10,10,10],
[5,5,0,5,5,10,5,5],
[0,5,5,0,0,10,5,5],
[10,10,5,10,0,10,10,10],
[0,0,0,0,0,0,5,5],
[5,0,5,5,0,5,0,5],
[5,0,5,5,0,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,5,0,5,5,5],
[0,0,0,0,0,0,0,0],
[5,10,0,5,0,5,5,0],
[5,10,5,0,5,5,0,5],
[10,10,10,5,0,5,5,5],
[5,10,5,5,5,0,5,5],
[5,10,5,10,5,5,0,5],
[5,10,10,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,10,10,10,5,5],
[5,0,5,10,5,5,5,10],
[5,5,0,5,10,10,5,5],
[0,0,5,0,5,5,5,0],
[0,5,0,5,0,5,0,5],
[0,5,0,5,5,0,0,5],
[5,5,5,5,10,10,0,5],
[5,0,5,10,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,3,5,5,5,4,4],
[2,0,4,1,3,2,3,2],
[7,6,0,3,9,7,8,8],
[5,9,7,0,6,6,6,7],
[5,7,1,4,0,3,2,6],
[5,8,3,4,7,0,7,5],
[6,7,2,4,8,3,0,7],
[6,8,2,3,4,5,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,5,5,3,3,3],
[4,0,5,5,2,2,5,6],
[6,5,0,5,4,4,2,4],
[5,5,5,0,3,5,3,6],
[5,8,6,7,0,6,4,6],
[7,8,6,5,4,0,5,4],
[7,5,8,7,6,5,0,6],
[7,4,6,4,4,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,10,0,5,5,0],
[0,0,5,0,0,0,5,0],
[5,5,0,5,5,0,5,5],
[0,10,5,0,0,5,5,0],
[10,10,5,10,0,5,5,5],
[5,10,10,5,5,0,5,5],
[5,5,5,5,5,5,0,0],
[10,10,5,10,5,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,6,7,6,7,7],
[3,0,2,3,6,2,2,4],
[5,8,0,7,8,5,5,7],
[4,7,3,0,8,6,4,3],
[3,4,2,2,0,4,3,4],
[4,8,5,4,6,0,4,3],
[3,8,5,6,7,6,0,5],
[3,6,3,7,6,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,0,0,5,0,5],
[5,0,10,0,0,5,5,10],
[5,0,0,0,0,0,5,5],
[10,10,10,0,5,5,5,10],
[10,10,10,5,0,10,5,10],
[5,5,10,5,0,0,5,10],
[10,5,5,5,5,5,0,10],
[5,0,5,0,0,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,4,7,9,8,2],
[4,0,4,5,5,7,9,5],
[4,6,0,5,7,7,7,4],
[6,5,5,0,7,7,6,5],
[3,5,3,3,0,8,7,4],
[1,3,3,3,2,0,4,2],
[2,1,3,4,3,6,0,3],
[8,5,6,5,6,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,7,6,7,7,6],
[5,0,6,8,7,8,9,7],
[4,4,0,8,4,8,7,6],
[3,2,2,0,1,3,3,2],
[4,3,6,9,0,6,7,3],
[3,2,2,7,4,0,4,3],
[3,1,3,7,3,6,0,3],
[4,3,4,8,7,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,6,6,6,6],
[5,0,4,5,7,3,6,4],
[5,6,0,5,5,4,6,5],
[5,5,5,0,7,6,7,8],
[4,3,5,3,0,3,6,3],
[4,7,6,4,7,0,7,5],
[4,4,4,3,4,3,0,3],
[4,6,5,2,7,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,3,4,4,5,5],
[4,0,2,4,4,4,6,2],
[5,8,0,6,6,9,7,3],
[7,6,4,0,8,8,8,4],
[6,6,4,2,0,3,8,4],
[6,6,1,2,7,0,8,3],
[5,4,3,2,2,2,0,3],
[5,8,7,6,6,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,3,3,3,4,3,4],
[3,0,3,4,4,1,6,0],
[7,7,0,4,4,3,6,4],
[7,6,6,0,0,3,3,6],
[7,6,6,10,0,3,3,6],
[6,9,7,7,7,0,9,4],
[7,4,4,7,7,1,0,4],
[6,10,6,4,4,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,6,4,4,7,4],
[3,0,7,5,4,5,4,4],
[3,3,0,5,4,5,4,3],
[4,5,5,0,4,3,5,5],
[6,6,6,6,0,6,5,6],
[6,5,5,7,4,0,5,7],
[3,6,6,5,5,5,0,3],
[6,6,7,5,4,3,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,3,4,5,5,5],
[5,0,5,4,4,6,6,4],
[6,5,0,6,6,6,6,6],
[7,6,4,0,5,5,7,4],
[6,6,4,5,0,9,6,5],
[5,4,4,5,1,0,3,4],
[5,4,4,3,4,7,0,4],
[5,6,4,6,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,6,2,2,8,2],
[6,0,6,8,4,8,10,4],
[4,4,0,4,4,2,10,6],
[4,2,6,0,4,2,10,4],
[8,6,6,6,0,6,8,4],
[8,2,8,8,4,0,10,4],
[2,0,0,0,2,0,0,0],
[8,6,4,6,6,6,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,3,3,8,8,4],
[5,0,2,5,3,8,8,6],
[8,8,0,3,1,8,6,4],
[7,5,7,0,5,7,7,5],
[7,7,9,5,0,9,7,6],
[2,2,2,3,1,0,4,4],
[2,2,4,3,3,6,0,6],
[6,4,6,5,4,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,6,6,3,6],
[4,0,4,4,4,4,4,4],
[4,6,0,7,4,3,4,0],
[4,6,3,0,7,0,0,0],
[4,6,6,3,0,3,0,3],
[4,6,7,10,7,0,7,4],
[7,6,6,10,10,3,0,3],
[4,6,10,10,7,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,0,10,5,5,5,5],
[5,0,5,10,10,0,5,5],
[10,5,0,10,5,5,5,10],
[0,0,0,0,0,0,0,5],
[5,0,5,10,0,0,0,5],
[5,10,5,10,10,0,10,5],
[5,5,5,10,10,0,0,5],
[5,5,0,5,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,2,5,3,5,0],
[8,0,8,5,8,8,10,8],
[7,2,0,2,2,5,2,2],
[8,5,8,0,8,3,10,8],
[5,2,8,2,0,3,5,0],
[7,2,5,7,7,0,7,5],
[5,0,8,0,5,3,0,5],
[10,2,8,2,10,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,6,3,5,7,9,5],
[8,0,5,5,5,8,8,5],
[4,5,0,6,1,4,4,3],
[7,5,4,0,3,5,6,7],
[5,5,9,7,0,7,4,4],
[3,2,6,5,3,0,7,5],
[1,2,6,4,6,3,0,5],
[5,5,7,3,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,7,5,4,4,3],
[4,0,3,3,6,5,4,4],
[7,7,0,7,7,6,7,5],
[3,7,3,0,5,3,3,2],
[5,4,3,5,0,7,4,5],
[6,5,4,7,3,0,5,2],
[6,6,3,7,6,5,0,6],
[7,6,5,8,5,8,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,8,10,4,4,7],
[8,0,5,8,10,7,10,5],
[6,5,0,8,10,5,10,10],
[2,2,2,0,7,2,4,4],
[0,0,0,3,0,0,2,0],
[6,3,5,8,10,0,8,8],
[6,0,0,6,8,2,0,3],
[3,5,0,6,10,2,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,4,0,0,0,0],
[10,0,6,10,7,6,3,7],
[10,4,0,7,7,7,7,7],
[6,0,3,0,3,6,0,3],
[10,3,3,7,0,3,3,4],
[10,4,3,4,7,0,0,7],
[10,7,3,10,7,10,0,7],
[10,3,3,7,6,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,5,6,8,8,6],
[7,0,4,7,5,8,7,3],
[7,6,0,7,5,9,9,7],
[5,3,3,0,6,7,9,6],
[4,5,5,4,0,6,7,4],
[2,2,1,3,4,0,7,4],
[2,3,1,1,3,3,0,4],
[4,7,3,4,6,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,4,6,6,8,6],
[4,0,6,4,2,2,4,6],
[4,4,0,8,0,4,8,10],
[6,6,2,0,2,2,4,10],
[4,8,10,8,0,8,8,10],
[4,8,6,8,2,0,4,10],
[2,6,2,6,2,6,0,6],
[4,4,0,0,0,0,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,4,5,3,9,2],
[5,0,2,7,3,5,7,5],
[7,8,0,7,10,5,7,8],
[6,3,3,0,3,2,6,2],
[5,7,0,7,0,5,7,5],
[7,5,5,8,5,0,7,6],
[1,3,3,4,3,3,0,3],
[8,5,2,8,5,4,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,10,6,4,8,5,6],
[3,0,9,6,4,8,5,6],
[0,1,0,6,2,6,5,4],
[4,4,4,0,5,7,3,7],
[6,6,8,5,0,8,5,6],
[2,2,4,3,2,0,3,4],
[5,5,5,7,5,7,0,7],
[4,4,6,3,4,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,0,2,3,4,4,5],
[7,0,5,4,10,6,6,4],
[10,5,0,7,8,9,6,7],
[8,6,3,0,6,9,7,9],
[7,0,2,4,0,3,3,4],
[6,4,1,1,7,0,2,5],
[6,4,4,3,7,8,0,6],
[5,6,3,1,6,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,2,7,5,7,5],
[8,0,8,5,10,8,9,8],
[5,2,0,2,8,6,2,10],
[8,5,8,0,10,8,9,8],
[3,0,2,0,0,0,2,2],
[5,2,4,2,10,0,2,5],
[3,1,8,1,8,8,0,8],
[5,2,0,2,8,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,7,5,5,4,4],
[5,0,5,6,9,8,3,8],
[5,5,0,5,10,8,3,5],
[3,4,5,0,7,6,5,5],
[5,1,0,3,0,3,2,3],
[5,2,2,4,7,0,2,4],
[6,7,7,5,8,8,0,7],
[6,2,5,5,7,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,5,9,8,7,8],
[6,0,4,7,9,8,7,8],
[5,6,0,7,7,6,4,9],
[5,3,3,0,6,8,4,8],
[1,1,3,4,0,3,5,4],
[2,2,4,2,7,0,5,4],
[3,3,6,6,5,5,0,7],
[2,2,1,2,6,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,10,3,2,7,6,3],
[7,0,8,5,7,5,8,7],
[0,2,0,3,2,3,3,3],
[7,5,7,0,9,5,10,3],
[8,3,8,1,0,5,6,3],
[3,5,7,5,5,0,6,3],
[4,2,7,0,4,4,0,2],
[7,3,7,7,7,7,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,6,8,6,6,8,6],
[8,0,6,8,6,4,6,6],
[4,4,0,7,6,6,6,7],
[2,2,3,0,3,3,2,3],
[4,4,4,7,0,2,6,7],
[4,6,4,7,8,0,6,5],
[2,4,4,8,4,4,0,6],
[4,4,3,7,3,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,10,10,10,10,10],
[0,0,5,0,5,0,5,0],
[5,5,0,5,5,5,5,5],
[0,10,5,0,10,5,10,5],
[0,5,5,0,0,5,0,0],
[0,10,5,5,5,0,5,0],
[0,5,5,0,10,5,0,0],
[0,10,5,5,10,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,10,5,5,5,5],
[0,0,0,10,0,0,0,0],
[5,10,0,10,10,10,10,5],
[0,0,0,0,0,0,0,0],
[5,10,0,10,0,5,5,5],
[5,10,0,10,5,0,5,5],
[5,10,0,10,5,5,0,5],
[5,10,5,10,5,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,10,10,10,5,5],
[0,0,5,5,0,5,5,0],
[5,5,0,10,5,10,10,0],
[0,5,0,0,5,5,0,0],
[0,10,5,5,0,5,5,5],
[0,5,0,5,5,0,5,0],
[5,5,0,10,5,5,0,0],
[5,10,10,10,5,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,1,2,0,2,2,4],
[9,0,4,4,2,3,2,4],
[9,6,0,4,4,5,4,7],
[8,6,6,0,5,6,5,8],
[10,8,6,5,0,6,2,8],
[8,7,5,4,4,0,3,2],
[8,8,6,5,8,7,0,6],
[6,6,3,2,2,8,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,5,4,2,6,5],
[6,0,7,7,6,5,5,5],
[5,3,0,4,3,3,4,3],
[5,3,6,0,2,5,6,4],
[6,4,7,8,0,7,5,4],
[8,5,7,5,3,0,6,4],
[4,5,6,4,5,4,0,3],
[5,5,7,6,6,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,8,6,8,3,3],
[6,0,6,8,4,7,7,3],
[4,4,0,8,6,5,4,3],
[2,2,2,0,6,6,3,3],
[4,6,4,4,0,9,5,5],
[2,3,5,4,1,0,5,2],
[7,3,6,7,5,5,0,2],
[7,7,7,7,5,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,7,6,10,5,8],
[4,0,4,5,5,8,4,5],
[3,6,0,6,6,7,4,5],
[3,5,4,0,4,9,4,6],
[4,5,4,6,0,7,3,4],
[0,2,3,1,3,0,3,1],
[5,6,6,6,7,7,0,5],
[2,5,5,4,6,9,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,6,3,7,0,3,0],
[10,0,10,10,7,4,7,7],
[4,0,0,4,4,4,4,4],
[7,0,6,0,7,4,4,3],
[3,3,6,3,0,3,3,3],
[10,6,6,6,7,0,10,3],
[7,3,6,6,7,0,0,3],
[10,3,6,7,7,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,3,5,1,4,8],
[5,0,5,1,8,2,3,5],
[6,5,0,1,7,2,1,6],
[7,9,9,0,9,6,5,8],
[5,2,3,1,0,1,2,5],
[9,8,8,4,9,0,5,8],
[6,7,9,5,8,5,0,6],
[2,5,4,2,5,2,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,6,3,5,7,7],
[5,0,6,4,5,4,6,5],
[5,4,0,5,3,5,4,7],
[4,6,5,0,5,3,6,8],
[7,5,7,5,0,4,7,8],
[5,6,5,7,6,0,6,7],
[3,4,6,4,3,4,0,4],
[3,5,3,2,2,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,0,0,5,10,5],
[5,0,0,5,0,5,5,5],
[5,10,0,5,5,10,10,10],
[10,5,5,0,5,5,10,5],
[10,10,5,5,0,10,10,10],
[5,5,0,5,0,0,10,5],
[0,5,0,0,0,0,0,0],
[5,5,0,5,0,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,2,3,3,6,2],
[6,0,2,3,2,6,4,3],
[6,8,0,6,1,7,4,3],
[8,7,4,0,2,5,5,2],
[7,8,9,8,0,7,4,3],
[7,4,3,5,3,0,5,4],
[4,6,6,5,6,5,0,6],
[8,7,7,8,7,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,5,7,7,5,6],
[3,0,5,4,4,5,4,5],
[3,5,0,4,4,5,4,5],
[5,6,6,0,6,6,6,5],
[3,6,6,4,0,5,4,3],
[3,5,5,4,5,0,3,5],
[5,6,6,4,6,7,0,5],
[4,5,5,5,7,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,7,8,6,3],
[5,0,1,4,7,6,6,2],
[6,9,0,4,7,7,5,6],
[5,6,6,0,5,6,5,5],
[3,3,3,5,0,5,4,5],
[2,4,3,4,5,0,7,1],
[4,4,5,5,6,3,0,3],
[7,8,4,5,5,9,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,7,3,3,3,5],
[6,0,6,5,4,6,4,7],
[4,4,0,4,2,4,3,3],
[3,5,6,0,4,4,5,5],
[7,6,8,6,0,5,5,7],
[7,4,6,6,5,0,3,7],
[7,6,7,5,5,7,0,7],
[5,3,7,5,3,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,3,3,6,6,6,6],
[1,0,3,3,6,6,6,6],
[7,7,0,4,10,4,7,7],
[7,7,6,0,9,6,7,5],
[4,4,0,1,0,4,5,6],
[4,4,6,4,6,0,4,7],
[4,4,3,3,5,6,0,6],
[4,4,3,5,4,3,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,3,3,3,7,10,6],
[4,0,4,4,4,8,8,1],
[7,6,0,5,7,7,9,4],
[7,6,5,0,7,7,8,4],
[7,6,3,3,0,10,10,6],
[3,2,3,3,0,0,6,0],
[0,2,1,2,0,4,0,0],
[4,9,6,6,4,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,2,4,3,2,3],
[8,0,7,5,5,8,2,6],
[6,3,0,5,5,5,1,4],
[8,5,5,0,8,5,5,4],
[6,5,5,2,0,5,3,3],
[7,2,5,5,5,0,2,3],
[8,8,9,5,7,8,0,6],
[7,4,6,6,7,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,3,8,6,5,7],
[6,0,5,6,7,8,9,8],
[5,5,0,3,9,4,5,8],
[7,4,7,0,9,6,6,9],
[2,3,1,1,0,2,4,4],
[4,2,6,4,8,0,5,8],
[5,1,5,4,6,5,0,5],
[3,2,2,1,6,2,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,7,5,5,8,6],
[6,0,5,8,5,5,7,6],
[5,5,0,5,4,6,6,7],
[3,2,5,0,3,5,5,3],
[5,5,6,7,0,6,6,6],
[5,5,4,5,4,0,6,3],
[2,3,4,5,4,4,0,6],
[4,4,3,7,4,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,6,3,4,7,2],
[7,0,5,6,5,5,8,2],
[6,5,0,3,2,2,5,2],
[4,4,7,0,6,5,9,3],
[7,5,8,4,0,6,7,3],
[6,5,8,5,4,0,5,5],
[3,2,5,1,3,5,0,2],
[8,8,8,7,7,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,2,2,2,6,5,3],
[4,0,2,2,3,6,5,4],
[8,8,0,5,5,7,7,8],
[8,8,5,0,6,8,6,8],
[8,7,5,4,0,7,7,8],
[4,4,3,2,3,0,4,3],
[5,5,3,4,3,6,0,5],
[7,6,2,2,2,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,7,4,5,6,5],
[5,0,6,4,3,4,5,7],
[5,4,0,4,5,5,3,5],
[3,6,6,0,6,4,5,6],
[6,7,5,4,0,7,5,5],
[5,6,5,6,3,0,6,6],
[4,5,7,5,5,4,0,6],
[5,3,5,4,5,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,2,4,10,6,6,2],
[0,0,1,4,4,3,5,0],
[8,9,0,4,9,6,6,4],
[6,6,6,0,7,5,3,6],
[0,6,1,3,0,2,2,0],
[4,7,4,5,8,0,7,4],
[4,5,4,7,8,3,0,4],
[8,10,6,4,10,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,1,3,4,3,4,3],
[4,0,1,6,4,3,5,2],
[9,9,0,7,5,7,10,7],
[7,4,3,0,6,5,7,4],
[6,6,5,4,0,5,7,5],
[7,7,3,5,5,0,6,4],
[6,5,0,3,3,4,0,4],
[7,8,3,6,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,6,7,8,6,8,4],
[3,0,4,5,6,2,4,5],
[4,6,0,7,7,3,6,4],
[3,5,3,0,5,1,5,5],
[2,4,3,5,0,2,5,5],
[4,8,7,9,8,0,7,6],
[2,6,4,5,5,3,0,4],
[6,5,6,5,5,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,8,6,8,4,7],
[4,0,5,6,5,8,5,8],
[4,5,0,8,5,7,4,9],
[2,4,2,0,2,5,0,4],
[4,5,5,8,0,8,4,9],
[2,2,3,5,2,0,2,4],
[6,5,6,10,6,8,0,9],
[3,2,1,6,1,6,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,5,3,3,5,4],
[7,0,6,5,6,7,8,4],
[4,4,0,7,1,3,3,6],
[5,5,3,0,4,3,4,4],
[7,4,9,6,0,9,6,6],
[7,3,7,7,1,0,4,6],
[5,2,7,6,4,6,0,4],
[6,6,4,6,4,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,8,6,8,7,8,5],
[3,0,4,5,5,4,4,6],
[2,6,0,7,6,3,3,5],
[4,5,3,0,6,4,5,4],
[2,5,4,4,0,3,3,5],
[3,6,7,6,7,0,5,6],
[2,6,7,5,7,5,0,6],
[5,4,5,6,5,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,9,7,3,5,5],
[5,0,3,7,4,5,7,4],
[6,7,0,7,7,5,9,5],
[1,3,3,0,3,2,4,5],
[3,6,3,7,0,4,6,3],
[7,5,5,8,6,0,6,4],
[5,3,1,6,4,4,0,3],
[5,6,5,5,7,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,8,4,6,5],
[5,0,5,7,7,5,5,5],
[4,5,0,6,7,5,6,6],
[4,3,4,0,5,6,6,6],
[2,3,3,5,0,4,4,5],
[6,5,5,4,6,0,4,4],
[4,5,4,4,6,6,0,4],
[5,5,4,4,5,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,4,5,5,3,7,7],
[2,0,3,1,3,2,2,1],
[6,7,0,4,5,2,4,3],
[5,9,6,0,3,7,5,8],
[5,7,5,7,0,6,5,7],
[7,8,8,3,4,0,5,6],
[3,8,6,5,5,5,0,7],
[3,9,7,2,3,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,7,7,5,9,5,9],
[3,0,4,4,2,2,2,6],
[3,6,0,5,5,4,5,5],
[3,6,5,0,5,7,4,7],
[5,8,5,5,0,9,4,9],
[1,8,6,3,1,0,3,7],
[5,8,5,6,6,7,0,9],
[1,4,5,3,1,3,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,3,5,3,3,5],
[5,0,4,1,4,2,3,3],
[4,6,0,1,3,5,0,2],
[7,9,9,0,9,9,7,5],
[5,6,7,1,0,8,6,2],
[7,8,5,1,2,0,2,2],
[7,7,10,3,4,8,0,2],
[5,7,8,5,8,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,0,6,2,0,6,0],
[4,0,0,4,0,0,0,0],
[10,10,0,6,6,8,10,4],
[4,6,4,0,4,4,4,4],
[8,10,4,6,0,4,6,8],
[10,10,2,6,6,0,6,6],
[4,10,0,6,4,4,0,4],
[10,10,6,6,2,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,4,7,5,7,8,5],
[1,0,2,3,2,4,4,0],
[6,8,0,5,5,8,8,6],
[3,7,5,0,4,7,5,4],
[5,8,5,6,0,6,7,5],
[3,6,2,3,4,0,6,4],
[2,6,2,5,3,4,0,3],
[5,10,4,6,5,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,7,5,6,5,5],
[7,0,5,7,5,6,4,6],
[4,5,0,5,5,6,5,4],
[3,3,5,0,3,5,3,3],
[5,5,5,7,0,7,4,4],
[4,4,4,5,3,0,3,4],
[5,6,5,7,6,7,0,5],
[5,4,6,7,6,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,4,7,5,3,3],
[8,0,4,4,6,5,3,5],
[5,6,0,2,6,5,4,3],
[6,6,8,0,4,5,7,6],
[3,4,4,6,0,4,4,4],
[5,5,5,5,6,0,4,2],
[7,7,6,3,6,6,0,6],
[7,5,7,4,6,8,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,6,6,7,5,2],
[7,0,3,5,6,5,7,5],
[6,7,0,5,6,5,6,5],
[4,5,5,0,7,6,5,3],
[4,4,4,3,0,4,3,4],
[3,5,5,4,6,0,5,4],
[5,3,4,5,7,5,0,6],
[8,5,5,7,6,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,5,0,0,0,0],
[10,0,0,5,0,5,0,0],
[10,10,0,5,5,10,5,5],
[5,5,5,0,0,5,5,0],
[10,10,5,10,0,5,5,0],
[10,5,0,5,5,0,0,5],
[10,10,5,5,5,10,0,5],
[10,10,5,10,10,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,5,8,5,3,5,3],
[3,0,4,6,1,4,3,4],
[5,6,0,7,5,4,7,1],
[2,4,3,0,3,1,0,1],
[5,9,5,7,0,5,5,5],
[7,6,6,9,5,0,6,5],
[5,7,3,10,5,4,0,3],
[7,6,9,9,5,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,5,6,8,8,5,8],
[8,0,5,6,8,10,5,6],
[5,5,0,8,8,7,4,3],
[4,4,2,0,10,4,4,2],
[2,2,2,0,0,4,2,0],
[2,0,3,6,6,0,0,3],
[5,5,6,6,8,10,0,6],
[2,4,7,8,10,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,3,4,2,5,4,5],
[6,0,7,5,5,5,4,5],
[7,3,0,6,1,3,5,3],
[6,5,4,0,4,4,4,6],
[8,5,9,6,0,6,5,6],
[5,5,7,6,4,0,7,4],
[6,6,5,6,5,3,0,4],
[5,5,7,4,4,6,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,3,6,3,5,3],
[4,0,5,3,6,5,3,2],
[3,5,0,4,5,4,4,4],
[7,7,6,0,7,6,5,5],
[4,4,5,3,0,5,4,3],
[7,5,6,4,5,0,5,4],
[5,7,6,5,6,5,0,3],
[7,8,6,5,7,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,10,10,10,10,10],
[5,0,0,5,5,5,5,5],
[5,10,0,10,5,10,5,10],
[0,5,0,0,5,10,5,5],
[0,5,5,5,0,10,0,5],
[0,5,0,0,0,0,0,0],
[0,5,5,5,10,10,0,5],
[0,5,0,5,5,10,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,8,6,7,6,8],
[3,0,5,5,4,3,2,3],
[6,5,0,7,6,7,7,5],
[2,5,3,0,4,4,3,4],
[4,6,4,6,0,4,5,2],
[3,7,3,6,6,0,7,6],
[4,8,3,7,5,3,0,5],
[2,7,5,6,8,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,6,4,4,5,4],
[7,0,8,9,6,5,7,5],
[6,2,0,8,3,1,2,4],
[4,1,2,0,1,1,1,1],
[6,4,7,9,0,3,6,3],
[6,5,9,9,7,0,7,3],
[5,3,8,9,4,3,0,6],
[6,5,6,9,7,7,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,5,8,5,5,5],
[5,0,3,0,5,3,0,3],
[2,7,0,5,5,0,4,0],
[5,10,5,0,5,5,4,5],
[2,5,5,5,0,0,2,0],
[5,7,10,5,10,0,7,10],
[5,10,6,6,8,3,0,3],
[5,7,10,5,10,0,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,5,5,7,10,7,7],
[0,0,0,0,0,0,0,0],
[5,10,0,5,4,7,2,5],
[5,10,5,0,4,7,7,7],
[3,10,6,6,0,5,3,6],
[0,10,3,3,5,0,0,3],
[3,10,8,3,7,10,0,7],
[3,10,5,3,4,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,9,7,5,7,5,4],
[6,0,6,5,8,7,6,3],
[1,4,0,5,5,2,1,0],
[3,5,5,0,5,4,5,5],
[5,2,5,5,0,5,2,2],
[3,3,8,6,5,0,3,3],
[5,4,9,5,8,7,0,2],
[6,7,10,5,8,7,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,6,7,7,6,5],
[5,0,5,3,7,5,8,7],
[4,5,0,3,5,5,4,4],
[4,7,7,0,6,6,8,6],
[3,3,5,4,0,5,7,3],
[3,5,5,4,5,0,4,4],
[4,2,6,2,3,6,0,2],
[5,3,6,4,7,6,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,5,5,6,5,4],
[5,0,4,6,5,4,3,3],
[4,6,0,4,6,3,5,3],
[5,4,6,0,5,3,4,6],
[5,5,4,5,0,5,5,5],
[4,6,7,7,5,0,5,6],
[5,7,5,6,5,5,0,7],
[6,7,7,4,5,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,4,3,6,6,6],
[4,0,4,5,5,4,6,6],
[6,6,0,5,6,5,7,6],
[6,5,5,0,4,5,6,6],
[7,5,4,6,0,5,6,5],
[4,6,5,5,5,0,7,5],
[4,4,3,4,4,3,0,6],
[4,4,4,4,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,6,4,3,7,7],
[6,0,8,3,2,4,6,9],
[4,2,0,3,2,1,7,5],
[4,7,7,0,2,5,7,8],
[6,8,8,8,0,4,5,8],
[7,6,9,5,6,0,9,7],
[3,4,3,3,5,1,0,4],
[3,1,5,2,2,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,3,5,3,3,6],
[7,0,5,5,7,0,0,3],
[5,5,0,8,8,5,5,5],
[7,5,2,0,4,2,2,5],
[5,3,2,6,0,0,0,3],
[7,10,5,8,10,0,6,3],
[7,10,5,8,10,4,0,3],
[4,7,5,5,7,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,3,2,5,6,5],
[6,0,5,5,4,9,7,6],
[6,5,0,5,6,5,6,4],
[7,5,5,0,4,7,5,4],
[8,6,4,6,0,6,4,6],
[5,1,5,3,4,0,5,5],
[4,3,4,5,6,5,0,6],
[5,4,6,6,4,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,4,4,4,3,6],
[8,0,5,6,6,7,6,8],
[7,5,0,4,5,5,7,5],
[6,4,6,0,5,6,5,4],
[6,4,5,5,0,5,4,6],
[6,3,5,4,5,0,4,6],
[7,4,3,5,6,6,0,7],
[4,2,5,6,4,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,7,6,3,4,5],
[5,0,2,7,7,4,5,5],
[6,8,0,6,6,7,7,5],
[3,3,4,0,4,4,4,4],
[4,3,4,6,0,4,4,2],
[7,6,3,6,6,0,6,5],
[6,5,3,6,6,4,0,6],
[5,5,5,6,8,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,3,6,7,4,4,5],
[5,0,2,2,6,7,3,3],
[7,8,0,6,7,9,6,5],
[4,8,4,0,5,6,4,8],
[3,4,3,5,0,5,3,5],
[6,3,1,4,5,0,3,4],
[6,7,4,6,7,7,0,6],
[5,7,5,2,5,6,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,5,2,5,4],
[4,0,4,4,4,3,2,2],
[4,6,0,8,7,4,6,5],
[4,6,2,0,7,3,7,4],
[5,6,3,3,0,6,6,5],
[8,7,6,7,4,0,5,5],
[5,8,4,3,4,5,0,2],
[6,8,5,6,5,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,6,3,5,6,3,2],
[7,0,7,5,4,8,7,6],
[4,3,0,1,4,5,2,2],
[7,5,9,0,4,7,5,4],
[5,6,6,6,0,9,5,6],
[4,2,5,3,1,0,5,5],
[7,3,8,5,5,5,0,5],
[8,4,8,6,4,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,3,3,5,4,6],
[8,0,7,4,5,8,3,7],
[6,3,0,4,3,6,2,5],
[7,6,6,0,3,4,5,6],
[7,5,7,7,0,7,6,7],
[5,2,4,6,3,0,3,6],
[6,7,8,5,4,7,0,7],
[4,3,5,4,3,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,4,6,8,6,7],
[2,0,3,3,3,5,3,4],
[5,7,0,6,5,7,6,9],
[6,7,4,0,3,6,3,4],
[4,7,5,7,0,9,7,8],
[2,5,3,4,1,0,2,5],
[4,7,4,7,3,8,0,8],
[3,6,1,6,2,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,8,6,8,6,3],
[6,0,6,9,6,6,7,5],
[5,4,0,7,7,5,5,4],
[2,1,3,0,1,4,4,4],
[4,4,3,9,0,5,4,3],
[2,4,5,6,5,0,5,2],
[4,3,5,6,6,5,0,5],
[7,5,6,6,7,8,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,4,3,6,5],
[6,0,4,4,5,5,6,6],
[6,6,0,5,5,4,5,6],
[6,6,5,0,4,3,6,6],
[6,5,5,6,0,3,6,4],
[7,5,6,7,7,0,8,6],
[4,4,5,4,4,2,0,4],
[5,4,4,4,6,4,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,5,5,5,5,5],
[5,0,5,0,5,5,5,5],
[0,5,0,0,5,5,5,5],
[5,10,10,0,10,10,10,5],
[5,5,5,0,0,5,5,0],
[5,5,5,0,5,0,5,0],
[5,5,5,0,5,5,0,0],
[5,5,5,5,10,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,2,4,7,6,6],
[5,0,2,3,4,5,4,6],
[8,8,0,4,4,8,7,7],
[8,7,6,0,7,6,6,4],
[6,6,6,3,0,7,5,5],
[3,5,2,4,3,0,7,5],
[4,6,3,4,5,3,0,6],
[4,4,3,6,5,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,5,5,6,4,6],
[5,0,7,4,7,6,6,5],
[4,3,0,5,7,5,4,4],
[5,6,5,0,7,7,6,6],
[5,3,3,3,0,4,4,4],
[4,4,5,3,6,0,3,6],
[6,4,6,4,6,7,0,5],
[4,5,6,4,6,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,5,5,7,6,6],
[3,0,6,7,4,9,7,6],
[6,4,0,5,2,9,4,4],
[5,3,5,0,2,9,3,6],
[5,6,8,8,0,9,4,7],
[3,1,1,1,1,0,1,1],
[4,3,6,7,6,9,0,5],
[4,4,6,4,3,9,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,4,7,6,5,6,6],
[3,0,2,4,5,4,5,4],
[6,8,0,5,6,6,6,6],
[3,6,5,0,3,5,5,6],
[4,5,4,7,0,7,5,6],
[5,6,4,5,3,0,3,4],
[4,5,4,5,5,7,0,5],
[4,6,4,4,4,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,6,6,5,6,6],
[5,0,4,5,8,5,5,5],
[5,6,0,4,8,5,6,5],
[4,5,6,0,9,6,5,6],
[4,2,2,1,0,3,2,2],
[5,5,5,4,7,0,4,7],
[4,5,4,5,8,6,0,4],
[4,5,5,4,8,3,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,5,0,5,5,0],
[10,0,10,10,5,10,10,5],
[10,0,0,10,0,5,5,0],
[5,0,0,0,0,5,5,0],
[10,5,10,10,0,5,5,0],
[5,0,5,5,5,0,10,5],
[5,0,5,5,5,0,0,5],
[10,5,10,10,10,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,7,5,8,6,4],
[4,0,4,7,7,6,3,3],
[6,6,0,10,6,9,4,6],
[3,3,0,0,5,8,3,2],
[5,3,4,5,0,5,3,4],
[2,4,1,2,5,0,4,0],
[4,7,6,7,7,6,0,3],
[6,7,4,8,6,10,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,6,5,6,3,2],
[5,0,5,4,3,6,3,2],
[5,5,0,6,4,5,3,4],
[4,6,4,0,5,4,4,3],
[5,7,6,5,0,8,4,3],
[4,4,5,6,2,0,4,3],
[7,7,7,6,6,6,0,5],
[8,8,6,7,7,7,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,7,5,3,4,4],
[6,0,6,8,5,5,3,6],
[5,4,0,6,3,2,2,6],
[3,2,4,0,6,1,2,4],
[5,5,7,4,0,3,4,6],
[7,5,8,9,7,0,5,6],
[6,7,8,8,6,5,0,6],
[6,4,4,6,4,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,5,6,5,3,5],
[5,0,5,6,6,4,6,4],
[4,5,0,4,5,1,3,2],
[5,4,6,0,4,3,6,4],
[4,4,5,6,0,3,5,4],
[5,6,9,7,7,0,6,5],
[7,4,7,4,5,4,0,4],
[5,6,8,6,6,5,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,6,9,7,5,8,7],
[1,0,5,6,4,5,6,8],
[4,5,0,6,7,5,7,5],
[1,4,4,0,4,2,4,5],
[3,6,3,6,0,5,5,5],
[5,5,5,8,5,0,7,6],
[2,4,3,6,5,3,0,7],
[3,2,5,5,5,4,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,8,5,6,7,5],
[5,0,4,4,2,4,3,3],
[5,6,0,8,6,7,7,3],
[2,6,2,0,4,6,5,1],
[5,8,4,6,0,7,6,3],
[4,6,3,4,3,0,4,4],
[3,7,3,5,4,6,0,5],
[5,7,7,9,7,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,1,3,6,3,1,6],
[1,0,2,4,3,4,1,7],
[9,8,0,6,5,6,6,10],
[7,6,4,0,6,4,4,5],
[4,7,5,4,0,4,5,5],
[7,6,4,6,6,0,7,7],
[9,9,4,6,5,3,0,7],
[4,3,0,5,5,3,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,1,1,4,1,5,5],
[9,0,8,3,3,4,5,5],
[9,2,0,3,3,6,4,6],
[9,7,7,0,3,3,4,7],
[6,7,7,7,0,3,5,7],
[9,6,4,7,7,0,4,6],
[5,5,6,6,5,6,0,10],
[5,5,4,3,3,4,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,8,8,6,7,6],
[5,0,6,8,4,5,6,4],
[4,4,0,6,4,3,8,5],
[2,2,4,0,5,6,6,3],
[2,6,6,5,0,3,8,5],
[4,5,7,4,7,0,6,6],
[3,4,2,4,2,4,0,2],
[4,6,5,7,5,4,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,6,7,5,5,6],
[5,0,5,6,6,5,5,5],
[5,5,0,7,5,4,6,4],
[4,4,3,0,5,4,4,2],
[3,4,5,5,0,5,4,4],
[5,5,6,6,5,0,5,5],
[5,5,4,6,6,5,0,3],
[4,5,6,8,6,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,9,5,6,5,6],
[2,0,6,4,2,7,2,3],
[3,4,0,5,2,7,4,4],
[1,6,5,0,2,6,1,5],
[5,8,8,8,0,8,4,7],
[4,3,3,4,2,0,2,3],
[5,8,6,9,6,8,0,7],
[4,7,6,5,3,7,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,6,3,1,8],
[5,0,4,4,9,7,5,9],
[6,6,0,5,6,7,7,8],
[5,6,5,0,9,8,5,7],
[4,1,4,1,0,6,5,6],
[7,3,3,2,4,0,4,7],
[9,5,3,5,5,6,0,9],
[2,1,2,3,4,3,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,3,3,2,3,3,2],
[8,0,5,4,5,5,7,5],
[7,5,0,4,5,5,5,4],
[7,6,6,0,5,7,5,5],
[8,5,5,5,0,5,3,5],
[7,5,5,3,5,0,3,3],
[7,3,5,5,7,7,0,4],
[8,5,6,5,5,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,2,7,5,7],
[5,0,5,5,5,5,5,5],
[5,5,0,5,5,2,3,5],
[5,5,5,0,2,2,5,7],
[8,5,5,8,0,5,8,8],
[3,5,8,8,5,0,8,10],
[5,5,7,5,2,2,0,5],
[3,5,5,3,2,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,4,6,2,6,4],
[5,0,5,4,9,7,4,2],
[4,5,0,3,5,3,5,2],
[6,6,7,0,7,6,7,5],
[4,1,5,3,0,3,3,3],
[8,3,7,4,7,0,6,4],
[4,6,5,3,7,4,0,3],
[6,8,8,5,7,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,8,5,5,7,7],
[5,0,5,3,8,8,10,10],
[8,5,0,8,5,5,8,5],
[2,7,2,0,5,5,7,7],
[5,2,5,5,0,8,5,2],
[5,2,5,5,2,0,5,2],
[3,0,2,3,5,5,0,2],
[3,0,5,3,8,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,5,6,6,6,4,6],
[4,0,5,6,6,6,5,5],
[5,5,0,5,4,5,3,4],
[4,4,5,0,5,4,4,6],
[4,4,6,5,0,6,5,4],
[4,4,5,6,4,0,4,4],
[6,5,7,6,5,6,0,5],
[4,5,6,4,6,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,6,5,6,4,7,6],
[5,0,8,7,7,8,8,6],
[4,2,0,7,5,6,7,4],
[5,3,3,0,5,5,6,2],
[4,3,5,5,0,4,5,4],
[6,2,4,5,6,0,8,3],
[3,2,3,4,5,2,0,4],
[4,4,6,8,6,7,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,10,10,5,10,10,5],
[5,0,10,10,5,10,5,10],
[0,0,0,5,5,10,0,5],
[0,0,5,0,0,10,5,5],
[5,5,5,10,0,10,5,10],
[0,0,0,0,0,0,0,5],
[0,5,10,5,5,10,0,5],
[5,0,5,5,0,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,5,5,3,6,5],
[5,0,7,7,7,5,4,4],
[6,3,0,8,5,6,4,5],
[5,3,2,0,3,0,2,5],
[5,3,5,7,0,3,2,2],
[7,5,4,10,7,0,4,5],
[4,6,6,8,8,6,0,3],
[5,6,5,5,8,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,0,10,10,0,5,0],
[5,0,0,10,10,0,5,5],
[10,10,0,10,10,0,5,5],
[0,0,0,0,0,0,0,0],
[0,0,0,10,0,0,0,0],
[10,10,10,10,10,0,5,10],
[5,5,5,10,10,5,0,5],
[10,5,5,10,10,0,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,10,10,10,5,5],
[5,0,5,5,10,5,10,5],
[5,5,0,5,10,10,10,5],
[0,5,5,0,10,10,5,5],
[0,0,0,0,0,5,5,0],
[0,5,0,0,5,0,5,5],
[5,0,0,5,5,5,0,0],
[5,5,5,5,10,5,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,2,4,6,3,8,1,5],
[8,0,4,9,6,7,4,7],
[6,6,0,7,6,4,3,7],
[4,1,3,0,4,4,2,4],
[7,4,4,6,0,5,1,6],
[2,3,6,6,5,0,2,5],
[9,6,7,8,9,8,0,5],
[5,3,3,6,4,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,2,4,6,5,7,4],
[5,0,2,4,4,4,4,5],
[8,8,0,9,8,5,10,8],
[6,6,1,0,4,3,6,2],
[4,6,2,6,0,4,5,3],
[5,6,5,7,6,0,8,7],
[3,6,0,4,5,2,0,2],
[6,5,2,8,7,3,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,2,7,6,7,4,1],
[4,0,5,5,3,4,2,4],
[8,5,0,7,5,9,6,3],
[3,5,3,0,2,4,0,3],
[4,7,5,8,0,7,7,5],
[3,6,1,6,3,0,3,1],
[6,8,4,10,3,7,0,4],
[9,6,7,7,5,9,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,4,6,8,2,7],
[5,0,7,5,6,8,3,8],
[3,3,0,4,7,4,4,4],
[6,5,6,0,7,6,5,7],
[4,4,3,3,0,5,1,4],
[2,2,6,4,5,0,1,2],
[8,7,6,5,9,9,0,9],
[3,2,6,3,6,8,1,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,8,2,2,6,5,2],
[5,0,5,2,2,8,2,2],
[2,5,0,2,2,5,2,2],
[8,8,8,0,5,6,7,4],
[8,8,8,5,0,8,5,2],
[4,2,5,4,2,0,4,4],
[5,8,8,3,5,6,0,7],
[8,8,8,6,8,6,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,5,0,0],
[5,0,5,5,5,10,0,5],
[5,5,0,10,5,5,5,5],
[5,5,0,0,0,5,0,0],
[5,5,5,10,0,5,5,5],
[5,0,5,5,5,0,0,0],
[10,10,5,10,5,10,0,10],
[10,5,5,10,5,10,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,6,8,6,7,5],
[4,0,6,4,6,5,7,5],
[4,4,0,5,6,4,6,5],
[4,6,5,0,6,6,7,5],
[2,4,4,4,0,6,5,4],
[4,5,6,4,4,0,6,5],
[3,3,4,3,5,4,0,5],
[5,5,5,5,6,5,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,3,4,5,5,4,3],
[7,0,5,6,9,6,8,3],
[7,5,0,8,9,7,8,5],
[6,4,2,0,8,3,4,5],
[5,1,1,2,0,2,0,1],
[5,4,3,7,8,0,5,5],
[6,2,2,6,10,5,0,3],
[7,7,5,5,9,5,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,4,5,3,4,3,2],
[7,0,5,7,6,7,5,6],
[6,5,0,5,4,6,5,6],
[5,3,5,0,4,4,4,3],
[7,4,6,6,0,7,5,4],
[6,3,4,6,3,0,5,3],
[7,5,5,6,5,5,0,3],
[8,4,4,7,6,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,4,6,4,5,7,3],
[4,0,5,5,1,5,5,2],
[6,5,0,5,3,3,7,2],
[4,5,5,0,5,4,6,4],
[6,9,7,5,0,5,8,5],
[5,5,7,6,5,0,6,5],
[3,5,3,4,2,4,0,2],
[7,8,8,6,5,5,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,8,5,4,3,4,6],
[7,0,9,4,7,6,5,6],
[2,1,0,3,5,2,3,4],
[5,6,7,0,6,3,4,5],
[6,3,5,4,0,4,5,5],
[7,4,8,7,6,0,4,6],
[6,5,7,6,5,6,0,6],
[4,4,6,5,5,4,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,6,9,7,6,6,8],
[6,0,5,7,6,6,5,7],
[4,5,0,7,6,5,4,6],
[1,3,3,0,4,4,4,5],
[3,4,4,6,0,3,3,6],
[4,4,5,6,7,0,6,7],
[4,5,6,6,7,4,0,8],
[2,3,4,5,4,3,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,5,6,6,5,6,5],
[2,0,3,4,3,2,4,3],
[5,7,0,8,5,5,6,6],
[4,6,2,0,5,3,2,4],
[4,7,5,5,0,3,6,4],
[5,8,5,7,7,0,8,6],
[4,6,4,8,4,2,0,5],
[5,7,4,6,6,4,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,7,6,3,7,6,6],
[5,0,7,5,5,5,5,7],
[3,3,0,1,4,4,3,4],
[4,5,9,0,5,6,6,7],
[7,5,6,5,0,7,4,8],
[3,5,6,4,3,0,4,5],
[4,5,7,4,6,6,0,6],
[4,3,6,3,2,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,4,3,5,7,3,5],
[5,0,7,5,3,5,4,3],
[6,3,0,2,5,7,3,4],
[7,5,8,0,6,8,6,5],
[5,7,5,4,0,8,6,2],
[3,5,3,2,2,0,3,0],
[7,6,7,4,4,7,0,4],
[5,7,6,5,8,10,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,6,5,5,6],
[5,0,6,6,6,7,6,6],
[5,4,0,8,9,8,4,5],
[5,4,2,0,6,5,3,4],
[4,4,1,4,0,4,1,4],
[5,3,2,5,6,0,4,5],
[5,4,6,7,9,6,0,8],
[4,4,5,6,6,5,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 10, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_8_10.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,190,190,164,192,171,200,190],
[151,0,163,171,164,151,173,170],
[151,178,0,176,174,178,179,185],
[177,170,165,0,155,173,179,169],
[149,177,167,186,0,175,191,182],
[170,190,163,168,166,0,172,179],
[141,168,162,162,150,169,0,157],
[151,171,156,172,159,162,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,194,189,171,187,155],
[170,0,166,193,163,158,158,160],
[170,175,0,190,175,171,152,133],
[147,148,151,0,166,143,160,137],
[152,178,166,175,0,156,175,162],
[170,183,170,198,185,0,186,171],
[154,183,189,181,166,155,0,144],
[186,181,208,204,179,170,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,178,167,222,200,222,210],
[169,0,191,212,168,232,175,167],
[163,150,0,136,145,188,197,201],
[174,129,205,0,143,188,151,189],
[119,173,196,198,0,199,186,237],
[141,109,153,153,142,0,180,156],
[119,166,144,190,155,161,0,173],
[131,174,140,152,104,185,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,158,173,164,164,171,170],
[136,0,158,163,136,152,122,167],
[183,183,0,147,155,159,157,151],
[168,178,194,0,155,185,187,191],
[177,205,186,186,0,207,159,190],
[177,189,182,156,134,0,142,193],
[170,219,184,154,182,199,0,191],
[171,174,190,150,151,148,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,163,182,164,165,145,163],
[205,0,162,178,195,182,177,184],
[178,179,0,189,173,163,160,181],
[159,163,152,0,171,142,138,163],
[177,146,168,170,0,165,161,176],
[176,159,178,199,176,0,152,180],
[196,164,181,203,180,189,0,193],
[178,157,160,178,165,161,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,179,169,182,205,176,230],
[152,0,166,179,140,194,168,210],
[162,175,0,175,155,182,156,183],
[172,162,166,0,158,192,158,189],
[159,201,186,183,0,211,167,163],
[136,147,159,149,130,0,132,168],
[165,173,185,183,174,209,0,195],
[111,131,158,152,178,173,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,174,123,207,165,170,95],
[170,0,176,161,130,156,209,132],
[167,165,0,104,118,190,154,101],
[218,180,237,0,218,140,175,158],
[134,211,223,123,0,183,220,187],
[176,185,151,201,158,0,226,133],
[171,132,187,166,121,115,0,108],
[246,209,240,183,154,208,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,176,171,167,166,161,165],
[184,0,190,163,172,170,167,180],
[165,151,0,164,178,170,162,172],
[170,178,177,0,175,155,174,163],
[174,169,163,166,0,146,148,148],
[175,171,171,186,195,0,159,189],
[180,174,179,167,193,182,0,169],
[176,161,169,178,193,152,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,183,185,178,184,187,174],
[185,0,188,175,205,169,180,182],
[158,153,0,164,173,155,159,158],
[156,166,177,0,186,184,149,175],
[163,136,168,155,0,166,181,155],
[157,172,186,157,175,0,176,181],
[154,161,182,192,160,165,0,176],
[167,159,183,166,186,160,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,161,154,163,165,167,166],
[177,0,170,164,160,178,177,168],
[180,171,0,166,179,171,170,175],
[187,177,175,0,167,179,172,160],
[178,181,162,174,0,179,162,171],
[176,163,170,162,162,0,178,163],
[174,164,171,169,179,163,0,160],
[175,173,166,181,170,178,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,154,176,176,159,166,173],
[169,0,151,175,183,165,166,170],
[187,190,0,198,189,169,171,186],
[165,166,143,0,182,146,151,177],
[165,158,152,159,0,164,141,167],
[182,176,172,195,177,0,163,181],
[175,175,170,190,200,178,0,174],
[168,171,155,164,174,160,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,157,122,154,124,167,104],
[211,0,203,144,175,180,148,190],
[184,138,0,171,118,136,110,171],
[219,197,170,0,188,155,130,162],
[187,166,223,153,0,135,200,193],
[217,161,205,186,206,0,160,176],
[174,193,231,211,141,181,0,175],
[237,151,170,179,148,165,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,160,166,154,168,162,163],
[152,0,150,141,151,163,143,154],
[181,191,0,178,189,173,167,178],
[175,200,163,0,168,176,161,173],
[187,190,152,173,0,170,180,164],
[173,178,168,165,171,0,157,171],
[179,198,174,180,161,184,0,186],
[178,187,163,168,177,170,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,194,160,186,162,168,164],
[160,0,170,165,182,161,168,161],
[147,171,0,158,176,163,173,154],
[181,176,183,0,182,158,161,175],
[155,159,165,159,0,146,153,172],
[179,180,178,183,195,0,163,167],
[173,173,168,180,188,178,0,167],
[177,180,187,166,169,174,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,159,145,157,184,154,198],
[186,0,133,183,163,206,159,212],
[182,208,0,173,170,223,176,262],
[196,158,168,0,176,192,158,217],
[184,178,171,165,0,232,158,200],
[157,135,118,149,109,0,113,145],
[187,182,165,183,183,228,0,222],
[143,129,79,124,141,196,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,193,182,200,206,166,223],
[143,0,153,157,201,181,146,222],
[148,188,0,155,203,160,167,178],
[159,184,186,0,211,172,185,208],
[141,140,138,130,0,181,136,174],
[135,160,181,169,160,0,138,191],
[175,195,174,156,205,203,0,218],
[118,119,163,133,167,150,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,160,166,175,170,181,185],
[167,0,167,174,165,165,168,177],
[181,174,0,189,166,175,180,171],
[175,167,152,0,174,169,176,159],
[166,176,175,167,0,166,167,180],
[171,176,166,172,175,0,185,170],
[160,173,161,165,174,156,0,163],
[156,164,170,182,161,171,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,167,176,187,173,168,186],
[161,0,185,178,185,166,165,173],
[174,156,0,179,165,162,168,170],
[165,163,162,0,180,175,163,147],
[154,156,176,161,0,156,153,156],
[168,175,179,166,185,0,176,160],
[173,176,173,178,188,165,0,187],
[155,168,171,194,185,181,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,177,169,180,187,182,175],
[157,0,172,176,178,170,166,168],
[164,169,0,159,167,169,170,169],
[172,165,182,0,183,176,160,182],
[161,163,174,158,0,166,169,171],
[154,171,172,165,175,0,165,164],
[159,175,171,181,172,176,0,175],
[166,173,172,159,170,177,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,170,158,158,173,166,176],
[179,0,170,173,166,164,165,171],
[171,171,0,171,161,165,162,172],
[183,168,170,0,162,174,159,184],
[183,175,180,179,0,164,180,179],
[168,177,176,167,177,0,185,179],
[175,176,179,182,161,156,0,178],
[165,170,169,157,162,162,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,178,175,173,169,190,182],
[165,0,176,177,180,171,188,165],
[163,165,0,180,165,169,188,164],
[166,164,161,0,166,169,168,164],
[168,161,176,175,0,164,176,167],
[172,170,172,172,177,0,175,168],
[151,153,153,173,165,166,0,169],
[159,176,177,177,174,173,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,177,162,199,180,180,172],
[156,0,183,174,203,180,201,189],
[164,158,0,158,163,166,170,155],
[179,167,183,0,191,190,179,173],
[142,138,178,150,0,153,141,158],
[161,161,175,151,188,0,188,183],
[161,140,171,162,200,153,0,173],
[169,152,186,168,183,158,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,163,154,145,152,159,125],
[199,0,188,192,178,188,192,169],
[178,153,0,170,148,171,161,146],
[187,149,171,0,172,174,165,146],
[196,163,193,169,0,174,174,175],
[189,153,170,167,167,0,171,179],
[182,149,180,176,167,170,0,176],
[216,172,195,195,166,162,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,166,185,181,186,149,176],
[178,0,193,153,193,198,178,192],
[175,148,0,164,180,179,143,151],
[156,188,177,0,189,194,145,178],
[160,148,161,152,0,165,167,187],
[155,143,162,147,176,0,142,164],
[192,163,198,196,174,199,0,191],
[165,149,190,163,154,177,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,170,177,179,167,181,176],
[160,0,165,149,156,155,171,171],
[171,176,0,171,170,168,179,174],
[164,192,170,0,191,173,183,181],
[162,185,171,150,0,163,168,177],
[174,186,173,168,178,0,173,168],
[160,170,162,158,173,168,0,167],
[165,170,167,160,164,173,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,137,149,154,140,233,209],
[181,0,139,185,151,174,177,206],
[204,202,0,208,211,151,239,229],
[192,156,133,0,158,163,215,200],
[187,190,130,183,0,149,188,207],
[201,167,190,178,192,0,210,237],
[108,164,102,126,153,131,0,160],
[132,135,112,141,134,104,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,179,169,163,170,171,159],
[165,0,172,159,152,173,171,162],
[162,169,0,146,156,171,170,182],
[172,182,195,0,163,185,177,173],
[178,189,185,178,0,180,174,166],
[171,168,170,156,161,0,165,162],
[170,170,171,164,167,176,0,159],
[182,179,159,168,175,179,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,168,163,154,187,201,171],
[148,0,133,165,139,130,153,126],
[173,208,0,174,172,161,232,154],
[178,176,167,0,188,148,176,159],
[187,202,169,153,0,184,194,159],
[154,211,180,193,157,0,211,100],
[140,188,109,165,147,130,0,123],
[170,215,187,182,182,241,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,153,168,167,173,177,191],
[149,0,148,197,155,146,157,176],
[188,193,0,157,144,188,170,198],
[173,144,184,0,161,170,149,184],
[174,186,197,180,0,165,172,181],
[168,195,153,171,176,0,159,185],
[164,184,171,192,169,182,0,205],
[150,165,143,157,160,156,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,179,185,183,174,172,178],
[173,0,172,183,176,159,177,177],
[162,169,0,171,156,171,166,174],
[156,158,170,0,172,168,159,158],
[158,165,185,169,0,167,175,159],
[167,182,170,173,174,0,189,183],
[169,164,175,182,166,152,0,169],
[163,164,167,183,182,158,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,161,173,188,174,179,174],
[172,0,157,162,179,172,186,168],
[180,184,0,170,178,167,188,161],
[168,179,171,0,196,174,187,154],
[153,162,163,145,0,170,179,152],
[167,169,174,167,171,0,173,174],
[162,155,153,154,162,168,0,142],
[167,173,180,187,189,167,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,172,171,167,178,179,183],
[166,0,160,175,167,168,161,164],
[169,181,0,175,173,173,185,175],
[170,166,166,0,158,166,168,173],
[174,174,168,183,0,174,189,182],
[163,173,168,175,167,0,173,186],
[162,180,156,173,152,168,0,168],
[158,177,166,168,159,155,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,180,154,188,201,163,124],
[132,0,169,123,126,107,141,100],
[161,172,0,172,206,162,201,218],
[187,218,169,0,185,226,118,142],
[153,215,135,156,0,238,119,116],
[140,234,179,115,103,0,139,156],
[178,200,140,223,222,202,0,171],
[217,241,123,199,225,185,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,169,178,161,162,156,157],
[172,0,162,162,169,156,169,156],
[172,179,0,172,167,155,166,166],
[163,179,169,0,187,160,171,174],
[180,172,174,154,0,159,181,158],
[179,185,186,181,182,0,186,165],
[185,172,175,170,160,155,0,158],
[184,185,175,167,183,176,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,165,171,174,171,165,166],
[156,0,157,169,156,155,151,170],
[176,184,0,176,168,161,159,173],
[170,172,165,0,174,149,153,166],
[167,185,173,167,0,161,158,178],
[170,186,180,192,180,0,172,176],
[176,190,182,188,183,169,0,191],
[175,171,168,175,163,165,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,170,173,166,187,159,159],
[162,0,141,152,176,173,158,150],
[171,200,0,194,182,189,189,155],
[168,189,147,0,180,157,161,161],
[175,165,159,161,0,182,154,160],
[154,168,152,184,159,0,166,147],
[182,183,152,180,187,175,0,174],
[182,191,186,180,181,194,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,170,189,177,168,173,175],
[155,0,166,161,169,166,151,161],
[171,175,0,180,176,186,148,175],
[152,180,161,0,176,154,164,171],
[164,172,165,165,0,161,161,168],
[173,175,155,187,180,0,177,164],
[168,190,193,177,180,164,0,187],
[166,180,166,170,173,177,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,177,163,184,158,157,133],
[189,0,200,163,167,163,154,171],
[164,141,0,155,145,167,152,141],
[178,178,186,0,189,185,178,168],
[157,174,196,152,0,170,154,178],
[183,178,174,156,171,0,155,183],
[184,187,189,163,187,186,0,168],
[208,170,200,173,163,158,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,234,158,165,165,204,228],
[170,0,254,125,198,195,184,320],
[107,87,0,30,90,112,99,90],
[183,216,311,0,106,127,219,216],
[176,143,251,235,0,225,199,305],
[176,146,229,214,116,0,235,238],
[137,157,242,122,142,106,0,136],
[113,21,251,125,36,103,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,170,141,157,168,157,175],
[160,0,156,150,149,151,167,167],
[171,185,0,169,157,158,162,182],
[200,191,172,0,156,187,169,182],
[184,192,184,185,0,148,167,180],
[173,190,183,154,193,0,177,187],
[184,174,179,172,174,164,0,169],
[166,174,159,159,161,154,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,142,163,175,162,164,173],
[172,0,161,181,180,175,156,156],
[199,180,0,175,195,175,170,170],
[178,160,166,0,173,175,158,169],
[166,161,146,168,0,160,159,165],
[179,166,166,166,181,0,169,179],
[177,185,171,183,182,172,0,166],
[168,185,171,172,176,162,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,163,179,162,163,189,177],
[177,0,169,170,171,166,171,173],
[178,172,0,181,168,178,169,176],
[162,171,160,0,160,169,175,179],
[179,170,173,181,0,167,171,182],
[178,175,163,172,174,0,175,181],
[152,170,172,166,170,166,0,170],
[164,168,165,162,159,160,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,162,173,160,167,163,158],
[174,0,169,189,167,157,175,161],
[179,172,0,190,175,163,168,171],
[168,152,151,0,149,155,158,147],
[181,174,166,192,0,173,175,169],
[174,184,178,186,168,0,169,176],
[178,166,173,183,166,172,0,161],
[183,180,170,194,172,165,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,174,169,171,157,168,156],
[176,0,176,186,176,187,170,163],
[167,165,0,170,168,168,149,150],
[172,155,171,0,167,167,178,147],
[170,165,173,174,0,171,182,165],
[184,154,173,174,170,0,185,163],
[173,171,192,163,159,156,0,182],
[185,178,191,194,176,178,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,166,176,170,159,158,171],
[177,0,183,173,186,173,169,177],
[175,158,0,173,182,162,151,158],
[165,168,168,0,172,163,171,153],
[171,155,159,169,0,167,165,161],
[182,168,179,178,174,0,164,178],
[183,172,190,170,176,177,0,182],
[170,164,183,188,180,163,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,191,176,154,170,178,163],
[179,0,191,176,168,181,176,165],
[150,150,0,172,155,161,158,152],
[165,165,169,0,151,156,169,151],
[187,173,186,190,0,178,169,175],
[171,160,180,185,163,0,167,155],
[163,165,183,172,172,174,0,153],
[178,176,189,190,166,186,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,186,165,187,173,186,173],
[160,0,177,158,156,173,172,149],
[155,164,0,179,170,150,183,152],
[176,183,162,0,187,184,195,162],
[154,185,171,154,0,183,186,151],
[168,168,191,157,158,0,183,151],
[155,169,158,146,155,158,0,146],
[168,192,189,179,190,190,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,154,155,151,166,159,172],
[182,0,175,187,154,188,183,185],
[187,166,0,186,178,192,180,181],
[186,154,155,0,164,176,177,178],
[190,187,163,177,0,177,189,191],
[175,153,149,165,164,0,164,162],
[182,158,161,164,152,177,0,154],
[169,156,160,163,150,179,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,208,192,161,189,169,137],
[154,0,183,216,153,142,194,96],
[133,158,0,225,156,139,185,80],
[149,125,116,0,141,104,163,122],
[180,188,185,200,0,186,174,130],
[152,199,202,237,155,0,176,172],
[172,147,156,178,167,165,0,95],
[204,245,261,219,211,169,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,150,147,162,204,152,184],
[147,0,174,135,122,199,158,158],
[191,167,0,178,181,191,194,183],
[194,206,163,0,178,178,185,172],
[179,219,160,163,0,197,199,191],
[137,142,150,163,144,0,176,149],
[189,183,147,156,142,165,0,197],
[157,183,158,169,150,192,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,190,149,187,180,157,146],
[185,0,198,155,189,176,197,172],
[151,143,0,135,154,155,160,145],
[192,186,206,0,186,177,194,166],
[154,152,187,155,0,176,178,143],
[161,165,186,164,165,0,184,185],
[184,144,181,147,163,157,0,162],
[195,169,196,175,198,156,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,182,167,180,160,153,176],
[172,0,165,155,173,153,147,167],
[159,176,0,164,185,164,148,188],
[174,186,177,0,166,177,168,158],
[161,168,156,175,0,154,149,145],
[181,188,177,164,187,0,148,163],
[188,194,193,173,192,193,0,169],
[165,174,153,183,196,178,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,174,161,154,173,169,171],
[159,0,150,157,152,172,146,142],
[167,191,0,173,173,195,168,172],
[180,184,168,0,155,191,165,169],
[187,189,168,186,0,192,165,179],
[168,169,146,150,149,0,146,156],
[172,195,173,176,176,195,0,162],
[170,199,169,172,162,185,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,159,130,180,160,164,171],
[220,0,200,170,220,197,207,212],
[182,141,0,158,207,172,175,181],
[211,171,183,0,218,163,172,185],
[161,121,134,123,0,152,167,151],
[181,144,169,178,189,0,172,171],
[177,134,166,169,174,169,0,174],
[170,129,160,156,190,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,177,175,183,184,183,185],
[175,0,176,179,179,187,168,169],
[164,165,0,174,169,182,176,179],
[166,162,167,0,174,182,176,172],
[158,162,172,167,0,163,168,164],
[157,154,159,159,178,0,169,168],
[158,173,165,165,173,172,0,173],
[156,172,162,169,177,173,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,174,165,160,168,179,184],
[164,0,163,171,179,164,180,171],
[167,178,0,158,157,164,186,169],
[176,170,183,0,146,158,185,151],
[181,162,184,195,0,168,190,176],
[173,177,177,183,173,0,166,191],
[162,161,155,156,151,175,0,146],
[157,170,172,190,165,150,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,165,182,170,173,198,184],
[156,0,162,174,153,159,180,162],
[176,179,0,190,168,166,186,186],
[159,167,151,0,159,155,165,164],
[171,188,173,182,0,166,189,170],
[168,182,175,186,175,0,187,192],
[143,161,155,176,152,154,0,156],
[157,179,155,177,171,149,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,182,156,171,166,171,171],
[175,0,186,184,181,178,188,167],
[159,155,0,145,137,145,146,156],
[185,157,196,0,181,173,188,167],
[170,160,204,160,0,174,189,174],
[175,163,196,168,167,0,188,160],
[170,153,195,153,152,153,0,156],
[170,174,185,174,167,181,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,162,205,190,147,244],
[170,0,194,153,223,170,208,187],
[170,147,0,158,227,159,158,228],
[179,188,183,0,224,123,161,184],
[136,118,114,117,0,113,158,154],
[151,171,182,218,228,0,164,190],
[194,133,183,180,183,177,0,196],
[97,154,113,157,187,151,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,177,151,168,184,176,180],
[173,0,170,143,172,191,161,192],
[164,171,0,177,158,177,168,167],
[190,198,164,0,188,191,199,196],
[173,169,183,153,0,185,187,179],
[157,150,164,150,156,0,167,164],
[165,180,173,142,154,174,0,168],
[161,149,174,145,162,177,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,139,119,151,187,132,134],
[112,0,66,133,140,134,118,65],
[202,275,0,180,223,259,168,182],
[222,208,161,0,168,201,140,178],
[190,201,118,173,0,193,201,209],
[154,207,82,140,148,0,148,115],
[209,223,173,201,140,193,0,202],
[207,276,159,163,132,226,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,179,181,161,162,164,167],
[168,0,166,185,179,161,172,170],
[162,175,0,176,174,173,170,177],
[160,156,165,0,165,164,154,156],
[180,162,167,176,0,172,173,172],
[179,180,168,177,169,0,171,162],
[177,169,171,187,168,170,0,164],
[174,171,164,185,169,179,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,167,172,177,165,163,167],
[178,0,186,181,170,180,183,173],
[174,155,0,209,171,179,185,163],
[169,160,132,0,183,166,175,164],
[164,171,170,158,0,172,177,159],
[176,161,162,175,169,0,180,175],
[178,158,156,166,164,161,0,162],
[174,168,178,177,182,166,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,170,170,197,151,150,165],
[163,0,174,179,184,165,161,169],
[171,167,0,168,156,164,165,170],
[171,162,173,0,176,178,172,171],
[144,157,185,165,0,165,172,161],
[190,176,177,163,176,0,182,182],
[191,180,176,169,169,159,0,161],
[176,172,171,170,180,159,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,151,163,173,190,173,160],
[179,0,170,190,179,148,165,141],
[190,171,0,179,170,181,166,167],
[178,151,162,0,171,160,162,190],
[168,162,171,170,0,173,161,165],
[151,193,160,181,168,0,182,166],
[168,176,175,179,180,159,0,183],
[181,200,174,151,176,175,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,166,150,179,157,172,172],
[164,0,163,152,172,163,169,171],
[175,178,0,162,169,158,166,162],
[191,189,179,0,176,172,176,166],
[162,169,172,165,0,161,166,156],
[184,178,183,169,180,0,172,169],
[169,172,175,165,175,169,0,174],
[169,170,179,175,185,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,146,151,162,170,160,182],
[169,0,174,192,170,194,166,161],
[195,167,0,174,163,193,187,195],
[190,149,167,0,173,181,163,178],
[179,171,178,168,0,177,162,185],
[171,147,148,160,164,0,147,183],
[181,175,154,178,179,194,0,184],
[159,180,146,163,156,158,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,177,172,175,158,180,185],
[159,0,154,166,173,162,153,164],
[164,187,0,160,164,153,169,163],
[169,175,181,0,181,153,177,165],
[166,168,177,160,0,163,173,174],
[183,179,188,188,178,0,191,164],
[161,188,172,164,168,150,0,157],
[156,177,178,176,167,177,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,166,162,188,167,166,165],
[164,0,168,158,184,170,171,159],
[175,173,0,174,184,162,175,183],
[179,183,167,0,185,178,184,170],
[153,157,157,156,0,158,161,166],
[174,171,179,163,183,0,176,177],
[175,170,166,157,180,165,0,181],
[176,182,158,171,175,164,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,179,171,154,183,155,150],
[182,0,159,187,166,167,192,162],
[162,182,0,206,169,194,187,180],
[170,154,135,0,141,168,161,144],
[187,175,172,200,0,183,186,168],
[158,174,147,173,158,0,182,144],
[186,149,154,180,155,159,0,165],
[191,179,161,197,173,197,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,184,168,170,170,171,177],
[174,0,199,186,161,190,189,177],
[157,142,0,175,156,172,171,180],
[173,155,166,0,162,172,180,179],
[171,180,185,179,0,177,167,191],
[171,151,169,169,164,0,166,158],
[170,152,170,161,174,175,0,185],
[164,164,161,162,150,183,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,166,165,152,162,154,162],
[209,0,188,168,185,178,170,179],
[175,153,0,145,164,176,166,170],
[176,173,196,0,169,170,167,182],
[189,156,177,172,0,183,161,159],
[179,163,165,171,158,0,176,170],
[187,171,175,174,180,165,0,164],
[179,162,171,159,182,171,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,157,173,174,176,173,170],
[174,0,172,171,183,156,180,184],
[184,169,0,180,183,170,168,177],
[168,170,161,0,198,164,164,168],
[167,158,158,143,0,177,156,157],
[165,185,171,177,164,0,179,172],
[168,161,173,177,185,162,0,167],
[171,157,164,173,184,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,158,170,183,163,176,148],
[144,0,169,155,180,159,134,135],
[183,172,0,162,168,151,154,171],
[171,186,179,0,199,156,163,191],
[158,161,173,142,0,161,144,146],
[178,182,190,185,180,0,173,157],
[165,207,187,178,197,168,0,174],
[193,206,170,150,195,184,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,176,159,181,173,178,174],
[150,0,165,152,169,160,168,169],
[165,176,0,178,170,168,172,174],
[182,189,163,0,184,179,176,176],
[160,172,171,157,0,169,167,178],
[168,181,173,162,172,0,163,167],
[163,173,169,165,174,178,0,174],
[167,172,167,165,163,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,187,149,201,171,172,199],
[155,0,161,150,186,136,119,167],
[154,180,0,131,182,145,139,174],
[192,191,210,0,185,145,156,197],
[140,155,159,156,0,133,129,168],
[170,205,196,196,208,0,161,185],
[169,222,202,185,212,180,0,210],
[142,174,167,144,173,156,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,157,153,176,141,129,158],
[173,0,169,148,184,182,176,166],
[184,172,0,196,189,164,158,173],
[188,193,145,0,172,147,148,165],
[165,157,152,169,0,146,158,171],
[200,159,177,194,195,0,175,197],
[212,165,183,193,183,166,0,192],
[183,175,168,176,170,144,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,177,168,163,165,177,170],
[165,0,172,167,169,165,175,170],
[164,169,0,167,156,178,168,180],
[173,174,174,0,169,184,170,184],
[178,172,185,172,0,173,172,167],
[176,176,163,157,168,0,174,182],
[164,166,173,171,169,167,0,172],
[171,171,161,157,174,159,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,162,171,201,177,177,195],
[163,0,167,185,175,176,171,203],
[179,174,0,195,155,242,181,202],
[170,156,146,0,181,191,207,209],
[140,166,186,160,0,174,177,172],
[164,165,99,150,167,0,164,186],
[164,170,160,134,164,177,0,192],
[146,138,139,132,169,155,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,153,161,123,173,160,166],
[168,0,153,125,125,148,140,110],
[188,188,0,199,152,164,159,192],
[180,216,142,0,174,193,143,146],
[218,216,189,167,0,182,160,159],
[168,193,177,148,159,0,154,127],
[181,201,182,198,181,187,0,163],
[175,231,149,195,182,214,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,179,161,162,175,180,181],
[155,0,166,162,155,163,164,165],
[162,175,0,154,155,174,163,167],
[180,179,187,0,177,170,185,181],
[179,186,186,164,0,180,183,161],
[166,178,167,171,161,0,182,172],
[161,177,178,156,158,159,0,168],
[160,176,174,160,180,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,162,175,186,179,179,173],
[170,0,177,161,175,195,171,173],
[179,164,0,158,163,172,167,176],
[166,180,183,0,171,178,176,178],
[155,166,178,170,0,185,172,177],
[162,146,169,163,156,0,168,164],
[162,170,174,165,169,173,0,169],
[168,168,165,163,164,177,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,162,168,170,169,161,156],
[154,0,126,143,153,156,147,152],
[179,215,0,160,181,183,167,182],
[173,198,181,0,175,163,177,176],
[171,188,160,166,0,185,141,164],
[172,185,158,178,156,0,147,178],
[180,194,174,164,200,194,0,177],
[185,189,159,165,177,163,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,204,221,189,164,152,119],
[164,0,186,150,212,108,130,134],
[137,155,0,167,172,91,125,123],
[120,191,174,0,186,201,92,116],
[152,129,169,155,0,143,146,173],
[177,233,250,140,198,0,165,158],
[189,211,216,249,195,176,0,151],
[222,207,218,225,168,183,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,176,180,193,194,171,170],
[161,0,172,186,181,183,153,154],
[165,169,0,189,194,168,173,181],
[161,155,152,0,159,162,142,156],
[148,160,147,182,0,167,151,149],
[147,158,173,179,174,0,160,165],
[170,188,168,199,190,181,0,177],
[171,187,160,185,192,176,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,152,156,158,159,153,175],
[173,0,174,156,164,169,204,174],
[189,167,0,164,173,186,180,179],
[185,185,177,0,167,177,192,176],
[183,177,168,174,0,170,181,179],
[182,172,155,164,171,0,177,171],
[188,137,161,149,160,164,0,165],
[166,167,162,165,162,170,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,158,176,177,167,173,169],
[186,0,187,173,187,185,177,161],
[183,154,0,158,173,171,169,172],
[165,168,183,0,169,171,156,149],
[164,154,168,172,0,178,168,157],
[174,156,170,170,163,0,158,163],
[168,164,172,185,173,183,0,168],
[172,180,169,192,184,178,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,165,156,159,167,151,171],
[143,0,148,147,146,162,157,125],
[176,193,0,151,165,199,165,185],
[185,194,190,0,156,206,150,173],
[182,195,176,185,0,188,166,168],
[174,179,142,135,153,0,129,174],
[190,184,176,191,175,212,0,159],
[170,216,156,168,173,167,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,177,154,144,182,158,167],
[167,0,192,168,171,187,159,162],
[164,149,0,149,162,181,160,159],
[187,173,192,0,156,196,181,168],
[197,170,179,185,0,169,169,177],
[159,154,160,145,172,0,153,178],
[183,182,181,160,172,188,0,159],
[174,179,182,173,164,163,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,138,171,140,157,138,157],
[183,0,172,166,170,190,166,168],
[203,169,0,190,186,199,177,192],
[170,175,151,0,177,163,171,158],
[201,171,155,164,0,170,165,158],
[184,151,142,178,171,0,153,151],
[203,175,164,170,176,188,0,189],
[184,173,149,183,183,190,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,193,148,182,203,162,198],
[169,0,201,163,175,202,172,173],
[148,140,0,138,163,201,150,139],
[193,178,203,0,200,213,161,199],
[159,166,178,141,0,172,174,150],
[138,139,140,128,169,0,147,135],
[179,169,191,180,167,194,0,169],
[143,168,202,142,191,206,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,190,169,148,178,161,171],
[177,0,181,170,162,171,153,170],
[151,160,0,163,167,162,152,141],
[172,171,178,0,188,178,193,167],
[193,179,174,153,0,184,188,167],
[163,170,179,163,157,0,178,179],
[180,188,189,148,153,163,0,170],
[170,171,200,174,174,162,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,188,187,192,176,198,170],
[142,0,164,148,145,161,148,167],
[153,177,0,157,163,169,166,152],
[154,193,184,0,162,152,166,157],
[149,196,178,179,0,171,160,171],
[165,180,172,189,170,0,166,158],
[143,193,175,175,181,175,0,170],
[171,174,189,184,170,183,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,179,199,195,168,164,210],
[122,0,155,204,202,182,143,171],
[162,186,0,206,176,126,186,174],
[142,137,135,0,152,115,126,142],
[146,139,165,189,0,147,174,163],
[173,159,215,226,194,0,140,154],
[177,198,155,215,167,201,0,174],
[131,170,167,199,178,187,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,161,204,196,196,193,168],
[155,0,172,148,193,193,182,160],
[180,169,0,190,165,191,193,171],
[137,193,151,0,166,181,194,168],
[145,148,176,175,0,171,163,152],
[145,148,150,160,170,0,162,185],
[148,159,148,147,178,179,0,160],
[173,181,170,173,189,156,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,152,168,159,171,156,141],
[168,0,162,182,167,169,136,149],
[189,179,0,165,146,181,180,147],
[173,159,176,0,165,193,166,156],
[182,174,195,176,0,190,158,180],
[170,172,160,148,151,0,162,145],
[185,205,161,175,183,179,0,163],
[200,192,194,185,161,196,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,175,183,170,169,171,180],
[158,0,162,192,162,156,174,178],
[166,179,0,197,180,189,171,180],
[158,149,144,0,146,137,147,156],
[171,179,161,195,0,169,153,180],
[172,185,152,204,172,0,165,198],
[170,167,170,194,188,176,0,214],
[161,163,161,185,161,143,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,179,168,168,166,170,178],
[168,0,179,181,171,174,161,164],
[162,162,0,166,162,158,163,165],
[173,160,175,0,162,165,173,163],
[173,170,179,179,0,171,171,163],
[175,167,183,176,170,0,169,160],
[171,180,178,168,170,172,0,171],
[163,177,176,178,178,181,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,161,177,159,167,163,164],
[181,0,174,164,158,168,163,167],
[180,167,0,165,166,175,166,155],
[164,177,176,0,169,171,173,174],
[182,183,175,172,0,165,166,183],
[174,173,166,170,176,0,174,175],
[178,178,175,168,175,167,0,180],
[177,174,186,167,158,166,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,175,179,169,179,179,177],
[169,0,187,177,178,173,171,183],
[166,154,0,166,166,158,160,166],
[162,164,175,0,178,169,168,185],
[172,163,175,163,0,165,172,182],
[162,168,183,172,176,0,175,189],
[162,170,181,173,169,166,0,174],
[164,158,175,156,159,152,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,147,167,144,136,147,164],
[171,0,156,176,130,123,149,141],
[194,185,0,155,135,138,153,146],
[174,165,186,0,141,133,141,166],
[197,211,206,200,0,189,160,168],
[205,218,203,208,152,0,173,168],
[194,192,188,200,181,168,0,186],
[177,200,195,175,173,173,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,186,167,168,173,174,175],
[161,0,175,157,165,163,171,186],
[155,166,0,163,156,158,166,149],
[174,184,178,0,161,170,165,174],
[173,176,185,180,0,169,184,176],
[168,178,183,171,172,0,172,164],
[167,170,175,176,157,169,0,161],
[166,155,192,167,165,177,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,192,166,173,185,164,185],
[161,0,172,159,165,154,175,175],
[149,169,0,169,164,160,168,170],
[175,182,172,0,168,172,172,168],
[168,176,177,173,0,179,176,182],
[156,187,181,169,162,0,167,177],
[177,166,173,169,165,174,0,174],
[156,166,171,173,159,164,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,181,189,162,177,140,155],
[195,0,182,197,147,168,152,154],
[160,159,0,170,147,156,146,142],
[152,144,171,0,151,178,168,151],
[179,194,194,190,0,170,174,167],
[164,173,185,163,171,0,189,157],
[201,189,195,173,167,152,0,174],
[186,187,199,190,174,184,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,187,148,141,185,147,113],
[177,0,217,181,140,201,151,148],
[154,124,0,128,139,173,146,148],
[193,160,213,0,180,195,208,177],
[200,201,202,161,0,177,167,144],
[156,140,168,146,164,0,143,138],
[194,190,195,133,174,198,0,149],
[228,193,193,164,197,203,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,169,184,166,166,148,171],
[177,0,172,173,176,168,150,187],
[172,169,0,165,166,174,166,166],
[157,168,176,0,151,162,154,169],
[175,165,175,190,0,178,161,178],
[175,173,167,179,163,0,171,181],
[193,191,175,187,180,170,0,186],
[170,154,175,172,163,160,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,171,178,186,185,174,167],
[156,0,178,147,172,188,184,175],
[170,163,0,175,162,168,174,164],
[163,194,166,0,177,189,181,163],
[155,169,179,164,0,180,172,166],
[156,153,173,152,161,0,172,160],
[167,157,167,160,169,169,0,148],
[174,166,177,178,175,181,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,172,186,201,179,185,198],
[171,0,161,172,178,165,165,182],
[169,180,0,153,195,156,179,175],
[155,169,188,0,191,191,182,175],
[140,163,146,150,0,160,179,152],
[162,176,185,150,181,0,169,202],
[156,176,162,159,162,172,0,178],
[143,159,166,166,189,139,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,161,176,143,152,184,157],
[149,0,137,159,120,140,149,156],
[180,204,0,194,155,166,186,177],
[165,182,147,0,140,148,159,161],
[198,221,186,201,0,185,200,169],
[189,201,175,193,156,0,195,181],
[157,192,155,182,141,146,0,153],
[184,185,164,180,172,160,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,150,179,197,197,177,177],
[143,0,137,157,131,179,167,177],
[191,204,0,152,187,190,185,153],
[162,184,189,0,185,198,224,185],
[144,210,154,156,0,181,191,184],
[144,162,151,143,160,0,189,156],
[164,174,156,117,150,152,0,173],
[164,164,188,156,157,185,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,148,151,170,178,163,153],
[196,0,183,154,172,203,159,175],
[193,158,0,163,166,182,164,153],
[190,187,178,0,162,185,167,166],
[171,169,175,179,0,188,165,167],
[163,138,159,156,153,0,161,159],
[178,182,177,174,176,180,0,156],
[188,166,188,175,174,182,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,171,183,175,167,164,194],
[151,0,169,197,179,176,193,190],
[170,172,0,171,168,156,178,186],
[158,144,170,0,157,152,171,165],
[166,162,173,184,0,165,174,192],
[174,165,185,189,176,0,178,199],
[177,148,163,170,167,163,0,183],
[147,151,155,176,149,142,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,168,173,154,160,169,155],
[167,0,164,161,163,172,185,161],
[173,177,0,160,151,168,180,174],
[168,180,181,0,165,181,180,173],
[187,178,190,176,0,175,178,162],
[181,169,173,160,166,0,179,168],
[172,156,161,161,163,162,0,152],
[186,180,167,168,179,173,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,166,186,178,182,167,166],
[165,0,214,189,161,174,174,140],
[175,127,0,165,149,185,152,120],
[155,152,176,0,168,187,166,173],
[163,180,192,173,0,159,146,188],
[159,167,156,154,182,0,163,157],
[174,167,189,175,195,178,0,161],
[175,201,221,168,153,184,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,180,178,171,183,163,162],
[161,0,154,170,160,171,161,161],
[161,187,0,174,184,187,176,164],
[163,171,167,0,166,189,169,178],
[170,181,157,175,0,176,164,167],
[158,170,154,152,165,0,168,163],
[178,180,165,172,177,173,0,179],
[179,180,177,163,174,178,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,169,219,184,159,255,182],
[139,0,134,181,137,132,245,134],
[172,207,0,216,169,187,269,188],
[122,160,125,0,188,155,219,171],
[157,204,172,153,0,159,249,182],
[182,209,154,186,182,0,285,160],
[86,96,72,122,92,56,0,107],
[159,207,153,170,159,181,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,180,173,185,176,161,163],
[137,0,162,166,163,163,154,152],
[161,179,0,164,173,141,155,154],
[168,175,177,0,166,170,148,154],
[156,178,168,175,0,160,162,171],
[165,178,200,171,181,0,165,177],
[180,187,186,193,179,176,0,167],
[178,189,187,187,170,164,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,158,155,164,154,178,156],
[182,0,157,158,159,154,186,166],
[183,184,0,174,182,167,189,165],
[186,183,167,0,172,172,192,174],
[177,182,159,169,0,165,190,166],
[187,187,174,169,176,0,191,172],
[163,155,152,149,151,150,0,153],
[185,175,176,167,175,169,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,171,172,172,158,186,181],
[153,0,168,147,155,168,169,155],
[170,173,0,176,148,177,191,169],
[169,194,165,0,176,192,183,188],
[169,186,193,165,0,174,169,173],
[183,173,164,149,167,0,189,168],
[155,172,150,158,172,152,0,157],
[160,186,172,153,168,173,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,172,172,157,184,180,166],
[176,0,168,160,165,173,177,174],
[169,173,0,180,165,190,178,166],
[169,181,161,0,179,166,178,193],
[184,176,176,162,0,192,167,181],
[157,168,151,175,149,0,173,170],
[161,164,163,163,174,168,0,169],
[175,167,175,148,160,171,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,178,190,155,175,173,142],
[159,0,163,166,143,156,157,158],
[163,178,0,156,159,167,148,145],
[151,175,185,0,160,159,181,168],
[186,198,182,181,0,164,192,197],
[166,185,174,182,177,0,154,161],
[168,184,193,160,149,187,0,172],
[199,183,196,173,144,180,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,162,168,161,176,164,163],
[176,0,189,164,175,186,176,173],
[179,152,0,158,158,165,153,165],
[173,177,183,0,164,178,171,185],
[180,166,183,177,0,172,176,179],
[165,155,176,163,169,0,158,183],
[177,165,188,170,165,183,0,178],
[178,168,176,156,162,158,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,199,174,206,174,220,176],
[174,0,201,155,204,147,167,171],
[142,140,0,146,191,114,157,134],
[167,186,195,0,233,163,191,170],
[135,137,150,108,0,103,173,144],
[167,194,227,178,238,0,206,175],
[121,174,184,150,168,135,0,127],
[165,170,207,171,197,166,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,179,154,170,167,167,178],
[172,0,183,166,171,181,167,176],
[162,158,0,172,156,168,166,156],
[187,175,169,0,175,177,182,163],
[171,170,185,166,0,170,177,161],
[174,160,173,164,171,0,160,167],
[174,174,175,159,164,181,0,172],
[163,165,185,178,180,174,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,152,159,166,182,158,165],
[169,0,171,174,158,188,156,178],
[189,170,0,181,174,199,167,178],
[182,167,160,0,145,176,152,167],
[175,183,167,196,0,183,175,179],
[159,153,142,165,158,0,140,147],
[183,185,174,189,166,201,0,166],
[176,163,163,174,162,194,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,163,230,155,183,143,130],
[161,0,180,198,177,183,168,132],
[178,161,0,200,145,186,153,121],
[111,143,141,0,105,135,148,96],
[186,164,196,236,0,202,199,175],
[158,158,155,206,139,0,178,102],
[198,173,188,193,142,163,0,109],
[211,209,220,245,166,239,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,166,247,195,244,236,165],
[158,0,172,265,98,107,199,227],
[175,169,0,176,155,189,156,142],
[94,76,165,0,52,38,170,134],
[146,243,186,289,0,237,259,238],
[97,234,152,303,104,0,277,231],
[105,142,185,171,82,64,0,215],
[176,114,199,207,103,110,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,161,184,176,181,190,200],
[170,0,185,194,197,168,195,182],
[180,156,0,190,149,174,167,167],
[157,147,151,0,161,168,167,189],
[165,144,192,180,0,173,187,195],
[160,173,167,173,168,0,188,181],
[151,146,174,174,154,153,0,174],
[141,159,174,152,146,160,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,150,183,206,190,157,200],
[147,0,143,160,133,166,134,182],
[191,198,0,187,187,178,147,193],
[158,181,154,0,184,172,142,213],
[135,208,154,157,0,168,176,193],
[151,175,163,169,173,0,180,194],
[184,207,194,199,165,161,0,239],
[141,159,148,128,148,147,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,182,191,197,167,161,177],
[153,0,184,176,174,173,180,157],
[159,157,0,162,174,165,151,151],
[150,165,179,0,155,165,148,159],
[144,167,167,186,0,160,169,163],
[174,168,176,176,181,0,150,177],
[180,161,190,193,172,191,0,176],
[164,184,190,182,178,164,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,117,128,146,143,135,164],
[207,0,153,165,172,177,176,197],
[224,188,0,174,162,208,190,188],
[213,176,167,0,132,171,157,194],
[195,169,179,209,0,172,205,188],
[198,164,133,170,169,0,174,153],
[206,165,151,184,136,167,0,163],
[177,144,153,147,153,188,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,173,166,158,158,170],
[174,0,161,176,168,166,179,169],
[174,180,0,174,170,172,174,183],
[168,165,167,0,160,155,157,171],
[175,173,171,181,0,170,187,179],
[183,175,169,186,171,0,182,174],
[183,162,167,184,154,159,0,172],
[171,172,158,170,162,167,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,193,180,173,175,169,168],
[165,0,172,166,166,178,178,178],
[148,169,0,161,173,178,163,166],
[161,175,180,0,161,176,173,170],
[168,175,168,180,0,176,170,159],
[166,163,163,165,165,0,160,170],
[172,163,178,168,171,181,0,165],
[173,163,175,171,182,171,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,175,174,157,180,164,171],
[158,0,163,162,160,173,149,170],
[166,178,0,174,159,179,165,164],
[167,179,167,0,156,186,167,182],
[184,181,182,185,0,189,174,170],
[161,168,162,155,152,0,156,154],
[177,192,176,174,167,185,0,181],
[170,171,177,159,171,187,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,175,181,184,164,179,200],
[167,0,170,199,184,161,182,186],
[166,171,0,178,162,170,166,165],
[160,142,163,0,153,155,151,160],
[157,157,179,188,0,172,161,170],
[177,180,171,186,169,0,169,182],
[162,159,175,190,180,172,0,164],
[141,155,176,181,171,159,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,155,175,158,161,176,167],
[175,0,178,148,177,168,165,147],
[186,163,0,147,187,158,172,157],
[166,193,194,0,149,203,206,167],
[183,164,154,192,0,172,151,171],
[180,173,183,138,169,0,171,169],
[165,176,169,135,190,170,0,127],
[174,194,184,174,170,172,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,198,177,173,180,192,168],
[191,0,176,174,160,203,176,188],
[143,165,0,173,168,177,149,178],
[164,167,168,0,165,174,169,184],
[168,181,173,176,0,199,189,186],
[161,138,164,167,142,0,166,159],
[149,165,192,172,152,175,0,173],
[173,153,163,157,155,182,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,167,190,183,177,170,183],
[158,0,162,173,149,172,155,170],
[174,179,0,177,162,179,157,192],
[151,168,164,0,161,166,152,189],
[158,192,179,180,0,190,179,192],
[164,169,162,175,151,0,150,178],
[171,186,184,189,162,191,0,200],
[158,171,149,152,149,163,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,206,156,185,181,180,175],
[151,0,194,145,156,163,194,166],
[135,147,0,130,157,133,165,149],
[185,196,211,0,161,186,162,192],
[156,185,184,180,0,200,182,200],
[160,178,208,155,141,0,192,173],
[161,147,176,179,159,149,0,146],
[166,175,192,149,141,168,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,171,169,154,173,184,196],
[178,0,167,165,167,164,165,175],
[170,174,0,166,166,178,172,185],
[172,176,175,0,175,165,170,171],
[187,174,175,166,0,172,169,172],
[168,177,163,176,169,0,166,175],
[157,176,169,171,172,175,0,182],
[145,166,156,170,169,166,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,200,239,175,186,203,179],
[181,0,188,214,150,161,170,159],
[141,153,0,194,110,147,160,152],
[102,127,147,0,113,184,140,150],
[166,191,231,228,0,203,238,196],
[155,180,194,157,138,0,168,126],
[138,171,181,201,103,173,0,170],
[162,182,189,191,145,215,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,182,173,182,183,167,168],
[195,0,175,168,190,194,181,187],
[159,166,0,171,176,162,164,177],
[168,173,170,0,170,172,173,172],
[159,151,165,171,0,164,161,167],
[158,147,179,169,177,0,165,171],
[174,160,177,168,180,176,0,177],
[173,154,164,169,174,170,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,174,141,147,180,163,180],
[155,0,154,174,157,199,149,215],
[167,187,0,192,192,181,179,221],
[200,167,149,0,166,180,172,195],
[194,184,149,175,0,180,155,165],
[161,142,160,161,161,0,132,163],
[178,192,162,169,186,209,0,217],
[161,126,120,146,176,178,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,159,154,153,154,140,142],
[182,0,173,168,160,162,153,156],
[182,168,0,168,157,168,153,157],
[187,173,173,0,172,166,162,174],
[188,181,184,169,0,172,174,160],
[187,179,173,175,169,0,166,161],
[201,188,188,179,167,175,0,172],
[199,185,184,167,181,180,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,172,171,172,173,165,161],
[177,0,165,172,159,168,161,170],
[169,176,0,166,159,167,147,159],
[170,169,175,0,178,164,170,173],
[169,182,182,163,0,180,166,175],
[168,173,174,177,161,0,160,170],
[176,180,194,171,175,181,0,162],
[180,171,182,168,166,171,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,182,223,170,145,162,163],
[139,0,112,168,134,117,126,154],
[159,229,0,195,201,177,178,221],
[118,173,146,0,113,135,155,179],
[171,207,140,228,0,146,186,174],
[196,224,164,206,195,0,193,204],
[179,215,163,186,155,148,0,161],
[178,187,120,162,167,137,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,159,150,143,179,187,163],
[172,0,155,155,152,175,150,143],
[182,186,0,169,154,181,201,176],
[191,186,172,0,187,190,209,165],
[198,189,187,154,0,199,185,176],
[162,166,160,151,142,0,172,160],
[154,191,140,132,156,169,0,162],
[178,198,165,176,165,181,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,151,155,126,161,172,139],
[206,0,163,163,157,182,191,150],
[190,178,0,152,141,187,164,192],
[186,178,189,0,173,192,171,155],
[215,184,200,168,0,196,202,188],
[180,159,154,149,145,0,141,141],
[169,150,177,170,139,200,0,158],
[202,191,149,186,153,200,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,187,203,180,161,175,190],
[162,0,168,180,178,173,170,173],
[154,173,0,172,180,171,143,171],
[138,161,169,0,175,146,143,151],
[161,163,161,166,0,164,174,177],
[180,168,170,195,177,0,173,176],
[166,171,198,198,167,168,0,176],
[151,168,170,190,164,165,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,341,283,341,108,265,323],
[58,0,323,323,323,166,108,323],
[0,18,0,265,166,108,0,58],
[58,18,76,0,184,166,0,58],
[0,18,175,157,0,108,0,157],
[233,175,233,175,233,0,157,215],
[76,233,341,341,341,184,0,215],
[18,18,283,283,184,126,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,183,165,216,194,162,195],
[128,0,169,154,166,163,134,155],
[158,172,0,160,200,192,172,173],
[176,187,181,0,185,199,168,168],
[125,175,141,156,0,168,122,166],
[147,178,149,142,173,0,138,168],
[179,207,169,173,219,203,0,195],
[146,186,168,173,175,173,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,153,138,173,186,129,121],
[191,0,190,115,202,152,129,150],
[188,151,0,143,158,158,137,138],
[203,226,198,0,251,192,181,151],
[168,139,183,90,0,191,116,137],
[155,189,183,149,150,0,175,147],
[212,212,204,160,225,166,0,193],
[220,191,203,190,204,194,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,174,182,175,164,175,184],
[186,0,176,215,165,186,189,206],
[167,165,0,185,173,156,171,184],
[159,126,156,0,149,163,153,157],
[166,176,168,192,0,192,189,189],
[177,155,185,178,149,0,182,163],
[166,152,170,188,152,159,0,172],
[157,135,157,184,152,178,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,152,152,176,168,157,169],
[176,0,174,158,170,164,179,182],
[189,167,0,181,193,184,179,188],
[189,183,160,0,193,190,188,172],
[165,171,148,148,0,151,121,154],
[173,177,157,151,190,0,164,181],
[184,162,162,153,220,177,0,183],
[172,159,153,169,187,160,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,192,165,169,169,178,156],
[197,0,188,194,183,183,168,191],
[149,153,0,168,157,172,160,163],
[176,147,173,0,156,153,157,137],
[172,158,184,185,0,168,156,175],
[172,158,169,188,173,0,158,186],
[163,173,181,184,185,183,0,174],
[185,150,178,204,166,155,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,184,188,187,172,193,186],
[178,0,187,183,181,167,184,186],
[157,154,0,171,161,159,177,173],
[153,158,170,0,169,170,168,172],
[154,160,180,172,0,156,161,167],
[169,174,182,171,185,0,181,172],
[148,157,164,173,180,160,0,162],
[155,155,168,169,174,169,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,141,185,150,155,164,138],
[168,0,145,176,164,173,161,147],
[200,196,0,213,179,195,162,174],
[156,165,128,0,134,186,144,127],
[191,177,162,207,0,170,174,162],
[186,168,146,155,171,0,149,157],
[177,180,179,197,167,192,0,151],
[203,194,167,214,179,184,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,172,154,153,155,147,166],
[193,0,191,162,168,148,161,157],
[169,150,0,146,159,156,127,179],
[187,179,195,0,169,178,205,152],
[188,173,182,172,0,170,172,188],
[186,193,185,163,171,0,174,168],
[194,180,214,136,169,167,0,173],
[175,184,162,189,153,173,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,153,166,145,163,174,182],
[164,0,159,186,174,166,168,202],
[188,182,0,198,156,162,194,219],
[175,155,143,0,124,160,148,200],
[196,167,185,217,0,183,200,212],
[178,175,179,181,158,0,160,199],
[167,173,147,193,141,181,0,200],
[159,139,122,141,129,142,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,228,165,197,165,130,211],
[173,0,219,166,159,191,96,266],
[113,122,0,97,86,103,47,174],
[176,175,244,0,185,160,112,219],
[144,182,255,156,0,171,172,230],
[176,150,238,181,170,0,126,191],
[211,245,294,229,169,215,0,269],
[130,75,167,122,111,150,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,175,169,178,180,178,176],
[168,0,157,154,161,155,159,179],
[166,184,0,165,183,173,186,179],
[172,187,176,0,143,162,166,159],
[163,180,158,198,0,162,172,161],
[161,186,168,179,179,0,166,174],
[163,182,155,175,169,175,0,159],
[165,162,162,182,180,167,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,168,177,176,181,186,166],
[170,0,159,177,160,161,177,166],
[173,182,0,190,167,161,187,180],
[164,164,151,0,163,163,163,152],
[165,181,174,178,0,170,170,179],
[160,180,180,178,171,0,180,161],
[155,164,154,178,171,161,0,157],
[175,175,161,189,162,180,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,174,174,177,195,170,186],
[160,0,150,158,182,167,167,187],
[167,191,0,170,182,186,164,184],
[167,183,171,0,180,181,167,180],
[164,159,159,161,0,174,164,181],
[146,174,155,160,167,0,172,179],
[171,174,177,174,177,169,0,204],
[155,154,157,161,160,162,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,198,220,196,207,194,170],
[119,0,144,175,161,143,178,162],
[143,197,0,183,152,167,168,154],
[121,166,158,0,139,146,153,171],
[145,180,189,202,0,186,163,159],
[134,198,174,195,155,0,185,175],
[147,163,173,188,178,156,0,166],
[171,179,187,170,182,166,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,183,198,181,189,158,177],
[169,0,168,180,160,181,172,163],
[158,173,0,166,153,166,169,162],
[143,161,175,0,158,167,162,171],
[160,181,188,183,0,184,180,184],
[152,160,175,174,157,0,165,174],
[183,169,172,179,161,176,0,163],
[164,178,179,170,157,167,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,181,181,173,181,179,163],
[165,0,190,189,169,167,178,180],
[160,151,0,162,151,162,175,153],
[160,152,179,0,165,172,169,154],
[168,172,190,176,0,176,186,180],
[160,174,179,169,165,0,168,170],
[162,163,166,172,155,173,0,151],
[178,161,188,187,161,171,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,168,156,163,150,166,160],
[167,0,161,160,163,165,182,159],
[173,180,0,167,183,173,183,172],
[185,181,174,0,175,160,172,181],
[178,178,158,166,0,160,175,168],
[191,176,168,181,181,0,168,170],
[175,159,158,169,166,173,0,159],
[181,182,169,160,173,171,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,181,167,179,175,184,183],
[180,0,162,179,175,186,188,176],
[160,179,0,165,186,159,161,180],
[174,162,176,0,181,182,181,168],
[162,166,155,160,0,175,147,165],
[166,155,182,159,166,0,160,169],
[157,153,180,160,194,181,0,183],
[158,165,161,173,176,172,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,178,239,170,197,190,177],
[179,0,156,186,155,166,176,163],
[163,185,0,187,163,192,200,183],
[102,155,154,0,173,171,179,161],
[171,186,178,168,0,188,198,173],
[144,175,149,170,153,0,182,164],
[151,165,141,162,143,159,0,134],
[164,178,158,180,168,177,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,177,139,155,184,182,171],
[175,0,184,172,150,159,164,173],
[164,157,0,151,125,171,153,180],
[202,169,190,0,171,192,164,177],
[186,191,216,170,0,204,179,166],
[157,182,170,149,137,0,146,207],
[159,177,188,177,162,195,0,172],
[170,168,161,164,175,134,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,176,164,177,163,168,158],
[169,0,147,154,158,149,166,144],
[165,194,0,164,179,162,185,177],
[177,187,177,0,177,162,185,154],
[164,183,162,164,0,159,175,167],
[178,192,179,179,182,0,175,160],
[173,175,156,156,166,166,0,157],
[183,197,164,187,174,181,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,216,173,176,188,211,166],
[125,0,218,147,137,181,172,120],
[125,123,0,131,112,170,153,120],
[168,194,210,0,154,188,195,164],
[165,204,229,187,0,205,185,173],
[153,160,171,153,136,0,154,140],
[130,169,188,146,156,187,0,160],
[175,221,221,177,168,201,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,133,147,145,166,192,103],
[136,0,120,85,154,157,204,145],
[208,221,0,185,192,164,174,170],
[194,256,156,0,191,183,197,202],
[196,187,149,150,0,155,167,82],
[175,184,177,158,186,0,183,75],
[149,137,167,144,174,158,0,174],
[238,196,171,139,259,266,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,206,179,155,157,152,148],
[160,0,190,172,177,173,162,184],
[135,151,0,177,151,151,151,121],
[162,169,164,0,188,193,156,153],
[186,164,190,153,0,172,153,167],
[184,168,190,148,169,0,181,150],
[189,179,190,185,188,160,0,163],
[193,157,220,188,174,191,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,173,144,186,147,155,152],
[177,0,151,170,176,148,142,202],
[168,190,0,171,160,167,194,191],
[197,171,170,0,179,172,141,203],
[155,165,181,162,0,177,174,194],
[194,193,174,169,164,0,174,184],
[186,199,147,200,167,167,0,196],
[189,139,150,138,147,157,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,191,167,165,178,166,155],
[154,0,193,145,152,170,134,149],
[150,148,0,170,150,173,156,169],
[174,196,171,0,165,186,165,175],
[176,189,191,176,0,185,158,159],
[163,171,168,155,156,0,153,160],
[175,207,185,176,183,188,0,168],
[186,192,172,166,182,181,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,191,182,181,159,164,179],
[187,0,183,156,175,176,184,162],
[150,158,0,158,178,158,184,164],
[159,185,183,0,167,175,196,176],
[160,166,163,174,0,152,183,170],
[182,165,183,166,189,0,185,174],
[177,157,157,145,158,156,0,156],
[162,179,177,165,171,167,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,177,163,136,196,194,191],
[185,0,180,157,176,195,198,173],
[164,161,0,156,153,177,186,156],
[178,184,185,0,153,187,191,188],
[205,165,188,188,0,195,211,192],
[145,146,164,154,146,0,184,162],
[147,143,155,150,130,157,0,167],
[150,168,185,153,149,179,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,161,161,147,160,175,182],
[181,0,169,183,155,169,186,184],
[180,172,0,146,159,168,173,172],
[180,158,195,0,171,179,172,156],
[194,186,182,170,0,154,163,178],
[181,172,173,162,187,0,162,166],
[166,155,168,169,178,179,0,180],
[159,157,169,185,163,175,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,178,178,182,186,162,192],
[171,0,170,166,173,184,173,176],
[163,171,0,172,173,174,179,180],
[163,175,169,0,185,189,163,179],
[159,168,168,156,0,178,163,178],
[155,157,167,152,163,0,166,183],
[179,168,162,178,178,175,0,191],
[149,165,161,162,163,158,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,166,182,171,178,192,187],
[169,0,181,166,176,171,184,184],
[175,160,0,153,159,160,163,162],
[159,175,188,0,172,176,170,187],
[170,165,182,169,0,162,181,186],
[163,170,181,165,179,0,173,192],
[149,157,178,171,160,168,0,178],
[154,157,179,154,155,149,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,204,191,228,297,168,197],
[73,0,85,70,56,203,123,149],
[137,256,0,133,134,252,158,205],
[150,271,208,0,186,275,175,193],
[113,285,207,155,0,283,186,202],
[44,138,89,66,58,0,125,118],
[173,218,183,166,155,216,0,167],
[144,192,136,148,139,223,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,159,122,175,158,154,167],
[193,0,189,150,159,135,175,175],
[182,152,0,154,191,170,181,206],
[219,191,187,0,217,176,154,199],
[166,182,150,124,0,143,138,129],
[183,206,171,165,198,0,155,198],
[187,166,160,187,203,186,0,179],
[174,166,135,142,212,143,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,131,137,124,154,144,121],
[167,0,132,153,157,138,113,163],
[210,209,0,184,187,162,164,183],
[204,188,157,0,194,150,188,174],
[217,184,154,147,0,169,140,136],
[187,203,179,191,172,0,159,201],
[197,228,177,153,201,182,0,165],
[220,178,158,167,205,140,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,199,161,200,196,178,205],
[169,0,172,168,164,159,207,206],
[142,169,0,188,176,186,181,180],
[180,173,153,0,168,180,176,167],
[141,177,165,173,0,179,152,177],
[145,182,155,161,162,0,165,175],
[163,134,160,165,189,176,0,202],
[136,135,161,174,164,166,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,172,164,173,168,170,151],
[161,0,175,181,164,158,154,163],
[169,166,0,173,165,175,174,170],
[177,160,168,0,167,164,168,165],
[168,177,176,174,0,163,161,148],
[173,183,166,177,178,0,176,177],
[171,187,167,173,180,165,0,163],
[190,178,171,176,193,164,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,185,186,202,156,174,191],
[155,0,193,171,176,167,167,175],
[156,148,0,138,171,180,170,177],
[155,170,203,0,183,168,162,177],
[139,165,170,158,0,144,138,153],
[185,174,161,173,197,0,174,172],
[167,174,171,179,203,167,0,175],
[150,166,164,164,188,169,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,215,200,183,176,190,197],
[174,0,190,165,181,172,184,202],
[126,151,0,171,169,149,170,164],
[141,176,170,0,176,153,161,149],
[158,160,172,165,0,166,182,175],
[165,169,192,188,175,0,206,174],
[151,157,171,180,159,135,0,178],
[144,139,177,192,166,167,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,165,173,170,172,180,159],
[177,0,174,167,149,163,168,155],
[176,167,0,186,170,184,174,166],
[168,174,155,0,160,157,174,161],
[171,192,171,181,0,177,187,161],
[169,178,157,184,164,0,182,164],
[161,173,167,167,154,159,0,171],
[182,186,175,180,180,177,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,171,172,166,177,135],
[169,0,138,134,146,158,170,143],
[170,203,0,150,181,169,132,167],
[170,207,191,0,195,171,188,157],
[169,195,160,146,0,167,173,164],
[175,183,172,170,174,0,177,149],
[164,171,209,153,168,164,0,193],
[206,198,174,184,177,192,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,200,192,164,177,175,192],
[164,0,156,183,161,124,116,185],
[141,185,0,174,171,161,163,195],
[149,158,167,0,160,133,141,175],
[177,180,170,181,0,165,168,175],
[164,217,180,208,176,0,159,229],
[166,225,178,200,173,182,0,229],
[149,156,146,166,166,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,163,175,237,243,212,162],
[118,0,159,148,176,181,178,118],
[178,182,0,172,194,174,153,147],
[166,193,169,0,223,192,196,196],
[104,165,147,118,0,164,158,111],
[98,160,167,149,177,0,174,137],
[129,163,188,145,183,167,0,182],
[179,223,194,145,230,204,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,168,168,177,194,180,161],
[166,0,173,162,152,211,166,155],
[173,168,0,151,154,206,161,152],
[173,179,190,0,153,215,163,155],
[164,189,187,188,0,199,185,180],
[147,130,135,126,142,0,154,143],
[161,175,180,178,156,187,0,163],
[180,186,189,186,161,198,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,170,167,181,180,183,176],
[153,0,175,171,176,177,165,164],
[171,166,0,165,179,182,171,158],
[174,170,176,0,184,175,169,181],
[160,165,162,157,0,174,179,165],
[161,164,159,166,167,0,166,163],
[158,176,170,172,162,175,0,170],
[165,177,183,160,176,178,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,154,139,157,128,150,150],
[190,0,153,150,161,159,153,147],
[187,188,0,159,166,173,161,165],
[202,191,182,0,168,182,148,142],
[184,180,175,173,0,179,159,175],
[213,182,168,159,162,0,173,166],
[191,188,180,193,182,168,0,193],
[191,194,176,199,166,175,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,169,149,179,185,165,156],
[189,0,158,183,157,188,154,182],
[172,183,0,159,140,180,185,132],
[192,158,182,0,196,192,195,117],
[162,184,201,145,0,174,192,138],
[156,153,161,149,167,0,170,142],
[176,187,156,146,149,171,0,149],
[185,159,209,224,203,199,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,141,136,153,131,152,159],
[198,0,178,159,179,184,176,190],
[200,163,0,141,157,156,159,188],
[205,182,200,0,203,194,187,169],
[188,162,184,138,0,198,155,200],
[210,157,185,147,143,0,169,170],
[189,165,182,154,186,172,0,193],
[182,151,153,172,141,171,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,150,161,173,157,175,155],
[169,0,174,175,191,164,169,171],
[191,167,0,185,180,164,177,158],
[180,166,156,0,168,147,167,171],
[168,150,161,173,0,139,155,180],
[184,177,177,194,202,0,182,169],
[166,172,164,174,186,159,0,167],
[186,170,183,170,161,172,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,137,154,160,164,165,156],
[191,0,161,164,158,169,169,172],
[204,180,0,179,178,170,179,158],
[187,177,162,0,185,181,192,176],
[181,183,163,156,0,165,169,172],
[177,172,171,160,176,0,187,187],
[176,172,162,149,172,154,0,154],
[185,169,183,165,169,154,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,162,204,178,185,180],
[169,0,188,182,165,165,189,196],
[170,153,0,164,180,152,166,166],
[179,159,177,0,169,167,145,163],
[137,176,161,172,0,160,184,179],
[163,176,189,174,181,0,204,191],
[156,152,175,196,157,137,0,196],
[161,145,175,178,162,150,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,185,196,193,164,194,174],
[161,0,164,173,167,160,176,164],
[156,177,0,173,172,151,170,141],
[145,168,168,0,151,137,175,161],
[148,174,169,190,0,163,181,167],
[177,181,190,204,178,0,192,161],
[147,165,171,166,160,149,0,157],
[167,177,200,180,174,180,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,166,178,188,183,198,178],
[153,0,150,154,183,162,186,163],
[175,191,0,165,198,174,180,161],
[163,187,176,0,188,173,180,168],
[153,158,143,153,0,164,158,151],
[158,179,167,168,177,0,172,178],
[143,155,161,161,183,169,0,150],
[163,178,180,173,190,163,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,146,119,112,119,191,189],
[264,0,195,222,162,193,239,208],
[195,146,0,190,264,260,215,148],
[222,119,151,0,169,199,293,167],
[229,179,77,172,0,210,215,215],
[222,148,81,142,131,0,237,131],
[150,102,126,48,126,104,0,152],
[152,133,193,174,126,210,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,172,171,186,187,181,181],
[176,0,185,175,169,173,194,168],
[169,156,0,164,158,156,170,156],
[170,166,177,0,185,174,187,181],
[155,172,183,156,0,176,174,156],
[154,168,185,167,165,0,172,178],
[160,147,171,154,167,169,0,156],
[160,173,185,160,185,163,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,152,163,173,156,175,167],
[177,0,168,171,185,166,187,188],
[189,173,0,161,180,174,191,172],
[178,170,180,0,173,160,171,174],
[168,156,161,168,0,167,175,170],
[185,175,167,181,174,0,188,176],
[166,154,150,170,166,153,0,161],
[174,153,169,167,171,165,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,146,153,154,155,165,159],
[189,0,180,169,171,167,162,167],
[195,161,0,180,166,189,171,162],
[188,172,161,0,176,174,184,156],
[187,170,175,165,0,171,169,161],
[186,174,152,167,170,0,168,183],
[176,179,170,157,172,173,0,169],
[182,174,179,185,180,158,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,111,155,235,187,208,172],
[155,0,145,129,178,197,180,175],
[230,196,0,169,227,188,193,192],
[186,212,172,0,201,226,157,179],
[106,163,114,140,0,185,134,155],
[154,144,153,115,156,0,127,186],
[133,161,148,184,207,214,0,207],
[169,166,149,162,186,155,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,169,160,175,157,179,174],
[158,0,171,156,142,157,171,170],
[172,170,0,160,168,166,189,171],
[181,185,181,0,167,167,182,180],
[166,199,173,174,0,179,190,171],
[184,184,175,174,162,0,172,164],
[162,170,152,159,151,169,0,158],
[167,171,170,161,170,177,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,170,170,136,151,153,190],
[136,0,159,186,134,183,146,213],
[171,182,0,197,172,174,136,207],
[171,155,144,0,161,136,145,191],
[205,207,169,180,0,184,173,216],
[190,158,167,205,157,0,140,205],
[188,195,205,196,168,201,0,235],
[151,128,134,150,125,136,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,180,173,156,161,169,187],
[175,0,156,175,151,165,174,175],
[161,185,0,178,172,185,188,186],
[168,166,163,0,154,177,189,178],
[185,190,169,187,0,180,182,192],
[180,176,156,164,161,0,154,169],
[172,167,153,152,159,187,0,174],
[154,166,155,163,149,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,219,187,153,169,84],
[239,0,163,160,214,135,273,194],
[239,178,0,160,160,160,110,160],
[122,181,181,0,266,103,188,102],
[154,127,181,75,0,93,109,109],
[188,206,181,238,248,0,188,109],
[172,68,231,153,232,153,0,152],
[257,147,181,239,232,232,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,173,170,173,174,176,169],
[173,0,163,164,170,166,148,165],
[168,178,0,183,164,174,161,176],
[171,177,158,0,176,177,172,176],
[168,171,177,165,0,183,165,172],
[167,175,167,164,158,0,159,174],
[165,193,180,169,176,182,0,169],
[172,176,165,165,169,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,193,168,180,174,166,174],
[167,0,194,167,178,187,175,174],
[148,147,0,152,145,161,153,155],
[173,174,189,0,174,165,164,188],
[161,163,196,167,0,176,168,178],
[167,154,180,176,165,0,162,159],
[175,166,188,177,173,179,0,185],
[167,167,186,153,163,182,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,168,170,165,181,175,173],
[142,0,149,130,149,161,148,171],
[173,192,0,170,185,193,197,164],
[171,211,171,0,170,167,172,170],
[176,192,156,171,0,161,154,166],
[160,180,148,174,180,0,180,174],
[166,193,144,169,187,161,0,167],
[168,170,177,171,175,167,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,156,113,140,110,121,139],
[197,0,171,169,153,141,164,160],
[185,170,0,116,147,133,149,160],
[228,172,225,0,181,172,174,155],
[201,188,194,160,0,170,183,180],
[231,200,208,169,171,0,159,149],
[220,177,192,167,158,182,0,172],
[202,181,181,186,161,192,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,202,148,201,158,157,149],
[182,0,185,151,194,164,137,145],
[139,156,0,103,157,114,151,147],
[193,190,238,0,212,129,210,167],
[140,147,184,129,0,114,131,125],
[183,177,227,212,227,0,174,167],
[184,204,190,131,210,167,0,200],
[192,196,194,174,216,174,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,152,190,188,179,182,162],
[184,0,172,189,200,188,160,176],
[189,169,0,194,173,195,181,172],
[151,152,147,0,162,163,159,172],
[153,141,168,179,0,160,153,161],
[162,153,146,178,181,0,173,158],
[159,181,160,182,188,168,0,161],
[179,165,169,169,180,183,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,168,150,165,166,162,169],
[182,0,186,153,183,175,174,172],
[173,155,0,150,162,154,161,164],
[191,188,191,0,182,157,168,175],
[176,158,179,159,0,161,165,173],
[175,166,187,184,180,0,178,178],
[179,167,180,173,176,163,0,174],
[172,169,177,166,168,163,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,168,170,170,164,149,173],
[162,0,170,182,173,163,180,175],
[173,171,0,179,169,178,161,166],
[171,159,162,0,168,158,166,169],
[171,168,172,173,0,163,167,165],
[177,178,163,183,178,0,164,165],
[192,161,180,175,174,177,0,183],
[168,166,175,172,176,176,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,166,184,162,167,171,166],
[174,0,157,194,169,171,172,171],
[175,184,0,165,164,169,162,169],
[157,147,176,0,158,168,160,170],
[179,172,177,183,0,170,163,171],
[174,170,172,173,171,0,180,175],
[170,169,179,181,178,161,0,174],
[175,170,172,171,170,166,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,165,207,245,189,169,180],
[179,0,228,210,256,210,255,159],
[176,113,0,161,237,164,199,248],
[134,131,180,0,211,198,160,210],
[96,85,104,130,0,133,160,141],
[152,131,177,143,208,0,176,248],
[172,86,142,181,181,165,0,180],
[161,182,93,131,200,93,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,163,170,171,165,192,179],
[180,0,180,172,163,154,204,178],
[178,161,0,159,153,156,173,142],
[171,169,182,0,177,176,193,173],
[170,178,188,164,0,154,183,174],
[176,187,185,165,187,0,204,180],
[149,137,168,148,158,137,0,156],
[162,163,199,168,167,161,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,187,183,187,166,187,188],
[149,0,164,157,168,164,163,168],
[154,177,0,157,164,155,168,168],
[158,184,184,0,172,174,187,167],
[154,173,177,169,0,166,174,170],
[175,177,186,167,175,0,178,179],
[154,178,173,154,167,163,0,169],
[153,173,173,174,171,162,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,198,156,195,190,189,203],
[146,0,205,180,200,183,215,201],
[143,136,0,166,176,163,186,187],
[185,161,175,0,184,167,199,187],
[146,141,165,157,0,176,180,178],
[151,158,178,174,165,0,176,159],
[152,126,155,142,161,165,0,165],
[138,140,154,154,163,182,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,174,186,164,192,163,188],
[168,0,183,191,177,202,176,191],
[167,158,0,179,157,188,161,170],
[155,150,162,0,156,167,149,163],
[177,164,184,185,0,205,165,183],
[149,139,153,174,136,0,144,154],
[178,165,180,192,176,197,0,187],
[153,150,171,178,158,187,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,175,180,185,189,189,192],
[183,0,175,169,179,190,175,170],
[166,166,0,152,172,176,182,168],
[161,172,189,0,171,189,183,171],
[156,162,169,170,0,176,175,179],
[152,151,165,152,165,0,159,169],
[152,166,159,158,166,182,0,167],
[149,171,173,170,162,172,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,158,184,181,157,140,143],
[189,0,159,161,162,133,139,149],
[183,182,0,193,157,180,165,155],
[157,180,148,0,155,132,137,142],
[160,179,184,186,0,161,153,168],
[184,208,161,209,180,0,187,188],
[201,202,176,204,188,154,0,168],
[198,192,186,199,173,153,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,175,170,171,165,166,188],
[158,0,160,159,174,155,171,163],
[166,181,0,183,168,173,179,173],
[171,182,158,0,167,163,166,177],
[170,167,173,174,0,162,164,170],
[176,186,168,178,179,0,171,178],
[175,170,162,175,177,170,0,177],
[153,178,168,164,171,163,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,150,164,179,156,157,153],
[181,0,164,180,194,177,165,179],
[191,177,0,181,179,182,184,165],
[177,161,160,0,165,155,163,165],
[162,147,162,176,0,156,154,152],
[185,164,159,186,185,0,167,171],
[184,176,157,178,187,174,0,174],
[188,162,176,176,189,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,165,191,187,174,197,217],
[112,0,138,129,136,174,167,157],
[176,203,0,168,169,189,186,198],
[150,212,173,0,162,200,193,210],
[154,205,172,179,0,165,192,186],
[167,167,152,141,176,0,186,167],
[144,174,155,148,149,155,0,190],
[124,184,143,131,155,174,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,171,169,178,171,183,165],
[160,0,159,159,176,162,159,155],
[170,182,0,159,188,169,171,166],
[172,182,182,0,199,171,163,184],
[163,165,153,142,0,152,158,160],
[170,179,172,170,189,0,185,168],
[158,182,170,178,183,156,0,158],
[176,186,175,157,181,173,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,163,177,188,198,189,193],
[163,0,211,202,193,210,218,233],
[178,130,0,151,179,198,205,215],
[164,139,190,0,170,173,192,213],
[153,148,162,171,0,197,209,204],
[143,131,143,168,144,0,179,178],
[152,123,136,149,132,162,0,182],
[148,108,126,128,137,163,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,108,169,162,156,193,160],
[208,0,166,187,173,182,185,180],
[233,175,0,174,189,174,217,170],
[172,154,167,0,175,163,206,179],
[179,168,152,166,0,155,176,174],
[185,159,167,178,186,0,189,181],
[148,156,124,135,165,152,0,153],
[181,161,171,162,167,160,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,183,160,172,183,176,179],
[172,0,178,158,170,167,167,177],
[158,163,0,159,158,172,161,164],
[181,183,182,0,179,179,175,165],
[169,171,183,162,0,187,174,176],
[158,174,169,162,154,0,156,162],
[165,174,180,166,167,185,0,170],
[162,164,177,176,165,179,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,142,188,139,206,153,180],
[199,0,180,184,170,203,208,216],
[199,161,0,182,173,194,186,190],
[153,157,159,0,179,180,173,195],
[202,171,168,162,0,186,176,211],
[135,138,147,161,155,0,170,161],
[188,133,155,168,165,171,0,185],
[161,125,151,146,130,180,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,176,169,178,188,164,186],
[153,0,172,171,170,172,155,169],
[165,169,0,167,185,166,157,172],
[172,170,174,0,180,172,170,164],
[163,171,156,161,0,161,171,173],
[153,169,175,169,180,0,156,168],
[177,186,184,171,170,185,0,172],
[155,172,169,177,168,173,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,162,170,154,169,175,169],
[176,0,167,166,175,168,182,182],
[179,174,0,168,169,166,179,178],
[171,175,173,0,167,169,170,168],
[187,166,172,174,0,157,174,177],
[172,173,175,172,184,0,181,170],
[166,159,162,171,167,160,0,175],
[172,159,163,173,164,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,137,166,170,177,137,178],
[139,0,176,171,147,143,141,160],
[204,165,0,210,152,179,193,200],
[175,170,131,0,169,176,138,162],
[171,194,189,172,0,189,167,184],
[164,198,162,165,152,0,147,177],
[204,200,148,203,174,194,0,192],
[163,181,141,179,157,164,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,184,186,165,181,169,179],
[157,0,146,160,165,173,164,162],
[157,195,0,173,172,200,185,188],
[155,181,168,0,168,168,177,162],
[176,176,169,173,0,176,189,184],
[160,168,141,173,165,0,171,170],
[172,177,156,164,152,170,0,174],
[162,179,153,179,157,171,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,186,149,193,167,187,180],
[166,0,163,169,166,135,166,162],
[155,178,0,142,175,154,154,164],
[192,172,199,0,176,163,183,166],
[148,175,166,165,0,154,163,164],
[174,206,187,178,187,0,202,164],
[154,175,187,158,178,139,0,169],
[161,179,177,175,177,177,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,162,164,176,131,203,158],
[204,0,179,154,205,186,177,141],
[179,162,0,210,187,164,90,116],
[177,187,131,0,185,175,115,125],
[165,136,154,156,0,107,167,189],
[210,155,177,166,234,0,167,163],
[138,164,251,226,174,174,0,87],
[183,200,225,216,152,178,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,179,158,177,189,182,185],
[163,0,178,164,181,200,185,195],
[162,163,0,151,161,176,172,166],
[183,177,190,0,170,170,176,179],
[164,160,180,171,0,195,186,174],
[152,141,165,171,146,0,175,158],
[159,156,169,165,155,166,0,163],
[156,146,175,162,167,183,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,179,172,176,176,172,171],
[177,0,176,184,171,173,180,165],
[162,165,0,173,165,188,166,165],
[169,157,168,0,168,182,182,176],
[165,170,176,173,0,182,176,176],
[165,168,153,159,159,0,167,168],
[169,161,175,159,165,174,0,160],
[170,176,176,165,165,173,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,161,181,153,178,180,163],
[178,0,167,181,174,180,182,184],
[180,174,0,191,162,177,185,185],
[160,160,150,0,148,166,174,170],
[188,167,179,193,0,183,182,181],
[163,161,164,175,158,0,169,182],
[161,159,156,167,159,172,0,165],
[178,157,156,171,160,159,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,170,171,157,176,185,176],
[156,0,146,160,146,174,168,147],
[171,195,0,169,184,187,170,165],
[170,181,172,0,164,179,186,170],
[184,195,157,177,0,194,188,166],
[165,167,154,162,147,0,170,168],
[156,173,171,155,153,171,0,157],
[165,194,176,171,175,173,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,160,197,186,179,162,172],
[171,0,156,204,177,179,173,157],
[181,185,0,204,183,184,165,175],
[144,137,137,0,150,157,142,147],
[155,164,158,191,0,168,152,158],
[162,162,157,184,173,0,157,150],
[179,168,176,199,189,184,0,170],
[169,184,166,194,183,191,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,158,194,173,171,154,165],
[194,0,166,202,163,188,182,181],
[183,175,0,199,161,196,165,181],
[147,139,142,0,172,151,160,154],
[168,178,180,169,0,171,176,164],
[170,153,145,190,170,0,182,153],
[187,159,176,181,165,159,0,175],
[176,160,160,187,177,188,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,158,182,170,163,157,160],
[186,0,166,180,189,172,172,180],
[183,175,0,193,168,171,180,165],
[159,161,148,0,157,160,147,171],
[171,152,173,184,0,167,177,173],
[178,169,170,181,174,0,171,171],
[184,169,161,194,164,170,0,172],
[181,161,176,170,168,170,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,170,175,177,179,162,164],
[157,0,170,160,173,159,167,163],
[171,171,0,169,181,175,165,165],
[166,181,172,0,187,186,179,167],
[164,168,160,154,0,168,153,166],
[162,182,166,155,173,0,156,162],
[179,174,176,162,188,185,0,174],
[177,178,176,174,175,179,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,163,196,179,177,197,156],
[135,0,147,159,151,147,162,158],
[178,194,0,188,180,163,181,174],
[145,182,153,0,139,140,171,131],
[162,190,161,202,0,177,196,156],
[164,194,178,201,164,0,187,169],
[144,179,160,170,145,154,0,138],
[185,183,167,210,185,172,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,165,206,195,179,201,202],
[152,0,151,162,169,147,178,185],
[176,190,0,163,173,167,175,195],
[135,179,178,0,181,154,188,196],
[146,172,168,160,0,155,162,174],
[162,194,174,187,186,0,190,174],
[140,163,166,153,179,151,0,157],
[139,156,146,145,167,167,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,152,171,184,182,187,172],
[173,0,160,175,176,193,183,158],
[189,181,0,164,188,198,177,171],
[170,166,177,0,184,204,195,175],
[157,165,153,157,0,167,155,138],
[159,148,143,137,174,0,162,146],
[154,158,164,146,186,179,0,169],
[169,183,170,166,203,195,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,163,170,150,149,189,155],
[178,0,192,194,168,161,184,177],
[178,149,0,163,165,158,166,173],
[171,147,178,0,175,173,182,177],
[191,173,176,166,0,175,187,193],
[192,180,183,168,166,0,165,172],
[152,157,175,159,154,176,0,165],
[186,164,168,164,148,169,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,169,177,185,182,182,180],
[163,0,173,173,179,177,177,171],
[172,168,0,174,175,174,186,183],
[164,168,167,0,169,170,163,173],
[156,162,166,172,0,181,173,174],
[159,164,167,171,160,0,165,179],
[159,164,155,178,168,176,0,176],
[161,170,158,168,167,162,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,170,110,205,170,148,191],
[231,0,199,177,231,157,157,207],
[171,142,0,184,199,192,190,186],
[231,164,157,0,171,170,177,175],
[136,110,142,170,0,145,158,194],
[171,184,149,171,196,0,177,223],
[193,184,151,164,183,164,0,189],
[150,134,155,166,147,118,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,167,165,155,171,170,188],
[178,0,186,172,196,166,174,169],
[174,155,0,162,163,164,156,177],
[176,169,179,0,186,169,166,173],
[186,145,178,155,0,156,170,162],
[170,175,177,172,185,0,166,186],
[171,167,185,175,171,175,0,160],
[153,172,164,168,179,155,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,144,141,154,163,175,179],
[177,0,159,162,178,146,187,169],
[197,182,0,166,181,179,183,186],
[200,179,175,0,172,150,186,177],
[187,163,160,169,0,157,180,161],
[178,195,162,191,184,0,193,182],
[166,154,158,155,161,148,0,152],
[162,172,155,164,180,159,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,172,181,137,171,184,181],
[161,0,169,180,166,172,198,199],
[169,172,0,189,143,195,146,157],
[160,161,152,0,153,160,187,191],
[204,175,198,188,0,184,199,169],
[170,169,146,181,157,0,167,180],
[157,143,195,154,142,174,0,163],
[160,142,184,150,172,161,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,168,171,159,158,171],
[173,0,157,164,168,166,189,186],
[167,184,0,179,163,161,172,171],
[173,177,162,0,170,174,182,178],
[170,173,178,171,0,182,181,189],
[182,175,180,167,159,0,186,183],
[183,152,169,159,160,155,0,171],
[170,155,170,163,152,158,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,182,162,181,176,169,158],
[175,0,156,135,168,161,174,177],
[159,185,0,167,171,204,151,181],
[179,206,174,0,185,182,180,170],
[160,173,170,156,0,185,172,175],
[165,180,137,159,156,0,158,161],
[172,167,190,161,169,183,0,198],
[183,164,160,171,166,180,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,217,183,130,189,171,171],
[188,0,194,169,173,178,164,170],
[124,147,0,128,126,155,153,143],
[158,172,213,0,154,170,166,170],
[211,168,215,187,0,189,189,184],
[152,163,186,171,152,0,199,179],
[170,177,188,175,152,142,0,181],
[170,171,198,171,157,162,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,187,140,198,165,141,162],
[204,0,186,161,184,188,175,195],
[154,155,0,142,156,174,142,141],
[201,180,199,0,186,175,168,165],
[143,157,185,155,0,175,152,176],
[176,153,167,166,166,0,159,204],
[200,166,199,173,189,182,0,185],
[179,146,200,176,165,137,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,166,172,156,185,169,162],
[179,0,168,159,155,170,163,162],
[175,173,0,163,172,191,176,173],
[169,182,178,0,181,185,194,169],
[185,186,169,160,0,183,179,172],
[156,171,150,156,158,0,170,156],
[172,178,165,147,162,171,0,159],
[179,179,168,172,169,185,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,159,150,154,157,160,140],
[203,0,175,166,156,180,203,173],
[182,166,0,174,149,150,182,160],
[191,175,167,0,148,180,179,167],
[187,185,192,193,0,163,186,181],
[184,161,191,161,178,0,175,183],
[181,138,159,162,155,166,0,151],
[201,168,181,174,160,158,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,165,185,159,184,187,177],
[176,0,169,189,179,178,196,177],
[176,172,0,192,164,178,184,179],
[156,152,149,0,147,166,172,155],
[182,162,177,194,0,183,183,180],
[157,163,163,175,158,0,174,155],
[154,145,157,169,158,167,0,157],
[164,164,162,186,161,186,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,170,183,178,180,173,182],
[154,0,155,177,164,174,165,171],
[171,186,0,177,161,174,172,172],
[158,164,164,0,164,167,191,172],
[163,177,180,177,0,168,174,173],
[161,167,167,174,173,0,179,178],
[168,176,169,150,167,162,0,174],
[159,170,169,169,168,163,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,183,164,181,181,168,159],
[159,0,190,159,168,178,166,176],
[158,151,0,164,174,167,166,163],
[177,182,177,0,177,175,169,167],
[160,173,167,164,0,164,167,166],
[160,163,174,166,177,0,164,165],
[173,175,175,172,174,177,0,165],
[182,165,178,174,175,176,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,156,182,201,144,184,155],
[172,0,178,152,160,165,151,165],
[185,163,0,187,202,140,149,188],
[159,189,154,0,188,191,180,191],
[140,181,139,153,0,160,159,173],
[197,176,201,150,181,0,153,181],
[157,190,192,161,182,188,0,180],
[186,176,153,150,168,160,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,170,173,171,177,176,182],
[172,0,154,184,150,163,169,171],
[171,187,0,189,182,170,172,184],
[168,157,152,0,156,152,165,165],
[170,191,159,185,0,166,168,184],
[164,178,171,189,175,0,174,182],
[165,172,169,176,173,167,0,183],
[159,170,157,176,157,159,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,172,158,180,159,147,177],
[196,0,179,169,164,138,148,158],
[169,162,0,174,185,146,155,159],
[183,172,167,0,161,184,161,173],
[161,177,156,180,0,166,148,174],
[182,203,195,157,175,0,186,163],
[194,193,186,180,193,155,0,184],
[164,183,182,168,167,178,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,171,167,184,171,161,176],
[171,0,157,163,168,170,158,163],
[170,184,0,169,167,160,165,172],
[174,178,172,0,179,179,173,163],
[157,173,174,162,0,154,174,164],
[170,171,181,162,187,0,164,176],
[180,183,176,168,167,177,0,163],
[165,178,169,178,177,165,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,158,187,166,171,193,164],
[194,0,161,191,175,167,185,174],
[183,180,0,179,164,175,188,173],
[154,150,162,0,140,166,157,165],
[175,166,177,201,0,175,179,157],
[170,174,166,175,166,0,168,166],
[148,156,153,184,162,173,0,167],
[177,167,168,176,184,175,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,240,134,147,150,126,221],
[190,0,204,158,114,156,162,223],
[101,137,0,127,149,79,152,143],
[207,183,214,0,138,189,146,227],
[194,227,192,203,0,149,174,232],
[191,185,262,152,192,0,167,230],
[215,179,189,195,167,174,0,210],
[120,118,198,114,109,111,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,149,139,173,145,161,170],
[187,0,156,171,185,179,147,197],
[192,185,0,171,180,174,168,202],
[202,170,170,0,190,190,172,195],
[168,156,161,151,0,156,155,179],
[196,162,167,151,185,0,162,196],
[180,194,173,169,186,179,0,213],
[171,144,139,146,162,145,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,176,156,182,176,172,161],
[162,0,148,142,170,163,153,153],
[165,193,0,166,172,170,172,172],
[185,199,175,0,199,181,172,169],
[159,171,169,142,0,162,170,151],
[165,178,171,160,179,0,177,167],
[169,188,169,169,171,164,0,162],
[180,188,169,172,190,174,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,182,162,172,171,191,189],
[163,0,182,157,156,174,155,174],
[159,159,0,159,161,178,180,181],
[179,184,182,0,164,184,175,195],
[169,185,180,177,0,189,168,178],
[170,167,163,157,152,0,176,172],
[150,186,161,166,173,165,0,178],
[152,167,160,146,163,169,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,226,213,226,213,123,147],
[115,0,123,238,123,123,199,180],
[115,218,0,248,141,82,115,180],
[128,103,93,0,93,136,141,104],
[115,218,200,248,0,82,115,180],
[128,218,259,205,259,0,180,180],
[218,142,226,200,226,161,0,104],
[194,161,161,237,161,161,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,155,182,171,161,173,156],
[163,0,169,188,146,158,195,179],
[186,172,0,168,168,157,177,156],
[159,153,173,0,179,151,191,146],
[170,195,173,162,0,165,162,174],
[180,183,184,190,176,0,164,180],
[168,146,164,150,179,177,0,178],
[185,162,185,195,167,161,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,179,183,166,157,176,167],
[175,0,170,169,166,156,165,164],
[162,171,0,164,167,148,173,153],
[158,172,177,0,174,156,171,166],
[175,175,174,167,0,158,183,172],
[184,185,193,185,183,0,188,164],
[165,176,168,170,158,153,0,164],
[174,177,188,175,169,177,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,161,196,197,153,185,176],
[156,0,155,166,162,154,173,169],
[180,186,0,187,157,177,179,166],
[145,175,154,0,151,153,175,177],
[144,179,184,190,0,180,175,182],
[188,187,164,188,161,0,164,175],
[156,168,162,166,166,177,0,154],
[165,172,175,164,159,166,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,180,165,179,174,189,178],
[160,0,160,154,169,168,162,165],
[161,181,0,160,158,170,162,170],
[176,187,181,0,184,170,163,182],
[162,172,183,157,0,171,167,175],
[167,173,171,171,170,0,166,182],
[152,179,179,178,174,175,0,184],
[163,176,171,159,166,159,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,178,160,172,143,170,155],
[197,0,204,194,184,167,187,182],
[163,137,0,161,158,157,155,167],
[181,147,180,0,148,166,161,166],
[169,157,183,193,0,174,172,182],
[198,174,184,175,167,0,177,179],
[171,154,186,180,169,164,0,170],
[186,159,174,175,159,162,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,162,151,153,170,148,148],
[198,0,174,166,151,152,141,182],
[179,167,0,165,131,178,153,163],
[190,175,176,0,167,173,160,183],
[188,190,210,174,0,218,188,161],
[171,189,163,168,123,0,138,145],
[193,200,188,181,153,203,0,194],
[193,159,178,158,180,196,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,128,168,132,134,162,135],
[182,0,168,178,117,137,137,136],
[213,173,0,183,117,168,169,171],
[173,163,158,0,77,128,150,130],
[209,224,224,264,0,153,177,172],
[207,204,173,213,188,0,182,164],
[179,204,172,191,164,159,0,156],
[206,205,170,211,169,177,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,173,151,174,168,170,173],
[157,0,168,162,166,162,162,167],
[168,173,0,161,171,163,170,179],
[190,179,180,0,165,170,176,186],
[167,175,170,176,0,173,179,178],
[173,179,178,171,168,0,177,180],
[171,179,171,165,162,164,0,178],
[168,174,162,155,163,161,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,204,166,169,184,178,173],
[139,0,184,168,175,171,184,148],
[137,157,0,159,181,180,187,168],
[175,173,182,0,152,168,186,197],
[172,166,160,189,0,185,185,176],
[157,170,161,173,156,0,156,162],
[163,157,154,155,156,185,0,164],
[168,193,173,144,165,179,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,165,161,164,160,160,174],
[169,0,179,157,170,176,171,155],
[176,162,0,166,173,168,157,174],
[180,184,175,0,170,167,180,170],
[177,171,168,171,0,157,165,160],
[181,165,173,174,184,0,174,174],
[181,170,184,161,176,167,0,171],
[167,186,167,171,181,167,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,172,162,161,168,172,144],
[171,0,196,185,174,165,187,170],
[169,145,0,131,160,140,166,148],
[179,156,210,0,199,145,195,179],
[180,167,181,142,0,126,189,137],
[173,176,201,196,215,0,217,155],
[169,154,175,146,152,124,0,136],
[197,171,193,162,204,186,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,114,129,139,73,114,118],
[255,0,193,184,212,168,186,181],
[227,148,0,174,210,175,172,144],
[212,157,167,0,228,176,199,183],
[202,129,131,113,0,116,160,153],
[268,173,166,165,225,0,194,149],
[227,155,169,142,181,147,0,165],
[223,160,197,158,188,192,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,153,172,167,182,168,153],
[185,0,171,183,175,178,158,186],
[188,170,0,177,173,179,192,169],
[169,158,164,0,179,171,163,189],
[174,166,168,162,0,177,172,161],
[159,163,162,170,164,0,165,167],
[173,183,149,178,169,176,0,169],
[188,155,172,152,180,174,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,151,171,165,165,154,162],
[187,0,180,178,171,159,172,171],
[190,161,0,152,173,163,173,150],
[170,163,189,0,159,188,159,165],
[176,170,168,182,0,168,167,162],
[176,182,178,153,173,0,162,169],
[187,169,168,182,174,179,0,198],
[179,170,191,176,179,172,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,228,173,215,188,195,166],
[161,0,187,190,204,174,164,162],
[113,154,0,172,154,142,162,114],
[168,151,169,0,215,197,214,173],
[126,137,187,126,0,150,187,147],
[153,167,199,144,191,0,170,120],
[146,177,179,127,154,171,0,148],
[175,179,227,168,194,221,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,184,169,152,193,175,151],
[192,0,201,175,160,169,186,172],
[157,140,0,162,151,152,168,146],
[172,166,179,0,169,174,190,188],
[189,181,190,172,0,185,200,169],
[148,172,189,167,156,0,181,163],
[166,155,173,151,141,160,0,154],
[190,169,195,153,172,178,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,189,179,168,166,163,197],
[178,0,167,178,156,183,178,192],
[152,174,0,168,162,138,175,180],
[162,163,173,0,161,160,176,186],
[173,185,179,180,0,150,190,157],
[175,158,203,181,191,0,177,199],
[178,163,166,165,151,164,0,177],
[144,149,161,155,184,142,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,163,157,171,183,178,167],
[183,0,175,176,163,170,182,181],
[178,166,0,171,171,174,190,170],
[184,165,170,0,179,165,184,175],
[170,178,170,162,0,172,170,171],
[158,171,167,176,169,0,171,157],
[163,159,151,157,171,170,0,165],
[174,160,171,166,170,184,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,165,160,171,171,176,191],
[168,0,177,152,164,167,153,159],
[176,164,0,144,174,159,160,191],
[181,189,197,0,207,167,171,200],
[170,177,167,134,0,167,151,162],
[170,174,182,174,174,0,176,186],
[165,188,181,170,190,165,0,180],
[150,182,150,141,179,155,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,156,150,169,123,103,146],
[186,0,136,184,188,126,101,122],
[185,205,0,184,204,168,200,159],
[191,157,157,0,196,151,159,172],
[172,153,137,145,0,145,133,158],
[218,215,173,190,196,0,162,183],
[238,240,141,182,208,179,0,156],
[195,219,182,169,183,158,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,164,170,167,176,191,189],
[161,0,144,174,161,171,165,189],
[177,197,0,172,163,156,152,188],
[171,167,169,0,169,163,160,190],
[174,180,178,172,0,183,169,188],
[165,170,185,178,158,0,169,201],
[150,176,189,181,172,172,0,186],
[152,152,153,151,153,140,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,150,158,149,151,154,154],
[209,0,142,167,182,172,174,153],
[191,199,0,177,181,199,167,197],
[183,174,164,0,172,176,184,187],
[192,159,160,169,0,163,173,179],
[190,169,142,165,178,0,156,181],
[187,167,174,157,168,185,0,160],
[187,188,144,154,162,160,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,176,232,208,149,205,189],
[158,0,213,189,166,146,185,153],
[165,128,0,187,172,132,207,166],
[109,152,154,0,135,140,200,131],
[133,175,169,206,0,191,214,211],
[192,195,209,201,150,0,272,229],
[136,156,134,141,127,69,0,123],
[152,188,175,210,130,112,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,184,145,170,121,181,146],
[203,0,202,188,202,161,212,187],
[157,139,0,154,147,155,200,165],
[196,153,187,0,201,174,191,190],
[171,139,194,140,0,129,183,174],
[220,180,186,167,212,0,215,195],
[160,129,141,150,158,126,0,156],
[195,154,176,151,167,146,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,186,187,179,172,207,164],
[162,0,176,174,203,191,211,176],
[155,165,0,183,186,178,188,175],
[154,167,158,0,173,158,188,156],
[162,138,155,168,0,159,170,162],
[169,150,163,183,182,0,180,169],
[134,130,153,153,171,161,0,131],
[177,165,166,185,179,172,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,151,154,142,155,156,157],
[186,0,174,176,159,174,175,185],
[190,167,0,177,157,162,176,178],
[187,165,164,0,161,165,158,175],
[199,182,184,180,0,184,167,191],
[186,167,179,176,157,0,175,167],
[185,166,165,183,174,166,0,174],
[184,156,163,166,150,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,166,192,166,170,179,160],
[173,0,168,190,168,180,173,177],
[175,173,0,175,171,198,179,160],
[149,151,166,0,160,164,160,169],
[175,173,170,181,0,174,193,159],
[171,161,143,177,167,0,185,160],
[162,168,162,181,148,156,0,172],
[181,164,181,172,182,181,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,150,177,144,177,174,166],
[188,0,171,191,167,192,201,193],
[191,170,0,201,188,194,188,184],
[164,150,140,0,159,164,171,167],
[197,174,153,182,0,196,171,195],
[164,149,147,177,145,0,170,170],
[167,140,153,170,170,171,0,148],
[175,148,157,174,146,171,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,196,166,156,199,169,198],
[142,0,175,159,179,161,167,197],
[145,166,0,176,172,170,151,165],
[175,182,165,0,186,169,176,198],
[185,162,169,155,0,158,153,181],
[142,180,171,172,183,0,166,207],
[172,174,190,165,188,175,0,161],
[143,144,176,143,160,134,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,182,161,138,180,144,151],
[191,0,193,194,163,175,178,167],
[159,148,0,165,147,162,150,150],
[180,147,176,0,148,168,153,160],
[203,178,194,193,0,182,165,166],
[161,166,179,173,159,0,150,160],
[197,163,191,188,176,191,0,177],
[190,174,191,181,175,181,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,152,157,202,153,160,181],
[159,0,128,174,166,157,175,173],
[189,213,0,170,178,216,194,176],
[184,167,171,0,172,170,179,167],
[139,175,163,169,0,159,164,157],
[188,184,125,171,182,0,181,151],
[181,166,147,162,177,160,0,155],
[160,168,165,174,184,190,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,148,161,144,198,180,144],
[166,0,184,209,196,192,169,152],
[193,157,0,225,173,200,217,140],
[180,132,116,0,127,174,186,134],
[197,145,168,214,0,225,242,178],
[143,149,141,167,116,0,175,140],
[161,172,124,155,99,166,0,144],
[197,189,201,207,163,201,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,184,172,170,171,173,175],
[164,0,165,181,167,153,181,169],
[157,176,0,176,172,159,164,162],
[169,160,165,0,158,155,174,152],
[171,174,169,183,0,165,175,164],
[170,188,182,186,176,0,169,181],
[168,160,177,167,166,172,0,175],
[166,172,179,189,177,160,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,175,197,124,185,202,192],
[142,0,124,166,139,179,154,151],
[166,217,0,203,150,190,202,173],
[144,175,138,0,137,174,188,172],
[217,202,191,204,0,159,200,217],
[156,162,151,167,182,0,151,177],
[139,187,139,153,141,190,0,182],
[149,190,168,169,124,164,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,170,175,157,160,153,183],
[163,0,136,152,135,153,158,164],
[171,205,0,173,164,189,170,181],
[166,189,168,0,158,180,177,180],
[184,206,177,183,0,188,167,178],
[181,188,152,161,153,0,173,182],
[188,183,171,164,174,168,0,176],
[158,177,160,161,163,159,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,161,162,166,156,162,156],
[182,0,174,168,170,166,178,165],
[180,167,0,177,170,159,169,159],
[179,173,164,0,156,166,163,172],
[175,171,171,185,0,164,169,164],
[185,175,182,175,177,0,186,161],
[179,163,172,178,172,155,0,167],
[185,176,182,169,177,180,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,176,124,128,182,207,137],
[251,0,237,165,166,141,266,132],
[165,104,0,115,128,139,206,112],
[217,176,226,0,126,183,255,188],
[213,175,213,215,0,239,254,62],
[159,200,202,158,102,0,267,135],
[134,75,135,86,87,74,0,82],
[204,209,229,153,279,206,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,171,171,153,159,145,170],
[184,0,173,198,181,167,170,175],
[170,168,0,197,175,141,148,190],
[170,143,144,0,157,145,138,166],
[188,160,166,184,0,180,174,190],
[182,174,200,196,161,0,155,195],
[196,171,193,203,167,186,0,213],
[171,166,151,175,151,146,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,195,147,175,176,155,201],
[142,0,181,114,164,154,175,151],
[146,160,0,132,185,153,163,145],
[194,227,209,0,214,184,167,220],
[166,177,156,127,0,145,135,176],
[165,187,188,157,196,0,155,177],
[186,166,178,174,206,186,0,213],
[140,190,196,121,165,164,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,186,179,193,176,183,169],
[172,0,184,170,181,176,172,169],
[155,157,0,176,168,166,167,164],
[162,171,165,0,177,158,176,177],
[148,160,173,164,0,165,177,167],
[165,165,175,183,176,0,190,176],
[158,169,174,165,164,151,0,165],
[172,172,177,164,174,165,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,151,158,153,146,159,149],
[201,0,191,172,173,167,187,195],
[190,150,0,149,162,175,173,175],
[183,169,192,0,162,177,194,170],
[188,168,179,179,0,168,187,188],
[195,174,166,164,173,0,204,187],
[182,154,168,147,154,137,0,152],
[192,146,166,171,153,154,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,161,194,178,172,185,184],
[176,0,141,206,203,178,185,179],
[180,200,0,201,158,173,175,185],
[147,135,140,0,151,141,163,166],
[163,138,183,190,0,153,165,177],
[169,163,168,200,188,0,195,183],
[156,156,166,178,176,146,0,162],
[157,162,156,175,164,158,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,170,202,183,188,180,189],
[157,0,169,178,188,172,162,175],
[171,172,0,173,174,157,156,170],
[139,163,168,0,180,178,150,167],
[158,153,167,161,0,140,149,147],
[153,169,184,163,201,0,172,182],
[161,179,185,191,192,169,0,171],
[152,166,171,174,194,159,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,173,170,168,172,168,174],
[178,0,171,175,169,175,165,179],
[168,170,0,173,158,158,173,170],
[171,166,168,0,163,167,172,174],
[173,172,183,178,0,165,183,181],
[169,166,183,174,176,0,174,177],
[173,176,168,169,158,167,0,173],
[167,162,171,167,160,164,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,174,178,178,168,170,169],
[172,0,186,177,173,159,184,188],
[167,155,0,168,165,166,167,164],
[163,164,173,0,163,168,173,170],
[163,168,176,178,0,172,185,169],
[173,182,175,173,169,0,169,190],
[171,157,174,168,156,172,0,171],
[172,153,177,171,172,151,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,165,166,167,177,163,164],
[187,0,181,169,192,180,179,176],
[176,160,0,154,163,176,165,172],
[175,172,187,0,186,185,170,171],
[174,149,178,155,0,169,167,161],
[164,161,165,156,172,0,167,164],
[178,162,176,171,174,174,0,162],
[177,165,169,170,180,177,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,162,165,165,155,140,160],
[197,0,179,174,185,172,166,184],
[179,162,0,165,171,168,173,174],
[176,167,176,0,158,172,152,169],
[176,156,170,183,0,166,144,164],
[186,169,173,169,175,0,173,174],
[201,175,168,189,197,168,0,177],
[181,157,167,172,177,167,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,230,211,100,341,211,230],
[130,0,230,111,130,341,211,230],
[111,111,0,111,111,341,211,111],
[130,230,230,0,230,341,211,230],
[241,211,230,111,0,341,211,230],
[0,0,0,0,0,0,100,0],
[130,130,130,130,130,241,0,130],
[111,111,230,111,111,341,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,170,171,171,177,162,178],
[162,0,166,165,170,164,161,166],
[171,175,0,165,178,183,167,184],
[170,176,176,0,167,177,159,174],
[170,171,163,174,0,166,165,176],
[164,177,158,164,175,0,167,179],
[179,180,174,182,176,174,0,169],
[163,175,157,167,165,162,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,173,178,160,166,169,183],
[176,0,167,176,174,184,177,189],
[168,174,0,183,173,171,179,184],
[163,165,158,0,171,166,170,180],
[181,167,168,170,0,167,169,182],
[175,157,170,175,174,0,177,175],
[172,164,162,171,172,164,0,171],
[158,152,157,161,159,166,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,178,170,170,173,168],
[169,0,169,159,171,165,177,176],
[170,172,0,155,176,171,179,165],
[163,182,186,0,172,177,205,176],
[171,170,165,169,0,164,180,167],
[171,176,170,164,177,0,181,170],
[168,164,162,136,161,160,0,159],
[173,165,176,165,174,171,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,178,193,168,180,179,187],
[176,0,183,172,182,181,183,146],
[163,158,0,182,174,178,159,162],
[148,169,159,0,172,178,171,165],
[173,159,167,169,0,188,159,166],
[161,160,163,163,153,0,154,181],
[162,158,182,170,182,187,0,168],
[154,195,179,176,175,160,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,181,95,170,127,122,152],
[174,0,175,197,167,197,139,187],
[160,166,0,104,165,196,116,124],
[246,144,237,0,191,182,205,221],
[171,174,176,150,0,182,174,161],
[214,144,145,159,159,0,169,195],
[219,202,225,136,167,172,0,204],
[189,154,217,120,180,146,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,176,176,170,167,172,161],
[173,0,171,147,155,170,168,172],
[165,170,0,157,159,168,163,169],
[165,194,184,0,180,186,187,187],
[171,186,182,161,0,184,175,184],
[174,171,173,155,157,0,163,168],
[169,173,178,154,166,178,0,168],
[180,169,172,154,157,173,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,167,166,183,184,171,186],
[169,0,177,174,184,176,177,182],
[174,164,0,171,179,163,168,179],
[175,167,170,0,170,172,168,171],
[158,157,162,171,0,164,160,169],
[157,165,178,169,177,0,176,176],
[170,164,173,173,181,165,0,159],
[155,159,162,170,172,165,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,158,188,161,188,181,149],
[170,0,165,169,167,179,171,173],
[183,176,0,194,162,174,184,164],
[153,172,147,0,149,172,167,140],
[180,174,179,192,0,170,170,166],
[153,162,167,169,171,0,162,164],
[160,170,157,174,171,179,0,178],
[192,168,177,201,175,177,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,175,158,151,179,166,173],
[168,0,184,174,180,180,186,175],
[166,157,0,166,169,184,172,174],
[183,167,175,0,169,185,168,187],
[190,161,172,172,0,191,176,178],
[162,161,157,156,150,0,168,174],
[175,155,169,173,165,173,0,170],
[168,166,167,154,163,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,189,208,173,171,177,169],
[187,0,189,198,137,167,166,168],
[152,152,0,188,150,133,178,175],
[133,143,153,0,150,139,144,148],
[168,204,191,191,0,177,178,167],
[170,174,208,202,164,0,192,198],
[164,175,163,197,163,149,0,146],
[172,173,166,193,174,143,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,168,171,172,171,184,172],
[176,0,165,152,162,164,160,193],
[173,176,0,176,160,189,174,192],
[170,189,165,0,175,191,180,182],
[169,179,181,166,0,173,167,168],
[170,177,152,150,168,0,173,187],
[157,181,167,161,174,168,0,172],
[169,148,149,159,173,154,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,135,163,212,181,144,148],
[182,0,189,178,234,157,146,167],
[206,152,0,171,191,135,171,142],
[178,163,170,0,210,157,142,175],
[129,107,150,131,0,159,129,181],
[160,184,206,184,182,0,164,159],
[197,195,170,199,212,177,0,149],
[193,174,199,166,160,182,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,175,169,164,170,169,160],
[174,0,176,166,176,186,185,176],
[166,165,0,168,167,179,181,163],
[172,175,173,0,180,177,182,166],
[177,165,174,161,0,176,178,174],
[171,155,162,164,165,0,174,159],
[172,156,160,159,163,167,0,160],
[181,165,178,175,167,182,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,168,162,171,178,175,164],
[180,0,164,175,180,173,175,175],
[173,177,0,174,161,173,176,171],
[179,166,167,0,172,166,187,186],
[170,161,180,169,0,177,196,178],
[163,168,168,175,164,0,171,172],
[166,166,165,154,145,170,0,144],
[177,166,170,155,163,169,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,176,171,188,164,172,176],
[152,0,171,169,180,157,176,160],
[165,170,0,164,188,159,179,178],
[170,172,177,0,191,169,189,182],
[153,161,153,150,0,154,174,160],
[177,184,182,172,187,0,185,170],
[169,165,162,152,167,156,0,157],
[165,181,163,159,181,171,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,152,145,177,155,155,155],
[198,0,169,162,168,176,190,180],
[189,172,0,174,173,172,177,162],
[196,179,167,0,174,195,186,181],
[164,173,168,167,0,169,166,181],
[186,165,169,146,172,0,148,164],
[186,151,164,155,175,193,0,155],
[186,161,179,160,160,177,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,171,118,106,110,121,110],
[226,0,192,192,170,187,175,206],
[170,149,0,131,127,114,114,131],
[223,149,210,0,160,165,164,199],
[235,171,214,181,0,183,131,234],
[231,154,227,176,158,0,173,187],
[220,166,227,177,210,168,0,180],
[231,135,210,142,107,154,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,165,133,150,175,143,146],
[176,0,179,167,149,171,155,167],
[176,162,0,174,160,157,151,156],
[208,174,167,0,143,166,150,153],
[191,192,181,198,0,190,180,167],
[166,170,184,175,151,0,167,148],
[198,186,190,191,161,174,0,171],
[195,174,185,188,174,193,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,173,179,172,167,165,173],
[177,0,165,194,157,166,190,189],
[168,176,0,186,179,179,177,184],
[162,147,155,0,134,162,162,169],
[169,184,162,207,0,175,182,192],
[174,175,162,179,166,0,170,179],
[176,151,164,179,159,171,0,172],
[168,152,157,172,149,162,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,179,180,174,168,168,179],
[154,0,157,136,162,180,151,144],
[162,184,0,151,165,175,158,160],
[161,205,190,0,194,206,190,168],
[167,179,176,147,0,189,171,175],
[173,161,166,135,152,0,167,155],
[173,190,183,151,170,174,0,165],
[162,197,181,173,166,186,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,167,147,147,162,154,146],
[179,0,199,167,184,200,205,198],
[174,142,0,156,145,182,180,154],
[194,174,185,0,170,206,198,180],
[194,157,196,171,0,182,169,153],
[179,141,159,135,159,0,173,131],
[187,136,161,143,172,168,0,173],
[195,143,187,161,188,210,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,182,192,172,169,187,183],
[171,0,170,158,166,175,158,166],
[159,171,0,168,186,157,166,168],
[149,183,173,0,176,154,152,176],
[169,175,155,165,0,158,159,168],
[172,166,184,187,183,0,176,186],
[154,183,175,189,182,165,0,182],
[158,175,173,165,173,155,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,188,169,180,202,151,147],
[152,0,175,168,162,175,180,171],
[153,166,0,187,122,169,179,162],
[172,173,154,0,161,177,192,171],
[161,179,219,180,0,173,235,151],
[139,166,172,164,168,0,174,166],
[190,161,162,149,106,167,0,120],
[194,170,179,170,190,175,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,171,169,180,171,164,161],
[162,0,178,174,174,166,172,170],
[170,163,0,176,167,169,176,162],
[172,167,165,0,164,169,162,165],
[161,167,174,177,0,174,172,167],
[170,175,172,172,167,0,175,172],
[177,169,165,179,169,166,0,166],
[180,171,179,176,174,169,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,164,163,178,168,168,165],
[170,0,166,156,179,179,179,175],
[177,175,0,166,190,171,166,174],
[178,185,175,0,183,184,155,172],
[163,162,151,158,0,167,167,161],
[173,162,170,157,174,0,170,169],
[173,162,175,186,174,171,0,176],
[176,166,167,169,180,172,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,180,153,161,137,152,156],
[211,0,203,183,167,191,161,191],
[161,138,0,135,143,161,159,143],
[188,158,206,0,171,177,170,186],
[180,174,198,170,0,167,173,183],
[204,150,180,164,174,0,166,167],
[189,180,182,171,168,175,0,175],
[185,150,198,155,158,174,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,188,174,167,172,169,185],
[158,0,180,164,168,159,163,170],
[153,161,0,158,154,155,161,168],
[167,177,183,0,156,159,172,178],
[174,173,187,185,0,169,167,186],
[169,182,186,182,172,0,167,178],
[172,178,180,169,174,174,0,185],
[156,171,173,163,155,163,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,157,158,150,171,172,189],
[161,0,157,154,159,183,178,185],
[184,184,0,171,160,187,187,187],
[183,187,170,0,176,196,184,199],
[191,182,181,165,0,188,186,200],
[170,158,154,145,153,0,176,182],
[169,163,154,157,155,165,0,183],
[152,156,154,142,141,159,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,194,170,180,185,174,214],
[158,0,191,191,183,191,167,188],
[147,150,0,162,159,150,148,165],
[171,150,179,0,156,168,137,198],
[161,158,182,185,0,173,141,188],
[156,150,191,173,168,0,180,193],
[167,174,193,204,200,161,0,193],
[127,153,176,143,153,148,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,166,171,159,167,172,158],
[166,0,151,162,164,160,170,174],
[175,190,0,175,171,170,175,175],
[170,179,166,0,170,161,177,174],
[182,177,170,171,0,174,185,174],
[174,181,171,180,167,0,183,182],
[169,171,166,164,156,158,0,164],
[183,167,166,167,167,159,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,173,183,140,145,181,162],
[190,0,173,161,143,174,159,152],
[168,168,0,166,153,152,178,119],
[158,180,175,0,136,160,168,162],
[201,198,188,205,0,193,195,167],
[196,167,189,181,148,0,197,176],
[160,182,163,173,146,144,0,152],
[179,189,222,179,174,165,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,185,175,148,183,160,164],
[174,0,177,192,169,189,189,176],
[156,164,0,177,160,173,186,170],
[166,149,164,0,157,177,171,164],
[193,172,181,184,0,194,183,165],
[158,152,168,164,147,0,163,139],
[181,152,155,170,158,178,0,156],
[177,165,171,177,176,202,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,173,167,181,157,178,167],
[157,0,170,176,164,130,175,155],
[168,171,0,168,183,148,162,168],
[174,165,173,0,155,127,156,147],
[160,177,158,186,0,171,168,196],
[184,211,193,214,170,0,199,183],
[163,166,179,185,173,142,0,168],
[174,186,173,194,145,158,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,170,173,164,175,172,180],
[151,0,134,166,122,136,143,163],
[171,207,0,161,148,187,137,162],
[168,175,180,0,149,163,163,157],
[177,219,193,192,0,185,164,187],
[166,205,154,178,156,0,172,173],
[169,198,204,178,177,169,0,190],
[161,178,179,184,154,168,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,158,180,172,168,181,170],
[184,0,141,151,151,171,162,171],
[183,200,0,161,176,155,172,167],
[161,190,180,0,159,147,168,183],
[169,190,165,182,0,164,159,173],
[173,170,186,194,177,0,186,166],
[160,179,169,173,182,155,0,171],
[171,170,174,158,168,175,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,174,163,168,161,159,147],
[162,0,170,159,146,153,147,148],
[167,171,0,165,184,160,168,162],
[178,182,176,0,169,168,161,166],
[173,195,157,172,0,171,185,172],
[180,188,181,173,170,0,150,161],
[182,194,173,180,156,191,0,162],
[194,193,179,175,169,180,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,202,207,166,179,175,170],
[163,0,179,174,169,158,175,177],
[139,162,0,161,145,154,176,151],
[134,167,180,0,172,168,173,162],
[175,172,196,169,0,188,199,196],
[162,183,187,173,153,0,185,174],
[166,166,165,168,142,156,0,162],
[171,164,190,179,145,167,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,150,146,173,159,147,151],
[190,0,158,190,184,167,174,183],
[191,183,0,177,176,167,168,171],
[195,151,164,0,171,175,154,173],
[168,157,165,170,0,167,169,188],
[182,174,174,166,174,0,178,175],
[194,167,173,187,172,163,0,200],
[190,158,170,168,153,166,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,175,175,169,186,175,167],
[172,0,165,161,170,176,175,165],
[166,176,0,176,171,187,169,170],
[166,180,165,0,162,179,172,152],
[172,171,170,179,0,179,174,169],
[155,165,154,162,162,0,165,160],
[166,166,172,169,167,176,0,174],
[174,176,171,189,172,181,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,174,182,165,155,157,171],
[159,0,165,173,148,164,144,173],
[167,176,0,186,174,159,157,155],
[159,168,155,0,164,160,159,158],
[176,193,167,177,0,163,162,169],
[186,177,182,181,178,0,169,172],
[184,197,184,182,179,172,0,168],
[170,168,186,183,172,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,167,145,171,171,182,174],
[169,0,169,179,166,165,162,160],
[174,172,0,159,171,164,175,173],
[196,162,182,0,181,175,186,173],
[170,175,170,160,0,163,177,177],
[170,176,177,166,178,0,175,180],
[159,179,166,155,164,166,0,155],
[167,181,168,168,164,161,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,177,164,166,180,173,176],
[176,0,173,182,175,181,172,157],
[164,168,0,170,173,170,173,162],
[177,159,171,0,170,179,178,154],
[175,166,168,171,0,167,158,165],
[161,160,171,162,174,0,163,161],
[168,169,168,163,183,178,0,158],
[165,184,179,187,176,180,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,168,169,175,168,175,169],
[166,0,164,157,176,160,166,163],
[173,177,0,159,170,172,167,170],
[172,184,182,0,176,167,176,170],
[166,165,171,165,0,151,168,162],
[173,181,169,174,190,0,192,177],
[166,175,174,165,173,149,0,163],
[172,178,171,171,179,164,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,161,152,152,179,153,229],
[134,0,163,190,174,192,166,177],
[180,178,0,127,132,227,183,181],
[189,151,214,0,151,221,187,176],
[189,167,209,190,0,177,188,202],
[162,149,114,120,164,0,142,185],
[188,175,158,154,153,199,0,161],
[112,164,160,165,139,156,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,200,201,167,157,191,173],
[166,0,197,190,175,163,180,189],
[141,144,0,192,140,158,186,173],
[140,151,149,0,142,141,163,131],
[174,166,201,199,0,193,196,171],
[184,178,183,200,148,0,199,182],
[150,161,155,178,145,142,0,174],
[168,152,168,210,170,159,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,185,165,135,156,142,147],
[205,0,164,167,167,156,159,179],
[156,177,0,167,117,162,148,149],
[176,174,174,0,150,164,184,167],
[206,174,224,191,0,184,160,176],
[185,185,179,177,157,0,176,160],
[199,182,193,157,181,165,0,166],
[194,162,192,174,165,181,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,184,215,214,203,175,164],
[145,0,134,187,178,157,166,142],
[157,207,0,200,187,182,197,173],
[126,154,141,0,157,138,146,148],
[127,163,154,184,0,162,187,160],
[138,184,159,203,179,0,175,159],
[166,175,144,195,154,166,0,149],
[177,199,168,193,181,182,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,205,192,186,180,172,187],
[206,0,229,169,210,148,201,203],
[136,112,0,161,135,157,170,152],
[149,172,180,0,146,184,164,176],
[155,131,206,195,0,187,185,175],
[161,193,184,157,154,0,134,146],
[169,140,171,177,156,207,0,158],
[154,138,189,165,166,195,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,165,161,166,165,166,167],
[170,0,163,180,164,171,164,173],
[176,178,0,173,163,177,178,179],
[180,161,168,0,170,172,169,180],
[175,177,178,171,0,172,163,178],
[176,170,164,169,169,0,151,165],
[175,177,163,172,178,190,0,178],
[174,168,162,161,163,176,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,163,163,156,158,167,180],
[166,0,158,158,162,170,165,170],
[178,183,0,161,163,175,168,179],
[178,183,180,0,177,165,182,195],
[185,179,178,164,0,167,183,182],
[183,171,166,176,174,0,175,176],
[174,176,173,159,158,166,0,181],
[161,171,162,146,159,165,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,149,156,158,150,184,159],
[154,0,175,159,166,163,201,169],
[192,166,0,199,184,183,197,183],
[185,182,142,0,157,159,192,173],
[183,175,157,184,0,160,204,167],
[191,178,158,182,181,0,210,188],
[157,140,144,149,137,131,0,144],
[182,172,158,168,174,153,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,173,182,178,170,184,189],
[171,0,171,181,194,158,168,161],
[168,170,0,194,193,178,175,181],
[159,160,147,0,176,165,156,157],
[163,147,148,165,0,163,151,153],
[171,183,163,176,178,0,171,187],
[157,173,166,185,190,170,0,190],
[152,180,160,184,188,154,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,192,159,180,185,187,173],
[148,0,157,161,163,173,168,170],
[149,184,0,170,184,182,164,174],
[182,180,171,0,185,181,178,160],
[161,178,157,156,0,185,172,153],
[156,168,159,160,156,0,171,157],
[154,173,177,163,169,170,0,168],
[168,171,167,181,188,184,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,166,165,150,165,171,164],
[168,0,175,168,156,172,163,180],
[175,166,0,187,164,189,171,195],
[176,173,154,0,155,183,193,180],
[191,185,177,186,0,196,168,189],
[176,169,152,158,145,0,162,186],
[170,178,170,148,173,179,0,180],
[177,161,146,161,152,155,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,177,147,173,162,150,172],
[198,0,185,169,183,171,165,175],
[164,156,0,165,167,166,157,159],
[194,172,176,0,157,165,173,165],
[168,158,174,184,0,156,161,163],
[179,170,175,176,185,0,167,155],
[191,176,184,168,180,174,0,175],
[169,166,182,176,178,186,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,179,186,165,192,176,185],
[161,0,172,179,155,157,170,170],
[162,169,0,162,159,169,172,164],
[155,162,179,0,169,166,172,166],
[176,186,182,172,0,158,190,153],
[149,184,172,175,183,0,172,152],
[165,171,169,169,151,169,0,148],
[156,171,177,175,188,189,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,177,192,168,201,160,162],
[149,0,168,168,137,170,144,166],
[164,173,0,176,170,159,157,163],
[149,173,165,0,139,178,154,151],
[173,204,171,202,0,180,166,169],
[140,171,182,163,161,0,147,175],
[181,197,184,187,175,194,0,168],
[179,175,178,190,172,166,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,183,143,151,166,184,164],
[147,0,158,130,173,186,173,183],
[158,183,0,162,189,186,162,199],
[198,211,179,0,170,224,204,207],
[190,168,152,171,0,174,193,181],
[175,155,155,117,167,0,143,168],
[157,168,179,137,148,198,0,190],
[177,158,142,134,160,173,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,156,157,175,182,176,174],
[183,0,168,177,180,171,192,163],
[185,173,0,197,196,180,164,184],
[184,164,144,0,166,163,165,178],
[166,161,145,175,0,181,157,157],
[159,170,161,178,160,0,162,173],
[165,149,177,176,184,179,0,158],
[167,178,157,163,184,168,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,202,206,187,163,207,194],
[137,0,163,175,104,198,212,153],
[139,178,0,191,177,153,198,114],
[135,166,150,0,161,126,145,136],
[154,237,164,180,0,155,199,173],
[178,143,188,215,186,0,176,170],
[134,129,143,196,142,165,0,128],
[147,188,227,205,168,171,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,164,164,176,169,154,160],
[177,0,137,170,199,153,173,176],
[177,204,0,191,222,198,163,190],
[177,171,150,0,185,153,163,153],
[165,142,119,156,0,141,141,158],
[172,188,143,188,200,0,164,168],
[187,168,178,178,200,177,0,176],
[181,165,151,188,183,173,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,185,191,187,194,164,183],
[147,0,148,169,161,161,163,162],
[156,193,0,176,177,205,170,199],
[150,172,165,0,162,180,157,185],
[154,180,164,179,0,190,178,172],
[147,180,136,161,151,0,165,170],
[177,178,171,184,163,176,0,180],
[158,179,142,156,169,171,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,158,154,170,163,178,181],
[167,0,164,173,170,166,189,182],
[183,177,0,159,183,182,201,184],
[187,168,182,0,182,188,195,191],
[171,171,158,159,0,159,171,181],
[178,175,159,153,182,0,185,184],
[163,152,140,146,170,156,0,167],
[160,159,157,150,160,157,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,168,172,186,164,173,171],
[176,0,179,170,165,174,167,158],
[173,162,0,168,178,162,181,153],
[169,171,173,0,163,166,166,172],
[155,176,163,178,0,161,159,157],
[177,167,179,175,180,0,173,168],
[168,174,160,175,182,168,0,175],
[170,183,188,169,184,173,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,162,176,166,185,168,155],
[156,0,153,157,144,159,156,150],
[179,188,0,170,176,172,176,162],
[165,184,171,0,159,173,157,160],
[175,197,165,182,0,192,166,182],
[156,182,169,168,149,0,159,159],
[173,185,165,184,175,182,0,162],
[186,191,179,181,159,182,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,134,151,118,179,155,146],
[183,0,100,177,149,159,157,156],
[207,241,0,199,173,179,192,164],
[190,164,142,0,118,171,171,173],
[223,192,168,223,0,184,207,180],
[162,182,162,170,157,0,176,160],
[186,184,149,170,134,165,0,176],
[195,185,177,168,161,181,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,166,177,175,184,175,176],
[149,0,156,166,169,161,162,155],
[175,185,0,163,162,191,165,159],
[164,175,178,0,169,182,169,171],
[166,172,179,172,0,168,171,154],
[157,180,150,159,173,0,172,158],
[166,179,176,172,170,169,0,156],
[165,186,182,170,187,183,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,181,173,176,161,163,165],
[173,0,163,174,177,182,173,176],
[160,178,0,171,157,166,157,164],
[168,167,170,0,177,168,169,175],
[165,164,184,164,0,173,167,167],
[180,159,175,173,168,0,170,180],
[178,168,184,172,174,171,0,174],
[176,165,177,166,174,161,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,164,128,198,157,146,154],
[155,0,165,129,171,175,107,125],
[177,176,0,147,179,164,174,157],
[213,212,194,0,202,190,157,172],
[143,170,162,139,0,187,133,109],
[184,166,177,151,154,0,143,146],
[195,234,167,184,208,198,0,198],
[187,216,184,169,232,195,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,156,162,150,159,175,188],
[183,0,163,187,162,160,191,170],
[185,178,0,171,171,166,185,181],
[179,154,170,0,180,162,180,181],
[191,179,170,161,0,160,191,185],
[182,181,175,179,181,0,169,197],
[166,150,156,161,150,172,0,168],
[153,171,160,160,156,144,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,191,196,175,180,188,181],
[191,0,185,194,169,165,162,170],
[150,156,0,187,179,158,158,157],
[145,147,154,0,144,174,155,175],
[166,172,162,197,0,194,166,192],
[161,176,183,167,147,0,151,172],
[153,179,183,186,175,190,0,172],
[160,171,184,166,149,169,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,196,176,172,182,189,169],
[151,0,174,172,168,170,166,158],
[145,167,0,159,181,161,170,163],
[165,169,182,0,158,177,185,173],
[169,173,160,183,0,196,186,185],
[159,171,180,164,145,0,151,177],
[152,175,171,156,155,190,0,161],
[172,183,178,168,156,164,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,133,164,188,186,176,123],
[173,0,193,242,192,206,179,169],
[208,148,0,191,211,218,197,209],
[177,99,150,0,168,164,163,130],
[153,149,130,173,0,182,158,129],
[155,135,123,177,159,0,151,125],
[165,162,144,178,183,190,0,167],
[218,172,132,211,212,216,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,179,178,195,169,146,155],
[191,0,168,173,187,143,168,167],
[162,173,0,169,185,178,135,177],
[163,168,172,0,172,162,165,187],
[146,154,156,169,0,120,138,135],
[172,198,163,179,221,0,180,205],
[195,173,206,176,203,161,0,182],
[186,174,164,154,206,136,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,148,156,178,156,152,150],
[178,0,159,164,199,173,160,162],
[193,182,0,181,196,181,167,173],
[185,177,160,0,191,169,184,163],
[163,142,145,150,0,166,153,154],
[185,168,160,172,175,0,176,192],
[189,181,174,157,188,165,0,163],
[191,179,168,178,187,149,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,168,198,139,203,149,186],
[127,0,152,155,103,88,119,153],
[173,189,0,188,150,135,184,187],
[143,186,153,0,164,109,126,125],
[202,238,191,177,0,144,167,216],
[138,253,206,232,197,0,193,213],
[192,222,157,215,174,148,0,242],
[155,188,154,216,125,128,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,199,164,154,158,159,158],
[178,0,170,156,160,169,170,168],
[142,171,0,156,144,154,160,162],
[177,185,185,0,152,173,177,162],
[187,181,197,189,0,187,170,172],
[183,172,187,168,154,0,157,163],
[182,171,181,164,171,184,0,173],
[183,173,179,179,169,178,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,173,156,130,166,147,155],
[176,0,176,178,173,160,184,166],
[168,165,0,186,153,179,177,184],
[185,163,155,0,159,175,152,186],
[211,168,188,182,0,169,172,178],
[175,181,162,166,172,0,167,167],
[194,157,164,189,169,174,0,178],
[186,175,157,155,163,174,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,169,177,165,174,190,165],
[164,0,188,163,168,160,188,172],
[172,153,0,162,168,157,180,178],
[164,178,179,0,159,168,172,151],
[176,173,173,182,0,171,169,165],
[167,181,184,173,170,0,190,154],
[151,153,161,169,172,151,0,161],
[176,169,163,190,176,187,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,170,174,177,185,158,168],
[163,0,180,180,185,189,163,175],
[171,161,0,166,185,180,178,156],
[167,161,175,0,183,175,157,159],
[164,156,156,158,0,173,150,166],
[156,152,161,166,168,0,152,158],
[183,178,163,184,191,189,0,179],
[173,166,185,182,175,183,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,170,171,181,197,185,176],
[180,0,166,170,171,196,176,184],
[171,175,0,158,161,192,182,176],
[170,171,183,0,173,189,166,182],
[160,170,180,168,0,193,182,179],
[144,145,149,152,148,0,172,181],
[156,165,159,175,159,169,0,170],
[165,157,165,159,162,160,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,194,170,178,159,184,175],
[146,0,162,178,163,136,168,193],
[147,179,0,162,160,170,151,189],
[171,163,179,0,183,182,175,177],
[163,178,181,158,0,167,173,174],
[182,205,171,159,174,0,180,197],
[157,173,190,166,168,161,0,189],
[166,148,152,164,167,144,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,168,148,170,172,169,170],
[172,0,170,172,178,190,168,174],
[173,171,0,152,174,180,154,163],
[193,169,189,0,180,185,178,175],
[171,163,167,161,0,177,164,178],
[169,151,161,156,164,0,163,158],
[172,173,187,163,177,178,0,169],
[171,167,178,166,163,183,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,175,199,171,155,174,176],
[161,0,173,181,166,161,163,170],
[166,168,0,171,161,163,166,166],
[142,160,170,0,159,163,161,166],
[170,175,180,182,0,174,177,163],
[186,180,178,178,167,0,163,179],
[167,178,175,180,164,178,0,180],
[165,171,175,175,178,162,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,156,149,155,153,158,146],
[167,0,194,159,173,154,171,175],
[185,147,0,160,159,143,139,136],
[192,182,181,0,173,154,171,147],
[186,168,182,168,0,202,173,172],
[188,187,198,187,139,0,162,140],
[183,170,202,170,168,179,0,166],
[195,166,205,194,169,201,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,177,176,179,150,166,164],
[184,0,170,179,187,174,184,181],
[164,171,0,187,182,167,186,165],
[165,162,154,0,171,164,163,171],
[162,154,159,170,0,147,162,164],
[191,167,174,177,194,0,172,176],
[175,157,155,178,179,169,0,173],
[177,160,176,170,177,165,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,134,111,196,150,148,141],
[181,0,175,109,141,155,181,175],
[207,166,0,121,101,134,176,127],
[230,232,220,0,167,159,182,167],
[145,200,240,174,0,184,209,174],
[191,186,207,182,157,0,213,166],
[193,160,165,159,132,128,0,152],
[200,166,214,174,167,175,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,167,147,182,155,165,177],
[167,0,162,168,168,172,176,176],
[174,179,0,173,167,158,170,168],
[194,173,168,0,182,178,174,184],
[159,173,174,159,0,158,178,177],
[186,169,183,163,183,0,173,181],
[176,165,171,167,163,168,0,183],
[164,165,173,157,164,160,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,131,174,166,140,114,168],
[203,0,176,128,198,136,140,167],
[210,165,0,138,157,157,135,158],
[167,213,203,0,209,190,187,170],
[175,143,184,132,0,176,153,161],
[201,205,184,151,165,0,155,135],
[227,201,206,154,188,186,0,183],
[173,174,183,171,180,206,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,157,184,175,184,173,173],
[162,0,154,156,177,177,170,151],
[184,187,0,194,180,160,198,184],
[157,185,147,0,197,199,172,184],
[166,164,161,144,0,170,165,159],
[157,164,181,142,171,0,197,176],
[168,171,143,169,176,144,0,149],
[168,190,157,157,182,165,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,170,183,174,179,201,182],
[173,0,142,172,161,150,178,174],
[171,199,0,182,166,189,183,196],
[158,169,159,0,160,163,154,174],
[167,180,175,181,0,178,185,199],
[162,191,152,178,163,0,173,185],
[140,163,158,187,156,168,0,176],
[159,167,145,167,142,156,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,159,178,194,169,185,211],
[137,0,153,157,172,153,155,198],
[182,188,0,186,185,189,168,193],
[163,184,155,0,182,198,170,204],
[147,169,156,159,0,157,157,194],
[172,188,152,143,184,0,171,192],
[156,186,173,171,184,170,0,184],
[130,143,148,137,147,149,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,161,156,170,170,162,161],
[160,0,169,168,173,178,163,171],
[180,172,0,164,171,176,159,177],
[185,173,177,0,179,172,164,150],
[171,168,170,162,0,172,148,162],
[171,163,165,169,169,0,166,159],
[179,178,182,177,193,175,0,169],
[180,170,164,191,179,182,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,127,168,144,137,154,136],
[198,0,169,171,196,180,190,147],
[214,172,0,163,181,176,183,171],
[173,170,178,0,175,155,184,133],
[197,145,160,166,0,161,191,144],
[204,161,165,186,180,0,177,169],
[187,151,158,157,150,164,0,157],
[205,194,170,208,197,172,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,162,164,152,187,174,187],
[175,0,171,179,167,199,200,189],
[179,170,0,178,167,187,181,166],
[177,162,163,0,185,181,182,177],
[189,174,174,156,0,192,197,172],
[154,142,154,160,149,0,194,178],
[167,141,160,159,144,147,0,158],
[154,152,175,164,169,163,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,167,164,164,171,156,152],
[177,0,171,157,169,148,154,154],
[174,170,0,174,182,171,171,154],
[177,184,167,0,166,169,161,164],
[177,172,159,175,0,161,156,155],
[170,193,170,172,180,0,180,179],
[185,187,170,180,185,161,0,165],
[189,187,187,177,186,162,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,163,165,167,195,168,182],
[158,0,161,165,170,188,168,158],
[178,180,0,167,163,184,163,164],
[176,176,174,0,168,183,173,171],
[174,171,178,173,0,177,170,165],
[146,153,157,158,164,0,151,166],
[173,173,178,168,171,190,0,174],
[159,183,177,170,176,175,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,197,189,173,186,182,169],
[164,0,189,169,158,178,184,174],
[144,152,0,161,156,172,159,159],
[152,172,180,0,151,168,156,183],
[168,183,185,190,0,182,178,182],
[155,163,169,173,159,0,152,158],
[159,157,182,185,163,189,0,165],
[172,167,182,158,159,183,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,184,167,181,163,198,185],
[187,0,192,160,171,182,182,201],
[157,149,0,151,158,153,179,171],
[174,181,190,0,166,174,183,200],
[160,170,183,175,0,161,190,188],
[178,159,188,167,180,0,186,183],
[143,159,162,158,151,155,0,171],
[156,140,170,141,153,158,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,182,220,194,152,180,255],
[177,0,163,151,212,211,245,213],
[159,178,0,188,184,162,184,197],
[121,190,153,0,212,129,196,137],
[147,129,157,129,0,179,185,120],
[189,130,179,212,162,0,226,183],
[161,96,157,145,156,115,0,166],
[86,128,144,204,221,158,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,194,170,180,175,192,174],
[176,0,180,160,172,166,178,184],
[147,161,0,154,159,163,197,188],
[171,181,187,0,159,170,190,171],
[161,169,182,182,0,166,182,159],
[166,175,178,171,175,0,169,173],
[149,163,144,151,159,172,0,154],
[167,157,153,170,182,168,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,193,157,156,175,168,160],
[177,0,189,167,162,163,168,153],
[148,152,0,146,156,150,160,147],
[184,174,195,0,176,177,188,167],
[185,179,185,165,0,167,175,173],
[166,178,191,164,174,0,170,169],
[173,173,181,153,166,171,0,163],
[181,188,194,174,168,172,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,170,183,161,159,178,168],
[179,0,141,169,156,159,179,170],
[171,200,0,171,167,175,161,178],
[158,172,170,0,176,162,171,166],
[180,185,174,165,0,174,166,175],
[182,182,166,179,167,0,167,170],
[163,162,180,170,175,174,0,176],
[173,171,163,175,166,171,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,166,181,156,164,174,167],
[178,0,165,183,168,181,179,165],
[175,176,0,176,158,165,152,164],
[160,158,165,0,162,145,148,166],
[185,173,183,179,0,164,173,166],
[177,160,176,196,177,0,174,180],
[167,162,189,193,168,167,0,174],
[174,176,177,175,175,161,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,172,168,159,169,169,160],
[181,0,175,174,158,178,168,166],
[169,166,0,182,163,181,168,158],
[173,167,159,0,162,172,162,169],
[182,183,178,179,0,166,173,175],
[172,163,160,169,175,0,159,159],
[172,173,173,179,168,182,0,174],
[181,175,183,172,166,182,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,182,172,174,202,199,184],
[178,0,179,138,184,192,167,178],
[159,162,0,163,170,174,180,172],
[169,203,178,0,169,191,160,160],
[167,157,171,172,0,168,179,159],
[139,149,167,150,173,0,154,145],
[142,174,161,181,162,187,0,158],
[157,163,169,181,182,196,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,182,161,188,182,164,179],
[154,0,158,127,156,161,183,163],
[159,183,0,173,186,173,174,153],
[180,214,168,0,192,165,192,188],
[153,185,155,149,0,177,179,168],
[159,180,168,176,164,0,173,177],
[177,158,167,149,162,168,0,166],
[162,178,188,153,173,164,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,218,215,164,239,203,214],
[113,0,166,166,131,179,192,189],
[123,175,0,187,173,152,180,197],
[126,175,154,0,154,184,185,208],
[177,210,168,187,0,170,193,204],
[102,162,189,157,171,0,189,185],
[138,149,161,156,148,152,0,206],
[127,152,144,133,137,156,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,173,185,175,184,185,157],
[160,0,185,181,161,218,172,181],
[168,156,0,199,129,196,190,198],
[156,160,142,0,143,213,180,136],
[166,180,212,198,0,224,193,222],
[157,123,145,128,117,0,129,168],
[156,169,151,161,148,212,0,148],
[184,160,143,205,119,173,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,141,245,132,165,124,154],
[121,0,95,176,143,186,125,123],
[200,246,0,196,86,180,212,176],
[96,165,145,0,60,155,89,106],
[209,198,255,281,0,205,172,155],
[176,155,161,186,136,0,121,126],
[217,216,129,252,169,220,0,132],
[187,218,165,235,186,215,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,172,147,85,141,157,144],
[163,0,171,145,113,170,182,142],
[169,170,0,97,116,152,173,124],
[194,196,244,0,147,175,199,141],
[256,228,225,194,0,172,253,150],
[200,171,189,166,169,0,216,175],
[184,159,168,142,88,125,0,153],
[197,199,217,200,191,166,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,175,171,176,199,170,160],
[174,0,187,160,176,193,163,155],
[166,154,0,156,155,173,151,156],
[170,181,185,0,176,193,172,166],
[165,165,186,165,0,184,169,157],
[142,148,168,148,157,0,137,147],
[171,178,190,169,172,204,0,188],
[181,186,185,175,184,194,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,164,175,161,190,170,199],
[153,0,154,163,155,163,167,159],
[177,187,0,172,179,185,170,180],
[166,178,169,0,165,165,166,201],
[180,186,162,176,0,203,191,183],
[151,178,156,176,138,0,163,172],
[171,174,171,175,150,178,0,175],
[142,182,161,140,158,169,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,173,164,155,166,175,166],
[159,0,173,168,165,169,164,176],
[168,168,0,161,163,161,167,169],
[177,173,180,0,176,166,172,180],
[186,176,178,165,0,167,171,181],
[175,172,180,175,174,0,167,177],
[166,177,174,169,170,174,0,176],
[175,165,172,161,160,164,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,192,181,172,202,194,181],
[176,0,194,174,142,204,193,156],
[149,147,0,166,156,188,188,156],
[160,167,175,0,121,201,218,131],
[169,199,185,220,0,197,218,169],
[139,137,153,140,144,0,167,144],
[147,148,153,123,123,174,0,149],
[160,185,185,210,172,197,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,169,152,166,159,160,152],
[160,0,163,158,170,150,161,157],
[172,178,0,163,166,151,175,170],
[189,183,178,0,182,171,178,166],
[175,171,175,159,0,169,155,166],
[182,191,190,170,172,0,173,188],
[181,180,166,163,186,168,0,173],
[189,184,171,175,175,153,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,164,171,166,179,182,174],
[154,0,153,163,160,168,174,165],
[177,188,0,178,167,190,191,176],
[170,178,163,0,177,177,184,175],
[175,181,174,164,0,171,187,172],
[162,173,151,164,170,0,185,170],
[159,167,150,157,154,156,0,155],
[167,176,165,166,169,171,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,198,165,167,182,163,152],
[159,0,173,155,153,154,142,135],
[143,168,0,142,149,144,151,139],
[176,186,199,0,181,179,173,163],
[174,188,192,160,0,169,182,175],
[159,187,197,162,172,0,177,167],
[178,199,190,168,159,164,0,177],
[189,206,202,178,166,174,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,144,149,195,187,180,176],
[150,0,180,137,184,152,183,171],
[197,161,0,145,202,184,196,151],
[192,204,196,0,201,166,181,166],
[146,157,139,140,0,153,173,144],
[154,189,157,175,188,0,200,180],
[161,158,145,160,168,141,0,163],
[165,170,190,175,197,161,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,183,186,160,163,160,192],
[169,0,171,179,172,157,171,186],
[158,170,0,168,164,151,175,178],
[155,162,173,0,164,150,166,165],
[181,169,177,177,0,176,176,206],
[178,184,190,191,165,0,179,206],
[181,170,166,175,165,162,0,188],
[149,155,163,176,135,135,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,172,151,157,151,146,180],
[166,0,165,149,153,154,156,182],
[169,176,0,147,155,148,153,169],
[190,192,194,0,163,184,185,196],
[184,188,186,178,0,172,170,182],
[190,187,193,157,169,0,171,178],
[195,185,188,156,171,170,0,187],
[161,159,172,145,159,163,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,165,169,178,177,180,170],
[169,0,163,167,157,175,160,179],
[176,178,0,167,175,190,176,179],
[172,174,174,0,176,186,166,178],
[163,184,166,165,0,178,176,174],
[164,166,151,155,163,0,161,159],
[161,181,165,175,165,180,0,176],
[171,162,162,163,167,182,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,187,203,200,173,213,155],
[182,0,171,213,211,193,198,160],
[154,170,0,198,188,154,194,175],
[138,128,143,0,172,140,141,164],
[141,130,153,169,0,158,177,147],
[168,148,187,201,183,0,153,190],
[128,143,147,200,164,188,0,162],
[186,181,166,177,194,151,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,151,173,170,197,159,182],
[164,0,167,172,176,191,171,191],
[190,174,0,184,178,197,170,196],
[168,169,157,0,171,188,176,169],
[171,165,163,170,0,195,178,174],
[144,150,144,153,146,0,157,159],
[182,170,171,165,163,184,0,177],
[159,150,145,172,167,182,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,152,161,172,166,175,160],
[170,0,162,172,154,176,165,159],
[189,179,0,178,166,182,184,166],
[180,169,163,0,163,172,172,159],
[169,187,175,178,0,172,171,160],
[175,165,159,169,169,0,173,171],
[166,176,157,169,170,168,0,162],
[181,182,175,182,181,170,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,176,170,172,171,152,179],
[189,0,196,189,181,160,186,186],
[165,145,0,178,182,162,169,177],
[171,152,163,0,166,134,155,174],
[169,160,159,175,0,149,170,168],
[170,181,179,207,192,0,189,197],
[189,155,172,186,171,152,0,168],
[162,155,164,167,173,144,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,148,170,126,153,131,163],
[188,0,182,188,161,185,179,186],
[193,159,0,142,137,171,152,159],
[171,153,199,0,154,163,154,154],
[215,180,204,187,0,169,160,194],
[188,156,170,178,172,0,153,171],
[210,162,189,187,181,188,0,187],
[178,155,182,187,147,170,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,169,172,156,161,185,183],
[192,0,191,193,177,170,189,187],
[172,150,0,168,167,172,200,193],
[169,148,173,0,149,164,181,162],
[185,164,174,192,0,175,201,178],
[180,171,169,177,166,0,196,167],
[156,152,141,160,140,145,0,173],
[158,154,148,179,163,174,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,162,147,198,161,176,128],
[208,0,209,114,196,152,223,177],
[179,132,0,133,185,151,182,139],
[194,227,208,0,210,164,273,197],
[143,145,156,131,0,106,210,138],
[180,189,190,177,235,0,245,160],
[165,118,159,68,131,96,0,82],
[213,164,202,144,203,181,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,159,126,118,120,124,164],
[193,0,153,158,145,133,129,142],
[182,188,0,156,123,99,110,156],
[215,183,185,0,170,156,165,194],
[223,196,218,171,0,160,181,221],
[221,208,242,185,181,0,155,218],
[217,212,231,176,160,186,0,233],
[177,199,185,147,120,123,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,174,177,162,182,164,175],
[163,0,170,162,168,175,164,177],
[167,171,0,191,182,174,175,186],
[164,179,150,0,177,181,161,176],
[179,173,159,164,0,176,159,172],
[159,166,167,160,165,0,156,167],
[177,177,166,180,182,185,0,184],
[166,164,155,165,169,174,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,166,159,170,176,187,167],
[175,0,183,163,178,177,177,166],
[175,158,0,169,173,174,170,158],
[182,178,172,0,185,170,181,155],
[171,163,168,156,0,160,169,161],
[165,164,167,171,181,0,191,190],
[154,164,171,160,172,150,0,154],
[174,175,183,186,180,151,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,62,193,0,300,131,169],
[148,0,107,174,45,238,109,107],
[279,234,0,176,176,238,238,169],
[148,167,165,0,41,300,171,210],
[341,296,165,300,0,300,238,169],
[41,103,103,41,41,0,41,103],
[210,232,103,170,103,300,0,210],
[172,234,172,131,172,238,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,167,167,168,164,163,162],
[183,0,164,162,175,174,182,173],
[174,177,0,170,167,175,171,175],
[174,179,171,0,168,181,172,161],
[173,166,174,173,0,184,175,160],
[177,167,166,160,157,0,148,153],
[178,159,170,169,166,193,0,156],
[179,168,166,180,181,188,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,185,153,106,118,87,163],
[194,0,152,157,155,115,107,162],
[156,189,0,144,148,160,82,182],
[188,184,197,0,176,136,171,166],
[235,186,193,165,0,187,161,214],
[223,226,181,205,154,0,148,176],
[254,234,259,170,180,193,0,195],
[178,179,159,175,127,165,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,205,200,177,213,173,203],
[182,0,190,204,176,173,150,213],
[136,151,0,167,157,168,145,152],
[141,137,174,0,160,163,145,151],
[164,165,184,181,0,167,178,179],
[128,168,173,178,174,0,168,184],
[168,191,196,196,163,173,0,200],
[138,128,189,190,162,157,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,165,159,129,189,143,153],
[209,0,167,146,186,171,138,168],
[176,174,0,193,157,203,173,160],
[182,195,148,0,160,163,158,193],
[212,155,184,181,0,209,147,193],
[152,170,138,178,132,0,121,171],
[198,203,168,183,194,220,0,175],
[188,173,181,148,148,170,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,167,168,171,171,173,169],
[156,0,183,161,172,165,184,171],
[174,158,0,181,174,159,171,173],
[173,180,160,0,184,174,186,178],
[170,169,167,157,0,159,166,157],
[170,176,182,167,182,0,174,176],
[168,157,170,155,175,167,0,162],
[172,170,168,163,184,165,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,171,187,174,177,169],
[163,0,164,176,184,184,170,164],
[163,177,0,175,183,180,162,163],
[170,165,166,0,174,175,161,169],
[154,157,158,167,0,172,142,170],
[167,157,161,166,169,0,162,176],
[164,171,179,180,199,179,0,179],
[172,177,178,172,171,165,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,183,192,180,162,174,172],
[167,0,178,189,181,177,161,162],
[158,163,0,170,177,157,165,149],
[149,152,171,0,160,160,165,159],
[161,160,164,181,0,175,175,164],
[179,164,184,181,166,0,170,171],
[167,180,176,176,166,171,0,158],
[169,179,192,182,177,170,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,166,174,175,183,179,173],
[181,0,164,175,185,180,183,184],
[175,177,0,167,179,175,171,183],
[167,166,174,0,173,171,172,174],
[166,156,162,168,0,178,165,173],
[158,161,166,170,163,0,166,171],
[162,158,170,169,176,175,0,181],
[168,157,158,167,168,170,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,178,181,197,180,162,217],
[144,0,149,166,139,155,156,189],
[163,192,0,188,180,200,171,190],
[160,175,153,0,137,185,152,174],
[144,202,161,204,0,164,133,198],
[161,186,141,156,177,0,164,190],
[179,185,170,189,208,177,0,203],
[124,152,151,167,143,151,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,200,184,161,212,203,179],
[144,0,189,178,148,165,155,162],
[141,152,0,180,138,173,180,142],
[157,163,161,0,162,171,164,147],
[180,193,203,179,0,185,178,150],
[129,176,168,170,156,0,175,166],
[138,186,161,177,163,166,0,164],
[162,179,199,194,191,175,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,178,161,198,180,182,159],
[188,0,158,178,210,187,191,162],
[163,183,0,209,187,197,210,159],
[180,163,132,0,214,177,194,174],
[143,131,154,127,0,157,153,143],
[161,154,144,164,184,0,158,142],
[159,150,131,147,188,183,0,156],
[182,179,182,167,198,199,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,168,172,172,162,165,178],
[175,0,181,171,167,172,191,168],
[173,160,0,160,168,173,172,169],
[169,170,181,0,176,160,179,160],
[169,174,173,165,0,153,173,155],
[179,169,168,181,188,0,182,171],
[176,150,169,162,168,159,0,155],
[163,173,172,181,186,170,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,142,151,144,176,185,170],
[195,0,175,164,164,182,190,166],
[199,166,0,182,176,201,207,183],
[190,177,159,0,169,187,181,158],
[197,177,165,172,0,193,189,160],
[165,159,140,154,148,0,172,155],
[156,151,134,160,152,169,0,137],
[171,175,158,183,181,186,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,176,166,161,158,160,164],
[176,0,175,150,161,145,170,162],
[165,166,0,165,168,166,166,169],
[175,191,176,0,169,181,175,180],
[180,180,173,172,0,161,170,174],
[183,196,175,160,180,0,182,182],
[181,171,175,166,171,159,0,173],
[177,179,172,161,167,159,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,198,172,195,190,159,166],
[179,0,148,158,140,173,190,192],
[143,193,0,176,172,233,178,176],
[169,183,165,0,162,213,184,212],
[146,201,169,179,0,186,161,207],
[151,168,108,128,155,0,141,158],
[182,151,163,157,180,200,0,184],
[175,149,165,129,134,183,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,157,158,151,170,167,156],
[138,0,141,149,135,169,157,142],
[184,200,0,196,165,183,182,175],
[183,192,145,0,165,180,162,154],
[190,206,176,176,0,172,166,164],
[171,172,158,161,169,0,167,145],
[174,184,159,179,175,174,0,152],
[185,199,166,187,177,196,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,181,177,163,171,158,165],
[167,0,177,186,179,168,161,171],
[160,164,0,161,160,159,148,175],
[164,155,180,0,163,172,154,168],
[178,162,181,178,0,178,167,181],
[170,173,182,169,163,0,159,174],
[183,180,193,187,174,182,0,162],
[176,170,166,173,160,167,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,174,162,163,164,175,162],
[167,0,185,173,163,170,168,165],
[167,156,0,171,163,157,169,155],
[179,168,170,0,159,163,174,159],
[178,178,178,182,0,169,175,167],
[177,171,184,178,172,0,170,171],
[166,173,172,167,166,171,0,164],
[179,176,186,182,174,170,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,180,177,169,176,181,146],
[173,0,173,172,167,179,183,162],
[161,168,0,144,160,178,156,157],
[164,169,197,0,169,180,170,178],
[172,174,181,172,0,167,168,173],
[165,162,163,161,174,0,158,163],
[160,158,185,171,173,183,0,164],
[195,179,184,163,168,178,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,174,188,201,185,199,164],
[152,0,170,170,171,169,176,165],
[167,171,0,177,176,162,163,162],
[153,171,164,0,177,167,180,150],
[140,170,165,164,0,158,163,182],
[156,172,179,174,183,0,173,161],
[142,165,178,161,178,168,0,179],
[177,176,179,191,159,180,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,205,175,189,173,168,169],
[151,0,173,171,205,164,173,161],
[136,168,0,160,191,169,147,135],
[166,170,181,0,202,173,185,186],
[152,136,150,139,0,148,141,142],
[168,177,172,168,193,0,172,155],
[173,168,194,156,200,169,0,178],
[172,180,206,155,199,186,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,174,161,166,155,183,165],
[176,0,181,170,185,168,188,187],
[167,160,0,167,177,159,163,169],
[180,171,174,0,181,163,169,166],
[175,156,164,160,0,158,173,161],
[186,173,182,178,183,0,164,177],
[158,153,178,172,168,177,0,180],
[176,154,172,175,180,164,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,155,152,159,171,160,157],
[166,0,166,170,168,196,174,185],
[186,175,0,182,183,175,169,184],
[189,171,159,0,172,189,164,193],
[182,173,158,169,0,168,168,159],
[170,145,166,152,173,0,149,174],
[181,167,172,177,173,192,0,185],
[184,156,157,148,182,167,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,191,185,194,196,163,182],
[162,0,171,164,181,176,159,173],
[150,170,0,170,189,176,162,166],
[156,177,171,0,180,181,176,170],
[147,160,152,161,0,168,151,153],
[145,165,165,160,173,0,157,167],
[178,182,179,165,190,184,0,173],
[159,168,175,171,188,174,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,177,170,195,181,183,189],
[167,0,160,158,180,160,165,170],
[164,181,0,178,183,188,178,179],
[171,183,163,0,183,182,180,179],
[146,161,158,158,0,171,157,177],
[160,181,153,159,170,0,178,172],
[158,176,163,161,184,163,0,174],
[152,171,162,162,164,169,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,200,145,203,184,192,164],
[139,0,182,144,151,159,152,122],
[141,159,0,155,166,160,122,121],
[196,197,186,0,182,197,169,181],
[138,190,175,159,0,175,160,141],
[157,182,181,144,166,0,140,149],
[149,189,219,172,181,201,0,172],
[177,219,220,160,200,192,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,169,177,208,192,186,176],
[150,0,144,169,193,171,180,167],
[172,197,0,150,203,164,176,175],
[164,172,191,0,191,185,194,167],
[133,148,138,150,0,149,156,135],
[149,170,177,156,192,0,177,166],
[155,161,165,147,185,164,0,176],
[165,174,166,174,206,175,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,165,155,171,173,168,156],
[160,0,186,164,167,169,175,164],
[176,155,0,154,145,177,161,154],
[186,177,187,0,152,181,183,162],
[170,174,196,189,0,186,194,175],
[168,172,164,160,155,0,169,148],
[173,166,180,158,147,172,0,157],
[185,177,187,179,166,193,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,171,172,179,173,162,175],
[177,0,176,177,185,195,159,177],
[170,165,0,178,181,184,162,174],
[169,164,163,0,185,181,171,166],
[162,156,160,156,0,171,156,163],
[168,146,157,160,170,0,158,163],
[179,182,179,170,185,183,0,166],
[166,164,167,175,178,178,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,176,162,163,170,162,177],
[166,0,164,181,159,171,173,184],
[165,177,0,173,174,170,176,176],
[179,160,168,0,158,162,171,164],
[178,182,167,183,0,166,170,175],
[171,170,171,179,175,0,177,164],
[179,168,165,170,171,164,0,161],
[164,157,165,177,166,177,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,158,155,148,140,163,174],
[205,0,202,192,170,195,169,177],
[183,139,0,185,197,148,190,174],
[186,149,156,0,170,148,182,163],
[193,171,144,171,0,163,152,167],
[201,146,193,193,178,0,183,164],
[178,172,151,159,189,158,0,176],
[167,164,167,178,174,177,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,173,163,175,160,189,177],
[181,0,163,182,182,187,171,176],
[168,178,0,169,186,167,181,169],
[178,159,172,0,170,178,177,166],
[166,159,155,171,0,170,171,158],
[181,154,174,163,171,0,170,173],
[152,170,160,164,170,171,0,158],
[164,165,172,175,183,168,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,155,164,156,163,180,180],
[188,0,155,181,175,169,193,183],
[186,186,0,206,161,184,217,203],
[177,160,135,0,171,182,187,176],
[185,166,180,170,0,179,187,193],
[178,172,157,159,162,0,187,194],
[161,148,124,154,154,154,0,155],
[161,158,138,165,148,147,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,175,185,174,184,187,185],
[182,0,187,170,176,183,196,190],
[166,154,0,163,154,171,169,160],
[156,171,178,0,151,159,170,161],
[167,165,187,190,0,180,196,168],
[157,158,170,182,161,0,170,185],
[154,145,172,171,145,171,0,157],
[156,151,181,180,173,156,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,175,164,173,155,181,165],
[176,0,167,162,159,179,187,170],
[166,174,0,176,176,155,189,163],
[177,179,165,0,167,166,183,162],
[168,182,165,174,0,158,181,151],
[186,162,186,175,183,0,180,174],
[160,154,152,158,160,161,0,152],
[176,171,178,179,190,167,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,162,173,171,165,155,151],
[190,0,191,179,174,199,170,200],
[179,150,0,181,152,175,170,170],
[168,162,160,0,178,178,157,175],
[170,167,189,163,0,187,173,184],
[176,142,166,163,154,0,178,171],
[186,171,171,184,168,163,0,156],
[190,141,171,166,157,170,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,160,149,161,169,160,179],
[190,0,191,171,174,178,173,166],
[181,150,0,138,140,146,157,157],
[192,170,203,0,182,190,181,169],
[180,167,201,159,0,173,161,166],
[172,163,195,151,168,0,166,171],
[181,168,184,160,180,175,0,157],
[162,175,184,172,175,170,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,133,149,161,158,135,157],
[144,0,120,125,163,175,154,148],
[208,221,0,182,191,191,165,191],
[192,216,159,0,178,171,170,164],
[180,178,150,163,0,165,181,183],
[183,166,150,170,176,0,152,155],
[206,187,176,171,160,189,0,186],
[184,193,150,177,158,186,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,153,158,144,151,143,145],
[186,0,184,178,160,151,164,179],
[188,157,0,152,135,124,155,153],
[183,163,189,0,159,169,145,166],
[197,181,206,182,0,165,173,175],
[190,190,217,172,176,0,179,165],
[198,177,186,196,168,162,0,171],
[196,162,188,175,166,176,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,180,168,184,168,163,176],
[189,0,192,158,186,166,167,171],
[161,149,0,164,175,164,160,170],
[173,183,177,0,170,185,182,174],
[157,155,166,171,0,167,163,163],
[173,175,177,156,174,0,172,171],
[178,174,181,159,178,169,0,171],
[165,170,171,167,178,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,159,155,166,161,186,181],
[141,0,161,162,159,164,175,181],
[182,180,0,157,165,172,193,191],
[186,179,184,0,162,180,202,185],
[175,182,176,179,0,167,186,192],
[180,177,169,161,174,0,175,177],
[155,166,148,139,155,166,0,154],
[160,160,150,156,149,164,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,195,193,163,184,183,192],
[173,0,177,181,168,156,179,169],
[146,164,0,175,150,155,175,163],
[148,160,166,0,145,155,164,161],
[178,173,191,196,0,163,170,197],
[157,185,186,186,178,0,188,177],
[158,162,166,177,171,153,0,176],
[149,172,178,180,144,164,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,162,202,151,171,212,176],
[165,0,144,178,155,179,187,171],
[179,197,0,196,174,186,196,146],
[139,163,145,0,128,139,204,133],
[190,186,167,213,0,182,193,199],
[170,162,155,202,159,0,198,162],
[129,154,145,137,148,143,0,125],
[165,170,195,208,142,179,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,195,166,202,168,180,193],
[164,0,213,167,191,180,200,171],
[146,128,0,150,154,155,156,160],
[175,174,191,0,210,198,173,166],
[139,150,187,131,0,140,169,159],
[173,161,186,143,201,0,170,163],
[161,141,185,168,172,171,0,183],
[148,170,181,175,182,178,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,168,175,167,178,178,162],
[170,0,161,170,172,182,156,167],
[173,180,0,175,172,187,168,159],
[166,171,166,0,171,170,164,151],
[174,169,169,170,0,169,161,174],
[163,159,154,171,172,0,149,175],
[163,185,173,177,180,192,0,161],
[179,174,182,190,167,166,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,181,170,180,170,175,173],
[166,0,165,165,160,145,164,167],
[160,176,0,159,170,177,170,167],
[171,176,182,0,177,171,163,170],
[161,181,171,164,0,155,175,161],
[171,196,164,170,186,0,185,178],
[166,177,171,178,166,156,0,167],
[168,174,174,171,180,163,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,174,172,173,157,168,171],
[155,0,165,162,174,167,163,182],
[167,176,0,173,167,165,168,177],
[169,179,168,0,178,163,167,162],
[168,167,174,163,0,168,165,170],
[184,174,176,178,173,0,179,166],
[173,178,173,174,176,162,0,153],
[170,159,164,179,171,175,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,198,168,174,162,178,163],
[177,0,175,174,179,168,171,156],
[143,166,0,156,163,162,160,157],
[173,167,185,0,169,165,167,179],
[167,162,178,172,0,163,151,161],
[179,173,179,176,178,0,187,165],
[163,170,181,174,190,154,0,169],
[178,185,184,162,180,176,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,187,156,199,162,186,171],
[192,0,176,189,182,166,174,171],
[154,165,0,172,169,163,158,186],
[185,152,169,0,170,158,171,147],
[142,159,172,171,0,164,165,155],
[179,175,178,183,177,0,168,181],
[155,167,183,170,176,173,0,168],
[170,170,155,194,186,160,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,185,211,155,234,204,167],
[185,0,91,159,155,214,170,173],
[156,250,0,181,175,197,176,218],
[130,182,160,0,146,207,183,146],
[186,186,166,195,0,201,189,161],
[107,127,144,134,140,0,163,169],
[137,171,165,158,152,178,0,142],
[174,168,123,195,180,172,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,164,169,161,180,153,155],
[181,0,176,192,179,165,165,169],
[177,165,0,195,189,191,185,183],
[172,149,146,0,159,167,154,167],
[180,162,152,182,0,180,167,163],
[161,176,150,174,161,0,149,173],
[188,176,156,187,174,192,0,192],
[186,172,158,174,178,168,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,86,57,110,142,31,93],
[255,0,123,156,213,197,161,125],
[255,218,0,202,239,175,165,203],
[284,185,139,0,209,145,194,206],
[231,128,102,132,0,190,151,136],
[199,144,166,196,151,0,123,180],
[310,180,176,147,190,218,0,183],
[248,216,138,135,205,161,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,151,153,159,154,146,150],
[171,0,136,155,156,167,154,148],
[190,205,0,190,183,181,170,177],
[188,186,151,0,168,169,155,170],
[182,185,158,173,0,173,180,182],
[187,174,160,172,168,0,156,161],
[195,187,171,186,161,185,0,183],
[191,193,164,171,159,180,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,186,191,187,174,154,197],
[168,0,149,177,157,161,162,183],
[155,192,0,189,198,154,166,187],
[150,164,152,0,172,144,145,181],
[154,184,143,169,0,158,156,182],
[167,180,187,197,183,0,171,208],
[187,179,175,196,185,170,0,212],
[144,158,154,160,159,133,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,168,164,152,157,140,165],
[194,0,175,179,173,172,176,165],
[173,166,0,175,179,180,170,168],
[177,162,166,0,182,181,170,172],
[189,168,162,159,0,170,164,174],
[184,169,161,160,171,0,169,169],
[201,165,171,171,177,172,0,170],
[176,176,173,169,167,172,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,160,169,172,181,186,163],
[162,0,165,159,167,180,170,162],
[181,176,0,180,167,159,181,168],
[172,182,161,0,161,184,174,160],
[169,174,174,180,0,190,179,176],
[160,161,182,157,151,0,164,168],
[155,171,160,167,162,177,0,168],
[178,179,173,181,165,173,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,174,180,180,184,178,183],
[174,0,173,178,180,169,171,164],
[167,168,0,179,171,170,174,171],
[161,163,162,0,162,154,164,168],
[161,161,170,179,0,167,172,175],
[157,172,171,187,174,0,170,172],
[163,170,167,177,169,171,0,171],
[158,177,170,173,166,169,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,186,194,157,177,172,186],
[171,0,172,175,152,153,168,163],
[155,169,0,196,161,178,170,157],
[147,166,145,0,157,159,155,151],
[184,189,180,184,0,168,175,177],
[164,188,163,182,173,0,182,165],
[169,173,171,186,166,159,0,155],
[155,178,184,190,164,176,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,176,162,171,213,172,180],
[186,0,193,170,201,184,169,197],
[165,148,0,194,201,199,183,210],
[179,171,147,0,195,182,152,210],
[170,140,140,146,0,188,145,210],
[128,157,142,159,153,0,144,171],
[169,172,158,189,196,197,0,238],
[161,144,131,131,131,170,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,165,152,164,175,186,166],
[162,0,167,169,172,181,172,167],
[176,174,0,169,157,179,170,162],
[189,172,172,0,165,177,179,173],
[177,169,184,176,0,177,165,160],
[166,160,162,164,164,0,179,160],
[155,169,171,162,176,162,0,165],
[175,174,179,168,181,181,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,139,139,170,132,166,125],
[184,0,155,204,221,165,183,145],
[202,186,0,216,205,192,219,142],
[202,137,125,0,185,169,208,200],
[171,120,136,156,0,131,174,159],
[209,176,149,172,210,0,205,183],
[175,158,122,133,167,136,0,178],
[216,196,199,141,182,158,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,152,161,157,158,160,177],
[178,0,166,165,175,169,161,191],
[189,175,0,171,161,171,174,181],
[180,176,170,0,174,182,172,193],
[184,166,180,167,0,160,171,185],
[183,172,170,159,181,0,173,186],
[181,180,167,169,170,168,0,183],
[164,150,160,148,156,155,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,159,186,157,167,183,173],
[170,0,165,178,162,181,185,173],
[182,176,0,180,169,162,182,179],
[155,163,161,0,173,166,179,162],
[184,179,172,168,0,181,190,168],
[174,160,179,175,160,0,188,171],
[158,156,159,162,151,153,0,169],
[168,168,162,179,173,170,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,138,152,197,174,199,194],
[161,0,181,180,180,171,193,224],
[203,160,0,160,179,181,185,200],
[189,161,181,0,199,186,197,224],
[144,161,162,142,0,118,163,154],
[167,170,160,155,223,0,207,214],
[142,148,156,144,178,134,0,179],
[147,117,141,117,187,127,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,167,181,214,181,195,185],
[157,0,168,188,195,189,182,143],
[174,173,0,168,197,177,185,155],
[160,153,173,0,187,173,176,154],
[127,146,144,154,0,149,172,142],
[160,152,164,168,192,0,163,138],
[146,159,156,165,169,178,0,150],
[156,198,186,187,199,203,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,187,171,196,170,155,169],
[173,0,176,171,188,170,163,184],
[154,165,0,182,179,186,163,163],
[170,170,159,0,194,193,171,175],
[145,153,162,147,0,150,135,160],
[171,171,155,148,191,0,161,177],
[186,178,178,170,206,180,0,185],
[172,157,178,166,181,164,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,180,170,177,170,159,180],
[171,0,180,200,158,188,173,197],
[161,161,0,171,186,171,171,160],
[171,141,170,0,169,172,151,173],
[164,183,155,172,0,156,179,195],
[171,153,170,169,185,0,160,189],
[182,168,170,190,162,181,0,181],
[161,144,181,168,146,152,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,170,169,172,167,173,156],
[173,0,178,156,163,164,168,163],
[171,163,0,169,172,179,174,183],
[172,185,172,0,185,170,186,160],
[169,178,169,156,0,166,183,170],
[174,177,162,171,175,0,169,176],
[168,173,167,155,158,172,0,161],
[185,178,158,181,171,165,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,179,155,155,169,157,162],
[174,0,184,159,182,175,171,185],
[162,157,0,140,161,175,156,165],
[186,182,201,0,191,173,181,166],
[186,159,180,150,0,179,172,155],
[172,166,166,168,162,0,157,174],
[184,170,185,160,169,184,0,166],
[179,156,176,175,186,167,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,167,161,161,163,172,152],
[172,0,164,151,170,170,176,160],
[174,177,0,175,169,168,171,166],
[180,190,166,0,173,175,176,172],
[180,171,172,168,0,166,169,153],
[178,171,173,166,175,0,159,165],
[169,165,170,165,172,182,0,166],
[189,181,175,169,188,176,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,163,156,163,163,161,164],
[179,0,167,154,176,155,167,161],
[178,174,0,166,163,154,164,147],
[185,187,175,0,167,172,171,165],
[178,165,178,174,0,172,174,173],
[178,186,187,169,169,0,170,168],
[180,174,177,170,167,171,0,154],
[177,180,194,176,168,173,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,175,173,179,166,157,180],
[169,0,172,170,172,175,173,174],
[166,169,0,167,188,159,177,166],
[168,171,174,0,180,155,168,169],
[162,169,153,161,0,155,166,163],
[175,166,182,186,186,0,178,167],
[184,168,164,173,175,163,0,169],
[161,167,175,172,178,174,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,160,166,161,157,151,177],
[170,0,178,166,160,158,152,171],
[181,163,0,168,161,159,156,174],
[175,175,173,0,178,161,169,190],
[180,181,180,163,0,173,177,189],
[184,183,182,180,168,0,154,185],
[190,189,185,172,164,187,0,189],
[164,170,167,151,152,156,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,174,149,181,179,185,195],
[148,0,135,168,158,166,168,169],
[167,206,0,178,180,170,178,184],
[192,173,163,0,165,190,157,194],
[160,183,161,176,0,183,191,208],
[162,175,171,151,158,0,211,176],
[156,173,163,184,150,130,0,173],
[146,172,157,147,133,165,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,160,139,153,153,150,164],
[196,0,168,160,169,196,163,167],
[181,173,0,140,163,175,153,155],
[202,181,201,0,170,188,186,179],
[188,172,178,171,0,173,164,175],
[188,145,166,153,168,0,164,149],
[191,178,188,155,177,177,0,181],
[177,174,186,162,166,192,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,164,147,153,148,168,156],
[188,0,187,185,173,164,194,180],
[177,154,0,184,161,147,179,162],
[194,156,157,0,159,160,167,160],
[188,168,180,182,0,185,183,173],
[193,177,194,181,156,0,194,168],
[173,147,162,174,158,147,0,150],
[185,161,179,181,168,173,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,165,165,161,165,162,182],
[167,0,164,167,171,174,172,168],
[176,177,0,181,164,187,178,187],
[176,174,160,0,175,181,167,173],
[180,170,177,166,0,168,169,173],
[176,167,154,160,173,0,163,180],
[179,169,163,174,172,178,0,179],
[159,173,154,168,168,161,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,164,149,207,147,146,159],
[149,0,157,150,156,152,117,175],
[177,184,0,151,187,201,156,164],
[192,191,190,0,206,192,187,139],
[134,185,154,135,0,154,124,139],
[194,189,140,149,187,0,140,176],
[195,224,185,154,217,201,0,186],
[182,166,177,202,202,165,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,159,155,158,172,169,165],
[170,0,178,172,174,176,164,176],
[182,163,0,167,167,185,159,173],
[186,169,174,0,149,167,162,159],
[183,167,174,192,0,177,182,182],
[169,165,156,174,164,0,164,179],
[172,177,182,179,159,177,0,195],
[176,165,168,182,159,162,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,195,213,198,195,162,180],
[135,0,164,139,144,175,141,179],
[146,177,0,142,181,188,118,181],
[128,202,199,0,171,208,143,213],
[143,197,160,170,0,233,180,180],
[146,166,153,133,108,0,170,153],
[179,200,223,198,161,171,0,185],
[161,162,160,128,161,188,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,116,129,83,99,94,112],
[193,0,143,158,102,130,163,142],
[225,198,0,200,147,181,214,155],
[212,183,141,0,187,197,180,159],
[258,239,194,154,0,214,211,208],
[242,211,160,144,127,0,129,150],
[247,178,127,161,130,212,0,141],
[229,199,186,182,133,191,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,177,173,170,158,163,149],
[178,0,201,172,173,163,188,167],
[164,140,0,162,166,149,161,161],
[168,169,179,0,163,157,181,161],
[171,168,175,178,0,176,184,171],
[183,178,192,184,165,0,178,163],
[178,153,180,160,157,163,0,146],
[192,174,180,180,170,178,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,167,144,184,152,164,174],
[181,0,177,154,175,181,180,169],
[174,164,0,160,172,156,184,177],
[197,187,181,0,184,169,192,200],
[157,166,169,157,0,157,154,177],
[189,160,185,172,184,0,167,185],
[177,161,157,149,187,174,0,174],
[167,172,164,141,164,156,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,184,178,177,185,185,167],
[161,0,190,194,165,168,177,166],
[157,151,0,165,154,173,161,143],
[163,147,176,0,169,183,157,163],
[164,176,187,172,0,180,175,173],
[156,173,168,158,161,0,161,159],
[156,164,180,184,166,180,0,144],
[174,175,198,178,168,182,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,167,169,138,168,189,169],
[194,0,162,196,172,226,177,192],
[174,179,0,199,134,165,179,176],
[172,145,142,0,146,204,163,177],
[203,169,207,195,0,217,187,184],
[173,115,176,137,124,0,154,168],
[152,164,162,178,154,187,0,205],
[172,149,165,164,157,173,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,98,146,170,104,138,198],
[227,0,156,185,215,203,182,200],
[243,185,0,162,203,202,178,214],
[195,156,179,0,175,190,153,203],
[171,126,138,166,0,133,153,196],
[237,138,139,151,208,0,187,187],
[203,159,163,188,188,154,0,194],
[143,141,127,138,145,154,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,162,169,167,180,180,175],
[168,0,171,191,176,181,179,176],
[179,170,0,179,186,170,171,183],
[172,150,162,0,159,173,162,168],
[174,165,155,182,0,173,173,182],
[161,160,171,168,168,0,170,170],
[161,162,170,179,168,171,0,183],
[166,165,158,173,159,171,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,176,166,180,143,140,138],
[166,0,173,182,170,154,158,180],
[165,168,0,180,159,161,174,156],
[175,159,161,0,184,154,156,154],
[161,171,182,157,0,144,146,135],
[198,187,180,187,197,0,172,141],
[201,183,167,185,195,169,0,167],
[203,161,185,187,206,200,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,186,193,166,165,182,186],
[132,0,158,174,146,141,153,156],
[155,183,0,180,173,166,162,181],
[148,167,161,0,155,136,161,162],
[175,195,168,186,0,171,174,172],
[176,200,175,205,170,0,176,193],
[159,188,179,180,167,165,0,174],
[155,185,160,179,169,148,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,184,164,167,163,148,141],
[187,0,176,159,187,153,138,157],
[157,165,0,165,161,175,171,182],
[177,182,176,0,167,171,138,160],
[174,154,180,174,0,180,158,176],
[178,188,166,170,161,0,147,166],
[193,203,170,203,183,194,0,185],
[200,184,159,181,165,175,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,169,163,161,179,173,171],
[186,0,177,194,193,167,188,189],
[172,164,0,167,168,172,167,165],
[178,147,174,0,177,177,171,174],
[180,148,173,164,0,181,166,195],
[162,174,169,164,160,0,169,155],
[168,153,174,170,175,172,0,185],
[170,152,176,167,146,186,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,212,341,53,53,182,341],
[288,0,288,288,159,129,288,288],
[129,53,0,182,0,182,129,129],
[0,53,159,0,0,0,0,129],
[288,182,341,341,0,182,129,288],
[288,212,159,341,159,0,288,288],
[159,53,212,341,212,53,0,341],
[0,53,212,212,53,53,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,151,148,164,160,168,165],
[179,0,168,165,161,167,173,164],
[190,173,0,164,162,167,180,172],
[193,176,177,0,172,188,187,165],
[177,180,179,169,0,161,192,184],
[181,174,174,153,180,0,180,167],
[173,168,161,154,149,161,0,169],
[176,177,169,176,157,174,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,178,173,181,175,174,161],
[168,0,173,157,169,161,159,166],
[163,168,0,172,162,161,146,156],
[168,184,169,0,176,162,136,174],
[160,172,179,165,0,159,167,159],
[166,180,180,179,182,0,166,170],
[167,182,195,205,174,175,0,178],
[180,175,185,167,182,171,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,163,163,180,179,173,170],
[175,0,182,167,165,157,174,185],
[178,159,0,162,168,157,166,167],
[178,174,179,0,182,165,169,178],
[161,176,173,159,0,167,151,160],
[162,184,184,176,174,0,176,180],
[168,167,175,172,190,165,0,173],
[171,156,174,163,181,161,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,162,170,166,162,188,182],
[182,0,175,178,169,171,186,183],
[179,166,0,157,165,171,177,187],
[171,163,184,0,172,173,179,188],
[175,172,176,169,0,173,195,192],
[179,170,170,168,168,0,192,181],
[153,155,164,162,146,149,0,165],
[159,158,154,153,149,160,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,165,174,175,167,184,161],
[180,0,170,177,171,170,194,165],
[176,171,0,199,177,167,195,172],
[167,164,142,0,166,163,177,165],
[166,170,164,175,0,174,179,177],
[174,171,174,178,167,0,191,161],
[157,147,146,164,162,150,0,171],
[180,176,169,176,164,180,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,180,164,164,174,175,176],
[158,0,185,170,175,171,165,162],
[161,156,0,159,162,165,149,173],
[177,171,182,0,163,162,171,177],
[177,166,179,178,0,171,159,171],
[167,170,176,179,170,0,171,181],
[166,176,192,170,182,170,0,186],
[165,179,168,164,170,160,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,151,163,156,165,163,143],
[149,0,159,140,123,130,160,149],
[190,182,0,173,172,161,136,132],
[178,201,168,0,157,141,168,157],
[185,218,169,184,0,149,178,175],
[176,211,180,200,192,0,167,168],
[178,181,205,173,163,174,0,158],
[198,192,209,184,166,173,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,175,171,179,166,181,166],
[158,0,171,160,187,179,164,164],
[166,170,0,151,182,186,171,167],
[170,181,190,0,197,186,189,180],
[162,154,159,144,0,177,165,158],
[175,162,155,155,164,0,175,150],
[160,177,170,152,176,166,0,156],
[175,177,174,161,183,191,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,130,152,143,147,132,142],
[170,0,153,160,154,154,155,154],
[211,188,0,170,162,200,176,174],
[189,181,171,0,165,163,157,171],
[198,187,179,176,0,166,161,172],
[194,187,141,178,175,0,158,166],
[209,186,165,184,180,183,0,186],
[199,187,167,170,169,175,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,206,174,149,180,164,187],
[150,0,156,192,177,186,161,185],
[135,185,0,183,160,188,183,196],
[167,149,158,0,157,184,156,162],
[192,164,181,184,0,210,188,207],
[161,155,153,157,131,0,137,154],
[177,180,158,185,153,204,0,172],
[154,156,145,179,134,187,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,157,156,167,159,181,165],
[174,0,171,177,165,172,176,176],
[184,170,0,168,182,179,190,189],
[185,164,173,0,179,177,178,188],
[174,176,159,162,0,167,177,166],
[182,169,162,164,174,0,183,181],
[160,165,151,163,164,158,0,163],
[176,165,152,153,175,160,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,151,149,203,125,166,133],
[140,0,112,92,191,110,133,126],
[190,229,0,124,250,104,193,150],
[192,249,217,0,270,196,221,158],
[138,150,91,71,0,133,130,81],
[216,231,237,145,208,0,242,207],
[175,208,148,120,211,99,0,116],
[208,215,191,183,260,134,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,169,174,174,159,160,167],
[173,0,176,178,173,161,167,176],
[172,165,0,176,167,148,160,167],
[167,163,165,0,162,158,162,159],
[167,168,174,179,0,161,159,174],
[182,180,193,183,180,0,165,181],
[181,174,181,179,182,176,0,166],
[174,165,174,182,167,160,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,196,169,185,185,160,179],
[165,0,176,138,200,155,180,165],
[145,165,0,135,169,174,162,153],
[172,203,206,0,185,182,161,181],
[156,141,172,156,0,158,173,147],
[156,186,167,159,183,0,134,178],
[181,161,179,180,168,207,0,158],
[162,176,188,160,194,163,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,148,172,166,169,154,153],
[172,0,162,176,173,155,154,154],
[193,179,0,192,176,175,181,167],
[169,165,149,0,161,153,155,154],
[175,168,165,180,0,157,158,169],
[172,186,166,188,184,0,180,173],
[187,187,160,186,183,161,0,167],
[188,187,174,187,172,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,148,161,141,189,173,140],
[179,0,175,180,187,196,174,151],
[193,166,0,208,188,192,204,173],
[180,161,133,0,159,195,168,160],
[200,154,153,182,0,225,185,165],
[152,145,149,146,116,0,155,128],
[168,167,137,173,156,186,0,161],
[201,190,168,181,176,213,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,174,164,164,163,177,172],
[181,0,183,169,178,173,178,169],
[167,158,0,158,161,155,159,141],
[177,172,183,0,171,170,179,162],
[177,163,180,170,0,163,171,157],
[178,168,186,171,178,0,180,167],
[164,163,182,162,170,161,0,156],
[169,172,200,179,184,174,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,153,179,203,185,173,178],
[166,0,184,189,190,197,161,187],
[188,157,0,179,142,177,162,168],
[162,152,162,0,154,165,168,167],
[138,151,199,187,0,201,151,171],
[156,144,164,176,140,0,172,173],
[168,180,179,173,190,169,0,198],
[163,154,173,174,170,168,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,142,180,133,101,133,166],
[227,0,159,180,200,188,156,120],
[199,182,0,169,225,199,191,185],
[161,161,172,0,183,89,81,94],
[208,141,116,158,0,104,51,104],
[240,153,142,252,237,0,159,141],
[208,185,150,260,290,182,0,160],
[175,221,156,247,237,200,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,165,146,147,159,157,144],
[173,0,184,175,168,171,173,159],
[176,157,0,173,155,168,171,157],
[195,166,168,0,150,187,175,159],
[194,173,186,191,0,160,177,171],
[182,170,173,154,181,0,145,169],
[184,168,170,166,164,196,0,148],
[197,182,184,182,170,172,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,195,203,171,182,159,197],
[163,0,158,189,174,187,154,175],
[146,183,0,169,168,173,158,179],
[138,152,172,0,148,169,170,162],
[170,167,173,193,0,164,162,181],
[159,154,168,172,177,0,177,168],
[182,187,183,171,179,164,0,197],
[144,166,162,179,160,173,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,161,175,194,160,177,191],
[178,0,172,153,183,157,181,188],
[180,169,0,186,198,181,175,184],
[166,188,155,0,184,190,176,177],
[147,158,143,157,0,165,163,164],
[181,184,160,151,176,0,174,166],
[164,160,166,165,178,167,0,168],
[150,153,157,164,177,175,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,180,233,157,132,107,155],
[196,0,163,212,157,156,132,163],
[161,178,0,235,165,155,163,180],
[108,129,106,0,109,103,102,144],
[184,184,176,232,0,172,169,183],
[209,185,186,238,169,0,186,203],
[234,209,178,239,172,155,0,178],
[186,178,161,197,158,138,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,180,187,179,196,180,193],
[175,0,166,180,152,197,177,174],
[161,175,0,181,174,201,184,179],
[154,161,160,0,152,199,188,171],
[162,189,167,189,0,169,193,168],
[145,144,140,142,172,0,177,153],
[161,164,157,153,148,164,0,136],
[148,167,162,170,173,188,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,164,163,173,130,153,172],
[174,0,165,157,168,152,155,161],
[177,176,0,181,163,174,172,176],
[178,184,160,0,172,144,154,162],
[168,173,178,169,0,147,157,133],
[211,189,167,197,194,0,182,189],
[188,186,169,187,184,159,0,183],
[169,180,165,179,208,152,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,177,176,170,185,185,192],
[158,0,170,178,167,167,171,172],
[164,171,0,176,165,157,175,176],
[165,163,165,0,169,172,179,173],
[171,174,176,172,0,168,186,173],
[156,174,184,169,173,0,187,188],
[156,170,166,162,155,154,0,180],
[149,169,165,168,168,153,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,153,167,146,159,159,177],
[188,0,186,166,174,196,179,188],
[188,155,0,155,160,173,173,157],
[174,175,186,0,167,193,186,184],
[195,167,181,174,0,185,179,168],
[182,145,168,148,156,0,164,175],
[182,162,168,155,162,177,0,175],
[164,153,184,157,173,166,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,182,179,193,201,185,155],
[164,0,183,183,192,188,180,159],
[159,158,0,163,174,182,152,150],
[162,158,178,0,174,189,182,185],
[148,149,167,167,0,158,154,171],
[140,153,159,152,183,0,143,146],
[156,161,189,159,187,198,0,157],
[186,182,191,156,170,195,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,153,169,153,157,158,143],
[164,0,174,174,164,159,170,157],
[188,167,0,158,169,141,173,157],
[172,167,183,0,158,168,194,171],
[188,177,172,183,0,181,187,165],
[184,182,200,173,160,0,182,173],
[183,171,168,147,154,159,0,143],
[198,184,184,170,176,168,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,158,174,164,162,171,166],
[164,0,155,170,175,178,174,154],
[183,186,0,183,181,181,184,170],
[167,171,158,0,191,193,175,154],
[177,166,160,150,0,178,172,161],
[179,163,160,148,163,0,161,169],
[170,167,157,166,169,180,0,173],
[175,187,171,187,180,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,162,168,173,172,176,165],
[165,0,175,172,161,166,174,163],
[179,166,0,179,157,167,174,176],
[173,169,162,0,168,166,167,163],
[168,180,184,173,0,187,179,187],
[169,175,174,175,154,0,172,170],
[165,167,167,174,162,169,0,169],
[176,178,165,178,154,171,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,179,195,187,189,191,193],
[172,0,180,186,172,187,167,198],
[162,161,0,182,162,166,142,172],
[146,155,159,0,144,162,157,171],
[154,169,179,197,0,192,167,182],
[152,154,175,179,149,0,154,189],
[150,174,199,184,174,187,0,205],
[148,143,169,170,159,152,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,130,131,225,180,82,187],
[166,0,142,149,179,168,120,161],
[211,199,0,158,187,218,183,181],
[210,192,183,0,172,176,157,199],
[116,162,154,169,0,188,149,212],
[161,173,123,165,153,0,78,206],
[259,221,158,184,192,263,0,226],
[154,180,160,142,129,135,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,177,159,167,171,178,157],
[190,0,178,170,188,207,195,165],
[164,163,0,136,150,174,161,140],
[182,171,205,0,189,205,201,159],
[174,153,191,152,0,152,167,175],
[170,134,167,136,189,0,163,171],
[163,146,180,140,174,178,0,155],
[184,176,201,182,166,170,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,164,162,191,171,167,162],
[173,0,169,164,193,172,187,173],
[177,172,0,160,190,161,175,170],
[179,177,181,0,193,171,163,148],
[150,148,151,148,0,148,153,143],
[170,169,180,170,193,0,166,169],
[174,154,166,178,188,175,0,153],
[179,168,171,193,198,172,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,169,182,167,174,216,164],
[166,0,147,159,175,143,181,146],
[172,194,0,170,191,174,186,168],
[159,182,171,0,153,159,170,168],
[174,166,150,188,0,181,200,178],
[167,198,167,182,160,0,191,149],
[125,160,155,171,141,150,0,142],
[177,195,173,173,163,192,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,159,173,190,186,162,187],
[174,0,178,169,187,207,174,188],
[182,163,0,177,177,170,181,180],
[168,172,164,0,184,184,168,195],
[151,154,164,157,0,190,163,168],
[155,134,171,157,151,0,152,165],
[179,167,160,173,178,189,0,175],
[154,153,161,146,173,176,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,178,201,176,175,172,161],
[169,0,170,195,155,182,177,183],
[163,171,0,179,178,170,195,188],
[140,146,162,0,156,162,173,160],
[165,186,163,185,0,180,170,174],
[166,159,171,179,161,0,172,184],
[169,164,146,168,171,169,0,167],
[180,158,153,181,167,157,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,191,183,168,143,150,167],
[154,0,173,175,163,174,158,158],
[150,168,0,173,180,178,166,181],
[158,166,168,0,126,147,149,126],
[173,178,161,215,0,188,179,168],
[198,167,163,194,153,0,156,177],
[191,183,175,192,162,185,0,162],
[174,183,160,215,173,164,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,181,184,179,152,156,181],
[162,0,167,152,162,157,146,157],
[160,174,0,175,190,159,172,170],
[157,189,166,0,182,159,163,166],
[162,179,151,159,0,156,150,163],
[189,184,182,182,185,0,172,161],
[185,195,169,178,191,169,0,184],
[160,184,171,175,178,180,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,167,164,180,183,183,180],
[153,0,176,163,172,173,161,171],
[174,165,0,152,187,196,157,202],
[177,178,189,0,163,177,183,199],
[161,169,154,178,0,181,171,145],
[158,168,145,164,160,0,181,162],
[158,180,184,158,170,160,0,162],
[161,170,139,142,196,179,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,169,162,164,142,178,153],
[184,0,188,189,175,177,188,167],
[172,153,0,165,156,165,182,162],
[179,152,176,0,155,173,174,169],
[177,166,185,186,0,185,190,182],
[199,164,176,168,156,0,191,173],
[163,153,159,167,151,150,0,169],
[188,174,179,172,159,168,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,171,184,180,170,191,182],
[152,0,151,188,182,172,174,160],
[170,190,0,191,181,173,190,194],
[157,153,150,0,149,173,165,145],
[161,159,160,192,0,163,184,182],
[171,169,168,168,178,0,178,169],
[150,167,151,176,157,163,0,171],
[159,181,147,196,159,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,171,161,161,155,172,159],
[180,0,177,174,185,170,181,179],
[170,164,0,177,174,163,184,184],
[180,167,164,0,174,175,191,161],
[180,156,167,167,0,158,185,176],
[186,171,178,166,183,0,177,169],
[169,160,157,150,156,164,0,150],
[182,162,157,180,165,172,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,132,155,167,147,137,197],
[163,0,167,200,138,163,166,171],
[209,174,0,168,168,159,167,196],
[186,141,173,0,137,161,176,147],
[174,203,173,204,0,174,157,214],
[194,178,182,180,167,0,163,156],
[204,175,174,165,184,178,0,194],
[144,170,145,194,127,185,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,153,165,132,160,149,146],
[184,0,162,151,144,170,149,153],
[188,179,0,146,156,170,173,163],
[176,190,195,0,180,170,167,173],
[209,197,185,161,0,200,168,175],
[181,171,171,171,141,0,152,165],
[192,192,168,174,173,189,0,178],
[195,188,178,168,166,176,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,149,163,156,154,160],
[182,0,180,167,176,156,167,164],
[178,161,0,174,169,161,166,163],
[192,174,167,0,165,169,171,163],
[178,165,172,176,0,160,160,162],
[185,185,180,172,181,0,169,173],
[187,174,175,170,181,172,0,173],
[181,177,178,178,179,168,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,178,236,141,192,171,164],
[132,0,188,217,98,206,151,150],
[163,153,0,163,119,184,98,167],
[105,124,178,0,53,162,65,125],
[200,243,222,288,0,222,208,161],
[149,135,157,179,119,0,68,151],
[170,190,243,276,133,273,0,253],
[177,191,174,216,180,190,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,159,158,154,157,151,162],
[179,0,131,167,163,158,142,179],
[182,210,0,168,181,174,166,194],
[183,174,173,0,193,163,175,181],
[187,178,160,148,0,144,184,169],
[184,183,167,178,197,0,180,185],
[190,199,175,166,157,161,0,152],
[179,162,147,160,172,156,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,174,177,171,161,163,179],
[172,0,167,166,165,150,163,187],
[167,174,0,183,164,150,165,174],
[164,175,158,0,160,143,168,170],
[170,176,177,181,0,175,178,193],
[180,191,191,198,166,0,170,199],
[178,178,176,173,163,171,0,185],
[162,154,167,171,148,142,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,218,157,198,148,193,129],
[172,0,180,152,206,159,190,179],
[123,161,0,156,205,113,180,167],
[184,189,185,0,203,173,204,164],
[143,135,136,138,0,131,173,127],
[193,182,228,168,210,0,225,172],
[148,151,161,137,168,116,0,103],
[212,162,174,177,214,169,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,153,169,164,159,190,194],
[190,0,177,179,167,170,191,191],
[188,164,0,186,194,189,192,208],
[172,162,155,0,181,169,186,180],
[177,174,147,160,0,156,173,203],
[182,171,152,172,185,0,199,173],
[151,150,149,155,168,142,0,165],
[147,150,133,161,138,168,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,150,169,176,169,149,165],
[168,0,164,193,170,193,165,180],
[191,177,0,168,197,199,179,184],
[172,148,173,0,171,169,158,174],
[165,171,144,170,0,177,167,158],
[172,148,142,172,164,0,159,183],
[192,176,162,183,174,182,0,185],
[176,161,157,167,183,158,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,162,172,170,174,170,164],
[176,0,153,156,171,138,183,153],
[179,188,0,165,175,187,191,175],
[169,185,176,0,180,167,180,169],
[171,170,166,161,0,161,174,161],
[167,203,154,174,180,0,170,183],
[171,158,150,161,167,171,0,151],
[177,188,166,172,180,158,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,163,181,177,174,166,170],
[164,0,159,154,167,163,160,169],
[178,182,0,169,170,178,180,172],
[160,187,172,0,189,178,188,166],
[164,174,171,152,0,172,172,165],
[167,178,163,163,169,0,189,161],
[175,181,161,153,169,152,0,153],
[171,172,169,175,176,180,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,174,174,164,185,158,164],
[140,0,170,143,155,177,157,171],
[167,171,0,134,186,178,178,157],
[167,198,207,0,175,187,180,153],
[177,186,155,166,0,196,171,170],
[156,164,163,154,145,0,163,167],
[183,184,163,161,170,178,0,196],
[177,170,184,188,171,174,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,162,172,182,168,151,174],
[172,0,188,186,180,179,171,162],
[179,153,0,172,181,175,176,173],
[169,155,169,0,164,138,174,137],
[159,161,160,177,0,184,165,164],
[173,162,166,203,157,0,186,156],
[190,170,165,167,176,155,0,183],
[167,179,168,204,177,185,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,209,116,151,116,174,151],
[124,0,168,116,55,159,176,92],
[132,173,0,150,107,164,101,119],
[225,225,191,0,214,204,136,150],
[190,286,234,127,0,242,228,263],
[225,182,177,137,99,0,93,35],
[167,165,240,205,113,248,0,113],
[190,249,222,191,78,306,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,147,170,162,151,161,163],
[189,0,174,188,165,170,172,166],
[194,167,0,179,194,177,171,176],
[171,153,162,0,162,148,169,169],
[179,176,147,179,0,175,169,171],
[190,171,164,193,166,0,174,178],
[180,169,170,172,172,167,0,167],
[178,175,165,172,170,163,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,181,177,165,186,187,168],
[165,0,176,181,176,174,192,171],
[160,165,0,178,169,170,182,154],
[164,160,163,0,171,165,182,165],
[176,165,172,170,0,170,201,185],
[155,167,171,176,171,0,183,163],
[154,149,159,159,140,158,0,152],
[173,170,187,176,156,178,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,177,164,157,167,166,179],
[180,0,165,166,171,157,171,185],
[164,176,0,152,149,152,161,175],
[177,175,189,0,170,180,167,188],
[184,170,192,171,0,183,178,193],
[174,184,189,161,158,0,175,182],
[175,170,180,174,163,166,0,175],
[162,156,166,153,148,159,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,202,174,172,173,176,163],
[190,0,210,193,204,170,214,180],
[139,131,0,158,129,181,167,135],
[167,148,183,0,161,185,164,145],
[169,137,212,180,0,189,169,150],
[168,171,160,156,152,0,172,154],
[165,127,174,177,172,169,0,155],
[178,161,206,196,191,187,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,184,186,173,168,177,177],
[165,0,171,177,178,177,174,169],
[157,170,0,179,159,180,175,156],
[155,164,162,0,169,181,168,166],
[168,163,182,172,0,177,185,171],
[173,164,161,160,164,0,168,171],
[164,167,166,173,156,173,0,164],
[164,172,185,175,170,170,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,188,165,157,200,183,174],
[173,0,167,161,139,191,167,159],
[153,174,0,160,143,197,185,169],
[176,180,181,0,177,187,197,169],
[184,202,198,164,0,190,193,181],
[141,150,144,154,151,0,166,142],
[158,174,156,144,148,175,0,138],
[167,182,172,172,160,199,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,158,158,171,170,163,198],
[191,0,177,180,183,181,170,195],
[183,164,0,176,171,154,191,171],
[183,161,165,0,181,173,191,178],
[170,158,170,160,0,150,185,157],
[171,160,187,168,191,0,191,179],
[178,171,150,150,156,150,0,150],
[143,146,170,163,184,162,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,162,160,171,150,160,152],
[184,0,180,188,186,172,172,167],
[179,161,0,174,182,158,181,170],
[181,153,167,0,176,170,148,167],
[170,155,159,165,0,150,150,144],
[191,169,183,171,191,0,180,183],
[181,169,160,193,191,161,0,169],
[189,174,171,174,197,158,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,196,176,207,192,163,186],
[116,0,149,169,165,168,160,137],
[145,192,0,166,195,169,190,182],
[165,172,175,0,167,172,187,138],
[134,176,146,174,0,145,152,176],
[149,173,172,169,196,0,219,188],
[178,181,151,154,189,122,0,172],
[155,204,159,203,165,153,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,159,163,172,162,158,167],
[173,0,177,157,169,163,157,163],
[182,164,0,159,168,161,162,162],
[178,184,182,0,187,155,182,177],
[169,172,173,154,0,176,171,180],
[179,178,180,186,165,0,179,174],
[183,184,179,159,170,162,0,178],
[174,178,179,164,161,167,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,159,175,154,158,159,159],
[177,0,168,172,160,156,172,171],
[182,173,0,178,165,164,181,166],
[166,169,163,0,171,164,167,166],
[187,181,176,170,0,180,172,180],
[183,185,177,177,161,0,181,181],
[182,169,160,174,169,160,0,173],
[182,170,175,175,161,160,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,191,166,200,163,169,163],
[161,0,157,158,158,174,164,157],
[150,184,0,161,189,151,144,158],
[175,183,180,0,160,160,164,186],
[141,183,152,181,0,145,134,138],
[178,167,190,181,196,0,178,167],
[172,177,197,177,207,163,0,149],
[178,184,183,155,203,174,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,176,174,171,169,180,176],
[175,0,172,168,173,180,165,184],
[165,169,0,168,159,165,161,180],
[167,173,173,0,174,161,164,182],
[170,168,182,167,0,154,181,178],
[172,161,176,180,187,0,166,195],
[161,176,180,177,160,175,0,177],
[165,157,161,159,163,146,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,175,168,170,144,171,171],
[160,0,172,166,173,147,182,163],
[166,169,0,152,168,151,186,157],
[173,175,189,0,179,163,190,179],
[171,168,173,162,0,153,175,144],
[197,194,190,178,188,0,182,169],
[170,159,155,151,166,159,0,163],
[170,178,184,162,197,172,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,170,162,174,179,166,166],
[153,0,155,144,151,160,155,152],
[171,186,0,173,174,173,171,166],
[179,197,168,0,188,180,174,171],
[167,190,167,153,0,174,164,164],
[162,181,168,161,167,0,158,165],
[175,186,170,167,177,183,0,179],
[175,189,175,170,177,176,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,210,232,185,204,193,239],
[178,0,166,217,179,182,168,193],
[131,175,0,203,159,184,162,222],
[109,124,138,0,134,118,147,167],
[156,162,182,207,0,177,185,221],
[137,159,157,223,164,0,168,201],
[148,173,179,194,156,173,0,110],
[102,148,119,174,120,140,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,141,157,155,189,123,149],
[191,0,212,132,183,191,228,189],
[200,129,0,150,122,190,206,197],
[184,209,191,0,230,235,177,159],
[186,158,219,111,0,218,193,192],
[152,150,151,106,123,0,130,93],
[218,113,135,164,148,211,0,139],
[192,152,144,182,149,248,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,184,184,173,167,173,163],
[160,0,179,179,166,159,173,175],
[157,162,0,160,142,146,164,164],
[157,162,181,0,155,156,156,169],
[168,175,199,186,0,173,166,174],
[174,182,195,185,168,0,179,176],
[168,168,177,185,175,162,0,171],
[178,166,177,172,167,165,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,179,194,161,156,187,164],
[164,0,161,187,163,151,133,146],
[162,180,0,187,161,160,189,168],
[147,154,154,0,137,121,158,145],
[180,178,180,204,0,173,174,158],
[185,190,181,220,168,0,193,203],
[154,208,152,183,167,148,0,163],
[177,195,173,196,183,138,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,187,187,165,167,179,183],
[171,0,170,179,158,163,180,191],
[154,171,0,172,176,159,178,173],
[154,162,169,0,159,161,176,177],
[176,183,165,182,0,151,174,161],
[174,178,182,180,190,0,193,169],
[162,161,163,165,167,148,0,154],
[158,150,168,164,180,172,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,190,164,153,154,154,181],
[161,0,172,146,156,144,157,172],
[151,169,0,161,156,175,177,172],
[177,195,180,0,145,169,177,175],
[188,185,185,196,0,183,153,201],
[187,197,166,172,158,0,150,190],
[187,184,164,164,188,191,0,166],
[160,169,169,166,140,151,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,193,192,211,249,178,163],
[191,0,212,144,217,239,199,188],
[148,129,0,128,173,212,186,180],
[149,197,213,0,212,228,209,217],
[130,124,168,129,0,197,152,162],
[92,102,129,113,144,0,129,134],
[163,142,155,132,189,212,0,165],
[178,153,161,124,179,207,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,192,170,152,171,164,143],
[183,0,201,171,157,172,174,173],
[149,140,0,143,134,166,152,171],
[171,170,198,0,158,184,179,182],
[189,184,207,183,0,201,193,168],
[170,169,175,157,140,0,167,182],
[177,167,189,162,148,174,0,173],
[198,168,170,159,173,159,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,184,180,170,181,174,178],
[169,0,167,173,173,173,163,170],
[157,174,0,156,166,167,163,163],
[161,168,185,0,181,170,157,165],
[171,168,175,160,0,172,161,158],
[160,168,174,171,169,0,170,145],
[167,178,178,184,180,171,0,148],
[163,171,178,176,183,196,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,164,148,158,159,152,147],
[168,0,174,169,171,156,171,164],
[177,167,0,154,148,158,166,171],
[193,172,187,0,163,179,185,181],
[183,170,193,178,0,173,183,187],
[182,185,183,162,168,0,173,153],
[189,170,175,156,158,168,0,166],
[194,177,170,160,154,188,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,182,177,184,196,177,158],
[145,0,167,166,158,173,158,163],
[159,174,0,162,167,181,160,157],
[164,175,179,0,156,186,172,175],
[157,183,174,185,0,186,174,174],
[145,168,160,155,155,0,169,155],
[164,183,181,169,167,172,0,175],
[183,178,184,166,167,186,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,149,210,194,168,140,189],
[181,0,165,196,171,179,172,196],
[192,176,0,216,165,197,164,203],
[131,145,125,0,138,143,125,159],
[147,170,176,203,0,171,156,182],
[173,162,144,198,170,0,169,184],
[201,169,177,216,185,172,0,179],
[152,145,138,182,159,157,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,170,167,160,171,172,164],
[189,0,178,170,168,174,180,179],
[171,163,0,161,157,173,176,168],
[174,171,180,0,160,176,190,171],
[181,173,184,181,0,174,178,170],
[170,167,168,165,167,0,177,175],
[169,161,165,151,163,164,0,174],
[177,162,173,170,171,166,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,151,164,160,191,151,187],
[208,0,141,174,168,187,170,198],
[190,200,0,168,157,193,176,205],
[177,167,173,0,180,173,169,173],
[181,173,184,161,0,202,165,195],
[150,154,148,168,139,0,139,148],
[190,171,165,172,176,202,0,179],
[154,143,136,168,146,193,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,163,172,173,179,165,182],
[157,0,167,165,165,151,151,177],
[178,174,0,170,170,161,174,173],
[169,176,171,0,183,164,160,185],
[168,176,171,158,0,161,158,170],
[162,190,180,177,180,0,176,179],
[176,190,167,181,183,165,0,187],
[159,164,168,156,171,162,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,179,162,174,147,154,155],
[161,0,186,167,149,155,161,143],
[162,155,0,143,163,137,146,143],
[179,174,198,0,173,168,162,168],
[167,192,178,168,0,153,160,174],
[194,186,204,173,188,0,174,169],
[187,180,195,179,181,167,0,174],
[186,198,198,173,167,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,125,181,135,87,67,158],
[193,0,101,113,93,134,101,150],
[216,240,0,209,182,168,209,241],
[160,228,132,0,178,184,160,176],
[206,248,159,163,0,202,195,216],
[254,207,173,157,139,0,233,185],
[274,240,132,181,146,108,0,191],
[183,191,100,165,125,156,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,182,169,173,188,189,175],
[159,0,180,166,162,172,176,167],
[159,161,0,157,163,170,174,170],
[172,175,184,0,160,184,175,177],
[168,179,178,181,0,180,173,172],
[153,169,171,157,161,0,157,157],
[152,165,167,166,168,184,0,166],
[166,174,171,164,169,184,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,141,139,176,144,181,105],
[176,0,198,192,190,160,190,150],
[200,143,0,181,201,177,211,156],
[202,149,160,0,201,139,176,146],
[165,151,140,140,0,134,172,137],
[197,181,164,202,207,0,205,191],
[160,151,130,165,169,136,0,116],
[236,191,185,195,204,150,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,176,170,157,170,180,183],
[138,0,143,168,140,163,188,133],
[165,198,0,150,175,163,207,162],
[171,173,191,0,167,195,187,164],
[184,201,166,174,0,180,195,146],
[171,178,178,146,161,0,189,155],
[161,153,134,154,146,152,0,135],
[158,208,179,177,195,186,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,163,176,150,142,156,182],
[180,0,190,184,168,172,177,197],
[178,151,0,179,157,179,191,193],
[165,157,162,0,146,158,156,187],
[191,173,184,195,0,179,170,206],
[199,169,162,183,162,0,197,187],
[185,164,150,185,171,144,0,186],
[159,144,148,154,135,154,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,164,151,191,146,145,163],
[184,0,188,183,195,163,177,186],
[177,153,0,168,173,132,166,172],
[190,158,173,0,185,135,154,172],
[150,146,168,156,0,150,146,168],
[195,178,209,206,191,0,170,199],
[196,164,175,187,195,171,0,181],
[178,155,169,169,173,142,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,181,163,171,169,173,170],
[177,0,179,171,161,181,171,171],
[160,162,0,167,154,169,167,161],
[178,170,174,0,157,176,183,159],
[170,180,187,184,0,176,179,174],
[172,160,172,165,165,0,173,161],
[168,170,174,158,162,168,0,176],
[171,170,180,182,167,180,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,169,178,180,188,165,197],
[173,0,168,148,174,182,188,171],
[172,173,0,160,177,170,188,163],
[163,193,181,0,145,163,175,166],
[161,167,164,196,0,183,193,153],
[153,159,171,178,158,0,157,136],
[176,153,153,166,148,184,0,151],
[144,170,178,175,188,205,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,176,181,185,198,196,171],
[184,0,175,162,159,161,201,178],
[165,166,0,160,144,168,169,171],
[160,179,181,0,170,169,182,174],
[156,182,197,171,0,169,195,185],
[143,180,173,172,172,0,208,177],
[145,140,172,159,146,133,0,130],
[170,163,170,167,156,164,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,151,159,165,162,175,167],
[152,0,153,153,157,153,162,143],
[190,188,0,181,176,169,190,178],
[182,188,160,0,175,179,179,167],
[176,184,165,166,0,155,168,163],
[179,188,172,162,186,0,182,170],
[166,179,151,162,173,159,0,165],
[174,198,163,174,178,171,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,161,165,159,166,159,165],
[176,0,168,179,187,172,180,175],
[180,173,0,174,161,157,178,164],
[176,162,167,0,164,168,169,153],
[182,154,180,177,0,169,167,173],
[175,169,184,173,172,0,169,181],
[182,161,163,172,174,172,0,191],
[176,166,177,188,168,160,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,155,150,163,174,149,152],
[175,0,166,173,180,177,165,167],
[186,175,0,162,178,186,164,168],
[191,168,179,0,184,194,190,173],
[178,161,163,157,0,167,154,152],
[167,164,155,147,174,0,149,142],
[192,176,177,151,187,192,0,185],
[189,174,173,168,189,199,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,192,178,166,179,185,179],
[163,0,180,149,149,157,182,185],
[149,161,0,158,149,152,153,155],
[163,192,183,0,167,168,177,185],
[175,192,192,174,0,164,181,183],
[162,184,189,173,177,0,174,180],
[156,159,188,164,160,167,0,176],
[162,156,186,156,158,161,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,185,172,154,155,165,193],
[153,0,181,154,161,168,149,170],
[156,160,0,153,153,152,158,158],
[169,187,188,0,167,160,177,172],
[187,180,188,174,0,169,170,181],
[186,173,189,181,172,0,166,182],
[176,192,183,164,171,175,0,176],
[148,171,183,169,160,159,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,157,181,160,154,161],
[172,0,140,139,165,161,146,148],
[175,201,0,161,173,192,166,167],
[184,202,180,0,188,176,167,184],
[160,176,168,153,0,173,163,164],
[181,180,149,165,168,0,145,179],
[187,195,175,174,178,196,0,165],
[180,193,174,157,177,162,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,172,172,194,169,179,187],
[166,0,160,174,184,162,182,176],
[169,181,0,174,177,183,191,187],
[169,167,167,0,175,168,180,166],
[147,157,164,166,0,153,165,161],
[172,179,158,173,188,0,177,169],
[162,159,150,161,176,164,0,162],
[154,165,154,175,180,172,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,132,119,240,84,147,132],
[182,0,180,188,248,140,187,244],
[209,161,0,161,192,131,165,240],
[222,153,180,0,126,52,99,161],
[101,93,149,215,0,123,131,100],
[257,201,210,289,218,0,126,191],
[194,154,176,242,210,215,0,144],
[209,97,101,180,241,150,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,170,167,158,167,173,170],
[174,0,172,165,172,168,168,180],
[171,169,0,163,156,170,162,178],
[174,176,178,0,170,165,172,177],
[183,169,185,171,0,181,177,186],
[174,173,171,176,160,0,182,169],
[168,173,179,169,164,159,0,191],
[171,161,163,164,155,172,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,165,169,180,174,169],
[170,0,178,168,156,169,166,179],
[168,163,0,171,159,166,151,171],
[176,173,170,0,161,161,165,173],
[172,185,182,180,0,167,166,164],
[161,172,175,180,174,0,166,186],
[167,175,190,176,175,175,0,181],
[172,162,170,168,177,155,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,197,164,184,146,165,171],
[204,0,213,192,179,183,144,179],
[144,128,0,133,161,154,120,140],
[177,149,208,0,132,165,143,165],
[157,162,180,209,0,138,152,147],
[195,158,187,176,203,0,179,165],
[176,197,221,198,189,162,0,170],
[170,162,201,176,194,176,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,186,195,158,183,174,181],
[166,0,168,174,169,201,163,180],
[155,173,0,180,170,158,165,151],
[146,167,161,0,169,157,161,143],
[183,172,171,172,0,191,164,170],
[158,140,183,184,150,0,147,169],
[167,178,176,180,177,194,0,150],
[160,161,190,198,171,172,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,186,171,181,155,156,160],
[190,0,184,183,178,172,162,168],
[155,157,0,163,167,146,143,145],
[170,158,178,0,180,159,173,159],
[160,163,174,161,0,160,158,160],
[186,169,195,182,181,0,173,174],
[185,179,198,168,183,168,0,183],
[181,173,196,182,181,167,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,171,193,171,165,171,170],
[186,0,190,167,183,185,165,203],
[170,151,0,168,169,156,174,180],
[148,174,173,0,160,162,172,179],
[170,158,172,181,0,152,166,184],
[176,156,185,179,189,0,181,185],
[170,176,167,169,175,160,0,184],
[171,138,161,162,157,156,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,164,160,199,175,179,173],
[162,0,164,163,194,155,175,168],
[177,177,0,179,198,174,197,169],
[181,178,162,0,192,185,191,153],
[142,147,143,149,0,154,166,161],
[166,186,167,156,187,0,174,159],
[162,166,144,150,175,167,0,153],
[168,173,172,188,180,182,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,159,159,173,157,174,173],
[181,0,182,177,165,181,168,194],
[182,159,0,161,168,173,163,191],
[182,164,180,0,159,168,170,176],
[168,176,173,182,0,177,179,186],
[184,160,168,173,164,0,166,174],
[167,173,178,171,162,175,0,174],
[168,147,150,165,155,167,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,147,148,178,146,183,160],
[173,0,210,178,159,153,190,185],
[194,131,0,127,162,155,154,178],
[193,163,214,0,194,177,198,194],
[163,182,179,147,0,142,184,143],
[195,188,186,164,199,0,192,183],
[158,151,187,143,157,149,0,153],
[181,156,163,147,198,158,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,183,178,175,167,156,162],
[176,0,194,173,174,163,169,192],
[158,147,0,163,139,160,158,166],
[163,168,178,0,175,166,184,170],
[166,167,202,166,0,167,165,175],
[174,178,181,175,174,0,166,195],
[185,172,183,157,176,175,0,165],
[179,149,175,171,166,146,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,179,164,189,167,153,161],
[147,0,148,154,155,142,146,157],
[162,193,0,175,170,148,157,172],
[177,187,166,0,184,162,170,168],
[152,186,171,157,0,160,178,151],
[174,199,193,179,181,0,185,168],
[188,195,184,171,163,156,0,178],
[180,184,169,173,190,173,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,200,127,129,173,104,169],
[232,0,203,180,159,182,151,200],
[141,138,0,122,155,131,85,157],
[214,161,219,0,212,192,166,158],
[212,182,186,129,0,179,108,125],
[168,159,210,149,162,0,178,187],
[237,190,256,175,233,163,0,192],
[172,141,184,183,216,154,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,188,161,217,192,213,184],
[155,0,159,135,183,161,190,186],
[153,182,0,148,194,181,194,169],
[180,206,193,0,213,187,214,169],
[124,158,147,128,0,140,162,124],
[149,180,160,154,201,0,202,152],
[128,151,147,127,179,139,0,130],
[157,155,172,172,217,189,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,176,212,178,167,197,153],
[180,0,165,208,171,176,198,155],
[165,176,0,204,175,159,189,175],
[129,133,137,0,143,157,170,158],
[163,170,166,198,0,174,205,176],
[174,165,182,184,167,0,173,137],
[144,143,152,171,136,168,0,126],
[188,186,166,183,165,204,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,166,182,154,165,161,167],
[166,0,152,178,147,164,167,169],
[175,189,0,181,170,174,170,187],
[159,163,160,0,153,160,159,171],
[187,194,171,188,0,170,177,186],
[176,177,167,181,171,0,176,195],
[180,174,171,182,164,165,0,181],
[174,172,154,170,155,146,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,160,172,184,171,183,165],
[180,0,164,175,182,173,195,177],
[181,177,0,173,166,178,188,190],
[169,166,168,0,175,172,179,178],
[157,159,175,166,0,166,183,173],
[170,168,163,169,175,0,173,165],
[158,146,153,162,158,168,0,169],
[176,164,151,163,168,176,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,170,158,154,174,169,169],
[181,0,170,174,148,169,163,158],
[171,171,0,148,169,159,164,168],
[183,167,193,0,185,178,192,180],
[187,193,172,156,0,174,182,171],
[167,172,182,163,167,0,175,168],
[172,178,177,149,159,166,0,173],
[172,183,173,161,170,173,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,191,169,170,154,171,172],
[166,0,192,188,166,167,197,173],
[150,149,0,173,137,132,160,147],
[172,153,168,0,175,157,172,156],
[171,175,204,166,0,183,167,165],
[187,174,209,184,158,0,178,180],
[170,144,181,169,174,163,0,164],
[169,168,194,185,176,161,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,159,166,155,157,172,173],
[183,0,185,146,170,168,179,189],
[182,156,0,164,163,174,217,176],
[175,195,177,0,167,173,184,184],
[186,171,178,174,0,153,186,163],
[184,173,167,168,188,0,185,194],
[169,162,124,157,155,156,0,184],
[168,152,165,157,178,147,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,157,79,122,155,91,110],
[183,0,159,136,177,131,155,104],
[184,182,0,145,211,230,180,176],
[262,205,196,0,210,182,216,157],
[219,164,130,131,0,138,93,141],
[186,210,111,159,203,0,189,187],
[250,186,161,125,248,152,0,154],
[231,237,165,184,200,154,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,160,172,167,182,173,165],
[179,0,168,170,165,176,170,175],
[181,173,0,177,172,178,194,169],
[169,171,164,0,168,184,165,170],
[174,176,169,173,0,177,178,160],
[159,165,163,157,164,0,156,142],
[168,171,147,176,163,185,0,153],
[176,166,172,171,181,199,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,193,172,190,182,165,183],
[156,0,184,152,170,160,161,161],
[148,157,0,137,169,160,156,161],
[169,189,204,0,196,182,180,178],
[151,171,172,145,0,149,156,154],
[159,181,181,159,192,0,160,182],
[176,180,185,161,185,181,0,161],
[158,180,180,163,187,159,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,170,170,174,187,179,173],
[154,0,161,146,170,165,150,166],
[171,180,0,171,186,161,192,191],
[171,195,170,0,177,184,181,183],
[167,171,155,164,0,164,167,180],
[154,176,180,157,177,0,175,172],
[162,191,149,160,174,166,0,176],
[168,175,150,158,161,169,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,183,156,174,177,180,183],
[161,0,167,180,162,187,176,173],
[158,174,0,182,175,185,172,151],
[185,161,159,0,185,182,160,162],
[167,179,166,156,0,177,157,166],
[164,154,156,159,164,0,148,146],
[161,165,169,181,184,193,0,167],
[158,168,190,179,175,195,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,163,179,172,175,179,149],
[175,0,165,205,164,189,191,177],
[178,176,0,197,157,170,173,175],
[162,136,144,0,176,168,147,158],
[169,177,184,165,0,182,181,169],
[166,152,171,173,159,0,182,180],
[162,150,168,194,160,159,0,163],
[192,164,166,183,172,161,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,170,225,252,130,220,179],
[105,0,82,115,174,144,174,137],
[171,259,0,201,201,159,246,193],
[116,226,140,0,201,144,116,138],
[89,167,140,140,0,144,134,156],
[211,197,182,197,197,0,166,229],
[121,167,95,225,207,175,0,167],
[162,204,148,203,185,112,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,152,179,176,171,160,158],
[181,0,180,183,177,189,166,192],
[189,161,0,188,184,185,173,178],
[162,158,153,0,169,192,142,167],
[165,164,157,172,0,195,173,170],
[170,152,156,149,146,0,154,148],
[181,175,168,199,168,187,0,179],
[183,149,163,174,171,193,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,171,163,166,172,175,173],
[194,0,178,168,176,175,193,188],
[170,163,0,181,179,176,174,183],
[178,173,160,0,162,173,175,185],
[175,165,162,179,0,178,163,173],
[169,166,165,168,163,0,187,182],
[166,148,167,166,178,154,0,179],
[168,153,158,156,168,159,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,159,197,153,153,158,175],
[180,0,165,155,149,175,157,169],
[182,176,0,179,166,124,156,185],
[144,186,162,0,158,150,144,160],
[188,192,175,183,0,173,160,179],
[188,166,217,191,168,0,179,195],
[183,184,185,197,181,162,0,170],
[166,172,156,181,162,146,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,163,153,188,194,194,145],
[162,0,174,174,197,136,217,147],
[178,167,0,146,197,157,212,117],
[188,167,195,0,166,156,227,181],
[153,144,144,175,0,192,175,92],
[147,205,184,185,149,0,229,153],
[147,124,129,114,166,112,0,99],
[196,194,224,160,249,188,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,170,157,171,152,147,160],
[184,0,177,175,178,170,178,163],
[171,164,0,153,166,152,163,171],
[184,166,188,0,173,162,171,171],
[170,163,175,168,0,158,162,162],
[189,171,189,179,183,0,167,182],
[194,163,178,170,179,174,0,184],
[181,178,170,170,179,159,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,171,181,164,174,190,203],
[167,0,185,175,160,140,182,169],
[170,156,0,164,161,133,174,184],
[160,166,177,0,169,147,167,168],
[177,181,180,172,0,160,168,170],
[167,201,208,194,181,0,203,192],
[151,159,167,174,173,138,0,177],
[138,172,157,173,171,149,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,158,198,180,187,188,176],
[156,0,168,181,163,186,180,169],
[183,173,0,192,165,185,193,175],
[143,160,149,0,140,160,157,139],
[161,178,176,201,0,161,185,160],
[154,155,156,181,180,0,180,164],
[153,161,148,184,156,161,0,168],
[165,172,166,202,181,177,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,169,172,176,175,169,170],
[188,0,186,183,200,181,174,170],
[172,155,0,167,190,153,153,170],
[169,158,174,0,191,163,168,164],
[165,141,151,150,0,150,155,154],
[166,160,188,178,191,0,176,163],
[172,167,188,173,186,165,0,175],
[171,171,171,177,187,178,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,161,150,168,153,163,165],
[174,0,193,166,183,172,182,194],
[180,148,0,173,168,162,180,173],
[191,175,168,0,173,151,195,176],
[173,158,173,168,0,154,160,169],
[188,169,179,190,187,0,194,190],
[178,159,161,146,181,147,0,162],
[176,147,168,165,172,151,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,162,170,171,158,166,162],
[170,0,154,184,182,160,164,153],
[179,187,0,178,185,157,161,185],
[171,157,163,0,170,173,160,144],
[170,159,156,171,0,157,172,116],
[183,181,184,168,184,0,186,159],
[175,177,180,181,169,155,0,153],
[179,188,156,197,225,182,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,173,155,178,179,173,183],
[146,0,153,153,165,175,154,160],
[168,188,0,176,166,180,164,168],
[186,188,165,0,173,184,180,184],
[163,176,175,168,0,173,162,172],
[162,166,161,157,168,0,160,164],
[168,187,177,161,179,181,0,198],
[158,181,173,157,169,177,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,146,162,157,144,161,140],
[184,0,172,168,161,160,177,169],
[195,169,0,165,160,174,172,168],
[179,173,176,0,194,188,162,171],
[184,180,181,147,0,172,186,162],
[197,181,167,153,169,0,178,151],
[180,164,169,179,155,163,0,173],
[201,172,173,170,179,190,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,180,177,186,181,176,170],
[161,0,171,171,170,174,166,171],
[161,170,0,163,173,172,165,166],
[164,170,178,0,176,178,177,165],
[155,171,168,165,0,168,175,170],
[160,167,169,163,173,0,163,165],
[165,175,176,164,166,178,0,161],
[171,170,175,176,171,176,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,128,88,183,128,148,126],
[182,0,172,161,194,176,196,149],
[213,169,0,171,208,182,181,174],
[253,180,170,0,191,205,199,187],
[158,147,133,150,0,176,156,165],
[213,165,159,136,165,0,201,161],
[193,145,160,142,185,140,0,125],
[215,192,167,154,176,180,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,161,157,156,178,161,168],
[159,0,157,158,149,177,152,167],
[180,184,0,172,172,185,167,194],
[184,183,169,0,155,191,177,177],
[185,192,169,186,0,185,186,184],
[163,164,156,150,156,0,167,153],
[180,189,174,164,155,174,0,185],
[173,174,147,164,157,188,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,168,147,160,169,163,169],
[191,0,172,181,177,181,170,162],
[173,169,0,169,173,168,162,174],
[194,160,172,0,174,184,171,167],
[181,164,168,167,0,172,167,156],
[172,160,173,157,169,0,157,161],
[178,171,179,170,174,184,0,176],
[172,179,167,174,185,180,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,181,192,171,174,180,178],
[184,0,173,182,169,181,172,171],
[160,168,0,178,166,167,166,174],
[149,159,163,0,172,167,168,172],
[170,172,175,169,0,189,163,192],
[167,160,174,174,152,0,158,175],
[161,169,175,173,178,183,0,189],
[163,170,167,169,149,166,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,174,194,175,155,205,192],
[137,0,164,147,156,172,134,170],
[167,177,0,172,138,163,159,161],
[147,194,169,0,170,137,140,180],
[166,185,203,171,0,170,168,232],
[186,169,178,204,171,0,218,206],
[136,207,182,201,173,123,0,185],
[149,171,180,161,109,135,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,153,138,146,144,149,160],
[186,0,175,161,177,171,177,168],
[188,166,0,167,163,160,171,163],
[203,180,174,0,164,173,176,168],
[195,164,178,177,0,178,170,167],
[197,170,181,168,163,0,167,171],
[192,164,170,165,171,174,0,151],
[181,173,178,173,174,170,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,134,158,143,144,155,110],
[178,0,140,144,147,132,151,145],
[207,201,0,162,164,155,160,175],
[183,197,179,0,171,152,167,153],
[198,194,177,170,0,160,179,164],
[197,209,186,189,181,0,155,177],
[186,190,181,174,162,186,0,155],
[231,196,166,188,177,164,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,149,188,174,259,192,231],
[97,0,92,152,157,219,83,113],
[192,249,0,152,241,220,83,196],
[153,189,189,0,225,183,145,165],
[167,184,100,116,0,167,135,118],
[82,122,121,158,174,0,83,122],
[149,258,258,196,206,258,0,230],
[110,228,145,176,223,219,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,173,208,216,165,184,170],
[173,0,156,147,176,151,140,191],
[168,185,0,187,177,180,163,182],
[133,194,154,0,170,166,155,208],
[125,165,164,171,0,163,161,159],
[176,190,161,175,178,0,207,190],
[157,201,178,186,180,134,0,163],
[171,150,159,133,182,151,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,169,181,153,174,186,159],
[164,0,166,166,150,170,154,144],
[172,175,0,159,167,184,166,154],
[160,175,182,0,152,200,155,147],
[188,191,174,189,0,200,183,161],
[167,171,157,141,141,0,161,159],
[155,187,175,186,158,180,0,175],
[182,197,187,194,180,182,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,144,144,157,157,152,156],
[192,0,179,187,177,166,174,172],
[197,162,0,173,173,185,182,172],
[197,154,168,0,181,177,179,187],
[184,164,168,160,0,184,177,168],
[184,175,156,164,157,0,167,179],
[189,167,159,162,164,174,0,166],
[185,169,169,154,173,162,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,115,139,181,159,181,141],
[213,0,179,170,205,166,181,192],
[226,162,0,170,201,175,179,199],
[202,171,171,0,174,176,161,209],
[160,136,140,167,0,147,155,168],
[182,175,166,165,194,0,172,180],
[160,160,162,180,186,169,0,182],
[200,149,142,132,173,161,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,147,170,155,185,143,182],
[161,0,173,170,167,172,161,194],
[194,168,0,175,178,173,174,199],
[171,171,166,0,166,169,167,187],
[186,174,163,175,0,182,142,205],
[156,169,168,172,159,0,146,182],
[198,180,167,174,199,195,0,192],
[159,147,142,154,136,159,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,174,182,180,177,166,188],
[159,0,166,175,186,175,162,181],
[167,175,0,194,191,185,194,193],
[159,166,147,0,162,164,153,146],
[161,155,150,179,0,186,169,165],
[164,166,156,177,155,0,171,180],
[175,179,147,188,172,170,0,181],
[153,160,148,195,176,161,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,162,157,154,157,180,157],
[187,0,162,160,162,160,176,163],
[179,179,0,174,170,176,191,167],
[184,181,167,0,155,168,188,155],
[187,179,171,186,0,173,194,167],
[184,181,165,173,168,0,193,180],
[161,165,150,153,147,148,0,147],
[184,178,174,186,174,161,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,185,191,176,190,187,161],
[156,0,163,193,169,171,181,160],
[156,178,0,203,175,179,192,177],
[150,148,138,0,150,173,169,139],
[165,172,166,191,0,171,179,173],
[151,170,162,168,170,0,172,153],
[154,160,149,172,162,169,0,139],
[180,181,164,202,168,188,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,173,170,182,183,183,151],
[150,0,157,155,162,156,147,141],
[168,184,0,173,168,158,166,168],
[171,186,168,0,172,171,166,155],
[159,179,173,169,0,159,174,153],
[158,185,183,170,182,0,155,180],
[158,194,175,175,167,186,0,164],
[190,200,173,186,188,161,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,169,167,182,171,171,176],
[172,0,178,164,187,158,181,173],
[172,163,0,170,190,167,172,173],
[174,177,171,0,193,167,170,166],
[159,154,151,148,0,146,164,155],
[170,183,174,174,195,0,182,163],
[170,160,169,171,177,159,0,156],
[165,168,168,175,186,178,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,190,147,154,191,174,171],
[195,0,179,169,189,189,189,173],
[151,162,0,188,167,178,156,171],
[194,172,153,0,166,195,175,168],
[187,152,174,175,0,197,167,177],
[150,152,163,146,144,0,134,154],
[167,152,185,166,174,207,0,164],
[170,168,170,173,164,187,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,165,171,154,151,158,160],
[170,0,161,177,160,159,153,162],
[176,180,0,176,174,161,158,172],
[170,164,165,0,168,145,154,166],
[187,181,167,173,0,179,177,188],
[190,182,180,196,162,0,192,181],
[183,188,183,187,164,149,0,180],
[181,179,169,175,153,160,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,166,155,182,168,174,163],
[166,0,162,172,174,171,177,171],
[175,179,0,174,175,190,179,167],
[186,169,167,0,166,182,182,167],
[159,167,166,175,0,156,172,174],
[173,170,151,159,185,0,173,169],
[167,164,162,159,169,168,0,165],
[178,170,174,174,167,172,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,175,174,183,183,196,167],
[168,0,181,175,202,181,183,174],
[166,160,0,155,174,167,177,165],
[167,166,186,0,187,179,192,165],
[158,139,167,154,0,168,163,167],
[158,160,174,162,173,0,179,168],
[145,158,164,149,178,162,0,159],
[174,167,176,176,174,173,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,199,214,155,211,206,205],
[106,0,151,164,139,149,236,174],
[142,190,0,159,175,152,145,183],
[127,177,182,0,178,226,219,184],
[186,202,166,163,0,182,242,183],
[130,192,189,115,159,0,176,175],
[135,105,196,122,99,165,0,181],
[136,167,158,157,158,166,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,163,148,169,160,164,158],
[181,0,175,182,177,171,167,174],
[178,166,0,175,179,168,177,171],
[193,159,166,0,191,162,164,170],
[172,164,162,150,0,169,179,166],
[181,170,173,179,172,0,164,167],
[177,174,164,177,162,177,0,151],
[183,167,170,171,175,174,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,157,156,157,178,169,154],
[177,0,183,180,175,184,169,164],
[184,158,0,180,183,188,166,172],
[185,161,161,0,173,177,175,172],
[184,166,158,168,0,172,176,168],
[163,157,153,164,169,0,151,148],
[172,172,175,166,165,190,0,164],
[187,177,169,169,173,193,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,161,191,188,192,195,176],
[204,0,196,196,216,129,142,153],
[180,145,0,201,214,183,170,195],
[150,145,140,0,177,161,152,135],
[153,125,127,164,0,145,154,165],
[149,212,158,180,196,0,142,196],
[146,199,171,189,187,199,0,184],
[165,188,146,206,176,145,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,134,217,116,213,169,187],
[156,0,162,182,170,169,181,138],
[207,179,0,206,175,181,192,146],
[124,159,135,0,131,181,158,156],
[225,171,166,210,0,211,213,182],
[128,172,160,160,130,0,200,143],
[172,160,149,183,128,141,0,155],
[154,203,195,185,159,198,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,151,160,170,184,168,157],
[180,0,166,163,168,182,171,166],
[190,175,0,168,185,187,176,177],
[181,178,173,0,173,196,181,169],
[171,173,156,168,0,160,170,152],
[157,159,154,145,181,0,157,155],
[173,170,165,160,171,184,0,171],
[184,175,164,172,189,186,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,166,177,154,189,177,173],
[184,0,160,172,168,177,188,176],
[175,181,0,178,173,176,190,156],
[164,169,163,0,170,185,179,177],
[187,173,168,171,0,186,189,170],
[152,164,165,156,155,0,174,165],
[164,153,151,162,152,167,0,168],
[168,165,185,164,171,176,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,166,170,182,171,173,180],
[137,0,178,181,180,175,145,186],
[175,163,0,180,162,175,186,172],
[171,160,161,0,199,162,164,176],
[159,161,179,142,0,169,176,170],
[170,166,166,179,172,0,178,181],
[168,196,155,177,165,163,0,193],
[161,155,169,165,171,160,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,176,162,172,158,135,158],
[180,0,157,162,187,176,147,156],
[165,184,0,171,187,169,164,171],
[179,179,170,0,173,179,165,172],
[169,154,154,168,0,161,148,167],
[183,165,172,162,180,0,173,180],
[206,194,177,176,193,168,0,184],
[183,185,170,169,174,161,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,174,160,173,163,155,155],
[180,0,180,173,183,174,171,169],
[167,161,0,158,176,170,154,155],
[181,168,183,0,172,173,168,157],
[168,158,165,169,0,162,154,159],
[178,167,171,168,179,0,166,150],
[186,170,187,173,187,175,0,172],
[186,172,186,184,182,191,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,174,159,166,182,177,164],
[169,0,171,171,174,168,174,169],
[167,170,0,159,170,168,170,168],
[182,170,182,0,177,163,183,182],
[175,167,171,164,0,173,167,173],
[159,173,173,178,168,0,184,182],
[164,167,171,158,174,157,0,171],
[177,172,173,159,168,159,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,174,175,167,187,173,167],
[169,0,183,178,166,175,171,170],
[167,158,0,180,149,171,175,160],
[166,163,161,0,171,169,175,171],
[174,175,192,170,0,180,168,169],
[154,166,170,172,161,0,171,155],
[168,170,166,166,173,170,0,160],
[174,171,181,170,172,186,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,177,172,172,142,181,173],
[168,0,182,169,200,171,190,209],
[164,159,0,161,176,153,177,165],
[169,172,180,0,172,151,187,179],
[169,141,165,169,0,158,163,180],
[199,170,188,190,183,0,189,206],
[160,151,164,154,178,152,0,189],
[168,132,176,162,161,135,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,178,140,116,164,176,100],
[233,0,187,180,130,188,188,153],
[163,154,0,197,91,166,178,122],
[201,161,144,0,151,163,161,129],
[225,211,250,190,0,256,157,221],
[177,153,175,178,85,0,130,137],
[165,153,163,180,184,211,0,189],
[241,188,219,212,120,204,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,170,171,172,169,172,178],
[160,0,170,172,169,147,162,168],
[171,171,0,176,152,179,183,174],
[170,169,165,0,158,175,177,165],
[169,172,189,183,0,166,192,173],
[172,194,162,166,175,0,181,185],
[169,179,158,164,149,160,0,163],
[163,173,167,176,168,156,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,141,203,152,128,148,160],
[146,0,139,176,141,117,130,136],
[200,202,0,213,172,149,189,171],
[138,165,128,0,151,126,148,128],
[189,200,169,190,0,158,157,172],
[213,224,192,215,183,0,182,134],
[193,211,152,193,184,159,0,154],
[181,205,170,213,169,207,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,187,195,197,168,179],
[170,0,179,178,173,170,145,159],
[172,162,0,179,184,180,169,157],
[154,163,162,0,171,177,170,168],
[146,168,157,170,0,177,165,156],
[144,171,161,164,164,0,157,168],
[173,196,172,171,176,184,0,163],
[162,182,184,173,185,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,183,176,146,143,158,160],
[180,0,193,196,172,173,182,167],
[158,148,0,164,139,153,139,142],
[165,145,177,0,151,157,157,149],
[195,169,202,190,0,171,174,167],
[198,168,188,184,170,0,173,169],
[183,159,202,184,167,168,0,172],
[181,174,199,192,174,172,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,193,171,176,174,187,165],
[159,0,193,181,167,173,176,153],
[148,148,0,154,164,157,156,132],
[170,160,187,0,175,160,158,171],
[165,174,177,166,0,158,159,164],
[167,168,184,181,183,0,176,188],
[154,165,185,183,182,165,0,169],
[176,188,209,170,177,153,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,172,168,170,165,163,179],
[171,0,170,161,153,187,176,173],
[169,171,0,166,153,161,152,195],
[173,180,175,0,153,193,197,188],
[171,188,188,188,0,166,193,184],
[176,154,180,148,175,0,156,173],
[178,165,189,144,148,185,0,189],
[162,168,146,153,157,168,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,162,149,149,149,159,161],
[181,0,174,176,174,181,165,169],
[179,167,0,161,169,170,165,177],
[192,165,180,0,170,185,179,170],
[192,167,172,171,0,181,169,186],
[192,160,171,156,160,0,168,183],
[182,176,176,162,172,173,0,189],
[180,172,164,171,155,158,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,162,163,161,173,171,164],
[151,0,172,168,162,174,171,161],
[179,169,0,181,176,170,158,161],
[178,173,160,0,157,167,162,159],
[180,179,165,184,0,170,176,173],
[168,167,171,174,171,0,148,163],
[170,170,183,179,165,193,0,162],
[177,180,180,182,168,178,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,160,185,146,162,145,179],
[169,0,158,193,159,199,172,176],
[181,183,0,184,172,179,127,185],
[156,148,157,0,146,181,135,174],
[195,182,169,195,0,192,143,187],
[179,142,162,160,149,0,149,159],
[196,169,214,206,198,192,0,203],
[162,165,156,167,154,182,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,174,182,184,184,176,174],
[175,0,168,179,183,190,176,185],
[167,173,0,187,175,187,172,177],
[159,162,154,0,162,162,167,165],
[157,158,166,179,0,181,156,175],
[157,151,154,179,160,0,169,162],
[165,165,169,174,185,172,0,177],
[167,156,164,176,166,179,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,200,191,199,201,166,185],
[133,0,153,187,181,144,159,155],
[141,188,0,177,186,166,157,143],
[150,154,164,0,169,154,149,142],
[142,160,155,172,0,180,178,148],
[140,197,175,187,161,0,158,168],
[175,182,184,192,163,183,0,179],
[156,186,198,199,193,173,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,177,179,170,181,178,170],
[165,0,174,176,175,155,165,171],
[164,167,0,162,152,157,161,168],
[162,165,179,0,156,153,163,165],
[171,166,189,185,0,175,171,179],
[160,186,184,188,166,0,163,180],
[163,176,180,178,170,178,0,170],
[171,170,173,176,162,161,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,157,158,168,176,159,155],
[138,0,129,161,163,140,151,141],
[184,212,0,171,190,186,197,170],
[183,180,170,0,177,170,185,163],
[173,178,151,164,0,154,171,164],
[165,201,155,171,187,0,170,167],
[182,190,144,156,170,171,0,175],
[186,200,171,178,177,174,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,117,156,135,163,176,147],
[231,0,179,187,191,222,194,164],
[224,162,0,220,167,197,192,183],
[185,154,121,0,158,181,268,152],
[206,150,174,183,0,203,205,164],
[178,119,144,160,138,0,188,148],
[165,147,149,73,136,153,0,150],
[194,177,158,189,177,193,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,177,165,183,170,176,158],
[183,0,182,173,183,161,183,171],
[164,159,0,154,185,184,182,166],
[176,168,187,0,180,158,182,169],
[158,158,156,161,0,178,174,150],
[171,180,157,183,163,0,173,164],
[165,158,159,159,167,168,0,164],
[183,170,175,172,191,177,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,149,168,161,173,167,176],
[176,0,172,179,169,186,166,177],
[192,169,0,188,172,188,180,184],
[173,162,153,0,172,170,162,168],
[180,172,169,169,0,186,165,169],
[168,155,153,171,155,0,158,180],
[174,175,161,179,176,183,0,177],
[165,164,157,173,172,161,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,182,173,179,172,184,174],
[174,0,165,165,180,177,179,185],
[159,176,0,161,173,176,193,173],
[168,176,180,0,183,183,199,177],
[162,161,168,158,0,179,171,164],
[169,164,165,158,162,0,181,161],
[157,162,148,142,170,160,0,153],
[167,156,168,164,177,180,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,179,171,183,176,180,169],
[169,0,170,174,171,176,180,176],
[162,171,0,174,172,180,164,167],
[170,167,167,0,170,180,171,174],
[158,170,169,171,0,156,169,177],
[165,165,161,161,185,0,182,161],
[161,161,177,170,172,159,0,164],
[172,165,174,167,164,180,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,189,162,164,169,174,192],
[150,0,148,160,154,130,162,159],
[152,193,0,172,173,172,185,171],
[179,181,169,0,151,161,180,174],
[177,187,168,190,0,172,177,180],
[172,211,169,180,169,0,186,183],
[167,179,156,161,164,155,0,179],
[149,182,170,167,161,158,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,156,163,176,163,181,170],
[162,0,164,147,167,160,172,171],
[185,177,0,152,165,174,168,176],
[178,194,189,0,161,190,168,181],
[165,174,176,180,0,184,189,168],
[178,181,167,151,157,0,160,153],
[160,169,173,173,152,181,0,188],
[171,170,165,160,173,188,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,186,183,180,153,193,191],
[163,0,178,156,174,177,181,205],
[155,163,0,176,192,165,184,190],
[158,185,165,0,184,192,161,182],
[161,167,149,157,0,150,158,197],
[188,164,176,149,191,0,170,182],
[148,160,157,180,183,171,0,176],
[150,136,151,159,144,159,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,161,159,179,168,179,154],
[165,0,164,164,152,174,168,160],
[180,177,0,171,175,165,177,180],
[182,177,170,0,172,169,181,149],
[162,189,166,169,0,169,192,168],
[173,167,176,172,172,0,179,166],
[162,173,164,160,149,162,0,155],
[187,181,161,192,173,175,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,185,186,172,182,167,178],
[160,0,187,179,167,174,168,178],
[156,154,0,157,153,171,156,164],
[155,162,184,0,170,172,174,170],
[169,174,188,171,0,178,173,184],
[159,167,170,169,163,0,176,171],
[174,173,185,167,168,165,0,174],
[163,163,177,171,157,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,177,177,164,159,188,163],
[174,0,150,167,164,142,150,162],
[164,191,0,196,183,178,184,189],
[164,174,145,0,157,149,167,152],
[177,177,158,184,0,156,176,158],
[182,199,163,192,185,0,182,179],
[153,191,157,174,165,159,0,164],
[178,179,152,189,183,162,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,165,171,170,165,162,177],
[178,0,169,172,172,162,171,184],
[176,172,0,171,170,165,174,185],
[170,169,170,0,164,177,171,177],
[171,169,171,177,0,162,167,179],
[176,179,176,164,179,0,173,184],
[179,170,167,170,174,168,0,164],
[164,157,156,164,162,157,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,139,133,125,95,95,161],
[244,0,197,187,174,166,158,205],
[202,144,0,150,117,166,175,162],
[208,154,191,0,171,160,163,176],
[216,167,224,170,0,196,156,201],
[246,175,175,181,145,0,148,190],
[246,183,166,178,185,193,0,212],
[180,136,179,165,140,151,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,158,171,180,164,160,191],
[149,0,152,136,144,156,138,160],
[183,189,0,151,187,174,156,190],
[170,205,190,0,192,188,171,194],
[161,197,154,149,0,165,170,187],
[177,185,167,153,176,0,167,166],
[181,203,185,170,171,174,0,178],
[150,181,151,147,154,175,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,183,198,159,181,171,177],
[149,0,188,178,163,185,144,168],
[158,153,0,148,162,156,133,158],
[143,163,193,0,151,180,171,161],
[182,178,179,190,0,169,185,188],
[160,156,185,161,172,0,141,161],
[170,197,208,170,156,200,0,173],
[164,173,183,180,153,180,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,174,180,161,156,159,196],
[190,0,160,198,150,154,158,161],
[167,181,0,201,177,144,132,176],
[161,143,140,0,136,142,123,145],
[180,191,164,205,0,182,163,189],
[185,187,197,199,159,0,174,216],
[182,183,209,218,178,167,0,232],
[145,180,165,196,152,125,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,161,209,175,182,177,189],
[155,0,145,169,161,167,152,164],
[180,196,0,182,167,191,170,172],
[132,172,159,0,163,162,155,165],
[166,180,174,178,0,169,162,164],
[159,174,150,179,172,0,157,165],
[164,189,171,186,179,184,0,167],
[152,177,169,176,177,176,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,155,144,160,132,157,155],
[146,0,123,138,117,127,129,117],
[186,218,0,158,182,153,168,175],
[197,203,183,0,189,173,154,165],
[181,224,159,152,0,172,183,148],
[209,214,188,168,169,0,184,158],
[184,212,173,187,158,157,0,152],
[186,224,166,176,193,183,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,176,186,167,195,199,162],
[153,0,156,184,179,176,168,187],
[165,185,0,198,173,181,176,170],
[155,157,143,0,162,163,179,152],
[174,162,168,179,0,174,184,183],
[146,165,160,178,167,0,195,155],
[142,173,165,162,157,146,0,131],
[179,154,171,189,158,186,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,169,178,170,174,174,148],
[177,0,181,169,184,171,182,172],
[172,160,0,156,163,165,150,151],
[163,172,185,0,183,179,174,173],
[171,157,178,158,0,157,165,156],
[167,170,176,162,184,0,185,161],
[167,159,191,167,176,156,0,160],
[193,169,190,168,185,180,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,176,196,164,191,175,196],
[148,0,172,160,165,182,161,183],
[165,169,0,178,164,176,152,168],
[145,181,163,0,173,182,174,182],
[177,176,177,168,0,184,160,175],
[150,159,165,159,157,0,152,157],
[166,180,189,167,181,189,0,181],
[145,158,173,159,166,184,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,189,186,175,163,179,180],
[160,0,158,172,150,159,170,166],
[152,183,0,182,182,174,179,174],
[155,169,159,0,162,151,181,162],
[166,191,159,179,0,153,179,174],
[178,182,167,190,188,0,182,184],
[162,171,162,160,162,159,0,178],
[161,175,167,179,167,157,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,162,176,147,143,149,107],
[208,0,172,169,163,165,187,170],
[179,169,0,177,184,155,195,156],
[165,172,164,0,147,153,162,134],
[194,178,157,194,0,164,169,205],
[198,176,186,188,177,0,187,169],
[192,154,146,179,172,154,0,169],
[234,171,185,207,136,172,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,153,170,168,166,189,176],
[162,0,148,147,148,145,198,188],
[188,193,0,178,151,175,199,169],
[171,194,163,0,156,163,203,181],
[173,193,190,185,0,164,195,170],
[175,196,166,178,177,0,197,182],
[152,143,142,138,146,144,0,161],
[165,153,172,160,171,159,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,170,178,163,159,180,181],
[168,0,174,196,175,173,171,175],
[171,167,0,179,159,175,165,182],
[163,145,162,0,150,160,147,153],
[178,166,182,191,0,185,172,176],
[182,168,166,181,156,0,164,167],
[161,170,176,194,169,177,0,176],
[160,166,159,188,165,174,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,156,247,244,173,234,186],
[107,0,250,164,163,204,196,228],
[185,91,0,145,118,132,104,134],
[94,177,196,0,166,146,138,157],
[97,178,223,175,0,99,121,212],
[168,137,209,195,242,0,214,273],
[107,145,237,203,220,127,0,242],
[155,113,207,184,129,68,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,169,171,169,178,170,182],
[164,0,158,174,166,172,181,167],
[172,183,0,179,196,170,176,181],
[170,167,162,0,176,163,182,163],
[172,175,145,165,0,160,162,170],
[163,169,171,178,181,0,200,164],
[171,160,165,159,179,141,0,153],
[159,174,160,178,171,177,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,186,173,175,173,174,164],
[164,0,178,185,185,163,182,179],
[155,163,0,177,159,159,169,157],
[168,156,164,0,165,148,170,154],
[166,156,182,176,0,166,156,166],
[168,178,182,193,175,0,166,170],
[167,159,172,171,185,175,0,167],
[177,162,184,187,175,171,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,181,170,164,180,164,163],
[168,0,185,159,161,168,158,156],
[160,156,0,162,159,155,159,156],
[171,182,179,0,162,165,159,164],
[177,180,182,179,0,179,165,175],
[161,173,186,176,162,0,162,170],
[177,183,182,182,176,179,0,169],
[178,185,185,177,166,171,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,185,153,156,172,168,160],
[167,0,185,156,166,168,169,169],
[156,156,0,147,149,154,156,155],
[188,185,194,0,168,182,174,174],
[185,175,192,173,0,167,176,164],
[169,173,187,159,174,0,164,176],
[173,172,185,167,165,177,0,171],
[181,172,186,167,177,165,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,170,177,185,170,179,208],
[184,0,162,167,186,189,172,184],
[171,179,0,173,185,167,162,195],
[164,174,168,0,175,175,158,201],
[156,155,156,166,0,167,131,168],
[171,152,174,166,174,0,158,195],
[162,169,179,183,210,183,0,205],
[133,157,146,140,173,146,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,172,166,176,169,180,166],
[162,0,160,171,185,159,159,176],
[169,181,0,172,186,167,182,175],
[175,170,169,0,183,173,161,190],
[165,156,155,158,0,139,160,174],
[172,182,174,168,202,0,172,197],
[161,182,159,180,181,169,0,191],
[175,165,166,151,167,144,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,212,173,150,189,205,214],
[184,0,188,203,157,157,247,178],
[129,153,0,158,100,168,188,174],
[168,138,183,0,159,180,183,192],
[191,184,241,182,0,153,209,199],
[152,184,173,161,188,0,212,188],
[136,94,153,158,132,129,0,155],
[127,163,167,149,142,153,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,188,177,185,175,173,177],
[178,0,192,186,171,183,166,173],
[153,149,0,180,163,165,153,154],
[164,155,161,0,182,175,175,179],
[156,170,178,159,0,168,153,152],
[166,158,176,166,173,0,172,175],
[168,175,188,166,188,169,0,169],
[164,168,187,162,189,166,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,125,112,85,128,181,155],
[218,0,140,125,132,138,222,176],
[216,201,0,158,187,196,261,184],
[229,216,183,0,170,207,272,198],
[256,209,154,171,0,143,248,178],
[213,203,145,134,198,0,253,159],
[160,119,80,69,93,88,0,130],
[186,165,157,143,163,182,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,184,179,201,162,174,166],
[182,0,168,177,170,198,187,167],
[157,173,0,138,175,151,140,182],
[162,164,203,0,175,204,201,192],
[140,171,166,166,0,202,168,186],
[179,143,190,137,139,0,146,164],
[167,154,201,140,173,195,0,191],
[175,174,159,149,155,177,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,177,173,161,177,177,165],
[159,0,201,155,173,164,169,182],
[164,140,0,127,160,155,161,147],
[168,186,214,0,187,193,192,166],
[180,168,181,154,0,166,176,155],
[164,177,186,148,175,0,191,156],
[164,172,180,149,165,150,0,168],
[176,159,194,175,186,185,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,174,164,181,160,173,176],
[174,0,162,177,167,156,151,166],
[167,179,0,165,173,173,157,167],
[177,164,176,0,176,168,176,177],
[160,174,168,165,0,159,167,174],
[181,185,168,173,182,0,171,176],
[168,190,184,165,174,170,0,175],
[165,175,174,164,167,165,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,158,176,164,152,150,145],
[178,0,176,178,183,171,151,159],
[183,165,0,172,169,164,160,174],
[165,163,169,0,172,159,154,162],
[177,158,172,169,0,160,165,165],
[189,170,177,182,181,0,168,174],
[191,190,181,187,176,173,0,169],
[196,182,167,179,176,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,203,198,168,168,199,207],
[178,0,222,195,190,154,204,186],
[138,119,0,140,117,123,142,159],
[143,146,201,0,134,122,153,153],
[173,151,224,207,0,172,200,174],
[173,187,218,219,169,0,179,198],
[142,137,199,188,141,162,0,178],
[134,155,182,188,167,143,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,187,160,167,176,171,172],
[167,0,164,163,181,161,165,167],
[154,177,0,178,167,161,186,157],
[181,178,163,0,172,161,173,159],
[174,160,174,169,0,142,171,154],
[165,180,180,180,199,0,180,175],
[170,176,155,168,170,161,0,165],
[169,174,184,182,187,166,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,174,174,168,158,186,177],
[162,0,177,161,168,150,169,171],
[167,164,0,168,161,163,190,164],
[167,180,173,0,185,172,195,185],
[173,173,180,156,0,161,179,179],
[183,191,178,169,180,0,188,177],
[155,172,151,146,162,153,0,170],
[164,170,177,156,162,164,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,171,163,177,188,167,165],
[174,0,171,149,171,170,156,172],
[170,170,0,148,157,169,165,170],
[178,192,193,0,183,181,167,178],
[164,170,184,158,0,162,153,163],
[153,171,172,160,179,0,162,170],
[174,185,176,174,188,179,0,167],
[176,169,171,163,178,171,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,172,166,177,176,169,181],
[158,0,181,171,164,171,159,170],
[169,160,0,170,173,162,164,166],
[175,170,171,0,178,169,186,161],
[164,177,168,163,0,187,167,161],
[165,170,179,172,154,0,178,184],
[172,182,177,155,174,163,0,164],
[160,171,175,180,180,157,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,171,186,163,167,168,173],
[163,0,171,189,181,182,176,173],
[170,170,0,177,170,195,179,184],
[155,152,164,0,164,176,176,164],
[178,160,171,177,0,176,176,175],
[174,159,146,165,165,0,167,175],
[173,165,162,165,165,174,0,164],
[168,168,157,177,166,166,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,190,215,169,184,175,185],
[168,0,183,192,175,184,179,173],
[151,158,0,191,137,173,157,160],
[126,149,150,0,152,148,140,152],
[172,166,204,189,0,218,186,157],
[157,157,168,193,123,0,158,158],
[166,162,184,201,155,183,0,183],
[156,168,181,189,184,183,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,178,168,192,174,163,171],
[182,0,183,157,181,185,166,162],
[163,158,0,158,164,155,159,149],
[173,184,183,0,183,178,173,160],
[149,160,177,158,0,156,161,156],
[167,156,186,163,185,0,165,165],
[178,175,182,168,180,176,0,163],
[170,179,192,181,185,176,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,181,164,171,136,159,176],
[197,0,207,177,185,166,178,211],
[160,134,0,138,180,141,132,167],
[177,164,203,0,189,160,182,200],
[170,156,161,152,0,156,154,167],
[205,175,200,181,185,0,170,197],
[182,163,209,159,187,171,0,199],
[165,130,174,141,174,144,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,156,157,164,138,162,154],
[195,0,168,165,178,170,186,168],
[185,173,0,170,184,175,189,161],
[184,176,171,0,182,156,182,168],
[177,163,157,159,0,155,173,149],
[203,171,166,185,186,0,183,176],
[179,155,152,159,168,158,0,158],
[187,173,180,173,192,165,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,164,154,164,158,174,154],
[204,0,193,191,177,190,165,208],
[177,148,0,218,156,175,211,209],
[187,150,123,0,160,134,218,186],
[177,164,185,181,0,186,168,183],
[183,151,166,207,155,0,175,160],
[167,176,130,123,173,166,0,157],
[187,133,132,155,158,181,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,188,192,193,182,161,178],
[134,0,149,155,177,146,136,152],
[153,192,0,188,200,179,167,201],
[149,186,153,0,166,184,149,160],
[148,164,141,175,0,160,146,177],
[159,195,162,157,181,0,155,167],
[180,205,174,192,195,186,0,165],
[163,189,140,181,164,174,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,164,174,177,181,194,163],
[180,0,186,165,187,209,187,171],
[177,155,0,167,181,180,195,182],
[167,176,174,0,207,182,186,175],
[164,154,160,134,0,162,199,148],
[160,132,161,159,179,0,151,156],
[147,154,146,155,142,190,0,171],
[178,170,159,166,193,185,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,181,177,175,191,181,167],
[166,0,177,166,176,180,172,174],
[160,164,0,177,172,161,174,168],
[164,175,164,0,171,185,177,163],
[166,165,169,170,0,162,173,173],
[150,161,180,156,179,0,171,167],
[160,169,167,164,168,170,0,169],
[174,167,173,178,168,174,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,208,182,166,162,173,184],
[149,0,151,186,174,128,177,157],
[133,190,0,176,190,126,166,164],
[159,155,165,0,177,137,138,160],
[175,167,151,164,0,140,153,163],
[179,213,215,204,201,0,164,171],
[168,164,175,203,188,177,0,173],
[157,184,177,181,178,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,185,177,202,121,128,165],
[106,0,205,238,235,173,154,200],
[156,136,0,148,221,217,188,170],
[164,103,193,0,219,156,124,121],
[139,106,120,122,0,112,139,138],
[220,168,124,185,229,0,101,183],
[213,187,153,217,202,240,0,258],
[176,141,171,220,203,158,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,141,181,185,165,152,162],
[167,0,147,190,155,151,153,187],
[200,194,0,176,156,176,147,160],
[160,151,165,0,156,155,131,151],
[156,186,185,185,0,147,158,164],
[176,190,165,186,194,0,180,195],
[189,188,194,210,183,161,0,182],
[179,154,181,190,177,146,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,156,162,169,158,179,170],
[161,0,149,167,165,157,186,164],
[185,192,0,174,176,173,206,169],
[179,174,167,0,160,180,187,173],
[172,176,165,181,0,170,183,161],
[183,184,168,161,171,0,164,163],
[162,155,135,154,158,177,0,156],
[171,177,172,168,180,178,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,146,147,165,142,169,153],
[175,0,189,168,170,152,184,167],
[195,152,0,158,178,158,166,166],
[194,173,183,0,187,167,175,165],
[176,171,163,154,0,171,160,168],
[199,189,183,174,170,0,182,173],
[172,157,175,166,181,159,0,146],
[188,174,175,176,173,168,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,175,166,185,183,189,168],
[167,0,155,213,191,200,212,191],
[166,186,0,177,179,191,185,164],
[175,128,164,0,163,162,182,151],
[156,150,162,178,0,174,189,183],
[158,141,150,179,167,0,188,160],
[152,129,156,159,152,153,0,145],
[173,150,177,190,158,181,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,169,170,194,175,163,178],
[168,0,152,147,173,157,158,164],
[172,189,0,170,188,174,175,184],
[171,194,171,0,168,178,155,166],
[147,168,153,173,0,166,170,166],
[166,184,167,163,175,0,175,182],
[178,183,166,186,171,166,0,178],
[163,177,157,175,175,159,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,169,186,174,169,160,181],
[174,0,182,176,185,175,165,176],
[172,159,0,167,176,181,166,175],
[155,165,174,0,170,158,164,171],
[167,156,165,171,0,159,163,154],
[172,166,160,183,182,0,173,181],
[181,176,175,177,178,168,0,168],
[160,165,166,170,187,160,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,183,182,187,168,177,184],
[159,0,161,170,174,172,168,174],
[158,180,0,173,173,172,166,176],
[159,171,168,0,160,179,171,173],
[154,167,168,181,0,184,174,171],
[173,169,169,162,157,0,182,173],
[164,173,175,170,167,159,0,172],
[157,167,165,168,170,168,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,179,197,167,171,169,162],
[147,0,146,172,158,164,160,158],
[162,195,0,199,155,168,187,157],
[144,169,142,0,137,163,154,150],
[174,183,186,204,0,190,155,172],
[170,177,173,178,151,0,150,140],
[172,181,154,187,186,191,0,175],
[179,183,184,191,169,201,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,187,195,223,183,207,175],
[196,0,170,200,213,196,202,183],
[154,171,0,182,178,179,181,196],
[146,141,159,0,179,191,176,144],
[118,128,163,162,0,164,161,169],
[158,145,162,150,177,0,180,153],
[134,139,160,165,180,161,0,155],
[166,158,145,197,172,188,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,179,190,171,178,160,164],
[155,0,181,195,165,194,176,181],
[162,160,0,184,155,191,165,157],
[151,146,157,0,155,190,145,165],
[170,176,186,186,0,192,158,157],
[163,147,150,151,149,0,164,151],
[181,165,176,196,183,177,0,178],
[177,160,184,176,184,190,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,164,157,157,174,175,135],
[163,0,181,172,152,147,167,174],
[177,160,0,187,150,157,181,167],
[184,169,154,0,129,148,171,154],
[184,189,191,212,0,169,213,180],
[167,194,184,193,172,0,197,174],
[166,174,160,170,128,144,0,166],
[206,167,174,187,161,167,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,162,173,171,159,159,180],
[183,0,176,166,181,168,183,193],
[179,165,0,168,185,180,164,176],
[168,175,173,0,162,174,157,192],
[170,160,156,179,0,154,147,164],
[182,173,161,167,187,0,166,190],
[182,158,177,184,194,175,0,175],
[161,148,165,149,177,151,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,186,172,161,202,179,156],
[154,0,194,149,172,191,151,160],
[155,147,0,120,144,159,142,144],
[169,192,221,0,183,209,199,150],
[180,169,197,158,0,213,157,183],
[139,150,182,132,128,0,155,132],
[162,190,199,142,184,186,0,186],
[185,181,197,191,158,209,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,167,169,171,177,179,156],
[163,0,169,157,163,164,163,157],
[174,172,0,167,174,171,174,168],
[172,184,174,0,173,171,172,157],
[170,178,167,168,0,167,160,152],
[164,177,170,170,174,0,173,161],
[162,178,167,169,181,168,0,173],
[185,184,173,184,189,180,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,193,173,187,179,193,179],
[173,0,187,167,171,194,201,151],
[148,154,0,154,158,153,183,157],
[168,174,187,0,201,190,198,167],
[154,170,183,140,0,169,183,145],
[162,147,188,151,172,0,189,152],
[148,140,158,143,158,152,0,145],
[162,190,184,174,196,189,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,188,158,197,163,168,178],
[127,0,147,116,173,133,144,166],
[153,194,0,148,179,168,170,176],
[183,225,193,0,217,204,169,183],
[144,168,162,124,0,168,156,164],
[178,208,173,137,173,0,181,166],
[173,197,171,172,185,160,0,156],
[163,175,165,158,177,175,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,192,190,164,189,185,174],
[129,0,153,158,124,148,152,155],
[149,188,0,167,137,166,174,182],
[151,183,174,0,139,168,173,154],
[177,217,204,202,0,168,193,194],
[152,193,175,173,173,0,174,166],
[156,189,167,168,148,167,0,165],
[167,186,159,187,147,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,167,188,200,163,173,219],
[126,0,135,162,175,110,176,161],
[174,206,0,159,189,177,189,183],
[153,179,182,0,172,147,171,172],
[141,166,152,169,0,126,152,152],
[178,231,164,194,215,0,181,212],
[168,165,152,170,189,160,0,161],
[122,180,158,169,189,129,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,232,175,214,214,207,209],
[179,0,172,147,234,198,182,194],
[109,169,0,150,187,163,196,226],
[166,194,191,0,167,167,175,205],
[127,107,154,174,0,130,110,163],
[127,143,178,174,211,0,210,214],
[134,159,145,166,231,131,0,246],
[132,147,115,136,178,127,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,179,171,166,184,184,179],
[168,0,187,175,172,184,160,168],
[162,154,0,161,170,161,162,166],
[170,166,180,0,161,169,163,158],
[175,169,171,180,0,179,160,161],
[157,157,180,172,162,0,165,158],
[157,181,179,178,181,176,0,164],
[162,173,175,183,180,183,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,170,186,175,179,171,176],
[157,0,160,179,174,175,158,167],
[171,181,0,172,174,168,176,178],
[155,162,169,0,176,166,158,164],
[166,167,167,165,0,165,155,170],
[162,166,173,175,176,0,142,167],
[170,183,165,183,186,199,0,173],
[165,174,163,177,171,174,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,184,158,189,192,175,181],
[164,0,173,180,186,160,182,177],
[157,168,0,168,182,159,160,165],
[183,161,173,0,155,162,182,182],
[152,155,159,186,0,157,163,172],
[149,181,182,179,184,0,165,177],
[166,159,181,159,178,176,0,190],
[160,164,176,159,169,164,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,171,172,165,174,170,166],
[149,0,176,145,143,162,154,151],
[170,165,0,170,165,169,159,182],
[169,196,171,0,171,179,146,166],
[176,198,176,170,0,196,179,159],
[167,179,172,162,145,0,178,165],
[171,187,182,195,162,163,0,172],
[175,190,159,175,182,176,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,168,173,175,174,167,174],
[159,0,171,157,172,158,176,170],
[173,170,0,163,173,167,163,169],
[168,184,178,0,174,165,181,166],
[166,169,168,167,0,163,168,163],
[167,183,174,176,178,0,169,170],
[174,165,178,160,173,172,0,157],
[167,171,172,175,178,171,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,180,169,168,158,132,208],
[185,0,137,147,173,153,150,141],
[161,204,0,183,205,202,173,213],
[172,194,158,0,158,173,225,211],
[173,168,136,183,0,171,191,202],
[183,188,139,168,170,0,133,196],
[209,191,168,116,150,208,0,214],
[133,200,128,130,139,145,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,164,154,145,142,154,161],
[156,0,168,160,166,149,174,169],
[177,173,0,167,168,187,168,180],
[187,181,174,0,167,149,171,175],
[196,175,173,174,0,179,158,167],
[199,192,154,192,162,0,185,190],
[187,167,173,170,183,156,0,167],
[180,172,161,166,174,151,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,151,159,174,172,182,173],
[181,0,176,172,163,172,185,174],
[190,165,0,175,181,179,173,182],
[182,169,166,0,177,168,177,174],
[167,178,160,164,0,165,174,168],
[169,169,162,173,176,0,172,168],
[159,156,168,164,167,169,0,165],
[168,167,159,167,173,173,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,218,138,156,150,197,153],
[57,0,110,100,82,112,104,91],
[123,231,0,163,201,178,180,153],
[203,241,178,0,156,137,208,174],
[185,259,140,185,0,152,238,128],
[191,229,163,204,189,0,201,201],
[144,237,161,133,103,140,0,136],
[188,250,188,167,213,140,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,175,167,149,164,152,162],
[184,0,184,170,176,171,181,173],
[166,157,0,162,149,164,171,166],
[174,171,179,0,168,158,175,179],
[192,165,192,173,0,178,183,175],
[177,170,177,183,163,0,175,162],
[189,160,170,166,158,166,0,175],
[179,168,175,162,166,179,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,254,137,141,225,208,191],
[136,0,275,178,189,195,200,200],
[87,66,0,131,118,130,80,164],
[204,163,210,0,182,266,166,211],
[200,152,223,159,0,331,198,194],
[116,146,211,75,10,0,146,146],
[133,141,261,175,143,195,0,195],
[150,141,177,130,147,195,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,173,181,161,168,162,179],
[172,0,180,195,174,164,175,164],
[168,161,0,199,148,159,157,149],
[160,146,142,0,142,157,160,162],
[180,167,193,199,0,171,195,162],
[173,177,182,184,170,0,173,155],
[179,166,184,181,146,168,0,174],
[162,177,192,179,179,186,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,214,211,181,191,186,176],
[182,0,215,237,210,190,166,205],
[127,126,0,153,172,164,113,132],
[130,104,188,0,203,152,147,175],
[160,131,169,138,0,151,165,155],
[150,151,177,189,190,0,157,174],
[155,175,228,194,176,184,0,191],
[165,136,209,166,186,167,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,171,242,232,152,183,174],
[146,0,128,202,257,179,145,149],
[170,213,0,228,243,209,170,216],
[99,139,113,0,180,131,117,143],
[109,84,98,161,0,94,125,74],
[189,162,132,210,247,0,188,180],
[158,196,171,224,216,153,0,163],
[167,192,125,198,267,161,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,150,153,132,143,162,167],
[193,0,163,175,181,161,159,172],
[191,178,0,178,154,173,148,189],
[188,166,163,0,153,181,154,187],
[209,160,187,188,0,168,175,184],
[198,180,168,160,173,0,164,154],
[179,182,193,187,166,177,0,197],
[174,169,152,154,157,187,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,156,168,139,170,163,156],
[191,0,176,152,157,182,165,178],
[185,165,0,170,178,177,170,186],
[173,189,171,0,180,198,186,169],
[202,184,163,161,0,165,182,176],
[171,159,164,143,176,0,175,171],
[178,176,171,155,159,166,0,159],
[185,163,155,172,165,170,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,199,230,212,190,168,166],
[151,0,175,169,180,112,114,152],
[142,166,0,244,236,133,132,202],
[111,172,97,0,181,77,87,82],
[129,161,105,160,0,99,85,140],
[151,229,208,264,242,0,197,236],
[173,227,209,254,256,144,0,185],
[175,189,139,259,201,105,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,180,183,167,179,180,175],
[155,0,137,164,157,148,159,167],
[161,204,0,172,182,185,181,177],
[158,177,169,0,176,165,158,165],
[174,184,159,165,0,190,161,187],
[162,193,156,176,151,0,172,187],
[161,182,160,183,180,169,0,163],
[166,174,164,176,154,154,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,96,141,177,117,193,166],
[147,0,115,161,120,133,131,146],
[245,226,0,150,136,154,170,155],
[200,180,191,0,124,151,180,191],
[164,221,205,217,0,195,243,246],
[224,208,187,190,146,0,199,203],
[148,210,171,161,98,142,0,189],
[175,195,186,150,95,138,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,177,139,148,150,154,164],
[173,0,188,174,166,153,172,134],
[164,153,0,150,175,143,126,166],
[202,167,191,0,190,168,145,179],
[193,175,166,151,0,134,152,140],
[191,188,198,173,207,0,166,184],
[187,169,215,196,189,175,0,180],
[177,207,175,162,201,157,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,153,192,155,183,135,167],
[200,0,179,202,179,190,172,166],
[188,162,0,206,178,188,132,189],
[149,139,135,0,139,144,97,134],
[186,162,163,202,0,179,147,173],
[158,151,153,197,162,0,125,172],
[206,169,209,244,194,216,0,210],
[174,175,152,207,168,169,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,163,169,159,171,186,173],
[179,0,169,172,168,174,182,178],
[178,172,0,161,163,167,189,180],
[172,169,180,0,161,176,184,181],
[182,173,178,180,0,161,185,180],
[170,167,174,165,180,0,183,174],
[155,159,152,157,156,158,0,163],
[168,163,161,160,161,167,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,164,179,185,173,178,171],
[154,0,158,165,186,177,185,167],
[177,183,0,214,198,190,160,176],
[162,176,127,0,185,148,144,167],
[156,155,143,156,0,153,145,187],
[168,164,151,193,188,0,177,172],
[163,156,181,197,196,164,0,196],
[170,174,165,174,154,169,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,163,167,192,184,176,165],
[154,0,177,156,166,161,172,173],
[178,164,0,179,191,203,178,169],
[174,185,162,0,173,182,177,174],
[149,175,150,168,0,158,187,163],
[157,180,138,159,183,0,162,160],
[165,169,163,164,154,179,0,175],
[176,168,172,167,178,181,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,199,172,210,212,168,158],
[167,0,212,138,167,184,168,172],
[142,129,0,116,170,170,148,132],
[169,203,225,0,195,194,191,164],
[131,174,171,146,0,167,148,168],
[129,157,171,147,174,0,154,135],
[173,173,193,150,193,187,0,147],
[183,169,209,177,173,206,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,177,167,179,187,181,177],
[169,0,170,168,176,178,170,156],
[164,171,0,180,168,167,167,165],
[174,173,161,0,177,180,181,160],
[162,165,173,164,0,170,182,172],
[154,163,174,161,171,0,173,170],
[160,171,174,160,159,168,0,169],
[164,185,176,181,169,171,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,169,197,168,179,203,179],
[134,0,155,178,144,164,172,142],
[172,186,0,203,144,174,199,174],
[144,163,138,0,143,147,160,148],
[173,197,197,198,0,171,189,166],
[162,177,167,194,170,0,208,144],
[138,169,142,181,152,133,0,151],
[162,199,167,193,175,197,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,134,173,126,222,184,189],
[184,0,131,135,160,201,205,159],
[207,210,0,123,141,217,181,185],
[168,206,218,0,198,167,212,200],
[215,181,200,143,0,193,190,160],
[119,140,124,174,148,0,201,142],
[157,136,160,129,151,140,0,122],
[152,182,156,141,181,199,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,180,165,163,165,168,168],
[175,0,173,170,166,146,181,161],
[161,168,0,161,159,153,159,148],
[176,171,180,0,174,171,178,170],
[178,175,182,167,0,183,176,188],
[176,195,188,170,158,0,182,173],
[173,160,182,163,165,159,0,173],
[173,180,193,171,153,168,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,180,201,169,163,172,152],
[156,0,162,190,154,149,181,161],
[161,179,0,194,173,170,188,178],
[140,151,147,0,137,145,169,148],
[172,187,168,204,0,158,198,190],
[178,192,171,196,183,0,201,170],
[169,160,153,172,143,140,0,138],
[189,180,163,193,151,171,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,161,171,166,163,167,180],
[162,0,154,159,162,168,159,158],
[180,187,0,174,178,170,176,165],
[170,182,167,0,174,166,171,178],
[175,179,163,167,0,174,157,167],
[178,173,171,175,167,0,167,163],
[174,182,165,170,184,174,0,166],
[161,183,176,163,174,178,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,165,159,199,178,171,155],
[155,0,169,173,179,183,173,164],
[176,172,0,172,167,167,166,159],
[182,168,169,0,174,173,178,155],
[142,162,174,167,0,174,158,175],
[163,158,174,168,167,0,170,171],
[170,168,175,163,183,171,0,169],
[186,177,182,186,166,170,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,194,178,165,176,179,179],
[162,0,171,171,173,181,185,192],
[147,170,0,155,156,167,165,177],
[163,170,186,0,156,174,187,189],
[176,168,185,185,0,184,184,186],
[165,160,174,167,157,0,176,184],
[162,156,176,154,157,165,0,177],
[162,149,164,152,155,157,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,154,177,172,160,177,159],
[169,0,172,188,172,176,187,185],
[187,169,0,177,190,185,193,152],
[164,153,164,0,148,156,163,152],
[169,169,151,193,0,174,201,169],
[181,165,156,185,167,0,190,161],
[164,154,148,178,140,151,0,147],
[182,156,189,189,172,180,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,177,182,180,173,177],
[172,0,173,161,168,159,159,180],
[175,168,0,157,166,154,161,168],
[164,180,184,0,192,186,170,182],
[159,173,175,149,0,152,168,168],
[161,182,187,155,189,0,170,167],
[168,182,180,171,173,171,0,193],
[164,161,173,159,173,174,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,175,203,138,197,185,172],
[185,0,141,200,159,156,144,151],
[166,200,0,166,148,183,155,150],
[138,141,175,0,142,155,124,131],
[203,182,193,199,0,176,163,185],
[144,185,158,186,165,0,176,177],
[156,197,186,217,178,165,0,185],
[169,190,191,210,156,164,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,167,146,168,156,160,163],
[183,0,170,170,171,184,188,192],
[174,171,0,162,182,167,172,170],
[195,171,179,0,172,155,184,188],
[173,170,159,169,0,140,191,161],
[185,157,174,186,201,0,173,190],
[181,153,169,157,150,168,0,163],
[178,149,171,153,180,151,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,170,167,173,172,187,163],
[182,0,169,149,164,176,190,168],
[171,172,0,170,169,174,184,179],
[174,192,171,0,174,164,174,174],
[168,177,172,167,0,162,178,179],
[169,165,167,177,179,0,180,166],
[154,151,157,167,163,161,0,162],
[178,173,162,167,162,175,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,240,240,154,128,222,149],
[252,0,151,240,185,247,285,252],
[101,190,0,311,192,126,229,250],
[101,101,30,0,64,63,229,131],
[187,156,149,277,0,126,285,149],
[213,94,215,278,215,0,248,150],
[119,56,112,112,56,93,0,86],
[192,89,91,210,192,191,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,153,155,167,161,164,176],
[175,0,180,153,158,153,180,173],
[188,161,0,161,172,161,159,174],
[186,188,180,0,164,157,172,171],
[174,183,169,177,0,171,168,170],
[180,188,180,184,170,0,186,177],
[177,161,182,169,173,155,0,162],
[165,168,167,170,171,164,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,179,184,167,169,174,172],
[164,0,180,174,184,176,173,181],
[162,161,0,172,168,173,163,163],
[157,167,169,0,172,164,162,170],
[174,157,173,169,0,158,158,168],
[172,165,168,177,183,0,161,182],
[167,168,178,179,183,180,0,179],
[169,160,178,171,173,159,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,157,172,152,162,144,160],
[189,0,171,184,168,174,177,184],
[184,170,0,190,177,180,170,200],
[169,157,151,0,160,174,164,165],
[189,173,164,181,0,188,173,187],
[179,167,161,167,153,0,167,176],
[197,164,171,177,168,174,0,185],
[181,157,141,176,154,165,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,184,181,181,166,156,172],
[169,0,169,178,179,162,174,182],
[157,172,0,157,149,159,172,177],
[160,163,184,0,168,165,165,172],
[160,162,192,173,0,130,158,160],
[175,179,182,176,211,0,196,167],
[185,167,169,176,183,145,0,159],
[169,159,164,169,181,174,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,159,158,155,146,161,170],
[188,0,173,171,188,178,170,176],
[182,168,0,175,171,179,174,163],
[183,170,166,0,175,175,180,186],
[186,153,170,166,0,149,157,180],
[195,163,162,166,192,0,183,196],
[180,171,167,161,184,158,0,168],
[171,165,178,155,161,145,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,178,178,133,160,150,161],
[167,0,161,167,147,182,168,181],
[163,180,0,171,185,167,201,166],
[163,174,170,0,167,173,144,165],
[208,194,156,174,0,177,176,171],
[181,159,174,168,164,0,184,153],
[191,173,140,197,165,157,0,162],
[180,160,175,176,170,188,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,129,220,173,172,184,231],
[156,0,223,173,267,204,184,204],
[212,118,0,217,260,201,212,225],
[121,168,124,0,168,105,102,140],
[168,74,81,173,0,77,179,234],
[169,137,140,236,264,0,149,170],
[157,157,129,239,162,192,0,170],
[110,137,116,201,107,171,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,171,175,160,179,174,169],
[173,0,174,186,160,179,170,183],
[170,167,0,160,156,168,166,165],
[166,155,181,0,159,172,171,172],
[181,181,185,182,0,178,170,180],
[162,162,173,169,163,0,164,173],
[167,171,175,170,171,177,0,175],
[172,158,176,169,161,168,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,190,177,192,180,174,184],
[171,0,186,166,183,172,178,178],
[151,155,0,149,184,172,163,169],
[164,175,192,0,197,191,173,186],
[149,158,157,144,0,156,159,156],
[161,169,169,150,185,0,175,164],
[167,163,178,168,182,166,0,175],
[157,163,172,155,185,177,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,86,204,126,161,202,86],
[95,0,43,77,138,130,130,90],
[255,298,0,251,297,135,219,95],
[137,264,90,0,143,178,143,180],
[215,203,44,198,0,119,76,139],
[180,211,206,163,222,0,138,180],
[139,211,122,198,265,203,0,139],
[255,251,246,161,202,161,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,197,183,178,171,163,167],
[170,0,196,189,188,168,181,167],
[144,145,0,173,155,165,163,156],
[158,152,168,0,150,156,158,159],
[163,153,186,191,0,161,179,167],
[170,173,176,185,180,0,173,181],
[178,160,178,183,162,168,0,167],
[174,174,185,182,174,160,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,174,169,177,167,166,159],
[183,0,187,180,182,166,164,185],
[167,154,0,155,160,176,143,151],
[172,161,186,0,168,165,161,173],
[164,159,181,173,0,174,173,175],
[174,175,165,176,167,0,163,158],
[175,177,198,180,168,178,0,159],
[182,156,190,168,166,183,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,172,173,167,171,171,180],
[196,0,173,177,183,169,197,174],
[169,168,0,166,159,157,169,164],
[168,164,175,0,178,148,181,161],
[174,158,182,163,0,153,160,159],
[170,172,184,193,188,0,163,169],
[170,144,172,160,181,178,0,169],
[161,167,177,180,182,172,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,222,187,154,201,173,237],
[169,0,223,190,178,173,194,209],
[119,118,0,173,134,211,146,184],
[154,151,168,0,155,184,159,184],
[187,163,207,186,0,175,183,203],
[140,168,130,157,166,0,126,180],
[168,147,195,182,158,215,0,215],
[104,132,157,157,138,161,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,179,174,175,177,176,168],
[155,0,176,162,155,176,166,172],
[162,165,0,173,170,184,168,169],
[167,179,168,0,167,178,173,164],
[166,186,171,174,0,169,168,173],
[164,165,157,163,172,0,163,167],
[165,175,173,168,173,178,0,166],
[173,169,172,177,168,174,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,183,156,167,180,167,163],
[172,0,176,167,169,172,151,170],
[158,165,0,173,163,176,154,161],
[185,174,168,0,178,183,164,170],
[174,172,178,163,0,197,175,180],
[161,169,165,158,144,0,159,156],
[174,190,187,177,166,182,0,183],
[178,171,180,171,161,185,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,169,157,175,147,154,181],
[180,0,172,163,181,170,146,174],
[172,169,0,173,194,172,168,175],
[184,178,168,0,190,155,171,176],
[166,160,147,151,0,151,156,167],
[194,171,169,186,190,0,166,197],
[187,195,173,170,185,175,0,189],
[160,167,166,165,174,144,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,156,159,158,160,181,165],
[169,0,178,184,185,169,175,188],
[185,163,0,175,159,163,180,160],
[182,157,166,0,165,174,170,159],
[183,156,182,176,0,163,172,166],
[181,172,178,167,178,0,164,163],
[160,166,161,171,169,177,0,174],
[176,153,181,182,175,178,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,155,152,156,165,148,155],
[188,0,158,175,178,190,179,183],
[186,183,0,162,172,166,155,166],
[189,166,179,0,160,186,154,161],
[185,163,169,181,0,174,166,155],
[176,151,175,155,167,0,151,158],
[193,162,186,187,175,190,0,176],
[186,158,175,180,186,183,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,225,119,227,198,155,167],
[152,0,217,128,213,188,147,170],
[116,124,0,124,151,99,92,209],
[222,213,217,0,239,174,113,184],
[114,128,190,102,0,172,174,185],
[143,153,242,167,169,0,169,207],
[186,194,249,228,167,172,0,275],
[174,171,132,157,156,134,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,179,167,170,163,163,165],
[173,0,168,169,181,181,158,169],
[162,173,0,163,182,158,171,170],
[174,172,178,0,177,154,156,167],
[171,160,159,164,0,161,159,176],
[178,160,183,187,180,0,169,172],
[178,183,170,185,182,172,0,168],
[176,172,171,174,165,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,159,171,162,153,152,156],
[183,0,175,171,168,164,162,188],
[182,166,0,170,156,185,155,176],
[170,170,171,0,187,174,154,177],
[179,173,185,154,0,153,173,162],
[188,177,156,167,188,0,152,184],
[189,179,186,187,168,189,0,187],
[185,153,165,164,179,157,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,174,143,140,162,136,153],
[234,0,220,193,180,150,212,202],
[167,121,0,134,163,143,142,211],
[198,148,207,0,180,179,156,183],
[201,161,178,161,0,169,174,184],
[179,191,198,162,172,0,133,173],
[205,129,199,185,167,208,0,191],
[188,139,130,158,157,168,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,176,113,136,133,190,149],
[195,0,187,168,164,174,210,144],
[165,154,0,139,135,124,142,151],
[228,173,202,0,173,139,216,162],
[205,177,206,168,0,157,174,165],
[208,167,217,202,184,0,212,196],
[151,131,199,125,167,129,0,120],
[192,197,190,179,176,145,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,177,168,175,169,179,170],
[157,0,173,161,154,162,171,160],
[164,168,0,141,140,173,170,158],
[173,180,200,0,167,174,174,173],
[166,187,201,174,0,184,185,168],
[172,179,168,167,157,0,160,169],
[162,170,171,167,156,181,0,157],
[171,181,183,168,173,172,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,190,166,160,181,170,163],
[161,0,156,152,163,180,134,156],
[151,185,0,178,169,166,177,158],
[175,189,163,0,156,180,168,181],
[181,178,172,185,0,186,172,163],
[160,161,175,161,155,0,168,153],
[171,207,164,173,169,173,0,165],
[178,185,183,160,178,188,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,178,180,187,172,180,187],
[173,0,172,155,180,171,169,165],
[163,169,0,183,173,166,166,173],
[161,186,158,0,175,171,170,171],
[154,161,168,166,0,151,161,155],
[169,170,175,170,190,0,174,187],
[161,172,175,171,180,167,0,175],
[154,176,168,170,186,154,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,160,160,169,158,176,166],
[174,0,167,165,162,159,174,167],
[181,174,0,174,168,178,194,180],
[181,176,167,0,178,179,189,189],
[172,179,173,163,0,166,183,181],
[183,182,163,162,175,0,176,170],
[165,167,147,152,158,165,0,171],
[175,174,161,152,160,171,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,164,169,174,179,176,173],
[169,0,185,171,168,170,176,171],
[177,156,0,172,168,182,166,172],
[172,170,169,0,179,184,171,181],
[167,173,173,162,0,175,172,170],
[162,171,159,157,166,0,168,163],
[165,165,175,170,169,173,0,163],
[168,170,169,160,171,178,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,172,176,155,160,168,153],
[190,0,199,185,173,170,181,183],
[169,142,0,162,149,163,160,155],
[165,156,179,0,151,173,167,179],
[186,168,192,190,0,183,190,176],
[181,171,178,168,158,0,145,179],
[173,160,181,174,151,196,0,157],
[188,158,186,162,165,162,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,191,192,158,201,142,161],
[193,0,205,151,159,195,186,198],
[150,136,0,163,158,132,156,108],
[149,190,178,0,139,220,212,207],
[183,182,183,202,0,226,180,168],
[140,146,209,121,115,0,159,210],
[199,155,185,129,161,182,0,149],
[180,143,233,134,173,131,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,158,186,141,224,208,175],
[153,0,133,188,152,199,188,222],
[183,208,0,204,162,203,185,220],
[155,153,137,0,177,175,182,153],
[200,189,179,164,0,183,162,175],
[117,142,138,166,158,0,193,152],
[133,153,156,159,179,148,0,171],
[166,119,121,188,166,189,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,180,159,169,167,164,167],
[175,0,178,167,172,185,170,171],
[161,163,0,176,165,162,167,154],
[182,174,165,0,149,160,168,164],
[172,169,176,192,0,176,170,172],
[174,156,179,181,165,0,163,166],
[177,171,174,173,171,178,0,161],
[174,170,187,177,169,175,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,164,170,141,163,158,126],
[198,0,179,203,171,182,172,165],
[177,162,0,164,169,166,158,162],
[171,138,177,0,158,160,159,156],
[200,170,172,183,0,189,155,182],
[178,159,175,181,152,0,167,163],
[183,169,183,182,186,174,0,178],
[215,176,179,185,159,178,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,162,174,163,156,172,155],
[192,0,159,182,166,172,177,180],
[179,182,0,183,158,170,171,163],
[167,159,158,0,152,147,158,156],
[178,175,183,189,0,166,166,170],
[185,169,171,194,175,0,159,176],
[169,164,170,183,175,182,0,166],
[186,161,178,185,171,165,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,157,164,153,141,126,131],
[170,0,142,164,147,146,152,150],
[184,199,0,160,163,167,164,151],
[177,177,181,0,191,175,160,164],
[188,194,178,150,0,163,151,172],
[200,195,174,166,178,0,179,170],
[215,189,177,181,190,162,0,165],
[210,191,190,177,169,171,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,193,182,150,169,176,171],
[186,0,184,191,194,177,149,183],
[148,157,0,163,171,179,181,199],
[159,150,178,0,165,184,161,177],
[191,147,170,176,0,161,156,180],
[172,164,162,157,180,0,162,182],
[165,192,160,180,185,179,0,190],
[170,158,142,164,161,159,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,151,163,146,168,174,138],
[186,0,146,159,145,163,181,151],
[190,195,0,183,173,184,197,161],
[178,182,158,0,165,171,187,162],
[195,196,168,176,0,189,189,179],
[173,178,157,170,152,0,175,154],
[167,160,144,154,152,166,0,165],
[203,190,180,179,162,187,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,68,182,160,220,166,173],
[132,0,106,136,142,163,121,118],
[273,235,0,207,188,163,177,215],
[159,205,134,0,217,184,152,149],
[181,199,153,124,0,184,134,174],
[121,178,178,157,157,0,150,150],
[175,220,164,189,207,191,0,252],
[168,223,126,192,167,191,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,158,172,168,146,157,169],
[176,0,184,169,181,169,149,191],
[183,157,0,179,197,175,168,186],
[169,172,162,0,156,143,152,153],
[173,160,144,185,0,159,168,175],
[195,172,166,198,182,0,197,179],
[184,192,173,189,173,144,0,189],
[172,150,155,188,166,162,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,144,162,178,180,180,184],
[188,0,171,179,177,168,174,171],
[197,170,0,159,176,177,187,179],
[179,162,182,0,173,190,197,184],
[163,164,165,168,0,177,166,174],
[161,173,164,151,164,0,190,172],
[161,167,154,144,175,151,0,163],
[157,170,162,157,167,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,153,196,193,155,155,156],
[191,0,187,196,189,166,184,185],
[188,154,0,198,181,173,167,172],
[145,145,143,0,149,175,177,158],
[148,152,160,192,0,166,141,163],
[186,175,168,166,175,0,149,176],
[186,157,174,164,200,192,0,166],
[185,156,169,183,178,165,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,147,147,133,153,167,167],
[240,0,170,173,196,152,183,187],
[194,171,0,145,173,135,182,185],
[194,168,196,0,212,184,159,226],
[208,145,168,129,0,150,153,162],
[188,189,206,157,191,0,177,236],
[174,158,159,182,188,164,0,183],
[174,154,156,115,179,105,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,163,173,200,173,177,171],
[153,0,143,154,165,152,168,158],
[178,198,0,157,193,177,198,166],
[168,187,184,0,183,169,182,179],
[141,176,148,158,0,164,173,150],
[168,189,164,172,177,0,181,185],
[164,173,143,159,168,160,0,165],
[170,183,175,162,191,156,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,169,178,166,180,181,175],
[166,0,177,174,173,185,174,170],
[172,164,0,161,171,170,159,158],
[163,167,180,0,170,164,155,170],
[175,168,170,171,0,190,171,181],
[161,156,171,177,151,0,180,176],
[160,167,182,186,170,161,0,182],
[166,171,183,171,160,165,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,225,155,152,151,200,156],
[111,0,186,152,192,174,120,163],
[116,155,0,113,144,159,108,161],
[186,189,228,0,173,221,149,189],
[189,149,197,168,0,176,171,197],
[190,167,182,120,165,0,140,194],
[141,221,233,192,170,201,0,181],
[185,178,180,152,144,147,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,194,187,151,221,173,192],
[165,0,188,190,164,213,168,175],
[147,153,0,178,180,205,184,185],
[154,151,163,0,136,187,164,183],
[190,177,161,205,0,216,185,210],
[120,128,136,154,125,0,144,145],
[168,173,157,177,156,197,0,187],
[149,166,156,158,131,196,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,183,170,166,181,167,164],
[180,0,169,177,173,192,171,173],
[158,172,0,176,180,184,162,166],
[171,164,165,0,164,179,164,177],
[175,168,161,177,0,169,163,159],
[160,149,157,162,172,0,162,151],
[174,170,179,177,178,179,0,172],
[177,168,175,164,182,190,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,202,113,164,161,197,255],
[165,0,235,183,185,236,178,204],
[139,106,0,147,157,174,159,131],
[228,158,194,0,231,194,204,245],
[177,156,184,110,0,157,193,165],
[180,105,167,147,184,0,197,180],
[144,163,182,137,148,144,0,154],
[86,137,210,96,176,161,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,154,161,178,174,154,162],
[164,0,156,147,149,176,151,148],
[187,185,0,174,174,186,179,169],
[180,194,167,0,167,188,154,174],
[163,192,167,174,0,162,147,184],
[167,165,155,153,179,0,157,180],
[187,190,162,187,194,184,0,171],
[179,193,172,167,157,161,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,209,148,176,246,176,214],
[164,0,187,136,129,147,130,179],
[132,154,0,125,151,181,108,245],
[193,205,216,0,194,197,150,191],
[165,212,190,147,0,149,134,199],
[95,194,160,144,192,0,114,213],
[165,211,233,191,207,227,0,214],
[127,162,96,150,142,128,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,168,168,168,171,174,186],
[170,0,171,161,156,170,163,166],
[173,170,0,180,166,178,177,162],
[173,180,161,0,155,167,175,164],
[173,185,175,186,0,169,163,186],
[170,171,163,174,172,0,174,169],
[167,178,164,166,178,167,0,170],
[155,175,179,177,155,172,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,158,172,162,165,194,156],
[153,0,162,165,172,159,170,163],
[183,179,0,176,177,170,198,177],
[169,176,165,0,173,146,175,173],
[179,169,164,168,0,172,182,173],
[176,182,171,195,169,0,182,182],
[147,171,143,166,159,159,0,161],
[185,178,164,168,168,159,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,175,182,180,157,165,180],
[167,0,162,174,173,163,179,178],
[166,179,0,157,163,165,180,189],
[159,167,184,0,160,179,183,177],
[161,168,178,181,0,179,187,184],
[184,178,176,162,162,0,189,180],
[176,162,161,158,154,152,0,167],
[161,163,152,164,157,161,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,161,179,163,180,175,156],
[172,0,168,201,178,182,176,169],
[180,173,0,168,176,188,154,166],
[162,140,173,0,160,170,143,165],
[178,163,165,181,0,168,142,162],
[161,159,153,171,173,0,162,157],
[166,165,187,198,199,179,0,176],
[185,172,175,176,179,184,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,174,187,167,206,172,180],
[168,0,163,182,191,194,164,162],
[167,178,0,180,192,208,167,167],
[154,159,161,0,158,174,144,154],
[174,150,149,183,0,195,158,157],
[135,147,133,167,146,0,149,145],
[169,177,174,197,183,192,0,169],
[161,179,174,187,184,196,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,176,170,180,181,178,165],
[177,0,192,174,178,170,183,183],
[165,149,0,157,157,151,174,158],
[171,167,184,0,164,160,181,169],
[161,163,184,177,0,171,169,170],
[160,171,190,181,170,0,172,160],
[163,158,167,160,172,169,0,176],
[176,158,183,172,171,181,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,146,140,159,155,107,139],
[212,0,181,175,188,199,147,161],
[195,160,0,140,176,159,149,169],
[201,166,201,0,203,194,181,183],
[182,153,165,138,0,166,117,160],
[186,142,182,147,175,0,140,185],
[234,194,192,160,224,201,0,179],
[202,180,172,158,181,156,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,192,179,187,193,184,183],
[173,0,179,172,169,182,181,179],
[149,162,0,164,170,174,182,170],
[162,169,177,0,196,192,182,166],
[154,172,171,145,0,173,170,153],
[148,159,167,149,168,0,170,170],
[157,160,159,159,171,171,0,171],
[158,162,171,175,188,171,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,179,198,196,160,190,166],
[162,0,151,173,174,171,179,164],
[162,190,0,185,174,185,189,175],
[143,168,156,0,159,163,185,149],
[145,167,167,182,0,156,163,153],
[181,170,156,178,185,0,183,177],
[151,162,152,156,178,158,0,153],
[175,177,166,192,188,164,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,164,167,166,164,159,159],
[173,0,176,178,163,176,171,179],
[177,165,0,189,170,180,171,184],
[174,163,152,0,167,167,169,168],
[175,178,171,174,0,160,183,161],
[177,165,161,174,181,0,170,180],
[182,170,170,172,158,171,0,163],
[182,162,157,173,180,161,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,182,166,151,173,157,175],
[167,0,169,152,169,175,167,160],
[159,172,0,158,159,159,157,172],
[175,189,183,0,177,170,176,178],
[190,172,182,164,0,165,179,174],
[168,166,182,171,176,0,171,167],
[184,174,184,165,162,170,0,173],
[166,181,169,163,167,174,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,172,174,178,171,150,163],
[178,0,163,195,180,188,179,173],
[169,178,0,178,183,168,168,159],
[167,146,163,0,166,150,161,141],
[163,161,158,175,0,166,156,149],
[170,153,173,191,175,0,181,169],
[191,162,173,180,185,160,0,166],
[178,168,182,200,192,172,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,175,162,150,190,140,171],
[158,0,154,116,149,134,154,146],
[166,187,0,164,173,191,166,210],
[179,225,177,0,167,199,221,191],
[191,192,168,174,0,208,195,200],
[151,207,150,142,133,0,182,160],
[201,187,175,120,146,159,0,195],
[170,195,131,150,141,181,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,167,165,168,154,162,166],
[156,0,149,164,157,148,165,155],
[174,192,0,175,189,182,175,167],
[176,177,166,0,184,168,176,166],
[173,184,152,157,0,161,164,166],
[187,193,159,173,180,0,176,174],
[179,176,166,165,177,165,0,168],
[175,186,174,175,175,167,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,174,167,167,172,167,161],
[179,0,174,170,180,177,189,176],
[167,167,0,170,165,174,165,165],
[174,171,171,0,155,159,152,147],
[174,161,176,186,0,185,166,170],
[169,164,167,182,156,0,177,155],
[174,152,176,189,175,164,0,168],
[180,165,176,194,171,186,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,187,188,174,172,166,180],
[166,0,182,170,167,159,171,177],
[154,159,0,166,170,165,149,163],
[153,171,175,0,165,167,158,171],
[167,174,171,176,0,164,167,164],
[169,182,176,174,177,0,166,177],
[175,170,192,183,174,175,0,181],
[161,164,178,170,177,164,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,155,171,169,165,167,163],
[169,0,170,157,153,150,158,160],
[186,171,0,177,175,163,171,186],
[170,184,164,0,169,161,165,175],
[172,188,166,172,0,172,180,179],
[176,191,178,180,169,0,178,175],
[174,183,170,176,161,163,0,171],
[178,181,155,166,162,166,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,176,179,192,193,170,178],
[156,0,175,192,168,183,164,186],
[165,166,0,164,172,169,148,162],
[162,149,177,0,170,175,167,168],
[149,173,169,171,0,183,171,176],
[148,158,172,166,158,0,146,165],
[171,177,193,174,170,195,0,190],
[163,155,179,173,165,176,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,156,201,171,182,148,159],
[119,0,99,112,168,99,168,141],
[185,242,0,186,209,197,192,161],
[140,229,155,0,224,215,201,189],
[170,173,132,117,0,153,157,133],
[159,242,144,126,188,0,186,75],
[193,173,149,140,184,155,0,163],
[182,200,180,152,208,266,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,204,186,184,166,188,198],
[137,0,167,152,137,139,154,142],
[137,174,0,142,151,168,163,174],
[155,189,199,0,172,178,176,193],
[157,204,190,169,0,160,177,173],
[175,202,173,163,181,0,180,181],
[153,187,178,165,164,161,0,183],
[143,199,167,148,168,160,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,160,165,179,166,174,156],
[178,0,172,163,174,161,163,164],
[181,169,0,178,185,168,181,182],
[176,178,163,0,191,183,177,172],
[162,167,156,150,0,162,165,141],
[175,180,173,158,179,0,173,165],
[167,178,160,164,176,168,0,160],
[185,177,159,169,200,176,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,163,180,161,160,177,176],
[157,0,142,162,170,154,157,161],
[178,199,0,186,174,176,158,173],
[161,179,155,0,144,147,140,166],
[180,171,167,197,0,180,175,182],
[181,187,165,194,161,0,170,182],
[164,184,183,201,166,171,0,184],
[165,180,168,175,159,159,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,187,175,162,170,173,181],
[181,0,178,182,171,174,168,182],
[154,163,0,169,153,168,141,162],
[166,159,172,0,165,175,165,179],
[179,170,188,176,0,162,170,177],
[171,167,173,166,179,0,158,174],
[168,173,200,176,171,183,0,171],
[160,159,179,162,164,167,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,153,165,182,170,173,165],
[178,0,156,160,186,161,178,165],
[188,185,0,195,179,173,176,167],
[176,181,146,0,166,162,163,163],
[159,155,162,175,0,165,178,164],
[171,180,168,179,176,0,169,174],
[168,163,165,178,163,172,0,170],
[176,176,174,178,177,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,166,161,161,168,172,175],
[174,0,160,167,155,158,151,159],
[175,181,0,161,160,170,169,163],
[180,174,180,0,169,157,166,180],
[180,186,181,172,0,173,170,172],
[173,183,171,184,168,0,165,165],
[169,190,172,175,171,176,0,187],
[166,182,178,161,169,176,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,171,177,179,160,179,182],
[158,0,174,177,183,164,165,179],
[170,167,0,181,181,168,177,172],
[164,164,160,0,181,160,164,167],
[162,158,160,160,0,152,160,168],
[181,177,173,181,189,0,167,170],
[162,176,164,177,181,174,0,172],
[159,162,169,174,173,171,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,171,193,182,159,146,176],
[180,0,167,163,164,163,165,146],
[170,174,0,180,162,179,182,172],
[148,178,161,0,169,151,147,176],
[159,177,179,172,0,179,181,170],
[182,178,162,190,162,0,204,181],
[195,176,159,194,160,137,0,201],
[165,195,169,165,171,160,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,167,176,174,163,185,172],
[178,0,164,174,180,171,178,181],
[174,177,0,176,173,170,179,178],
[165,167,165,0,175,164,163,170],
[167,161,168,166,0,163,176,163],
[178,170,171,177,178,0,183,188],
[156,163,162,178,165,158,0,169],
[169,160,163,171,178,153,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,167,155,164,180,186,163],
[160,0,165,164,162,174,180,167],
[174,176,0,177,163,178,194,163],
[186,177,164,0,176,180,182,181],
[177,179,178,165,0,175,179,170],
[161,167,163,161,166,0,169,170],
[155,161,147,159,162,172,0,164],
[178,174,178,160,171,171,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,169,181,184,166,174,183],
[156,0,175,161,179,176,173,177],
[172,166,0,155,173,168,173,176],
[160,180,186,0,189,169,177,180],
[157,162,168,152,0,157,166,159],
[175,165,173,172,184,0,171,180],
[167,168,168,164,175,170,0,157],
[158,164,165,161,182,161,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,167,172,143,191,160,164],
[176,0,159,166,146,199,167,180],
[174,182,0,184,173,191,176,168],
[169,175,157,0,146,188,154,163],
[198,195,168,195,0,207,173,184],
[150,142,150,153,134,0,138,159],
[181,174,165,187,168,203,0,172],
[177,161,173,178,157,182,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,168,172,154,178,175,163],
[175,0,178,184,169,165,172,169],
[173,163,0,174,163,159,177,174],
[169,157,167,0,166,153,173,160],
[187,172,178,175,0,169,174,167],
[163,176,182,188,172,0,186,187],
[166,169,164,168,167,155,0,164],
[178,172,167,181,174,154,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,163,147,145,161,143,159],
[186,0,175,156,153,170,167,170],
[178,166,0,151,160,168,153,171],
[194,185,190,0,169,183,172,172],
[196,188,181,172,0,168,175,190],
[180,171,173,158,173,0,154,177],
[198,174,188,169,166,187,0,182],
[182,171,170,169,151,164,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,177,191,189,176,175,161],
[173,0,174,169,172,168,174,156],
[164,167,0,179,175,173,167,157],
[150,172,162,0,157,163,172,166],
[152,169,166,184,0,157,171,169],
[165,173,168,178,184,0,193,176],
[166,167,174,169,170,148,0,154],
[180,185,184,175,172,165,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,188,211,168,187,187,208],
[140,0,144,200,149,202,144,192],
[153,197,0,203,197,181,179,172],
[130,141,138,0,146,147,142,143],
[173,192,144,195,0,169,165,180],
[154,139,160,194,172,0,152,155],
[154,197,162,199,176,189,0,169],
[133,149,169,198,161,186,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,184,176,157,167,195,165],
[160,0,174,164,153,154,195,163],
[157,167,0,168,168,158,198,171],
[165,177,173,0,172,173,194,181],
[184,188,173,169,0,170,191,182],
[174,187,183,168,171,0,195,178],
[146,146,143,147,150,146,0,172],
[176,178,170,160,159,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,158,161,161,150,153,156],
[167,0,153,143,162,156,154,164],
[183,188,0,177,162,159,173,170],
[180,198,164,0,178,172,159,177],
[180,179,179,163,0,153,179,176],
[191,185,182,169,188,0,187,173],
[188,187,168,182,162,154,0,173],
[185,177,171,164,165,168,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,159,130,153,126,155,155],
[181,0,154,157,186,152,163,167],
[182,187,0,173,196,154,167,176],
[211,184,168,0,176,173,174,186],
[188,155,145,165,0,145,156,167],
[215,189,187,168,196,0,174,225],
[186,178,174,167,185,167,0,168],
[186,174,165,155,174,116,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,174,160,180,157,181,175],
[166,0,151,166,176,162,190,164],
[167,190,0,166,186,190,184,183],
[181,175,175,0,189,166,186,183],
[161,165,155,152,0,159,158,161],
[184,179,151,175,182,0,196,190],
[160,151,157,155,183,145,0,175],
[166,177,158,158,180,151,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,160,166,187,180,193,170],
[157,0,157,151,167,155,173,154],
[181,184,0,170,191,177,179,178],
[175,190,171,0,182,175,178,158],
[154,174,150,159,0,158,169,151],
[161,186,164,166,183,0,186,175],
[148,168,162,163,172,155,0,146],
[171,187,163,183,190,166,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,166,171,167,160,169,177],
[177,0,179,191,178,170,179,207],
[175,162,0,159,182,171,181,189],
[170,150,182,0,177,173,169,186],
[174,163,159,164,0,160,184,181],
[181,171,170,168,181,0,178,171],
[172,162,160,172,157,163,0,182],
[164,134,152,155,160,170,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,191,166,168,167,177,193],
[155,0,176,194,180,193,196,184],
[150,165,0,163,158,191,181,193],
[175,147,178,0,178,190,156,162],
[173,161,183,163,0,197,194,193],
[174,148,150,151,144,0,169,153],
[164,145,160,185,147,172,0,177],
[148,157,148,179,148,188,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,147,169,124,147,159,150],
[194,0,168,165,186,161,157,144],
[194,173,0,164,171,178,175,173],
[172,176,177,0,170,152,168,149],
[217,155,170,171,0,178,177,188],
[194,180,163,189,163,0,175,134],
[182,184,166,173,164,166,0,156],
[191,197,168,192,153,207,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,150,178,190,187,182,199],
[129,0,152,177,141,148,164,147],
[191,189,0,181,174,185,184,164],
[163,164,160,0,163,188,171,150],
[151,200,167,178,0,161,202,210],
[154,193,156,153,180,0,178,180],
[159,177,157,170,139,163,0,148],
[142,194,177,191,131,161,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,173,181,152,169,172,184],
[187,0,166,173,178,174,176,180],
[168,175,0,180,178,175,162,171],
[160,168,161,0,154,170,153,175],
[189,163,163,187,0,167,183,191],
[172,167,166,171,174,0,183,195],
[169,165,179,188,158,158,0,187],
[157,161,170,166,150,146,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,173,171,166,172,176,174],
[181,0,179,187,171,163,169,184],
[168,162,0,164,171,165,150,181],
[170,154,177,0,161,188,150,173],
[175,170,170,180,0,170,164,186],
[169,178,176,153,171,0,158,180],
[165,172,191,191,177,183,0,184],
[167,157,160,168,155,161,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,193,182,177,171,180,167],
[160,0,187,171,185,171,182,168],
[148,154,0,150,150,152,173,159],
[159,170,191,0,171,147,185,153],
[164,156,191,170,0,178,181,178],
[170,170,189,194,163,0,181,170],
[161,159,168,156,160,160,0,164],
[174,173,182,188,163,171,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,185,182,160,193,165,209],
[173,0,210,188,165,188,176,193],
[156,131,0,172,167,167,157,167],
[159,153,169,0,185,180,159,178],
[181,176,174,156,0,170,167,183],
[148,153,174,161,171,0,131,175],
[176,165,184,182,174,210,0,209],
[132,148,174,163,158,166,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,167,176,164,178,167,173],
[166,0,164,180,158,164,174,164],
[174,177,0,187,177,179,167,164],
[165,161,154,0,168,180,175,169],
[177,183,164,173,0,179,181,169],
[163,177,162,161,162,0,155,172],
[174,167,174,166,160,186,0,170],
[168,177,177,172,172,169,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,176,176,165,170,162,168],
[168,0,179,172,170,172,171,166],
[165,162,0,156,148,144,150,150],
[165,169,185,0,172,160,170,177],
[176,171,193,169,0,178,170,180],
[171,169,197,181,163,0,156,179],
[179,170,191,171,171,185,0,183],
[173,175,191,164,161,162,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,166,171,176,167,169,174],
[163,0,163,167,175,171,169,158],
[175,178,0,176,180,173,160,167],
[170,174,165,0,173,168,172,178],
[165,166,161,168,0,166,175,164],
[174,170,168,173,175,0,164,172],
[172,172,181,169,166,177,0,181],
[167,183,174,163,177,169,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,138,195,188,154,197,177],
[147,0,167,173,125,144,194,169],
[203,174,0,191,174,163,246,166],
[146,168,150,0,116,134,179,150],
[153,216,167,225,0,183,224,168],
[187,197,178,207,158,0,238,159],
[144,147,95,162,117,103,0,117],
[164,172,175,191,173,182,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,171,198,168,174,169,175],
[171,0,173,184,158,159,165,185],
[170,168,0,195,166,177,159,165],
[143,157,146,0,155,139,165,159],
[173,183,175,186,0,163,174,181],
[167,182,164,202,178,0,177,185],
[172,176,182,176,167,164,0,169],
[166,156,176,182,160,156,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,165,174,157,159,160,170],
[185,0,178,190,185,173,167,192],
[176,163,0,187,168,160,162,172],
[167,151,154,0,169,161,154,168],
[184,156,173,172,0,172,168,193],
[182,168,181,180,169,0,173,182],
[181,174,179,187,173,168,0,174],
[171,149,169,173,148,159,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,124,189,133,145,140,128],
[196,0,163,185,159,166,173,131],
[217,178,0,195,154,163,185,183],
[152,156,146,0,148,141,177,137],
[208,182,187,193,0,198,175,169],
[196,175,178,200,143,0,206,162],
[201,168,156,164,166,135,0,152],
[213,210,158,204,172,179,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,182,154,142,156,205,157],
[163,0,190,202,187,186,203,209],
[159,151,0,167,147,169,174,153],
[187,139,174,0,143,174,210,175],
[199,154,194,198,0,211,203,190],
[185,155,172,167,130,0,187,178],
[136,138,167,131,138,154,0,151],
[184,132,188,166,151,163,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,197,149,167,172,153,160],
[179,0,172,176,153,204,182,149],
[144,169,0,150,170,178,199,151],
[192,165,191,0,171,184,170,198],
[174,188,171,170,0,179,169,170],
[169,137,163,157,162,0,141,158],
[188,159,142,171,172,200,0,175],
[181,192,190,143,171,183,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,144,150,156,167,168,169],
[175,0,155,155,158,156,159,155],
[197,186,0,163,176,181,170,184],
[191,186,178,0,169,181,178,178],
[185,183,165,172,0,165,164,172],
[174,185,160,160,176,0,156,175],
[173,182,171,163,177,185,0,166],
[172,186,157,163,169,166,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,182,170,185,162,153,188],
[220,0,194,192,226,158,158,176],
[159,147,0,167,206,145,109,158],
[171,149,174,0,181,144,134,149],
[156,115,135,160,0,116,135,136],
[179,183,196,197,225,0,192,160],
[188,183,232,207,206,149,0,186],
[153,165,183,192,205,181,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,207,199,167,164,197,164],
[176,0,197,215,171,169,212,187],
[134,144,0,156,149,145,191,138],
[142,126,185,0,181,160,197,166],
[174,170,192,160,0,169,214,153],
[177,172,196,181,172,0,200,138],
[144,129,150,144,127,141,0,142],
[177,154,203,175,188,203,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,181,185,165,178,180,183],
[150,0,173,159,172,182,181,153],
[160,168,0,161,174,181,150,156],
[156,182,180,0,170,187,175,165],
[176,169,167,171,0,191,176,160],
[163,159,160,154,150,0,170,151],
[161,160,191,166,165,171,0,165],
[158,188,185,176,181,190,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,173,168,164,155,172,161],
[180,0,165,166,156,170,163,168],
[168,176,0,175,165,149,165,170],
[173,175,166,0,166,171,172,167],
[177,185,176,175,0,166,168,168],
[186,171,192,170,175,0,166,168],
[169,178,176,169,173,175,0,175],
[180,173,171,174,173,173,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,148,162,172,177,191,127],
[164,0,182,178,160,184,187,157],
[193,159,0,204,139,169,172,166],
[179,163,137,0,133,142,158,152],
[169,181,202,208,0,178,186,182],
[164,157,172,199,163,0,165,146],
[150,154,169,183,155,176,0,163],
[214,184,175,189,159,195,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,177,161,160,182,188,178],
[163,0,173,169,164,160,182,179],
[164,168,0,168,171,165,190,168],
[180,172,173,0,161,182,207,175],
[181,177,170,180,0,188,185,175],
[159,181,176,159,153,0,185,165],
[153,159,151,134,156,156,0,160],
[163,162,173,166,166,176,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,188,175,192,176,176,154],
[157,0,177,183,179,169,171,164],
[153,164,0,170,167,172,169,160],
[166,158,171,0,166,163,178,153],
[149,162,174,175,0,171,174,165],
[165,172,169,178,170,0,178,180],
[165,170,172,163,167,163,0,153],
[187,177,181,188,176,161,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,160,180,184,196,189,183],
[164,0,163,171,195,174,197,173],
[181,178,0,191,195,210,182,167],
[161,170,150,0,190,190,171,167],
[157,146,146,151,0,172,167,154],
[145,167,131,151,169,0,167,158],
[152,144,159,170,174,174,0,156],
[158,168,174,174,187,183,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,171,175,193,155,187,188],
[141,0,169,163,165,167,173,189],
[170,172,0,179,176,178,188,180],
[166,178,162,0,195,167,188,185],
[148,176,165,146,0,151,147,156],
[186,174,163,174,190,0,186,175],
[154,168,153,153,194,155,0,171],
[153,152,161,156,185,166,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,192,181,172,197,166,189],
[163,0,174,174,168,184,166,188],
[149,167,0,180,172,186,169,174],
[160,167,161,0,163,182,164,181],
[169,173,169,178,0,185,182,183],
[144,157,155,159,156,0,166,162],
[175,175,172,177,159,175,0,187],
[152,153,167,160,158,179,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,175,169,178,186,171,178],
[166,0,169,176,189,186,184,178],
[166,172,0,176,194,184,183,175],
[172,165,165,0,175,169,173,172],
[163,152,147,166,0,188,171,174],
[155,155,157,172,153,0,165,177],
[170,157,158,168,170,176,0,168],
[163,163,166,169,167,164,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,146,166,195,159,185,183],
[137,0,158,174,162,166,169,152],
[195,183,0,168,178,180,198,190],
[175,167,173,0,181,174,209,166],
[146,179,163,160,0,162,175,160],
[182,175,161,167,179,0,181,163],
[156,172,143,132,166,160,0,169],
[158,189,151,175,181,178,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,190,170,138,101,142,204],
[55,0,103,151,93,78,77,129],
[151,238,0,95,112,87,67,178],
[171,190,246,0,189,179,140,205],
[203,248,229,152,0,79,66,242],
[240,263,254,162,262,0,210,259],
[199,264,274,201,275,131,0,234],
[137,212,163,136,99,82,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,183,179,171,172,175,168],
[164,0,182,157,165,155,166,164],
[158,159,0,161,161,160,155,156],
[162,184,180,0,172,166,173,165],
[170,176,180,169,0,165,182,168],
[169,186,181,175,176,0,172,171],
[166,175,186,168,159,169,0,167],
[173,177,185,176,173,170,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,181,161,180,200,198,170],
[165,0,160,138,181,182,173,158],
[160,181,0,181,178,199,200,188],
[180,203,160,0,216,197,222,190],
[161,160,163,125,0,181,160,172],
[141,159,142,144,160,0,163,163],
[143,168,141,119,181,178,0,184],
[171,183,153,151,169,178,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,169,190,193,172,178,191],
[136,0,158,173,173,151,148,162],
[172,183,0,175,186,173,161,178],
[151,168,166,0,157,160,157,173],
[148,168,155,184,0,157,174,175],
[169,190,168,181,184,0,175,183],
[163,193,180,184,167,166,0,167],
[150,179,163,168,166,158,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,172,145,171,167,163,161],
[189,0,178,173,169,187,183,174],
[169,163,0,162,161,166,183,170],
[196,168,179,0,177,195,184,174],
[170,172,180,164,0,176,178,159],
[174,154,175,146,165,0,155,167],
[178,158,158,157,163,186,0,157],
[180,167,171,167,182,174,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,164,165,162,162,168,166],
[184,0,168,166,175,163,182,174],
[177,173,0,172,167,167,177,165],
[176,175,169,0,167,166,174,176],
[179,166,174,174,0,182,173,168],
[179,178,174,175,159,0,175,174],
[173,159,164,167,168,166,0,164],
[175,167,176,165,173,167,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,178,214,188,159,182],
[169,0,148,153,184,136,189,144],
[170,193,0,219,219,167,188,155],
[163,188,122,0,178,147,150,152],
[127,157,122,163,0,159,137,159],
[153,205,174,194,182,0,164,163],
[182,152,153,191,204,177,0,123],
[159,197,186,189,182,178,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,140,157,147,138,158,155],
[210,0,205,183,175,187,166,185],
[201,136,0,166,163,169,175,165],
[184,158,175,0,159,162,179,175],
[194,166,178,182,0,180,190,199],
[203,154,172,179,161,0,207,188],
[183,175,166,162,151,134,0,146],
[186,156,176,166,142,153,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,171,169,175,173,176,182],
[168,0,160,158,177,161,187,177],
[170,181,0,171,177,168,187,178],
[172,183,170,0,190,189,167,177],
[166,164,164,151,0,167,166,175],
[168,180,173,152,174,0,190,172],
[165,154,154,174,175,151,0,165],
[159,164,163,164,166,169,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,157,171,174,152,153,152],
[170,0,153,165,160,153,160,161],
[184,188,0,171,189,162,161,167],
[170,176,170,0,175,154,169,164],
[167,181,152,166,0,135,152,160],
[189,188,179,187,206,0,177,169],
[188,181,180,172,189,164,0,174],
[189,180,174,177,181,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,200,153,201,144,174,169],
[135,0,234,215,177,191,162,152],
[141,107,0,131,140,97,160,121],
[188,126,210,0,186,166,168,151],
[140,164,201,155,0,155,145,149],
[197,150,244,175,186,0,179,187],
[167,179,181,173,196,162,0,188],
[172,189,220,190,192,154,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,146,186,187,185,173,172],
[158,0,213,163,226,173,195,182],
[195,128,0,166,173,190,161,210],
[155,178,175,0,173,201,182,239],
[154,115,168,168,0,142,155,146],
[156,168,151,140,199,0,120,127],
[168,146,180,159,186,221,0,197],
[169,159,131,102,195,214,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,161,165,156,166,153,166],
[168,0,181,188,187,173,165,178],
[180,160,0,175,184,156,202,186],
[176,153,166,0,168,156,183,165],
[185,154,157,173,0,143,153,186],
[175,168,185,185,198,0,186,203],
[188,176,139,158,188,155,0,176],
[175,163,155,176,155,138,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,141,126,166,155,156,169],
[88,0,158,105,121,137,100,173],
[200,183,0,182,156,210,189,160],
[215,236,159,0,183,171,193,186],
[175,220,185,158,0,180,178,212],
[186,204,131,170,161,0,188,150],
[185,241,152,148,163,153,0,184],
[172,168,181,155,129,191,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,184,174,168,181,168,196],
[165,0,167,164,164,168,166,187],
[157,174,0,167,155,179,163,187],
[167,177,174,0,172,173,165,182],
[173,177,186,169,0,165,177,182],
[160,173,162,168,176,0,164,183],
[173,175,178,176,164,177,0,182],
[145,154,154,159,159,158,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,184,173,183,165,178,190],
[157,0,170,164,170,160,167,179],
[157,171,0,171,163,161,153,188],
[168,177,170,0,194,164,171,162],
[158,171,178,147,0,157,153,169],
[176,181,180,177,184,0,162,170],
[163,174,188,170,188,179,0,192],
[151,162,153,179,172,171,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,186,170,182,162,154,168],
[189,0,195,171,184,172,170,173],
[155,146,0,155,175,156,166,149],
[171,170,186,0,180,174,172,172],
[159,157,166,161,0,167,164,170],
[179,169,185,167,174,0,169,175],
[187,171,175,169,177,172,0,175],
[173,168,192,169,171,166,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,0,185,162,143,99,112],
[249,0,109,229,153,226,131,124],
[341,232,0,207,184,143,160,252],
[156,112,134,0,245,156,134,175],
[179,188,157,96,0,210,157,198],
[198,115,198,185,131,0,172,172],
[242,210,181,207,184,169,0,216],
[229,217,89,166,143,169,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,165,182,154,176,158,178],
[151,0,141,175,155,142,153,152],
[176,200,0,195,166,169,184,182],
[159,166,146,0,144,140,136,171],
[187,186,175,197,0,170,158,165],
[165,199,172,201,171,0,159,177],
[183,188,157,205,183,182,0,192],
[163,189,159,170,176,164,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,155,179,184,172,188,173],
[159,0,171,157,161,164,180,170],
[186,170,0,165,184,174,191,180],
[162,184,176,0,171,171,187,186],
[157,180,157,170,0,149,192,176],
[169,177,167,170,192,0,170,176],
[153,161,150,154,149,171,0,161],
[168,171,161,155,165,165,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,191,161,176,171,164,163],
[184,0,196,183,196,183,182,158],
[150,145,0,162,181,171,162,162],
[180,158,179,0,174,185,170,163],
[165,145,160,167,0,173,160,153],
[170,158,170,156,168,0,161,161],
[177,159,179,171,181,180,0,183],
[178,183,179,178,188,180,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,169,156,152,172,147,159],
[181,0,175,182,168,172,171,177],
[172,166,0,163,177,163,150,154],
[185,159,178,0,181,184,168,183],
[189,173,164,160,0,169,152,159],
[169,169,178,157,172,0,165,159],
[194,170,191,173,189,176,0,184],
[182,164,187,158,182,182,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,156,150,151,173,139,150],
[181,0,181,158,161,170,144,148],
[185,160,0,152,163,157,137,164],
[191,183,189,0,167,182,165,168],
[190,180,178,174,0,198,161,171],
[168,171,184,159,143,0,178,172],
[202,197,204,176,180,163,0,157],
[191,193,177,173,170,169,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,159,178,153,142,174,144],
[212,0,210,228,186,210,163,190],
[182,131,0,184,159,176,164,164],
[163,113,157,0,125,154,126,163],
[188,155,182,216,0,199,174,171],
[199,131,165,187,142,0,174,164],
[167,178,177,215,167,167,0,178],
[197,151,177,178,170,177,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,227,226,283,115,112,170],
[112,0,171,170,227,171,112,114],
[114,170,0,114,283,229,170,58],
[115,171,227,0,283,171,227,229],
[58,114,58,58,0,117,58,58],
[226,170,112,170,224,0,170,170],
[229,229,171,114,283,171,0,173],
[171,227,283,112,283,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,181,194,177,173,170,182],
[156,0,164,173,149,168,178,165],
[160,177,0,170,171,175,184,168],
[147,168,171,0,159,163,166,175],
[164,192,170,182,0,177,179,165],
[168,173,166,178,164,0,173,171],
[171,163,157,175,162,168,0,171],
[159,176,173,166,176,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,169,181,179,167,187,181],
[180,0,187,180,190,176,194,168],
[172,154,0,174,189,172,180,167],
[160,161,167,0,186,167,179,178],
[162,151,152,155,0,166,175,168],
[174,165,169,174,175,0,182,169],
[154,147,161,162,166,159,0,153],
[160,173,174,163,173,172,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,180,177,187,176,171,166],
[159,0,154,177,166,165,176,150],
[161,187,0,183,176,177,173,167],
[164,164,158,0,166,166,170,169],
[154,175,165,175,0,176,167,174],
[165,176,164,175,165,0,174,165],
[170,165,168,171,174,167,0,177],
[175,191,174,172,167,176,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,190,178,174,158,165,172],
[186,0,180,181,170,174,177,167],
[151,161,0,170,150,164,162,162],
[163,160,171,0,168,169,164,171],
[167,171,191,173,0,165,172,159],
[183,167,177,172,176,0,180,161],
[176,164,179,177,169,161,0,153],
[169,174,179,170,182,180,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,181,171,182,187,174,157],
[160,0,166,140,164,158,160,143],
[160,175,0,164,166,159,169,157],
[170,201,177,0,189,186,189,171],
[159,177,175,152,0,176,165,169],
[154,183,182,155,165,0,174,158],
[167,181,172,152,176,167,0,160],
[184,198,184,170,172,183,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,158,190,164,164,179,172],
[167,0,179,178,185,184,167,184],
[183,162,0,179,167,181,162,152],
[151,163,162,0,188,174,167,176],
[177,156,174,153,0,165,154,157],
[177,157,160,167,176,0,134,171],
[162,174,179,174,187,207,0,187],
[169,157,189,165,184,170,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,160,166,167,149,158],
[160,0,177,167,161,180,157,160],
[173,164,0,162,170,170,167,161],
[181,174,179,0,187,185,164,159],
[175,180,171,154,0,178,191,176],
[174,161,171,156,163,0,160,160],
[192,184,174,177,150,181,0,154],
[183,181,180,182,165,181,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,169,170,177,168,191,165],
[164,0,172,161,168,169,186,170],
[172,169,0,196,181,192,195,169],
[171,180,145,0,173,184,182,157],
[164,173,160,168,0,176,186,179],
[173,172,149,157,165,0,176,154],
[150,155,146,159,155,165,0,157],
[176,171,172,184,162,187,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,145,149,181,156,162,192],
[187,0,167,196,222,143,199,220],
[196,174,0,148,195,162,162,195],
[192,145,193,0,174,178,177,224],
[160,119,146,167,0,156,157,186],
[185,198,179,163,185,0,187,213],
[179,142,179,164,184,154,0,170],
[149,121,146,117,155,128,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,197,194,174,171,170,198],
[146,0,174,173,161,166,175,180],
[144,167,0,184,163,149,153,166],
[147,168,157,0,153,158,151,154],
[167,180,178,188,0,174,164,170],
[170,175,192,183,167,0,174,180],
[171,166,188,190,177,167,0,175],
[143,161,175,187,171,161,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,179,172,166,157,160],
[169,0,171,173,161,168,174,171],
[170,170,0,181,174,173,161,169],
[162,168,160,0,166,159,162,161],
[169,180,167,175,0,159,167,170],
[175,173,168,182,182,0,177,177],
[184,167,180,179,174,164,0,182],
[181,170,172,180,171,164,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,175,159,170,167,163,177],
[167,0,175,169,158,164,175,158],
[166,166,0,164,170,172,161,170],
[182,172,177,0,179,180,165,176],
[171,183,171,162,0,171,174,169],
[174,177,169,161,170,0,168,172],
[178,166,180,176,167,173,0,175],
[164,183,171,165,172,169,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,170,177,147,154,164,179],
[170,0,167,163,154,167,160,167],
[171,174,0,183,184,170,169,164],
[164,178,158,0,163,146,170,175],
[194,187,157,178,0,181,184,196],
[187,174,171,195,160,0,192,192],
[177,181,172,171,157,149,0,175],
[162,174,177,166,145,149,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,170,161,187,172,172,156],
[154,0,153,158,173,163,170,162],
[171,188,0,177,178,170,170,172],
[180,183,164,0,175,166,184,162],
[154,168,163,166,0,149,178,158],
[169,178,171,175,192,0,182,169],
[169,171,171,157,163,159,0,148],
[185,179,169,179,183,172,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,176,153,177,157,178,182],
[156,0,165,166,148,182,152,157],
[165,176,0,169,167,172,155,169],
[188,175,172,0,190,175,175,162],
[164,193,174,151,0,158,167,163],
[184,159,169,166,183,0,169,167],
[163,189,186,166,174,172,0,186],
[159,184,172,179,178,174,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,167,176,187,172,183,178],
[171,0,150,173,165,164,183,158],
[174,191,0,174,180,160,186,174],
[165,168,167,0,175,159,171,167],
[154,176,161,166,0,169,178,154],
[169,177,181,182,172,0,179,189],
[158,158,155,170,163,162,0,167],
[163,183,167,174,187,152,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,157,163,165,179,177,138],
[170,0,142,119,178,154,140,140],
[184,199,0,164,194,191,170,141],
[178,222,177,0,181,184,180,157],
[176,163,147,160,0,176,150,94],
[162,187,150,157,165,0,149,147],
[164,201,171,161,191,192,0,171],
[203,201,200,184,247,194,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,184,136,185,119,139,159],
[172,0,183,158,163,132,157,192],
[157,158,0,197,203,130,157,199],
[205,183,144,0,176,175,185,214],
[156,178,138,165,0,127,123,222],
[222,209,211,166,214,0,159,222],
[202,184,184,156,218,182,0,223],
[182,149,142,127,119,119,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,192,180,176,165,173,176],
[159,0,174,155,154,163,170,152],
[149,167,0,160,160,165,163,162],
[161,186,181,0,171,181,179,185],
[165,187,181,170,0,183,184,176],
[176,178,176,160,158,0,173,152],
[168,171,178,162,157,168,0,166],
[165,189,179,156,165,189,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,186,170,167,161,164,170],
[149,0,156,146,170,169,157,156],
[155,185,0,163,173,178,169,169],
[171,195,178,0,182,181,170,184],
[174,171,168,159,0,181,168,166],
[180,172,163,160,160,0,169,159],
[177,184,172,171,173,172,0,166],
[171,185,172,157,175,182,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,157,170,163,161,146],
[170,0,170,161,167,171,158,158],
[170,171,0,162,175,174,170,152],
[184,180,179,0,185,172,174,164],
[171,174,166,156,0,163,164,154],
[178,170,167,169,178,0,166,165],
[180,183,171,167,177,175,0,174],
[195,183,189,177,187,176,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,142,121,200,102,99,118],
[200,0,142,141,161,162,158,176],
[199,199,0,161,278,181,218,177],
[220,200,180,0,221,119,176,176],
[141,180,63,120,0,121,98,176],
[239,179,160,222,220,0,158,175],
[242,183,123,165,243,183,0,196],
[223,165,164,165,165,166,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,147,129,143,176,151,121],
[197,0,188,193,161,210,205,190],
[194,153,0,179,181,183,176,157],
[212,148,162,0,173,208,193,149],
[198,180,160,168,0,203,219,138],
[165,131,158,133,138,0,146,149],
[190,136,165,148,122,195,0,125],
[220,151,184,192,203,192,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,183,161,199,195,182,167],
[163,0,166,151,185,172,164,149],
[158,175,0,167,182,172,172,164],
[180,190,174,0,200,179,180,163],
[142,156,159,141,0,166,152,148],
[146,169,169,162,175,0,179,171],
[159,177,169,161,189,162,0,161],
[174,192,177,178,193,170,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,176,172,182,186,191,167],
[152,0,170,166,181,175,177,169],
[165,171,0,155,176,165,170,164],
[169,175,186,0,174,178,195,177],
[159,160,165,167,0,177,180,144],
[155,166,176,163,164,0,191,160],
[150,164,171,146,161,150,0,149],
[174,172,177,164,197,181,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,227,170,199,142,255,227],
[86,0,171,142,143,171,142,142],
[114,170,0,170,200,143,170,171],
[171,199,171,0,143,172,227,170],
[142,198,141,198,0,171,112,226],
[199,170,198,169,170,0,141,141],
[86,199,171,114,229,200,0,200],
[114,199,170,171,115,200,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,187,204,184,187,180,168],
[181,0,188,183,162,192,174,180],
[154,153,0,169,173,200,173,148],
[137,158,172,0,152,178,152,144],
[157,179,168,189,0,185,173,193],
[154,149,141,163,156,0,145,141],
[161,167,168,189,168,196,0,143],
[173,161,193,197,148,200,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,204,161,181,203,160,160],
[227,0,180,206,228,229,136,228],
[137,161,0,183,161,207,136,206],
[180,135,158,0,113,180,115,113],
[160,113,180,228,0,159,135,161],
[138,112,134,161,182,0,136,183],
[181,205,205,226,206,205,0,161],
[181,113,135,228,180,158,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,162,154,162,177,181,174],
[161,0,161,173,166,186,182,171],
[179,180,0,187,182,182,169,178],
[187,168,154,0,154,168,168,158],
[179,175,159,187,0,170,174,169],
[164,155,159,173,171,0,166,151],
[160,159,172,173,167,175,0,176],
[167,170,163,183,172,190,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,148,160,169,163,163,156],
[160,0,149,166,158,179,171,164],
[193,192,0,179,193,177,170,186],
[181,175,162,0,185,180,170,173],
[172,183,148,156,0,166,155,157],
[178,162,164,161,175,0,148,159],
[178,170,171,171,186,193,0,186],
[185,177,155,168,184,182,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,167,171,180,170,182,144],
[179,0,180,186,185,173,168,179],
[174,161,0,183,186,151,177,165],
[170,155,158,0,186,154,166,154],
[161,156,155,155,0,149,166,147],
[171,168,190,187,192,0,198,172],
[159,173,164,175,175,143,0,163],
[197,162,176,187,194,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,165,186,182,167,187,206],
[157,0,142,157,145,160,175,193],
[176,199,0,166,156,153,173,194],
[155,184,175,0,144,161,180,195],
[159,196,185,197,0,172,190,210],
[174,181,188,180,169,0,166,187],
[154,166,168,161,151,175,0,209],
[135,148,147,146,131,154,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,165,180,170,158,178,181],
[179,0,170,183,175,157,184,180],
[176,171,0,168,178,175,186,178],
[161,158,173,0,169,158,166,171],
[171,166,163,172,0,178,188,181],
[183,184,166,183,163,0,180,193],
[163,157,155,175,153,161,0,171],
[160,161,163,170,160,148,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,172,179,181,158,190,155],
[154,0,144,131,158,130,167,140],
[169,197,0,154,160,171,182,146],
[162,210,187,0,195,176,208,181],
[160,183,181,146,0,145,187,153],
[183,211,170,165,196,0,183,172],
[151,174,159,133,154,158,0,137],
[186,201,195,160,188,169,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,137,218,179,200,161,167],
[192,0,141,228,235,242,195,193],
[204,200,0,200,214,228,170,219],
[123,113,141,0,128,192,145,167],
[162,106,127,213,0,212,179,179],
[141,99,113,149,129,0,122,134],
[180,146,171,196,162,219,0,173],
[174,148,122,174,162,207,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,155,155,164,162,149,167],
[181,0,168,164,184,175,175,175],
[186,173,0,178,197,178,159,195],
[186,177,163,0,192,177,193,171],
[177,157,144,149,0,168,174,183],
[179,166,163,164,173,0,161,170],
[192,166,182,148,167,180,0,178],
[174,166,146,170,158,171,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,163,163,181,172,178,185],
[166,0,173,158,161,182,174,173],
[178,168,0,169,167,155,156,161],
[178,183,172,0,177,165,182,180],
[160,180,174,164,0,165,166,169],
[169,159,186,176,176,0,173,178],
[163,167,185,159,175,168,0,172],
[156,168,180,161,172,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,190,159,111,153,165,188],
[192,0,202,203,160,187,203,184],
[151,139,0,182,160,164,183,184],
[182,138,159,0,145,183,179,178],
[230,181,181,196,0,184,185,168],
[188,154,177,158,157,0,172,160],
[176,138,158,162,156,169,0,173],
[153,157,157,163,173,181,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,157,176,175,164,164,174],
[173,0,172,167,168,152,185,170],
[184,169,0,163,185,173,178,166],
[165,174,178,0,172,178,165,177],
[166,173,156,169,0,173,177,152],
[177,189,168,163,168,0,170,193],
[177,156,163,176,164,171,0,154],
[167,171,175,164,189,148,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,201,169,177,162,167,180],
[170,0,179,156,158,178,161,177],
[140,162,0,147,157,136,163,170],
[172,185,194,0,179,156,187,164],
[164,183,184,162,0,178,182,193],
[179,163,205,185,163,0,160,182],
[174,180,178,154,159,181,0,181],
[161,164,171,177,148,159,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,122,145,169,192,191,170],
[220,0,173,195,146,194,168,172],
[219,168,0,241,193,265,191,219],
[196,146,100,0,148,167,96,172],
[172,195,148,193,0,217,167,242],
[149,147,76,174,124,0,148,150],
[150,173,150,245,174,193,0,198],
[171,169,122,169,99,191,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,178,181,152,188,194,183],
[158,0,166,189,171,181,186,173],
[163,175,0,187,167,198,184,170],
[160,152,154,0,179,175,176,164],
[189,170,174,162,0,179,187,191],
[153,160,143,166,162,0,162,163],
[147,155,157,165,154,179,0,176],
[158,168,171,177,150,178,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,166,168,161,179,164,180],
[163,0,152,151,158,167,159,171],
[175,189,0,161,181,178,174,189],
[173,190,180,0,163,186,182,176],
[180,183,160,178,0,183,163,178],
[162,174,163,155,158,0,155,180],
[177,182,167,159,178,186,0,189],
[161,170,152,165,163,161,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,172,169,153,173,159,158],
[160,0,150,177,173,158,170,163],
[169,191,0,184,179,178,176,167],
[172,164,157,0,159,176,159,159],
[188,168,162,182,0,171,170,181],
[168,183,163,165,170,0,168,150],
[182,171,165,182,171,173,0,171],
[183,178,174,182,160,191,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,159,170,184,169,172,165],
[180,0,183,176,198,185,177,169],
[182,158,0,165,182,174,171,172],
[171,165,176,0,185,182,176,163],
[157,143,159,156,0,169,158,153],
[172,156,167,159,172,0,158,172],
[169,164,170,165,183,183,0,167],
[176,172,169,178,188,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,173,170,166,159,181,177],
[150,0,179,177,175,160,181,178],
[168,162,0,180,158,171,198,188],
[171,164,161,0,161,159,176,186],
[175,166,183,180,0,172,168,198],
[182,181,170,182,169,0,208,184],
[160,160,143,165,173,133,0,174],
[164,163,153,155,143,157,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,227,114,227,227,227,227],
[114,0,227,114,227,227,227,227],
[114,114,0,228,227,114,341,341],
[227,227,113,0,227,227,113,227],
[114,114,114,114,0,114,227,227],
[114,114,227,114,227,0,227,227],
[114,114,0,228,114,114,0,114],
[114,114,0,114,114,114,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,176,156,192,191,183,192],
[156,0,152,143,166,176,161,177],
[165,189,0,172,184,192,195,181],
[185,198,169,0,189,208,179,192],
[149,175,157,152,0,173,165,178],
[150,165,149,133,168,0,164,176],
[158,180,146,162,176,177,0,183],
[149,164,160,149,163,165,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,131,127,114,124,175,126],
[187,0,162,156,170,187,232,125],
[210,179,0,164,154,180,254,181],
[214,185,177,0,217,200,187,155],
[227,171,187,124,0,185,210,166],
[217,154,161,141,156,0,203,151],
[166,109,87,154,131,138,0,125],
[215,216,160,186,175,190,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,166,186,163,171,181,188],
[143,0,154,158,173,158,181,179],
[175,187,0,194,184,169,175,204],
[155,183,147,0,166,168,178,176],
[178,168,157,175,0,179,171,186],
[170,183,172,173,162,0,182,167],
[160,160,166,163,170,159,0,174],
[153,162,137,165,155,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,158,166,168,165,176,180],
[164,0,172,165,171,179,160,170],
[183,169,0,188,185,185,178,183],
[175,176,153,0,180,177,181,176],
[173,170,156,161,0,180,172,175],
[176,162,156,164,161,0,163,172],
[165,181,163,160,169,178,0,183],
[161,171,158,165,166,169,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,175,184,170,166,168,157],
[160,0,161,176,171,165,163,158],
[166,180,0,185,159,190,185,169],
[157,165,156,0,158,174,175,168],
[171,170,182,183,0,168,175,165],
[175,176,151,167,173,0,166,148],
[173,178,156,166,166,175,0,175],
[184,183,172,173,176,193,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,177,187,168,171,151],
[169,0,162,167,172,173,159,160],
[170,179,0,179,183,161,162,171],
[164,174,162,0,172,169,180,150],
[154,169,158,169,0,152,174,154],
[173,168,180,172,189,0,172,165],
[170,182,179,161,167,169,0,153],
[190,181,170,191,187,176,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,168,183,187,172,164,194],
[178,0,163,169,180,156,170,197],
[173,178,0,197,177,182,161,197],
[158,172,144,0,189,160,150,181],
[154,161,164,152,0,184,176,173],
[169,185,159,181,157,0,165,178],
[177,171,180,191,165,176,0,192],
[147,144,144,160,168,163,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,195,156,161,173,166,167],
[165,0,173,154,172,154,149,161],
[146,168,0,149,164,146,160,154],
[185,187,192,0,184,174,173,170],
[180,169,177,157,0,166,176,158],
[168,187,195,167,175,0,177,175],
[175,192,181,168,165,164,0,164],
[174,180,187,171,183,166,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,165,169,192,151,167,171],
[164,0,179,169,183,173,189,173],
[176,162,0,155,171,140,172,162],
[172,172,186,0,154,164,173,179],
[149,158,170,187,0,129,180,155],
[190,168,201,177,212,0,192,181],
[174,152,169,168,161,149,0,166],
[170,168,179,162,186,160,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,153,163,163,154,169,168],
[154,0,144,160,138,152,156,167],
[188,197,0,185,176,179,170,182],
[178,181,156,0,169,163,157,158],
[178,203,165,172,0,179,161,181],
[187,189,162,178,162,0,204,170],
[172,185,171,184,180,137,0,167],
[173,174,159,183,160,171,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,166,174,174,171,166,156],
[177,0,178,177,171,159,170,176],
[175,163,0,161,161,163,166,151],
[167,164,180,0,174,152,161,162],
[167,170,180,167,0,158,160,159],
[170,182,178,189,183,0,192,178],
[175,171,175,180,181,149,0,173],
[185,165,190,179,182,163,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,165,158,167,177,164,169],
[177,0,166,174,182,185,185,180],
[176,175,0,165,171,189,179,176],
[183,167,176,0,182,180,155,173],
[174,159,170,159,0,172,148,171],
[164,156,152,161,169,0,165,170],
[177,156,162,186,193,176,0,168],
[172,161,165,168,170,171,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,149,140,172,152,156,125],
[215,0,173,174,198,174,187,139],
[192,168,0,184,188,195,200,173],
[201,167,157,0,188,174,184,179],
[169,143,153,153,0,128,148,134],
[189,167,146,167,213,0,168,160],
[185,154,141,157,193,173,0,163],
[216,202,168,162,207,181,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,177,170,198,174,189,164],
[147,0,177,160,179,160,159,155],
[164,164,0,172,167,153,176,150],
[171,181,169,0,178,158,186,158],
[143,162,174,163,0,146,180,158],
[167,181,188,183,195,0,209,193],
[152,182,165,155,161,132,0,143],
[177,186,191,183,183,148,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,159,184,157,152,164,140],
[188,0,162,156,192,163,164,185],
[182,179,0,154,188,170,160,159],
[157,185,187,0,171,183,186,167],
[184,149,153,170,0,146,151,151],
[189,178,171,158,195,0,186,165],
[177,177,181,155,190,155,0,177],
[201,156,182,174,190,176,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,170,182,185,196,146,185],
[160,0,169,170,181,169,145,157],
[171,172,0,188,186,176,154,196],
[159,171,153,0,173,135,167,182],
[156,160,155,168,0,168,117,159],
[145,172,165,206,173,0,176,166],
[195,196,187,174,224,165,0,199],
[156,184,145,159,182,175,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,169,163,165,149,156,154],
[174,0,173,177,168,151,167,173],
[172,168,0,170,167,169,161,163],
[178,164,171,0,164,159,174,150],
[176,173,174,177,0,169,160,162],
[192,190,172,182,172,0,173,170],
[185,174,180,167,181,168,0,175],
[187,168,178,191,179,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,168,195,178,187,162,171],
[141,0,154,191,136,136,154,136],
[173,187,0,194,140,167,182,176],
[146,150,147,0,143,147,131,158],
[163,205,201,198,0,194,122,170],
[154,205,174,194,147,0,139,175],
[179,187,159,210,219,202,0,174],
[170,205,165,183,171,166,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,183,189,184,177,168,185],
[156,0,153,162,155,157,157,170],
[158,188,0,169,155,156,168,166],
[152,179,172,0,173,179,171,177],
[157,186,186,168,0,183,178,184],
[164,184,185,162,158,0,163,172],
[173,184,173,170,163,178,0,181],
[156,171,175,164,157,169,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,157,165,187,177,152,181],
[168,0,157,168,173,182,143,163],
[184,184,0,156,198,182,175,188],
[176,173,185,0,195,177,165,156],
[154,168,143,146,0,155,143,150],
[164,159,159,164,186,0,147,164],
[189,198,166,176,198,194,0,177],
[160,178,153,185,191,177,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,163,173,180,156,167,171],
[184,0,172,173,165,174,178,167],
[178,169,0,183,177,167,170,192],
[168,168,158,0,162,151,155,164],
[161,176,164,179,0,145,180,143],
[185,167,174,190,196,0,200,186],
[174,163,171,186,161,141,0,166],
[170,174,149,177,198,155,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,112,159,157,173,114,193],
[195,0,179,149,173,195,166,221],
[229,162,0,201,206,219,177,187],
[182,192,140,0,212,204,184,215],
[184,168,135,129,0,228,153,174],
[168,146,122,137,113,0,136,173],
[227,175,164,157,188,205,0,234],
[148,120,154,126,167,168,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,183,155,162,174,167,166],
[164,0,171,164,157,150,167,159],
[158,170,0,155,156,153,151,174],
[186,177,186,0,154,155,177,174],
[179,184,185,187,0,170,174,188],
[167,191,188,186,171,0,175,175],
[174,174,190,164,167,166,0,167],
[175,182,167,167,153,166,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,185,199,163,158,174,163],
[169,0,178,188,169,173,174,186],
[156,163,0,182,164,158,172,168],
[142,153,159,0,139,155,158,169],
[178,172,177,202,0,170,160,185],
[183,168,183,186,171,0,173,204],
[167,167,169,183,181,168,0,175],
[178,155,173,172,156,137,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,178,197,184,172,182,181],
[184,0,172,184,163,184,198,173],
[163,169,0,204,180,168,212,182],
[144,157,137,0,170,147,182,158],
[157,178,161,171,0,160,198,164],
[169,157,173,194,181,0,203,175],
[159,143,129,159,143,138,0,136],
[160,168,159,183,177,166,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,201,143,228,173,258,201],
[169,0,170,115,198,85,229,198],
[140,171,0,114,169,59,202,113],
[198,226,227,0,199,143,257,199],
[113,143,172,142,0,88,201,113],
[168,256,282,198,253,0,257,227],
[83,112,139,84,140,84,0,140],
[140,143,228,142,228,114,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,175,182,165,206,183,177],
[149,0,169,191,176,194,163,172],
[166,172,0,164,148,185,175,158],
[159,150,177,0,126,171,150,132],
[176,165,193,215,0,182,160,169],
[135,147,156,170,159,0,162,136],
[158,178,166,191,181,179,0,161],
[164,169,183,209,172,205,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,174,162,169,166,160,175],
[180,0,181,180,172,166,175,178],
[167,160,0,175,162,168,161,181],
[179,161,166,0,171,152,171,177],
[172,169,179,170,0,165,168,180],
[175,175,173,189,176,0,168,175],
[181,166,180,170,173,173,0,184],
[166,163,160,164,161,166,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,178,167,190,180,184,168],
[161,0,176,165,174,174,171,171],
[163,165,0,169,176,170,166,164],
[174,176,172,0,169,180,183,172],
[151,167,165,172,0,163,170,153],
[161,167,171,161,178,0,176,162],
[157,170,175,158,171,165,0,166],
[173,170,177,169,188,179,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,161,173,176,158,181,166],
[176,0,165,166,167,161,174,170],
[180,176,0,186,175,169,181,186],
[168,175,155,0,156,176,168,173],
[165,174,166,185,0,173,189,171],
[183,180,172,165,168,0,173,163],
[160,167,160,173,152,168,0,158],
[175,171,155,168,170,178,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,168,163,171,170,171,177],
[157,0,159,158,157,161,152,143],
[173,182,0,145,180,185,158,167],
[178,183,196,0,174,165,165,174],
[170,184,161,167,0,166,175,181],
[171,180,156,176,175,0,165,163],
[170,189,183,176,166,176,0,163],
[164,198,174,167,160,178,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,173,180,180,172,169,179],
[166,0,160,162,159,164,164,169],
[168,181,0,166,191,170,184,181],
[161,179,175,0,166,168,165,179],
[161,182,150,175,0,165,167,177],
[169,177,171,173,176,0,177,169],
[172,177,157,176,174,164,0,171],
[162,172,160,162,164,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,170,135,169,149,173,189],
[151,0,115,150,202,183,189,149],
[171,226,0,185,238,203,208,154],
[206,191,156,0,225,206,156,191],
[172,139,103,116,0,69,157,154],
[192,158,138,135,272,0,156,190],
[168,152,133,185,184,185,0,152],
[152,192,187,150,187,151,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,174,180,164,177,160,171],
[154,0,161,153,150,177,157,149],
[167,180,0,169,163,175,177,170],
[161,188,172,0,160,185,165,164],
[177,191,178,181,0,179,176,170],
[164,164,166,156,162,0,174,148],
[181,184,164,176,165,167,0,168],
[170,192,171,177,171,193,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,172,194,164,163,191,174],
[165,0,195,178,170,172,177,188],
[169,146,0,158,136,151,153,157],
[147,163,183,0,161,148,187,198],
[177,171,205,180,0,147,208,167],
[178,169,190,193,194,0,181,198],
[150,164,188,154,133,160,0,160],
[167,153,184,143,174,143,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,173,179,191,172,169,193],
[143,0,154,167,187,137,163,164],
[168,187,0,177,177,173,168,169],
[162,174,164,0,178,154,158,165],
[150,154,164,163,0,148,142,155],
[169,204,168,187,193,0,193,189],
[172,178,173,183,199,148,0,177],
[148,177,172,176,186,152,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,175,172,176,169,187,176],
[173,0,173,166,176,179,165,164],
[166,168,0,153,174,174,166,164],
[169,175,188,0,193,181,183,166],
[165,165,167,148,0,174,163,160],
[172,162,167,160,167,0,168,154],
[154,176,175,158,178,173,0,167],
[165,177,177,175,181,187,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,191,181,169,169,172,190],
[161,0,193,160,161,156,178,174],
[150,148,0,160,151,166,154,182],
[160,181,181,0,147,164,167,189],
[172,180,190,194,0,173,169,185],
[172,185,175,177,168,0,156,182],
[169,163,187,174,172,185,0,169],
[151,167,159,152,156,159,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,197,193,170,203,164,160],
[179,0,176,188,176,224,170,162],
[144,165,0,185,138,182,186,150],
[148,153,156,0,163,163,107,117],
[171,165,203,178,0,212,142,129],
[138,117,159,178,129,0,111,113],
[177,171,155,234,199,230,0,177],
[181,179,191,224,212,228,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,153,128,148,201,138,136],
[210,0,164,186,218,292,223,211],
[188,177,0,138,164,260,222,176],
[213,155,203,0,141,234,198,175],
[193,123,177,200,0,249,178,179],
[140,49,81,107,92,0,127,106],
[203,118,119,143,163,214,0,188],
[205,130,165,166,162,235,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,172,159,176,168,178,173],
[168,0,188,165,184,163,182,190],
[169,153,0,155,175,155,163,171],
[182,176,186,0,196,168,172,165],
[165,157,166,145,0,162,167,160],
[173,178,186,173,179,0,164,175],
[163,159,178,169,174,177,0,186],
[168,151,170,176,181,166,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,201,160,164,186,173,165],
[151,0,209,165,156,181,168,162],
[140,132,0,140,147,155,145,147],
[181,176,201,0,163,186,173,173],
[177,185,194,178,0,188,171,170],
[155,160,186,155,153,0,159,160],
[168,173,196,168,170,182,0,174],
[176,179,194,168,171,181,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,141,174,155,169,220,194],
[182,0,171,149,168,207,225,197],
[200,170,0,193,182,206,230,222],
[167,192,148,0,119,150,215,167],
[186,173,159,222,0,162,222,212],
[172,134,135,191,179,0,224,186],
[121,116,111,126,119,117,0,147],
[147,144,119,174,129,155,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,161,174,169,162,164,182],
[158,0,161,173,164,163,147,165],
[180,180,0,168,163,168,173,182],
[167,168,173,0,168,157,163,169],
[172,177,178,173,0,159,159,175],
[179,178,173,184,182,0,163,183],
[177,194,168,178,182,178,0,175],
[159,176,159,172,166,158,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,166,187,189,170,164,155],
[167,0,170,187,178,173,178,149],
[175,171,0,188,180,152,171,153],
[154,154,153,0,179,145,143,141],
[152,163,161,162,0,150,153,150],
[171,168,189,196,191,0,160,173],
[177,163,170,198,188,181,0,177],
[186,192,188,200,191,168,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,162,163,161,149,168,153],
[178,0,157,143,158,124,166,150],
[179,184,0,164,190,152,176,184],
[178,198,177,0,169,173,169,172],
[180,183,151,172,0,180,180,170],
[192,217,189,168,161,0,208,166],
[173,175,165,172,161,133,0,157],
[188,191,157,169,171,175,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,185,169,188,178,179,176],
[157,0,159,160,155,151,161,164],
[156,182,0,159,163,152,148,178],
[172,181,182,0,175,177,163,175],
[153,186,178,166,0,164,174,170],
[163,190,189,164,177,0,159,169],
[162,180,193,178,167,182,0,175],
[165,177,163,166,171,172,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,126,166,145,166,163,172],
[183,0,157,171,146,194,152,163],
[215,184,0,170,150,187,209,158],
[175,170,171,0,175,176,172,163],
[196,195,191,166,0,182,183,164],
[175,147,154,165,159,0,165,171],
[178,189,132,169,158,176,0,178],
[169,178,183,178,177,170,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,196,204,168,168,190,174],
[152,0,176,187,169,156,172,158],
[145,165,0,160,145,151,159,166],
[137,154,181,0,151,143,163,147],
[173,172,196,190,0,174,173,149],
[173,185,190,198,167,0,186,161],
[151,169,182,178,168,155,0,153],
[167,183,175,194,192,180,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,115,228,228,115,341,113],
[226,0,341,228,228,115,341,113],
[226,0,0,228,228,0,226,113],
[113,113,113,0,0,113,113,113],
[113,113,113,341,0,113,226,226],
[226,226,341,228,228,0,341,113],
[0,0,115,228,115,0,0,113],
[228,228,228,228,115,228,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,180,171,167,159,165,163],
[179,0,172,174,171,162,156,155],
[161,169,0,165,167,167,166,158],
[170,167,176,0,171,171,163,165],
[174,170,174,170,0,159,139,180],
[182,179,174,170,182,0,174,179],
[176,185,175,178,202,167,0,175],
[178,186,183,176,161,162,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,160,163,166,162,169,159],
[171,0,157,169,150,175,158,156],
[181,184,0,196,183,179,173,166],
[178,172,145,0,164,166,157,163],
[175,191,158,177,0,181,168,175],
[179,166,162,175,160,0,170,174],
[172,183,168,184,173,171,0,176],
[182,185,175,178,166,167,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,166,175,154,167,170,173],
[167,0,185,195,185,189,197,148],
[175,156,0,172,179,192,186,165],
[166,146,169,0,172,179,191,159],
[187,156,162,169,0,165,170,152],
[174,152,149,162,176,0,162,152],
[171,144,155,150,171,179,0,158],
[168,193,176,182,189,189,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,158,155,163,155,168,166],
[177,0,171,183,171,164,183,177],
[183,170,0,167,175,165,170,165],
[186,158,174,0,160,157,181,182],
[178,170,166,181,0,171,160,187],
[186,177,176,184,170,0,181,183],
[173,158,171,160,181,160,0,167],
[175,164,176,159,154,158,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,159,175,143,148,160,158],
[169,0,147,185,155,161,156,148],
[182,194,0,206,193,165,192,171],
[166,156,135,0,153,149,148,149],
[198,186,148,188,0,173,155,161],
[193,180,176,192,168,0,172,149],
[181,185,149,193,186,169,0,154],
[183,193,170,192,180,192,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,186,175,183,188,140,227],
[135,0,168,184,174,165,184,213],
[155,173,0,195,138,147,159,169],
[166,157,146,0,157,160,195,161],
[158,167,203,184,0,200,189,194],
[153,176,194,181,141,0,134,195],
[201,157,182,146,152,207,0,185],
[114,128,172,180,147,146,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,190,161,212,188,170,178],
[162,0,168,138,179,180,163,167],
[151,173,0,150,182,171,132,177],
[180,203,191,0,207,203,185,169],
[129,162,159,134,0,172,152,171],
[153,161,170,138,169,0,148,158],
[171,178,209,156,189,193,0,181],
[163,174,164,172,170,183,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,175,174,165,173,187,180],
[163,0,186,169,148,167,196,174],
[166,155,0,166,145,164,174,140],
[167,172,175,0,156,161,177,154],
[176,193,196,185,0,172,200,168],
[168,174,177,180,169,0,193,167],
[154,145,167,164,141,148,0,142],
[161,167,201,187,173,174,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,190,173,172,175,162,173],
[162,0,171,161,165,172,161,166],
[151,170,0,154,161,170,156,159],
[168,180,187,0,185,182,180,183],
[169,176,180,156,0,181,155,165],
[166,169,171,159,160,0,158,176],
[179,180,185,161,186,183,0,184],
[168,175,182,158,176,165,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,144,148,161,180,194,174],
[165,0,130,146,145,172,197,182],
[197,211,0,159,190,165,205,175],
[193,195,182,0,167,192,190,166],
[180,196,151,174,0,164,209,199],
[161,169,176,149,177,0,157,175],
[147,144,136,151,132,184,0,138],
[167,159,166,175,142,166,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,197,175,169,190,182,163],
[144,0,171,178,171,176,148,175],
[144,170,0,175,157,176,157,169],
[166,163,166,0,168,158,167,168],
[172,170,184,173,0,182,162,183],
[151,165,165,183,159,0,174,157],
[159,193,184,174,179,167,0,186],
[178,166,172,173,158,184,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,187,177,197,151,175,186],
[180,0,165,171,186,152,187,153],
[154,176,0,187,177,171,147,162],
[164,170,154,0,171,149,158,150],
[144,155,164,170,0,147,164,152],
[190,189,170,192,194,0,176,187],
[166,154,194,183,177,165,0,172],
[155,188,179,191,189,154,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,155,187,145,164,146,131],
[157,0,160,176,145,175,160,154],
[186,181,0,186,160,163,147,162],
[154,165,155,0,144,182,103,146],
[196,196,181,197,0,167,174,179],
[177,166,178,159,174,0,121,174],
[195,181,194,238,167,220,0,178],
[210,187,179,195,162,167,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,169,180,165,187,177,171],
[152,0,147,163,174,176,179,147],
[172,194,0,182,164,186,172,174],
[161,178,159,0,170,175,173,157],
[176,167,177,171,0,166,171,161],
[154,165,155,166,175,0,168,148],
[164,162,169,168,170,173,0,166],
[170,194,167,184,180,193,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,168,193,186,173,167,176],
[177,0,162,170,179,154,173,165],
[173,179,0,182,206,154,167,162],
[148,171,159,0,177,171,179,174],
[155,162,135,164,0,151,174,149],
[168,187,187,170,190,0,173,159],
[174,168,174,162,167,168,0,144],
[165,176,179,167,192,182,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,168,158,162,163,170,174],
[169,0,182,154,165,161,166,168],
[173,159,0,162,190,171,141,167],
[183,187,179,0,190,184,161,181],
[179,176,151,151,0,175,161,160],
[178,180,170,157,166,0,160,165],
[171,175,200,180,180,181,0,170],
[167,173,174,160,181,176,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,149,178,158,163,155,177],
[165,0,139,150,150,155,165,167],
[192,202,0,192,173,180,169,158],
[163,191,149,0,161,162,162,163],
[183,191,168,180,0,177,179,174],
[178,186,161,179,164,0,173,173],
[186,176,172,179,162,168,0,167],
[164,174,183,178,167,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,159,157,156,164,165,173],
[194,0,181,197,179,169,186,193],
[182,160,0,187,170,158,173,199],
[184,144,154,0,156,153,161,170],
[185,162,171,185,0,176,179,180],
[177,172,183,188,165,0,173,179],
[176,155,168,180,162,168,0,180],
[168,148,142,171,161,162,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,169,176,176,166,167,160],
[174,0,175,171,174,168,165,175],
[172,166,0,165,171,163,158,150],
[165,170,176,0,174,166,164,172],
[165,167,170,167,0,160,158,156],
[175,173,178,175,181,0,161,170],
[174,176,183,177,183,180,0,164],
[181,166,191,169,185,171,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,183,169,173,173,179,174],
[172,0,165,162,184,158,162,175],
[158,176,0,170,179,159,159,172],
[172,179,171,0,183,169,177,166],
[168,157,162,158,0,156,181,184],
[168,183,182,172,185,0,185,189],
[162,179,182,164,160,156,0,176],
[167,166,169,175,157,152,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,149,112,265,152,110,223],
[151,0,189,113,267,75,113,187],
[192,152,0,154,190,117,229,150],
[229,228,187,0,266,191,150,185],
[76,74,151,75,0,75,112,149],
[189,266,224,150,266,0,187,223],
[231,228,112,191,229,154,0,186],
[118,154,191,156,192,118,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,160,168,169,172,161,175],
[182,0,171,165,169,178,165,169],
[181,170,0,166,170,180,171,167],
[173,176,175,0,173,179,169,170],
[172,172,171,168,0,174,164,171],
[169,163,161,162,167,0,147,164],
[180,176,170,172,177,194,0,177],
[166,172,174,171,170,177,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,181,198,180,154,179,180],
[170,0,182,195,175,172,180,175],
[160,159,0,189,177,161,179,168],
[143,146,152,0,159,163,182,165],
[161,166,164,182,0,166,174,160],
[187,169,180,178,175,0,173,176],
[162,161,162,159,167,168,0,160],
[161,166,173,176,181,165,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,153,157,167,152,150,150],
[173,0,163,159,161,168,162,154],
[188,178,0,163,180,171,191,170],
[184,182,178,0,181,180,180,166],
[174,180,161,160,0,157,176,174],
[189,173,170,161,184,0,177,167],
[191,179,150,161,165,164,0,158],
[191,187,171,175,167,174,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,167,133,170,154,148,161],
[187,0,187,163,180,172,163,176],
[174,154,0,131,171,150,150,162],
[208,178,210,0,189,177,162,196],
[171,161,170,152,0,164,171,164],
[187,169,191,164,177,0,155,173],
[193,178,191,179,170,186,0,191],
[180,165,179,145,177,168,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,152,163,146,162,179,168],
[170,0,150,173,167,179,192,185],
[189,191,0,164,161,179,176,179],
[178,168,177,0,174,177,204,196],
[195,174,180,167,0,162,164,173],
[179,162,162,164,179,0,160,175],
[162,149,165,137,177,181,0,135],
[173,156,162,145,168,166,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,170,180,226,177,165,161],
[174,0,177,178,201,215,180,162],
[171,164,0,139,175,191,137,185],
[161,163,202,0,218,203,167,190],
[115,140,166,123,0,180,152,149],
[164,126,150,138,161,0,190,176],
[176,161,204,174,189,151,0,164],
[180,179,156,151,192,165,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,171,165,168,175,153,174],
[176,0,168,180,164,160,151,174],
[170,173,0,179,177,171,176,171],
[176,161,162,0,165,164,171,160],
[173,177,164,176,0,168,169,175],
[166,181,170,177,173,0,153,160],
[188,190,165,170,172,188,0,164],
[167,167,170,181,166,181,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,160,175,167,175,179,152],
[173,0,170,185,173,175,194,172],
[181,171,0,186,178,172,197,168],
[166,156,155,0,175,180,160,164],
[174,168,163,166,0,182,185,160],
[166,166,169,161,159,0,165,157],
[162,147,144,181,156,176,0,175],
[189,169,173,177,181,184,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,171,167,164,169,162,178],
[172,0,190,168,175,184,172,186],
[170,151,0,162,158,155,146,163],
[174,173,179,0,175,162,150,177],
[177,166,183,166,0,163,181,186],
[172,157,186,179,178,0,173,184],
[179,169,195,191,160,168,0,181],
[163,155,178,164,155,157,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,178,171,177,162,164,176],
[160,0,183,160,190,174,162,146],
[163,158,0,182,172,168,181,153],
[170,181,159,0,169,174,158,173],
[164,151,169,172,0,161,158,140],
[179,167,173,167,180,0,166,157],
[177,179,160,183,183,175,0,146],
[165,195,188,168,201,184,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,136,189,159,177,194,193],
[134,0,128,158,128,171,122,128],
[205,213,0,188,182,186,156,166],
[152,183,153,0,202,205,134,155],
[182,213,159,139,0,187,150,181],
[164,170,155,136,154,0,141,148],
[147,219,185,207,191,200,0,189],
[148,213,175,186,160,193,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,169,168,153,154,200,183],
[167,0,162,172,154,174,198,158],
[172,179,0,165,179,172,185,190],
[173,169,176,0,175,187,198,193],
[188,187,162,166,0,176,208,188],
[187,167,169,154,165,0,197,189],
[141,143,156,143,133,144,0,143],
[158,183,151,148,153,152,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,173,153,152,164,172,149],
[171,0,169,154,144,186,174,166],
[168,172,0,157,168,172,153,154],
[188,187,184,0,155,197,185,168],
[189,197,173,186,0,182,166,171],
[177,155,169,144,159,0,167,131],
[169,167,188,156,175,174,0,172],
[192,175,187,173,170,210,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,175,156,189,176,172,186],
[175,0,175,171,218,166,187,176],
[166,166,0,137,170,186,157,149],
[185,170,204,0,167,149,191,176],
[152,123,171,174,0,132,169,160],
[165,175,155,192,209,0,218,171],
[169,154,184,150,172,123,0,161],
[155,165,192,165,181,170,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,172,177,169,159,172,159],
[168,0,169,178,188,164,182,162],
[169,172,0,181,186,182,176,181],
[164,163,160,0,176,176,173,170],
[172,153,155,165,0,172,178,167],
[182,177,159,165,169,0,166,171],
[169,159,165,168,163,175,0,176],
[182,179,160,171,174,170,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,176,182,173,168,187,188],
[163,0,164,175,172,166,180,176],
[165,177,0,171,170,169,197,180],
[159,166,170,0,160,157,171,175],
[168,169,171,181,0,176,181,175],
[173,175,172,184,165,0,188,179],
[154,161,144,170,160,153,0,174],
[153,165,161,166,166,162,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,158,162,170,154,162,161],
[185,0,191,171,170,173,185,178],
[183,150,0,167,179,163,168,159],
[179,170,174,0,178,178,170,175],
[171,171,162,163,0,155,165,169],
[187,168,178,163,186,0,170,168],
[179,156,173,171,176,171,0,171],
[180,163,182,166,172,173,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,196,159,174,185,170],
[164,0,157,184,153,155,183,179],
[171,184,0,187,172,166,191,157],
[145,157,154,0,165,150,187,163],
[182,188,169,176,0,175,186,170],
[167,186,175,191,166,0,194,171],
[156,158,150,154,155,147,0,151],
[171,162,184,178,171,170,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,185,176,180,169,179,178],
[163,0,197,194,175,186,185,190],
[156,144,0,169,177,156,167,156],
[165,147,172,0,197,167,169,168],
[161,166,164,144,0,172,166,156],
[172,155,185,174,169,0,175,176],
[162,156,174,172,175,166,0,170],
[163,151,185,173,185,165,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,176,161,155,171,177,164],
[157,0,174,166,161,163,170,167],
[165,167,0,147,145,163,161,152],
[180,175,194,0,173,172,159,172],
[186,180,196,168,0,179,177,178],
[170,178,178,169,162,0,176,157],
[164,171,180,182,164,165,0,175],
[177,174,189,169,163,184,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,178,222,213,162,215,232],
[134,0,110,201,171,142,182,163],
[163,231,0,206,228,182,195,254],
[119,140,135,0,183,121,164,173],
[128,170,113,158,0,124,136,143],
[179,199,159,220,217,0,190,163],
[126,159,146,177,205,151,0,172],
[109,178,87,168,198,178,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,80,143,145,131,114],
[227,0,161,147,143,176,159,159],
[228,180,0,195,178,194,178,161],
[261,194,146,0,193,193,194,175],
[198,198,163,148,0,177,149,178],
[196,165,147,148,164,0,164,176],
[210,182,163,147,192,177,0,176],
[227,182,180,166,163,165,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,182,180,185,185,174,170],
[168,0,170,175,173,168,161,154],
[159,171,0,148,173,161,162,165],
[161,166,193,0,167,167,169,176],
[156,168,168,174,0,168,172,161],
[156,173,180,174,173,0,170,172],
[167,180,179,172,169,171,0,166],
[171,187,176,165,180,169,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,157,165,175,157,166,178],
[170,0,148,176,177,149,177,165],
[184,193,0,178,194,181,176,169],
[176,165,163,0,176,163,162,179],
[166,164,147,165,0,138,175,166],
[184,192,160,178,203,0,187,192],
[175,164,165,179,166,154,0,180],
[163,176,172,162,175,149,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,172,168,172,169,166,153],
[193,0,190,190,189,186,178,166],
[169,151,0,162,169,172,179,156],
[173,151,179,0,164,165,169,162],
[169,152,172,177,0,174,186,153],
[172,155,169,176,167,0,167,173],
[175,163,162,172,155,174,0,141],
[188,175,185,179,188,168,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,163,182,163,176,181,175],
[170,0,162,168,170,185,168,166],
[178,179,0,178,161,178,170,173],
[159,173,163,0,163,167,169,166],
[178,171,180,178,0,186,167,170],
[165,156,163,174,155,0,141,172],
[160,173,171,172,174,200,0,167],
[166,175,168,175,171,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,143,148,173,166,161,168],
[178,0,187,167,187,191,175,179],
[198,154,0,156,192,199,163,189],
[193,174,185,0,191,182,169,195],
[168,154,149,150,0,178,168,172],
[175,150,142,159,163,0,157,162],
[180,166,178,172,173,184,0,175],
[173,162,152,146,169,179,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,160,170,154,170,169,148],
[189,0,222,171,211,168,204,211],
[181,119,0,138,206,130,138,166],
[171,170,203,0,189,186,229,201],
[187,130,135,152,0,160,171,181],
[171,173,211,155,181,0,193,210],
[172,137,203,112,170,148,0,175],
[193,130,175,140,160,131,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,147,96,138,142,139,110],
[182,0,177,147,175,195,174,125],
[194,164,0,164,182,179,190,151],
[245,194,177,0,168,205,170,176],
[203,166,159,173,0,188,184,157],
[199,146,162,136,153,0,137,145],
[202,167,151,171,157,204,0,146],
[231,216,190,165,184,196,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,159,173,170,150,179,174],
[188,0,171,194,169,189,175,178],
[182,170,0,183,173,174,194,196],
[168,147,158,0,142,148,160,165],
[171,172,168,199,0,161,169,180],
[191,152,167,193,180,0,181,176],
[162,166,147,181,172,160,0,180],
[167,163,145,176,161,165,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,166,162,156,178,172,169],
[185,0,193,180,184,167,169,176],
[175,148,0,181,171,179,170,165],
[179,161,160,0,155,176,180,164],
[185,157,170,186,0,183,167,172],
[163,174,162,165,158,0,163,171],
[169,172,171,161,174,178,0,175],
[172,165,176,177,169,170,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,167,179,174,187,185,182],
[157,0,147,145,146,151,167,147],
[174,194,0,183,159,182,197,179],
[162,196,158,0,154,166,181,191],
[167,195,182,187,0,177,185,186],
[154,190,159,175,164,0,176,180],
[156,174,144,160,156,165,0,168],
[159,194,162,150,155,161,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,159,158,159,205,183,183],
[159,0,137,137,205,135,181,207],
[182,204,0,204,202,226,226,160],
[183,204,137,0,182,159,205,183],
[182,136,139,159,0,113,137,186],
[136,206,115,182,228,0,180,252],
[158,160,115,136,204,161,0,160],
[158,134,181,158,155,89,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,168,164,164,172,181,170],
[161,0,171,177,178,164,168,170],
[173,170,0,181,179,152,178,161],
[177,164,160,0,152,155,160,174],
[177,163,162,189,0,165,174,168],
[169,177,189,186,176,0,176,178],
[160,173,163,181,167,165,0,172],
[171,171,180,167,173,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,142,140,169,184,158,152],
[182,0,145,177,181,182,170,162],
[199,196,0,165,185,185,204,194],
[201,164,176,0,204,198,183,177],
[172,160,156,137,0,172,161,179],
[157,159,156,143,169,0,147,156],
[183,171,137,158,180,194,0,185],
[189,179,147,164,162,185,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,199,178,162,173,164,184],
[161,0,181,163,188,149,157,163],
[142,160,0,184,180,159,187,170],
[163,178,157,0,175,167,176,161],
[179,153,161,166,0,161,195,167],
[168,192,182,174,180,0,184,168],
[177,184,154,165,146,157,0,190],
[157,178,171,180,174,173,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,169,159,155,170,174,148],
[187,0,173,173,177,165,180,165],
[172,168,0,165,176,166,178,156],
[182,168,176,0,169,165,193,164],
[186,164,165,172,0,171,185,150],
[171,176,175,176,170,0,198,178],
[167,161,163,148,156,143,0,159],
[193,176,185,177,191,163,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,150,192,149,159,154,183],
[150,0,142,156,140,131,148,129],
[191,199,0,189,156,164,178,192],
[149,185,152,0,171,149,163,161],
[192,201,185,170,0,166,183,174],
[182,210,177,192,175,0,165,170],
[187,193,163,178,158,176,0,181],
[158,212,149,180,167,171,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,174,177,163,165,159,162],
[164,0,174,182,172,161,151,140],
[167,167,0,188,180,169,173,164],
[164,159,153,0,163,149,159,160],
[178,169,161,178,0,160,166,161],
[176,180,172,192,181,0,168,173],
[182,190,168,182,175,173,0,147],
[179,201,177,181,180,168,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,133,161,133,170,126,192],
[207,0,154,181,179,164,136,215],
[208,187,0,143,149,171,189,200],
[180,160,198,0,142,164,155,210],
[208,162,192,199,0,162,153,217],
[171,177,170,177,179,0,159,164],
[215,205,152,186,188,182,0,169],
[149,126,141,131,124,177,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,180,154,175,161,169,179],
[176,0,161,190,178,182,167,169],
[161,180,0,162,182,189,148,142],
[187,151,179,0,184,172,164,136],
[166,163,159,157,0,181,161,135],
[180,159,152,169,160,0,174,155],
[172,174,193,177,180,167,0,155],
[162,172,199,205,206,186,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,186,169,172,169,189,181],
[166,0,168,160,181,162,186,160],
[155,173,0,172,165,153,173,153],
[172,181,169,0,190,173,166,164],
[169,160,176,151,0,140,158,161],
[172,179,188,168,201,0,174,193],
[152,155,168,175,183,167,0,178],
[160,181,188,177,180,148,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,197,180,180,181,190,179],
[183,0,176,166,156,189,179,175],
[144,165,0,162,152,150,160,181],
[161,175,179,0,173,163,181,177],
[161,185,189,168,0,162,162,167],
[160,152,191,178,179,0,166,181],
[151,162,181,160,179,175,0,189],
[162,166,160,164,174,160,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,160,153,167,172,153,159],
[191,0,175,162,159,187,165,173],
[181,166,0,151,171,176,176,156],
[188,179,190,0,179,191,159,178],
[174,182,170,162,0,180,171,177],
[169,154,165,150,161,0,160,161],
[188,176,165,182,170,181,0,184],
[182,168,185,163,164,180,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,157,167,161,159,181,152],
[142,0,129,136,143,176,179,148],
[184,212,0,175,169,171,182,178],
[174,205,166,0,180,213,203,173],
[180,198,172,161,0,192,199,172],
[182,165,170,128,149,0,202,167],
[160,162,159,138,142,139,0,163],
[189,193,163,168,169,174,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,163,163,179,145,180,150],
[174,0,179,168,166,187,169,150],
[178,162,0,161,174,183,161,166],
[178,173,180,0,175,166,170,176],
[162,175,167,166,0,165,169,165],
[196,154,158,175,176,0,181,179],
[161,172,180,171,172,160,0,170],
[191,191,175,165,176,162,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,181,182,191,182,159,158],
[168,0,210,186,194,166,172,182],
[160,131,0,165,193,148,171,172],
[159,155,176,0,186,163,176,177],
[150,147,148,155,0,163,164,168],
[159,175,193,178,178,0,176,174],
[182,169,170,165,177,165,0,168],
[183,159,169,164,173,167,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,178,169,198,189,168,172],
[169,0,163,166,177,174,172,164],
[163,178,0,158,180,174,147,151],
[172,175,183,0,204,177,178,160],
[143,164,161,137,0,164,155,157],
[152,167,167,164,177,0,177,167],
[173,169,194,163,186,164,0,166],
[169,177,190,181,184,174,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,163,165,153,169,199,186],
[158,0,174,185,179,158,168,190],
[178,167,0,180,164,176,173,201],
[176,156,161,0,169,174,176,201],
[188,162,177,172,0,176,177,184],
[172,183,165,167,165,0,173,171],
[142,173,168,165,164,168,0,168],
[155,151,140,140,157,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,179,194,163,197,129,180],
[155,0,178,186,172,197,157,194],
[162,163,0,203,172,174,159,172],
[147,155,138,0,182,180,139,173],
[178,169,169,159,0,152,161,150],
[144,144,167,161,189,0,146,185],
[212,184,182,202,180,195,0,154],
[161,147,169,168,191,156,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,185,172,162,175,193,170],
[174,0,205,183,166,176,191,184],
[156,136,0,149,145,143,155,158],
[169,158,192,0,178,185,187,194],
[179,175,196,163,0,184,185,186],
[166,165,198,156,157,0,178,188],
[148,150,186,154,156,163,0,168],
[171,157,183,147,155,153,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,185,163,148,140,165,143],
[167,0,183,156,147,154,165,140],
[156,158,0,154,134,143,147,152],
[178,185,187,0,181,156,190,179],
[193,194,207,160,0,157,173,162],
[201,187,198,185,184,0,203,168],
[176,176,194,151,168,138,0,162],
[198,201,189,162,179,173,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,171,138,152,157,127,169],
[180,0,165,164,170,163,152,167],
[170,176,0,153,148,158,141,164],
[203,177,188,0,167,187,152,169],
[189,171,193,174,0,165,174,174],
[184,178,183,154,176,0,163,200],
[214,189,200,189,167,178,0,173],
[172,174,177,172,167,141,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,168,165,159,178,187,186],
[165,0,178,164,171,164,189,171],
[173,163,0,161,150,163,171,183],
[176,177,180,0,178,167,187,181],
[182,170,191,163,0,169,182,192],
[163,177,178,174,172,0,185,169],
[154,152,170,154,159,156,0,167],
[155,170,158,160,149,172,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,168,176,191,189,185,192],
[166,0,172,180,187,175,176,185],
[173,169,0,176,167,158,177,184],
[165,161,165,0,199,187,170,166],
[150,154,174,142,0,167,172,169],
[152,166,183,154,174,0,161,168],
[156,165,164,171,169,180,0,176],
[149,156,157,175,172,173,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,162,174,177,159,162,181],
[161,0,176,179,173,178,177,203],
[179,165,0,177,186,164,178,181],
[167,162,164,0,173,165,159,183],
[164,168,155,168,0,171,164,175],
[182,163,177,176,170,0,169,187],
[179,164,163,182,177,172,0,195],
[160,138,160,158,166,154,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,165,181,168,167,177,173],
[175,0,179,170,173,175,181,170],
[176,162,0,156,179,170,187,168],
[160,171,185,0,182,177,180,153],
[173,168,162,159,0,182,174,166],
[174,166,171,164,159,0,179,155],
[164,160,154,161,167,162,0,168],
[168,171,173,188,175,186,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,178,209,142,167,187,187],
[184,0,186,192,162,187,182,216],
[163,155,0,164,141,135,153,174],
[132,149,177,0,163,113,143,161],
[199,179,200,178,0,167,186,177],
[174,154,206,228,174,0,129,206],
[154,159,188,198,155,212,0,209],
[154,125,167,180,164,135,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,168,161,174,178,180,180],
[163,0,173,164,172,173,177,180],
[173,168,0,159,174,177,174,176],
[180,177,182,0,193,197,170,178],
[167,169,167,148,0,175,172,175],
[163,168,164,144,166,0,159,160],
[161,164,167,171,169,182,0,176],
[161,161,165,163,166,181,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,169,173,184,163,160,166],
[169,0,168,158,172,162,174,167],
[172,173,0,158,173,178,176,174],
[168,183,183,0,186,174,174,172],
[157,169,168,155,0,166,187,184],
[178,179,163,167,175,0,178,171],
[181,167,165,167,154,163,0,172],
[175,174,167,169,157,170,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,185,170,179,171,158,176],
[167,0,168,171,172,161,153,171],
[156,173,0,173,170,153,151,169],
[171,170,168,0,179,157,155,190],
[162,169,171,162,0,151,146,165],
[170,180,188,184,190,0,171,174],
[183,188,190,186,195,170,0,183],
[165,170,172,151,176,167,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,165,151,151,163,156,149],
[180,0,168,148,171,176,169,165],
[176,173,0,158,164,175,170,170],
[190,193,183,0,168,193,172,183],
[190,170,177,173,0,186,167,172],
[178,165,166,148,155,0,169,152],
[185,172,171,169,174,172,0,165],
[192,176,171,158,169,189,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,164,168,161,154,161,171],
[184,0,167,172,169,176,168,173],
[177,174,0,185,175,168,180,173],
[173,169,156,0,161,168,158,171],
[180,172,166,180,0,176,177,166],
[187,165,173,173,165,0,165,166],
[180,173,161,183,164,176,0,175],
[170,168,168,170,175,175,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,179,180,164,161,179,183],
[181,0,180,157,177,175,172,175],
[162,161,0,155,145,162,166,170],
[161,184,186,0,169,164,178,168],
[177,164,196,172,0,171,204,174],
[180,166,179,177,170,0,192,176],
[162,169,175,163,137,149,0,160],
[158,166,171,173,167,165,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,189,167,152,179,177,173],
[154,0,169,146,167,155,145,125],
[152,172,0,145,102,166,136,169],
[174,195,196,0,167,186,195,175],
[189,174,239,174,0,167,179,190],
[162,186,175,155,174,0,169,185],
[164,196,205,146,162,172,0,177],
[168,216,172,166,151,156,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,171,162,179,177,165,159],
[160,0,169,175,175,155,167,158],
[170,172,0,169,179,167,166,177],
[179,166,172,0,186,167,161,160],
[162,166,162,155,0,150,151,150],
[164,186,174,174,191,0,178,160],
[176,174,175,180,190,163,0,174],
[182,183,164,181,191,181,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,172,184,173,137,140,140],
[154,0,169,233,190,177,154,180],
[169,172,0,237,188,163,189,192],
[157,108,104,0,113,139,119,104],
[168,151,153,228,0,178,131,193],
[204,164,178,202,163,0,135,143],
[201,187,152,222,210,206,0,222],
[201,161,149,237,148,198,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,186,144,174,166,157,168],
[182,0,177,174,185,200,172,157],
[155,164,0,179,156,150,167,182],
[197,167,162,0,186,166,169,169],
[167,156,185,155,0,170,180,156],
[175,141,191,175,171,0,180,163],
[184,169,174,172,161,161,0,158],
[173,184,159,172,185,178,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,171,173,172,163,149,143],
[187,0,176,195,176,194,168,178],
[170,165,0,174,164,172,155,162],
[168,146,167,0,157,172,156,144],
[169,165,177,184,0,165,164,155],
[178,147,169,169,176,0,158,154],
[192,173,186,185,177,183,0,160],
[198,163,179,197,186,187,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,153,136,126,141,187,179],
[218,0,173,163,158,177,179,188],
[188,168,0,188,175,159,172,168],
[205,178,153,0,162,152,178,165],
[215,183,166,179,0,165,203,191],
[200,164,182,189,176,0,230,166],
[154,162,169,163,138,111,0,137],
[162,153,173,176,150,175,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,157,170,182,156,166,164],
[171,0,160,192,220,175,194,205],
[184,181,0,174,197,155,145,203],
[171,149,167,0,164,156,159,181],
[159,121,144,177,0,148,155,172],
[185,166,186,185,193,0,191,195],
[175,147,196,182,186,150,0,209],
[177,136,138,160,169,146,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,166,179,199,175,187,182],
[168,0,164,166,186,173,168,182],
[175,177,0,173,203,177,151,170],
[162,175,168,0,195,174,147,165],
[142,155,138,146,0,148,139,164],
[166,168,164,167,193,0,178,178],
[154,173,190,194,202,163,0,179],
[159,159,171,176,177,163,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,152,152,150,155,139,138],
[185,0,178,172,180,178,169,166],
[189,163,0,192,174,201,186,181],
[189,169,149,0,175,186,161,165],
[191,161,167,166,0,178,157,150],
[186,163,140,155,163,0,152,122],
[202,172,155,180,184,189,0,166],
[203,175,160,176,191,219,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,191,191,166,194,220,190],
[178,0,220,221,152,165,192,172],
[150,121,0,165,177,138,178,108],
[150,120,176,0,140,150,157,120],
[175,189,164,201,0,162,187,177],
[147,176,203,191,179,0,227,106],
[121,149,163,184,154,114,0,148],
[151,169,233,221,164,235,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,181,173,179,184,173,164],
[152,0,186,142,165,174,159,144],
[160,155,0,156,157,183,158,154],
[168,199,185,0,165,192,175,164],
[162,176,184,176,0,197,175,166],
[157,167,158,149,144,0,146,144],
[168,182,183,166,166,195,0,172],
[177,197,187,177,175,197,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,171,170,157,170,167,162],
[181,0,170,177,166,180,172,183],
[170,171,0,164,177,184,187,170],
[171,164,177,0,171,167,181,166],
[184,175,164,170,0,174,176,169],
[171,161,157,174,167,0,179,155],
[174,169,154,160,165,162,0,156],
[179,158,171,175,172,186,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,184,158,183,170,154,157],
[164,0,182,171,186,158,177,163],
[157,159,0,160,175,174,160,154],
[183,170,181,0,210,182,181,174],
[158,155,166,131,0,147,143,159],
[171,183,167,159,194,0,180,202],
[187,164,181,160,198,161,0,178],
[184,178,187,167,182,139,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,147,166,176,154,169,183],
[163,0,170,177,189,178,167,172],
[194,171,0,154,174,170,169,181],
[175,164,187,0,181,155,175,191],
[165,152,167,160,0,168,168,157],
[187,163,171,186,173,0,179,177],
[172,174,172,166,173,162,0,168],
[158,169,160,150,184,164,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,170,136,176,143,171,179],
[167,0,195,175,176,172,197,209],
[171,146,0,126,167,134,166,193],
[205,166,215,0,192,167,217,209],
[165,165,174,149,0,154,184,188],
[198,169,207,174,187,0,204,201],
[170,144,175,124,157,137,0,194],
[162,132,148,132,153,140,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,183,169,175,179,174,174],
[173,0,182,162,166,178,179,193],
[158,159,0,166,168,175,163,182],
[172,179,175,0,162,176,180,176],
[166,175,173,179,0,170,181,178],
[162,163,166,165,171,0,177,178],
[167,162,178,161,160,164,0,177],
[167,148,159,165,163,163,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,169,174,172,173,175,164],
[157,0,153,172,152,157,158,164],
[172,188,0,172,180,183,162,180],
[167,169,169,0,173,173,161,170],
[169,189,161,168,0,173,158,184],
[168,184,158,168,168,0,171,167],
[166,183,179,180,183,170,0,171],
[177,177,161,171,157,174,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,180,180,177,170,164,172],
[157,0,172,161,175,167,177,149],
[161,169,0,150,174,166,146,148],
[161,180,191,0,178,181,167,157],
[164,166,167,163,0,148,166,155],
[171,174,175,160,193,0,159,167],
[177,164,195,174,175,182,0,153],
[169,192,193,184,186,174,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,341,115,113,113,115,228],
[113,0,341,115,113,226,115,115],
[0,0,0,0,0,113,115,0],
[226,226,341,0,226,226,341,113],
[228,228,341,115,0,341,115,228],
[228,115,228,115,0,0,115,115],
[226,226,226,0,226,226,0,113],
[113,226,341,228,113,226,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,178,212,201,170,171,185],
[166,0,148,220,176,177,163,166],
[163,193,0,210,181,170,171,163],
[129,121,131,0,154,136,131,130],
[140,165,160,187,0,149,170,163],
[171,164,171,205,192,0,185,150],
[170,178,170,210,171,156,0,161],
[156,175,178,211,178,191,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,182,172,162,199,168,188],
[175,0,168,168,171,180,169,174],
[159,173,0,161,161,176,163,178],
[169,173,180,0,172,197,168,192],
[179,170,180,169,0,187,175,190],
[142,161,165,144,154,0,150,156],
[173,172,178,173,166,191,0,174],
[153,167,163,149,151,185,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,190,173,202,171,173,170],
[161,0,176,164,179,156,161,153],
[151,165,0,140,165,160,155,156],
[168,177,201,0,198,174,171,177],
[139,162,176,143,0,165,154,160],
[170,185,181,167,176,0,186,171],
[168,180,186,170,187,155,0,159],
[171,188,185,164,181,170,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,145,167,163,159,170,169],
[183,0,176,175,175,158,182,178],
[196,165,0,188,174,178,189,176],
[174,166,153,0,167,165,180,173],
[178,166,167,174,0,171,172,172],
[182,183,163,176,170,0,184,172],
[171,159,152,161,169,157,0,167],
[172,163,165,168,169,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,165,174,174,175,165,179],
[172,0,168,151,164,153,158,171],
[176,173,0,157,174,159,170,172],
[167,190,184,0,179,173,173,191],
[167,177,167,162,0,168,168,181],
[166,188,182,168,173,0,175,188],
[176,183,171,168,173,166,0,190],
[162,170,169,150,160,153,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,182,175,169,158,162],
[174,0,171,197,162,176,165,166],
[174,170,0,191,172,178,164,163],
[159,144,150,0,157,148,158,162],
[166,179,169,184,0,174,162,165],
[172,165,163,193,167,0,171,168],
[183,176,177,183,179,170,0,191],
[179,175,178,179,176,173,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,204,135,194,162,176,219],
[179,0,221,107,177,133,160,252],
[137,120,0,141,194,164,165,221],
[206,234,200,0,218,178,157,219],
[147,164,147,123,0,133,165,224],
[179,208,177,163,208,0,145,208],
[165,181,176,184,176,196,0,250],
[122,89,120,122,117,133,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,183,152,180,167,180,164],
[180,0,193,168,179,180,199,183],
[158,148,0,142,150,150,167,149],
[189,173,199,0,184,167,197,178],
[161,162,191,157,0,159,182,158],
[174,161,191,174,182,0,184,177],
[161,142,174,144,159,157,0,157],
[177,158,192,163,183,164,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,160,166,160,169,175,151],
[182,0,180,178,161,186,178,159],
[181,161,0,147,177,177,164,155],
[175,163,194,0,178,188,176,171],
[181,180,164,163,0,167,166,165],
[172,155,164,153,174,0,174,156],
[166,163,177,165,175,167,0,168],
[190,182,186,170,176,185,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,172,184,211,210,169,187],
[126,0,145,153,169,166,145,144],
[169,196,0,182,204,208,175,171],
[157,188,159,0,187,185,185,171],
[130,172,137,154,0,165,159,161],
[131,175,133,156,176,0,161,140],
[172,196,166,156,182,180,0,180],
[154,197,170,170,180,201,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,181,167,179,165,172,189],
[181,0,181,165,181,157,181,171],
[160,160,0,166,174,151,171,176],
[174,176,175,0,185,150,171,186],
[162,160,167,156,0,148,170,176],
[176,184,190,191,193,0,170,197],
[169,160,170,170,171,171,0,165],
[152,170,165,155,165,144,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,148,136,166,169,162,168],
[171,0,163,150,167,178,150,163],
[193,178,0,162,174,178,168,187],
[205,191,179,0,159,183,174,174],
[175,174,167,182,0,188,181,187],
[172,163,163,158,153,0,165,162],
[179,191,173,167,160,176,0,165],
[173,178,154,167,154,179,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,156,164,146,171,158,158],
[171,0,174,179,172,170,172,165],
[185,167,0,167,166,177,169,151],
[177,162,174,0,160,178,168,148],
[195,169,175,181,0,174,181,174],
[170,171,164,163,167,0,168,156],
[183,169,172,173,160,173,0,157],
[183,176,190,193,167,185,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,172,171,178,168,172,180],
[167,0,172,178,167,177,180,184],
[169,169,0,163,166,174,173,185],
[170,163,178,0,175,187,183,176],
[163,174,175,166,0,176,175,171],
[173,164,167,154,165,0,162,185],
[169,161,168,158,166,179,0,178],
[161,157,156,165,170,156,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,163,178,170,194,163,179],
[169,0,172,171,186,177,187,184],
[178,169,0,178,178,183,163,166],
[163,170,163,0,179,164,167,189],
[171,155,163,162,0,179,183,175],
[147,164,158,177,162,0,162,159],
[178,154,178,174,158,179,0,161],
[162,157,175,152,166,182,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,190,157,170,175,161,162],
[180,0,182,171,196,156,159,175],
[151,159,0,155,171,166,164,133],
[184,170,186,0,177,180,180,171],
[171,145,170,164,0,160,146,156],
[166,185,175,161,181,0,168,162],
[180,182,177,161,195,173,0,171],
[179,166,208,170,185,179,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,199,186,184,185,167,180],
[163,0,192,185,183,160,166,174],
[142,149,0,168,174,157,153,158],
[155,156,173,0,177,161,159,177],
[157,158,167,164,0,157,155,167],
[156,181,184,180,184,0,172,191],
[174,175,188,182,186,169,0,189],
[161,167,183,164,174,150,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,174,130,160,166,173,167],
[177,0,191,167,183,175,202,184],
[167,150,0,157,177,179,210,176],
[211,174,184,0,188,179,198,170],
[181,158,164,153,0,179,188,176],
[175,166,162,162,162,0,193,182],
[168,139,131,143,153,148,0,150],
[174,157,165,171,165,159,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,179,158,172,166,160,157],
[162,0,161,165,152,170,149,155],
[162,180,0,157,154,161,180,151],
[183,176,184,0,163,174,172,164],
[169,189,187,178,0,186,171,176],
[175,171,180,167,155,0,169,163],
[181,192,161,169,170,172,0,152],
[184,186,190,177,165,178,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,158,181,180,157,191,187],
[195,0,185,173,165,144,167,189],
[183,156,0,176,172,159,193,197],
[160,168,165,0,150,183,153,202],
[161,176,169,191,0,154,187,166],
[184,197,182,158,187,0,169,198],
[150,174,148,188,154,172,0,168],
[154,152,144,139,175,143,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,167,188,187,202,169,194],
[157,0,156,181,183,181,164,183],
[174,185,0,167,181,169,168,186],
[153,160,174,0,196,182,172,175],
[154,158,160,145,0,171,160,206],
[139,160,172,159,170,0,150,185],
[172,177,173,169,181,191,0,195],
[147,158,155,166,135,156,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,181,168,188,175,181,202],
[147,0,184,173,164,165,173,185],
[160,157,0,143,148,156,164,173],
[173,168,198,0,180,169,187,178],
[153,177,193,161,0,156,175,182],
[166,176,185,172,185,0,165,194],
[160,168,177,154,166,176,0,166],
[139,156,168,163,159,147,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,162,164,156,175,162,170],
[168,0,161,170,171,159,165,170],
[179,180,0,175,160,169,184,178],
[177,171,166,0,158,164,172,161],
[185,170,181,183,0,169,159,165],
[166,182,172,177,172,0,164,164],
[179,176,157,169,182,177,0,175],
[171,171,163,180,176,177,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,180,185,171,164,168,192],
[167,0,162,171,148,163,165,167],
[161,179,0,199,159,161,188,167],
[156,170,142,0,162,157,163,173],
[170,193,182,179,0,173,206,172],
[177,178,180,184,168,0,185,182],
[173,176,153,178,135,156,0,161],
[149,174,174,168,169,159,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,169,174,172,166,173,180],
[180,0,181,177,180,187,169,190],
[172,160,0,165,176,166,182,178],
[167,164,176,0,162,181,172,181],
[169,161,165,179,0,167,163,169],
[175,154,175,160,174,0,173,177],
[168,172,159,169,178,168,0,173],
[161,151,163,160,172,164,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,186,180,120,127,179,167],
[196,0,219,186,174,149,183,182],
[155,122,0,138,133,119,144,116],
[161,155,203,0,166,139,164,168],
[221,167,208,175,0,180,199,206],
[214,192,222,202,161,0,181,180],
[162,158,197,177,142,160,0,178],
[174,159,225,173,135,161,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,177,169,168,175,167,169],
[165,0,166,167,165,174,160,177],
[164,175,0,173,174,174,171,174],
[172,174,168,0,175,175,176,177],
[173,176,167,166,0,181,161,169],
[166,167,167,166,160,0,159,166],
[174,181,170,165,180,182,0,168],
[172,164,167,164,172,175,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,172,217,176,160,173,168],
[192,0,181,195,210,177,169,177],
[169,160,0,166,188,178,180,172],
[124,146,175,0,167,144,167,182],
[165,131,153,174,0,149,148,190],
[181,164,163,197,192,0,176,170],
[168,172,161,174,193,165,0,154],
[173,164,169,159,151,171,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,157,156,159,146,173,153],
[177,0,163,143,181,153,176,163],
[184,178,0,158,159,158,189,159],
[185,198,183,0,187,166,178,174],
[182,160,182,154,0,164,202,167],
[195,188,183,175,177,0,195,161],
[168,165,152,163,139,146,0,148],
[188,178,182,167,174,180,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,171,175,182,170,159,170],
[180,0,164,177,180,168,172,167],
[170,177,0,174,172,171,165,183],
[166,164,167,0,174,173,175,173],
[159,161,169,167,0,159,153,171],
[171,173,170,168,182,0,170,173],
[182,169,176,166,188,171,0,189],
[171,174,158,168,170,168,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,202,139,196,163,190,170],
[173,0,217,160,174,199,183,175],
[139,124,0,129,153,157,157,155],
[202,181,212,0,202,160,187,157],
[145,167,188,139,0,184,166,162],
[178,142,184,181,157,0,170,149],
[151,158,184,154,175,171,0,155],
[171,166,186,184,179,192,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,187,167,187,180,180,177],
[171,0,184,169,194,202,186,180],
[154,157,0,166,171,157,168,168],
[174,172,175,0,178,180,169,177],
[154,147,170,163,0,150,153,173],
[161,139,184,161,191,0,172,164],
[161,155,173,172,188,169,0,177],
[164,161,173,164,168,177,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,181,195,167,181,206,174],
[150,0,162,160,174,159,178,170],
[160,179,0,175,164,163,203,178],
[146,181,166,0,166,174,172,168],
[174,167,177,175,0,162,170,155],
[160,182,178,167,179,0,177,170],
[135,163,138,169,171,164,0,156],
[167,171,163,173,186,171,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,187,167,191,182,185,164],
[172,0,169,173,184,182,172,170],
[154,172,0,151,174,178,186,166],
[174,168,190,0,189,188,184,179],
[150,157,167,152,0,171,168,157],
[159,159,163,153,170,0,173,164],
[156,169,155,157,173,168,0,168],
[177,171,175,162,184,177,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,164,166,165,154,179,154],
[185,0,181,197,175,169,184,169],
[177,160,0,184,176,171,176,172],
[175,144,157,0,163,150,167,159],
[176,166,165,178,0,159,169,158],
[187,172,170,191,182,0,180,167],
[162,157,165,174,172,161,0,168],
[187,172,169,182,183,174,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,176,172,185,163,136,162],
[156,0,163,177,171,161,162,173],
[165,178,0,167,170,182,160,168],
[169,164,174,0,179,165,143,169],
[156,170,171,162,0,154,137,156],
[178,180,159,176,187,0,182,178],
[205,179,181,198,204,159,0,167],
[179,168,173,172,185,163,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,181,170,187,194,199,181],
[155,0,170,162,164,162,175,136],
[160,171,0,175,144,155,177,166],
[171,179,166,0,164,164,160,153],
[154,177,197,177,0,160,164,169],
[147,179,186,177,181,0,174,165],
[142,166,164,181,177,167,0,162],
[160,205,175,188,172,176,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,170,171,164,161,158,151],
[166,0,156,160,158,158,145,142],
[171,185,0,186,171,180,159,185],
[170,181,155,0,141,154,143,160],
[177,183,170,200,0,159,147,150],
[180,183,161,187,182,0,176,174],
[183,196,182,198,194,165,0,184],
[190,199,156,181,191,167,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,164,180,184,181,181,188],
[168,0,152,168,157,164,174,170],
[177,189,0,168,170,178,171,171],
[161,173,173,0,168,178,173,184],
[157,184,171,173,0,187,180,170],
[160,177,163,163,154,0,168,175],
[160,167,170,168,161,173,0,162],
[153,171,170,157,171,166,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,139,161,166,165,166,161],
[153,0,145,148,155,179,170,175],
[202,196,0,168,164,180,178,176],
[180,193,173,0,168,155,172,166],
[175,186,177,173,0,179,175,161],
[176,162,161,186,162,0,170,170],
[175,171,163,169,166,171,0,191],
[180,166,165,175,180,171,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,191,162,182,195,181,179],
[151,0,194,179,178,188,167,180],
[150,147,0,153,161,174,160,166],
[179,162,188,0,172,200,183,193],
[159,163,180,169,0,169,172,173],
[146,153,167,141,172,0,165,199],
[160,174,181,158,169,176,0,154],
[162,161,175,148,168,142,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,186,176,179,171,178,179],
[180,0,172,175,172,184,174,170],
[155,169,0,164,191,186,167,172],
[165,166,177,0,176,180,171,175],
[162,169,150,165,0,174,165,164],
[170,157,155,161,167,0,158,173],
[163,167,174,170,176,183,0,174],
[162,171,169,166,177,168,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,174,189,166,166,169,170],
[160,0,168,178,160,168,166,165],
[167,173,0,179,158,169,161,179],
[152,163,162,0,162,178,163,169],
[175,181,183,179,0,177,176,170],
[175,173,172,163,164,0,152,166],
[172,175,180,178,165,189,0,184],
[171,176,162,172,171,175,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,183,170,172,142,163,171],
[158,0,180,160,169,175,173,171],
[158,161,0,158,156,162,176,154],
[171,181,183,0,183,170,177,175],
[169,172,185,158,0,171,170,168],
[199,166,179,171,170,0,179,184],
[178,168,165,164,171,162,0,161],
[170,170,187,166,173,157,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,153,175,204,176,191,186],
[177,0,168,171,182,198,211,223],
[188,173,0,180,195,165,183,206],
[166,170,161,0,205,197,177,188],
[137,159,146,136,0,151,191,195],
[165,143,176,144,190,0,190,201],
[150,130,158,164,150,151,0,175],
[155,118,135,153,146,140,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,164,166,180,174,161,162],
[168,0,166,162,166,157,166,171],
[177,175,0,179,179,180,180,164],
[175,179,162,0,178,180,184,157],
[161,175,162,163,0,169,165,161],
[167,184,161,161,172,0,166,160],
[180,175,161,157,176,175,0,157],
[179,170,177,184,180,181,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,181,191,189,180,187,180],
[178,0,175,194,163,163,165,207],
[160,166,0,196,188,161,164,164],
[150,147,145,0,177,157,145,180],
[152,178,153,164,0,180,156,188],
[161,178,180,184,161,0,159,171],
[154,176,177,196,185,182,0,178],
[161,134,177,161,153,170,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,206,171,141,168,155,179],
[186,0,202,172,208,171,152,201],
[135,139,0,169,147,128,126,178],
[170,169,172,0,147,155,156,158],
[200,133,194,194,0,179,177,215],
[173,170,213,186,162,0,157,196],
[186,189,215,185,164,184,0,202],
[162,140,163,183,126,145,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,177,165,190,171,162,179],
[176,0,181,172,183,175,170,190],
[164,160,0,164,170,157,169,150],
[176,169,177,0,184,169,185,170],
[151,158,171,157,0,149,158,169],
[170,166,184,172,192,0,184,180],
[179,171,172,156,183,157,0,154],
[162,151,191,171,172,161,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,154,179,167,171,149,169],
[198,0,176,178,157,199,174,169],
[187,165,0,179,177,203,155,158],
[162,163,162,0,151,183,164,149],
[174,184,164,190,0,205,154,176],
[170,142,138,158,136,0,151,159],
[192,167,186,177,187,190,0,169],
[172,172,183,192,165,182,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,180,175,172,170,165,166],
[162,0,175,175,167,176,156,156],
[161,166,0,169,167,166,161,165],
[166,166,172,0,159,177,170,164],
[169,174,174,182,0,165,181,180],
[171,165,175,164,176,0,173,160],
[176,185,180,171,160,168,0,174],
[175,185,176,177,161,181,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,177,167,174,186,182,183],
[159,0,159,152,148,162,163,161],
[164,182,0,177,169,174,175,181],
[174,189,164,0,166,169,166,175],
[167,193,172,175,0,175,182,181],
[155,179,167,172,166,0,165,165],
[159,178,166,175,159,176,0,172],
[158,180,160,166,160,176,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,164,160,183,187,182,156],
[171,0,165,176,191,170,177,160],
[177,176,0,166,186,173,174,163],
[181,165,175,0,186,170,194,174],
[158,150,155,155,0,161,165,140],
[154,171,168,171,180,0,165,152],
[159,164,167,147,176,176,0,163],
[185,181,178,167,201,189,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,157,181,153,150,164,163],
[168,0,154,173,160,164,158,158],
[184,187,0,200,164,179,181,174],
[160,168,141,0,159,158,169,173],
[188,181,177,182,0,161,168,173],
[191,177,162,183,180,0,154,177],
[177,183,160,172,173,187,0,183],
[178,183,167,168,168,164,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,153,160,171,138,155,119],
[188,0,177,151,163,143,148,170],
[188,164,0,166,168,155,159,160],
[181,190,175,0,190,186,190,169],
[170,178,173,151,0,177,194,184],
[203,198,186,155,164,0,168,158],
[186,193,182,151,147,173,0,194],
[222,171,181,172,157,183,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,159,157,161,149,152,163],
[180,0,172,181,161,170,170,182],
[182,169,0,174,161,156,163,172],
[184,160,167,0,161,157,181,168],
[180,180,180,180,0,171,163,179],
[192,171,185,184,170,0,173,164],
[189,171,178,160,178,168,0,175],
[178,159,169,173,162,177,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,158,208,153,158,156,171],
[119,0,174,133,118,160,172,148],
[183,167,0,170,155,184,196,196],
[133,208,171,0,142,213,182,174],
[188,223,186,199,0,199,172,160],
[183,181,157,128,142,0,181,143],
[185,169,145,159,169,160,0,119],
[170,193,145,167,181,198,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,157,164,156,172,169,167],
[172,0,161,170,168,182,171,170],
[184,180,0,157,176,187,178,170],
[177,171,184,0,187,193,166,173],
[185,173,165,154,0,187,167,184],
[169,159,154,148,154,0,162,142],
[172,170,163,175,174,179,0,170],
[174,171,171,168,157,199,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,169,159,168,153,161,178],
[178,0,180,175,175,164,180,172],
[172,161,0,173,164,157,162,157],
[182,166,168,0,165,154,163,157],
[173,166,177,176,0,153,156,170],
[188,177,184,187,188,0,179,165],
[180,161,179,178,185,162,0,177],
[163,169,184,184,171,176,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,185,171,167,181,171,183],
[166,0,175,183,176,184,173,183],
[156,166,0,163,164,164,176,183],
[170,158,178,0,162,172,179,186],
[174,165,177,179,0,170,171,178],
[160,157,177,169,171,0,186,171],
[170,168,165,162,170,155,0,185],
[158,158,158,155,163,170,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,173,164,175,175,178,181],
[158,0,148,150,153,180,168,169],
[168,193,0,171,173,203,182,180],
[177,191,170,0,175,204,191,164],
[166,188,168,166,0,184,184,165],
[166,161,138,137,157,0,168,167],
[163,173,159,150,157,173,0,154],
[160,172,161,177,176,174,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,150,168,141,162,155,157],
[172,0,166,173,173,182,176,182],
[191,175,0,183,167,181,166,186],
[173,168,158,0,145,164,172,174],
[200,168,174,196,0,196,175,178],
[179,159,160,177,145,0,155,176],
[186,165,175,169,166,186,0,184],
[184,159,155,167,163,165,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,163,166,186,188,178,164],
[173,0,185,167,191,183,177,160],
[178,156,0,183,169,167,175,178],
[175,174,158,0,186,162,162,139],
[155,150,172,155,0,157,140,147],
[153,158,174,179,184,0,169,119],
[163,164,166,179,201,172,0,148],
[177,181,163,202,194,222,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,188,167,160,159,176,183],
[174,0,221,174,181,162,177,191],
[153,120,0,142,151,140,148,139],
[174,167,199,0,175,173,170,173],
[181,160,190,166,0,171,183,163],
[182,179,201,168,170,0,189,179],
[165,164,193,171,158,152,0,165],
[158,150,202,168,178,162,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,154,171,160,155,162,172],
[167,0,148,145,152,174,154,167],
[187,193,0,162,169,182,180,163],
[170,196,179,0,154,181,186,175],
[181,189,172,187,0,169,182,190],
[186,167,159,160,172,0,148,168],
[179,187,161,155,159,193,0,158],
[169,174,178,166,151,173,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,174,169,182,172,192,182],
[157,0,160,168,166,172,173,175],
[167,181,0,180,184,180,187,179],
[172,173,161,0,168,168,180,174],
[159,175,157,173,0,162,175,171],
[169,169,161,173,179,0,190,170],
[149,168,154,161,166,151,0,173],
[159,166,162,167,170,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,176,180,165,168,188,176],
[162,0,168,152,160,153,191,178],
[165,173,0,169,169,160,168,176],
[161,189,172,0,164,173,179,178],
[176,181,172,177,0,164,170,167],
[173,188,181,168,177,0,194,175],
[153,150,173,162,171,147,0,171],
[165,163,165,163,174,166,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,163,179,170,161,159,173],
[171,0,166,183,171,171,177,177],
[178,175,0,192,177,180,182,168],
[162,158,149,0,168,168,149,160],
[171,170,164,173,0,159,144,163],
[180,170,161,173,182,0,170,174],
[182,164,159,192,197,171,0,165],
[168,164,173,181,178,167,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,169,165,187,167,174,168],
[176,0,144,154,160,159,162,177],
[172,197,0,165,191,180,162,185],
[176,187,176,0,188,164,165,167],
[154,181,150,153,0,173,170,169],
[174,182,161,177,168,0,166,182],
[167,179,179,176,171,175,0,176],
[173,164,156,174,172,159,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,166,183,171,186,197,192],
[165,0,178,166,176,184,190,190],
[175,163,0,169,178,172,186,188],
[158,175,172,0,161,186,180,188],
[170,165,163,180,0,173,176,186],
[155,157,169,155,168,0,191,176],
[144,151,155,161,165,150,0,170],
[149,151,153,153,155,165,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,185,175,161,163,212,159],
[181,0,193,186,166,173,227,169],
[156,148,0,180,154,149,207,180],
[166,155,161,0,163,154,203,151],
[180,175,187,178,0,167,191,179],
[178,168,192,187,174,0,213,181],
[129,114,134,138,150,128,0,134],
[182,172,161,190,162,160,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,233,180,167,180,181,182],
[92,0,148,136,120,108,123,167],
[108,193,0,190,138,134,147,154],
[161,205,151,0,173,123,139,167],
[174,221,203,168,0,161,165,195],
[161,233,207,218,180,0,180,224],
[160,218,194,202,176,161,0,163],
[159,174,187,174,146,117,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,160,169,158,174,161,158],
[179,0,169,182,169,183,182,171],
[181,172,0,188,169,193,171,188],
[172,159,153,0,160,183,169,163],
[183,172,172,181,0,179,178,170],
[167,158,148,158,162,0,161,157],
[180,159,170,172,163,180,0,169],
[183,170,153,178,171,184,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,156,170,166,168,178,180],
[168,0,154,164,166,163,177,172],
[185,187,0,163,193,170,177,167],
[171,177,178,0,173,168,174,190],
[175,175,148,168,0,154,183,168],
[173,178,171,173,187,0,163,173],
[163,164,164,167,158,178,0,170],
[161,169,174,151,173,168,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,163,156,166,154,135,200],
[162,0,187,153,169,161,146,201],
[178,154,0,140,190,166,133,190],
[185,188,201,0,197,173,167,215],
[175,172,151,144,0,164,132,194],
[187,180,175,168,177,0,171,205],
[206,195,208,174,209,170,0,207],
[141,140,151,126,147,136,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,184,175,166,192,165,185],
[152,0,180,172,176,164,172,184],
[157,161,0,168,178,177,173,167],
[166,169,173,0,164,172,154,168],
[175,165,163,177,0,176,173,172],
[149,177,164,169,165,0,165,181],
[176,169,168,187,168,176,0,173],
[156,157,174,173,169,160,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,142,145,170,173,151,173],
[185,0,177,161,184,195,170,182],
[199,164,0,191,181,167,155,184],
[196,180,150,0,163,191,168,198],
[171,157,160,178,0,171,180,196],
[168,146,174,150,170,0,170,164],
[190,171,186,173,161,171,0,193],
[168,159,157,143,145,177,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,197,177,183,146,178,172],
[156,0,186,175,184,156,177,152],
[144,155,0,152,151,139,145,132],
[164,166,189,0,178,148,145,165],
[158,157,190,163,0,167,167,165],
[195,185,202,193,174,0,165,174],
[163,164,196,196,174,176,0,181],
[169,189,209,176,176,167,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,166,154,190,189,188,166],
[178,0,173,176,147,163,167,170],
[175,168,0,159,156,164,160,163],
[187,165,182,0,176,181,175,168],
[151,194,185,165,0,180,172,172],
[152,178,177,160,161,0,160,161],
[153,174,181,166,169,181,0,182],
[175,171,178,173,169,180,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,153,172,169,173,164,157],
[174,0,166,164,168,182,163,165],
[188,175,0,161,174,188,177,167],
[169,177,180,0,172,176,159,172],
[172,173,167,169,0,190,181,167],
[168,159,153,165,151,0,163,156],
[177,178,164,182,160,178,0,165],
[184,176,174,169,174,185,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,149,176,150,175,158,200],
[169,0,187,169,164,181,212,254],
[192,154,0,199,201,198,162,185],
[165,172,142,0,190,155,146,198],
[191,177,140,151,0,194,186,203],
[166,160,143,186,147,0,177,175],
[183,129,179,195,155,164,0,188],
[141,87,156,143,138,166,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,165,170,162,175,172,168],
[167,0,165,167,159,160,174,164],
[176,176,0,170,171,182,192,176],
[171,174,171,0,161,169,170,185],
[179,182,170,180,0,173,178,179],
[166,181,159,172,168,0,162,166],
[169,167,149,171,163,179,0,161],
[173,177,165,156,162,175,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,145,129,133,176,158,155],
[204,0,168,154,162,179,179,183],
[196,173,0,164,172,163,181,174],
[212,187,177,0,168,173,185,189],
[208,179,169,173,0,187,189,196],
[165,162,178,168,154,0,162,163],
[183,162,160,156,152,179,0,164],
[186,158,167,152,145,178,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,142,164,163,160,162,174],
[163,0,164,180,176,179,162,178],
[199,177,0,190,215,168,177,178],
[177,161,151,0,191,164,172,169],
[178,165,126,150,0,135,160,157],
[181,162,173,177,206,0,196,179],
[179,179,164,169,181,145,0,176],
[167,163,163,172,184,162,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,172,175,196,169,185,184],
[159,0,154,168,193,173,165,185],
[169,187,0,178,197,178,180,187],
[166,173,163,0,177,170,159,186],
[145,148,144,164,0,160,150,164],
[172,168,163,171,181,0,175,168],
[156,176,161,182,191,166,0,179],
[157,156,154,155,177,173,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,179,165,161,172,167,164],
[143,0,179,142,149,184,160,157],
[162,162,0,134,167,151,154,173],
[176,199,207,0,176,174,171,164],
[180,192,174,165,0,198,167,163],
[169,157,190,167,143,0,169,167],
[174,181,187,170,174,172,0,186],
[177,184,168,177,178,174,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,181,180,172,179,188,166],
[147,0,158,169,139,163,152,155],
[160,183,0,182,159,175,150,158],
[161,172,159,0,156,171,172,153],
[169,202,182,185,0,175,188,187],
[162,178,166,170,166,0,157,177],
[153,189,191,169,153,184,0,169],
[175,186,183,188,154,164,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,245,146,195,195,195,243],
[195,0,196,194,195,146,147,243],
[96,145,0,145,97,194,146,145],
[195,147,196,0,195,97,147,244],
[146,146,244,146,0,97,195,244],
[146,195,147,244,244,0,147,292],
[146,194,195,194,146,194,0,243],
[98,98,196,97,97,49,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,159,155,164,172,158,178],
[161,0,168,154,168,157,161,174],
[182,173,0,168,160,160,170,182],
[186,187,173,0,184,173,163,185],
[177,173,181,157,0,148,155,164],
[169,184,181,168,193,0,172,198],
[183,180,171,178,186,169,0,196],
[163,167,159,156,177,143,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,176,194,171,190,195,166],
[167,0,162,187,171,178,178,180],
[165,179,0,184,170,180,198,194],
[147,154,157,0,137,177,174,165],
[170,170,171,204,0,190,204,186],
[151,163,161,164,151,0,176,171],
[146,163,143,167,137,165,0,158],
[175,161,147,176,155,170,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,192,187,190,166,204,178],
[144,0,165,162,156,169,195,149],
[149,176,0,175,186,171,190,170],
[154,179,166,0,193,158,197,172],
[151,185,155,148,0,151,156,142],
[175,172,170,183,190,0,186,185],
[137,146,151,144,185,155,0,156],
[163,192,171,169,199,156,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,170,176,172,174,157,166],
[188,0,178,186,170,180,171,179],
[171,163,0,165,165,166,169,163],
[165,155,176,0,165,167,167,159],
[169,171,176,176,0,170,167,168],
[167,161,175,174,171,0,161,173],
[184,170,172,174,174,180,0,174],
[175,162,178,182,173,168,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,141,115,115,139,194,143],
[173,0,171,144,203,172,227,173],
[200,170,0,171,201,201,197,202],
[226,197,170,0,227,227,226,198],
[226,138,140,114,0,112,109,142],
[202,169,140,114,229,0,139,200],
[147,114,144,115,232,202,0,146],
[198,168,139,143,199,141,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,204,157,146,160,170,146],
[163,0,180,165,145,169,172,106],
[137,161,0,161,171,151,192,148],
[184,176,180,0,174,188,154,177],
[195,196,170,167,0,189,188,189],
[181,172,190,153,152,0,159,155],
[171,169,149,187,153,182,0,153],
[195,235,193,164,152,186,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,152,167,181,154,160,166],
[176,0,170,188,175,178,161,171],
[189,171,0,193,195,180,168,186],
[174,153,148,0,179,172,160,174],
[160,166,146,162,0,151,157,160],
[187,163,161,169,190,0,171,178],
[181,180,173,181,184,170,0,177],
[175,170,155,167,181,163,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,165,154,158,168,194,172],
[161,0,175,163,159,170,172,171],
[176,166,0,173,178,199,194,186],
[187,178,168,0,163,172,184,185],
[183,182,163,178,0,181,200,178],
[173,171,142,169,160,0,198,179],
[147,169,147,157,141,143,0,161],
[169,170,155,156,163,162,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,179,180,168,153,178,188],
[173,0,161,187,147,170,195,192],
[162,180,0,190,155,172,179,170],
[161,154,151,0,139,167,159,149],
[173,194,186,202,0,163,198,198],
[188,171,169,174,178,0,185,180],
[163,146,162,182,143,156,0,172],
[153,149,171,192,143,161,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,187,186,186,160,204,177],
[166,0,177,194,171,176,186,159],
[154,164,0,169,162,176,169,168],
[155,147,172,0,150,160,181,153],
[155,170,179,191,0,175,166,153],
[181,165,165,181,166,0,166,161],
[137,155,172,160,175,175,0,155],
[164,182,173,188,188,180,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,182,175,188,162,187,166],
[175,0,171,181,166,163,153,164],
[159,170,0,158,167,168,144,172],
[166,160,183,0,166,175,145,153],
[153,175,174,175,0,163,178,183],
[179,178,173,166,178,0,144,168],
[154,188,197,196,163,197,0,163],
[175,177,169,188,158,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,175,174,172,198,185,153],
[170,0,171,153,178,214,173,156],
[166,170,0,159,139,214,200,169],
[167,188,182,0,170,208,203,172],
[169,163,202,171,0,209,205,162],
[143,127,127,133,132,0,171,118],
[156,168,141,138,136,170,0,130],
[188,185,172,169,179,223,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,171,161,175,198,136,172],
[185,0,160,173,168,191,136,183],
[170,181,0,156,169,213,171,175],
[180,168,185,0,196,191,171,205],
[166,173,172,145,0,217,180,184],
[143,150,128,150,124,0,142,162],
[205,205,170,170,161,199,0,187],
[169,158,166,136,157,179,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,160,167,161,167,171,147],
[176,0,164,158,165,173,176,160],
[181,177,0,168,189,175,183,171],
[174,183,173,0,180,175,173,167],
[180,176,152,161,0,172,168,152],
[174,168,166,166,169,0,182,149],
[170,165,158,168,173,159,0,143],
[194,181,170,174,189,192,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,154,166,174,173,169,178],
[172,0,179,201,198,170,191,191],
[187,162,0,180,174,167,176,170],
[175,140,161,0,171,152,167,167],
[167,143,167,170,0,151,182,176],
[168,171,174,189,190,0,185,187],
[172,150,165,174,159,156,0,181],
[163,150,171,174,165,154,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,185,197,190,165,176,190],
[164,0,175,210,187,177,188,192],
[156,166,0,176,169,143,149,177],
[144,131,165,0,181,159,168,181],
[151,154,172,160,0,155,163,163],
[176,164,198,182,186,0,173,187],
[165,153,192,173,178,168,0,162],
[151,149,164,160,178,154,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,173,153,157,158,143,146],
[191,0,163,160,162,170,158,163],
[168,178,0,166,168,167,159,180],
[188,181,175,0,160,176,176,176],
[184,179,173,181,0,163,166,189],
[183,171,174,165,178,0,171,157],
[198,183,182,165,175,170,0,162],
[195,178,161,165,152,184,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,189,155,214,154,251,154],
[90,0,154,122,183,154,218,121],
[152,187,0,184,214,184,281,185],
[186,219,157,0,217,218,187,187],
[127,158,127,124,0,184,157,155],
[187,187,157,123,157,0,218,154],
[90,123,60,154,184,123,0,124],
[187,220,156,154,186,187,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,197,177,159,169,166],
[170,0,169,172,166,165,168,157],
[170,172,0,185,175,181,162,154],
[144,169,156,0,148,162,149,153],
[164,175,166,193,0,172,172,171],
[182,176,160,179,169,0,162,151],
[172,173,179,192,169,179,0,164],
[175,184,187,188,170,190,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,106,165,164,124,160,185],
[178,0,131,165,179,150,181,166],
[235,210,0,198,194,168,216,207],
[176,176,143,0,210,165,190,186],
[177,162,147,131,0,167,196,161],
[217,191,173,176,174,0,166,196],
[181,160,125,151,145,175,0,162],
[156,175,134,155,180,145,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,165,171,152,182,171,179],
[176,0,185,198,187,165,180,194],
[176,156,0,183,163,174,180,189],
[170,143,158,0,144,155,156,170],
[189,154,178,197,0,181,175,185],
[159,176,167,186,160,0,161,166],
[170,161,161,185,166,180,0,164],
[162,147,152,171,156,175,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,166,189,170,165,171,182],
[167,0,156,170,162,180,175,164],
[175,185,0,184,166,177,197,184],
[152,171,157,0,180,177,175,167],
[171,179,175,161,0,181,170,161],
[176,161,164,164,160,0,145,162],
[170,166,144,166,171,196,0,186],
[159,177,157,174,180,179,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,150,164,161,150,165,170],
[182,0,174,195,166,165,159,167],
[191,167,0,180,172,159,178,188],
[177,146,161,0,166,159,168,168],
[180,175,169,175,0,166,151,171],
[191,176,182,182,175,0,163,178],
[176,182,163,173,190,178,0,177],
[171,174,153,173,170,163,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,175,161,167,156,168,166],
[161,0,179,176,166,178,172,165],
[166,162,0,158,163,179,170,175],
[180,165,183,0,195,170,187,179],
[174,175,178,146,0,163,181,159],
[185,163,162,171,178,0,179,159],
[173,169,171,154,160,162,0,160],
[175,176,166,162,182,182,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,175,181,206,157,182,199],
[160,0,166,165,169,134,172,153],
[166,175,0,192,184,132,157,166],
[160,176,149,0,173,139,164,182],
[135,172,157,168,0,163,143,139],
[184,207,209,202,178,0,188,157],
[159,169,184,177,198,153,0,182],
[142,188,175,159,202,184,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,177,167,152,156,163,150],
[185,0,178,172,162,163,180,170],
[164,163,0,179,149,153,162,156],
[174,169,162,0,154,162,162,149],
[189,179,192,187,0,179,167,176],
[185,178,188,179,162,0,177,157],
[178,161,179,179,174,164,0,147],
[191,171,185,192,165,184,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,105,158,159,235,183,132],
[158,0,133,132,78,106,131,132],
[236,208,0,182,234,260,156,182],
[183,209,159,0,184,210,182,106],
[182,263,107,157,0,182,184,134],
[106,235,81,131,159,0,159,132],
[158,210,185,159,157,182,0,156],
[209,209,159,235,207,209,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,171,169,176,177,176,176],
[150,0,162,160,152,163,167,173],
[170,179,0,174,193,183,186,184],
[172,181,167,0,181,168,177,177],
[165,189,148,160,0,164,178,177],
[164,178,158,173,177,0,178,186],
[165,174,155,164,163,163,0,153],
[165,168,157,164,164,155,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,157,192,182,179,195,179],
[192,0,196,176,177,192,205,169],
[184,145,0,181,148,172,179,175],
[149,165,160,0,195,167,196,156],
[159,164,193,146,0,166,192,171],
[162,149,169,174,175,0,160,172],
[146,136,162,145,149,181,0,149],
[162,172,166,185,170,169,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,169,171,142,163,177,156],
[163,0,154,174,167,186,166,174],
[172,187,0,182,167,192,173,189],
[170,167,159,0,150,188,148,175],
[199,174,174,191,0,177,177,169],
[178,155,149,153,164,0,148,149],
[164,175,168,193,164,193,0,159],
[185,167,152,166,172,192,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,162,171,160,173,179,187],
[161,0,180,178,180,168,177,190],
[179,161,0,178,173,161,166,173],
[170,163,163,0,163,164,179,172],
[181,161,168,178,0,157,180,189],
[168,173,180,177,184,0,176,193],
[162,164,175,162,161,165,0,179],
[154,151,168,169,152,148,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,181,162,182,183,185,174],
[177,0,176,168,180,180,170,170],
[160,165,0,168,178,169,173,171],
[179,173,173,0,169,185,172,180],
[159,161,163,172,0,169,167,160],
[158,161,172,156,172,0,169,169],
[156,171,168,169,174,172,0,169],
[167,171,170,161,181,172,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,165,152,176,175,159,162],
[180,0,171,171,167,176,178,173],
[176,170,0,158,169,175,169,163],
[189,170,183,0,177,185,178,176],
[165,174,172,164,0,171,156,176],
[166,165,166,156,170,0,162,160],
[182,163,172,163,185,179,0,182],
[179,168,178,165,165,181,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,171,171,181,168,176,169],
[189,0,174,167,203,180,166,176],
[170,167,0,159,182,173,167,155],
[170,174,182,0,194,178,167,177],
[160,138,159,147,0,153,165,151],
[173,161,168,163,188,0,170,171],
[165,175,174,174,176,171,0,171],
[172,165,186,164,190,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,173,167,175,139,168,172],
[181,0,185,177,164,182,183,185],
[168,156,0,162,178,180,207,187],
[174,164,179,0,161,176,191,198],
[166,177,163,180,0,181,184,169],
[202,159,161,165,160,0,193,184],
[173,158,134,150,157,148,0,168],
[169,156,154,143,172,157,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,194,169,156,180,169,187],
[161,0,184,143,164,147,178,129],
[147,157,0,120,137,149,130,145],
[172,198,221,0,172,197,206,147],
[185,177,204,169,0,161,143,151],
[161,194,192,144,180,0,153,173],
[172,163,211,135,198,188,0,185],
[154,212,196,194,190,168,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,190,196,175,184,170,179],
[173,0,178,204,178,167,183,194],
[151,163,0,198,171,173,154,182],
[145,137,143,0,153,162,150,169],
[166,163,170,188,0,163,166,171],
[157,174,168,179,178,0,168,181],
[171,158,187,191,175,173,0,176],
[162,147,159,172,170,160,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,164,177,159,166,167,178],
[169,0,153,157,172,175,170,178],
[177,188,0,181,180,188,166,166],
[164,184,160,0,174,172,190,164],
[182,169,161,167,0,169,187,178],
[175,166,153,169,172,0,172,160],
[174,171,175,151,154,169,0,155],
[163,163,175,177,163,181,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,141,158,158,153,152,172],
[203,0,169,188,170,178,172,200],
[200,172,0,166,159,188,180,204],
[183,153,175,0,163,179,166,211],
[183,171,182,178,0,166,190,228],
[188,163,153,162,175,0,164,205],
[189,169,161,175,151,177,0,175],
[169,141,137,130,113,136,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,164,140,158,146,173,162],
[197,0,181,164,176,157,151,170],
[177,160,0,140,158,144,151,160],
[201,177,201,0,199,181,171,168],
[183,165,183,142,0,158,149,169],
[195,184,197,160,183,0,173,184],
[168,190,190,170,192,168,0,175],
[179,171,181,173,172,157,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,157,181,173,165,178,153],
[173,0,165,167,185,182,188,176],
[184,176,0,162,183,170,182,167],
[160,174,179,0,192,178,180,163],
[168,156,158,149,0,161,172,144],
[176,159,171,163,180,0,177,153],
[163,153,159,161,169,164,0,156],
[188,165,174,178,197,188,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,154,148,183,165,186,146],
[162,0,165,155,165,170,166,153],
[187,176,0,151,190,175,189,165],
[193,186,190,0,182,182,188,156],
[158,176,151,159,0,171,162,152],
[176,171,166,159,170,0,164,173],
[155,175,152,153,179,177,0,151],
[195,188,176,185,189,168,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,148,176,155,155,170,155],
[179,0,161,192,208,191,187,166],
[193,180,0,192,162,179,199,172],
[165,149,149,0,170,166,153,158],
[186,133,179,171,0,164,166,147],
[186,150,162,175,177,0,194,170],
[171,154,142,188,175,147,0,152],
[186,175,169,183,194,171,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,160,119,178,141,158,139],
[159,0,158,139,197,178,177,198],
[181,183,0,99,159,182,180,180],
[222,202,242,0,199,161,220,221],
[163,144,182,142,0,162,201,200],
[200,163,159,180,179,0,220,201],
[183,164,161,121,140,121,0,199],
[202,143,161,120,141,140,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,168,162,178,177,159,156],
[153,0,154,157,181,174,153,147],
[173,187,0,173,192,173,164,193],
[179,184,168,0,184,180,147,168],
[163,160,149,157,0,163,153,163],
[164,167,168,161,178,0,155,169],
[182,188,177,194,188,186,0,165],
[185,194,148,173,178,172,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,166,174,164,181,148,196],
[158,0,180,164,162,153,139,172],
[175,161,0,157,172,180,157,160],
[167,177,184,0,161,167,163,192],
[177,179,169,180,0,191,184,176],
[160,188,161,174,150,0,171,178],
[193,202,184,178,157,170,0,182],
[145,169,181,149,165,163,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,166,182,203,175,151,173],
[183,0,167,194,204,185,165,178],
[175,174,0,193,169,170,169,178],
[159,147,148,0,172,165,153,159],
[138,137,172,169,0,145,137,162],
[166,156,171,176,196,0,182,171],
[190,176,172,188,204,159,0,173],
[168,163,163,182,179,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,162,199,217,230,161,179],
[162,0,195,176,198,231,175,139],
[179,146,0,177,127,213,159,107],
[142,165,164,0,143,159,177,128],
[124,143,214,198,0,194,157,159],
[111,110,128,182,147,0,107,126],
[180,166,182,164,184,234,0,108],
[162,202,234,213,182,215,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,186,150,181,150,164,151],
[159,0,173,152,169,174,165,167],
[155,168,0,157,165,176,163,171],
[191,189,184,0,164,187,190,187],
[160,172,176,177,0,168,187,179],
[191,167,165,154,173,0,196,162],
[177,176,178,151,154,145,0,162],
[190,174,170,154,162,179,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,170,158,159,185,192,162],
[166,0,174,169,165,173,178,159],
[171,167,0,163,176,189,187,172],
[183,172,178,0,179,190,185,156],
[182,176,165,162,0,177,181,167],
[156,168,152,151,164,0,184,165],
[149,163,154,156,160,157,0,161],
[179,182,169,185,174,176,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,182,171,182,193,186,167],
[177,0,163,169,183,172,169,165],
[159,178,0,161,173,184,174,179],
[170,172,180,0,175,175,199,173],
[159,158,168,166,0,169,168,167],
[148,169,157,166,172,0,172,165],
[155,172,167,142,173,169,0,154],
[174,176,162,168,174,176,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,175,166,167,163,165,167],
[191,0,188,170,199,174,181,169],
[166,153,0,169,173,149,178,160],
[175,171,172,0,184,174,162,183],
[174,142,168,157,0,178,159,159],
[178,167,192,167,163,0,185,190],
[176,160,163,179,182,156,0,177],
[174,172,181,158,182,151,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,193,187,171,172,191,204],
[175,0,193,160,176,159,182,171],
[148,148,0,126,128,137,152,159],
[154,181,215,0,184,192,188,204],
[170,165,213,157,0,158,203,175],
[169,182,204,149,183,0,199,203],
[150,159,189,153,138,142,0,186],
[137,170,182,137,166,138,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,151,213,151,229,194,212],
[129,0,112,129,131,128,133,151],
[190,229,0,255,256,165,212,213],
[128,212,86,0,170,124,86,146],
[190,210,85,171,0,142,86,125],
[112,213,176,217,199,0,152,151],
[147,208,129,255,255,189,0,171],
[129,190,128,195,216,190,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,193,217,203,199,188,165],
[137,0,169,178,165,179,168,143],
[148,172,0,191,171,193,166,193],
[124,163,150,0,159,170,157,159],
[138,176,170,182,0,172,165,154],
[142,162,148,171,169,0,148,150],
[153,173,175,184,176,193,0,169],
[176,198,148,182,187,191,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,147,154,188,152,165,169],
[196,0,166,191,192,173,165,193],
[194,175,0,197,190,191,167,176],
[187,150,144,0,164,163,171,161],
[153,149,151,177,0,155,168,161],
[189,168,150,178,186,0,161,184],
[176,176,174,170,173,180,0,176],
[172,148,165,180,180,157,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,211,184,191,196,163,173],
[156,0,177,169,174,186,141,178],
[130,164,0,171,164,156,122,165],
[157,172,170,0,157,167,151,166],
[150,167,177,184,0,164,172,168],
[145,155,185,174,177,0,139,172],
[178,200,219,190,169,202,0,179],
[168,163,176,175,173,169,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,168,162,152,165,164,171],
[187,0,193,192,147,166,164,197],
[173,148,0,153,164,156,161,159],
[179,149,188,0,169,170,175,192],
[189,194,177,172,0,178,159,172],
[176,175,185,171,163,0,176,174],
[177,177,180,166,182,165,0,169],
[170,144,182,149,169,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,161,174,166,173,160,173],
[170,0,169,173,169,177,167,175],
[180,172,0,198,174,176,175,168],
[167,168,143,0,167,164,169,175],
[175,172,167,174,0,159,169,169],
[168,164,165,177,182,0,169,170],
[181,174,166,172,172,172,0,175],
[168,166,173,166,172,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,161,164,173,156,170,151],
[180,0,168,182,182,174,162,195],
[180,173,0,174,162,169,184,158],
[177,159,167,0,146,160,184,164],
[168,159,179,195,0,184,188,180],
[185,167,172,181,157,0,162,156],
[171,179,157,157,153,179,0,169],
[190,146,183,177,161,185,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,166,177,170,169,178,195],
[157,0,165,177,166,159,157,146],
[175,176,0,145,155,158,152,170],
[164,164,196,0,131,151,172,138],
[171,175,186,210,0,199,195,145],
[172,182,183,190,142,0,187,170],
[163,184,189,169,146,154,0,137],
[146,195,171,203,196,171,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,182,176,183,171,166,173],
[179,0,193,159,176,185,175,167],
[159,148,0,146,147,166,141,163],
[165,182,195,0,181,173,165,169],
[158,165,194,160,0,170,165,158],
[170,156,175,168,171,0,164,165],
[175,166,200,176,176,177,0,175],
[168,174,178,172,183,176,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,193,196,161,173,215,197],
[129,0,171,145,160,131,172,163],
[148,170,0,138,131,158,200,184],
[145,196,203,0,185,176,207,180],
[180,181,210,156,0,167,191,171],
[168,210,183,165,174,0,238,184],
[126,169,141,134,150,103,0,145],
[144,178,157,161,170,157,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,160,170,157,168,176,177],
[177,0,186,156,172,167,167,176],
[181,155,0,182,168,166,153,176],
[171,185,159,0,172,184,180,177],
[184,169,173,169,0,190,178,209],
[173,174,175,157,151,0,169,187],
[165,174,188,161,163,172,0,184],
[164,165,165,164,132,154,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,183,171,171,159,181,183],
[167,0,173,168,160,168,178,173],
[158,168,0,167,174,172,183,189],
[170,173,174,0,168,171,183,189],
[170,181,167,173,0,170,191,183],
[182,173,169,170,171,0,191,184],
[160,163,158,158,150,150,0,155],
[158,168,152,152,158,157,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,170,166,173,166,174,172],
[193,0,179,164,169,191,185,180],
[171,162,0,171,171,167,183,158],
[175,177,170,0,163,157,173,173],
[168,172,170,178,0,187,186,174],
[175,150,174,184,154,0,193,180],
[167,156,158,168,155,148,0,172],
[169,161,183,168,167,161,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,162,165,157,158,157,156],
[165,0,157,172,158,157,164,167],
[179,184,0,156,153,151,184,153],
[176,169,185,0,164,172,172,174],
[184,183,188,177,0,173,165,169],
[183,184,190,169,168,0,172,145],
[184,177,157,169,176,169,0,168],
[185,174,188,167,172,196,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,155,186,170,151,137,178],
[159,0,159,167,162,144,139,172],
[186,182,0,190,170,183,164,191],
[155,174,151,0,143,142,122,148],
[171,179,171,198,0,156,160,185],
[190,197,158,199,185,0,171,174],
[204,202,177,219,181,170,0,194],
[163,169,150,193,156,167,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,171,160,167,170,175,163],
[177,0,181,177,169,154,186,181],
[170,160,0,174,155,162,157,158],
[181,164,167,0,160,177,181,166],
[174,172,186,181,0,155,178,181],
[171,187,179,164,186,0,187,164],
[166,155,184,160,163,154,0,145],
[178,160,183,175,160,177,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,175,145,168,161,156,150],
[166,0,159,154,171,166,156,161],
[166,182,0,160,152,165,170,173],
[196,187,181,0,159,185,164,179],
[173,170,189,182,0,175,187,178],
[180,175,176,156,166,0,158,176],
[185,185,171,177,154,183,0,177],
[191,180,168,162,163,165,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,159,149,168,157,170],
[182,0,160,165,157,167,176,166],
[178,181,0,169,180,179,180,182],
[182,176,172,0,164,165,169,169],
[192,184,161,177,0,167,166,170],
[173,174,162,176,174,0,179,161],
[184,165,161,172,175,162,0,177],
[171,175,159,172,171,180,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,197,134,145,140,141,154],
[199,0,170,148,199,182,220,131],
[144,171,0,173,213,157,183,130],
[207,193,168,0,199,156,167,167],
[196,142,128,142,0,144,193,142],
[201,159,184,185,197,0,194,183],
[200,121,158,174,148,147,0,158],
[187,210,211,174,199,158,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,181,172,170,159,172,194],
[207,0,161,211,178,188,179,195],
[160,180,0,174,189,189,171,186],
[169,130,167,0,166,179,165,187],
[171,163,152,175,0,157,166,172],
[182,153,152,162,184,0,161,190],
[169,162,170,176,175,180,0,178],
[147,146,155,154,169,151,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,178,181,179,167,174,181],
[149,0,161,184,170,179,188,187],
[163,180,0,178,182,164,165,183],
[160,157,163,0,174,162,171,170],
[162,171,159,167,0,170,163,175],
[174,162,177,179,171,0,161,170],
[167,153,176,170,178,180,0,187],
[160,154,158,171,166,171,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,174,166,153,159,164],
[164,0,167,170,148,168,156,169],
[171,174,0,163,163,174,168,164],
[167,171,178,0,159,167,165,174],
[175,193,178,182,0,164,171,186],
[188,173,167,174,177,0,170,181],
[182,185,173,176,170,171,0,183],
[177,172,177,167,155,160,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,185,162,177,192,174,194],
[185,0,160,179,203,175,171,190],
[156,181,0,144,194,178,153,191],
[179,162,197,0,199,184,186,185],
[164,138,147,142,0,159,129,153],
[149,166,163,157,182,0,158,170],
[167,170,188,155,212,183,0,204],
[147,151,150,156,188,171,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,158,144,154,165,152,169],
[189,0,176,147,175,175,163,171],
[183,165,0,140,165,172,172,167],
[197,194,201,0,189,192,168,190],
[187,166,176,152,0,180,154,171],
[176,166,169,149,161,0,158,171],
[189,178,169,173,187,183,0,188],
[172,170,174,151,170,170,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,162,175,109,194,133,193],
[185,0,146,173,158,159,130,116],
[179,195,0,232,177,136,205,218],
[166,168,109,0,110,153,135,165],
[232,183,164,231,0,165,176,193],
[147,182,205,188,176,0,175,205],
[208,211,136,206,165,166,0,164],
[148,225,123,176,148,136,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,187,185,200,164,207,173],
[161,0,175,173,175,167,183,177],
[154,166,0,175,166,169,185,158],
[156,168,166,0,168,164,191,168],
[141,166,175,173,0,166,190,162],
[177,174,172,177,175,0,199,170],
[134,158,156,150,151,142,0,137],
[168,164,183,173,179,171,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,172,151,160,172,158,183],
[190,0,175,165,158,177,135,173],
[169,166,0,166,174,164,180,203],
[190,176,175,0,173,176,161,196],
[181,183,167,168,0,164,154,164],
[169,164,177,165,177,0,179,191],
[183,206,161,180,187,162,0,182],
[158,168,138,145,177,150,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,171,170,158,165,165,182],
[177,0,166,186,174,179,178,170],
[170,175,0,171,155,160,158,169],
[171,155,170,0,162,156,151,159],
[183,167,186,179,0,164,177,177],
[176,162,181,185,177,0,179,162],
[176,163,183,190,164,162,0,180],
[159,171,172,182,164,179,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,180,174,159,156,162,173],
[156,0,157,143,173,143,152,153],
[161,184,0,158,173,162,160,172],
[167,198,183,0,174,172,172,168],
[182,168,168,167,0,152,160,170],
[185,198,179,169,189,0,171,193],
[179,189,181,169,181,170,0,180],
[168,188,169,173,171,148,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,173,181,173,187,187,161],
[165,0,163,169,161,171,174,164],
[168,178,0,177,188,180,176,184],
[160,172,164,0,177,176,173,174],
[168,180,153,164,0,182,175,176],
[154,170,161,165,159,0,173,177],
[154,167,165,168,166,168,0,174],
[180,177,157,167,165,164,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,158,167,163,173,167,149],
[171,0,180,170,179,169,165,174],
[183,161,0,158,169,165,158,152],
[174,171,183,0,183,165,145,166],
[178,162,172,158,0,160,154,151],
[168,172,176,176,181,0,175,163],
[174,176,183,196,187,166,0,162],
[192,167,189,175,190,178,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,159,152,178,183,150,146],
[170,0,178,170,176,165,170,152],
[182,163,0,195,199,188,160,150],
[189,171,146,0,176,159,154,155],
[163,165,142,165,0,155,153,152],
[158,176,153,182,186,0,136,175],
[191,171,181,187,188,205,0,161],
[195,189,191,186,189,166,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,191,162,177,185,183,171],
[170,0,196,169,180,178,174,177],
[150,145,0,155,163,180,155,145],
[179,172,186,0,177,179,162,165],
[164,161,178,164,0,175,163,156],
[156,163,161,162,166,0,162,157],
[158,167,186,179,178,179,0,148],
[170,164,196,176,185,184,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,161,164,182,168,180,179],
[169,0,174,169,167,166,182,179],
[180,167,0,168,174,161,180,172],
[177,172,173,0,183,165,186,186],
[159,174,167,158,0,174,175,178],
[173,175,180,176,167,0,189,185],
[161,159,161,155,166,152,0,173],
[162,162,169,155,163,156,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,175,165,184,173,174,172],
[172,0,168,164,190,173,166,155],
[166,173,0,152,177,166,163,163],
[176,177,189,0,195,186,181,165],
[157,151,164,146,0,155,164,167],
[168,168,175,155,186,0,173,153],
[167,175,178,160,177,168,0,156],
[169,186,178,176,174,188,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,169,187,191,191,183,180],
[159,0,175,180,198,179,177,189],
[172,166,0,166,186,179,159,177],
[154,161,175,0,175,172,158,166],
[150,143,155,166,0,152,146,164],
[150,162,162,169,189,0,167,181],
[158,164,182,183,195,174,0,174],
[161,152,164,175,177,160,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,229,227,227,256,197,201],
[171,0,171,172,199,199,256,115],
[112,170,0,113,113,170,226,57],
[114,169,228,0,142,198,226,144],
[114,142,228,199,0,227,197,173],
[85,142,171,143,114,0,198,172],
[144,85,115,115,144,143,0,87],
[140,226,284,197,168,169,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,170,182,170,157,186,176],
[186,0,179,194,175,164,173,185],
[171,162,0,186,188,181,197,194],
[159,147,155,0,163,137,143,158],
[171,166,153,178,0,155,175,178],
[184,177,160,204,186,0,174,174],
[155,168,144,198,166,167,0,179],
[165,156,147,183,163,167,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,180,174,154,178,183,174],
[167,0,181,188,156,164,203,170],
[161,160,0,162,130,174,165,148],
[167,153,179,0,172,159,168,172],
[187,185,211,169,0,198,203,183],
[163,177,167,182,143,0,171,175],
[158,138,176,173,138,170,0,145],
[167,171,193,169,158,166,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,177,148,158,155,174,142],
[181,0,188,169,174,178,186,179],
[164,153,0,163,161,141,146,140],
[193,172,178,0,189,179,171,161],
[183,167,180,152,0,153,181,172],
[186,163,200,162,188,0,201,186],
[167,155,195,170,160,140,0,150],
[199,162,201,180,169,155,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,164,168,170,157,170],
[172,0,180,173,162,174,175,173],
[175,161,0,183,173,175,164,187],
[177,168,158,0,165,164,148,166],
[173,179,168,176,0,169,157,183],
[171,167,166,177,172,0,162,173],
[184,166,177,193,184,179,0,179],
[171,168,154,175,158,168,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,163,173,173,158,169,177],
[185,0,175,169,163,178,164,187],
[178,166,0,175,177,167,166,182],
[168,172,166,0,170,163,177,183],
[168,178,164,171,0,174,175,177],
[183,163,174,178,167,0,182,184],
[172,177,175,164,166,159,0,179],
[164,154,159,158,164,157,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,204,178,204,191,170,192],
[138,0,173,152,138,156,151,154],
[137,168,0,146,167,156,144,161],
[163,189,195,0,176,193,190,190],
[137,203,174,165,0,192,191,183],
[150,185,185,148,149,0,159,160],
[171,190,197,151,150,182,0,187],
[149,187,180,151,158,181,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,174,162,175,164,172,161],
[179,0,177,179,171,169,166,167],
[167,164,0,163,150,156,157,159],
[179,162,178,0,177,171,159,172],
[166,170,191,164,0,181,160,162],
[177,172,185,170,160,0,162,167],
[169,175,184,182,181,179,0,169],
[180,174,182,169,179,174,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,178,182,182,159,182,170],
[172,0,172,179,175,167,156,166],
[163,169,0,177,166,162,151,160],
[159,162,164,0,151,179,167,152],
[159,166,175,190,0,175,164,158],
[182,174,179,162,166,0,177,168],
[159,185,190,174,177,164,0,174],
[171,175,181,189,183,173,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,209,203,184,183,164,188],
[166,0,189,185,167,181,162,189],
[132,152,0,170,161,173,169,186],
[138,156,171,0,156,163,149,169],
[157,174,180,185,0,188,152,182],
[158,160,168,178,153,0,184,187],
[177,179,172,192,189,157,0,185],
[153,152,155,172,159,154,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,143,149,139,156,136,139],
[181,0,151,159,170,164,156,133],
[198,190,0,151,180,159,151,115],
[192,182,190,0,188,192,165,187],
[202,171,161,153,0,170,152,157],
[185,177,182,149,171,0,134,147],
[205,185,190,176,189,207,0,161],
[202,208,226,154,184,194,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,162,186,176,169,161,186],
[160,0,156,173,144,164,166,169],
[179,185,0,176,141,172,165,180],
[155,168,165,0,155,164,176,177],
[165,197,200,186,0,191,178,195],
[172,177,169,177,150,0,167,169],
[180,175,176,165,163,174,0,180],
[155,172,161,164,146,172,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,236,148,204,174,175,192],
[179,0,172,224,175,150,164,176],
[105,169,0,147,194,115,133,151],
[193,117,194,0,191,170,175,177],
[137,166,147,150,0,145,163,115],
[167,191,226,171,196,0,178,182],
[166,177,208,166,178,163,0,163],
[149,165,190,164,226,159,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,161,174,169,169,168,181],
[162,0,163,152,173,165,162,177],
[180,178,0,158,183,185,179,196],
[167,189,183,0,172,169,168,185],
[172,168,158,169,0,174,178,175],
[172,176,156,172,167,0,182,159],
[173,179,162,173,163,159,0,181],
[160,164,145,156,166,182,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,214,185,153,180,170,169],
[166,0,213,185,142,153,169,202],
[127,128,0,153,111,137,169,136],
[156,156,188,0,170,126,144,138],
[188,199,230,171,0,155,178,195],
[161,188,204,215,186,0,152,191],
[171,172,172,197,163,189,0,141],
[172,139,205,203,146,150,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,160,186,170,191,175,187],
[187,0,149,186,179,169,176,188],
[181,192,0,187,191,162,177,203],
[155,155,154,0,159,170,161,184],
[171,162,150,182,0,160,162,181],
[150,172,179,171,181,0,165,185],
[166,165,164,180,179,176,0,174],
[154,153,138,157,160,156,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,164,173,167,166,170,156],
[195,0,177,181,189,180,167,186],
[177,164,0,176,184,170,186,167],
[168,160,165,0,175,175,176,158],
[174,152,157,166,0,175,169,163],
[175,161,171,166,166,0,170,166],
[171,174,155,165,172,171,0,165],
[185,155,174,183,178,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,163,197,153,161,173,185],
[177,0,183,196,165,174,153,168],
[178,158,0,196,172,148,165,185],
[144,145,145,0,157,164,148,160],
[188,176,169,184,0,189,164,183],
[180,167,193,177,152,0,165,170],
[168,188,176,193,177,176,0,176],
[156,173,156,181,158,171,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,139,153,178,178,139,121],
[189,0,154,188,201,225,166,180],
[202,187,0,189,167,188,199,130],
[188,153,152,0,179,154,175,143],
[163,140,174,162,0,151,176,152],
[163,116,153,187,190,0,165,143],
[202,175,142,166,165,176,0,145],
[220,161,211,198,189,198,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,171,191,168,170,182,185],
[173,0,167,191,167,169,167,165],
[170,174,0,174,173,170,174,171],
[150,150,167,0,173,169,159,164],
[173,174,168,168,0,173,171,179],
[171,172,171,172,168,0,172,172],
[159,174,167,182,170,169,0,181],
[156,176,170,177,162,169,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,160,196,161,162,151,177],
[174,0,180,186,156,176,184,162],
[181,161,0,210,161,181,174,178],
[145,155,131,0,143,143,138,168],
[180,185,180,198,0,194,167,187],
[179,165,160,198,147,0,155,169],
[190,157,167,203,174,186,0,183],
[164,179,163,173,154,172,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,174,189,138,152,179,173],
[160,0,185,181,172,176,189,154],
[167,156,0,158,144,161,153,154],
[152,160,183,0,167,153,171,158],
[203,169,197,174,0,167,175,155],
[189,165,180,188,174,0,173,166],
[162,152,188,170,166,168,0,157],
[168,187,187,183,186,175,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,177,166,194,179,171,173],
[145,0,181,152,181,174,152,161],
[164,160,0,152,174,175,171,158],
[175,189,189,0,197,200,157,170],
[147,160,167,144,0,179,149,157],
[162,167,166,141,162,0,149,159],
[170,189,170,184,192,192,0,183],
[168,180,183,171,184,182,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,163,196,165,194,156,206],
[186,0,167,199,153,166,167,169],
[178,174,0,154,166,169,171,197],
[145,142,187,0,119,192,148,194],
[176,188,175,222,0,184,164,211],
[147,175,172,149,157,0,139,162],
[185,174,170,193,177,202,0,202],
[135,172,144,147,130,179,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,196,171,113,112,198,200],
[173,0,202,145,170,142,228,199],
[145,139,0,142,142,114,199,114],
[170,196,199,0,142,114,170,226],
[228,171,199,199,0,143,199,198],
[229,199,227,227,198,0,199,170],
[143,113,142,171,142,142,0,142],
[141,142,227,115,143,171,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,177,189,192,196,166,180],
[167,0,172,191,186,182,177,168],
[164,169,0,184,174,172,156,162],
[152,150,157,0,169,164,150,158],
[149,155,167,172,0,171,154,153],
[145,159,169,177,170,0,148,158],
[175,164,185,191,187,193,0,175],
[161,173,179,183,188,183,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,176,166,160,181,165,169],
[182,0,167,154,173,208,182,167],
[165,174,0,170,159,189,172,176],
[175,187,171,0,169,175,176,155],
[181,168,182,172,0,182,165,156],
[160,133,152,166,159,0,164,150],
[176,159,169,165,176,177,0,151],
[172,174,165,186,185,191,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,152,156,186,162,165,167],
[159,0,172,168,171,177,181,163],
[189,169,0,156,147,160,147,155],
[185,173,185,0,172,162,155,153],
[155,170,194,169,0,191,155,163],
[179,164,181,179,150,0,158,163],
[176,160,194,186,186,183,0,171],
[174,178,186,188,178,178,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,186,144,154,153,153,180],
[186,0,181,155,150,156,170,154],
[155,160,0,160,157,138,160,141],
[197,186,181,0,162,171,198,173],
[187,191,184,179,0,178,167,179],
[188,185,203,170,163,0,168,172],
[188,171,181,143,174,173,0,170],
[161,187,200,168,162,169,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,195,191,153,175,188,177],
[163,0,189,177,164,153,176,161],
[146,152,0,182,156,150,166,152],
[150,164,159,0,133,152,161,168],
[188,177,185,208,0,157,196,188],
[166,188,191,189,184,0,197,170],
[153,165,175,180,145,144,0,167],
[164,180,189,173,153,171,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,192,177,182,171,168,165],
[173,0,173,193,182,166,166,162],
[149,168,0,163,173,172,174,172],
[164,148,178,0,161,164,150,154],
[159,159,168,180,0,166,163,171],
[170,175,169,177,175,0,173,168],
[173,175,167,191,178,168,0,178],
[176,179,169,187,170,173,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,144,157,184,159,168],
[169,0,165,168,175,182,163,155],
[170,176,0,147,157,192,168,167],
[197,173,194,0,192,201,195,166],
[184,166,184,149,0,178,171,171],
[157,159,149,140,163,0,165,146],
[182,178,173,146,170,176,0,162],
[173,186,174,175,170,195,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,206,195,179,196,169,230],
[173,0,186,179,167,192,186,212],
[135,155,0,159,169,198,204,188],
[146,162,182,0,168,172,167,192],
[162,174,172,173,0,179,184,205],
[145,149,143,169,162,0,169,167],
[172,155,137,174,157,172,0,197],
[111,129,153,149,136,174,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,150,188,166,182,179,171],
[180,0,155,185,173,173,188,190],
[191,186,0,189,192,168,200,176],
[153,156,152,0,178,156,169,173],
[175,168,149,163,0,171,186,177],
[159,168,173,185,170,0,183,182],
[162,153,141,172,155,158,0,176],
[170,151,165,168,164,159,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,189,183,170,190,177,176],
[135,0,171,154,157,158,166,160],
[152,170,0,150,147,177,152,157],
[158,187,191,0,181,174,165,162],
[171,184,194,160,0,164,146,162],
[151,183,164,167,177,0,138,155],
[164,175,189,176,195,203,0,159],
[165,181,184,179,179,186,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,169,176,187,193,181,184],
[162,0,153,152,173,174,171,168],
[172,188,0,169,191,187,188,181],
[165,189,172,0,191,181,176,173],
[154,168,150,150,0,172,164,162],
[148,167,154,160,169,0,161,169],
[160,170,153,165,177,180,0,171],
[157,173,160,168,179,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,217,154,152,156,155,185],
[155,0,249,188,155,155,249,153],
[124,92,0,93,62,159,92,155],
[187,153,248,0,214,220,185,218],
[189,186,279,127,0,191,221,216],
[185,186,182,121,150,0,182,216],
[186,92,249,156,120,159,0,93],
[156,188,186,123,125,125,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,183,165,167,165,167,168],
[168,0,177,167,183,162,166,165],
[158,164,0,177,157,160,171,155],
[176,174,164,0,170,163,164,168],
[174,158,184,171,0,173,179,167],
[176,179,181,178,168,0,179,166],
[174,175,170,177,162,162,0,173],
[173,176,186,173,174,175,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,162,164,166,161,155,154],
[187,0,171,174,162,168,156,160],
[179,170,0,170,175,177,157,163],
[177,167,171,0,171,176,161,160],
[175,179,166,170,0,177,159,171],
[180,173,164,165,164,0,180,177],
[186,185,184,180,182,161,0,165],
[187,181,178,181,170,164,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,151,168,161,160,153],
[175,0,171,158,160,170,165,166],
[172,170,0,162,163,159,157,162],
[190,183,179,0,174,169,175,174],
[173,181,178,167,0,172,169,170],
[180,171,182,172,169,0,169,170],
[181,176,184,166,172,172,0,173],
[188,175,179,167,171,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,168,172,167,172,154,175],
[165,0,160,170,168,181,166,163],
[173,181,0,169,171,179,172,168],
[169,171,172,0,162,170,167,176],
[174,173,170,179,0,187,167,181],
[169,160,162,171,154,0,161,177],
[187,175,169,174,174,180,0,168],
[166,178,173,165,160,164,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,182,156,158,150,113,206],
[171,0,205,213,160,229,181,227],
[159,136,0,159,150,160,159,184],
[185,128,182,0,152,173,162,183],
[183,181,191,189,0,172,133,195],
[191,112,181,168,169,0,135,217],
[228,160,182,179,208,206,0,218],
[135,114,157,158,146,124,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,151,165,168,166,171,165],
[171,0,166,164,172,174,180,171],
[190,175,0,167,174,165,188,159],
[176,177,174,0,154,182,164,164],
[173,169,167,187,0,186,192,186],
[175,167,176,159,155,0,188,145],
[170,161,153,177,149,153,0,112],
[176,170,182,177,155,196,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,185,157,142,211,202,176],
[163,0,191,213,144,186,216,162],
[156,150,0,150,119,167,165,159],
[184,128,191,0,162,212,209,148],
[199,197,222,179,0,172,180,156],
[130,155,174,129,169,0,192,136],
[139,125,176,132,161,149,0,156],
[165,179,182,193,185,205,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,174,187,165,195,201,180],
[147,0,154,155,150,188,146,156],
[167,187,0,173,165,135,166,192],
[154,186,168,0,155,150,161,162],
[176,191,176,186,0,172,168,184],
[146,153,206,191,169,0,188,168],
[140,195,175,180,173,153,0,173],
[161,185,149,179,157,173,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,162,150,144,146,148,154],
[175,0,149,161,150,146,154,150],
[179,192,0,186,170,172,186,172],
[191,180,155,0,157,181,179,187],
[197,191,171,184,0,168,180,188],
[195,195,169,160,173,0,185,152],
[193,187,155,162,161,156,0,170],
[187,191,169,154,153,189,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,160,168,154,171,156,179],
[166,0,160,155,151,146,142,171],
[181,181,0,174,162,181,167,181],
[173,186,167,0,157,177,164,182],
[187,190,179,184,0,159,173,185],
[170,195,160,164,182,0,150,193],
[185,199,174,177,168,191,0,185],
[162,170,160,159,156,148,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,175,156,158,171,151,164],
[168,0,156,153,149,159,180,161],
[166,185,0,170,177,173,175,168],
[185,188,171,0,183,185,166,181],
[183,192,164,158,0,164,177,187],
[170,182,168,156,177,0,167,164],
[190,161,166,175,164,174,0,172],
[177,180,173,160,154,177,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,157,175,179,177,168,179],
[176,0,158,162,183,166,174,173],
[184,183,0,165,177,172,171,174],
[166,179,176,0,187,189,188,177],
[162,158,164,154,0,169,166,165],
[164,175,169,152,172,0,171,157],
[173,167,170,153,175,170,0,174],
[162,168,167,164,176,184,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,165,145,158,144,154,154],
[197,0,169,157,166,167,173,165],
[176,172,0,178,176,166,151,154],
[196,184,163,0,164,166,166,168],
[183,175,165,177,0,153,177,176],
[197,174,175,175,188,0,183,167],
[187,168,190,175,164,158,0,155],
[187,176,187,173,165,174,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,151,145,160,137,158,152],
[187,0,165,174,171,160,176,164],
[190,176,0,187,176,171,182,161],
[196,167,154,0,178,159,183,169],
[181,170,165,163,0,153,171,169],
[204,181,170,182,188,0,175,173],
[183,165,159,158,170,166,0,168],
[189,177,180,172,172,168,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,180,181,163,259,246,220],
[101,0,163,121,202,200,186,163],
[161,178,0,161,161,218,205,200],
[160,220,180,0,181,239,201,141],
[178,139,180,160,0,177,225,162],
[82,141,123,102,164,0,206,161],
[95,155,136,140,116,135,0,139],
[121,178,141,200,179,180,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,173,164,168,190,183,199],
[153,0,177,172,178,181,185,195],
[168,164,0,157,152,174,154,185],
[177,169,184,0,173,196,146,196],
[173,163,189,168,0,171,175,182],
[151,160,167,145,170,0,164,183],
[158,156,187,195,166,177,0,184],
[142,146,156,145,159,158,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,201,164,161,184,181,177],
[161,0,203,136,188,183,142,174],
[140,138,0,126,169,163,164,150],
[177,205,215,0,181,227,170,172],
[180,153,172,160,0,195,164,133],
[157,158,178,114,146,0,162,149],
[160,199,177,171,177,179,0,163],
[164,167,191,169,208,192,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,159,184,173,177,157,164],
[176,0,165,184,172,181,165,173],
[182,176,0,184,180,179,178,170],
[157,157,157,0,151,165,142,165],
[168,169,161,190,0,173,162,167],
[164,160,162,176,168,0,154,159],
[184,176,163,199,179,187,0,177],
[177,168,171,176,174,182,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,188,170,168,173,185,192],
[175,0,169,163,183,175,170,190],
[153,172,0,160,174,181,174,200],
[171,178,181,0,169,197,174,191],
[173,158,167,172,0,178,169,198],
[168,166,160,144,163,0,170,176],
[156,171,167,167,172,171,0,186],
[149,151,141,150,143,165,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,193,181,156,193,182,229],
[192,0,169,194,173,180,178,232],
[148,172,0,181,163,182,181,194],
[160,147,160,0,155,183,162,182],
[185,168,178,186,0,143,125,209],
[148,161,159,158,198,0,159,177],
[159,163,160,179,216,182,0,197],
[112,109,147,159,132,164,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,139,180,182,165,163,161],
[177,0,137,197,185,170,150,168],
[202,204,0,220,195,170,173,194],
[161,144,121,0,181,134,142,134],
[159,156,146,160,0,154,145,142],
[176,171,171,207,187,0,153,137],
[178,191,168,199,196,188,0,178],
[180,173,147,207,199,204,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,180,165,170,173,185,171],
[186,0,168,164,170,188,188,188],
[161,173,0,177,176,174,176,195],
[176,177,164,0,175,177,186,200],
[171,171,165,166,0,157,178,190],
[168,153,167,164,184,0,196,206],
[156,153,165,155,163,145,0,181],
[170,153,146,141,151,135,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,170,196,137,225,169,225],
[118,0,145,116,172,199,172,200],
[171,196,0,196,169,198,197,254],
[145,225,145,0,143,201,143,231],
[204,169,172,198,0,170,170,258],
[116,142,143,140,171,0,168,257],
[172,169,144,198,171,173,0,174],
[116,141,87,110,83,84,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,187,186,180,153,160,180],
[176,0,165,168,185,165,175,175],
[154,176,0,162,174,160,171,191],
[155,173,179,0,190,178,181,178],
[161,156,167,151,0,153,173,184],
[188,176,181,163,188,0,179,183],
[181,166,170,160,168,162,0,173],
[161,166,150,163,157,158,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,174,156,180,168,174,144],
[184,0,184,170,197,190,171,178],
[167,157,0,169,168,170,174,151],
[185,171,172,0,181,173,176,168],
[161,144,173,160,0,163,163,168],
[173,151,171,168,178,0,159,164],
[167,170,167,165,178,182,0,158],
[197,163,190,173,173,177,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,178,160,124,161,162,109],
[212,0,266,194,161,177,195,216],
[163,75,0,144,75,109,179,73],
[181,147,197,0,142,125,146,164],
[217,180,266,199,0,164,234,180],
[180,164,232,216,177,0,201,180],
[179,146,162,195,107,140,0,145],
[232,125,268,177,161,161,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,188,156,177,150,139,142],
[211,0,192,201,187,190,152,160],
[153,149,0,176,177,178,162,179],
[185,140,165,0,152,179,152,150],
[164,154,164,189,0,161,132,159],
[191,151,163,162,180,0,147,169],
[202,189,179,189,209,194,0,165],
[199,181,162,191,182,172,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,170,169,165,155,201,196],
[183,0,180,198,188,168,198,199],
[171,161,0,178,184,163,182,204],
[172,143,163,0,142,152,168,171],
[176,153,157,199,0,163,174,189],
[186,173,178,189,178,0,168,192],
[140,143,159,173,167,173,0,159],
[145,142,137,170,152,149,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,177,183,175,167,169,159],
[181,0,193,180,204,180,163,193],
[164,148,0,166,202,144,167,196],
[158,161,175,0,186,150,184,177],
[166,137,139,155,0,142,143,171],
[174,161,197,191,199,0,170,200],
[172,178,174,157,198,171,0,164],
[182,148,145,164,170,141,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,174,170,170,169,191,188],
[162,0,172,171,171,179,171,186],
[167,169,0,166,175,179,182,194],
[171,170,175,0,164,166,205,180],
[171,170,166,177,0,165,165,181],
[172,162,162,175,176,0,179,182],
[150,170,159,136,176,162,0,173],
[153,155,147,161,160,159,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,203,182,191,169,193,189],
[155,0,182,148,162,155,153,164],
[138,159,0,165,163,163,171,158],
[159,193,176,0,183,176,175,173],
[150,179,178,158,0,165,161,181],
[172,186,178,165,176,0,171,182],
[148,188,170,166,180,170,0,178],
[152,177,183,168,160,159,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,152,156,163,167,170,179],
[179,0,165,172,166,173,186,167],
[189,176,0,169,174,195,187,194],
[185,169,172,0,172,182,186,196],
[178,175,167,169,0,170,188,175],
[174,168,146,159,171,0,182,177],
[171,155,154,155,153,159,0,177],
[162,174,147,145,166,164,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,136,151,142,139,164,152],
[194,0,198,139,153,173,188,202],
[205,143,0,118,146,154,149,176],
[190,202,223,0,198,181,165,186],
[199,188,195,143,0,169,164,189],
[202,168,187,160,172,0,187,204],
[177,153,192,176,177,154,0,215],
[189,139,165,155,152,137,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,167,169,182,177,175,174],
[145,0,160,172,176,164,169,159],
[174,181,0,180,175,175,176,161],
[172,169,161,0,175,165,164,172],
[159,165,166,166,0,166,172,160],
[164,177,166,176,175,0,182,178],
[166,172,165,177,169,159,0,163],
[167,182,180,169,181,163,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,186,169,173,178,170,175],
[155,0,176,157,165,156,153,162],
[155,165,0,153,162,173,166,174],
[172,184,188,0,170,185,179,187],
[168,176,179,171,0,178,172,171],
[163,185,168,156,163,0,166,168],
[171,188,175,162,169,175,0,169],
[166,179,167,154,170,173,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,156,172,155,158,150,174],
[175,0,181,201,159,173,163,170],
[185,160,0,193,182,173,178,196],
[169,140,148,0,166,158,172,154],
[186,182,159,175,0,167,183,183],
[183,168,168,183,174,0,166,184],
[191,178,163,169,158,175,0,181],
[167,171,145,187,158,157,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,150,173,159,167,159,153],
[197,0,165,178,173,188,184,173],
[191,176,0,187,184,191,164,187],
[168,163,154,0,169,184,167,158],
[182,168,157,172,0,201,166,178],
[174,153,150,157,140,0,153,144],
[182,157,177,174,175,188,0,180],
[188,168,154,183,163,197,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,173,156,139,142,168,156],
[169,0,187,163,172,152,187,169],
[168,154,0,149,124,136,169,151],
[185,178,192,0,137,167,163,152],
[202,169,217,204,0,172,193,183],
[199,189,205,174,169,0,177,169],
[173,154,172,178,148,164,0,170],
[185,172,190,189,158,172,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,170,166,180,176,191,183],
[162,0,165,164,152,153,182,188],
[171,176,0,191,189,167,189,187],
[175,177,150,0,185,164,177,191],
[161,189,152,156,0,176,181,166],
[165,188,174,177,165,0,185,188],
[150,159,152,164,160,156,0,166],
[158,153,154,150,175,153,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,167,184,166,177,179,144],
[188,0,172,175,172,156,169,169],
[174,169,0,179,174,170,171,174],
[157,166,162,0,155,162,155,165],
[175,169,167,186,0,170,170,151],
[164,185,171,179,171,0,175,156],
[162,172,170,186,171,166,0,168],
[197,172,167,176,190,185,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,171,173,177,157,183,182],
[175,0,170,170,176,180,183,171],
[170,171,0,159,162,167,184,170],
[168,171,182,0,182,161,182,185],
[164,165,179,159,0,178,175,171],
[184,161,174,180,163,0,172,163],
[158,158,157,159,166,169,0,161],
[159,170,171,156,170,178,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,136,145,154,141,148,183],
[183,0,182,189,197,168,163,222],
[205,159,0,158,154,170,165,192],
[196,152,183,0,167,177,182,200],
[187,144,187,174,0,172,159,190],
[200,173,171,164,169,0,135,162],
[193,178,176,159,182,206,0,167],
[158,119,149,141,151,179,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,186,168,158,148,182,182],
[181,0,186,163,156,141,166,194],
[155,155,0,176,158,149,149,166],
[173,178,165,0,171,172,162,190],
[183,185,183,170,0,157,171,183],
[193,200,192,169,184,0,180,212],
[159,175,192,179,170,161,0,192],
[159,147,175,151,158,129,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,177,179,173,173,181,161],
[156,0,177,170,176,162,162,172],
[164,164,0,157,171,163,164,162],
[162,171,184,0,167,178,171,185],
[168,165,170,174,0,161,171,159],
[168,179,178,163,180,0,174,166],
[160,179,177,170,170,167,0,167],
[180,169,179,156,182,175,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,153,165,165,148,182,164],
[173,0,179,171,172,147,186,170],
[188,162,0,197,153,174,183,191],
[176,170,144,0,155,150,174,177],
[176,169,188,186,0,177,212,189],
[193,194,167,191,164,0,206,177],
[159,155,158,167,129,135,0,145],
[177,171,150,164,152,164,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,179,167,173,174,170,172],
[175,0,182,177,179,163,171,180],
[162,159,0,170,175,173,167,172],
[174,164,171,0,171,167,163,166],
[168,162,166,170,0,176,165,170],
[167,178,168,174,165,0,164,183],
[171,170,174,178,176,177,0,173],
[169,161,169,175,171,158,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,207,165,164,163,178,186],
[156,0,140,163,142,159,158,167],
[134,201,0,165,171,158,170,159],
[176,178,176,0,167,183,171,173],
[177,199,170,174,0,175,187,155],
[178,182,183,158,166,0,169,183],
[163,183,171,170,154,172,0,179],
[155,174,182,168,186,158,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,185,177,183,174,179],
[160,0,191,184,176,188,186,185],
[173,150,0,169,163,167,167,176],
[156,157,172,0,170,176,170,172],
[164,165,178,171,0,180,178,178],
[158,153,174,165,161,0,168,169],
[167,155,174,171,163,173,0,179],
[162,156,165,169,163,172,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,183,164,160,152,179,187],
[189,0,170,172,209,179,177,180],
[158,171,0,161,152,147,167,161],
[177,169,180,0,167,168,167,178],
[181,132,189,174,0,160,168,195],
[189,162,194,173,181,0,171,192],
[162,164,174,174,173,170,0,179],
[154,161,180,163,146,149,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,204,180,161,201,202,161],
[119,0,201,180,141,139,139,181],
[137,140,0,139,142,160,140,178],
[161,161,202,0,160,101,180,182],
[180,200,199,181,0,161,139,180],
[140,202,181,240,180,0,200,200],
[139,202,201,161,202,141,0,201],
[180,160,163,159,161,141,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,151,161,170,152,171,163],
[163,0,145,165,141,151,158,152],
[190,196,0,180,185,168,178,173],
[180,176,161,0,172,158,165,168],
[171,200,156,169,0,174,170,166],
[189,190,173,183,167,0,168,178],
[170,183,163,176,171,173,0,165],
[178,189,168,173,175,163,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,160,160,143,182,177,171],
[159,0,140,158,149,156,175,154],
[181,201,0,176,155,166,199,174],
[181,183,165,0,174,195,171,169],
[198,192,186,167,0,218,215,194],
[159,185,175,146,123,0,192,172],
[164,166,142,170,126,149,0,172],
[170,187,167,172,147,169,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,177,181,209,182,168,187],
[150,0,171,163,200,149,153,184],
[164,170,0,173,184,178,171,191],
[160,178,168,0,184,149,147,191],
[132,141,157,157,0,146,130,166],
[159,192,163,192,195,0,167,186],
[173,188,170,194,211,174,0,197],
[154,157,150,150,175,155,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,178,184,151,186,168,171],
[172,0,146,181,158,175,173,175],
[163,195,0,192,163,194,166,174],
[157,160,149,0,150,174,162,164],
[190,183,178,191,0,178,168,191],
[155,166,147,167,163,0,161,164],
[173,168,175,179,173,180,0,166],
[170,166,167,177,150,177,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,341,228,228,115,228,228,228],
[0,0,0,113,0,0,228,115],
[113,341,0,113,228,341,228,341],
[113,228,228,0,115,228,228,228],
[226,341,113,226,0,226,228,228],
[113,341,0,113,115,0,228,115],
[113,113,113,113,113,113,0,113],
[113,226,0,113,113,226,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,184,179,171,178,177,166],
[161,0,170,165,175,172,153,161],
[157,171,0,158,164,175,174,158],
[162,176,183,0,183,200,185,177],
[170,166,177,158,0,175,173,170],
[163,169,166,141,166,0,164,160],
[164,188,167,156,168,177,0,160],
[175,180,183,164,171,181,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,182,175,185,174,210,218],
[173,0,190,120,203,148,128,172],
[159,151,0,122,189,143,139,176],
[166,221,219,0,196,179,195,201],
[156,138,152,145,0,170,167,163],
[167,193,198,162,171,0,179,190],
[131,213,202,146,174,162,0,217],
[123,169,165,140,178,151,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,161,165,171,170,177,174],
[168,0,177,172,178,177,181,177],
[180,164,0,170,160,168,172,179],
[176,169,171,0,171,187,181,180],
[170,163,181,170,0,179,172,158],
[171,164,173,154,162,0,169,166],
[164,160,169,160,169,172,0,165],
[167,164,162,161,183,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,176,162,283,215,163,180],
[144,0,124,123,178,142,129,185],
[165,217,0,198,250,161,165,203],
[179,218,143,0,196,196,202,184],
[58,163,91,145,0,107,93,110],
[126,199,180,145,234,0,165,147],
[178,212,176,139,248,176,0,254],
[161,156,138,157,231,194,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,163,168,173,170,161,154],
[198,0,184,152,179,192,164,172],
[178,157,0,161,178,162,157,153],
[173,189,180,0,189,175,170,179],
[168,162,163,152,0,167,160,132],
[171,149,179,166,174,0,177,149],
[180,177,184,171,181,164,0,152],
[187,169,188,162,209,192,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,167,166,147,186,192,165],
[181,0,185,170,190,223,197,172],
[174,156,0,166,158,234,202,154],
[175,171,175,0,167,212,200,194],
[194,151,183,174,0,217,183,180],
[155,118,107,129,124,0,158,133],
[149,144,139,141,158,183,0,146],
[176,169,187,147,161,208,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,152,151,158,146,138,143],
[183,0,161,154,170,177,147,173],
[189,180,0,174,185,167,147,166],
[190,187,167,0,170,173,166,165],
[183,171,156,171,0,162,162,166],
[195,164,174,168,179,0,162,170],
[203,194,194,175,179,179,0,170],
[198,168,175,176,175,171,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,139,192,173,194,125,162],
[163,0,142,181,150,210,143,146],
[202,199,0,212,189,218,167,198],
[149,160,129,0,172,181,138,136],
[168,191,152,169,0,195,174,152],
[147,131,123,160,146,0,157,114],
[216,198,174,203,167,184,0,195],
[179,195,143,205,189,227,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,171,167,181,176,189,172],
[152,0,163,169,167,166,170,164],
[170,178,0,174,169,171,169,176],
[174,172,167,0,171,169,175,162],
[160,174,172,170,0,163,159,159],
[165,175,170,172,178,0,180,166],
[152,171,172,166,182,161,0,170],
[169,177,165,179,182,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,158,174,164,161,164,182],
[157,0,170,164,178,161,181,183],
[183,171,0,167,178,172,191,190],
[167,177,174,0,173,164,179,191],
[177,163,163,168,0,183,187,185],
[180,180,169,177,158,0,198,189],
[177,160,150,162,154,143,0,165],
[159,158,151,150,156,152,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,137,170,169,180,159,171],
[164,0,149,154,165,181,163,145],
[204,192,0,170,181,179,170,163],
[171,187,171,0,188,176,166,164],
[172,176,160,153,0,192,178,172],
[161,160,162,165,149,0,177,132],
[182,178,171,175,163,164,0,145],
[170,196,178,177,169,209,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,172,172,154,158,176,164],
[162,0,155,164,175,159,171,163],
[169,186,0,175,174,176,185,173],
[169,177,166,0,164,161,184,170],
[187,166,167,177,0,166,175,174],
[183,182,165,180,175,0,192,172],
[165,170,156,157,166,149,0,164],
[177,178,168,171,167,169,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,178,183,154,152,167,188],
[176,0,192,175,182,182,165,201],
[163,149,0,134,155,151,186,173],
[158,166,207,0,174,183,173,178],
[187,159,186,167,0,160,160,172],
[189,159,190,158,181,0,178,203],
[174,176,155,168,181,163,0,209],
[153,140,168,163,169,138,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,165,183,142,148,152,138],
[182,0,169,162,156,172,171,145],
[176,172,0,181,135,136,199,160],
[158,179,160,0,137,171,165,172],
[199,185,206,204,0,162,170,161],
[193,169,205,170,179,0,194,151],
[189,170,142,176,171,147,0,156],
[203,196,181,169,180,190,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,341,169,172,229,170,227,284],
[0,0,112,116,57,170,111,169],
[172,229,0,172,172,170,115,229],
[169,225,169,0,112,227,225,226],
[112,284,169,229,0,170,284,285],
[171,171,171,114,171,0,170,228],
[114,230,226,116,57,171,0,228],
[57,172,112,115,56,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,227,187,167,195,175,188],
[141,0,175,158,174,172,163,169],
[114,166,0,145,122,156,130,158],
[154,183,196,0,177,175,158,163],
[174,167,219,164,0,155,161,198],
[146,169,185,166,186,0,168,187],
[166,178,211,183,180,173,0,183],
[153,172,183,178,143,154,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,165,151,152,152,178,165],
[178,0,169,162,160,165,182,166],
[176,172,0,152,161,146,167,166],
[190,179,189,0,164,185,196,182],
[189,181,180,177,0,157,185,182],
[189,176,195,156,184,0,192,182],
[163,159,174,145,156,149,0,170],
[176,175,175,159,159,159,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,172,168,173,193,171,155],
[140,0,162,162,154,170,155,142],
[169,179,0,186,171,185,172,161],
[173,179,155,0,160,182,155,139],
[168,187,170,181,0,185,159,157],
[148,171,156,159,156,0,153,146],
[170,186,169,186,182,188,0,171],
[186,199,180,202,184,195,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,155,197,171,173,168,159],
[197,0,164,194,190,188,182,179],
[186,177,0,196,155,171,164,193],
[144,147,145,0,170,130,142,152],
[170,151,186,171,0,152,169,189],
[168,153,170,211,189,0,171,177],
[173,159,177,199,172,170,0,145],
[182,162,148,189,152,164,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,187,185,179,175,174,168],
[174,0,195,173,176,165,174,162],
[154,146,0,164,161,152,150,143],
[156,168,177,0,175,171,165,156],
[162,165,180,166,0,156,146,144],
[166,176,189,170,185,0,172,158],
[167,167,191,176,195,169,0,177],
[173,179,198,185,197,183,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,138,151,157,162,160,177],
[176,0,169,165,176,173,166,169],
[203,172,0,186,168,181,180,166],
[190,176,155,0,169,182,178,174],
[184,165,173,172,0,162,175,171],
[179,168,160,159,179,0,158,154],
[181,175,161,163,166,183,0,169],
[164,172,175,167,170,187,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,169,175,188,158,176,180],
[153,0,168,155,181,166,168,156],
[172,173,0,166,178,169,157,162],
[166,186,175,0,165,168,147,181],
[153,160,163,176,0,152,157,143],
[183,175,172,173,189,0,157,189],
[165,173,184,194,184,184,0,168],
[161,185,179,160,198,152,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,155,152,169,180,162,169],
[180,0,135,163,199,187,154,184],
[186,206,0,172,205,218,166,192],
[189,178,169,0,191,195,179,175],
[172,142,136,150,0,174,144,147],
[161,154,123,146,167,0,173,163],
[179,187,175,162,197,168,0,175],
[172,157,149,166,194,178,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,206,176,195,158,196,181],
[168,0,195,163,161,149,175,164],
[135,146,0,123,142,144,157,120],
[165,178,218,0,160,165,182,185],
[146,180,199,181,0,179,187,171],
[183,192,197,176,162,0,178,203],
[145,166,184,159,154,163,0,152],
[160,177,221,156,170,138,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,173,191,201,196,163,191],
[161,0,174,179,161,176,159,180],
[168,167,0,202,189,168,186,184],
[150,162,139,0,185,147,130,148],
[140,180,152,156,0,158,165,175],
[145,165,173,194,183,0,185,177],
[178,182,155,211,176,156,0,194],
[150,161,157,193,166,164,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,142,143,164,158,144,166],
[193,0,151,178,176,184,173,170],
[199,190,0,158,181,199,168,190],
[198,163,183,0,190,171,164,165],
[177,165,160,151,0,165,141,172],
[183,157,142,170,176,0,158,167],
[197,168,173,177,200,183,0,183],
[175,171,151,176,169,174,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,174,185,163,159,170,163],
[158,0,158,169,171,161,170,146],
[167,183,0,176,169,171,179,188],
[156,172,165,0,168,165,152,146],
[178,170,172,173,0,158,180,162],
[182,180,170,176,183,0,197,173],
[171,171,162,189,161,144,0,153],
[178,195,153,195,179,168,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,179,185,174,203,178,173],
[175,0,182,173,170,175,180,192],
[162,159,0,159,159,170,159,171],
[156,168,182,0,180,187,154,169],
[167,171,182,161,0,196,166,181],
[138,166,171,154,145,0,153,178],
[163,161,182,187,175,188,0,177],
[168,149,170,172,160,163,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,176,181,157,159,159,175],
[169,0,166,174,164,153,144,156],
[165,175,0,167,171,165,168,176],
[160,167,174,0,163,159,157,157],
[184,177,170,178,0,170,167,150],
[182,188,176,182,171,0,175,167],
[182,197,173,184,174,166,0,164],
[166,185,165,184,191,174,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,176,195,165,161,167,165],
[185,0,165,182,171,161,170,179],
[165,176,0,166,171,164,155,165],
[146,159,175,0,146,144,148,161],
[176,170,170,195,0,175,162,187],
[180,180,177,197,166,0,180,170],
[174,171,186,193,179,161,0,169],
[176,162,176,180,154,171,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,164,182,171,172,155,196],
[177,0,168,169,171,170,173,199],
[177,173,0,176,167,172,162,183],
[159,172,165,0,167,143,136,159],
[170,170,174,174,0,180,160,179],
[169,171,169,198,161,0,150,196],
[186,168,179,205,181,191,0,195],
[145,142,158,182,162,145,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,214,157,169,174,196,163],
[190,0,164,149,163,163,150,175],
[127,177,0,150,158,154,151,140],
[184,192,191,0,184,162,186,170],
[172,178,183,157,0,167,155,156],
[167,178,187,179,174,0,169,170],
[145,191,190,155,186,172,0,154],
[178,166,201,171,185,171,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,162,157,163,163,163,167],
[168,0,158,178,171,163,162,171],
[179,183,0,169,175,167,174,166],
[184,163,172,0,174,166,165,170],
[178,170,166,167,0,160,157,169],
[178,178,174,175,181,0,167,177],
[178,179,167,176,184,174,0,176],
[174,170,175,171,172,164,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,207,185,179,210,138,181],
[113,0,183,120,110,181,113,157],
[134,158,0,102,131,197,86,187],
[156,221,239,0,123,206,151,180],
[162,231,210,218,0,197,172,142],
[131,160,144,135,144,0,132,202],
[203,228,255,190,169,209,0,197],
[160,184,154,161,199,139,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,155,168,167,179,177,174],
[169,0,140,163,162,162,171,166],
[186,201,0,164,174,177,174,194],
[173,178,177,0,162,146,172,184],
[174,179,167,179,0,168,180,188],
[162,179,164,195,173,0,167,183],
[164,170,167,169,161,174,0,176],
[167,175,147,157,153,158,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,177,188,163,177,177,177],
[151,0,169,174,166,183,166,162],
[164,172,0,181,177,171,169,174],
[153,167,160,0,156,172,159,162],
[178,175,164,185,0,181,190,173],
[164,158,170,169,160,0,161,163],
[164,175,172,182,151,180,0,170],
[164,179,167,179,168,178,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,155,188,181,145,179,173],
[159,0,173,177,179,147,176,174],
[186,168,0,183,206,172,167,186],
[153,164,158,0,161,151,166,155],
[160,162,135,180,0,153,162,162],
[196,194,169,190,188,0,193,183],
[162,165,174,175,179,148,0,174],
[168,167,155,186,179,158,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,160,147,162,162,177,186],
[152,0,150,163,157,156,174,152],
[181,191,0,158,171,187,179,145],
[194,178,183,0,177,202,193,160],
[179,184,170,164,0,163,190,165],
[179,185,154,139,178,0,159,144],
[164,167,162,148,151,182,0,150],
[155,189,196,181,176,197,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,189,154,184,195,179,192],
[136,0,191,171,169,154,186,156],
[152,150,0,163,171,140,158,159],
[187,170,178,0,188,170,198,179],
[157,172,170,153,0,146,179,150],
[146,187,201,171,195,0,187,175],
[162,155,183,143,162,154,0,143],
[149,185,182,162,191,166,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,169,169,197,177,190,179],
[169,0,173,179,198,170,169,166],
[172,168,0,184,191,189,190,193],
[172,162,157,0,168,174,173,185],
[144,143,150,173,0,172,164,165],
[164,171,152,167,169,0,178,159],
[151,172,151,168,177,163,0,166],
[162,175,148,156,176,182,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,166,163,180,165,184,173],
[170,0,168,159,176,165,185,189],
[175,173,0,175,183,168,177,177],
[178,182,166,0,173,173,181,176],
[161,165,158,168,0,151,182,171],
[176,176,173,168,190,0,192,161],
[157,156,164,160,159,149,0,162],
[168,152,164,165,170,180,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,187,171,172,171,180,160],
[166,0,172,161,165,169,172,173],
[154,169,0,143,164,166,154,164],
[170,180,198,0,177,173,188,189],
[169,176,177,164,0,174,179,171],
[170,172,175,168,167,0,176,177],
[161,169,187,153,162,165,0,160],
[181,168,177,152,170,164,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,227,113,227,227,113,113],
[114,0,114,114,114,227,114,0],
[114,227,0,113,114,227,114,0],
[228,227,228,0,114,227,228,0],
[114,227,227,227,0,227,227,227],
[114,114,114,114,114,0,114,114],
[228,227,227,113,114,227,0,113],
[228,341,341,341,114,227,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,158,169,155,157,163,166],
[174,0,168,179,170,171,171,166],
[183,173,0,183,163,172,183,178],
[172,162,158,0,162,155,151,158],
[186,171,178,179,0,185,177,166],
[184,170,169,186,156,0,168,178],
[178,170,158,190,164,173,0,178],
[175,175,163,183,175,163,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,147,138,161,153,140,159],
[189,0,168,176,180,166,165,180],
[194,173,0,164,180,166,158,166],
[203,165,177,0,192,171,170,172],
[180,161,161,149,0,160,160,157],
[188,175,175,170,181,0,164,171],
[201,176,183,171,181,177,0,168],
[182,161,175,169,184,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,178,175,163,161,155,165],
[157,0,187,157,157,159,159,173],
[163,154,0,181,153,150,163,155],
[166,184,160,0,152,148,165,170],
[178,184,188,189,0,170,179,167],
[180,182,191,193,171,0,165,181],
[186,182,178,176,162,176,0,179],
[176,168,186,171,174,160,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,182,173,163,181,177,200],
[174,0,196,197,168,183,178,192],
[159,145,0,169,143,164,162,170],
[168,144,172,0,153,141,158,169],
[178,173,198,188,0,173,162,194],
[160,158,177,200,168,0,180,172],
[164,163,179,183,179,161,0,190],
[141,149,171,172,147,169,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,189,189,113,150,226,189],
[113,0,113,152,116,112,152,111],
[152,228,0,226,193,186,191,190],
[152,189,115,0,116,152,190,189],
[228,225,148,225,0,186,190,225],
[191,229,155,189,155,0,229,152],
[115,189,150,151,151,112,0,189],
[152,230,151,152,116,189,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,209,189,172,189,210,170],
[169,0,226,155,151,170,154,131],
[132,115,0,134,115,156,154,154],
[152,186,207,0,151,170,208,188],
[169,190,226,190,0,206,169,189],
[152,171,185,171,135,0,189,190],
[131,187,187,133,172,152,0,171],
[171,210,187,153,152,151,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,176,169,168,158,159,168],
[186,0,178,171,178,169,200,192],
[165,163,0,170,164,163,158,167],
[172,170,171,0,174,177,179,179],
[173,163,177,167,0,169,167,158],
[183,172,178,164,172,0,171,175],
[182,141,183,162,174,170,0,163],
[173,149,174,162,183,166,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,179,172,176,168,162],
[163,0,170,164,179,172,173,168],
[163,171,0,169,164,154,164,163],
[162,177,172,0,165,158,166,168],
[169,162,177,176,0,190,185,174],
[165,169,187,183,151,0,171,166],
[173,168,177,175,156,170,0,160],
[179,173,178,173,167,175,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,166,162,184,172,156,155],
[175,0,159,167,182,170,179,169],
[175,182,0,160,173,187,178,165],
[179,174,181,0,177,168,174,164],
[157,159,168,164,0,175,170,160],
[169,171,154,173,166,0,165,165],
[185,162,163,167,171,176,0,174],
[186,172,176,177,181,176,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,187,169,172,199,189,170],
[154,0,157,164,152,159,146,155],
[154,184,0,165,159,167,174,175],
[172,177,176,0,165,163,167,175],
[169,189,182,176,0,172,171,167],
[142,182,174,178,169,0,158,152],
[152,195,167,174,170,183,0,172],
[171,186,166,166,174,189,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,157,203,177,172,176,175],
[163,0,152,200,177,167,175,168],
[184,189,0,185,180,169,183,180],
[138,141,156,0,143,153,167,152],
[164,164,161,198,0,176,168,167],
[169,174,172,188,165,0,178,176],
[165,166,158,174,173,163,0,180],
[166,173,161,189,174,165,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,145,202,170,173,214,193],
[171,0,149,194,203,165,203,177],
[196,192,0,196,173,163,191,215],
[139,147,145,0,157,150,188,187],
[171,138,168,184,0,175,204,199],
[168,176,178,191,166,0,200,210],
[127,138,150,153,137,141,0,153],
[148,164,126,154,142,131,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,199,184,174,192,166,166],
[163,0,179,159,159,172,166,177],
[142,162,0,160,164,153,174,168],
[157,182,181,0,188,177,167,189],
[167,182,177,153,0,177,171,180],
[149,169,188,164,164,0,172,142],
[175,175,167,174,170,169,0,172],
[175,164,173,152,161,199,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,186,179,175,152,162,159],
[164,0,170,165,172,153,159,162],
[155,171,0,176,161,155,168,150],
[162,176,165,0,162,144,155,163],
[166,169,180,179,0,153,160,150],
[189,188,186,197,188,0,166,177],
[179,182,173,186,181,175,0,170],
[182,179,191,178,191,164,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,158,155,167,182,157,158],
[200,0,156,154,170,140,151,178],
[183,185,0,171,181,158,168,204],
[186,187,170,0,182,152,162,186],
[174,171,160,159,0,170,158,191],
[159,201,183,189,171,0,175,155],
[184,190,173,179,183,166,0,204],
[183,163,137,155,150,186,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,169,165,192,171,156,161],
[181,0,166,171,181,174,177,161],
[172,175,0,164,192,178,182,163],
[176,170,177,0,180,179,165,157],
[149,160,149,161,0,140,154,145],
[170,167,163,162,201,0,179,171],
[185,164,159,176,187,162,0,157],
[180,180,178,184,196,170,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,161,158,179,171,172,184],
[164,0,174,166,182,189,169,198],
[180,167,0,173,195,187,188,197],
[183,175,168,0,181,189,186,198],
[162,159,146,160,0,161,173,173],
[170,152,154,152,180,0,175,171],
[169,172,153,155,168,166,0,168],
[157,143,144,143,168,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,192,163,160,176,184,170],
[163,0,179,176,170,167,183,160],
[149,162,0,176,153,177,175,178],
[178,165,165,0,159,179,176,168],
[181,171,188,182,0,177,199,158],
[165,174,164,162,164,0,178,168],
[157,158,166,165,142,163,0,144],
[171,181,163,173,183,173,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,173,163,169,163,154,161],
[176,0,158,160,176,164,157,168],
[168,183,0,162,174,163,159,180],
[178,181,179,0,190,169,175,183],
[172,165,167,151,0,167,147,166],
[178,177,178,172,174,0,163,176],
[187,184,182,166,194,178,0,185],
[180,173,161,158,175,165,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,187,170,181,171,174,191],
[168,0,186,172,182,181,167,187],
[154,155,0,180,181,178,161,175],
[171,169,161,0,171,177,164,181],
[160,159,160,170,0,160,160,167],
[170,160,163,164,181,0,164,181],
[167,174,180,177,181,177,0,186],
[150,154,166,160,174,160,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,163,152,134,172,150,127],
[181,0,168,172,166,172,157,143],
[178,173,0,163,154,171,144,163],
[189,169,178,0,163,184,180,159],
[207,175,187,178,0,185,168,166],
[169,169,170,157,156,0,149,139],
[191,184,197,161,173,192,0,172],
[214,198,178,182,175,202,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,166,181,177,180,172,173],
[195,0,217,196,192,173,194,170],
[175,124,0,165,173,161,183,184],
[160,145,176,0,169,144,171,151],
[164,149,168,172,0,150,150,174],
[161,168,180,197,191,0,172,162],
[169,147,158,170,191,169,0,180],
[168,171,157,190,167,179,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,214,223,126,176,209,180],
[194,0,132,173,124,144,193,143],
[127,209,0,192,123,124,163,161],
[118,168,149,0,114,150,135,165],
[215,217,218,227,0,133,181,187],
[165,197,217,191,208,0,145,226],
[132,148,178,206,160,196,0,163],
[161,198,180,176,154,115,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,208,171,158,193,170,185],
[163,0,174,183,178,177,193,180],
[133,167,0,163,140,160,173,171],
[170,158,178,0,147,170,177,181],
[183,163,201,194,0,203,185,190],
[148,164,181,171,138,0,163,160],
[171,148,168,164,156,178,0,169],
[156,161,170,160,151,181,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,194,150,166,178,167,175],
[182,0,162,153,180,166,171,174],
[147,179,0,138,168,158,166,156],
[191,188,203,0,169,171,169,171],
[175,161,173,172,0,181,171,178],
[163,175,183,170,160,0,172,164],
[174,170,175,172,170,169,0,184],
[166,167,185,170,163,177,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,156,151,166,163,147,159],
[151,0,170,164,171,181,168,176],
[185,171,0,178,147,167,166,172],
[190,177,163,0,160,161,158,178],
[175,170,194,181,0,153,190,211],
[178,160,174,180,188,0,169,164],
[194,173,175,183,151,172,0,183],
[182,165,169,163,130,177,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,146,151,160,139,159,156],
[185,0,152,162,184,163,164,162],
[195,189,0,173,177,173,172,166],
[190,179,168,0,182,170,169,162],
[181,157,164,159,0,164,157,161],
[202,178,168,171,177,0,173,176],
[182,177,169,172,184,168,0,183],
[185,179,175,179,180,165,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,194,140,177,160,111,176],
[213,0,181,125,178,165,111,165],
[147,160,0,192,113,114,110,195],
[201,216,149,0,132,151,130,195],
[164,163,228,209,0,144,191,210],
[181,176,227,190,197,0,126,193],
[230,230,231,211,150,215,0,232],
[165,176,146,146,131,148,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,160,190,163,174,182,161],
[143,0,134,155,166,122,148,136],
[181,207,0,177,186,170,171,189],
[151,186,164,0,167,180,160,153],
[178,175,155,174,0,160,166,139],
[167,219,171,161,181,0,173,161],
[159,193,170,181,175,168,0,158],
[180,205,152,188,202,180,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,172,163,175,185,168,154],
[176,0,166,175,166,176,175,160],
[169,175,0,160,165,166,163,163],
[178,166,181,0,164,180,169,169],
[166,175,176,177,0,175,170,166],
[156,165,175,161,166,0,156,159],
[173,166,178,172,171,185,0,174],
[187,181,178,172,175,182,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,177,172,172,183,158,168],
[170,0,169,166,187,187,166,175],
[164,172,0,163,177,180,157,173],
[169,175,178,0,189,188,172,184],
[169,154,164,152,0,177,151,158],
[158,154,161,153,164,0,153,153],
[183,175,184,169,190,188,0,178],
[173,166,168,157,183,188,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,179,172,189,169,157,170],
[166,0,171,163,172,175,163,148],
[162,170,0,160,168,175,151,175],
[169,178,181,0,178,181,154,149],
[152,169,173,163,0,158,155,128],
[172,166,166,160,183,0,153,150],
[184,178,190,187,186,188,0,167],
[171,193,166,192,213,191,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,172,113,114,202,57,113],
[256,0,200,170,199,284,199,256],
[169,141,0,168,170,197,113,170],
[228,171,173,0,142,229,142,144],
[227,142,171,199,0,228,143,200],
[139,57,144,112,113,0,84,113],
[284,142,228,199,198,257,0,200],
[228,85,171,197,141,228,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,197,171,179,174,170,168],
[169,0,201,182,177,176,168,156],
[144,140,0,153,152,157,143,145],
[170,159,188,0,173,167,170,164],
[162,164,189,168,0,181,168,176],
[167,165,184,174,160,0,172,158],
[171,173,198,171,173,169,0,169],
[173,185,196,177,165,183,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,168,155,168,183,165,176],
[187,0,163,162,182,185,162,188],
[173,178,0,160,157,184,158,186],
[186,179,181,0,164,193,181,174],
[173,159,184,177,0,171,158,176],
[158,156,157,148,170,0,142,166],
[176,179,183,160,183,199,0,188],
[165,153,155,167,165,175,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,166,174,171,154,157,165],
[180,0,171,188,162,166,174,162],
[175,170,0,165,182,184,174,157],
[167,153,176,0,180,174,177,177],
[170,179,159,161,0,175,167,161],
[187,175,157,167,166,0,172,179],
[184,167,167,164,174,169,0,175],
[176,179,184,164,180,162,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,165,190,169,188,184,165],
[145,0,169,152,159,168,180,139],
[176,172,0,171,182,161,172,173],
[151,189,170,0,174,160,165,150],
[172,182,159,167,0,154,173,139],
[153,173,180,181,187,0,170,181],
[157,161,169,176,168,171,0,145],
[176,202,168,191,202,160,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,152,163,182,175,171,159],
[179,0,176,178,175,171,181,170],
[189,165,0,153,160,152,150,146],
[178,163,188,0,182,157,159,158],
[159,166,181,159,0,177,165,177],
[166,170,189,184,164,0,145,156],
[170,160,191,182,176,196,0,182],
[182,171,195,183,164,185,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,173,179,164,155,181,172],
[164,0,163,168,171,171,172,177],
[168,178,0,180,177,166,184,180],
[162,173,161,0,179,151,178,177],
[177,170,164,162,0,169,179,183],
[186,170,175,190,172,0,180,185],
[160,169,157,163,162,161,0,174],
[169,164,161,164,158,156,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,153,167,134,149,164,180],
[188,0,161,178,183,158,177,186],
[188,180,0,219,161,174,178,201],
[174,163,122,0,135,151,156,157],
[207,158,180,206,0,187,182,175],
[192,183,167,190,154,0,166,183],
[177,164,163,185,159,175,0,172],
[161,155,140,184,166,158,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,159,167,164,177,176],
[164,0,164,153,172,172,157,161],
[171,177,0,166,162,168,166,175],
[182,188,175,0,173,165,176,189],
[174,169,179,168,0,165,170,177],
[177,169,173,176,176,0,174,174],
[164,184,175,165,171,167,0,173],
[165,180,166,152,164,167,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,167,161,157,163,169,151],
[184,0,173,168,172,170,186,178],
[174,168,0,180,174,161,168,173],
[180,173,161,0,163,179,178,162],
[184,169,167,178,0,179,186,171],
[178,171,180,162,162,0,179,163],
[172,155,173,163,155,162,0,158],
[190,163,168,179,170,178,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,162,179,174,173,172,156],
[179,0,164,177,161,200,188,169],
[179,177,0,162,153,160,170,146],
[162,164,179,0,163,203,176,160],
[167,180,188,178,0,171,187,184],
[168,141,181,138,170,0,176,158],
[169,153,171,165,154,165,0,157],
[185,172,195,181,157,183,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,180,178,173,174,162,182],
[162,0,155,158,162,152,143,163],
[161,186,0,172,170,166,154,162],
[163,183,169,0,166,160,163,170],
[168,179,171,175,0,155,155,168],
[167,189,175,181,186,0,175,186],
[179,198,187,178,186,166,0,186],
[159,178,179,171,173,155,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,187,178,190,173,171,163],
[160,0,183,173,174,169,169,181],
[154,158,0,170,172,170,164,167],
[163,168,171,0,185,158,172,169],
[151,167,169,156,0,167,178,144],
[168,172,171,183,174,0,179,174],
[170,172,177,169,163,162,0,169],
[178,160,174,172,197,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,159,157,147,161,169,162],
[170,0,171,167,159,179,163,183],
[182,170,0,182,164,179,172,188],
[184,174,159,0,164,186,170,179],
[194,182,177,177,0,180,170,179],
[180,162,162,155,161,0,159,154],
[172,178,169,171,171,182,0,177],
[179,158,153,162,162,187,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,160,162,158,157,156,178],
[165,0,158,149,147,153,154,157],
[181,183,0,164,150,167,150,188],
[179,192,177,0,171,172,158,174],
[183,194,191,170,0,182,174,189],
[184,188,174,169,159,0,177,189],
[185,187,191,183,167,164,0,192],
[163,184,153,167,152,152,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,171,166,190,183,183,185],
[168,0,174,173,182,175,175,174],
[170,167,0,175,178,172,181,173],
[175,168,166,0,175,186,171,180],
[151,159,163,166,0,163,172,167],
[158,166,169,155,178,0,175,170],
[158,166,160,170,169,166,0,173],
[156,167,168,161,174,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,149,180,179,178,170,172],
[175,0,180,152,181,181,177,163],
[192,161,0,174,199,183,173,171],
[161,189,167,0,168,198,161,178],
[162,160,142,173,0,169,157,154],
[163,160,158,143,172,0,150,150],
[171,164,168,180,184,191,0,181],
[169,178,170,163,187,191,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,194,166,161,171,174,172],
[166,0,176,174,151,159,146,175],
[147,165,0,160,167,154,147,172],
[175,167,181,0,156,151,161,178],
[180,190,174,185,0,165,180,187],
[170,182,187,190,176,0,173,190],
[167,195,194,180,161,168,0,172],
[169,166,169,163,154,151,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,165,164,155,156,182,164],
[161,0,166,168,148,160,171,167],
[176,175,0,153,165,157,179,169],
[177,173,188,0,163,172,179,173],
[186,193,176,178,0,163,178,175],
[185,181,184,169,178,0,186,181],
[159,170,162,162,163,155,0,169],
[177,174,172,168,166,160,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,227,113,227,114,113,114],
[228,0,114,0,114,114,228,114],
[114,227,0,114,228,228,114,114],
[228,341,227,0,114,114,228,114],
[114,227,113,227,0,114,114,0],
[227,227,113,227,227,0,227,227],
[228,113,227,113,227,114,0,114],
[227,227,227,227,341,114,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,156,152,157,164,176,157],
[184,0,163,166,176,158,167,173],
[185,178,0,169,181,173,177,172],
[189,175,172,0,174,169,182,161],
[184,165,160,167,0,164,178,158],
[177,183,168,172,177,0,166,169],
[165,174,164,159,163,175,0,153],
[184,168,169,180,183,172,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,177,169,176,188,165,170],
[170,0,174,158,171,167,167,156],
[164,167,0,176,164,163,147,164],
[172,183,165,0,163,176,163,164],
[165,170,177,178,0,177,180,163],
[153,174,178,165,164,0,167,164],
[176,174,194,178,161,174,0,177],
[171,185,177,177,178,177,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,143,151,141,156,132,139],
[187,0,175,157,161,176,169,157],
[198,166,0,175,170,171,152,155],
[190,184,166,0,159,180,174,167],
[200,180,171,182,0,173,146,174],
[185,165,170,161,168,0,159,153],
[209,172,189,167,195,182,0,166],
[202,184,186,174,167,188,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,171,160,165,183,172,152],
[157,0,167,158,158,153,172,134],
[170,174,0,163,160,169,166,166],
[181,183,178,0,171,160,168,174],
[176,183,181,170,0,182,181,160],
[158,188,172,181,159,0,186,160],
[169,169,175,173,160,155,0,153],
[189,207,175,167,181,181,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,146,129,151,212,146,179],
[129,0,137,143,139,194,147,171],
[195,204,0,134,147,198,156,211],
[212,198,207,0,169,204,207,184],
[190,202,194,172,0,211,151,181],
[129,147,143,137,130,0,147,163],
[195,194,185,134,190,194,0,196],
[162,170,130,157,160,178,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,184,183,168,173,179,172],
[168,0,176,184,169,173,184,181],
[157,165,0,172,148,161,166,161],
[158,157,169,0,166,153,158,162],
[173,172,193,175,0,160,185,175],
[168,168,180,188,181,0,180,179],
[162,157,175,183,156,161,0,161],
[169,160,180,179,166,162,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,173,174,140,159,163],
[173,0,145,142,145,136,148,161],
[167,196,0,172,175,173,168,168],
[168,199,169,0,185,177,194,162],
[167,196,166,156,0,164,163,182],
[201,205,168,164,177,0,171,203],
[182,193,173,147,178,170,0,182],
[178,180,173,179,159,138,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,171,175,163,171,183,161],
[193,0,186,171,167,176,162,159],
[170,155,0,146,162,165,194,170],
[166,170,195,0,183,172,191,172],
[178,174,179,158,0,191,213,180],
[170,165,176,169,150,0,182,180],
[158,179,147,150,128,159,0,163],
[180,182,171,169,161,161,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,153,141,174,171,138,153],
[209,0,168,169,196,188,217,181],
[188,173,0,181,190,194,185,167],
[200,172,160,0,172,184,182,167],
[167,145,151,169,0,182,178,183],
[170,153,147,157,159,0,150,155],
[203,124,156,159,163,191,0,148],
[188,160,174,174,158,186,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,154,145,151,139,136,155],
[188,0,177,174,170,177,169,172],
[187,164,0,159,152,151,156,156],
[196,167,182,0,175,165,173,169],
[190,171,189,166,0,173,167,180],
[202,164,190,176,168,0,199,181],
[205,172,185,168,174,142,0,182],
[186,169,185,172,161,160,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,153,167,145,172,160,135],
[169,0,177,155,144,166,163,151],
[188,164,0,177,163,148,174,164],
[174,186,164,0,159,149,158,161],
[196,197,178,182,0,167,184,172],
[169,175,193,192,174,0,178,181],
[181,178,167,183,157,163,0,156],
[206,190,177,180,169,160,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,176,175,177,170,168,169],
[168,0,169,171,178,172,175,171],
[165,172,0,178,172,162,183,172],
[166,170,163,0,171,162,160,166],
[164,163,169,170,0,147,161,159],
[171,169,179,179,194,0,176,167],
[173,166,158,181,180,165,0,162],
[172,170,169,175,182,174,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,150,177,173,164,175,160],
[167,0,155,156,145,133,163,136],
[191,186,0,181,146,157,190,143],
[164,185,160,0,191,182,184,162],
[168,196,195,150,0,176,190,154],
[177,208,184,159,165,0,175,185],
[166,178,151,157,151,166,0,175],
[181,205,198,179,187,156,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,185,170,164,164,164,157],
[192,0,172,181,162,178,152,170],
[156,169,0,173,163,166,165,178],
[171,160,168,0,172,159,163,172],
[177,179,178,169,0,149,173,174],
[177,163,175,182,192,0,174,191],
[177,189,176,178,168,167,0,170],
[184,171,163,169,167,150,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,173,180,172,174,163,180],
[179,0,194,170,181,191,182,170],
[168,147,0,161,169,165,168,176],
[161,171,180,0,169,176,172,176],
[169,160,172,172,0,167,175,174],
[167,150,176,165,174,0,170,158],
[178,159,173,169,166,171,0,161],
[161,171,165,165,167,183,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,167,145,135,147,145,153],
[177,0,164,155,164,158,171,184],
[174,177,0,174,169,168,173,149],
[196,186,167,0,175,163,165,175],
[206,177,172,166,0,172,177,184],
[194,183,173,178,169,0,182,180],
[196,170,168,176,164,159,0,152],
[188,157,192,166,157,161,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,167,158,170,175,167,155],
[162,0,175,163,182,164,162,167],
[174,166,0,164,164,170,147,173],
[183,178,177,0,194,160,175,169],
[171,159,177,147,0,158,153,149],
[166,177,171,181,183,0,159,162],
[174,179,194,166,188,182,0,168],
[186,174,168,172,192,179,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,183,169,177,168,166,164],
[168,0,181,162,184,176,166,166],
[158,160,0,151,171,163,159,163],
[172,179,190,0,190,167,172,176],
[164,157,170,151,0,151,147,155],
[173,165,178,174,190,0,152,178],
[175,175,182,169,194,189,0,185],
[177,175,178,165,186,163,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,166,161,141,159,144,144],
[180,0,184,170,146,161,167,154],
[175,157,0,166,147,174,167,153],
[180,171,175,0,157,174,179,155],
[200,195,194,184,0,169,180,174],
[182,180,167,167,172,0,182,165],
[197,174,174,162,161,159,0,157],
[197,187,188,186,167,176,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,181,178,171,186,173,150],
[171,0,193,176,178,195,177,170],
[160,148,0,170,166,177,160,163],
[163,165,171,0,176,187,149,175],
[170,163,175,165,0,177,189,150],
[155,146,164,154,164,0,156,162],
[168,164,181,192,152,185,0,154],
[191,171,178,166,191,179,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,166,157,156,157,157,165],
[177,0,174,190,170,153,166,166],
[175,167,0,192,171,167,169,171],
[184,151,149,0,157,159,154,157],
[185,171,170,184,0,179,160,170],
[184,188,174,182,162,0,170,167],
[184,175,172,187,181,171,0,170],
[176,175,170,184,171,174,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,146,130,143,129,138,170],
[146,0,157,159,148,145,129,161],
[195,184,0,170,181,165,171,194],
[211,182,171,0,197,176,157,182],
[198,193,160,144,0,153,152,200],
[212,196,176,165,188,0,163,186],
[203,212,170,184,189,178,0,184],
[171,180,147,159,141,155,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,179,167,178,176,196,157],
[177,0,176,153,166,197,159,175],
[162,165,0,147,164,175,158,153],
[174,188,194,0,182,207,176,166],
[163,175,177,159,0,183,180,150],
[165,144,166,134,158,0,170,154],
[145,182,183,165,161,171,0,170],
[184,166,188,175,191,187,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,156,173,176,143,190,181],
[145,0,169,170,155,133,171,169],
[185,172,0,156,192,131,175,174],
[168,171,185,0,145,171,126,177],
[165,186,149,196,0,173,193,185],
[198,208,210,170,168,0,159,190],
[151,170,166,215,148,182,0,174],
[160,172,167,164,156,151,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,171,161,167,158,168,190],
[175,0,188,177,172,156,175,178],
[170,153,0,158,163,159,153,156],
[180,164,183,0,168,171,154,143],
[174,169,178,173,0,155,174,182],
[183,185,182,170,186,0,173,177],
[173,166,188,187,167,168,0,180],
[151,163,185,198,159,164,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,173,180,162,158,178,169],
[169,0,167,183,161,173,160,164],
[168,174,0,187,185,167,163,173],
[161,158,154,0,162,162,168,163],
[179,180,156,179,0,176,167,179],
[183,168,174,179,165,0,172,183],
[163,181,178,173,174,169,0,169],
[172,177,168,178,162,158,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,182,176,173,180,173,167],
[177,0,169,170,160,154,163,182],
[159,172,0,173,170,146,166,166],
[165,171,168,0,161,171,162,172],
[168,181,171,180,0,171,178,171],
[161,187,195,170,170,0,187,177],
[168,178,175,179,163,154,0,163],
[174,159,175,169,170,164,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,167,170,168,175,186,178],
[159,0,169,178,167,173,164,170],
[174,172,0,185,170,173,180,182],
[171,163,156,0,166,163,165,152],
[173,174,171,175,0,162,163,153],
[166,168,168,178,179,0,168,167],
[155,177,161,176,178,173,0,164],
[163,171,159,189,188,174,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,171,168,179,163,161,172],
[166,0,168,187,187,163,173,174],
[170,173,0,167,186,172,165,163],
[173,154,174,0,177,153,162,163],
[162,154,155,164,0,152,156,160],
[178,178,169,188,189,0,171,166],
[180,168,176,179,185,170,0,163],
[169,167,178,178,181,175,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,163,185,139,169,163,195],
[159,0,197,203,163,179,187,214],
[178,144,0,168,155,152,160,179],
[156,138,173,0,140,163,137,184],
[202,178,186,201,0,191,170,210],
[172,162,189,178,150,0,183,191],
[178,154,181,204,171,158,0,183],
[146,127,162,157,131,150,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,175,165,183,164,201,191],
[155,0,162,180,167,169,165,177],
[166,179,0,188,194,169,172,192],
[176,161,153,0,187,176,184,178],
[158,174,147,154,0,158,151,192],
[177,172,172,165,183,0,176,191],
[140,176,169,157,190,165,0,195],
[150,164,149,163,149,150,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,145,158,153,143,155,174],
[195,0,157,180,176,172,175,183],
[196,184,0,178,175,167,184,184],
[183,161,163,0,170,169,167,163],
[188,165,166,171,0,147,166,181],
[198,169,174,172,194,0,181,171],
[186,166,157,174,175,160,0,175],
[167,158,157,178,160,170,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,159,170,209,172,187,174],
[130,0,124,127,127,137,143,140],
[182,217,0,142,166,144,183,166],
[171,214,199,0,167,181,192,180],
[132,214,175,174,0,172,182,149],
[169,204,197,160,169,0,175,121],
[154,198,158,149,159,166,0,128],
[167,201,175,161,192,220,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,178,168,179,161,158,169],
[174,0,183,156,179,150,162,172],
[163,158,0,148,158,150,159,161],
[173,185,193,0,185,168,178,179],
[162,162,183,156,0,171,169,161],
[180,191,191,173,170,0,172,172],
[183,179,182,163,172,169,0,163],
[172,169,180,162,180,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,187,184,187,199,191,205],
[185,0,194,177,164,185,188,185],
[154,147,0,153,167,184,154,168],
[157,164,188,0,157,180,167,180],
[154,177,174,184,0,184,185,184],
[142,156,157,161,157,0,161,167],
[150,153,187,174,156,180,0,175],
[136,156,173,161,157,174,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,188,181,166,185,178],
[163,0,170,171,178,168,169,179],
[163,171,0,166,167,173,157,177],
[153,170,175,0,178,162,165,186],
[160,163,174,163,0,169,162,182],
[175,173,168,179,172,0,164,193],
[156,172,184,176,179,177,0,193],
[163,162,164,155,159,148,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,188,172,175,185,181,170],
[179,0,181,169,157,169,180,154],
[153,160,0,159,158,156,167,146],
[169,172,182,0,165,168,187,144],
[166,184,183,176,0,188,188,171],
[156,172,185,173,153,0,170,142],
[160,161,174,154,153,171,0,156],
[171,187,195,197,170,199,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,154,186,167,172,156,149],
[166,0,158,162,154,172,163,156],
[187,183,0,192,170,171,179,177],
[155,179,149,0,173,173,164,153],
[174,187,171,168,0,187,175,157],
[169,169,170,168,154,0,170,157],
[185,178,162,177,166,171,0,156],
[192,185,164,188,184,184,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,181,179,182,166,188,190],
[168,0,172,175,187,178,179,178],
[160,169,0,167,168,145,183,182],
[162,166,174,0,166,168,172,180],
[159,154,173,175,0,175,171,177],
[175,163,196,173,166,0,178,186],
[153,162,158,169,170,163,0,164],
[151,163,159,161,164,155,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,181,174,175,186,187,191],
[173,0,170,173,191,177,194,185],
[160,171,0,156,165,172,191,173],
[167,168,185,0,184,169,175,178],
[166,150,176,157,0,180,180,182],
[155,164,169,172,161,0,190,172],
[154,147,150,166,161,151,0,163],
[150,156,168,163,159,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,167,155,169,174,165,158],
[157,0,147,150,161,170,168,151],
[174,194,0,172,175,185,185,166],
[186,191,169,0,174,181,177,177],
[172,180,166,167,0,186,168,160],
[167,171,156,160,155,0,167,159],
[176,173,156,164,173,174,0,164],
[183,190,175,164,181,182,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,150,175,186,178,142,165],
[199,0,178,182,198,174,202,167],
[191,163,0,167,179,201,179,166],
[166,159,174,0,188,169,153,152],
[155,143,162,153,0,159,158,172],
[163,167,140,172,182,0,181,153],
[199,139,162,188,183,160,0,183],
[176,174,175,189,169,188,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,161,205,205,172,123,195],
[133,0,137,170,184,134,123,120],
[180,204,0,208,170,169,170,147],
[136,171,133,0,144,156,121,182],
[136,157,171,197,0,147,123,123],
[169,207,172,185,194,0,184,183],
[218,218,171,220,218,157,0,195],
[146,221,194,159,218,158,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,179,167,173,178,168,180],
[162,0,162,177,147,188,170,171],
[162,179,0,188,173,187,183,184],
[174,164,153,0,174,157,173,179],
[168,194,168,167,0,177,176,193],
[163,153,154,184,164,0,204,170],
[173,171,158,168,165,137,0,161],
[161,170,157,162,148,171,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,149,194,185,164,158,167],
[184,0,181,208,194,170,185,169],
[192,160,0,177,187,172,170,152],
[147,133,164,0,163,144,133,143],
[156,147,154,178,0,165,140,167],
[177,171,169,197,176,0,156,175],
[183,156,171,208,201,185,0,153],
[174,172,189,198,174,166,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,179,185,196,156,158,176],
[173,0,163,180,180,175,163,173],
[162,178,0,181,179,159,164,189],
[156,161,160,0,181,154,152,156],
[145,161,162,160,0,159,148,150],
[185,166,182,187,182,0,173,194],
[183,178,177,189,193,168,0,190],
[165,168,152,185,191,147,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,177,172,171,167,161,173],
[158,0,173,170,171,168,172,179],
[164,168,0,163,164,172,159,176],
[169,171,178,0,169,188,173,181],
[170,170,177,172,0,189,167,165],
[174,173,169,153,152,0,157,163],
[180,169,182,168,174,184,0,180],
[168,162,165,160,176,178,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,165,184,181,163,181,187],
[177,0,169,180,177,182,166,185],
[176,172,0,183,179,175,169,173],
[157,161,158,0,171,156,163,156],
[160,164,162,170,0,166,166,161],
[178,159,166,185,175,0,173,188],
[160,175,172,178,175,168,0,168],
[154,156,168,185,180,153,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,160,184,207,182,182,114],
[158,0,135,117,162,184,90,115],
[181,206,0,208,184,161,228,138],
[157,224,133,0,184,133,134,160],
[134,179,157,157,0,157,132,136],
[159,157,180,208,184,0,158,138],
[159,251,113,207,209,183,0,206],
[227,226,203,181,205,203,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,167,145,167,161,174,165],
[196,0,166,158,167,164,180,189],
[174,175,0,175,163,161,175,182],
[196,183,166,0,190,165,202,194],
[174,174,178,151,0,164,179,181],
[180,177,180,176,177,0,165,168],
[167,161,166,139,162,176,0,162],
[176,152,159,147,160,173,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,181,163,159,163,172,154],
[168,0,173,160,157,158,174,157],
[160,168,0,158,141,147,159,156],
[178,181,183,0,173,168,182,160],
[182,184,200,168,0,179,186,178],
[178,183,194,173,162,0,181,161],
[169,167,182,159,155,160,0,161],
[187,184,185,181,163,180,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,153,154,170,150,155,154],
[187,0,175,180,166,163,170,152],
[188,166,0,159,170,172,176,157],
[187,161,182,0,172,165,161,170],
[171,175,171,169,0,156,160,168],
[191,178,169,176,185,0,174,160],
[186,171,165,180,181,167,0,175],
[187,189,184,171,173,181,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,148,147,194,196,146,195],
[195,0,147,147,195,196,146,195],
[193,194,0,196,194,243,145,193],
[194,194,145,0,194,242,242,193],
[147,146,147,147,0,195,146,195],
[145,145,98,99,146,0,194,144],
[195,195,196,99,195,147,0,194],
[146,146,148,148,146,197,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,170,180,178,179,191,188],
[162,0,160,172,153,169,188,176],
[171,181,0,176,156,183,167,172],
[161,169,165,0,156,172,173,160],
[163,188,185,185,0,185,194,196],
[162,172,158,169,156,0,167,177],
[150,153,174,168,147,174,0,164],
[153,165,169,181,145,164,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,139,158,95,143,105,127],
[217,0,138,140,169,171,182,171],
[202,203,0,168,157,173,151,141],
[183,201,173,0,171,188,138,159],
[246,172,184,170,0,188,136,187],
[198,170,168,153,153,0,122,216],
[236,159,190,203,205,219,0,223],
[214,170,200,182,154,125,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,146,177,161,176,183,162],
[174,0,189,202,156,163,192,193],
[195,152,0,195,154,187,192,194],
[164,139,146,0,130,149,167,172],
[180,185,187,211,0,169,190,191],
[165,178,154,192,172,0,183,185],
[158,149,149,174,151,158,0,200],
[179,148,147,169,150,156,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,171,175,196,188,174,168],
[167,0,168,173,167,148,178,147],
[170,173,0,185,175,178,186,155],
[166,168,156,0,186,158,197,173],
[145,174,166,155,0,155,175,155],
[153,193,163,183,186,0,200,172],
[167,163,155,144,166,141,0,158],
[173,194,186,168,186,169,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,168,180,183,185,168,199],
[162,0,171,150,170,172,160,175],
[173,170,0,176,177,184,173,187],
[161,191,165,0,182,189,182,180],
[158,171,164,159,0,167,160,177],
[156,169,157,152,174,0,159,171],
[173,181,168,159,181,182,0,176],
[142,166,154,161,164,170,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,182,189,164,191,190,182],
[165,0,163,166,162,180,186,168],
[159,178,0,195,170,167,159,177],
[152,175,146,0,167,156,168,172],
[177,179,171,174,0,166,179,169],
[150,161,174,185,175,0,192,185],
[151,155,182,173,162,149,0,167],
[159,173,164,169,172,156,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,175,158,173,163,179,162],
[183,0,180,169,168,178,184,190],
[166,161,0,159,164,157,184,163],
[183,172,182,0,171,164,188,167],
[168,173,177,170,0,175,172,178],
[178,163,184,177,166,0,191,164],
[162,157,157,153,169,150,0,140],
[179,151,178,174,163,177,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,175,182,159,174,151],
[160,0,137,150,149,158,161,145],
[173,204,0,163,167,149,176,140],
[166,191,178,0,175,172,163,160],
[159,192,174,166,0,171,172,150],
[182,183,192,169,170,0,167,178],
[167,180,165,178,169,174,0,135],
[190,196,201,181,191,163,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,172,166,178,169,173,178],
[175,0,167,155,173,164,162,187],
[169,174,0,171,175,172,170,173],
[175,186,170,0,177,171,173,188],
[163,168,166,164,0,155,185,175],
[172,177,169,170,186,0,170,178],
[168,179,171,168,156,171,0,175],
[163,154,168,153,166,163,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,174,175,159,185,205,184],
[178,0,177,183,194,163,195,189],
[167,164,0,205,188,178,191,205],
[166,158,136,0,179,162,180,170],
[182,147,153,162,0,182,182,159],
[156,178,163,179,159,0,194,175],
[136,146,150,161,159,147,0,158],
[157,152,136,171,182,166,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,169,166,161,177,166,172],
[173,0,176,182,161,176,174,168],
[172,165,0,173,168,177,180,165],
[175,159,168,0,166,167,177,182],
[180,180,173,175,0,164,188,170],
[164,165,164,174,177,0,172,167],
[175,167,161,164,153,169,0,170],
[169,173,176,159,171,174,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,130,186,176,169,205,164],
[147,0,129,162,164,172,173,184],
[211,212,0,172,165,171,186,202],
[155,179,169,0,187,213,235,143],
[165,177,176,154,0,182,175,177],
[172,169,170,128,159,0,166,169],
[136,168,155,106,166,175,0,167],
[177,157,139,198,164,172,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,170,173,155,169,188,181],
[178,0,174,179,170,178,188,181],
[171,167,0,165,164,156,154,177],
[168,162,176,0,178,172,178,174],
[186,171,177,163,0,165,193,181],
[172,163,185,169,176,0,174,185],
[153,153,187,163,148,167,0,174],
[160,160,164,167,160,156,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,174,165,163,172,160,180],
[176,0,173,183,171,168,163,176],
[167,168,0,154,161,153,161,171],
[176,158,187,0,154,163,159,178],
[178,170,180,187,0,169,168,185],
[169,173,188,178,172,0,180,180],
[181,178,180,182,173,161,0,183],
[161,165,170,163,156,161,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,181,183,175,186,164,196],
[154,0,175,164,144,194,153,194],
[160,166,0,156,164,186,159,177],
[158,177,185,0,161,176,176,183],
[166,197,177,180,0,186,183,186],
[155,147,155,165,155,0,145,169],
[177,188,182,165,158,196,0,173],
[145,147,164,158,155,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,153,192,152,194,142,141],
[205,0,145,190,181,161,182,150],
[188,196,0,203,180,180,165,188],
[149,151,138,0,152,184,127,154],
[189,160,161,189,0,207,148,173],
[147,180,161,157,134,0,154,163],
[199,159,176,214,193,187,0,164],
[200,191,153,187,168,178,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,170,188,185,195,193,181],
[167,0,181,184,182,181,175,169],
[171,160,0,177,185,198,169,173],
[153,157,164,0,175,169,163,157],
[156,159,156,166,0,180,157,173],
[146,160,143,172,161,0,157,150],
[148,166,172,178,184,184,0,166],
[160,172,168,184,168,191,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,175,170,194,176,201,182],
[163,0,173,177,172,167,172,132],
[166,168,0,182,163,151,177,142],
[171,164,159,0,178,168,187,142],
[147,169,178,163,0,161,164,135],
[165,174,190,173,180,0,198,155],
[140,169,164,154,177,143,0,130],
[159,209,199,199,206,186,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,154,151,149,164,140,170],
[178,0,159,188,182,166,176,198],
[187,182,0,205,179,166,208,192],
[190,153,136,0,192,169,167,168],
[192,159,162,149,0,176,183,212],
[177,175,175,172,165,0,175,192],
[201,165,133,174,158,166,0,199],
[171,143,149,173,129,149,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,130,143,170,154,184,159],
[182,0,141,172,174,150,185,179],
[211,200,0,177,206,157,174,206],
[198,169,164,0,169,164,173,174],
[171,167,135,172,0,152,187,163],
[187,191,184,177,189,0,168,177],
[157,156,167,168,154,173,0,181],
[182,162,135,167,178,164,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,156,184,170,165,168,158],
[175,0,170,181,167,162,177,157],
[185,171,0,190,173,156,177,172],
[157,160,151,0,161,146,163,158],
[171,174,168,180,0,184,185,171],
[176,179,185,195,157,0,190,177],
[173,164,164,178,156,151,0,157],
[183,184,169,183,170,164,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,167,194,174,152,179,170],
[167,0,171,158,178,155,167,183],
[174,170,0,188,163,169,152,144],
[147,183,153,0,155,151,167,146],
[167,163,178,186,0,167,158,183],
[189,186,172,190,174,0,157,183],
[162,174,189,174,183,184,0,186],
[171,158,197,195,158,158,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,168,164,181,174,176,173],
[172,0,170,157,177,167,173,169],
[173,171,0,160,168,163,184,168],
[177,184,181,0,181,167,180,168],
[160,164,173,160,0,166,171,162],
[167,174,178,174,175,0,174,165],
[165,168,157,161,170,167,0,159],
[168,172,173,173,179,176,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,174,169,167,194,161,179],
[172,0,184,159,186,175,170,167],
[167,157,0,165,176,166,156,173],
[172,182,176,0,167,164,168,191],
[174,155,165,174,0,168,169,161],
[147,166,175,177,173,0,170,159],
[180,171,185,173,172,171,0,167],
[162,174,168,150,180,182,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,174,230,172,230,230,145],
[139,0,198,198,198,229,200,169],
[167,143,0,141,113,169,112,111],
[111,143,200,0,113,196,140,111],
[169,143,228,228,0,254,228,196],
[111,112,172,145,87,0,170,168],
[111,141,229,201,113,171,0,143],
[196,172,230,230,145,173,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,186,142,163,153,168,165],
[171,0,170,165,165,178,166,193],
[155,171,0,160,147,141,154,151],
[199,176,181,0,158,177,195,206],
[178,176,194,183,0,160,172,171],
[188,163,200,164,181,0,164,195],
[173,175,187,146,169,177,0,167],
[176,148,190,135,170,146,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,168,180,167,142,206,150],
[164,0,119,117,180,115,131,167],
[173,222,0,164,215,188,254,202],
[161,224,177,0,212,138,207,135],
[174,161,126,129,0,142,144,177],
[199,226,153,203,199,0,192,186],
[135,210,87,134,197,149,0,162],
[191,174,139,206,164,155,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,166,149,165,175,171,158],
[182,0,175,155,158,184,171,171],
[175,166,0,151,160,165,176,171],
[192,186,190,0,170,175,173,170],
[176,183,181,171,0,192,176,169],
[166,157,176,166,149,0,161,168],
[170,170,165,168,165,180,0,169],
[183,170,170,171,172,173,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,169,166,198,143,185,181],
[152,0,151,180,160,152,175,161],
[172,190,0,167,169,163,174,177],
[175,161,174,0,187,172,176,174],
[143,181,172,154,0,158,161,144],
[198,189,178,169,183,0,185,179],
[156,166,167,165,180,156,0,163],
[160,180,164,167,197,162,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,147,160,146,121,131,121],
[134,0,170,146,166,119,118,119],
[194,171,0,161,167,143,170,156],
[181,195,180,0,120,156,141,107],
[195,175,174,221,0,145,148,181],
[220,222,198,185,196,0,193,158],
[210,223,171,200,193,148,0,160],
[220,222,185,234,160,183,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,167,177,170,158,184,163],
[182,0,185,173,166,188,174,176],
[174,156,0,158,163,162,170,175],
[164,168,183,0,178,180,195,167],
[171,175,178,163,0,184,188,179],
[183,153,179,161,157,0,173,164],
[157,167,171,146,153,168,0,155],
[178,165,166,174,162,177,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,177,192,182,166,207,161],
[144,0,168,149,168,134,194,166],
[164,173,0,161,157,169,176,174],
[149,192,180,0,174,172,190,174],
[159,173,184,167,0,164,174,141],
[175,207,172,169,177,0,200,173],
[134,147,165,151,167,141,0,142],
[180,175,167,167,200,168,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,160,178,164,158,178,159],
[175,0,183,188,195,189,159,171],
[181,158,0,181,175,166,172,172],
[163,153,160,0,163,156,158,153],
[177,146,166,178,0,160,160,167],
[183,152,175,185,181,0,176,176],
[163,182,169,183,181,165,0,164],
[182,170,169,188,174,165,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,186,163,152,179,186,175],
[174,0,178,167,155,169,174,181],
[155,163,0,180,159,157,166,166],
[178,174,161,0,171,155,184,187],
[189,186,182,170,0,174,181,186],
[162,172,184,186,167,0,180,194],
[155,167,175,157,160,161,0,170],
[166,160,175,154,155,147,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,179,161,175,151,157,175],
[171,0,178,184,172,169,183,172],
[162,163,0,164,158,143,143,157],
[180,157,177,0,159,147,164,164],
[166,169,183,182,0,161,168,175],
[190,172,198,194,180,0,175,170],
[184,158,198,177,173,166,0,190],
[166,169,184,177,166,171,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,153,186,134,169,166,167],
[196,0,155,162,140,182,181,181],
[188,186,0,159,179,146,153,174],
[155,179,182,0,159,171,195,178],
[207,201,162,182,0,174,184,188],
[172,159,195,170,167,0,167,189],
[175,160,188,146,157,174,0,173],
[174,160,167,163,153,152,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,194,168,190,182,183,192],
[155,0,161,169,168,157,171,181],
[147,180,0,170,179,172,173,175],
[173,172,171,0,173,166,174,192],
[151,173,162,168,0,157,180,165],
[159,184,169,175,184,0,176,183],
[158,170,168,167,161,165,0,181],
[149,160,166,149,176,158,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,160,174,165,159,172,175],
[182,0,170,183,173,172,178,189],
[181,171,0,189,170,165,189,174],
[167,158,152,0,161,153,178,172],
[176,168,171,180,0,161,186,176],
[182,169,176,188,180,0,193,189],
[169,163,152,163,155,148,0,169],
[166,152,167,169,165,152,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,168,182,162,174,176,168],
[153,0,173,170,169,196,162,172],
[173,168,0,173,175,211,212,188],
[159,171,168,0,165,182,159,154],
[179,172,166,176,0,204,160,187],
[167,145,130,159,137,0,144,143],
[165,179,129,182,181,197,0,153],
[173,169,153,187,154,198,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,161,155,144,153,133,144],
[207,0,192,169,172,177,159,180],
[180,149,0,168,149,158,153,161],
[186,172,173,0,158,156,163,156],
[197,169,192,183,0,166,172,180],
[188,164,183,185,175,0,158,184],
[208,182,188,178,169,183,0,191],
[197,161,180,185,161,157,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,179,185,180,198,176,179],
[182,0,178,162,195,196,182,183],
[162,163,0,153,163,182,193,160],
[156,179,188,0,186,194,177,171],
[161,146,178,155,0,193,171,170],
[143,145,159,147,148,0,166,148],
[165,159,148,164,170,175,0,144],
[162,158,181,170,171,193,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,175,161,171,170,177,173],
[166,0,163,174,177,187,189,171],
[166,178,0,184,186,171,183,176],
[180,167,157,0,174,169,183,176],
[170,164,155,167,0,148,171,155],
[171,154,170,172,193,0,190,152],
[164,152,158,158,170,151,0,148],
[168,170,165,165,186,189,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,185,170,179,174,182,171],
[164,0,161,151,179,165,165,163],
[156,180,0,170,209,156,168,193],
[171,190,171,0,176,147,168,180],
[162,162,132,165,0,152,163,143],
[167,176,185,194,189,0,203,182],
[159,176,173,173,178,138,0,172],
[170,178,148,161,198,159,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,158,159,80,158,161,239],
[129,0,155,26,105,104,108,132],
[183,186,0,160,80,158,187,187],
[182,315,181,0,183,157,263,238],
[261,236,261,158,0,236,239,265],
[183,237,183,184,105,0,213,213],
[180,233,154,78,102,128,0,130],
[102,209,154,103,76,128,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,173,181,173,172,165,215],
[161,0,163,170,154,188,186,183],
[168,178,0,192,188,193,199,205],
[160,171,149,0,147,170,172,178],
[168,187,153,194,0,173,184,186],
[169,153,148,171,168,0,173,182],
[176,155,142,169,157,168,0,181],
[126,158,136,163,155,159,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,198,131,215,196,162,163],
[161,0,144,192,195,177,143,164],
[143,197,0,177,163,142,179,149],
[210,149,164,0,214,148,129,134],
[126,146,178,127,0,163,149,132],
[145,164,199,193,178,0,143,129],
[179,198,162,212,192,198,0,194],
[178,177,192,207,209,212,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,176,173,172,179,185,183],
[173,0,174,172,160,180,178,172],
[165,167,0,174,158,162,173,169],
[168,169,167,0,164,174,174,172],
[169,181,183,177,0,169,169,170],
[162,161,179,167,172,0,160,162],
[156,163,168,167,172,181,0,159],
[158,169,172,169,171,179,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,165,178,182,195,187,182],
[149,0,156,173,148,160,150,159],
[176,185,0,181,186,171,201,163],
[163,168,160,0,196,173,166,178],
[159,193,155,145,0,143,155,179],
[146,181,170,168,198,0,197,176],
[154,191,140,175,186,144,0,159],
[159,182,178,163,162,165,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,172,165,168,158,171,162],
[166,0,174,164,171,169,169,170],
[169,167,0,164,167,165,180,155],
[176,177,177,0,179,176,190,166],
[173,170,174,162,0,155,178,153],
[183,172,176,165,186,0,189,171],
[170,172,161,151,163,152,0,150],
[179,171,186,175,188,170,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,190,191,187,221,145,178],
[183,0,179,192,160,209,162,151],
[151,162,0,193,189,195,136,163],
[150,149,148,0,133,179,133,133],
[154,181,152,208,0,170,90,166],
[120,132,146,162,171,0,115,117],
[196,179,205,208,251,226,0,162],
[163,190,178,208,175,224,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,190,180,208,168,190,193],
[158,0,187,207,198,183,178,182],
[151,154,0,177,192,164,150,162],
[161,134,164,0,165,182,163,157],
[133,143,149,176,0,155,168,134],
[173,158,177,159,186,0,159,155],
[151,163,191,178,173,182,0,161],
[148,159,179,184,207,186,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,164,168,168,179,151,169],
[165,0,158,173,172,177,167,187],
[177,183,0,176,163,181,184,178],
[173,168,165,0,171,180,170,178],
[173,169,178,170,0,179,155,185],
[162,164,160,161,162,0,153,176],
[190,174,157,171,186,188,0,178],
[172,154,163,163,156,165,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,157,174,199,160,158,168],
[169,0,170,174,198,177,172,162],
[184,171,0,184,183,173,161,170],
[167,167,157,0,186,171,166,156],
[142,143,158,155,0,155,152,143],
[181,164,168,170,186,0,148,172],
[183,169,180,175,189,193,0,174],
[173,179,171,185,198,169,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,185,177,191,162,210,205],
[159,0,165,165,179,175,200,196],
[156,176,0,169,190,170,187,199],
[164,176,172,0,176,158,191,198],
[150,162,151,165,0,163,177,173],
[179,166,171,183,178,0,200,219],
[131,141,154,150,164,141,0,179],
[136,145,142,143,168,122,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,171,170,186,154,167,169],
[176,0,188,170,182,174,191,178],
[170,153,0,161,171,163,181,176],
[171,171,180,0,167,161,178,174],
[155,159,170,174,0,164,164,174],
[187,167,178,180,177,0,181,181],
[174,150,160,163,177,160,0,160],
[172,163,165,167,167,160,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,167,155,188,179,168,201],
[180,0,185,149,194,183,190,199],
[174,156,0,164,194,175,151,181],
[186,192,177,0,208,192,167,191],
[153,147,147,133,0,161,142,176],
[162,158,166,149,180,0,168,174],
[173,151,190,174,199,173,0,173],
[140,142,160,150,165,167,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,188,176,147,172,205,187],
[203,0,209,193,157,204,198,185],
[153,132,0,125,147,144,151,158],
[165,148,216,0,172,171,186,185],
[194,184,194,169,0,157,202,195],
[169,137,197,170,184,0,207,184],
[136,143,190,155,139,134,0,131],
[154,156,183,156,146,157,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,176,160,174,157,165,169],
[178,0,162,164,189,160,172,189],
[165,179,0,169,171,170,171,185],
[181,177,172,0,167,163,173,157],
[167,152,170,174,0,171,157,179],
[184,181,171,178,170,0,153,170],
[176,169,170,168,184,188,0,180],
[172,152,156,184,162,171,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,179,176,188,167,194,179],
[150,0,182,183,173,172,184,158],
[162,159,0,164,189,168,184,153],
[165,158,177,0,196,177,187,166],
[153,168,152,145,0,146,163,139],
[174,169,173,164,195,0,188,165],
[147,157,157,154,178,153,0,147],
[162,183,188,175,202,176,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,151,152,155,180,154,125],
[177,0,151,148,156,142,158,136],
[190,190,0,167,197,193,182,177],
[189,193,174,0,170,173,188,152],
[186,185,144,171,0,177,197,148],
[161,199,148,168,164,0,134,148],
[187,183,159,153,144,207,0,134],
[216,205,164,189,193,193,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,160,175,172,159,181,177],
[175,0,159,182,172,160,173,178],
[181,182,0,181,165,171,178,177],
[166,159,160,0,176,163,171,171],
[169,169,176,165,0,159,170,171],
[182,181,170,178,182,0,176,183],
[160,168,163,170,171,165,0,160],
[164,163,164,170,170,158,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,165,179,153,166,179,164],
[147,0,140,149,154,136,144,147],
[176,201,0,179,180,171,170,165],
[162,192,162,0,167,165,164,159],
[188,187,161,174,0,176,187,171],
[175,205,170,176,165,0,174,176],
[162,197,171,177,154,167,0,156],
[177,194,176,182,170,165,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,183,159,167,180,170,182],
[167,0,172,177,171,178,179,178],
[158,169,0,151,163,168,153,162],
[182,164,190,0,174,187,175,181],
[174,170,178,167,0,167,182,181],
[161,163,173,154,174,0,169,171],
[171,162,188,166,159,172,0,167],
[159,163,179,160,160,170,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,188,185,186,170,179,203],
[165,0,186,181,183,176,178,190],
[153,155,0,174,166,155,173,184],
[156,160,167,0,168,166,168,189],
[155,158,175,173,0,175,175,192],
[171,165,186,175,166,0,185,196],
[162,163,168,173,166,156,0,192],
[138,151,157,152,149,145,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,181,170,186,193,186,178],
[160,0,162,165,177,174,167,171],
[160,179,0,172,185,181,182,180],
[171,176,169,0,179,170,176,171],
[155,164,156,162,0,167,159,168],
[148,167,160,171,174,0,168,167],
[155,174,159,165,182,173,0,169],
[163,170,161,170,173,174,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,190,168,179,182,170,182],
[169,0,183,169,174,178,179,185],
[151,158,0,163,169,181,180,195],
[173,172,178,0,169,182,177,176],
[162,167,172,172,0,180,180,166],
[159,163,160,159,161,0,157,173],
[171,162,161,164,161,184,0,175],
[159,156,146,165,175,168,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,158,157,153,160,161,171],
[187,0,174,159,180,188,188,176],
[183,167,0,150,153,175,168,176],
[184,182,191,0,165,189,177,186],
[188,161,188,176,0,202,183,199],
[181,153,166,152,139,0,169,177],
[180,153,173,164,158,172,0,171],
[170,165,165,155,142,164,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,175,158,163,162,182,180],
[167,0,188,158,179,173,186,188],
[166,153,0,144,146,162,169,175],
[183,183,197,0,160,173,188,179],
[178,162,195,181,0,162,193,189],
[179,168,179,168,179,0,197,179],
[159,155,172,153,148,144,0,173],
[161,153,166,162,152,162,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,179,196,188,198,188,170],
[161,0,184,203,184,180,181,159],
[162,157,0,182,182,186,188,168],
[145,138,159,0,156,165,167,170],
[153,157,159,185,0,165,168,172],
[143,161,155,176,176,0,178,161],
[153,160,153,174,173,163,0,144],
[171,182,173,171,169,180,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,159,184,199,153,225,172],
[185,0,168,176,189,191,212,174],
[182,173,0,153,178,148,200,164],
[157,165,188,0,191,181,190,157],
[142,152,163,150,0,150,183,139],
[188,150,193,160,191,0,215,179],
[116,129,141,151,158,126,0,118],
[169,167,177,184,202,162,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,315,158,208,212,185,208],
[81,0,210,104,184,185,158,184],
[26,131,0,132,105,51,159,102],
[183,237,209,0,211,132,185,183],
[133,157,236,130,0,133,160,103],
[129,156,290,209,208,0,160,103],
[156,183,182,156,181,181,0,181],
[133,157,239,158,238,238,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,196,170,160,169,171,170],
[150,0,148,165,171,150,155,169],
[145,193,0,157,178,154,168,171],
[171,176,184,0,166,188,167,177],
[181,170,163,175,0,179,156,171],
[172,191,187,153,162,0,180,159],
[170,186,173,174,185,161,0,181],
[171,172,170,164,170,182,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,162,162,172,152,165,176],
[178,0,173,199,192,172,170,179],
[179,168,0,192,178,163,173,179],
[179,142,149,0,160,146,147,155],
[169,149,163,181,0,148,169,171],
[189,169,178,195,193,0,186,184],
[176,171,168,194,172,155,0,167],
[165,162,162,186,170,157,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,168,178,165,175,178,175],
[161,0,175,167,176,179,161,173],
[173,166,0,171,174,166,160,163],
[163,174,170,0,179,174,176,169],
[176,165,167,162,0,170,169,158],
[166,162,175,167,171,0,165,175],
[163,180,181,165,172,176,0,179],
[166,168,178,172,183,166,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,158,136,162,157,164,154],
[175,0,156,154,169,168,175,160],
[183,185,0,173,172,174,181,160],
[205,187,168,0,178,170,187,178],
[179,172,169,163,0,163,188,163],
[184,173,167,171,178,0,163,173],
[177,166,160,154,153,178,0,161],
[187,181,181,163,178,168,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,153,139,197,174,195,146],
[179,0,172,167,194,177,216,185],
[188,169,0,174,175,157,209,164],
[202,174,167,0,193,168,213,181],
[144,147,166,148,0,155,182,136],
[167,164,184,173,186,0,203,202],
[146,125,132,128,159,138,0,145],
[195,156,177,160,205,139,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,174,159,161,192,160,159],
[167,0,199,172,180,159,165,178],
[167,142,0,173,153,177,173,156],
[182,169,168,0,165,164,176,167],
[180,161,188,176,0,180,168,178],
[149,182,164,177,161,0,155,141],
[181,176,168,165,173,186,0,143],
[182,163,185,174,163,200,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,183,177,174,173,194,179],
[181,0,173,185,166,179,212,177],
[158,168,0,150,143,168,185,167],
[164,156,191,0,176,203,204,167],
[167,175,198,165,0,196,198,160],
[168,162,173,138,145,0,193,162],
[147,129,156,137,143,148,0,132],
[162,164,174,174,181,179,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,171,200,213,170,185,201],
[167,0,169,169,180,153,128,186],
[170,172,0,214,196,184,157,174],
[141,172,127,0,227,155,141,187],
[128,161,145,114,0,159,158,174],
[171,188,157,186,182,0,172,203],
[156,213,184,200,183,169,0,188],
[140,155,167,154,167,138,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,147,191,145,160,182,151],
[190,0,174,211,155,167,167,170],
[194,167,0,210,145,174,157,178],
[150,130,131,0,137,140,131,139],
[196,186,196,204,0,165,153,181],
[181,174,167,201,176,0,168,146],
[159,174,184,210,188,173,0,149],
[190,171,163,202,160,195,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,182,182,159,204,172,184],
[160,0,199,182,161,198,172,168],
[159,142,0,148,153,189,173,178],
[159,159,193,0,158,206,187,176],
[182,180,188,183,0,199,168,170],
[137,143,152,135,142,0,187,154],
[169,169,168,154,173,154,0,164],
[157,173,163,165,171,187,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,192,181,175,176,178,157],
[148,0,170,158,159,156,158,166],
[149,171,0,155,156,175,154,157],
[160,183,186,0,170,173,172,168],
[166,182,185,171,0,178,182,169],
[165,185,166,168,163,0,170,175],
[163,183,187,169,159,171,0,171],
[184,175,184,173,172,166,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,152,151,173,189,184,143],
[177,0,177,168,188,194,205,133],
[189,164,0,171,164,201,212,150],
[190,173,170,0,173,193,215,181],
[168,153,177,168,0,183,201,133],
[152,147,140,148,158,0,203,124],
[157,136,129,126,140,138,0,135],
[198,208,191,160,208,217,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,162,159,168,141,146,155],
[204,0,195,181,191,170,179,175],
[179,146,0,166,178,166,152,180],
[182,160,175,0,181,164,170,182],
[173,150,163,160,0,165,161,188],
[200,171,175,177,176,0,160,162],
[195,162,189,171,180,181,0,175],
[186,166,161,159,153,179,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,156,187,144,137,129,131],
[188,0,183,168,187,174,140,157],
[185,158,0,179,159,170,159,182],
[154,173,162,0,127,126,155,158],
[197,154,182,214,0,167,122,158],
[204,167,171,215,174,0,169,174],
[212,201,182,186,219,172,0,167],
[210,184,159,183,183,167,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,184,176,176,164,165,169],
[159,0,167,178,160,159,157,155],
[157,174,0,169,170,172,163,164],
[165,163,172,0,170,157,165,162],
[165,181,171,171,0,161,165,173],
[177,182,169,184,180,0,174,172],
[176,184,178,176,176,167,0,179],
[172,186,177,179,168,169,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,184,170,140,113,115,128],
[198,0,166,150,140,95,166,180],
[157,175,0,142,142,113,172,185],
[171,191,199,0,185,142,159,170],
[201,201,199,156,0,143,202,198],
[228,246,228,199,198,0,159,214],
[226,175,169,182,139,182,0,169],
[213,161,156,171,143,127,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,165,172,180,167,178,173],
[161,0,165,159,165,160,161,160],
[176,176,0,162,175,166,169,166],
[169,182,179,0,177,172,176,162],
[161,176,166,164,0,157,170,179],
[174,181,175,169,184,0,166,171],
[163,180,172,165,171,175,0,160],
[168,181,175,179,162,170,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,186,171,170,164,180,169],
[171,0,182,181,163,176,179,173],
[155,159,0,166,159,153,166,147],
[170,160,175,0,155,171,174,165],
[171,178,182,186,0,169,184,165],
[177,165,188,170,172,0,182,172],
[161,162,175,167,157,159,0,157],
[172,168,194,176,176,169,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,169,169,173,182,184,159],
[168,0,181,162,154,166,189,185],
[172,160,0,170,158,181,184,152],
[172,179,171,0,165,168,180,169],
[168,187,183,176,0,190,189,179],
[159,175,160,173,151,0,169,165],
[157,152,157,161,152,172,0,151],
[182,156,189,172,162,176,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,164,168,165,158,161,177],
[181,0,185,166,166,169,181,186],
[177,156,0,181,158,173,160,187],
[173,175,160,0,156,173,165,183],
[176,175,183,185,0,179,169,193],
[183,172,168,168,162,0,162,174],
[180,160,181,176,172,179,0,187],
[164,155,154,158,148,167,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,161,198,186,175,159,186],
[171,0,155,173,188,183,164,168],
[180,186,0,189,191,168,176,177],
[143,168,152,0,180,175,138,145],
[155,153,150,161,0,150,154,158],
[166,158,173,166,191,0,160,157],
[182,177,165,203,187,181,0,185],
[155,173,164,196,183,184,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,190,189,174,177,168,188],
[150,0,157,154,148,151,155,158],
[151,184,0,149,143,164,149,164],
[152,187,192,0,159,171,166,168],
[167,193,198,182,0,189,192,185],
[164,190,177,170,152,0,139,163],
[173,186,192,175,149,202,0,165],
[153,183,177,173,156,178,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,153,176,191,167,185,161],
[181,0,155,173,158,184,164,145],
[188,186,0,168,188,180,195,171],
[165,168,173,0,168,176,150,149],
[150,183,153,173,0,188,200,164],
[174,157,161,165,153,0,174,162],
[156,177,146,191,141,167,0,161],
[180,196,170,192,177,179,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,170,164,168,187,158,176],
[161,0,181,178,174,170,157,170],
[171,160,0,176,165,161,162,165],
[177,163,165,0,162,177,160,180],
[173,167,176,179,0,188,172,185],
[154,171,180,164,153,0,141,166],
[183,184,179,181,169,200,0,179],
[165,171,176,161,156,175,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,181,172,179,162,169,156],
[162,0,157,172,165,181,167,170],
[160,184,0,161,174,167,156,166],
[169,169,180,0,169,175,172,184],
[162,176,167,172,0,178,165,168],
[179,160,174,166,163,0,166,163],
[172,174,185,169,176,175,0,168],
[185,171,175,157,173,178,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,168,189,173,201,224,166],
[123,0,141,140,120,162,163,155],
[173,200,0,182,156,187,173,160],
[152,201,159,0,161,169,181,177],
[168,221,185,180,0,174,185,182],
[140,179,154,172,167,0,180,173],
[117,178,168,160,156,161,0,159],
[175,186,181,164,159,168,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,159,170,157,162,164,167],
[181,0,188,183,171,191,176,167],
[182,153,0,176,171,170,172,154],
[171,158,165,0,162,168,174,174],
[184,170,170,179,0,179,179,174],
[179,150,171,173,162,0,177,171],
[177,165,169,167,162,164,0,167],
[174,174,187,167,167,170,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,176,162,170,157,158,190],
[180,0,168,179,183,179,160,175],
[165,173,0,155,165,159,143,156],
[179,162,186,0,183,174,176,173],
[171,158,176,158,0,172,156,172],
[184,162,182,167,169,0,177,173],
[183,181,198,165,185,164,0,183],
[151,166,185,168,169,168,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,172,171,153,176,168],
[182,0,165,186,181,136,191,171],
[178,176,0,170,175,173,187,149],
[169,155,171,0,153,142,181,177],
[170,160,166,188,0,170,203,157],
[188,205,168,199,171,0,207,192],
[165,150,154,160,138,134,0,158],
[173,170,192,164,184,149,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,167,148,156,153,167,153],
[181,0,165,189,172,168,195,184],
[174,176,0,181,179,172,176,170],
[193,152,160,0,156,152,178,163],
[185,169,162,185,0,171,181,179],
[188,173,169,189,170,0,191,175],
[174,146,165,163,160,150,0,160],
[188,157,171,178,162,166,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,170,175,174,162,165,148],
[184,0,172,184,170,164,182,161],
[171,169,0,165,181,154,161,146],
[166,157,176,0,176,162,184,173],
[167,171,160,165,0,146,164,149],
[179,177,187,179,195,0,183,165],
[176,159,180,157,177,158,0,158],
[193,180,195,168,192,176,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,173,168,176,188,166,157],
[182,0,149,159,170,176,162,162],
[168,192,0,162,158,187,169,174],
[173,182,179,0,163,198,180,179],
[165,171,183,178,0,185,174,179],
[153,165,154,143,156,0,144,137],
[175,179,172,161,167,197,0,186],
[184,179,167,162,162,204,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,189,170,180,169,191,175],
[155,0,179,165,163,159,155,163],
[152,162,0,167,156,163,158,166],
[171,176,174,0,173,160,179,183],
[161,178,185,168,0,162,160,191],
[172,182,178,181,179,0,186,168],
[150,186,183,162,181,155,0,177],
[166,178,175,158,150,173,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,161,160,165,185,183,173],
[150,0,176,165,159,162,180,157],
[180,165,0,169,179,169,182,161],
[181,176,172,0,171,174,169,174],
[176,182,162,170,0,153,172,160],
[156,179,172,167,188,0,180,175],
[158,161,159,172,169,161,0,154],
[168,184,180,167,181,166,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,143,164,169,160,157,172],
[200,0,170,214,204,168,190,212],
[198,171,0,205,164,155,169,178],
[177,127,136,0,155,146,157,182],
[172,137,177,186,0,158,163,188],
[181,173,186,195,183,0,170,208],
[184,151,172,184,178,171,0,189],
[169,129,163,159,153,133,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,183,175,182,167,156,169],
[164,0,189,183,171,173,168,181],
[158,152,0,166,159,158,170,165],
[166,158,175,0,151,179,163,161],
[159,170,182,190,0,170,164,166],
[174,168,183,162,171,0,162,163],
[185,173,171,178,177,179,0,164],
[172,160,176,180,175,178,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,172,166,164,170,174,173],
[176,0,187,163,170,165,172,172],
[169,154,0,162,178,161,163,170],
[175,178,179,0,170,174,168,182],
[177,171,163,171,0,163,182,172],
[171,176,180,167,178,0,183,175],
[167,169,178,173,159,158,0,172],
[168,169,171,159,169,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,187,193,201,200,167,169],
[149,0,186,161,177,165,164,165],
[154,155,0,162,158,157,141,152],
[148,180,179,0,185,155,173,157],
[140,164,183,156,0,182,157,160],
[141,176,184,186,159,0,155,159],
[174,177,200,168,184,186,0,175],
[172,176,189,184,181,182,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,156,168,178,180,159,154],
[164,0,158,164,167,161,146,159],
[185,183,0,179,164,173,163,159],
[173,177,162,0,179,193,172,162],
[163,174,177,162,0,181,159,172],
[161,180,168,148,160,0,164,162],
[182,195,178,169,182,177,0,178],
[187,182,182,179,169,179,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,176,148,137,142,170,178],
[159,0,176,149,130,142,133,167],
[165,165,0,152,153,163,156,164],
[193,192,189,0,162,132,197,155],
[204,211,188,179,0,176,183,168],
[199,199,178,209,165,0,206,175],
[171,208,185,144,158,135,0,153],
[163,174,177,186,173,166,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,166,168,178,161,180,174],
[171,0,172,154,182,159,178,161],
[175,169,0,184,182,172,184,170],
[173,187,157,0,186,178,168,175],
[163,159,159,155,0,166,157,161],
[180,182,169,163,175,0,176,176],
[161,163,157,173,184,165,0,169],
[167,180,171,166,180,165,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,165,168,172,162,164,174],
[181,0,156,178,166,158,168,186],
[176,185,0,187,168,177,174,184],
[173,163,154,0,181,144,168,178],
[169,175,173,160,0,152,178,174],
[179,183,164,197,189,0,171,193],
[177,173,167,173,163,170,0,177],
[167,155,157,163,167,148,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,167,172,185,170,168,142],
[179,0,175,165,168,175,178,157],
[174,166,0,164,174,175,182,152],
[169,176,177,0,185,171,177,159],
[156,173,167,156,0,161,177,161],
[171,166,166,170,180,0,174,171],
[173,163,159,164,164,167,0,154],
[199,184,189,182,180,170,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,173,183,175,164,178,168],
[167,0,171,176,166,168,184,171],
[168,170,0,160,165,176,178,167],
[158,165,181,0,171,177,191,173],
[166,175,176,170,0,169,185,156],
[177,173,165,164,172,0,174,168],
[163,157,163,150,156,167,0,163],
[173,170,174,168,185,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,178,161,161,178,174,174],
[171,0,173,174,163,171,167,168],
[163,168,0,173,172,166,155,165],
[180,167,168,0,154,176,175,167],
[180,178,169,187,0,192,177,179],
[163,170,175,165,149,0,160,169],
[167,174,186,166,164,181,0,180],
[167,173,176,174,162,172,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,162,146,157,148,146,161],
[190,0,172,184,167,171,173,172],
[179,169,0,162,148,164,151,171],
[195,157,179,0,163,168,168,176],
[184,174,193,178,0,175,165,169],
[193,170,177,173,166,0,163,180],
[195,168,190,173,176,178,0,179],
[180,169,170,165,172,161,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,183,186,182,189,165,178],
[170,0,201,176,199,180,173,158],
[158,140,0,146,145,175,133,157],
[155,165,195,0,169,170,166,195],
[159,142,196,172,0,173,193,150],
[152,161,166,171,168,0,172,158],
[176,168,208,175,148,169,0,179],
[163,183,184,146,191,183,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,186,171,171,166,170,191],
[159,0,175,171,173,158,169,193],
[155,166,0,159,161,173,173,185],
[170,170,182,0,169,172,183,193],
[170,168,180,172,0,174,167,181],
[175,183,168,169,167,0,174,182],
[171,172,168,158,174,167,0,186],
[150,148,156,148,160,159,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,173,170,167,172,169,147],
[166,0,205,200,183,180,178,175],
[168,136,0,174,160,146,158,152],
[171,141,167,0,146,152,164,172],
[174,158,181,195,0,166,181,156],
[169,161,195,189,175,0,185,158],
[172,163,183,177,160,156,0,160],
[194,166,189,169,185,183,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,175,157,175,173,175,173],
[156,0,153,173,158,177,163,169],
[166,188,0,163,176,195,175,177],
[184,168,178,0,193,206,176,200],
[166,183,165,148,0,171,156,172],
[168,164,146,135,170,0,160,162],
[166,178,166,165,185,181,0,160],
[168,172,164,141,169,179,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,180,180,184,168,170,154],
[156,0,163,158,184,165,163,157],
[161,178,0,174,190,188,173,182],
[161,183,167,0,178,167,176,167],
[157,157,151,163,0,158,168,148],
[173,176,153,174,183,0,159,159],
[171,178,168,165,173,182,0,157],
[187,184,159,174,193,182,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,172,199,175,185,173,181],
[178,0,157,165,148,170,150,179],
[169,184,0,191,168,164,157,196],
[142,176,150,0,173,144,149,176],
[166,193,173,168,0,179,145,178],
[156,171,177,197,162,0,174,202],
[168,191,184,192,196,167,0,215],
[160,162,145,165,163,139,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,153,157,158,144,174,167],
[166,0,155,160,151,167,153,187],
[188,186,0,190,178,163,174,184],
[184,181,151,0,183,154,176,179],
[183,190,163,158,0,172,167,191],
[197,174,178,187,169,0,178,194],
[167,188,167,165,174,163,0,185],
[174,154,157,162,150,147,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,185,168,178,163,177,174],
[165,0,175,163,175,176,174,181],
[156,166,0,165,156,155,163,163],
[173,178,176,0,170,176,196,173],
[163,166,185,171,0,177,171,173],
[178,165,186,165,164,0,173,156],
[164,167,178,145,170,168,0,165],
[167,160,178,168,168,185,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,155,183,170,180,191,162],
[143,0,166,177,170,158,181,152],
[186,175,0,185,172,167,178,178],
[158,164,156,0,154,178,170,139],
[171,171,169,187,0,178,162,160],
[161,183,174,163,163,0,180,151],
[150,160,163,171,179,161,0,149],
[179,189,163,202,181,190,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,163,182,198,176,199,184],
[163,0,168,185,178,186,190,153],
[178,173,0,180,176,163,182,168],
[159,156,161,0,188,159,176,157],
[143,163,165,153,0,157,175,153],
[165,155,178,182,184,0,179,172],
[142,151,159,165,166,162,0,138],
[157,188,173,184,188,169,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,184,176,151,164,177,182],
[160,0,167,183,163,165,182,170],
[157,174,0,180,155,166,166,158],
[165,158,161,0,171,164,179,172],
[190,178,186,170,0,169,190,174],
[177,176,175,177,172,0,194,161],
[164,159,175,162,151,147,0,160],
[159,171,183,169,167,180,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,191,153,204,182,203,183],
[155,0,166,161,171,161,164,150],
[150,175,0,162,187,175,162,164],
[188,180,179,0,186,183,194,170],
[137,170,154,155,0,171,175,154],
[159,180,166,158,170,0,180,160],
[138,177,179,147,166,161,0,171],
[158,191,177,171,187,181,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,165,165,172,134,136,150],
[173,0,169,153,134,143,161,166],
[176,172,0,156,131,139,148,151],
[176,188,185,0,193,166,150,165],
[169,207,210,148,0,153,151,145],
[207,198,202,175,188,0,183,170],
[205,180,193,191,190,158,0,184],
[191,175,190,176,196,171,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,163,193,164,149,155,179],
[185,0,164,198,179,172,178,191],
[178,177,0,166,169,176,168,187],
[148,143,175,0,176,147,161,177],
[177,162,172,165,0,163,167,166],
[192,169,165,194,178,0,182,202],
[186,163,173,180,174,159,0,163],
[162,150,154,164,175,139,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,153,151,168,172,155,158],
[172,0,147,166,167,177,165,178],
[188,194,0,160,186,194,184,174],
[190,175,181,0,175,197,169,178],
[173,174,155,166,0,149,168,171],
[169,164,147,144,192,0,163,171],
[186,176,157,172,173,178,0,172],
[183,163,167,163,170,170,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,180,192,166,176,175,164],
[166,0,175,182,172,180,196,182],
[161,166,0,181,179,174,157,171],
[149,159,160,0,156,172,177,184],
[175,169,162,185,0,177,165,190],
[165,161,167,169,164,0,174,174],
[166,145,184,164,176,167,0,171],
[177,159,170,157,151,167,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,218,179,180,152,164,150],
[175,0,201,177,174,161,177,134],
[123,140,0,149,107,179,167,107],
[162,164,192,0,122,149,188,92],
[161,167,234,219,0,194,162,163],
[189,180,162,192,147,0,146,146],
[177,164,174,153,179,195,0,174],
[191,207,234,249,178,195,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,167,178,159,175,179,169],
[180,0,189,191,180,166,175,169],
[174,152,0,181,167,180,173,166],
[163,150,160,0,167,157,161,157],
[182,161,174,174,0,156,161,167],
[166,175,161,184,185,0,167,172],
[162,166,168,180,180,174,0,167],
[172,172,175,184,174,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,169,124,166,160,158,157],
[156,0,180,184,188,201,189,169],
[172,161,0,158,173,170,157,158],
[217,157,183,0,211,209,168,187],
[175,153,168,130,0,169,154,172],
[181,140,171,132,172,0,156,163],
[183,152,184,173,187,185,0,189],
[184,172,183,154,169,178,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,174,180,172,165,174,163],
[170,0,180,189,171,167,170,172],
[167,161,0,172,149,180,167,165],
[161,152,169,0,157,162,175,163],
[169,170,192,184,0,182,172,163],
[176,174,161,179,159,0,181,175],
[167,171,174,166,169,160,0,159],
[178,169,176,178,178,166,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,194,119,187,130,162,165],
[203,0,209,167,186,137,202,164],
[147,132,0,118,149,112,164,140],
[222,174,223,0,166,138,192,192],
[154,155,192,175,0,175,162,158],
[211,204,229,203,166,0,183,184],
[179,139,177,149,179,158,0,139],
[176,177,201,149,183,157,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,184,185,167,203,180,169],
[150,0,164,160,175,192,177,175],
[157,177,0,167,156,185,167,172],
[156,181,174,0,170,177,166,176],
[174,166,185,171,0,198,176,178],
[138,149,156,164,143,0,152,157],
[161,164,174,175,165,189,0,187],
[172,166,169,165,163,184,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,176,186,187,162,186,181],
[169,0,165,184,183,169,185,173],
[165,176,0,173,181,173,188,180],
[155,157,168,0,173,157,164,172],
[154,158,160,168,0,156,154,163],
[179,172,168,184,185,0,187,168],
[155,156,153,177,187,154,0,163],
[160,168,161,169,178,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,177,215,175,202,164,213],
[165,0,151,170,150,188,160,174],
[164,190,0,211,194,199,195,177],
[126,171,130,0,127,160,136,136],
[166,191,147,214,0,193,185,167],
[139,153,142,181,148,0,181,165],
[177,181,146,205,156,160,0,161],
[128,167,164,205,174,176,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,160,143,173,159,178,152],
[195,0,165,169,180,185,175,172],
[181,176,0,166,182,185,183,164],
[198,172,175,0,189,172,174,166],
[168,161,159,152,0,161,181,151],
[182,156,156,169,180,0,174,160],
[163,166,158,167,160,167,0,158],
[189,169,177,175,190,181,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,175,164,152,169,133,166],
[177,0,163,159,135,171,149,169],
[166,178,0,160,172,167,144,153],
[177,182,181,0,175,170,151,181],
[189,206,169,166,0,169,179,179],
[172,170,174,171,172,0,156,177],
[208,192,197,190,162,185,0,196],
[175,172,188,160,162,164,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,170,167,184,191,176,186],
[177,0,160,174,169,175,170,186],
[171,181,0,163,184,184,179,185],
[174,167,178,0,168,176,180,188],
[157,172,157,173,0,175,170,181],
[150,166,157,165,166,0,150,171],
[165,171,162,161,171,191,0,179],
[155,155,156,153,160,170,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,176,184,188,172,163,168],
[183,0,164,179,190,183,171,163],
[165,177,0,181,185,171,167,174],
[157,162,160,0,181,167,154,175],
[153,151,156,160,0,161,153,148],
[169,158,170,174,180,0,169,171],
[178,170,174,187,188,172,0,165],
[173,178,167,166,193,170,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,162,172,178,158,154,170],
[169,0,177,172,202,184,168,174],
[179,164,0,172,197,184,151,173],
[169,169,169,0,184,193,175,187],
[163,139,144,157,0,163,153,169],
[183,157,157,148,178,0,147,169],
[187,173,190,166,188,194,0,177],
[171,167,168,154,172,172,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,196,195,197,193,204,184],
[171,0,177,183,182,187,176,169],
[145,164,0,173,175,178,182,167],
[146,158,168,0,166,168,181,164],
[144,159,166,175,0,166,193,169],
[148,154,163,173,175,0,178,164],
[137,165,159,160,148,163,0,157],
[157,172,174,177,172,177,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,167,183,181,181,188,201],
[181,0,186,193,193,194,160,192],
[174,155,0,186,162,194,190,193],
[158,148,155,0,153,144,153,166],
[160,148,179,188,0,177,161,198],
[160,147,147,197,164,0,152,188],
[153,181,151,188,180,189,0,185],
[140,149,148,175,143,153,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,158,184,187,176,173,177],
[145,0,158,164,163,162,165,161],
[183,183,0,170,177,171,169,176],
[157,177,171,0,177,177,184,176],
[154,178,164,164,0,165,164,158],
[165,179,170,164,176,0,163,159],
[168,176,172,157,177,178,0,168],
[164,180,165,165,183,182,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,183,177,167,177,177,173],
[161,0,180,167,168,172,180,172],
[158,161,0,162,162,165,187,163],
[164,174,179,0,168,179,156,169],
[174,173,179,173,0,183,173,170],
[164,169,176,162,158,0,169,167],
[164,161,154,185,168,172,0,176],
[168,169,178,172,171,174,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,143,133,157,159,156,156],
[198,0,148,156,173,131,165,159],
[198,193,0,180,181,158,173,151],
[208,185,161,0,182,179,181,178],
[184,168,160,159,0,141,173,145],
[182,210,183,162,200,0,189,165],
[185,176,168,160,168,152,0,158],
[185,182,190,163,196,176,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,183,168,177,171,192,190],
[152,0,170,151,162,132,158,161],
[158,171,0,168,157,142,166,159],
[173,190,173,0,163,152,173,179],
[164,179,184,178,0,165,192,161],
[170,209,199,189,176,0,177,183],
[149,183,175,168,149,164,0,175],
[151,180,182,162,180,158,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,184,181,156,172,170,183],
[172,0,175,174,166,169,155,180],
[157,166,0,187,161,169,175,170],
[160,167,154,0,165,177,155,169],
[185,175,180,176,0,169,171,184],
[169,172,172,164,172,0,165,175],
[171,186,166,186,170,176,0,183],
[158,161,171,172,157,166,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,146,170,157,164,161,153],
[176,0,170,182,205,173,155,169],
[195,171,0,184,180,166,190,179],
[171,159,157,0,190,166,167,170],
[184,136,161,151,0,175,153,164],
[177,168,175,175,166,0,164,187],
[180,186,151,174,188,177,0,177],
[188,172,162,171,177,154,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,162,184,175,195,188,180],
[151,0,151,180,169,169,152,155],
[179,190,0,191,176,179,182,170],
[157,161,150,0,163,155,141,156],
[166,172,165,178,0,159,171,171],
[146,172,162,186,182,0,167,156],
[153,189,159,200,170,174,0,161],
[161,186,171,185,170,185,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,172,174,183,170,184,181],
[163,0,160,151,160,153,161,180],
[169,181,0,175,194,180,183,189],
[167,190,166,0,183,172,175,170],
[158,181,147,158,0,155,162,176],
[171,188,161,169,186,0,186,175],
[157,180,158,166,179,155,0,166],
[160,161,152,171,165,166,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,181,170,189,181,176,171],
[182,0,174,179,168,157,161,168],
[160,167,0,187,190,158,140,155],
[171,162,154,0,161,143,135,156],
[152,173,151,180,0,166,142,164],
[160,184,183,198,175,0,143,156],
[165,180,201,206,199,198,0,186],
[170,173,186,185,177,185,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,180,166,158,180,191,194],
[166,0,163,165,171,184,180,193],
[161,178,0,170,150,180,193,168],
[175,176,171,0,172,168,178,166],
[183,170,191,169,0,175,190,162],
[161,157,161,173,166,0,175,171],
[150,161,148,163,151,166,0,164],
[147,148,173,175,179,170,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,132,205,168,99,68,202],
[240,0,237,240,273,135,135,203],
[209,104,0,206,170,171,69,170],
[136,101,135,0,204,102,69,172],
[173,68,171,137,0,137,68,172],
[242,206,170,239,204,0,138,170],
[273,206,272,272,273,203,0,170],
[139,138,171,169,169,171,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,193,171,214,148,168,169],
[169,0,194,194,257,148,211,212],
[148,147,0,210,212,212,188,209],
[170,147,131,0,196,192,148,170],
[127,84,129,145,0,148,166,211],
[193,193,129,149,193,0,147,212],
[173,130,153,193,175,194,0,193],
[172,129,132,171,130,129,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,153,176,176,188,170,159],
[180,0,157,185,149,173,172,179],
[188,184,0,168,161,192,181,186],
[165,156,173,0,171,186,160,177],
[165,192,180,170,0,199,181,179],
[153,168,149,155,142,0,168,155],
[171,169,160,181,160,173,0,169],
[182,162,155,164,162,186,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,155,128,144,146,116,163],
[180,0,173,129,145,139,153,162],
[186,168,0,129,148,150,137,168],
[213,212,212,0,190,170,173,198],
[197,196,193,151,0,157,161,176],
[195,202,191,171,184,0,167,188],
[225,188,204,168,180,174,0,189],
[178,179,173,143,165,153,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,163,159,172,168,154,162],
[185,0,174,167,181,175,171,173],
[178,167,0,166,181,172,160,175],
[182,174,175,0,173,170,155,188],
[169,160,160,168,0,166,151,171],
[173,166,169,171,175,0,137,172],
[187,170,181,186,190,204,0,187],
[179,168,166,153,170,169,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,170,170,189,159,170,190],
[167,0,175,188,177,167,156,187],
[171,166,0,162,165,167,182,179],
[171,153,179,0,173,175,166,185],
[152,164,176,168,0,149,174,173],
[182,174,174,166,192,0,185,193],
[171,185,159,175,167,156,0,193],
[151,154,162,156,168,148,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,172,191,165,177,163,174],
[172,0,160,158,155,170,171,172],
[169,181,0,190,170,181,175,170],
[150,183,151,0,164,175,167,170],
[176,186,171,177,0,178,179,170],
[164,171,160,166,163,0,170,168],
[178,170,166,174,162,171,0,171],
[167,169,171,171,171,173,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,160,167,158,167,160,170],
[176,0,171,169,161,166,188,176],
[181,170,0,191,178,176,192,182],
[174,172,150,0,175,174,177,177],
[183,180,163,166,0,190,189,193],
[174,175,165,167,151,0,164,171],
[181,153,149,164,152,177,0,171],
[171,165,159,164,148,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,184,170,166,182,166,158],
[166,0,186,176,149,180,155,167],
[157,155,0,154,135,171,139,149],
[171,165,187,0,166,186,173,173],
[175,192,206,175,0,170,159,175],
[159,161,170,155,171,0,153,156],
[175,186,202,168,182,188,0,160],
[183,174,192,168,166,185,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,164,172,163,152,151,156],
[177,0,171,178,164,166,163,168],
[177,170,0,158,154,168,153,143],
[169,163,183,0,162,166,178,165],
[178,177,187,179,0,179,158,164],
[189,175,173,175,162,0,158,154],
[190,178,188,163,183,183,0,177],
[185,173,198,176,177,187,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,173,163,183,172,177,180],
[167,0,172,161,171,176,154,178],
[168,169,0,167,173,177,152,173],
[178,180,174,0,185,179,165,174],
[158,170,168,156,0,164,162,170],
[169,165,164,162,177,0,156,171],
[164,187,189,176,179,185,0,194],
[161,163,168,167,171,170,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,154,157,172,166,148,204],
[132,0,146,134,136,134,140,171],
[187,195,0,173,170,166,178,177],
[184,207,168,0,170,182,176,198],
[169,205,171,171,0,170,153,181],
[175,207,175,159,171,0,163,196],
[193,201,163,165,188,178,0,195],
[137,170,164,143,160,145,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,176,165,184,189,195,185],
[172,0,184,170,188,193,172,189],
[165,157,0,159,148,164,173,157],
[176,171,182,0,170,183,180,192],
[157,153,193,171,0,162,199,190],
[152,148,177,158,179,0,164,168],
[146,169,168,161,142,177,0,167],
[156,152,184,149,151,173,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,193,202,198,179,188,218],
[179,0,186,183,203,175,162,219],
[148,155,0,168,165,197,168,200],
[139,158,173,0,173,145,162,161],
[143,138,176,168,0,189,157,177],
[162,166,144,196,152,0,176,194],
[153,179,173,179,184,165,0,204],
[123,122,141,180,164,147,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,150,141,160,169,175,126],
[168,0,166,160,147,193,180,173],
[191,175,0,131,146,180,167,153],
[200,181,210,0,148,193,177,173],
[181,194,195,193,0,192,160,163],
[172,148,161,148,149,0,130,130],
[166,161,174,164,181,211,0,173],
[215,168,188,168,178,211,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,169,171,197,182,190,170],
[171,0,164,170,174,177,170,181],
[172,177,0,154,170,171,174,163],
[170,171,187,0,184,180,198,190],
[144,167,171,157,0,149,172,156],
[159,164,170,161,192,0,183,166],
[151,171,167,143,169,158,0,161],
[171,160,178,151,185,175,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,178,185,164,157,183,156],
[189,0,197,166,176,162,178,166],
[163,144,0,152,155,176,189,151],
[156,175,189,0,155,154,176,178],
[177,165,186,186,0,182,183,191],
[184,179,165,187,159,0,196,156],
[158,163,152,165,158,145,0,159],
[185,175,190,163,150,185,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,153,188,177,192,182,169],
[153,0,157,147,146,137,144,133],
[188,184,0,179,199,134,160,160],
[153,194,162,0,182,144,164,175],
[164,195,142,159,0,135,170,164],
[149,204,207,197,206,0,198,205],
[159,197,181,177,171,143,0,172],
[172,208,181,166,177,136,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,149,153,146,176,167,158],
[164,0,156,161,155,171,150,169],
[192,185,0,163,179,186,175,178],
[188,180,178,0,160,179,184,182],
[195,186,162,181,0,198,182,181],
[165,170,155,162,143,0,174,162],
[174,191,166,157,159,167,0,185],
[183,172,163,159,160,179,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,183,170,178,179,183,185],
[157,0,156,159,153,171,164,140],
[158,185,0,184,174,179,168,181],
[171,182,157,0,157,172,175,176],
[163,188,167,184,0,178,173,177],
[162,170,162,169,163,0,174,157],
[158,177,173,166,168,167,0,162],
[156,201,160,165,164,184,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,158,163,175,147,156,188],
[183,0,173,177,164,149,161,178],
[183,168,0,159,172,150,141,179],
[178,164,182,0,173,183,156,202],
[166,177,169,168,0,152,161,164],
[194,192,191,158,189,0,184,184],
[185,180,200,185,180,157,0,180],
[153,163,162,139,177,157,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,203,171,158,181,160,167],
[153,0,178,191,168,179,193,171],
[138,163,0,173,151,165,142,146],
[170,150,168,0,192,174,174,152],
[183,173,190,149,0,193,163,150],
[160,162,176,167,148,0,178,155],
[181,148,199,167,178,163,0,163],
[174,170,195,189,191,186,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,165,184,177,159,155,162],
[179,0,170,198,177,172,177,179],
[176,171,0,179,163,155,156,162],
[157,143,162,0,160,157,163,153],
[164,164,178,181,0,159,168,156],
[182,169,186,184,182,0,179,171],
[186,164,185,178,173,162,0,176],
[179,162,179,188,185,170,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,176,114,156,144,206,156],
[229,0,232,171,184,189,244,155],
[165,109,0,109,177,171,224,168],
[227,170,232,0,197,174,215,228],
[185,157,164,144,0,219,247,218],
[197,152,170,167,122,0,185,185],
[135,97,117,126,94,156,0,153],
[185,186,173,113,123,156,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,162,135,129,127,129,146],
[201,0,184,182,165,171,168,164],
[179,157,0,161,141,153,160,151],
[206,159,180,0,155,178,156,170],
[212,176,200,186,0,162,175,181],
[214,170,188,163,179,0,179,174],
[212,173,181,185,166,162,0,188],
[195,177,190,171,160,167,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,156,162,171,178,159,160],
[177,0,178,167,178,200,172,165],
[185,163,0,165,159,182,167,167],
[179,174,176,0,188,195,165,162],
[170,163,182,153,0,190,183,172],
[163,141,159,146,151,0,161,143],
[182,169,174,176,158,180,0,161],
[181,176,174,179,169,198,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,154,179,172,179,162,178],
[186,0,173,186,160,216,192,178],
[187,168,0,189,186,208,165,171],
[162,155,152,0,188,172,178,179],
[169,181,155,153,0,165,173,176],
[162,125,133,169,176,0,165,158],
[179,149,176,163,168,176,0,169],
[163,163,170,162,165,183,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,140,165,141,177,172,142],
[212,0,147,192,180,156,149,188],
[201,194,0,195,187,169,190,196],
[176,149,146,0,181,132,152,174],
[200,161,154,160,0,165,178,146],
[164,185,172,209,176,0,166,166],
[169,192,151,189,163,175,0,188],
[199,153,145,167,195,175,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,151,155,163,158,162,154],
[193,0,211,208,183,192,158,166],
[190,130,0,153,172,158,159,162],
[186,133,188,0,165,145,127,152],
[178,158,169,176,0,172,150,141],
[183,149,183,196,169,0,179,179],
[179,183,182,214,191,162,0,182],
[187,175,179,189,200,162,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,202,151,182,181,144,154],
[176,0,186,181,165,156,147,174],
[139,155,0,150,141,169,121,159],
[190,160,191,0,163,176,126,179],
[159,176,200,178,0,185,193,150],
[160,185,172,165,156,0,146,136],
[197,194,220,215,148,195,0,177],
[187,167,182,162,191,205,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,166,173,164,178,163,167],
[169,0,179,180,181,176,176,168],
[175,162,0,182,162,172,174,165],
[168,161,159,0,160,159,167,152],
[177,160,179,181,0,177,172,171],
[163,165,169,182,164,0,170,164],
[178,165,167,174,169,171,0,171],
[174,173,176,189,170,177,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,169,118,145,159,127,148],
[188,0,170,168,218,167,186,207],
[172,171,0,174,152,199,155,152],
[223,173,167,0,172,168,138,183],
[196,123,189,169,0,176,125,152],
[182,174,142,173,165,0,183,192],
[214,155,186,203,216,158,0,195],
[193,134,189,158,189,149,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,173,166,156,155,178,193],
[156,0,171,157,159,134,167,164],
[168,170,0,138,170,152,162,170],
[175,184,203,0,178,167,173,191],
[185,182,171,163,0,180,161,180],
[186,207,189,174,161,0,183,177],
[163,174,179,168,180,158,0,174],
[148,177,171,150,161,164,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,193,183,184,176,172,169],
[182,0,189,184,170,186,184,171],
[148,152,0,165,163,160,160,154],
[158,157,176,0,152,173,175,161],
[157,171,178,189,0,179,179,158],
[165,155,181,168,162,0,174,159],
[169,157,181,166,162,167,0,161],
[172,170,187,180,183,182,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,158,183,157,171,158,161],
[170,0,139,175,158,168,155,152],
[183,202,0,180,175,184,170,176],
[158,166,161,0,150,166,162,151],
[184,183,166,191,0,184,182,175],
[170,173,157,175,157,0,155,170],
[183,186,171,179,159,186,0,179],
[180,189,165,190,166,171,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,151,176,276,160,164,162],
[156,0,131,187,214,151,140,147],
[190,210,0,206,244,178,138,202],
[165,154,135,0,195,173,148,167],
[65,127,97,146,0,92,90,116],
[181,190,163,168,249,0,181,164],
[177,201,203,193,251,160,0,170],
[179,194,139,174,225,177,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,175,190,176,184,169],
[173,0,177,173,188,168,170,161],
[167,164,0,179,171,164,178,160],
[166,168,162,0,177,167,176,180],
[151,153,170,164,0,173,173,152],
[165,173,177,174,168,0,183,163],
[157,171,163,165,168,158,0,170],
[172,180,181,161,189,178,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,132,181,144,153,186,176],
[192,0,171,174,176,146,166,185],
[209,170,0,199,147,186,165,173],
[160,167,142,0,169,176,183,157],
[197,165,194,172,0,159,148,177],
[188,195,155,165,182,0,169,182],
[155,175,176,158,193,172,0,166],
[165,156,168,184,164,159,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,163,170,152,152,160,165],
[157,0,153,179,158,178,159,154],
[178,188,0,182,179,169,167,165],
[171,162,159,0,171,180,152,179],
[189,183,162,170,0,182,200,155],
[189,163,172,161,159,0,160,168],
[181,182,174,189,141,181,0,173],
[176,187,176,162,186,173,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,156,151,140,152,146,145],
[181,0,146,163,179,171,170,158],
[185,195,0,150,206,181,195,188],
[190,178,191,0,207,174,205,163],
[201,162,135,134,0,129,123,138],
[189,170,160,167,212,0,188,179],
[195,171,146,136,218,153,0,186],
[196,183,153,178,203,162,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,165,171,182,169,171,171],
[168,0,159,172,167,159,161,162],
[176,182,0,169,184,183,185,179],
[170,169,172,0,175,169,170,175],
[159,174,157,166,0,166,163,160],
[172,182,158,172,175,0,177,179],
[170,180,156,171,178,164,0,181],
[170,179,162,166,181,162,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,175,169,180,157,158,153],
[183,0,174,165,165,154,166,165],
[166,167,0,172,169,164,155,151],
[172,176,169,0,162,142,161,152],
[161,176,172,179,0,162,155,167],
[184,187,177,199,179,0,166,176],
[183,175,186,180,186,175,0,155],
[188,176,190,189,174,165,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,194,185,174,180,172,168],
[183,0,243,233,185,164,233,233],
[147,98,0,171,135,157,167,169],
[156,108,170,0,121,147,181,147],
[167,156,206,220,0,203,206,192],
[161,177,184,194,138,0,160,174],
[169,108,174,160,135,181,0,159],
[173,108,172,194,149,167,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,183,185,164,221,167,178],
[149,0,190,161,157,175,150,174],
[158,151,0,157,151,151,171,152],
[156,180,184,0,180,189,161,163],
[177,184,190,161,0,174,168,175],
[120,166,190,152,167,0,160,150],
[174,191,170,180,173,181,0,190],
[163,167,189,178,166,191,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,152,169,171,168,166,187],
[172,0,145,151,175,159,156,155],
[189,196,0,178,200,148,172,179],
[172,190,163,0,175,172,159,164],
[170,166,141,166,0,161,165,151],
[173,182,193,169,180,0,190,179],
[175,185,169,182,176,151,0,177],
[154,186,162,177,190,162,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,170,169,175,150,183,173],
[163,0,185,181,193,175,191,185],
[171,156,0,151,169,160,156,148],
[172,160,190,0,173,168,178,165],
[166,148,172,168,0,177,163,171],
[191,166,181,173,164,0,172,185],
[158,150,185,163,178,169,0,170],
[168,156,193,176,170,156,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,168,171,167,172,171,168],
[173,0,162,163,177,152,169,166],
[173,179,0,184,180,173,173,169],
[170,178,157,0,176,158,171,161],
[174,164,161,165,0,168,156,167],
[169,189,168,183,173,0,179,177],
[170,172,168,170,185,162,0,165],
[173,175,172,180,174,164,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,165,174,156,178,163,178],
[173,0,176,181,173,158,175,172],
[176,165,0,171,157,160,164,164],
[167,160,170,0,165,165,159,163],
[185,168,184,176,0,171,182,175],
[163,183,181,176,170,0,183,178],
[178,166,177,182,159,158,0,160],
[163,169,177,178,166,163,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,164,148,164,149,158,143],
[186,0,159,161,173,161,161,167],
[177,182,0,186,178,163,197,175],
[193,180,155,0,181,177,200,168],
[177,168,163,160,0,171,164,174],
[192,180,178,164,170,0,181,172],
[183,180,144,141,177,160,0,172],
[198,174,166,173,167,169,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,184,180,184,174,157,186],
[165,0,165,177,176,159,169,162],
[157,176,0,180,166,159,154,162],
[161,164,161,0,171,164,154,155],
[157,165,175,170,0,161,146,151],
[167,182,182,177,180,0,171,148],
[184,172,187,187,195,170,0,170],
[155,179,179,186,190,193,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,176,175,190,170,184,180],
[161,0,163,177,182,168,171,173],
[165,178,0,166,178,187,175,165],
[166,164,175,0,173,169,181,170],
[151,159,163,168,0,163,169,157],
[171,173,154,172,178,0,186,168],
[157,170,166,160,172,155,0,164],
[161,168,176,171,184,173,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,166,174,167,176,167,173],
[161,0,161,177,182,190,169,156],
[175,180,0,171,160,184,175,165],
[167,164,170,0,178,182,148,168],
[174,159,181,163,0,191,154,183],
[165,151,157,159,150,0,147,150],
[174,172,166,193,187,194,0,170],
[168,185,176,173,158,191,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,169,194,177,183,190,191],
[152,0,150,178,179,168,163,169],
[172,191,0,198,185,180,168,187],
[147,163,143,0,178,156,168,173],
[164,162,156,163,0,162,163,165],
[158,173,161,185,179,0,173,171],
[151,178,173,173,178,168,0,172],
[150,172,154,168,176,170,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,176,176,184,177,176,167],
[157,0,170,179,193,170,164,181],
[165,171,0,169,181,169,158,175],
[165,162,172,0,163,178,162,176],
[157,148,160,178,0,174,169,161],
[164,171,172,163,167,0,162,163],
[165,177,183,179,172,179,0,193],
[174,160,166,165,180,178,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,177,163,173,178,180,187],
[162,0,188,158,161,174,172,170],
[164,153,0,172,180,170,165,169],
[178,183,169,0,175,196,178,168],
[168,180,161,166,0,162,182,174],
[163,167,171,145,179,0,170,165],
[161,169,176,163,159,171,0,172],
[154,171,172,173,167,176,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,180,169,179,160,169,170],
[161,0,159,165,184,165,180,185],
[161,182,0,178,180,168,175,159],
[172,176,163,0,167,163,158,170],
[162,157,161,174,0,164,160,164],
[181,176,173,178,177,0,167,174],
[172,161,166,183,181,174,0,170],
[171,156,182,171,177,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,169,155,166,144,168,148],
[161,0,153,174,176,165,183,165],
[172,188,0,168,182,169,190,181],
[186,167,173,0,190,175,182,166],
[175,165,159,151,0,156,171,155],
[197,176,172,166,185,0,180,166],
[173,158,151,159,170,161,0,162],
[193,176,160,175,186,175,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,165,198,174,178,184,180],
[159,0,163,196,159,167,172,196],
[176,178,0,188,182,169,200,195],
[143,145,153,0,155,146,170,164],
[167,182,159,186,0,175,191,194],
[163,174,172,195,166,0,175,181],
[157,169,141,171,150,166,0,178],
[161,145,146,177,147,160,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,136,158,149,166,173,162],
[202,0,177,171,204,198,167,176],
[205,164,0,161,185,190,193,174],
[183,170,180,0,172,185,180,178],
[192,137,156,169,0,162,171,180],
[175,143,151,156,179,0,166,158],
[168,174,148,161,170,175,0,199],
[179,165,167,163,161,183,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,167,172,185,179,170,173],
[176,0,163,175,184,165,167,181],
[174,178,0,188,183,173,182,166],
[169,166,153,0,172,178,177,176],
[156,157,158,169,0,160,168,166],
[162,176,168,163,181,0,170,171],
[171,174,159,164,173,171,0,165],
[168,160,175,165,175,170,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,240,200,171,225,212,134],
[155,0,209,156,169,213,181,157],
[101,132,0,142,185,170,170,144],
[141,185,199,0,185,252,236,181],
[170,172,156,156,0,197,184,156],
[116,128,171,89,144,0,181,90],
[129,160,171,105,157,160,0,134],
[207,184,197,160,185,251,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,183,172,176,172,173,186],
[187,0,170,168,201,169,188,166],
[158,171,0,157,172,186,162,153],
[169,173,184,0,178,187,186,166],
[165,140,169,163,0,145,179,159],
[169,172,155,154,196,0,188,152],
[168,153,179,155,162,153,0,169],
[155,175,188,175,182,189,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,183,163,168,166,154,171],
[181,0,191,180,177,164,178,181],
[158,150,0,161,166,172,138,161],
[178,161,180,0,188,166,153,184],
[173,164,175,153,0,153,149,169],
[175,177,169,175,188,0,171,184],
[187,163,203,188,192,170,0,195],
[170,160,180,157,172,157,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,155,175,171,161,180,171],
[172,0,169,168,156,161,158,168],
[186,172,0,169,160,161,176,184],
[166,173,172,0,157,171,170,174],
[170,185,181,184,0,184,178,179],
[180,180,180,170,157,0,178,183],
[161,183,165,171,163,163,0,179],
[170,173,157,167,162,158,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,158,184,151,155,155,170],
[156,0,171,160,158,161,151,164],
[183,170,0,161,164,163,180,172],
[157,181,180,0,166,168,152,178],
[190,183,177,175,0,179,170,186],
[186,180,178,173,162,0,164,170],
[186,190,161,189,171,177,0,193],
[171,177,169,163,155,171,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,181,171,185,167,177,180],
[175,0,165,175,196,168,175,181],
[160,176,0,164,181,181,166,192],
[170,166,177,0,185,156,169,180],
[156,145,160,156,0,163,157,169],
[174,173,160,185,178,0,166,171],
[164,166,175,172,184,175,0,176],
[161,160,149,161,172,170,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,151,168,183,188,206,178],
[176,0,188,167,179,160,191,170],
[190,153,0,183,195,180,192,170],
[173,174,158,0,185,153,195,154],
[158,162,146,156,0,158,174,154],
[153,181,161,188,183,0,180,166],
[135,150,149,146,167,161,0,146],
[163,171,171,187,187,175,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,172,170,166,185,164,168],
[157,0,155,165,149,170,156,160],
[169,186,0,181,162,179,175,164],
[171,176,160,0,165,175,161,175],
[175,192,179,176,0,183,165,171],
[156,171,162,166,158,0,157,152],
[177,185,166,180,176,184,0,168],
[173,181,177,166,170,189,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,174,173,181,176,170,172],
[152,0,169,170,162,159,159,164],
[167,172,0,162,164,168,155,172],
[168,171,179,0,175,165,171,178],
[160,179,177,166,0,167,167,159],
[165,182,173,176,174,0,160,158],
[171,182,186,170,174,181,0,174],
[169,177,169,163,182,183,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,176,160,170,161,177,151],
[188,0,177,167,180,163,181,175],
[165,164,0,157,166,159,167,152],
[181,174,184,0,179,182,172,159],
[171,161,175,162,0,160,183,175],
[180,178,182,159,181,0,192,151],
[164,160,174,169,158,149,0,143],
[190,166,189,182,166,190,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,175,168,173,159,179,171],
[172,0,176,165,171,173,173,172],
[166,165,0,164,175,159,182,165],
[173,176,177,0,173,169,181,179],
[168,170,166,168,0,166,171,180],
[182,168,182,172,175,0,178,171],
[162,168,159,160,170,163,0,173],
[170,169,176,162,161,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,126,170,128,171,129,126],
[128,0,85,42,87,129,87,85],
[215,256,0,214,130,130,130,128],
[171,299,127,0,171,214,172,127],
[213,254,211,170,0,256,171,254],
[170,212,211,127,85,0,172,169],
[212,254,211,169,170,169,0,211],
[215,256,213,214,87,172,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,163,186,166,170,168,164],
[167,0,157,165,165,177,159,173],
[178,184,0,175,167,186,184,171],
[155,176,166,0,172,168,164,161],
[175,176,174,169,0,181,163,172],
[171,164,155,173,160,0,156,169],
[173,182,157,177,178,185,0,164],
[177,168,170,180,169,172,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,163,163,203,151,186,240],
[180,0,180,146,164,156,152,259],
[178,161,0,205,225,163,238,219],
[178,195,136,0,238,181,133,257],
[138,177,116,103,0,127,175,219],
[190,185,178,160,214,0,186,217],
[155,189,103,208,166,155,0,246],
[101,82,122,84,122,124,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,151,158,155,165,153,165],
[162,0,153,132,172,167,136,168],
[190,188,0,180,180,177,189,169],
[183,209,161,0,187,177,187,179],
[186,169,161,154,0,171,175,163],
[176,174,164,164,170,0,155,150],
[188,205,152,154,166,186,0,173],
[176,173,172,162,178,191,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,188,200,194,235,156,230],
[148,0,175,199,198,213,150,210],
[153,166,0,203,195,206,176,189],
[141,142,138,0,163,172,162,173],
[147,143,146,178,0,189,116,174],
[106,128,135,169,152,0,121,114],
[185,191,165,179,225,220,0,214],
[111,131,152,168,167,227,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,149,173,165,177,175,168],
[168,0,147,164,160,176,171,161],
[192,194,0,180,162,203,186,174],
[168,177,161,0,155,174,187,183],
[176,181,179,186,0,184,199,164],
[164,165,138,167,157,0,180,163],
[166,170,155,154,142,161,0,145],
[173,180,167,158,177,178,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,163,204,174,205,179,212],
[151,0,157,177,149,159,156,199],
[178,184,0,171,160,178,170,198],
[137,164,170,0,142,152,152,160],
[167,192,181,199,0,177,190,198],
[136,182,163,189,164,0,157,195],
[162,185,171,189,151,184,0,190],
[129,142,143,181,143,146,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,164,172,163,150,167,178],
[185,0,166,161,157,160,158,182],
[177,175,0,168,163,183,160,195],
[169,180,173,0,154,151,175,167],
[178,184,178,187,0,155,157,189],
[191,181,158,190,186,0,177,190],
[174,183,181,166,184,164,0,188],
[163,159,146,174,152,151,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,182,170,180,184,180,174],
[155,0,165,162,175,165,170,160],
[159,176,0,164,175,160,186,162],
[171,179,177,0,176,184,186,162],
[161,166,166,165,0,166,168,158],
[157,176,181,157,175,0,177,157],
[161,171,155,155,173,164,0,165],
[167,181,179,179,183,184,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,181,193,203,176,182,159],
[130,0,122,137,148,138,157,143],
[160,219,0,181,184,168,200,187],
[148,204,160,0,185,168,187,165],
[138,193,157,156,0,147,188,167],
[165,203,173,173,194,0,184,170],
[159,184,141,154,153,157,0,169],
[182,198,154,176,174,171,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,181,163,162,158,156,156],
[168,0,158,158,180,176,152,151],
[160,183,0,171,182,193,169,171],
[178,183,170,0,181,180,174,161],
[179,161,159,160,0,176,156,164],
[183,165,148,161,165,0,162,152],
[185,189,172,167,185,179,0,163],
[185,190,170,180,177,189,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,157,169,187,184,172,179],
[172,0,180,164,179,192,170,173],
[184,161,0,171,167,198,175,182],
[172,177,170,0,173,183,198,197],
[154,162,174,168,0,163,174,165],
[157,149,143,158,178,0,164,179],
[169,171,166,143,167,177,0,174],
[162,168,159,144,176,162,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,155,172,164,171,175,138],
[188,0,191,193,180,188,187,157],
[186,150,0,178,169,154,178,157],
[169,148,163,0,158,155,165,153],
[177,161,172,183,0,166,173,175],
[170,153,187,186,175,0,171,166],
[166,154,163,176,168,170,0,156],
[203,184,184,188,166,175,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,190,157,177,144,153,165],
[154,0,176,130,174,129,136,137],
[151,165,0,164,154,139,164,151],
[184,211,177,0,185,155,187,156],
[164,167,187,156,0,145,161,163],
[197,212,202,186,196,0,168,183],
[188,205,177,154,180,173,0,187],
[176,204,190,185,178,158,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,138,198,175,191,170,146],
[161,0,163,188,149,201,169,150],
[203,178,0,181,158,156,174,167],
[143,153,160,0,134,152,151,142],
[166,192,183,207,0,198,174,176],
[150,140,185,189,143,0,159,134],
[171,172,167,190,167,182,0,147],
[195,191,174,199,165,207,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,167,153,199,181,173,207],
[165,0,162,174,182,187,184,191],
[174,179,0,161,197,184,165,203],
[188,167,180,0,201,174,165,203],
[142,159,144,140,0,142,145,180],
[160,154,157,167,199,0,149,208],
[168,157,176,176,196,192,0,198],
[134,150,138,138,161,133,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,177,112,159,125,128,157],
[167,0,197,130,225,129,160,162],
[164,144,0,145,194,127,98,175],
[229,211,196,0,276,147,177,194],
[182,116,147,65,0,84,115,95],
[216,212,214,194,257,0,195,146],
[213,181,243,164,226,146,0,176],
[184,179,166,147,246,195,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,176,153,181,169,185,183],
[151,0,166,149,174,155,177,171],
[165,175,0,167,195,166,185,162],
[188,192,174,0,196,186,202,170],
[160,167,146,145,0,163,157,144],
[172,186,175,155,178,0,178,163],
[156,164,156,139,184,163,0,141],
[158,170,179,171,197,178,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,113,133,42,90,204,89],
[205,0,205,201,133,203,202,204],
[228,136,0,159,182,183,159,206],
[208,140,182,0,137,184,184,207],
[299,208,159,204,0,208,209,251],
[251,138,158,157,133,0,185,160],
[137,139,182,157,132,156,0,160],
[252,137,135,134,90,181,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,175,157,174,156,185,168],
[145,0,163,160,171,150,165,154],
[166,178,0,168,156,164,170,173],
[184,181,173,0,170,175,173,171],
[167,170,185,171,0,166,186,161],
[185,191,177,166,175,0,179,173],
[156,176,171,168,155,162,0,156],
[173,187,168,170,180,168,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,165,181,155,172,182,165],
[165,0,169,170,162,168,169,167],
[176,172,0,178,163,170,188,181],
[160,171,163,0,162,168,188,164],
[186,179,178,179,0,170,172,179],
[169,173,171,173,171,0,176,161],
[159,172,153,153,169,165,0,163],
[176,174,160,177,162,180,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,165,178,160,168,185,171],
[184,0,170,195,153,182,184,158],
[176,171,0,168,182,158,194,204],
[163,146,173,0,141,136,190,167],
[181,188,159,200,0,153,204,166],
[173,159,183,205,188,0,205,196],
[156,157,147,151,137,136,0,145],
[170,183,137,174,175,145,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,173,185,150,202,190,172],
[156,0,183,179,154,159,185,168],
[168,158,0,167,161,167,183,158],
[156,162,174,0,165,179,186,175],
[191,187,180,176,0,185,187,153],
[139,182,174,162,156,0,188,177],
[151,156,158,155,154,153,0,143],
[169,173,183,166,188,164,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,143,171,196,161,136,189],
[170,0,192,161,201,174,194,193],
[198,149,0,171,181,142,140,142],
[170,180,170,0,196,138,184,196],
[145,140,160,145,0,157,148,187],
[180,167,199,203,184,0,171,204],
[205,147,201,157,193,170,0,189],
[152,148,199,145,154,137,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,172,184,141,190,209,159],
[169,0,169,194,169,181,187,171],
[169,172,0,171,161,207,197,152],
[157,147,170,0,180,177,196,162],
[200,172,180,161,0,206,193,164],
[151,160,134,164,135,0,165,149],
[132,154,144,145,148,176,0,151],
[182,170,189,179,177,192,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,174,184,184,188,187,164],
[144,0,173,186,173,182,167,161],
[167,168,0,183,186,191,173,164],
[157,155,158,0,176,179,163,168],
[157,168,155,165,0,169,174,154],
[153,159,150,162,172,0,159,163],
[154,174,168,178,167,182,0,173],
[177,180,177,173,187,178,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,165,176,182,162,174,165],
[160,0,145,165,157,155,142,157],
[176,196,0,172,186,170,180,173],
[165,176,169,0,175,146,159,160],
[159,184,155,166,0,175,163,175],
[179,186,171,195,166,0,188,184],
[167,199,161,182,178,153,0,170],
[176,184,168,181,166,157,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,167,175,160,172,193,159],
[163,0,187,200,169,175,200,166],
[174,154,0,147,163,155,190,181],
[166,141,194,0,164,165,172,162],
[181,172,178,177,0,179,201,163],
[169,166,186,176,162,0,186,177],
[148,141,151,169,140,155,0,178],
[182,175,160,179,178,164,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,162,166,167,156,165,154],
[171,0,163,170,168,172,172,166],
[179,178,0,158,175,173,174,168],
[175,171,183,0,174,179,171,167],
[174,173,166,167,0,182,167,174],
[185,169,168,162,159,0,171,163],
[176,169,167,170,174,170,0,155],
[187,175,173,174,167,178,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,166,132,149,127,140,160],
[163,0,152,154,159,139,131,165],
[175,189,0,152,164,155,152,190],
[209,187,189,0,172,186,161,171],
[192,182,177,169,0,167,162,170],
[214,202,186,155,174,0,174,189],
[201,210,189,180,179,167,0,195],
[181,176,151,170,171,152,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,195,211,160,187,175,239],
[209,0,200,198,184,191,154,228],
[146,141,0,187,132,161,134,198],
[130,143,154,0,114,125,139,167],
[181,157,209,227,0,219,192,203],
[154,150,180,216,122,0,174,211],
[166,187,207,202,149,167,0,204],
[102,113,143,174,138,130,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,157,171,158,168,189,160],
[174,0,163,184,180,181,171,163],
[184,178,0,174,178,164,177,174],
[170,157,167,0,183,177,175,151],
[183,161,163,158,0,175,156,157],
[173,160,177,164,166,0,180,159],
[152,170,164,166,185,161,0,155],
[181,178,167,190,184,182,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,191,155,156,144,159,180],
[170,0,187,163,154,171,169,177],
[150,154,0,149,140,144,145,169],
[186,178,192,0,179,163,185,198],
[185,187,201,162,0,200,198,176],
[197,170,197,178,141,0,187,186],
[182,172,196,156,143,154,0,193],
[161,164,172,143,165,155,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,177,176,176,153,157,171],
[171,0,167,177,156,161,161,162],
[164,174,0,173,159,175,153,173],
[165,164,168,0,164,164,149,163],
[165,185,182,177,0,177,176,182],
[188,180,166,177,164,0,163,162],
[184,180,188,192,165,178,0,177],
[170,179,168,178,159,179,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,248,187,200,152,217,183],
[203,0,259,139,184,167,185,230],
[93,82,0,94,125,62,139,153],
[154,202,247,0,184,183,216,230],
[141,157,216,157,0,169,185,169],
[189,174,279,158,172,0,155,200],
[124,156,202,125,156,186,0,154],
[158,111,188,111,172,141,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,170,174,182,178,183,175],
[155,0,155,169,171,164,175,178],
[171,186,0,166,184,174,179,183],
[167,172,175,0,184,174,172,170],
[159,170,157,157,0,163,171,170],
[163,177,167,167,178,0,189,193],
[158,166,162,169,170,152,0,177],
[166,163,158,171,171,148,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,173,172,166,172,176,158],
[159,0,164,165,156,158,168,165],
[168,177,0,171,165,163,178,162],
[169,176,170,0,163,160,176,181],
[175,185,176,178,0,164,173,172],
[169,183,178,181,177,0,178,171],
[165,173,163,165,168,163,0,168],
[183,176,179,160,169,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,233,195,140,184,186,172],
[132,0,166,184,173,165,143,171],
[108,175,0,152,152,149,142,150],
[146,157,189,0,142,144,167,143],
[201,168,189,199,0,176,166,209],
[157,176,192,197,165,0,186,163],
[155,198,199,174,175,155,0,165],
[169,170,191,198,132,178,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,150,157,161,153,158,180],
[182,0,172,168,175,168,170,175],
[191,169,0,190,179,189,188,184],
[184,173,151,0,177,182,163,177],
[180,166,162,164,0,168,168,189],
[188,173,152,159,173,0,160,172],
[183,171,153,178,173,181,0,183],
[161,166,157,164,152,169,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,160,177,189,180,179,178],
[147,0,157,158,165,142,168,159],
[181,184,0,191,196,153,176,187],
[164,183,150,0,183,156,165,177],
[152,176,145,158,0,162,173,175],
[161,199,188,185,179,0,182,180],
[162,173,165,176,168,159,0,184],
[163,182,154,164,166,161,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,124,126,166,165,142,154],
[219,0,142,153,195,170,144,125],
[217,199,0,139,198,166,186,185],
[215,188,202,0,241,167,185,175],
[175,146,143,100,0,154,158,157],
[176,171,175,174,187,0,146,173],
[199,197,155,156,183,195,0,157],
[187,216,156,166,184,168,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,159,185,187,156,173,144],
[170,0,143,166,175,157,166,147],
[182,198,0,190,181,171,184,154],
[156,175,151,0,171,148,169,151],
[154,166,160,170,0,134,171,151],
[185,184,170,193,207,0,177,176],
[168,175,157,172,170,164,0,148],
[197,194,187,190,190,165,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,189,178,181,168,175,175],
[160,0,194,150,142,145,166,148],
[152,147,0,156,156,145,156,154],
[163,191,185,0,168,176,174,163],
[160,199,185,173,0,167,176,174],
[173,196,196,165,174,0,183,174],
[166,175,185,167,165,158,0,153],
[166,193,187,178,167,167,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,165,187,178,185,176,201],
[162,0,174,184,167,175,149,173],
[176,167,0,167,182,186,165,169],
[154,157,174,0,165,168,151,167],
[163,174,159,176,0,167,158,166],
[156,166,155,173,174,0,143,174],
[165,192,176,190,183,198,0,186],
[140,168,172,174,175,167,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,184,177,190,193,169,194],
[151,0,158,145,167,148,174,174],
[157,183,0,188,177,177,167,180],
[164,196,153,0,188,163,186,163],
[151,174,164,153,0,166,166,186],
[148,193,164,178,175,0,165,163],
[172,167,174,155,175,176,0,181],
[147,167,161,178,155,178,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,175,197,168,173,150,164],
[155,0,193,173,183,170,176,200],
[166,148,0,170,159,154,142,172],
[144,168,171,0,165,140,158,162],
[173,158,182,176,0,165,166,185],
[168,171,187,201,176,0,147,170],
[191,165,199,183,175,194,0,198],
[177,141,169,179,156,171,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,166,164,182,149,185,153],
[178,0,183,178,172,157,172,148],
[175,158,0,179,188,152,176,167],
[177,163,162,0,177,179,179,151],
[159,169,153,164,0,163,166,142],
[192,184,189,162,178,0,188,167],
[156,169,165,162,175,153,0,187],
[188,193,174,190,199,174,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,183,155,167,178,159,174],
[182,0,171,167,174,155,160,183],
[158,170,0,161,158,161,148,166],
[186,174,180,0,164,175,156,180],
[174,167,183,177,0,167,165,172],
[163,186,180,166,174,0,171,173],
[182,181,193,185,176,170,0,168],
[167,158,175,161,169,168,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,174,170,171,179,159,178],
[176,0,188,176,180,184,174,167],
[167,153,0,171,149,176,151,164],
[171,165,170,0,171,174,163,182],
[170,161,192,170,0,173,161,169],
[162,157,165,167,168,0,156,167],
[182,167,190,178,180,185,0,175],
[163,174,177,159,172,174,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,154,206,160,207,146,182],
[149,0,159,187,194,170,178,181],
[187,182,0,179,151,172,177,194],
[135,154,162,0,157,174,137,175],
[181,147,190,184,0,180,184,177],
[134,171,169,167,161,0,180,169],
[195,163,164,204,157,161,0,178],
[159,160,147,166,164,172,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,176,185,170,169,169,178],
[164,0,175,159,174,173,169,172],
[165,166,0,175,170,157,175,170],
[156,182,166,0,170,170,165,164],
[171,167,171,171,0,171,167,173],
[172,168,184,171,170,0,171,168],
[172,172,166,176,174,170,0,165],
[163,169,171,177,168,173,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,182,174,162,199,177,175],
[154,0,164,164,153,166,153,152],
[159,177,0,180,153,170,172,155],
[167,177,161,0,142,150,156,155],
[179,188,188,199,0,183,163,170],
[142,175,171,191,158,0,160,143],
[164,188,169,185,178,181,0,168],
[166,189,186,186,171,198,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,170,167,164,167,177,171],
[167,0,175,183,171,187,191,199],
[171,166,0,160,155,175,173,180],
[174,158,181,0,167,182,192,175],
[177,170,186,174,0,200,200,199],
[174,154,166,159,141,0,159,162],
[164,150,168,149,141,182,0,190],
[170,142,161,166,142,179,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,228,171,171,227,170,114],
[171,0,285,171,114,228,170,228],
[113,56,0,57,57,227,56,57],
[170,170,284,0,170,341,56,114],
[170,227,284,171,0,227,227,171],
[114,113,114,0,114,0,56,57],
[171,171,285,285,114,285,0,171],
[227,113,284,227,170,284,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,146,187,170,149,155,160],
[179,0,168,182,173,171,186,164],
[195,173,0,193,200,166,183,185],
[154,159,148,0,164,153,158,146],
[171,168,141,177,0,149,163,165],
[192,170,175,188,192,0,170,177],
[186,155,158,183,178,171,0,172],
[181,177,156,195,176,164,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,166,169,179,202,198,175],
[163,0,172,161,192,165,187,164],
[175,169,0,163,166,167,186,151],
[172,180,178,0,195,171,171,159],
[162,149,175,146,0,171,163,166],
[139,176,174,170,170,0,192,151],
[143,154,155,170,178,149,0,157],
[166,177,190,182,175,190,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,181,175,189,181,164,185],
[168,0,186,178,175,184,171,177],
[160,155,0,176,176,168,155,175],
[166,163,165,0,171,166,157,165],
[152,166,165,170,0,164,152,160],
[160,157,173,175,177,0,162,176],
[177,170,186,184,189,179,0,188],
[156,164,166,176,181,165,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,163,173,159,170,149,182],
[174,0,160,172,161,175,161,173],
[178,181,0,187,159,191,181,171],
[168,169,154,0,165,172,148,180],
[182,180,182,176,0,177,170,179],
[171,166,150,169,164,0,151,166],
[192,180,160,193,171,190,0,182],
[159,168,170,161,162,175,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,170,169,185,184,165,177],
[152,0,162,165,165,153,150,169],
[171,179,0,172,163,185,180,180],
[172,176,169,0,172,177,170,179],
[156,176,178,169,0,158,161,186],
[157,188,156,164,183,0,175,176],
[176,191,161,171,180,166,0,166],
[164,172,161,162,155,165,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,166,177,171,174,183,181],
[162,0,161,174,160,179,174,168],
[175,180,0,194,174,171,161,175],
[164,167,147,0,152,173,150,165],
[170,181,167,189,0,183,176,179],
[167,162,170,168,158,0,165,181],
[158,167,180,191,165,176,0,188],
[160,173,166,176,162,160,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,199,157,183,160,208,191],
[152,0,170,140,158,155,186,158],
[142,171,0,163,152,144,164,180],
[184,201,178,0,162,178,177,201],
[158,183,189,179,0,161,179,174],
[181,186,197,163,180,0,189,187],
[133,155,177,164,162,152,0,166],
[150,183,161,140,167,154,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,153,186,168,192,182,228],
[162,0,160,188,168,189,172,204],
[188,181,0,183,179,194,158,205],
[155,153,158,0,155,160,141,199],
[173,173,162,186,0,188,164,215],
[149,152,147,181,153,0,157,161],
[159,169,183,200,177,184,0,209],
[113,137,136,142,126,180,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,164,171,189,181,178,170],
[170,0,186,172,178,184,173,173],
[177,155,0,180,191,181,175,156],
[170,169,161,0,167,176,173,163],
[152,163,150,174,0,159,164,151],
[160,157,160,165,182,0,176,163],
[163,168,166,168,177,165,0,162],
[171,168,185,178,190,178,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,161,184,157,177,168,173],
[172,0,161,178,175,174,166,172],
[180,180,0,177,164,178,173,181],
[157,163,164,0,149,162,164,165],
[184,166,177,192,0,177,179,183],
[164,167,163,179,164,0,165,176],
[173,175,168,177,162,176,0,167],
[168,169,160,176,158,165,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,171,173,160,164,157,153],
[175,0,173,166,173,179,170,160],
[170,168,0,170,162,181,157,158],
[168,175,171,0,152,171,160,162],
[181,168,179,189,0,186,174,173],
[177,162,160,170,155,0,152,147],
[184,171,184,181,167,189,0,179],
[188,181,183,179,168,194,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,228,341,341,113,226,226],
[113,0,228,113,341,113,226,226],
[113,113,0,113,228,226,226,113],
[0,228,228,0,228,113,113,113],
[0,0,113,113,0,113,226,226],
[228,228,115,228,228,0,341,113],
[115,115,115,228,115,0,0,113],
[115,115,228,228,115,228,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,187,190,176,172,163,192],
[173,0,165,175,179,164,153,182],
[154,176,0,181,181,170,169,170],
[151,166,160,0,167,159,173,175],
[165,162,160,174,0,152,143,174],
[169,177,171,182,189,0,146,175],
[178,188,172,168,198,195,0,187],
[149,159,171,166,167,166,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,158,164,156,167,161,162],
[172,0,169,159,165,169,172,169],
[183,172,0,174,177,168,174,179],
[177,182,167,0,162,173,176,161],
[185,176,164,179,0,161,191,170],
[174,172,173,168,180,0,171,179],
[180,169,167,165,150,170,0,158],
[179,172,162,180,171,162,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,177,170,202,195,170,174],
[148,0,171,166,181,165,188,183],
[164,170,0,164,172,182,172,171],
[171,175,177,0,195,172,179,167],
[139,160,169,146,0,173,179,143],
[146,176,159,169,168,0,184,167],
[171,153,169,162,162,157,0,165],
[167,158,170,174,198,174,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,167,155,179,159,160,173],
[179,0,181,164,182,173,177,193],
[174,160,0,162,165,164,175,203],
[186,177,179,0,165,172,161,188],
[162,159,176,176,0,136,148,199],
[182,168,177,169,205,0,203,211],
[181,164,166,180,193,138,0,199],
[168,148,138,153,142,130,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,182,191,188,165,182,167],
[158,0,165,183,166,178,159,162],
[159,176,0,176,165,165,140,166],
[150,158,165,0,152,158,137,155],
[153,175,176,189,0,160,166,161],
[176,163,176,183,181,0,153,169],
[159,182,201,204,175,188,0,175],
[174,179,175,186,180,172,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,175,174,171,161,174,169],
[170,0,170,181,169,165,158,156],
[166,171,0,175,174,171,149,147],
[167,160,166,0,146,154,166,170],
[170,172,167,195,0,173,164,159],
[180,176,170,187,168,0,185,174],
[167,183,192,175,177,156,0,183],
[172,185,194,171,182,167,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,161,154,174,162,189,162],
[171,0,176,161,156,175,172,161],
[180,165,0,171,178,190,178,185],
[187,180,170,0,185,181,186,166],
[167,185,163,156,0,170,186,175],
[179,166,151,160,171,0,167,163],
[152,169,163,155,155,174,0,160],
[179,180,156,175,166,178,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,143,155,171,148,167,160],
[164,0,151,135,168,158,160,153],
[198,190,0,172,186,190,188,165],
[186,206,169,0,183,186,176,187],
[170,173,155,158,0,161,154,162],
[193,183,151,155,180,0,174,190],
[174,181,153,165,187,167,0,166],
[181,188,176,154,179,151,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,175,169,161,186,178,191],
[165,0,172,169,185,183,185,203],
[166,169,0,177,165,177,170,173],
[172,172,164,0,170,181,174,168],
[180,156,176,171,0,168,164,196],
[155,158,164,160,173,0,181,178],
[163,156,171,167,177,160,0,184],
[150,138,168,173,145,163,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,174,200,182,167,173,184],
[170,0,163,162,169,171,168,171],
[167,178,0,197,158,182,157,173],
[141,179,144,0,157,154,156,170],
[159,172,183,184,0,189,151,168],
[174,170,159,187,152,0,162,159],
[168,173,184,185,190,179,0,178],
[157,170,168,171,173,182,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,173,158,173,165,185,183],
[166,0,173,169,160,147,164,173],
[168,168,0,166,176,161,161,156],
[183,172,175,0,159,172,183,176],
[168,181,165,182,0,157,191,182],
[176,194,180,169,184,0,189,175],
[156,177,180,158,150,152,0,173],
[158,168,185,165,159,166,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,175,152,173,178,165,164],
[173,0,174,159,184,183,163,169],
[166,167,0,145,168,183,178,177],
[189,182,196,0,192,195,184,157],
[168,157,173,149,0,177,165,158],
[163,158,158,146,164,0,162,154],
[176,178,163,157,176,179,0,162],
[177,172,164,184,183,187,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,136,171,170,165,164,192],
[167,0,149,181,166,159,178,183],
[205,192,0,186,170,178,178,194],
[170,160,155,0,188,171,173,155],
[171,175,171,153,0,168,178,168],
[176,182,163,170,173,0,154,155],
[177,163,163,168,163,187,0,169],
[149,158,147,186,173,186,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,187,179,158,182,180,175],
[162,0,187,167,168,173,171,175],
[154,154,0,147,151,164,158,140],
[162,174,194,0,171,171,168,175],
[183,173,190,170,0,187,171,179],
[159,168,177,170,154,0,162,170],
[161,170,183,173,170,179,0,157],
[166,166,201,166,162,171,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,167,165,171,168,173,169],
[178,0,190,184,186,168,167,177],
[174,151,0,176,164,156,166,152],
[176,157,165,0,162,160,176,174],
[170,155,177,179,0,165,171,162],
[173,173,185,181,176,0,181,168],
[168,174,175,165,170,160,0,174],
[172,164,189,167,179,173,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,139,158,148,138,143,144],
[188,0,158,155,176,163,170,164],
[202,183,0,170,181,166,179,184],
[183,186,171,0,179,191,161,168],
[193,165,160,162,0,163,163,184],
[203,178,175,150,178,0,168,169],
[198,171,162,180,178,173,0,165],
[197,177,157,173,157,172,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,166,188,172,168,185,170],
[194,0,174,191,166,184,184,167],
[175,167,0,195,163,189,185,171],
[153,150,146,0,156,157,177,158],
[169,175,178,185,0,191,195,170],
[173,157,152,184,150,0,169,164],
[156,157,156,164,146,172,0,164],
[171,174,170,183,171,177,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,156,182,169,162,175,167],
[172,0,162,155,154,160,164,136],
[185,179,0,188,178,172,187,166],
[159,186,153,0,166,138,182,141],
[172,187,163,175,0,162,172,165],
[179,181,169,203,179,0,181,176],
[166,177,154,159,169,160,0,170],
[174,205,175,200,176,165,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,188,171,170,181,174,153],
[172,0,182,173,202,156,173,158],
[153,159,0,169,166,169,172,156],
[170,168,172,0,180,175,159,166],
[171,139,175,161,0,170,160,148],
[160,185,172,166,171,0,169,155],
[167,168,169,182,181,172,0,173],
[188,183,185,175,193,186,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,172,178,171,174,170,175],
[171,0,180,147,161,191,174,169],
[169,161,0,169,170,177,167,166],
[163,194,172,0,167,180,171,170],
[170,180,171,174,0,180,174,176],
[167,150,164,161,161,0,154,155],
[171,167,174,170,167,187,0,181],
[166,172,175,171,165,186,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,158,173,165,163,157,164],
[168,0,165,190,179,174,165,168],
[183,176,0,182,168,173,174,176],
[168,151,159,0,156,157,157,149],
[176,162,173,185,0,179,167,160],
[178,167,168,184,162,0,163,168],
[184,176,167,184,174,178,0,183],
[177,173,165,192,181,173,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,162,160,158,175,175,179],
[172,0,195,168,174,161,177,171],
[179,146,0,149,154,162,162,156],
[181,173,192,0,159,178,184,159],
[183,167,187,182,0,168,175,186],
[166,180,179,163,173,0,169,180],
[166,164,179,157,166,172,0,178],
[162,170,185,182,155,161,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,177,183,163,170,196,169],
[167,0,174,183,183,182,202,182],
[164,167,0,173,174,173,185,167],
[158,158,168,0,153,181,175,161],
[178,158,167,188,0,169,194,168],
[171,159,168,160,172,0,195,176],
[145,139,156,166,147,146,0,148],
[172,159,174,180,173,165,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,175,174,176,159,158,173],
[198,0,207,195,185,161,183,187],
[166,134,0,153,148,153,159,163],
[167,146,188,0,160,162,158,165],
[165,156,193,181,0,173,170,171],
[182,180,188,179,168,0,172,168],
[183,158,182,183,171,169,0,171],
[168,154,178,176,170,173,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,157,162,141,170,127,141],
[183,0,149,164,168,197,170,188],
[184,192,0,169,180,204,188,188],
[179,177,172,0,166,187,143,182],
[200,173,161,175,0,201,166,151],
[171,144,137,154,140,0,141,172],
[214,171,153,198,175,200,0,185],
[200,153,153,159,190,169,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,156,150,134,163,152,154],
[192,0,150,157,155,153,141,150],
[185,191,0,159,156,179,157,174],
[191,184,182,0,187,170,168,167],
[207,186,185,154,0,195,185,176],
[178,188,162,171,146,0,147,169],
[189,200,184,173,156,194,0,190],
[187,191,167,174,165,172,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,173,176,189,181,158,172],
[157,0,155,167,158,164,156,182],
[168,186,0,180,185,186,163,191],
[165,174,161,0,181,181,158,182],
[152,183,156,160,0,186,174,191],
[160,177,155,160,155,0,144,173],
[183,185,178,183,167,197,0,198],
[169,159,150,159,150,168,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,164,165,153,170,164,168],
[170,0,171,168,161,162,172,172],
[177,170,0,172,171,168,158,179],
[176,173,169,0,175,172,170,172],
[188,180,170,166,0,172,167,184],
[171,179,173,169,169,0,166,186],
[177,169,183,171,174,175,0,186],
[173,169,162,169,157,155,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,214,186,188,166,197,192],
[125,0,131,136,138,134,181,134],
[127,210,0,163,168,171,184,157],
[155,205,178,0,167,164,180,171],
[153,203,173,174,0,158,194,196],
[175,207,170,177,183,0,203,194],
[144,160,157,161,147,138,0,143],
[149,207,184,170,145,147,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,168,171,177,161,175],
[169,0,175,169,173,181,171,185],
[170,166,0,178,180,168,163,176],
[173,172,163,0,171,171,188,178],
[170,168,161,170,0,177,171,171],
[164,160,173,170,164,0,168,174],
[180,170,178,153,170,173,0,170],
[166,156,165,163,170,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,187,168,179,176,167,199],
[144,0,152,144,158,163,156,189],
[154,189,0,149,157,165,151,187],
[173,197,192,0,167,182,181,202],
[162,183,184,174,0,169,157,206],
[165,178,176,159,172,0,160,202],
[174,185,190,160,184,181,0,224],
[142,152,154,139,135,139,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,177,190,199,206,217,168],
[161,0,167,165,174,172,192,166],
[164,174,0,180,181,202,197,174],
[151,176,161,0,152,168,194,166],
[142,167,160,189,0,174,189,145],
[135,169,139,173,167,0,185,147],
[124,149,144,147,152,156,0,152],
[173,175,167,175,196,194,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,170,165,178,169,173,169],
[171,0,172,159,178,172,172,185],
[171,169,0,168,179,168,171,162],
[176,182,173,0,195,181,183,167],
[163,163,162,146,0,166,178,162],
[172,169,173,160,175,0,177,168],
[168,169,170,158,163,164,0,167],
[172,156,179,174,179,173,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,182,182,179,182,175,170],
[126,0,133,147,153,158,153,153],
[159,208,0,153,186,164,164,174],
[159,194,188,0,172,166,167,173],
[162,188,155,169,0,182,175,177],
[159,183,177,175,159,0,169,173],
[166,188,177,174,166,172,0,186],
[171,188,167,168,164,168,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,188,176,168,187,171,188],
[165,0,159,192,167,182,162,162],
[153,182,0,185,171,178,170,167],
[165,149,156,0,166,179,163,177],
[173,174,170,175,0,189,176,183],
[154,159,163,162,152,0,144,170],
[170,179,171,178,165,197,0,173],
[153,179,174,164,158,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,159,216,128,129,156,189],
[122,0,154,124,93,122,125,250],
[182,187,0,215,187,122,185,246],
[125,217,126,0,125,95,124,158],
[213,248,154,216,0,156,153,219],
[212,219,219,246,185,0,154,249],
[185,216,156,217,188,187,0,282],
[152,91,95,183,122,92,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,174,156,166,166,183,184],
[178,0,170,180,180,168,199,196],
[167,171,0,180,202,178,192,200],
[185,161,161,0,181,172,179,184],
[175,161,139,160,0,161,167,196],
[175,173,163,169,180,0,180,189],
[158,142,149,162,174,161,0,180],
[157,145,141,157,145,152,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,179,193,179,179,191,167],
[142,0,156,188,149,157,172,161],
[162,185,0,200,188,168,186,172],
[148,153,141,0,155,138,160,154],
[162,192,153,186,0,153,177,171],
[162,184,173,203,188,0,197,181],
[150,169,155,181,164,144,0,157],
[174,180,169,187,170,160,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,163,166,170,179,178,154],
[181,0,177,165,164,174,170,159],
[178,164,0,178,167,173,178,166],
[175,176,163,0,178,187,168,179],
[171,177,174,163,0,165,175,167],
[162,167,168,154,176,0,172,159],
[163,171,163,173,166,169,0,156],
[187,182,175,162,174,182,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,163,169,174,152,167,176],
[162,0,146,157,152,173,172,179],
[178,195,0,186,174,186,167,200],
[172,184,155,0,167,159,178,174],
[167,189,167,174,0,168,187,192],
[189,168,155,182,173,0,190,184],
[174,169,174,163,154,151,0,175],
[165,162,141,167,149,157,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,167,178,163,163,174,177],
[181,0,187,165,188,170,173,182],
[174,154,0,179,180,177,177,192],
[163,176,162,0,167,163,171,170],
[178,153,161,174,0,187,181,174],
[178,171,164,178,154,0,177,178],
[167,168,164,170,160,164,0,176],
[164,159,149,171,167,163,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,167,166,169,160,166,158],
[178,0,179,181,180,180,170,177],
[174,162,0,173,175,176,163,157],
[175,160,168,0,180,166,147,154],
[172,161,166,161,0,165,151,158],
[181,161,165,175,176,0,171,169],
[175,171,178,194,190,170,0,173],
[183,164,184,187,183,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,196,162,202,199,187,154],
[146,0,172,166,169,174,137,168],
[145,169,0,173,152,200,166,159],
[179,175,168,0,170,153,162,186],
[139,172,189,171,0,155,156,155],
[142,167,141,188,186,0,176,160],
[154,204,175,179,185,165,0,180],
[187,173,182,155,186,181,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,186,201,178,170,193,189],
[162,0,159,184,170,139,131,173],
[155,182,0,183,195,160,143,187],
[140,157,158,0,186,156,143,176],
[163,171,146,155,0,155,161,177],
[171,202,181,185,186,0,172,162],
[148,210,198,198,180,169,0,210],
[152,168,154,165,164,179,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,177,177,162,163,181,190],
[169,0,142,162,153,152,167,156],
[164,199,0,171,171,163,184,172],
[164,179,170,0,158,173,170,170],
[179,188,170,183,0,178,184,180],
[178,189,178,168,163,0,181,167],
[160,174,157,171,157,160,0,170],
[151,185,169,171,161,174,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,165,187,167,180,176,161],
[155,0,167,166,157,156,155,161],
[176,174,0,186,170,180,167,181],
[154,175,155,0,175,189,161,161],
[174,184,171,166,0,161,160,162],
[161,185,161,152,180,0,159,166],
[165,186,174,180,181,182,0,163],
[180,180,160,180,179,175,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,166,154,158,168,158,147],
[165,0,160,159,154,160,136,153],
[175,181,0,175,151,189,174,176],
[187,182,166,0,153,204,174,163],
[183,187,190,188,0,207,185,169],
[173,181,152,137,134,0,166,158],
[183,205,167,167,156,175,0,168],
[194,188,165,178,172,183,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,182,168,170,170,168,184],
[173,0,183,167,168,170,170,178],
[159,158,0,176,166,164,164,170],
[173,174,165,0,173,163,166,187],
[171,173,175,168,0,166,187,176],
[171,171,177,178,175,0,157,200],
[173,171,177,175,154,184,0,193],
[157,163,171,154,165,141,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,150,186,236,188,154,204],
[171,0,153,187,153,137,157,203],
[191,188,0,189,153,174,140,240],
[155,154,152,0,155,155,153,188],
[105,188,188,186,0,157,172,172],
[153,204,167,186,184,0,170,153],
[187,184,201,188,169,171,0,187],
[137,138,101,153,169,188,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,160,164,153,163,166,195],
[166,0,164,145,165,186,184,173],
[181,177,0,175,142,182,192,217],
[177,196,166,0,189,198,165,174],
[188,176,199,152,0,177,181,167],
[178,155,159,143,164,0,158,169],
[175,157,149,176,160,183,0,172],
[146,168,124,167,174,172,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,170,177,173,179,176],
[169,0,165,166,178,172,180,193],
[170,176,0,182,166,183,181,184],
[171,175,159,0,162,166,193,177],
[164,163,175,179,0,175,186,187],
[168,169,158,175,166,0,179,171],
[162,161,160,148,155,162,0,174],
[165,148,157,164,154,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,172,183,177,172,162,180],
[166,0,161,170,162,143,150,165],
[169,180,0,188,173,175,167,175],
[158,171,153,0,144,155,164,175],
[164,179,168,197,0,179,171,170],
[169,198,166,186,162,0,184,186],
[179,191,174,177,170,157,0,183],
[161,176,166,166,171,155,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,205,167,174,172,176,154],
[167,0,209,177,171,198,180,196],
[136,132,0,135,138,169,150,150],
[174,164,206,0,177,188,187,170],
[167,170,203,164,0,177,171,202],
[169,143,172,153,164,0,152,177],
[165,161,191,154,170,189,0,168],
[187,145,191,171,139,164,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,160,147,172,158,165,146],
[191,0,180,185,171,172,166,168],
[181,161,0,162,163,162,155,160],
[194,156,179,0,175,180,169,172],
[169,170,178,166,0,164,172,160],
[183,169,179,161,177,0,177,176],
[176,175,186,172,169,164,0,165],
[195,173,181,169,181,165,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,168,173,156,166,176,175],
[177,0,188,192,177,167,177,185],
[173,153,0,175,158,159,168,171],
[168,149,166,0,159,171,169,166],
[185,164,183,182,0,174,177,188],
[175,174,182,170,167,0,169,181],
[165,164,173,172,164,172,0,176],
[166,156,170,175,153,160,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,127,181,154,138,147,173],
[180,0,128,179,173,119,183,152],
[214,213,0,179,165,147,181,206],
[160,162,162,0,155,169,121,165],
[187,168,176,186,0,169,186,195],
[203,222,194,172,172,0,200,167],
[194,158,160,220,155,141,0,206],
[168,189,135,176,146,174,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,176,198,181,157,156,160],
[165,0,177,176,175,160,165,169],
[165,164,0,168,165,169,162,158],
[143,165,173,0,173,158,156,174],
[160,166,176,168,0,157,154,156],
[184,181,172,183,184,0,187,166],
[185,176,179,185,187,154,0,174],
[181,172,183,167,185,175,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,169,171,172,194,201,180],
[173,0,186,200,154,190,181,176],
[172,155,0,197,181,197,191,179],
[170,141,144,0,156,170,173,169],
[169,187,160,185,0,195,207,174],
[147,151,144,171,146,0,153,154],
[140,160,150,168,134,188,0,140],
[161,165,162,172,167,187,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,191,162,163,174,179,174],
[178,0,178,184,176,194,177,162],
[150,163,0,163,164,190,177,161],
[179,157,178,0,170,191,179,184],
[178,165,177,171,0,179,164,169],
[167,147,151,150,162,0,162,147],
[162,164,164,162,177,179,0,165],
[167,179,180,157,172,194,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,166,188,181,185,173,181],
[161,0,160,168,159,183,154,165],
[175,181,0,183,152,186,171,186],
[153,173,158,0,165,185,162,174],
[160,182,189,176,0,199,176,193],
[156,158,155,156,142,0,160,159],
[168,187,170,179,165,181,0,192],
[160,176,155,167,148,182,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,212,178,163,177,155,190],
[140,0,144,153,130,96,131,163],
[129,197,0,184,139,139,207,167],
[163,188,157,0,163,207,207,178],
[178,211,202,178,0,141,196,177],
[164,245,202,134,200,0,201,168],
[186,210,134,134,145,140,0,165],
[151,178,174,163,164,173,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,146,165,162,172,132,177],
[163,0,118,157,151,143,154,150],
[195,223,0,168,191,182,173,194],
[176,184,173,0,149,132,133,154],
[179,190,150,192,0,167,167,191],
[169,198,159,209,174,0,185,164],
[209,187,168,208,174,156,0,165],
[164,191,147,187,150,177,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,165,153,151,174,149,171],
[200,0,197,154,180,202,189,192],
[176,144,0,157,164,179,180,166],
[188,187,184,0,170,188,178,189],
[190,161,177,171,0,196,167,173],
[167,139,162,153,145,0,166,154],
[192,152,161,163,174,175,0,172],
[170,149,175,152,168,187,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,156,156,165,158,158,152],
[187,0,173,182,168,176,173,170],
[185,168,0,185,175,164,178,164],
[185,159,156,0,167,162,158,161],
[176,173,166,174,0,156,175,170],
[183,165,177,179,185,0,178,172],
[183,168,163,183,166,163,0,170],
[189,171,177,180,171,169,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,182,151,162,149,166,165],
[181,0,192,185,174,164,173,173],
[159,149,0,155,151,156,151,136],
[190,156,186,0,176,168,176,184],
[179,167,190,165,0,179,165,155],
[192,177,185,173,162,0,173,178],
[175,168,190,165,176,168,0,172],
[176,168,205,157,186,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,181,187,167,165,182,170],
[169,0,164,175,164,184,174,152],
[160,177,0,176,161,176,183,168],
[154,166,165,0,175,154,166,170],
[174,177,180,166,0,179,188,170],
[176,157,165,187,162,0,186,172],
[159,167,158,175,153,155,0,151],
[171,189,173,171,171,169,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,151,156,187,165,169,168],
[180,0,162,151,169,168,177,161],
[190,179,0,181,183,164,186,177],
[185,190,160,0,199,158,174,171],
[154,172,158,142,0,149,157,153],
[176,173,177,183,192,0,179,162],
[172,164,155,167,184,162,0,162],
[173,180,164,170,188,179,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,188,168,160,190,164,165],
[167,0,194,193,178,185,178,179],
[153,147,0,161,144,178,171,151],
[173,148,180,0,159,186,172,159],
[181,163,197,182,0,194,181,162],
[151,156,163,155,147,0,162,135],
[177,163,170,169,160,179,0,158],
[176,162,190,182,179,206,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,174,174,160,178,188,172],
[160,0,151,173,172,149,172,158],
[167,190,0,188,169,158,192,182],
[167,168,153,0,171,174,179,168],
[181,169,172,170,0,184,178,184],
[163,192,183,167,157,0,188,176],
[153,169,149,162,163,153,0,172],
[169,183,159,173,157,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,186,172,200,180,167,174],
[175,0,165,200,188,177,180,167],
[155,176,0,167,175,172,153,164],
[169,141,174,0,186,161,167,177],
[141,153,166,155,0,164,163,158],
[161,164,169,180,177,0,172,162],
[174,161,188,174,178,169,0,151],
[167,174,177,164,183,179,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,158,158,162,169,170,170],
[169,0,148,161,174,169,159,175],
[183,193,0,179,169,180,170,175],
[183,180,162,0,170,176,175,176],
[179,167,172,171,0,170,155,162],
[172,172,161,165,171,0,151,168],
[171,182,171,166,186,190,0,172],
[171,166,166,165,179,173,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,204,184,177,157,152,176],
[194,0,201,205,221,168,183,179],
[137,140,0,159,151,133,132,158],
[157,136,182,0,161,129,141,163],
[164,120,190,180,0,130,147,180],
[184,173,208,212,211,0,152,174],
[189,158,209,200,194,189,0,174],
[165,162,183,178,161,167,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,158,178,169,174,181,170],
[163,0,162,170,170,165,161,157],
[183,179,0,184,171,174,168,177],
[163,171,157,0,163,170,164,171],
[172,171,170,178,0,169,167,174],
[167,176,167,171,172,0,180,161],
[160,180,173,177,174,161,0,172],
[171,184,164,170,167,180,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,161,145,161,159,152,158],
[179,0,179,186,185,168,166,193],
[180,162,0,144,175,148,145,161],
[196,155,197,0,192,188,173,171],
[180,156,166,149,0,168,149,154],
[182,173,193,153,173,0,138,181],
[189,175,196,168,192,203,0,180],
[183,148,180,170,187,160,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,216,197,171,214,226,164],
[97,0,153,166,135,136,119,118],
[125,188,0,149,156,132,148,147],
[144,175,192,0,181,181,183,146],
[170,206,185,160,0,175,179,138],
[127,205,209,160,166,0,192,175],
[115,222,193,158,162,149,0,122],
[177,223,194,195,203,166,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,151,157,202,157,183,181],
[156,0,148,159,187,166,187,183],
[190,193,0,171,190,156,168,171],
[184,182,170,0,199,182,179,181],
[139,154,151,142,0,151,155,151],
[184,175,185,159,190,0,171,187],
[158,154,173,162,186,170,0,159],
[160,158,170,160,190,154,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,165,171,184,174,158,172],
[192,0,202,168,203,186,204,183],
[176,139,0,157,169,151,159,153],
[170,173,184,0,173,165,181,173],
[157,138,172,168,0,179,159,148],
[167,155,190,176,162,0,180,147],
[183,137,182,160,182,161,0,165],
[169,158,188,168,193,194,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,159,169,168,164,166,183],
[165,0,180,173,156,174,153,159],
[182,161,0,179,151,160,165,168],
[172,168,162,0,162,149,166,184],
[173,185,190,179,0,181,168,187],
[177,167,181,192,160,0,171,181],
[175,188,176,175,173,170,0,181],
[158,182,173,157,154,160,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,178,172,168,178,172,155],
[139,0,150,152,177,135,163,162],
[163,191,0,166,145,150,165,173],
[169,189,175,0,172,172,178,182],
[173,164,196,169,0,155,180,170],
[163,206,191,169,186,0,201,155],
[169,178,176,163,161,140,0,174],
[186,179,168,159,171,186,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,161,187,172,196,184,156],
[128,0,144,152,137,152,174,172],
[180,197,0,189,152,173,187,163],
[154,189,152,0,150,185,167,168],
[169,204,189,191,0,200,181,173],
[145,189,168,156,141,0,149,148],
[157,167,154,174,160,192,0,176],
[185,169,178,173,168,193,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,200,188,189,190,181,185],
[171,0,181,151,183,175,178,171],
[141,160,0,159,155,158,164,172],
[153,190,182,0,169,177,168,167],
[152,158,186,172,0,163,160,163],
[151,166,183,164,178,0,177,174],
[160,163,177,173,181,164,0,160],
[156,170,169,174,178,167,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,143,125,139,187,122,138],
[171,0,138,134,147,156,172,158],
[198,203,0,108,158,163,135,179],
[216,207,233,0,208,245,162,184],
[202,194,183,133,0,182,144,175],
[154,185,178,96,159,0,127,190],
[219,169,206,179,197,214,0,219],
[203,183,162,157,166,151,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,186,247,155,156,188,123],
[123,0,124,154,124,93,92,124],
[155,217,0,217,154,187,217,188],
[94,187,124,0,154,125,95,186],
[186,217,187,187,0,125,187,158],
[185,248,154,216,216,0,155,156],
[153,249,124,246,154,186,0,154],
[218,217,153,155,183,185,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,153,154,151,151,177,190],
[178,0,162,177,188,158,189,189],
[188,179,0,171,165,155,189,185],
[187,164,170,0,173,168,187,205],
[190,153,176,168,0,177,167,200],
[190,183,186,173,164,0,188,193],
[164,152,152,154,174,153,0,195],
[151,152,156,136,141,148,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 341, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_8_341.csv", index=False, header=False)
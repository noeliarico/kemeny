
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,455,467,463,446,428,444,448,479,446],
[435,0,458,415,416,437,430,466,461,448],
[423,432,0,407,452,418,382,412,454,436],
[427,475,483,0,434,451,445,458,485,432],
[444,474,438,456,0,445,465,460,486,450],
[462,453,472,439,445,0,430,453,453,435],
[446,460,508,445,425,460,0,436,440,465],
[442,424,478,432,430,437,454,0,454,460],
[411,429,436,405,404,437,450,436,0,411],
[444,442,454,458,440,455,425,430,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,423,458,451,455,468,456,449,467],
[400,0,400,410,362,400,397,428,385,408],
[467,490,0,476,460,419,433,477,476,462],
[432,480,414,0,462,460,469,472,415,486],
[439,528,430,428,0,443,452,468,453,491],
[435,490,471,430,447,0,451,457,442,449],
[422,493,457,421,438,439,0,440,440,482],
[434,462,413,418,422,433,450,0,421,448],
[441,505,414,475,437,448,450,469,0,472],
[423,482,428,404,399,441,408,442,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,383,456,394,379,395,394,390,392],
[464,0,466,486,471,414,428,436,442,412],
[507,424,0,479,433,409,425,449,438,441],
[434,404,411,0,430,384,380,392,402,412],
[496,419,457,460,0,450,460,479,442,445],
[511,476,481,506,440,0,447,507,457,435],
[495,462,465,510,430,443,0,469,471,443],
[496,454,441,498,411,383,421,0,441,418],
[500,448,452,488,448,433,419,449,0,435],
[498,478,449,478,445,455,447,472,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,448,467,456,465,387,486,484,461],
[421,0,418,441,420,446,409,490,454,404],
[442,472,0,433,391,464,409,423,459,426],
[423,449,457,0,443,457,418,516,455,428],
[434,470,499,447,0,461,456,502,530,448],
[425,444,426,433,429,0,410,490,456,450],
[503,481,481,472,434,480,0,533,438,440],
[404,400,467,374,388,400,357,0,415,404],
[406,436,431,435,360,434,452,475,0,422],
[429,486,464,462,442,440,450,486,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,630,665,595,665,551,576,401,522],
[375,0,541,661,536,576,238,403,316,433],
[260,349,0,513,341,569,268,333,334,378],
[225,229,377,0,496,570,319,392,377,471],
[295,354,549,394,0,490,225,290,324,420],
[225,314,321,320,400,0,415,340,320,515],
[339,652,622,571,665,475,0,521,489,522],
[314,487,557,498,600,550,369,0,502,343],
[489,574,556,513,566,570,401,388,0,463],
[368,457,512,419,470,375,368,547,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,423,427,463,424,439,399,444,421],
[486,0,441,471,425,436,470,438,486,472],
[467,449,0,451,455,420,449,433,451,452],
[463,419,439,0,434,435,452,402,457,413],
[427,465,435,456,0,418,453,419,463,423],
[466,454,470,455,472,0,460,414,474,455],
[451,420,441,438,437,430,0,413,459,434],
[491,452,457,488,471,476,477,0,457,442],
[446,404,439,433,427,416,431,433,0,407],
[469,418,438,477,467,435,456,448,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,461,427,439,472,460,439,452,465],
[450,0,425,413,444,460,451,484,459,450],
[429,465,0,392,425,448,423,427,443,450],
[463,477,498,0,438,492,462,479,470,482],
[451,446,465,452,0,447,435,456,452,479],
[418,430,442,398,443,0,432,414,452,450],
[430,439,467,428,455,458,0,448,458,461],
[451,406,463,411,434,476,442,0,425,429],
[438,431,447,420,438,438,432,465,0,466],
[425,440,440,408,411,440,429,461,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,385,480,437,456,533,457,540,395],
[441,0,463,476,456,480,601,544,542,536],
[505,427,0,392,327,399,574,452,419,411],
[410,414,498,0,406,475,588,460,541,434],
[453,434,563,484,0,413,565,484,485,511],
[434,410,491,415,477,0,511,492,416,394],
[357,289,316,302,325,379,0,413,385,347],
[433,346,438,430,406,398,477,0,459,382],
[350,348,471,349,405,474,505,431,0,417],
[495,354,479,456,379,496,543,508,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,430,436,426,432,417,410,435,464],
[455,0,442,436,458,457,438,425,452,489],
[460,448,0,438,445,444,464,435,449,503],
[454,454,452,0,447,450,435,453,448,486],
[464,432,445,443,0,430,430,455,422,450],
[458,433,446,440,460,0,461,435,449,472],
[473,452,426,455,460,429,0,472,453,477],
[480,465,455,437,435,455,418,0,433,497],
[455,438,441,442,468,441,437,457,0,467],
[426,401,387,404,440,418,413,393,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,469,490,472,444,482,418,440,469],
[419,0,456,448,440,391,402,444,413,419],
[421,434,0,479,466,435,437,449,438,437],
[400,442,411,0,427,428,442,418,434,463],
[418,450,424,463,0,440,430,436,429,421],
[446,499,455,462,450,0,452,435,493,461],
[408,488,453,448,460,438,0,453,440,449],
[472,446,441,472,454,455,437,0,464,432],
[450,477,452,456,461,397,450,426,0,451],
[421,471,453,427,469,429,441,458,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,407,432,417,439,442,447,431,441],
[454,0,460,438,441,466,448,452,448,450],
[483,430,0,451,461,465,450,457,478,471],
[458,452,439,0,463,458,477,474,471,484],
[473,449,429,427,0,476,462,476,451,477],
[451,424,425,432,414,0,436,453,425,438],
[448,442,440,413,428,454,0,451,445,432],
[443,438,433,416,414,437,439,0,443,443],
[459,442,412,419,439,465,445,447,0,458],
[449,440,419,406,413,452,458,447,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,422,422,456,479,459,469,492,402],
[433,0,473,419,427,484,442,419,487,412],
[468,417,0,375,474,519,398,474,502,443],
[468,471,515,0,433,464,447,476,485,422],
[434,463,416,457,0,460,421,470,482,430],
[411,406,371,426,430,0,386,447,491,390],
[431,448,492,443,469,504,0,472,487,463],
[421,471,416,414,420,443,418,0,487,381],
[398,403,388,405,408,399,403,403,0,380],
[488,478,447,468,460,500,427,509,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,428,433,421,444,437,442,407,442],
[480,0,439,457,455,448,480,473,438,454],
[462,451,0,445,438,431,456,459,443,467],
[457,433,445,0,439,434,448,458,427,440],
[469,435,452,451,0,446,463,475,456,447],
[446,442,459,456,444,0,443,458,438,461],
[453,410,434,442,427,447,0,444,425,440],
[448,417,431,432,415,432,446,0,430,445],
[483,452,447,463,434,452,465,460,0,467],
[448,436,423,450,443,429,450,445,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,467,458,461,441,464,466,469,461],
[426,0,437,461,457,425,427,442,465,439],
[423,453,0,440,452,418,422,426,449,441],
[432,429,450,0,408,415,445,426,444,434],
[429,433,438,482,0,441,451,436,442,431],
[449,465,472,475,449,0,426,467,470,455],
[426,463,468,445,439,464,0,454,451,438],
[424,448,464,464,454,423,436,0,447,451],
[421,425,441,446,448,420,439,443,0,427],
[429,451,449,456,459,435,452,439,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,442,433,437,440,427,433,417,427],
[451,0,467,469,453,466,440,452,455,447],
[448,423,0,443,448,442,433,447,423,441],
[457,421,447,0,441,454,433,424,408,429],
[453,437,442,449,0,455,438,435,464,449],
[450,424,448,436,435,0,426,417,427,426],
[463,450,457,457,452,464,0,446,435,450],
[457,438,443,466,455,473,444,0,454,441],
[473,435,467,482,426,463,455,436,0,458],
[463,443,449,461,441,464,440,449,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,428,432,485,439,406,437,508,414],
[410,0,411,394,446,466,406,373,413,424],
[462,479,0,430,529,442,371,402,421,395],
[458,496,460,0,479,444,432,422,488,428],
[405,444,361,411,0,411,338,415,440,351],
[451,424,448,446,479,0,367,392,478,420],
[484,484,519,458,552,523,0,403,493,490],
[453,517,488,468,475,498,487,0,428,452],
[382,477,469,402,450,412,397,462,0,457],
[476,466,495,462,539,470,400,438,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,444,461,512,526,411,422,427,491],
[484,0,444,418,499,484,406,474,399,498],
[446,446,0,430,487,494,395,438,359,475],
[429,472,460,0,447,431,452,462,480,506],
[378,391,403,443,0,372,335,382,334,451],
[364,406,396,459,518,0,428,395,366,455],
[479,484,495,438,555,462,0,511,440,481],
[468,416,452,428,508,495,379,0,457,466],
[463,491,531,410,556,524,450,433,0,476],
[399,392,415,384,439,435,409,424,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,472,424,518,414,469,378,450,424],
[446,0,476,447,523,454,457,443,487,448],
[418,414,0,437,463,425,438,450,416,432],
[466,443,453,0,508,409,456,415,464,447],
[372,367,427,382,0,353,382,360,400,424],
[476,436,465,481,537,0,464,414,476,451],
[421,433,452,434,508,426,0,413,429,424],
[512,447,440,475,530,476,477,0,475,450],
[440,403,474,426,490,414,461,415,0,449],
[466,442,458,443,466,439,466,440,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,469,460,470,454,486,421,442,407],
[460,0,485,464,453,451,437,457,428,434],
[421,405,0,452,427,444,452,388,415,415],
[430,426,438,0,445,455,460,446,412,448],
[420,437,463,445,0,457,458,403,428,430],
[436,439,446,435,433,0,464,393,433,409],
[404,453,438,430,432,426,0,440,437,417],
[469,433,502,444,487,497,450,0,433,436],
[448,462,475,478,462,457,453,457,0,415],
[483,456,475,442,460,481,473,454,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,426,445,448,456,432,437,427,469],
[448,0,442,435,457,456,452,431,431,445],
[464,448,0,480,451,444,448,446,451,466],
[445,455,410,0,465,447,456,456,421,453],
[442,433,439,425,0,428,443,440,436,453],
[434,434,446,443,462,0,464,455,426,457],
[458,438,442,434,447,426,0,452,423,459],
[453,459,444,434,450,435,438,0,436,461],
[463,459,439,469,454,464,467,454,0,488],
[421,445,424,437,437,433,431,429,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,500,413,528,528,471,486,526,543],
[432,0,445,456,458,441,442,431,476,478],
[390,445,0,347,456,446,436,472,487,474],
[477,434,543,0,441,486,476,491,494,490],
[362,432,434,449,0,468,447,475,409,525],
[362,449,444,404,422,0,499,456,462,493],
[419,448,454,414,443,391,0,494,448,438],
[404,459,418,399,415,434,396,0,447,422],
[364,414,403,396,481,428,442,443,0,458],
[347,412,416,400,365,397,452,468,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,426,407,427,457,412,445,398,427],
[455,0,439,424,415,442,429,442,415,439],
[464,451,0,446,443,442,447,453,440,456],
[483,466,444,0,454,459,452,462,439,445],
[463,475,447,436,0,467,453,472,447,470],
[433,448,448,431,423,0,445,435,447,454],
[478,461,443,438,437,445,0,449,444,435],
[445,448,437,428,418,455,441,0,414,427],
[492,475,450,451,443,443,446,476,0,473],
[463,451,434,445,420,436,455,463,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,598,514,428,496,575,506,395,430],
[432,0,422,436,329,346,473,467,294,352],
[292,468,0,485,336,366,488,461,339,361],
[376,454,405,0,322,252,406,424,277,356],
[462,561,554,568,0,434,554,500,416,479],
[394,544,524,638,456,0,441,483,369,454],
[315,417,402,484,336,449,0,458,312,308],
[384,423,429,466,390,407,432,0,241,416],
[495,596,551,613,474,521,578,649,0,413],
[460,538,529,534,411,436,582,474,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,428,445,436,444,448,461,461,430],
[450,0,437,442,460,442,441,445,433,452],
[462,453,0,465,461,485,426,446,448,450],
[445,448,425,0,450,483,468,447,449,513],
[454,430,429,440,0,455,433,465,445,441],
[446,448,405,407,435,0,412,424,454,423],
[442,449,464,422,457,478,0,433,459,483],
[429,445,444,443,425,466,457,0,471,457],
[429,457,442,441,445,436,431,419,0,480],
[460,438,440,377,449,467,407,433,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,446,462,478,455,430,471,484,446],
[479,0,478,424,432,471,447,486,453,469],
[444,412,0,436,468,468,416,460,427,450],
[428,466,454,0,448,449,434,464,419,459],
[412,458,422,442,0,450,425,457,471,427],
[435,419,422,441,440,0,409,438,413,451],
[460,443,474,456,465,481,0,479,473,480],
[419,404,430,426,433,452,411,0,440,447],
[406,437,463,471,419,477,417,450,0,481],
[444,421,440,431,463,439,410,443,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,443,477,454,463,449,453,448,433],
[445,0,438,462,450,461,448,449,451,439],
[447,452,0,453,446,448,450,442,469,437],
[413,428,437,0,428,440,425,427,427,417],
[436,440,444,462,0,444,450,432,449,417],
[427,429,442,450,446,0,436,416,446,420],
[441,442,440,465,440,454,0,453,450,436],
[437,441,448,463,458,474,437,0,467,462],
[442,439,421,463,441,444,440,423,0,431],
[457,451,453,473,473,470,454,428,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,482,431,432,458,454,440,469,445],
[437,0,458,434,475,473,467,439,452,449],
[408,432,0,428,438,449,443,417,418,424],
[459,456,462,0,439,457,475,469,467,451],
[458,415,452,451,0,482,455,418,461,419],
[432,417,441,433,408,0,423,401,427,403],
[436,423,447,415,435,467,0,437,439,426],
[450,451,473,421,472,489,453,0,456,447],
[421,438,472,423,429,463,451,434,0,438],
[445,441,466,439,471,487,464,443,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,432,450,459,411,430,460,447,424],
[456,0,431,460,441,463,454,480,449,454],
[458,459,0,444,450,454,449,480,444,421],
[440,430,446,0,454,442,442,485,442,450],
[431,449,440,436,0,440,457,465,439,431],
[479,427,436,448,450,0,448,482,449,440],
[460,436,441,448,433,442,0,469,440,437],
[430,410,410,405,425,408,421,0,426,413],
[443,441,446,448,451,441,450,464,0,427],
[466,436,469,440,459,450,453,477,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,427,462,467,445,455,444,469,456],
[433,0,379,412,419,431,396,404,440,424],
[463,511,0,464,501,426,471,484,481,489],
[428,478,426,0,471,440,436,474,458,442],
[423,471,389,419,0,427,387,436,425,429],
[445,459,464,450,463,0,446,477,455,461],
[435,494,419,454,503,444,0,448,445,469],
[446,486,406,416,454,413,442,0,445,449],
[421,450,409,432,465,435,445,445,0,429],
[434,466,401,448,461,429,421,441,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,445,425,450,430,432,441,482,460],
[473,0,445,468,470,451,477,490,486,458],
[445,445,0,470,442,422,451,444,464,445],
[465,422,420,0,429,422,450,417,473,441],
[440,420,448,461,0,430,427,465,469,436],
[460,439,468,468,460,0,452,492,485,471],
[458,413,439,440,463,438,0,467,471,426],
[449,400,446,473,425,398,423,0,468,450],
[408,404,426,417,421,405,419,422,0,421],
[430,432,445,449,454,419,464,440,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,444,465,435,439,436,441,449,462],
[440,0,445,469,473,504,471,449,464,497],
[446,445,0,449,456,476,446,420,459,472],
[425,421,441,0,463,448,422,438,418,436],
[455,417,434,427,0,461,414,435,448,433],
[451,386,414,442,429,0,453,431,413,443],
[454,419,444,468,476,437,0,402,446,465],
[449,441,470,452,455,459,488,0,481,467],
[441,426,431,472,442,477,444,409,0,440],
[428,393,418,454,457,447,425,423,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,462,436,399,426,433,442,451,417],
[432,0,444,401,419,414,404,443,446,411],
[428,446,0,403,392,471,436,419,428,439],
[454,489,487,0,409,432,452,471,460,456],
[491,471,498,481,0,483,433,513,497,482],
[464,476,419,458,407,0,411,455,472,482],
[457,486,454,438,457,479,0,435,446,436],
[448,447,471,419,377,435,455,0,439,416],
[439,444,462,430,393,418,444,451,0,386],
[473,479,451,434,408,408,454,474,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,435,456,446,468,451,454,489,444],
[446,0,403,416,429,462,444,413,448,425],
[455,487,0,473,431,457,471,457,472,479],
[434,474,417,0,443,457,400,429,469,436],
[444,461,459,447,0,461,443,474,450,427],
[422,428,433,433,429,0,433,426,459,448],
[439,446,419,490,447,457,0,429,472,450],
[436,477,433,461,416,464,461,0,447,457],
[401,442,418,421,440,431,418,443,0,403],
[446,465,411,454,463,442,440,433,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,425,470,483,453,473,509,474,477],
[401,0,429,435,427,432,429,465,453,454],
[465,461,0,479,454,437,459,491,470,457],
[420,455,411,0,435,412,427,475,437,434],
[407,463,436,455,0,436,448,452,459,481],
[437,458,453,478,454,0,444,481,458,478],
[417,461,431,463,442,446,0,459,444,475],
[381,425,399,415,438,409,431,0,440,437],
[416,437,420,453,431,432,446,450,0,474],
[413,436,433,456,409,412,415,453,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,451,452,445,452,475,479,437,461],
[431,0,416,401,405,429,445,425,408,421],
[439,474,0,391,451,466,481,459,444,470],
[438,489,499,0,473,471,476,453,454,457],
[445,485,439,417,0,461,471,466,464,432],
[438,461,424,419,429,0,470,466,446,433],
[415,445,409,414,419,420,0,430,406,420],
[411,465,431,437,424,424,460,0,430,420],
[453,482,446,436,426,444,484,460,0,460],
[429,469,420,433,458,457,470,470,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,438,424,457,470,417,461,430,435],
[452,0,462,460,472,492,449,470,456,409],
[452,428,0,447,480,485,439,496,479,500],
[466,430,443,0,494,489,405,469,465,417],
[433,418,410,396,0,424,425,451,433,405],
[420,398,405,401,466,0,404,442,426,438],
[473,441,451,485,465,486,0,491,504,464],
[429,420,394,421,439,448,399,0,446,385],
[460,434,411,425,457,464,386,444,0,393],
[455,481,390,473,485,452,426,505,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,445,447,460,426,439,444,432,467],
[448,0,434,435,449,445,464,451,445,468],
[445,456,0,460,430,452,490,436,448,495],
[443,455,430,0,462,445,471,435,447,500],
[430,441,460,428,0,420,442,425,451,461],
[464,445,438,445,470,0,471,435,462,490],
[451,426,400,419,448,419,0,422,439,446],
[446,439,454,455,465,455,468,0,439,465],
[458,445,442,443,439,428,451,451,0,461],
[423,422,395,390,429,400,444,425,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,455,429,449,446,453,432,432,432],
[463,0,394,416,464,458,450,430,413,403],
[435,496,0,433,485,467,441,415,421,481],
[461,474,457,0,502,455,458,489,469,435],
[441,426,405,388,0,459,426,465,421,398],
[444,432,423,435,431,0,407,435,427,460],
[437,440,449,432,464,483,0,458,478,482],
[458,460,475,401,425,455,432,0,468,448],
[458,477,469,421,469,463,412,422,0,416],
[458,487,409,455,492,430,408,442,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,413,405,422,405,391,421,422,415],
[474,0,437,439,486,467,416,494,431,464],
[477,453,0,427,460,452,459,469,440,462],
[485,451,463,0,443,440,455,450,456,449],
[468,404,430,447,0,393,426,456,405,434],
[485,423,438,450,497,0,400,456,409,445],
[499,474,431,435,464,490,0,462,405,469],
[469,396,421,440,434,434,428,0,426,427],
[468,459,450,434,485,481,485,464,0,445],
[475,426,428,441,456,445,421,463,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,502,422,480,427,454,455,489,462],
[462,0,480,432,498,432,444,458,517,469],
[388,410,0,386,471,405,416,418,452,412],
[468,458,504,0,497,433,462,463,518,501],
[410,392,419,393,0,400,410,418,446,411],
[463,458,485,457,490,0,446,501,518,441],
[436,446,474,428,480,444,0,465,456,469],
[435,432,472,427,472,389,425,0,474,451],
[401,373,438,372,444,372,434,416,0,440],
[428,421,478,389,479,449,421,439,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,451,450,463,444,452,449,401,444],
[431,0,447,451,419,458,412,452,419,446],
[439,443,0,422,451,430,431,454,431,451],
[440,439,468,0,455,442,430,454,429,439],
[427,471,439,435,0,442,429,466,426,437],
[446,432,460,448,448,0,430,450,427,429],
[438,478,459,460,461,460,0,453,457,453],
[441,438,436,436,424,440,437,0,428,414],
[489,471,459,461,464,463,433,462,0,446],
[446,444,439,451,453,461,437,476,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,325,471,444,480,413,410,324,427],
[462,0,499,533,436,425,567,549,460,495],
[565,391,0,426,541,478,543,419,440,443],
[419,357,464,0,383,477,348,425,356,388],
[446,454,349,507,0,430,472,380,348,441],
[410,465,412,413,460,0,410,433,306,322],
[477,323,347,542,418,480,0,379,282,417],
[480,341,471,465,510,457,511,0,373,372],
[566,430,450,534,542,584,608,517,0,454],
[463,395,447,502,449,568,473,518,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,462,421,455,464,442,456,453,455],
[422,0,464,435,436,467,433,446,427,435],
[428,426,0,419,451,462,420,419,410,431],
[469,455,471,0,459,471,441,454,441,445],
[435,454,439,431,0,444,416,436,423,414],
[426,423,428,419,446,0,427,435,432,423],
[448,457,470,449,474,463,0,451,442,443],
[434,444,471,436,454,455,439,0,427,447],
[437,463,480,449,467,458,448,463,0,451],
[435,455,459,445,476,467,447,443,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,490,511,416,498,471,550,407,453],
[430,0,464,491,423,408,445,496,481,385],
[400,426,0,423,396,464,519,491,417,455],
[379,399,467,0,347,406,435,482,385,404],
[474,467,494,543,0,424,475,528,471,464],
[392,482,426,484,466,0,491,500,445,398],
[419,445,371,455,415,399,0,427,407,381],
[340,394,399,408,362,390,463,0,399,358],
[483,409,473,505,419,445,483,491,0,450],
[437,505,435,486,426,492,509,532,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,390,403,370,417,411,399,438,434],
[478,0,430,420,449,450,482,480,498,451],
[500,460,0,448,436,471,423,440,492,464],
[487,470,442,0,439,415,477,481,454,494],
[520,441,454,451,0,481,494,461,481,462],
[473,440,419,475,409,0,449,448,465,447],
[479,408,467,413,396,441,0,420,436,453],
[491,410,450,409,429,442,470,0,488,422],
[452,392,398,436,409,425,454,402,0,407],
[456,439,426,396,428,443,437,468,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,478,463,415,417,452,446,466,461],
[409,0,454,444,426,446,429,441,448,413],
[412,436,0,476,440,438,464,424,446,442],
[427,446,414,0,391,428,458,426,469,429],
[475,464,450,499,0,439,477,463,474,443],
[473,444,452,462,451,0,454,438,469,449],
[438,461,426,432,413,436,0,460,457,426],
[444,449,466,464,427,452,430,0,477,445],
[424,442,444,421,416,421,433,413,0,409],
[429,477,448,461,447,441,464,445,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,483,447,473,463,444,454,456,467],
[429,0,448,415,455,429,446,429,444,428],
[407,442,0,434,441,446,429,421,442,445],
[443,475,456,0,467,440,449,446,450,467],
[417,435,449,423,0,439,413,415,431,431],
[427,461,444,450,451,0,463,445,453,465],
[446,444,461,441,477,427,0,458,442,454],
[436,461,469,444,475,445,432,0,461,441],
[434,446,448,440,459,437,448,429,0,450],
[423,462,445,423,459,425,436,449,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,472,481,464,428,471,452,447,463],
[436,0,477,452,420,420,450,451,455,461],
[418,413,0,463,454,404,461,437,463,445],
[409,438,427,0,422,409,451,440,446,451],
[426,470,436,468,0,438,465,443,439,464],
[462,470,486,481,452,0,469,455,443,482],
[419,440,429,439,425,421,0,447,440,461],
[438,439,453,450,447,435,443,0,456,440],
[443,435,427,444,451,447,450,434,0,451],
[427,429,445,439,426,408,429,450,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,460,457,435,458,481,453,454,491],
[435,0,442,443,434,426,471,451,394,445],
[430,448,0,469,440,457,493,451,451,447],
[433,447,421,0,454,417,477,438,440,459],
[455,456,450,436,0,440,471,470,437,482],
[432,464,433,473,450,0,486,457,455,465],
[409,419,397,413,419,404,0,454,439,440],
[437,439,439,452,420,433,436,0,453,467],
[436,496,439,450,453,435,451,437,0,464],
[399,445,443,431,408,425,450,423,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,489,434,505,403,440,461,470,364],
[422,0,418,338,506,437,382,484,393,417],
[401,472,0,430,472,355,420,397,370,377],
[456,552,460,0,511,453,537,474,453,439],
[385,384,418,379,0,355,372,330,336,373],
[487,453,535,437,535,0,455,466,435,448],
[450,508,470,353,518,435,0,449,441,397],
[429,406,493,416,560,424,441,0,364,365],
[420,497,520,437,554,455,449,526,0,413],
[526,473,513,451,517,442,493,525,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,458,442,435,440,446,454,434,448],
[419,0,452,457,442,431,423,447,464,453],
[432,438,0,435,448,435,429,463,466,456],
[448,433,455,0,446,462,425,466,441,444],
[455,448,442,444,0,447,425,459,442,448],
[450,459,455,428,443,0,420,446,426,433],
[444,467,461,465,465,470,0,472,476,468],
[436,443,427,424,431,444,418,0,434,433],
[456,426,424,449,448,464,414,456,0,461],
[442,437,434,446,442,457,422,457,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,438,490,419,459,400,462,442,425],
[466,0,474,449,433,467,418,487,437,462],
[452,416,0,472,388,436,430,460,404,381],
[400,441,418,0,405,432,433,455,380,385],
[471,457,502,485,0,473,453,494,435,461],
[431,423,454,458,417,0,432,479,451,424],
[490,472,460,457,437,458,0,479,442,458],
[428,403,430,435,396,411,411,0,381,395],
[448,453,486,510,455,439,448,509,0,429],
[465,428,509,505,429,466,432,495,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,497,457,430,407,469,468,453,503],
[458,0,471,464,386,392,547,541,471,467],
[393,419,0,439,359,476,479,391,392,509],
[433,426,451,0,424,413,475,451,512,471],
[460,504,531,466,0,453,428,478,515,522],
[483,498,414,477,437,0,509,537,483,472],
[421,343,411,415,462,381,0,438,449,413],
[422,349,499,439,412,353,452,0,469,493],
[437,419,498,378,375,407,441,421,0,457],
[387,423,381,419,368,418,477,397,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,469,468,467,429,439,478,488,466],
[408,0,381,418,430,413,412,454,414,447],
[421,509,0,457,471,462,425,466,446,482],
[422,472,433,0,434,409,468,480,442,397],
[423,460,419,456,0,425,421,491,468,436],
[461,477,428,481,465,0,467,470,483,483],
[451,478,465,422,469,423,0,471,474,450],
[412,436,424,410,399,420,419,0,413,449],
[402,476,444,448,422,407,416,477,0,445],
[424,443,408,493,454,407,440,441,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,458,480,381,458,482,449,436,473],
[483,0,456,487,437,451,440,458,462,452],
[432,434,0,468,391,386,449,441,443,444],
[410,403,422,0,427,398,440,399,456,479],
[509,453,499,463,0,438,529,469,431,479],
[432,439,504,492,452,0,519,529,435,489],
[408,450,441,450,361,371,0,403,444,447],
[441,432,449,491,421,361,487,0,435,483],
[454,428,447,434,459,455,446,455,0,481],
[417,438,446,411,411,401,443,407,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,377,400,396,361,447,396,386,393,490],
[513,0,416,434,407,440,421,439,390,433],
[490,474,0,402,404,413,427,441,402,491],
[494,456,488,0,447,433,483,482,418,505],
[529,483,486,443,0,412,505,470,497,512],
[443,450,477,457,478,0,469,431,523,493],
[494,469,463,407,385,421,0,476,474,479],
[504,451,449,408,420,459,414,0,490,471],
[497,500,488,472,393,367,416,400,0,547],
[400,457,399,385,378,397,411,419,343,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,375,472,443,530,448,515,487,421,453],
[515,0,456,415,564,435,483,464,492,438],
[418,434,0,445,481,422,388,451,428,436],
[447,475,445,0,488,453,477,427,484,456],
[360,326,409,402,0,387,395,378,349,373],
[442,455,468,437,503,0,473,429,491,410],
[375,407,502,413,495,417,0,440,391,371],
[403,426,439,463,512,461,450,0,357,436],
[469,398,462,406,541,399,499,533,0,401],
[437,452,454,434,517,480,519,454,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,534,519,499,434,448,518,499,457,430],
[356,0,479,415,431,421,452,439,402,371],
[371,411,0,432,384,384,446,426,426,407],
[391,475,458,0,408,463,457,437,483,407],
[456,459,506,482,0,443,550,469,481,445],
[442,469,506,427,447,0,477,469,473,446],
[372,438,444,433,340,413,0,434,378,365],
[391,451,464,453,421,421,456,0,434,429],
[433,488,464,407,409,417,512,456,0,418],
[460,519,483,483,445,444,525,461,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,448,442,439,435,433,468,436,448],
[455,0,453,473,437,434,452,450,439,475],
[442,437,0,459,450,445,455,447,445,474],
[448,417,431,0,432,437,438,449,442,488],
[451,453,440,458,0,433,443,439,429,464],
[455,456,445,453,457,0,448,463,450,470],
[457,438,435,452,447,442,0,460,447,476],
[422,440,443,441,451,427,430,0,437,462],
[454,451,445,448,461,440,443,453,0,462],
[442,415,416,402,426,420,414,428,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,445,416,436,457,456,469,474,443],
[407,0,458,361,452,442,422,424,436,451],
[445,432,0,388,454,459,434,445,453,410],
[474,529,502,0,469,484,485,494,464,418],
[454,438,436,421,0,421,459,394,449,442],
[433,448,431,406,469,0,408,439,460,420],
[434,468,456,405,431,482,0,456,431,443],
[421,466,445,396,496,451,434,0,487,434],
[416,454,437,426,441,430,459,403,0,428],
[447,439,480,472,448,470,447,456,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,426,411,477,428,431,481,445,423],
[451,0,397,460,451,411,452,455,457,410],
[464,493,0,420,490,477,496,469,492,444],
[479,430,470,0,491,464,479,490,493,448],
[413,439,400,399,0,420,459,454,449,383],
[462,479,413,426,470,0,448,479,441,443],
[459,438,394,411,431,442,0,454,447,402],
[409,435,421,400,436,411,436,0,427,401],
[445,433,398,397,441,449,443,463,0,435],
[467,480,446,442,507,447,488,489,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,461,473,433,421,458,472,509,499],
[446,0,456,478,500,433,491,460,486,506],
[429,434,0,463,472,398,431,488,479,475],
[417,412,427,0,449,385,476,465,464,439],
[457,390,418,441,0,444,420,505,483,462],
[469,457,492,505,446,0,453,542,475,443],
[432,399,459,414,470,437,0,480,465,436],
[418,430,402,425,385,348,410,0,425,407],
[381,404,411,426,407,415,425,465,0,408],
[391,384,415,451,428,447,454,483,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,416,447,422,483,457,485,435,439],
[413,0,403,403,433,459,422,496,458,448],
[474,487,0,448,465,477,427,450,457,454],
[443,487,442,0,487,487,458,506,474,475],
[468,457,425,403,0,432,435,489,461,464],
[407,431,413,403,458,0,427,485,449,454],
[433,468,463,432,455,463,0,494,473,481],
[405,394,440,384,401,405,396,0,409,393],
[455,432,433,416,429,441,417,481,0,448],
[451,442,436,415,426,436,409,497,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,451,451,449,454,428,450,444,466],
[448,0,474,444,441,492,407,459,426,462],
[439,416,0,454,429,449,421,451,416,472],
[439,446,436,0,428,445,446,465,446,458],
[441,449,461,462,0,463,441,473,440,454],
[436,398,441,445,427,0,414,442,433,437],
[462,483,469,444,449,476,0,459,479,491],
[440,431,439,425,417,448,431,0,432,443],
[446,464,474,444,450,457,411,458,0,449],
[424,428,418,432,436,453,399,447,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,419,468,446,451,446,399,428,438],
[433,0,430,443,483,441,447,412,408,437],
[471,460,0,436,474,451,427,432,447,452],
[422,447,454,0,488,472,466,438,425,421],
[444,407,416,402,0,460,407,404,410,408],
[439,449,439,418,430,0,421,392,421,407],
[444,443,463,424,483,469,0,437,450,439],
[491,478,458,452,486,498,453,0,458,442],
[462,482,443,465,480,469,440,432,0,438],
[452,453,438,469,482,483,451,448,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,427,455,429,457,417,435,448,456],
[428,0,435,433,435,447,422,455,453,445],
[463,455,0,451,462,425,441,448,453,459],
[435,457,439,0,444,461,446,464,456,440],
[461,455,428,446,0,437,413,444,439,445],
[433,443,465,429,453,0,409,452,445,431],
[473,468,449,444,477,481,0,468,464,474],
[455,435,442,426,446,438,422,0,454,429],
[442,437,437,434,451,445,426,436,0,447],
[434,445,431,450,445,459,416,461,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,448,490,443,457,438,431,440,455],
[430,0,443,491,440,477,456,429,441,440],
[442,447,0,465,437,471,430,408,476,454],
[400,399,425,0,459,455,398,387,430,429],
[447,450,453,431,0,464,454,421,451,459],
[433,413,419,435,426,0,411,369,428,442],
[452,434,460,492,436,479,0,457,472,458],
[459,461,482,503,469,521,433,0,458,516],
[450,449,414,460,439,462,418,432,0,473],
[435,450,436,461,431,448,432,374,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,461,457,505,420,429,480,454,428],
[445,0,461,478,482,451,445,470,460,450],
[429,429,0,478,493,435,445,451,447,435],
[433,412,412,0,462,442,392,462,442,425],
[385,408,397,428,0,395,386,416,415,408],
[470,439,455,448,495,0,426,444,452,446],
[461,445,445,498,504,464,0,465,492,473],
[410,420,439,428,474,446,425,0,440,432],
[436,430,443,448,475,438,398,450,0,431],
[462,440,455,465,482,444,417,458,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,449,427,452,441,475,460,455,458],
[456,0,472,428,437,470,480,435,456,472],
[441,418,0,415,430,431,450,437,446,450],
[463,462,475,0,452,481,467,464,469,426],
[438,453,460,438,0,443,451,451,467,470],
[449,420,459,409,447,0,473,454,435,441],
[415,410,440,423,439,417,0,454,442,453],
[430,455,453,426,439,436,436,0,446,445],
[435,434,444,421,423,455,448,444,0,451],
[432,418,440,464,420,449,437,445,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,433,461,500,481,472,451,488,480],
[422,0,431,412,460,393,486,445,450,454],
[457,459,0,421,475,437,411,436,467,439],
[429,478,469,0,439,486,486,428,459,494],
[390,430,415,451,0,406,439,434,457,453],
[409,497,453,404,484,0,466,421,456,462],
[418,404,479,404,451,424,0,411,424,458],
[439,445,454,462,456,469,479,0,470,496],
[402,440,423,431,433,434,466,420,0,430],
[410,436,451,396,437,428,432,394,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,475,453,426,439,448,415,444,405],
[457,0,472,456,454,465,459,442,463,394],
[415,418,0,394,414,424,410,403,413,393],
[437,434,496,0,441,448,444,431,424,404],
[464,436,476,449,0,436,421,428,405,430],
[451,425,466,442,454,0,429,436,410,437],
[442,431,480,446,469,461,0,462,461,442],
[475,448,487,459,462,454,428,0,456,457],
[446,427,477,466,485,480,429,434,0,424],
[485,496,497,486,460,453,448,433,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,417,472,455,422,432,412,446,433],
[446,0,434,452,451,421,438,436,446,442],
[473,456,0,484,490,456,444,446,465,469],
[418,438,406,0,437,422,425,417,448,431],
[435,439,400,453,0,432,446,445,460,455],
[468,469,434,468,458,0,453,450,459,463],
[458,452,446,465,444,437,0,452,462,468],
[478,454,444,473,445,440,438,0,443,423],
[444,444,425,442,430,431,428,447,0,442],
[457,448,421,459,435,427,422,467,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,409,395,419,428,386,419,401,406],
[470,0,437,460,467,466,431,442,422,449],
[481,453,0,473,449,494,473,462,436,460],
[495,430,417,0,442,472,450,461,431,436],
[471,423,441,448,0,446,432,425,425,419],
[462,424,396,418,444,0,412,424,429,428],
[504,459,417,440,458,478,0,457,456,449],
[471,448,428,429,465,466,433,0,459,443],
[489,468,454,459,465,461,434,431,0,449],
[484,441,430,454,471,462,441,447,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,405,415,418,425,409,417,415,427],
[419,0,445,434,451,438,450,435,443,437],
[485,445,0,430,454,432,473,461,470,455],
[475,456,460,0,434,463,431,463,480,437],
[472,439,436,456,0,454,456,478,470,431],
[465,452,458,427,436,0,454,469,456,443],
[481,440,417,459,434,436,0,437,475,419],
[473,455,429,427,412,421,453,0,444,413],
[475,447,420,410,420,434,415,446,0,397],
[463,453,435,453,459,447,471,477,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,348,404,428,481,433,401,444,477,444],
[542,0,470,503,493,495,442,487,494,468],
[486,420,0,477,479,482,400,435,440,450],
[462,387,413,0,473,467,434,454,431,427],
[409,397,411,417,0,422,422,436,429,424],
[457,395,408,423,468,0,447,458,430,426],
[489,448,490,456,468,443,0,476,450,474],
[446,403,455,436,454,432,414,0,448,416],
[413,396,450,459,461,460,440,442,0,385],
[446,422,440,463,466,464,416,474,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,437,429,450,472,454,408,440,451],
[488,0,472,472,471,486,498,462,429,464],
[453,418,0,406,419,446,415,431,431,453],
[461,418,484,0,422,464,483,445,449,431],
[440,419,471,468,0,446,449,437,457,449],
[418,404,444,426,444,0,443,423,437,407],
[436,392,475,407,441,447,0,420,432,472],
[482,428,459,445,453,467,470,0,482,469],
[450,461,459,441,433,453,458,408,0,474],
[439,426,437,459,441,483,418,421,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,401,450,485,509,455,452,456,415,528],
[489,0,487,480,555,477,442,466,512,509],
[440,403,0,504,488,376,371,362,448,418],
[405,410,386,0,444,341,313,369,371,429],
[381,335,402,446,0,394,372,345,411,331],
[435,413,514,549,496,0,400,447,494,498],
[438,448,519,577,518,490,0,452,461,494],
[434,424,528,521,545,443,438,0,508,495],
[475,378,442,519,479,396,429,382,0,437],
[362,381,472,461,559,392,396,395,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,497,489,490,441,499,432,444,518],
[388,0,479,454,449,468,440,419,407,469],
[393,411,0,456,442,392,451,410,433,393],
[401,436,434,0,437,400,471,426,408,433],
[400,441,448,453,0,391,481,431,350,368],
[449,422,498,490,499,0,484,384,448,412],
[391,450,439,419,409,406,0,393,370,382],
[458,471,480,464,459,506,497,0,452,442],
[446,483,457,482,540,442,520,438,0,431],
[372,421,497,457,522,478,508,448,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,441,437,425,462,426,432,415,391],
[477,0,409,427,418,459,488,474,483,461],
[449,481,0,421,406,463,468,400,456,428],
[453,463,469,0,408,466,429,441,452,434],
[465,472,484,482,0,424,454,445,458,412],
[428,431,427,424,466,0,443,418,386,406],
[464,402,422,461,436,447,0,454,419,390],
[458,416,490,449,445,472,436,0,446,420],
[475,407,434,438,432,504,471,444,0,437],
[499,429,462,456,478,484,500,470,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,462,439,468,480,468,442,450,465],
[437,0,434,418,456,440,463,451,414,436],
[428,456,0,438,451,455,471,441,426,450],
[451,472,452,0,467,488,460,454,438,439],
[422,434,439,423,0,416,452,408,433,443],
[410,450,435,402,474,0,438,436,430,411],
[422,427,419,430,438,452,0,422,404,434],
[448,439,449,436,482,454,468,0,444,447],
[440,476,464,452,457,460,486,446,0,470],
[425,454,440,451,447,479,456,443,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,439,449,414,418,406,425,401,425],
[460,0,462,463,431,436,399,444,408,430],
[451,428,0,442,413,474,417,439,413,450],
[441,427,448,0,417,444,406,423,395,401],
[476,459,477,473,0,465,443,472,447,470],
[472,454,416,446,425,0,423,437,410,435],
[484,491,473,484,447,467,0,432,445,476],
[465,446,451,467,418,453,458,0,454,452],
[489,482,477,495,443,480,445,436,0,470],
[465,460,440,489,420,455,414,438,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,431,407,424,433,424,387,385,396],
[457,0,420,472,450,439,439,430,443,425],
[459,470,0,462,475,456,453,433,424,423],
[483,418,428,0,443,446,435,435,433,422],
[466,440,415,447,0,434,404,389,421,395],
[457,451,434,444,456,0,444,403,424,395],
[466,451,437,455,486,446,0,449,474,457],
[503,460,457,455,501,487,441,0,468,462],
[505,447,466,457,469,466,416,422,0,444],
[494,465,467,468,495,495,433,428,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,468,462,450,466,440,438,466,459],
[450,0,427,467,445,466,453,428,454,445],
[422,463,0,459,432,496,433,437,448,477],
[428,423,431,0,453,415,404,433,482,455],
[440,445,458,437,0,452,436,415,441,451],
[424,424,394,475,438,0,425,416,415,436],
[450,437,457,486,454,465,0,464,469,461],
[452,462,453,457,475,474,426,0,452,471],
[424,436,442,408,449,475,421,438,0,448],
[431,445,413,435,439,454,429,419,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,455,446,431,452,446,452,445,457],
[378,0,413,396,395,422,414,410,387,402],
[435,477,0,430,440,440,439,456,442,437],
[444,494,460,0,451,441,450,440,442,445],
[459,495,450,439,0,452,448,459,451,446],
[438,468,450,449,438,0,414,459,424,434],
[444,476,451,440,442,476,0,440,428,416],
[438,480,434,450,431,431,450,0,436,444],
[445,503,448,448,439,466,462,454,0,439],
[433,488,453,445,444,456,474,446,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,439,441,435,399,400,410,434,403],
[433,0,435,478,424,377,405,389,345,332],
[451,455,0,486,459,477,427,389,505,534],
[449,412,404,0,393,363,374,334,362,359],
[455,466,431,497,0,505,363,379,371,404],
[491,513,413,527,385,0,399,425,465,377],
[490,485,463,516,527,491,0,457,366,455],
[480,501,501,556,511,465,433,0,415,361],
[456,545,385,528,519,425,524,475,0,432],
[487,558,356,531,486,513,435,529,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,398,419,434,403,403,415,414,436],
[463,0,388,424,415,415,448,424,431,431],
[492,502,0,442,415,436,437,450,427,482],
[471,466,448,0,441,444,435,466,452,468],
[456,475,475,449,0,426,463,468,468,479],
[487,475,454,446,464,0,432,453,433,482],
[487,442,453,455,427,458,0,448,445,484],
[475,466,440,424,422,437,442,0,435,462],
[476,459,463,438,422,457,445,455,0,460],
[454,459,408,422,411,408,406,428,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,452,533,488,491,539,390,445,410],
[386,0,258,334,539,513,371,364,373,427],
[438,632,0,415,662,640,460,561,474,600],
[357,556,475,0,637,649,354,361,381,387],
[402,351,228,253,0,550,499,300,382,242],
[399,377,250,241,340,0,406,336,182,256],
[351,519,430,536,391,484,0,449,292,414],
[500,526,329,529,590,554,441,0,413,355],
[445,517,416,509,508,708,598,477,0,457],
[480,463,290,503,648,634,476,535,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,451,414,376,453,455,471,461,372],
[388,0,423,418,398,444,425,436,428,372],
[439,467,0,438,394,454,403,452,471,447],
[476,472,452,0,399,500,455,487,462,404],
[514,492,496,491,0,499,437,488,446,442],
[437,446,436,390,391,0,428,460,420,402],
[435,465,487,435,453,462,0,476,407,443],
[419,454,438,403,402,430,414,0,473,431],
[429,462,419,428,444,470,483,417,0,416],
[518,518,443,486,448,488,447,459,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,465,410,452,476,456,430,430,454],
[429,0,454,436,458,456,406,454,457,468],
[425,436,0,418,440,455,429,442,394,453],
[480,454,472,0,466,498,431,444,464,487],
[438,432,450,424,0,464,406,472,444,451],
[414,434,435,392,426,0,386,400,388,448],
[434,484,461,459,484,504,0,447,457,473],
[460,436,448,446,418,490,443,0,453,437],
[460,433,496,426,446,502,433,437,0,475],
[436,422,437,403,439,442,417,453,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,441,420,416,467,452,460,486,456],
[468,0,489,433,465,463,481,426,500,430],
[449,401,0,414,420,439,461,437,477,425],
[470,457,476,0,433,430,445,449,491,460],
[474,425,470,457,0,482,441,452,489,482],
[423,427,451,460,408,0,455,451,473,433],
[438,409,429,445,449,435,0,440,475,439],
[430,464,453,441,438,439,450,0,474,460],
[404,390,413,399,401,417,415,416,0,410],
[434,460,465,430,408,457,451,430,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,538,440,462,464,420,461,470,374],
[468,0,517,467,488,517,469,473,479,440],
[352,373,0,377,420,461,375,405,358,345],
[450,423,513,0,484,478,405,456,462,410],
[428,402,470,406,0,492,421,419,442,394],
[426,373,429,412,398,0,408,425,438,325],
[470,421,515,485,469,482,0,438,455,442],
[429,417,485,434,471,465,452,0,456,408],
[420,411,532,428,448,452,435,434,0,449],
[516,450,545,480,496,565,448,482,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,494,407,447,408,387,408,420,439],
[492,0,501,413,502,440,381,439,432,430],
[396,389,0,352,429,392,369,372,414,352],
[483,477,538,0,498,463,438,446,479,423],
[443,388,461,392,0,427,373,327,420,426],
[482,450,498,427,463,0,407,395,447,437],
[503,509,521,452,517,483,0,436,468,430],
[482,451,518,444,563,495,454,0,468,487],
[470,458,476,411,470,443,422,422,0,380],
[451,460,538,467,464,453,460,403,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,437,460,459,417,418,439,416,435],
[434,0,424,449,464,430,456,437,441,435],
[453,466,0,463,441,434,445,468,422,445],
[430,441,427,0,412,405,457,427,396,434],
[431,426,449,478,0,465,449,465,452,426],
[473,460,456,485,425,0,468,434,431,481],
[472,434,445,433,441,422,0,454,425,466],
[451,453,422,463,425,456,436,0,428,439],
[474,449,468,494,438,459,465,462,0,448],
[455,455,445,456,464,409,424,451,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,462,442,447,499,410,483,454,449],
[408,0,480,491,463,456,444,494,433,464],
[428,410,0,449,428,444,421,432,387,387],
[448,399,441,0,427,435,435,453,403,435],
[443,427,462,463,0,465,484,465,441,440],
[391,434,446,455,425,0,447,456,430,418],
[480,446,469,455,406,443,0,464,459,449],
[407,396,458,437,425,434,426,0,413,410],
[436,457,503,487,449,460,431,477,0,425],
[441,426,503,455,450,472,441,480,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,438,447,420,462,443,447,432,466],
[438,0,437,477,450,446,456,443,461,472],
[452,453,0,449,459,427,460,449,443,447],
[443,413,441,0,437,441,445,451,415,447],
[470,440,431,453,0,453,462,465,479,458],
[428,444,463,449,437,0,460,430,426,439],
[447,434,430,445,428,430,0,446,442,451],
[443,447,441,439,425,460,444,0,450,463],
[458,429,447,475,411,464,448,440,0,445],
[424,418,443,443,432,451,439,427,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,451,448,447,442,470,453,464,435],
[442,0,444,458,457,433,462,465,452,437],
[439,446,0,460,462,456,470,461,456,447],
[442,432,430,0,446,425,461,455,454,442],
[443,433,428,444,0,432,462,454,451,427],
[448,457,434,465,458,0,477,463,481,440],
[420,428,420,429,428,413,0,430,439,423],
[437,425,429,435,436,427,460,0,463,436],
[426,438,434,436,439,409,451,427,0,439],
[455,453,443,448,463,450,467,454,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,444,452,463,453,453,451,454,441],
[434,0,433,434,426,424,439,444,421,426],
[446,457,0,452,464,442,464,455,433,454],
[438,456,438,0,451,446,454,446,444,450],
[427,464,426,439,0,425,457,444,447,447],
[437,466,448,444,465,0,459,456,443,447],
[437,451,426,436,433,431,0,448,438,443],
[439,446,435,444,446,434,442,0,428,456],
[436,469,457,446,443,447,452,462,0,451],
[449,464,436,440,443,443,447,434,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,291,328,406,461,406,322,408,425],
[481,0,314,408,521,397,385,367,393,311],
[599,576,0,534,595,559,504,389,470,455],
[562,482,356,0,525,461,389,457,478,456],
[484,369,295,365,0,479,462,320,439,385],
[429,493,331,429,411,0,493,425,459,339],
[484,505,386,501,428,397,0,354,384,380],
[568,523,501,433,570,465,536,0,341,449],
[482,497,420,412,451,431,506,549,0,420],
[465,579,435,434,505,551,510,441,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,446,453,434,436,418,453,483,436],
[419,0,431,444,423,426,426,447,452,444],
[444,459,0,453,402,424,400,448,439,438],
[437,446,437,0,425,432,448,440,464,429],
[456,467,488,465,0,471,445,473,457,468],
[454,464,466,458,419,0,418,447,474,455],
[472,464,490,442,445,472,0,455,490,476],
[437,443,442,450,417,443,435,0,463,433],
[407,438,451,426,433,416,400,427,0,425],
[454,446,452,461,422,435,414,457,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,368,466,408,437,403,414,373,379,418],
[522,0,470,416,511,516,445,454,468,492],
[424,420,0,461,481,471,445,524,447,506],
[482,474,429,0,405,468,421,502,424,422],
[453,379,409,485,0,475,343,472,435,387],
[487,374,419,422,415,0,410,492,496,437],
[476,445,445,469,547,480,0,453,471,407],
[517,436,366,388,418,398,437,0,428,437],
[511,422,443,466,455,394,419,462,0,393],
[472,398,384,468,503,453,483,453,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,456,500,471,438,475,454,454,479],
[433,0,433,478,444,446,443,419,440,456],
[434,457,0,478,446,478,501,452,492,487],
[390,412,412,0,421,438,438,396,452,442],
[419,446,444,469,0,429,474,402,488,499],
[452,444,412,452,461,0,456,435,472,472],
[415,447,389,452,416,434,0,405,454,443],
[436,471,438,494,488,455,485,0,489,487],
[436,450,398,438,402,418,436,401,0,455],
[411,434,403,448,391,418,447,403,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,420,438,430,424,419,443,445,453],
[472,0,447,466,441,447,458,443,470,448],
[470,443,0,440,420,435,445,446,429,467],
[452,424,450,0,416,434,441,440,429,452],
[460,449,470,474,0,446,460,433,432,471],
[466,443,455,456,444,0,427,449,444,439],
[471,432,445,449,430,463,0,454,464,498],
[447,447,444,450,457,441,436,0,459,470],
[445,420,461,461,458,446,426,431,0,470],
[437,442,423,438,419,451,392,420,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,432,420,434,420,455,393,416,425],
[442,0,447,425,445,430,468,435,442,451],
[458,443,0,448,450,425,443,442,451,441],
[470,465,442,0,448,433,460,446,455,443],
[456,445,440,442,0,427,441,432,417,434],
[470,460,465,457,463,0,473,432,471,447],
[435,422,447,430,449,417,0,443,433,422],
[497,455,448,444,458,458,447,0,443,461],
[474,448,439,435,473,419,457,447,0,419],
[465,439,449,447,456,443,468,429,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,361,519,530,326,447,424,448,424,372],
[529,0,536,566,470,404,597,573,490,536],
[371,354,0,449,300,395,356,478,461,320],
[360,324,441,0,306,486,285,317,410,326],
[564,420,590,584,0,432,387,550,493,319],
[443,486,495,404,458,0,424,540,529,465],
[466,293,534,605,503,466,0,600,556,272],
[442,317,412,573,340,350,290,0,374,345],
[466,400,429,480,397,361,334,516,0,258],
[518,354,570,564,571,425,618,545,632,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,558,493,496,528,419,497,497,506,560],
[332,0,493,338,358,423,327,516,347,362],
[397,397,0,440,430,471,439,425,483,453],
[394,552,450,0,434,424,327,552,470,432],
[362,532,460,456,0,364,278,393,472,393],
[471,467,419,466,526,0,420,417,459,579],
[393,563,451,563,612,470,0,538,485,671],
[393,374,465,338,497,473,352,0,441,440],
[384,543,407,420,418,431,405,449,0,503],
[330,528,437,458,497,311,219,450,387,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,463,524,487,462,477,448,451,411],
[367,0,470,501,497,435,452,454,366,423],
[427,420,0,438,462,429,454,408,413,395],
[366,389,452,0,466,492,442,482,424,426],
[403,393,428,424,0,485,456,442,417,422],
[428,455,461,398,405,0,440,430,370,396],
[413,438,436,448,434,450,0,481,399,452],
[442,436,482,408,448,460,409,0,350,433],
[439,524,477,466,473,520,491,540,0,450],
[479,467,495,464,468,494,438,457,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,441,458,484,452,448,451,447,459],
[446,0,458,454,467,428,447,460,463,470],
[449,432,0,444,438,417,455,432,442,444],
[432,436,446,0,445,430,429,416,468,436],
[406,423,452,445,0,412,428,424,444,429],
[438,462,473,460,478,0,458,441,457,449],
[442,443,435,461,462,432,0,455,444,457],
[439,430,458,474,466,449,435,0,452,461],
[443,427,448,422,446,433,446,438,0,454],
[431,420,446,454,461,441,433,429,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,475,456,491,463,468,444,479,467],
[420,0,459,424,449,396,447,417,439,440],
[415,431,0,444,465,419,460,430,464,426],
[434,466,446,0,469,452,456,467,468,456],
[399,441,425,421,0,408,454,396,458,427],
[427,494,471,438,482,0,478,443,490,471],
[422,443,430,434,436,412,0,403,449,444],
[446,473,460,423,494,447,487,0,483,466],
[411,451,426,422,432,400,441,407,0,439],
[423,450,464,434,463,419,446,424,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,450,456,434,454,447,461,457,419],
[440,0,459,442,438,440,469,467,463,435],
[440,431,0,432,422,445,450,451,450,426],
[434,448,458,0,406,460,475,447,450,421],
[456,452,468,484,0,450,454,490,452,433],
[436,450,445,430,440,0,453,460,433,411],
[443,421,440,415,436,437,0,450,427,415],
[429,423,439,443,400,430,440,0,418,449],
[433,427,440,440,438,457,463,472,0,410],
[471,455,464,469,457,479,475,441,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,391,422,417,481,460,430,411,439],
[472,0,416,410,409,454,452,411,445,460],
[499,474,0,469,460,467,491,442,479,471],
[468,480,421,0,463,457,469,443,481,480],
[473,481,430,427,0,483,485,454,464,459],
[409,436,423,433,407,0,451,408,453,416],
[430,438,399,421,405,439,0,411,427,444],
[460,479,448,447,436,482,479,0,471,506],
[479,445,411,409,426,437,463,419,0,459],
[451,430,419,410,431,474,446,384,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,453,416,454,462,445,427,437,413],
[441,0,430,408,430,441,445,446,419,446],
[437,460,0,425,455,450,437,450,442,433],
[474,482,465,0,437,474,481,451,460,448],
[436,460,435,453,0,468,455,439,466,434],
[428,449,440,416,422,0,446,430,438,438],
[445,445,453,409,435,444,0,435,445,430],
[463,444,440,439,451,460,455,0,447,437],
[453,471,448,430,424,452,445,443,0,441],
[477,444,457,442,456,452,460,453,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,438,410,474,441,467,444,497,463],
[415,0,541,441,454,486,473,434,476,502],
[452,349,0,415,442,422,420,394,458,392],
[480,449,475,0,433,447,487,478,495,440],
[416,436,448,457,0,428,446,405,435,448],
[449,404,468,443,462,0,437,443,464,511],
[423,417,470,403,444,453,0,459,451,460],
[446,456,496,412,485,447,431,0,464,448],
[393,414,432,395,455,426,439,426,0,457],
[427,388,498,450,442,379,430,442,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,433,440,434,444,431,441,458,452],
[450,0,431,431,431,456,457,466,458,453],
[457,459,0,458,434,462,445,467,468,446],
[450,459,432,0,450,470,465,479,454,457],
[456,459,456,440,0,467,459,490,453,469],
[446,434,428,420,423,0,420,465,440,462],
[459,433,445,425,431,470,0,472,427,448],
[449,424,423,411,400,425,418,0,414,452],
[432,432,422,436,437,450,463,476,0,452],
[438,437,444,433,421,428,442,438,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,423,443,430,443,409,441,442,434],
[435,0,462,437,445,446,417,461,457,430],
[467,428,0,449,444,450,436,437,459,419],
[447,453,441,0,448,449,449,436,471,445],
[460,445,446,442,0,449,413,459,482,409],
[447,444,440,441,441,0,431,434,465,417],
[481,473,454,441,477,459,0,451,492,428],
[449,429,453,454,431,456,439,0,461,450],
[448,433,431,419,408,425,398,429,0,424],
[456,460,471,445,481,473,462,440,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,495,438,462,450,445,427,457,430],
[437,0,475,397,468,440,415,443,476,407],
[395,415,0,407,422,440,414,420,436,441],
[452,493,483,0,462,433,468,463,494,442],
[428,422,468,428,0,429,427,402,455,423],
[440,450,450,457,461,0,438,439,457,440],
[445,475,476,422,463,452,0,431,451,444],
[463,447,470,427,488,451,459,0,483,453],
[433,414,454,396,435,433,439,407,0,429],
[460,483,449,448,467,450,446,437,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,451,439,450,463,430,444,451,452],
[421,0,441,421,417,432,408,425,443,441],
[439,449,0,435,438,478,432,441,445,459],
[451,469,455,0,432,449,427,454,443,471],
[440,473,452,458,0,436,459,443,439,453],
[427,458,412,441,454,0,436,435,437,452],
[460,482,458,463,431,454,0,483,452,480],
[446,465,449,436,447,455,407,0,448,450],
[439,447,445,447,451,453,438,442,0,440],
[438,449,431,419,437,438,410,440,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,444,430,457,435,408,425,440,414],
[448,0,463,427,434,443,418,430,420,422],
[446,427,0,446,462,426,436,434,432,399],
[460,463,444,0,454,435,435,454,443,434],
[433,456,428,436,0,433,429,446,442,426],
[455,447,464,455,457,0,443,418,439,427],
[482,472,454,455,461,447,0,435,438,447],
[465,460,456,436,444,472,455,0,461,423],
[450,470,458,447,448,451,452,429,0,409],
[476,468,491,456,464,463,443,467,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,489,471,527,495,455,488,458,477],
[446,0,463,438,475,475,429,405,410,475],
[401,427,0,444,492,440,490,458,419,480],
[419,452,446,0,494,461,460,480,433,469],
[363,415,398,396,0,400,393,414,397,437],
[395,415,450,429,490,0,433,452,440,417],
[435,461,400,430,497,457,0,458,435,469],
[402,485,432,410,476,438,432,0,414,469],
[432,480,471,457,493,450,455,476,0,492],
[413,415,410,421,453,473,421,421,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,451,437,434,427,477,466,446,453],
[453,0,454,442,440,441,465,434,457,426],
[439,436,0,466,448,445,481,447,449,452],
[453,448,424,0,473,446,465,444,453,449],
[456,450,442,417,0,430,454,443,432,442],
[463,449,445,444,460,0,479,466,435,446],
[413,425,409,425,436,411,0,423,425,401],
[424,456,443,446,447,424,467,0,441,460],
[444,433,441,437,458,455,465,449,0,439],
[437,464,438,441,448,444,489,430,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,464,482,418,415,448,442,477,534],
[463,0,479,484,446,482,432,451,461,466],
[426,411,0,534,506,498,462,390,514,525],
[408,406,356,0,394,440,404,383,411,410],
[472,444,384,496,0,482,474,410,452,495],
[475,408,392,450,408,0,433,429,459,485],
[442,458,428,486,416,457,0,430,477,457],
[448,439,500,507,480,461,460,0,509,541],
[413,429,376,479,438,431,413,381,0,460],
[356,424,365,480,395,405,433,349,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,461,455,463,473,461,463,421,455],
[437,0,461,459,456,471,460,454,415,469],
[429,429,0,470,441,480,448,463,447,450],
[435,431,420,0,456,465,445,449,432,460],
[427,434,449,434,0,479,469,439,422,463],
[417,419,410,425,411,0,418,458,401,423],
[429,430,442,445,421,472,0,472,399,444],
[427,436,427,441,451,432,418,0,423,433],
[469,475,443,458,468,489,491,467,0,487],
[435,421,440,430,427,467,446,457,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,455,452,427,497,485,480,457,478],
[437,0,440,417,442,519,456,457,467,451],
[435,450,0,464,449,519,455,438,464,505],
[438,473,426,0,429,488,492,414,476,439],
[463,448,441,461,0,485,424,470,485,446],
[393,371,371,402,405,0,420,459,426,400],
[405,434,435,398,466,470,0,450,436,413],
[410,433,452,476,420,431,440,0,435,438],
[433,423,426,414,405,464,454,455,0,404],
[412,439,385,451,444,490,477,452,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,469,478,482,454,471,448,452,441],
[433,0,444,485,459,447,441,443,425,440],
[421,446,0,471,465,402,446,443,467,446],
[412,405,419,0,415,429,443,422,448,386],
[408,431,425,475,0,467,464,457,447,486],
[436,443,488,461,423,0,503,500,466,484],
[419,449,444,447,426,387,0,438,454,420],
[442,447,447,468,433,390,452,0,456,442],
[438,465,423,442,443,424,436,434,0,447],
[449,450,444,504,404,406,470,448,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,437,440,439,444,459,451,482,475],
[418,0,438,432,423,427,430,433,443,455],
[453,452,0,468,404,454,419,452,447,441],
[450,458,422,0,405,433,425,440,472,445],
[451,467,486,485,0,441,464,450,473,473],
[446,463,436,457,449,0,427,453,447,448],
[431,460,471,465,426,463,0,472,476,477],
[439,457,438,450,440,437,418,0,473,425],
[408,447,443,418,417,443,414,417,0,450],
[415,435,449,445,417,442,413,465,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,426,433,430,466,432,458,425,469],
[436,0,472,475,430,464,453,471,414,442],
[464,418,0,452,443,460,445,460,439,442],
[457,415,438,0,431,457,455,462,450,430],
[460,460,447,459,0,480,458,483,455,439],
[424,426,430,433,410,0,404,424,425,415],
[458,437,445,435,432,486,0,490,437,447],
[432,419,430,428,407,466,400,0,425,416],
[465,476,451,440,435,465,453,465,0,448],
[421,448,448,460,451,475,443,474,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,440,443,438,435,445,448,440,460],
[437,0,432,445,431,419,445,414,449,435],
[450,458,0,432,405,441,448,428,439,429],
[447,445,458,0,440,462,440,417,450,460],
[452,459,485,450,0,468,434,433,471,445],
[455,471,449,428,422,0,445,428,457,434],
[445,445,442,450,456,445,0,405,460,426],
[442,476,462,473,457,462,485,0,482,438],
[450,441,451,440,419,433,430,408,0,441],
[430,455,461,430,445,456,464,452,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,451,433,441,447,448,464,437,464],
[472,0,458,480,460,479,478,463,446,440],
[439,432,0,460,477,472,436,481,418,419],
[457,410,430,0,417,466,462,458,405,449],
[449,430,413,473,0,445,452,456,442,430],
[443,411,418,424,445,0,433,454,435,426],
[442,412,454,428,438,457,0,433,440,406],
[426,427,409,432,434,436,457,0,433,421],
[453,444,472,485,448,455,450,457,0,447],
[426,450,471,441,460,464,484,469,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,487,446,420,453,481,398,445,448],
[463,0,480,435,433,461,449,436,453,442],
[403,410,0,364,401,455,459,426,412,405],
[444,455,526,0,461,466,482,428,468,444],
[470,457,489,429,0,449,455,446,462,435],
[437,429,435,424,441,0,435,408,432,418],
[409,441,431,408,435,455,0,477,407,403],
[492,454,464,462,444,482,413,0,406,446],
[445,437,478,422,428,458,483,484,0,436],
[442,448,485,446,455,472,487,444,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,428,367,422,457,447,430,442,430],
[475,0,456,421,447,445,461,457,466,456],
[462,434,0,445,436,459,470,451,453,451],
[523,469,445,0,467,486,492,475,492,462],
[468,443,454,423,0,444,473,434,468,442],
[433,445,431,404,446,0,448,453,457,452],
[443,429,420,398,417,442,0,430,432,415],
[460,433,439,415,456,437,460,0,432,457],
[448,424,437,398,422,433,458,458,0,445],
[460,434,439,428,448,438,475,433,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,454,440,432,464,440,426,442,443],
[440,0,446,423,422,444,429,425,442,452],
[436,444,0,413,444,444,440,435,431,424],
[450,467,477,0,448,450,447,430,467,436],
[458,468,446,442,0,446,446,447,433,428],
[426,446,446,440,444,0,435,454,425,440],
[450,461,450,443,444,455,0,453,433,455],
[464,465,455,460,443,436,437,0,451,466],
[448,448,459,423,457,465,457,439,0,453],
[447,438,466,454,462,450,435,424,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,462,439,449,470,488,457,421,446],
[410,0,419,442,401,446,435,410,413,440],
[428,471,0,410,434,431,453,406,373,443],
[451,448,480,0,435,479,471,458,395,471],
[441,489,456,455,0,444,466,426,445,450],
[420,444,459,411,446,0,441,420,390,418],
[402,455,437,419,424,449,0,426,423,427],
[433,480,484,432,464,470,464,0,432,472],
[469,477,517,495,445,500,467,458,0,461],
[444,450,447,419,440,472,463,418,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,452,459,432,457,479,474,442,462],
[444,0,439,442,424,409,436,481,438,436],
[438,451,0,466,423,406,428,446,429,407],
[431,448,424,0,416,428,419,455,412,405],
[458,466,467,474,0,445,461,467,464,424],
[433,481,484,462,445,0,472,463,455,456],
[411,454,462,471,429,418,0,453,440,433],
[416,409,444,435,423,427,437,0,455,424],
[448,452,461,478,426,435,450,435,0,425],
[428,454,483,485,466,434,457,466,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,441,425,463,446,422,415,451,426],
[458,0,464,425,429,451,432,450,469,447],
[449,426,0,417,445,462,431,424,445,422],
[465,465,473,0,462,473,445,469,480,456],
[427,461,445,428,0,451,436,425,465,425],
[444,439,428,417,439,0,406,442,448,450],
[468,458,459,445,454,484,0,460,472,456],
[475,440,466,421,465,448,430,0,470,451],
[439,421,445,410,425,442,418,420,0,432],
[464,443,468,434,465,440,434,439,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,445,436,429,447,449,426,411,424],
[422,0,429,423,429,426,440,413,419,433],
[445,461,0,464,441,470,445,463,431,437],
[454,467,426,0,459,465,445,449,418,462],
[461,461,449,431,0,441,450,456,433,414],
[443,464,420,425,449,0,433,470,428,429],
[441,450,445,445,440,457,0,459,451,434],
[464,477,427,441,434,420,431,0,434,434],
[479,471,459,472,457,462,439,456,0,468],
[466,457,453,428,476,461,456,456,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,484,444,517,416,422,515,415,583],
[387,0,337,477,462,382,342,431,352,421],
[406,553,0,501,568,457,472,523,448,542],
[446,413,389,0,458,410,396,469,400,471],
[373,428,322,432,0,415,414,455,382,469],
[474,508,433,480,475,0,440,527,399,508],
[468,548,418,494,476,450,0,501,475,543],
[375,459,367,421,435,363,389,0,384,536],
[475,538,442,490,508,491,415,506,0,579],
[307,469,348,419,421,382,347,354,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,411,439,447,459,429,484,453,428],
[468,0,430,460,476,494,472,434,486,455],
[479,460,0,469,414,475,442,464,484,417],
[451,430,421,0,422,455,412,410,468,440],
[443,414,476,468,0,436,415,408,471,438],
[431,396,415,435,454,0,405,410,455,426],
[461,418,448,478,475,485,0,430,505,457],
[406,456,426,480,482,480,460,0,488,447],
[437,404,406,422,419,435,385,402,0,418],
[462,435,473,450,452,464,433,443,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,464,467,461,458,441,461,474,488],
[424,0,449,452,444,437,431,437,457,451],
[426,441,0,428,437,446,411,429,445,468],
[423,438,462,0,462,441,417,411,450,453],
[429,446,453,428,0,454,412,424,437,438],
[432,453,444,449,436,0,429,439,447,458],
[449,459,479,473,478,461,0,445,467,477],
[429,453,461,479,466,451,445,0,473,482],
[416,433,445,440,453,443,423,417,0,451],
[402,439,422,437,452,432,413,408,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,503,456,474,476,499,434,451,414],
[426,0,480,446,455,487,455,435,397,409],
[387,410,0,452,437,492,465,417,392,412],
[434,444,438,0,406,493,479,463,419,445],
[416,435,453,484,0,533,494,456,441,452],
[414,403,398,397,357,0,415,402,399,426],
[391,435,425,411,396,475,0,482,391,387],
[456,455,473,427,434,488,408,0,412,434],
[439,493,498,471,449,491,499,478,0,464],
[476,481,478,445,438,464,503,456,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,439,446,437,444,463,442,432,476],
[437,0,442,435,436,433,451,454,443,454],
[451,448,0,461,428,447,471,451,466,459],
[444,455,429,0,443,440,463,465,446,472],
[453,454,462,447,0,434,464,482,458,463],
[446,457,443,450,456,0,460,474,442,460],
[427,439,419,427,426,430,0,437,419,448],
[448,436,439,425,408,416,453,0,445,432],
[458,447,424,444,432,448,471,445,0,462],
[414,436,431,418,427,430,442,458,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,465,401,467,458,506,427,452,377],
[422,0,432,398,380,438,415,369,445,405],
[425,458,0,389,453,452,508,441,476,432],
[489,492,501,0,453,492,567,524,495,443],
[423,510,437,437,0,452,531,490,483,486],
[432,452,438,398,438,0,530,434,461,450],
[384,475,382,323,359,360,0,397,412,417],
[463,521,449,366,400,456,493,0,470,465],
[438,445,414,395,407,429,478,420,0,449],
[513,485,458,447,404,440,473,425,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,443,455,427,463,416,444,447,424],
[443,0,455,446,427,447,427,451,440,423],
[447,435,0,454,422,428,431,447,448,407],
[435,444,436,0,410,423,424,431,442,423],
[463,463,468,480,0,471,433,463,452,442],
[427,443,462,467,419,0,405,441,454,420],
[474,463,459,466,457,485,0,457,452,445],
[446,439,443,459,427,449,433,0,440,428],
[443,450,442,448,438,436,438,450,0,417],
[466,467,483,467,448,470,445,462,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,446,484,467,439,471,452,471,445],
[426,0,427,463,458,445,425,451,431,431],
[444,463,0,471,460,456,454,444,448,436],
[406,427,419,0,431,441,435,430,431,428],
[423,432,430,459,0,431,434,438,444,413],
[451,445,434,449,459,0,432,453,448,432],
[419,465,436,455,456,458,0,441,429,412],
[438,439,446,460,452,437,449,0,458,429],
[419,459,442,459,446,442,461,432,0,424],
[445,459,454,462,477,458,478,461,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,469,420,445,461,472,456,461,481],
[469,0,465,434,458,467,465,452,474,474],
[421,425,0,426,412,424,445,424,448,469],
[470,456,464,0,462,466,444,479,471,483],
[445,432,478,428,0,470,446,446,462,470],
[429,423,466,424,420,0,427,448,466,468],
[418,425,445,446,444,463,0,466,471,470],
[434,438,466,411,444,442,424,0,481,475],
[429,416,442,419,428,424,419,409,0,430],
[409,416,421,407,420,422,420,415,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,421,434,459,438,462,437,445,427],
[454,0,417,424,437,450,455,437,458,437],
[469,473,0,455,455,462,467,470,465,445],
[456,466,435,0,459,452,458,438,469,450],
[431,453,435,431,0,438,467,455,444,432],
[452,440,428,438,452,0,444,434,448,424],
[428,435,423,432,423,446,0,432,436,433],
[453,453,420,452,435,456,458,0,457,440],
[445,432,425,421,446,442,454,433,0,429],
[463,453,445,440,458,466,457,450,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,451,454,447,449,464,465,495,456],
[447,0,436,456,438,455,468,450,457,446],
[439,454,0,454,435,447,469,455,487,449],
[436,434,436,0,436,438,445,460,490,435],
[443,452,455,454,0,441,457,479,469,466],
[441,435,443,452,449,0,486,446,477,453],
[426,422,421,445,433,404,0,433,474,462],
[425,440,435,430,411,444,457,0,445,433],
[395,433,403,400,421,413,416,445,0,427],
[434,444,441,455,424,437,428,457,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,426,433,446,433,453,410,435,464],
[446,0,425,438,447,449,454,424,434,467],
[464,465,0,464,444,469,463,435,460,483],
[457,452,426,0,429,452,436,411,476,455],
[444,443,446,461,0,465,467,448,469,481],
[457,441,421,438,425,0,448,411,454,462],
[437,436,427,454,423,442,0,415,441,473],
[480,466,455,479,442,479,475,0,465,483],
[455,456,430,414,421,436,449,425,0,465],
[426,423,407,435,409,428,417,407,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,482,461,504,488,445,440,403,424],
[403,0,522,416,441,505,486,464,424,478],
[408,368,0,315,375,391,375,394,387,390],
[429,474,575,0,493,557,517,503,407,458],
[386,449,515,397,0,511,431,420,424,417],
[402,385,499,333,379,0,370,362,376,362],
[445,404,515,373,459,520,0,475,437,416],
[450,426,496,387,470,528,415,0,410,477],
[487,466,503,483,466,514,453,480,0,381],
[466,412,500,432,473,528,474,413,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,520,522,372,360,404,480,321,423],
[458,0,385,401,383,384,382,436,428,353],
[370,505,0,572,419,474,458,405,516,460],
[368,489,318,0,360,387,432,223,361,300],
[518,507,471,530,0,356,481,447,545,378],
[530,506,416,503,534,0,424,502,461,413],
[486,508,432,458,409,466,0,441,532,433],
[410,454,485,667,443,388,449,0,466,472],
[569,462,374,529,345,429,358,424,0,418],
[467,537,430,590,512,477,457,418,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,437,451,411,444,416,427,411,422],
[441,0,453,433,425,434,427,434,422,430],
[453,437,0,450,439,434,440,429,429,423],
[439,457,440,0,446,455,420,431,430,432],
[479,465,451,444,0,460,440,467,426,438],
[446,456,456,435,430,0,420,437,418,407],
[474,463,450,470,450,470,0,446,445,437],
[463,456,461,459,423,453,444,0,435,443],
[479,468,461,460,464,472,445,455,0,459],
[468,460,467,458,452,483,453,447,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,450,437,433,444,438,413,457,465],
[457,0,487,471,448,436,472,468,448,465],
[440,403,0,424,395,398,441,415,420,421],
[453,419,466,0,410,399,441,423,421,457],
[457,442,495,480,0,437,469,433,461,467],
[446,454,492,491,453,0,464,436,496,486],
[452,418,449,449,421,426,0,439,414,447],
[477,422,475,467,457,454,451,0,462,474],
[433,442,470,469,429,394,476,428,0,455],
[425,425,469,433,423,404,443,416,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,463,434,416,418,454,452,432,399],
[452,0,476,488,447,453,461,474,476,432],
[427,414,0,471,436,433,431,437,437,438],
[456,402,419,0,438,444,423,434,445,401],
[474,443,454,452,0,422,461,425,421,430],
[472,437,457,446,468,0,441,503,460,462],
[436,429,459,467,429,449,0,438,413,418],
[438,416,453,456,465,387,452,0,411,394],
[458,414,453,445,469,430,477,479,0,393],
[491,458,452,489,460,428,472,496,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,450,450,470,462,463,470,432,461],
[430,0,437,445,444,453,468,440,410,427],
[440,453,0,455,443,455,460,467,449,449],
[440,445,435,0,451,441,456,470,413,448],
[420,446,447,439,0,428,437,457,415,441],
[428,437,435,449,462,0,457,448,428,443],
[427,422,430,434,453,433,0,460,395,434],
[420,450,423,420,433,442,430,0,411,412],
[458,480,441,477,475,462,495,479,0,473],
[429,463,441,442,449,447,456,478,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,468,481,478,482,462,458,425,472],
[395,0,437,458,450,460,459,414,409,433],
[422,453,0,458,453,505,483,444,426,461],
[409,432,432,0,449,461,447,439,407,426],
[412,440,437,441,0,438,465,426,430,432],
[408,430,385,429,452,0,446,417,380,387],
[428,431,407,443,425,444,0,428,419,416],
[432,476,446,451,464,473,462,0,436,446],
[465,481,464,483,460,510,471,454,0,402],
[418,457,429,464,458,503,474,444,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,390,434,433,385,387,389,397,409,456],
[500,0,505,460,491,467,470,434,509,490],
[456,385,0,427,412,393,404,436,398,503],
[457,430,463,0,434,410,470,446,449,462],
[505,399,478,456,0,479,434,454,465,448],
[503,423,497,480,411,0,448,451,455,505],
[501,420,486,420,456,442,0,487,428,484],
[493,456,454,444,436,439,403,0,478,458],
[481,381,492,441,425,435,462,412,0,460],
[434,400,387,428,442,385,406,432,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,453,456,465,439,472,485,467,461],
[430,0,452,466,436,478,491,441,478,425],
[437,438,0,460,437,426,482,459,480,415],
[434,424,430,0,433,425,488,433,458,428],
[425,454,453,457,0,425,540,455,463,452],
[451,412,464,465,465,0,512,461,505,442],
[418,399,408,402,350,378,0,404,469,431],
[405,449,431,457,435,429,486,0,436,429],
[423,412,410,432,427,385,421,454,0,391],
[429,465,475,462,438,448,459,461,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,442,434,465,422,441,419,440,432],
[463,0,445,423,453,462,450,434,436,420],
[448,445,0,437,471,438,464,443,459,421],
[456,467,453,0,475,436,465,452,453,436],
[425,437,419,415,0,433,443,432,444,438],
[468,428,452,454,457,0,433,455,447,428],
[449,440,426,425,447,457,0,437,450,425],
[471,456,447,438,458,435,453,0,448,475],
[450,454,431,437,446,443,440,442,0,468],
[458,470,469,454,452,462,465,415,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,464,476,445,440,432,434,441,447],
[449,0,485,458,458,450,478,459,441,482],
[426,405,0,434,427,440,420,434,438,455],
[414,432,456,0,435,452,427,445,440,473],
[445,432,463,455,0,447,437,446,440,451],
[450,440,450,438,443,0,434,434,445,457],
[458,412,470,463,453,456,0,445,436,463],
[456,431,456,445,444,456,445,0,473,459],
[449,449,452,450,450,445,454,417,0,467],
[443,408,435,417,439,433,427,431,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,429,415,449,419,507,415,411,416],
[440,0,418,461,412,422,487,406,485,402],
[461,472,0,466,450,437,514,488,420,460],
[475,429,424,0,445,411,484,459,469,455],
[441,478,440,445,0,437,486,416,513,418],
[471,468,453,479,453,0,477,449,443,461],
[383,403,376,406,404,413,0,413,394,420],
[475,484,402,431,474,441,477,0,482,466],
[479,405,470,421,377,447,496,408,0,403],
[474,488,430,435,472,429,470,424,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,445,458,474,481,456,428,474,460],
[406,0,428,463,467,423,404,414,444,446],
[445,462,0,445,502,478,464,454,474,454],
[432,427,445,0,442,439,404,408,484,443],
[416,423,388,448,0,417,415,385,442,372],
[409,467,412,451,473,0,409,404,429,440],
[434,486,426,486,475,481,0,413,498,462],
[462,476,436,482,505,486,477,0,494,460],
[416,446,416,406,448,461,392,396,0,432],
[430,444,436,447,518,450,428,430,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,491,416,425,502,485,483,458,469],
[457,0,446,439,430,487,418,434,445,444],
[399,444,0,431,459,514,431,439,451,440],
[474,451,459,0,463,495,452,452,440,459],
[465,460,431,427,0,500,445,438,417,443],
[388,403,376,395,390,0,398,383,442,399],
[405,472,459,438,445,492,0,485,484,475],
[407,456,451,438,452,507,405,0,459,434],
[432,445,439,450,473,448,406,431,0,436],
[421,446,450,431,447,491,415,456,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,550,503,584,578,407,461,491,526,423],
[340,0,460,521,528,288,373,572,315,458],
[387,430,0,389,561,202,308,346,411,468],
[306,369,501,0,460,366,225,292,319,313],
[312,362,329,430,0,376,151,232,216,224],
[483,602,688,524,514,0,412,408,415,368],
[429,517,582,665,739,478,0,473,409,458],
[399,318,544,598,658,482,417,0,370,484],
[364,575,479,571,674,475,481,520,0,397],
[467,432,422,577,666,522,432,406,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,436,412,411,464,457,426,449,435],
[426,0,379,419,427,468,450,409,454,441],
[454,511,0,396,475,449,462,434,434,440],
[478,471,494,0,466,479,465,473,504,442],
[479,463,415,424,0,465,459,433,483,456],
[426,422,441,411,425,0,457,365,414,414],
[433,440,428,425,431,433,0,415,447,423],
[464,481,456,417,457,525,475,0,489,461],
[441,436,456,386,407,476,443,401,0,431],
[455,449,450,448,434,476,467,429,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,370,470,362,481,363,384,447,448,485],
[520,0,498,452,471,380,459,496,440,475],
[420,392,0,297,364,360,286,415,408,388],
[528,438,593,0,536,475,428,486,491,503],
[409,419,526,354,0,407,371,428,462,472],
[527,510,530,415,483,0,498,478,561,524],
[506,431,604,462,519,392,0,487,499,506],
[443,394,475,404,462,412,403,0,437,422],
[442,450,482,399,428,329,391,453,0,392],
[405,415,502,387,418,366,384,468,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,403,429,414,432,422,423,424,421],
[460,0,392,449,392,434,461,413,378,428],
[487,498,0,479,463,497,426,466,440,453],
[461,441,411,0,443,414,415,402,419,431],
[476,498,427,447,0,457,461,474,463,439],
[458,456,393,476,433,0,416,447,426,428],
[468,429,464,475,429,474,0,442,403,474],
[467,477,424,488,416,443,448,0,421,458],
[466,512,450,471,427,464,487,469,0,467],
[469,462,437,459,451,462,416,432,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,434,432,423,440,436,432,451,434],
[443,0,421,439,427,438,454,453,465,443],
[456,469,0,453,426,428,449,469,457,451],
[458,451,437,0,448,464,458,433,450,446],
[467,463,464,442,0,471,454,462,467,457],
[450,452,462,426,419,0,451,433,461,460],
[454,436,441,432,436,439,0,445,473,442],
[458,437,421,457,428,457,445,0,461,430],
[439,425,433,440,423,429,417,429,0,420],
[456,447,439,444,433,430,448,460,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,460,411,384,562,516,442,429,417],
[438,0,488,409,427,486,461,481,458,405],
[430,402,0,402,406,490,408,406,422,363],
[479,481,488,0,493,594,484,464,505,429],
[506,463,484,397,0,512,499,451,408,453],
[328,404,400,296,378,0,395,371,330,354],
[374,429,482,406,391,495,0,443,439,392],
[448,409,484,426,439,519,447,0,432,376],
[461,432,468,385,482,560,451,458,0,429],
[473,485,527,461,437,536,498,514,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,457,473,474,463,482,477,549,496],
[460,0,430,461,515,421,458,432,524,456],
[433,460,0,433,452,410,471,409,490,486],
[417,429,457,0,415,372,399,438,522,436],
[416,375,438,475,0,376,374,467,544,421],
[427,469,480,518,514,0,483,441,564,408],
[408,432,419,491,516,407,0,416,511,453],
[413,458,481,452,423,449,474,0,558,443],
[341,366,400,368,346,326,379,332,0,372],
[394,434,404,454,469,482,437,447,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,435,431,407,429,433,413,388,349],
[492,0,434,419,488,450,435,527,502,465],
[455,456,0,405,471,472,383,504,462,419],
[459,471,485,0,535,477,460,472,500,412],
[483,402,419,355,0,377,406,431,457,369],
[461,440,418,413,513,0,385,461,462,401],
[457,455,507,430,484,505,0,458,500,439],
[477,363,386,418,459,429,432,0,419,415],
[502,388,428,390,433,428,390,471,0,473],
[541,425,471,478,521,489,451,475,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,458,479,475,476,466,477,448,510],
[446,0,431,461,454,449,440,461,442,468],
[432,459,0,464,448,453,438,476,421,454],
[411,429,426,0,437,440,432,451,408,469],
[415,436,442,453,0,440,448,440,419,445],
[414,441,437,450,450,0,418,469,416,459],
[424,450,452,458,442,472,0,479,426,456],
[413,429,414,439,450,421,411,0,426,447],
[442,448,469,482,471,474,464,464,0,467],
[380,422,436,421,445,431,434,443,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,447,466,487,497,430,458,446,473],
[401,0,466,475,397,459,393,438,432,434],
[443,424,0,500,409,418,458,450,481,497],
[424,415,390,0,375,456,414,452,443,425],
[403,493,481,515,0,492,511,472,447,498],
[393,431,472,434,398,0,369,408,396,449],
[460,497,432,476,379,521,0,454,460,463],
[432,452,440,438,418,482,436,0,402,481],
[444,458,409,447,443,494,430,488,0,456],
[417,456,393,465,392,441,427,409,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,466,429,446,442,464,442,480,471],
[415,0,429,421,434,442,413,424,445,391],
[424,461,0,419,465,448,453,439,467,418],
[461,469,471,0,467,465,465,466,495,440],
[444,456,425,423,0,426,460,452,485,436],
[448,448,442,425,464,0,429,439,470,418],
[426,477,437,425,430,461,0,454,473,441],
[448,466,451,424,438,451,436,0,488,452],
[410,445,423,395,405,420,417,402,0,405],
[419,499,472,450,454,472,449,438,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,391,418,452,455,397,431,432,413],
[473,0,427,453,464,499,453,418,484,401],
[499,463,0,437,477,499,417,442,495,448],
[472,437,453,0,483,480,448,432,457,426],
[438,426,413,407,0,472,423,430,467,431],
[435,391,391,410,418,0,401,395,436,397],
[493,437,473,442,467,489,0,477,513,423],
[459,472,448,458,460,495,413,0,455,471],
[458,406,395,433,423,454,377,435,0,392],
[477,489,442,464,459,493,467,419,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,433,443,456,424,446,442,452,446],
[445,0,446,452,464,444,454,458,456,468],
[457,444,0,453,447,443,443,428,416,463],
[447,438,437,0,456,453,441,478,418,469],
[434,426,443,434,0,434,417,436,422,455],
[466,446,447,437,456,0,433,466,430,493],
[444,436,447,449,473,457,0,471,439,458],
[448,432,462,412,454,424,419,0,438,450],
[438,434,474,472,468,460,451,452,0,473],
[444,422,427,421,435,397,432,440,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,452,560,457,401,461,550,449,482],
[434,0,494,535,560,434,558,464,484,447],
[438,396,0,388,423,331,436,359,384,364],
[330,355,502,0,416,402,331,440,390,352],
[433,330,467,474,0,466,464,398,494,470],
[489,456,559,488,424,0,513,488,460,471],
[429,332,454,559,426,377,0,422,481,393],
[340,426,531,450,492,402,468,0,363,421],
[441,406,506,500,396,430,409,527,0,429],
[408,443,526,538,420,419,497,469,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,475,414,444,464,468,483,433,442],
[381,0,426,391,417,420,401,413,406,392],
[415,464,0,413,431,420,433,453,422,429],
[476,499,477,0,445,481,500,473,454,464],
[446,473,459,445,0,439,469,450,425,444],
[426,470,470,409,451,0,460,447,407,432],
[422,489,457,390,421,430,0,434,423,438],
[407,477,437,417,440,443,456,0,394,420],
[457,484,468,436,465,483,467,496,0,454],
[448,498,461,426,446,458,452,470,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,463,483,455,480,437,430,447,453],
[451,0,474,477,469,459,448,456,436,456],
[427,416,0,449,436,475,421,434,425,421],
[407,413,441,0,441,447,420,415,438,440],
[435,421,454,449,0,447,424,434,435,444],
[410,431,415,443,443,0,443,421,420,422],
[453,442,469,470,466,447,0,459,460,451],
[460,434,456,475,456,469,431,0,430,464],
[443,454,465,452,455,470,430,460,0,448],
[437,434,469,450,446,468,439,426,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,501,415,432,437,514,476,475,533],
[403,0,479,467,484,393,425,426,401,469],
[389,411,0,392,368,440,421,401,361,433],
[475,423,498,0,506,435,500,432,438,509],
[458,406,522,384,0,473,506,467,391,525],
[453,497,450,455,417,0,515,456,415,476],
[376,465,469,390,384,375,0,404,335,459],
[414,464,489,458,423,434,486,0,420,458],
[415,489,529,452,499,475,555,470,0,530],
[357,421,457,381,365,414,431,432,360,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,392,420,424,456,409,459,400,403],
[438,0,384,363,441,431,375,419,378,400],
[498,506,0,431,458,471,450,485,451,438],
[470,527,459,0,436,507,450,479,471,477],
[466,449,432,454,0,474,432,478,442,437],
[434,459,419,383,416,0,420,493,410,426],
[481,515,440,440,458,470,0,486,446,419],
[431,471,405,411,412,397,404,0,414,382],
[490,512,439,419,448,480,444,476,0,427],
[487,490,452,413,453,464,471,508,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,420,479,449,436,452,484,448,456],
[417,0,419,484,436,418,444,471,438,479],
[470,471,0,485,468,453,449,477,469,430],
[411,406,405,0,398,376,421,394,417,393],
[441,454,422,492,0,444,481,449,437,451],
[454,472,437,514,446,0,489,463,449,436],
[438,446,441,469,409,401,0,479,426,442],
[406,419,413,496,441,427,411,0,441,441],
[442,452,421,473,453,441,464,449,0,409],
[434,411,460,497,439,454,448,449,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,398,492,504,618,441,368,369,546],
[416,0,506,614,607,590,432,510,528,585],
[492,384,0,631,524,634,322,369,348,514],
[398,276,259,0,369,525,383,394,346,489],
[386,283,366,521,0,666,395,430,459,476],
[272,300,256,365,224,0,386,323,485,541],
[449,458,568,507,495,504,0,393,570,492],
[522,380,521,496,460,567,497,0,659,576],
[521,362,542,544,431,405,320,231,0,478],
[344,305,376,401,414,349,398,314,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,483,438,455,431,454,432,465,441],
[441,0,443,436,423,446,405,447,455,449],
[407,447,0,424,426,407,420,415,432,451],
[452,454,466,0,447,455,432,464,451,448],
[435,467,464,443,0,425,409,447,475,461],
[459,444,483,435,465,0,433,478,472,459],
[436,485,470,458,481,457,0,498,470,484],
[458,443,475,426,443,412,392,0,447,449],
[425,435,458,439,415,418,420,443,0,424],
[449,441,439,442,429,431,406,441,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,457,456,455,457,420,481,428,411],
[441,0,480,454,513,455,458,484,421,463],
[433,410,0,439,479,440,449,425,413,425],
[434,436,451,0,470,424,425,457,423,434],
[435,377,411,420,0,442,438,434,426,413],
[433,435,450,466,448,0,441,448,426,418],
[470,432,441,465,452,449,0,453,441,450],
[409,406,465,433,456,442,437,0,408,431],
[462,469,477,467,464,464,449,482,0,439],
[479,427,465,456,477,472,440,459,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,417,435,455,467,417,427,452,427],
[427,0,404,469,448,463,408,443,453,424],
[473,486,0,485,476,483,452,463,466,444],
[455,421,405,0,448,480,424,436,473,476],
[435,442,414,442,0,453,394,439,445,438],
[423,427,407,410,437,0,398,437,438,457],
[473,482,438,466,496,492,0,451,488,477],
[463,447,427,454,451,453,439,0,483,454],
[438,437,424,417,445,452,402,407,0,450],
[463,466,446,414,452,433,413,436,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,491,449,426,464,463,472,595,410],
[479,0,605,476,424,435,457,495,629,417],
[399,285,0,387,387,463,427,397,509,495],
[441,414,503,0,341,426,404,426,616,409],
[464,466,503,549,0,436,445,471,588,485],
[426,455,427,464,454,0,513,396,525,430],
[427,433,463,486,445,377,0,427,499,387],
[418,395,493,464,419,494,463,0,608,423],
[295,261,381,274,302,365,391,282,0,311],
[480,473,395,481,405,460,503,467,579,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,435,458,463,456,448,462,441,457],
[422,0,428,421,465,422,413,428,412,423],
[455,462,0,438,483,451,445,452,418,449],
[432,469,452,0,452,439,440,472,461,475],
[427,425,407,438,0,426,416,417,403,450],
[434,468,439,451,464,0,424,459,443,452],
[442,477,445,450,474,466,0,444,444,457],
[428,462,438,418,473,431,446,0,413,435],
[449,478,472,429,487,447,446,477,0,477],
[433,467,441,415,440,438,433,455,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,429,457,420,455,417,440,441,440],
[429,0,438,441,436,433,403,422,422,426],
[461,452,0,462,441,481,455,460,451,455],
[433,449,428,0,421,447,452,419,412,408],
[470,454,449,469,0,465,436,449,458,424],
[435,457,409,443,425,0,459,425,412,436],
[473,487,435,438,454,431,0,446,425,437],
[450,468,430,471,441,465,444,0,439,455],
[449,468,439,478,432,478,465,451,0,437],
[450,464,435,482,466,454,453,435,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,443,445,464,453,431,443,427,437],
[472,0,478,450,445,420,468,462,468,472],
[447,412,0,409,429,447,402,395,417,451],
[445,440,481,0,422,451,437,462,459,454],
[426,445,461,468,0,456,453,450,450,440],
[437,470,443,439,434,0,426,430,427,443],
[459,422,488,453,437,464,0,445,473,471],
[447,428,495,428,440,460,445,0,441,436],
[463,422,473,431,440,463,417,449,0,464],
[453,418,439,436,450,447,419,454,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,429,430,441,427,444,445,452,417],
[405,0,420,436,389,406,459,441,390,404],
[461,470,0,476,461,469,421,470,464,466],
[460,454,414,0,406,416,408,463,427,425],
[449,501,429,484,0,470,456,460,471,464],
[463,484,421,474,420,0,456,497,467,421],
[446,431,469,482,434,434,0,475,483,429],
[445,449,420,427,430,393,415,0,417,437],
[438,500,426,463,419,423,407,473,0,437],
[473,486,424,465,426,469,461,453,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,435,429,409,447,460,429,470,431],
[421,0,403,416,422,438,425,434,436,413],
[455,487,0,447,431,468,474,459,476,449],
[461,474,443,0,466,463,461,469,462,462],
[481,468,459,424,0,468,487,470,465,436],
[443,452,422,427,422,0,447,449,449,406],
[430,465,416,429,403,443,0,430,425,437],
[461,456,431,421,420,441,460,0,437,445],
[420,454,414,428,425,441,465,453,0,425],
[459,477,441,428,454,484,453,445,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,434,419,455,437,418,457,422,442],
[464,0,453,460,471,465,453,461,438,460],
[456,437,0,468,454,464,436,472,436,451],
[471,430,422,0,472,448,444,444,449,468],
[435,419,436,418,0,436,406,432,413,404],
[453,425,426,442,454,0,419,432,440,426],
[472,437,454,446,484,471,0,461,426,455],
[433,429,418,446,458,458,429,0,431,448],
[468,452,454,441,477,450,464,459,0,466],
[448,430,439,422,486,464,435,442,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,445,460,433,464,428,453,413,365],
[487,0,403,458,378,451,407,491,413,389],
[445,487,0,500,468,427,460,463,472,400],
[430,432,390,0,390,459,414,476,396,363],
[457,512,422,500,0,435,432,513,423,393],
[426,439,463,431,455,0,431,507,444,380],
[462,483,430,476,458,459,0,467,414,373],
[437,399,427,414,377,383,423,0,386,388],
[477,477,418,494,467,446,476,504,0,466],
[525,501,490,527,497,510,517,502,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,453,433,459,462,441,455,462,459],
[412,0,462,476,429,447,450,442,444,442],
[437,428,0,430,424,445,448,436,428,431],
[457,414,460,0,443,451,447,459,427,452],
[431,461,466,447,0,457,457,454,433,446],
[428,443,445,439,433,0,427,428,426,440],
[449,440,442,443,433,463,0,435,428,427],
[435,448,454,431,436,462,455,0,426,449],
[428,446,462,463,457,464,462,464,0,464],
[431,448,459,438,444,450,463,441,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,413,405,421,429,451,445,438,421],
[469,0,411,441,441,459,441,458,435,444],
[477,479,0,440,446,472,473,476,469,446],
[485,449,450,0,449,462,460,466,460,440],
[469,449,444,441,0,468,457,466,438,449],
[461,431,418,428,422,0,451,464,428,440],
[439,449,417,430,433,439,0,459,457,449],
[445,432,414,424,424,426,431,0,432,421],
[452,455,421,430,452,462,433,458,0,449],
[469,446,444,450,441,450,441,469,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,562,530,466,416,305,239,425,639,465],
[328,0,389,446,275,360,314,390,508,592],
[360,501,0,364,316,332,351,361,581,482],
[424,444,526,0,316,313,481,432,518,495],
[474,615,574,574,0,331,437,462,453,515],
[585,530,558,577,559,0,340,583,458,558],
[651,576,539,409,453,550,0,513,653,698],
[465,500,529,458,428,307,377,0,578,588],
[251,382,309,372,437,432,237,312,0,482],
[425,298,408,395,375,332,192,302,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,479,425,427,477,468,453,394,451],
[407,0,397,459,341,441,441,487,440,432],
[411,493,0,484,472,489,548,465,475,497],
[465,431,406,0,427,425,448,434,391,412],
[463,549,418,463,0,526,529,485,447,481],
[413,449,401,465,364,0,472,430,364,442],
[422,449,342,442,361,418,0,440,391,424],
[437,403,425,456,405,460,450,0,374,440],
[496,450,415,499,443,526,499,516,0,487],
[439,458,393,478,409,448,466,450,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,474,526,436,502,501,480,520,514],
[413,0,400,414,474,400,455,376,454,497],
[416,490,0,425,446,444,450,459,502,464],
[364,476,465,0,449,451,486,374,499,478],
[454,416,444,441,0,405,490,398,505,437],
[388,490,446,439,485,0,491,420,505,481],
[389,435,440,404,400,399,0,374,476,409],
[410,514,431,516,492,470,516,0,539,522],
[370,436,388,391,385,385,414,351,0,418],
[376,393,426,412,453,409,481,368,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,402,429,430,478,443,371,404,376],
[484,0,474,441,482,515,486,428,444,453],
[488,416,0,466,417,491,481,419,462,441],
[461,449,424,0,392,486,469,447,450,447],
[460,408,473,498,0,508,522,453,461,445],
[412,375,399,404,382,0,454,420,428,396],
[447,404,409,421,368,436,0,376,407,421],
[519,462,471,443,437,470,514,0,530,446],
[486,446,428,440,429,462,483,360,0,427],
[514,437,449,443,445,494,469,444,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,443,491,430,443,455,478,470,485],
[382,0,403,417,409,403,415,411,430,447],
[447,487,0,461,420,466,440,435,469,469],
[399,473,429,0,426,400,418,419,454,435],
[460,481,470,464,0,403,432,472,522,474],
[447,487,424,490,487,0,479,490,492,501],
[435,475,450,472,458,411,0,480,494,465],
[412,479,455,471,418,400,410,0,483,455],
[420,460,421,436,368,398,396,407,0,448],
[405,443,421,455,416,389,425,435,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,424,446,399,400,411,419,429,399],
[442,0,445,432,443,423,426,428,451,432],
[466,445,0,466,414,437,437,415,469,437],
[444,458,424,0,441,422,445,417,465,433],
[491,447,476,449,0,428,432,447,456,425],
[490,467,453,468,462,0,443,442,472,433],
[479,464,453,445,458,447,0,432,470,429],
[471,462,475,473,443,448,458,0,469,445],
[461,439,421,425,434,418,420,421,0,411],
[491,458,453,457,465,457,461,445,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,427,433,409,417,420,427,446,425],
[464,0,435,425,412,424,433,439,433,435],
[463,455,0,435,430,427,458,442,445,424],
[457,465,455,0,420,444,450,458,465,438],
[481,478,460,470,0,455,473,471,446,436],
[473,466,463,446,435,0,475,449,448,454],
[470,457,432,440,417,415,0,453,421,434],
[463,451,448,432,419,441,437,0,433,422],
[444,457,445,425,444,442,469,457,0,451],
[465,455,466,452,454,436,456,468,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,488,487,424,443,469,467,409,485],
[422,0,494,493,432,460,466,421,439,451],
[402,396,0,461,406,446,379,387,384,450],
[403,397,429,0,403,412,386,381,381,436],
[466,458,484,487,0,465,458,433,397,470],
[447,430,444,478,425,0,452,439,417,464],
[421,424,511,504,432,438,0,449,459,492],
[423,469,503,509,457,451,441,0,393,508],
[481,451,506,509,493,473,431,497,0,536],
[405,439,440,454,420,426,398,382,354,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,465,460,445,443,434,467,440,435],
[445,0,446,453,399,431,411,424,406,416],
[425,444,0,422,424,388,441,418,435,383],
[430,437,468,0,428,428,426,458,457,443],
[445,491,466,462,0,449,430,429,440,447],
[447,459,502,462,441,0,442,439,448,422],
[456,479,449,464,460,448,0,461,432,431],
[423,466,472,432,461,451,429,0,438,427],
[450,484,455,433,450,442,458,452,0,446],
[455,474,507,447,443,468,459,463,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,433,470,436,421,448,472,461,450],
[437,0,456,472,449,423,459,454,444,461],
[457,434,0,465,453,438,461,483,471,445],
[420,418,425,0,423,407,420,459,442,445],
[454,441,437,467,0,440,440,451,460,464],
[469,467,452,483,450,0,477,483,458,436],
[442,431,429,470,450,413,0,468,457,459],
[418,436,407,431,439,407,422,0,425,425],
[429,446,419,448,430,432,433,465,0,449],
[440,429,445,445,426,454,431,465,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,406,435,425,453,461,426,450,457],
[469,0,440,440,452,435,460,461,458,450],
[484,450,0,459,459,420,476,444,449,463],
[455,450,431,0,449,443,480,453,442,479],
[465,438,431,441,0,465,468,429,446,461],
[437,455,470,447,425,0,441,433,428,456],
[429,430,414,410,422,449,0,431,437,459],
[464,429,446,437,461,457,459,0,441,485],
[440,432,441,448,444,462,453,449,0,456],
[433,440,427,411,429,434,431,405,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,271,430,555,321,423,437,290,377],
[459,0,518,319,442,380,418,435,330,493],
[619,372,0,422,500,375,432,447,319,282],
[460,571,468,0,521,380,454,500,323,407],
[335,448,390,369,0,340,309,338,258,430],
[569,510,515,510,550,0,417,491,550,449],
[467,472,458,436,581,473,0,481,322,399],
[453,455,443,390,552,399,409,0,327,414],
[600,560,571,567,632,340,568,563,0,468],
[513,397,608,483,460,441,491,476,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,434,470,435,440,427,452,463,463],
[433,0,438,460,428,437,419,438,449,455],
[456,452,0,480,435,444,445,453,478,476],
[420,430,410,0,428,438,410,431,440,461],
[455,462,455,462,0,447,442,460,450,478],
[450,453,446,452,443,0,427,436,436,459],
[463,471,445,480,448,463,0,457,450,464],
[438,452,437,459,430,454,433,0,454,464],
[427,441,412,450,440,454,440,436,0,468],
[427,435,414,429,412,431,426,426,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,423,466,438,416,424,405,412,436],
[451,0,446,425,414,442,427,425,438,446],
[467,444,0,460,430,440,437,429,406,454],
[424,465,430,0,426,417,422,411,406,444],
[452,476,460,464,0,423,445,434,425,466],
[474,448,450,473,467,0,448,428,402,484],
[466,463,453,468,445,442,0,462,446,485],
[485,465,461,479,456,462,428,0,441,479],
[478,452,484,484,465,488,444,449,0,474],
[454,444,436,446,424,406,405,411,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,460,426,467,460,427,434,468,441],
[488,0,447,457,441,469,437,416,461,472],
[430,443,0,444,402,442,467,435,452,404],
[464,433,446,0,486,449,446,438,439,467],
[423,449,488,404,0,440,443,429,492,454],
[430,421,448,441,450,0,465,445,466,375],
[463,453,423,444,447,425,0,447,431,441],
[456,474,455,452,461,445,443,0,444,438],
[422,429,438,451,398,424,459,446,0,435],
[449,418,486,423,436,515,449,452,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,476,461,511,458,489,518,403,438],
[417,0,430,442,432,392,470,476,339,372],
[414,460,0,469,478,426,495,470,384,423],
[429,448,421,0,530,476,498,477,472,468],
[379,458,412,360,0,461,416,471,420,409],
[432,498,464,414,429,0,491,470,415,430],
[401,420,395,392,474,399,0,420,387,351],
[372,414,420,413,419,420,470,0,437,415],
[487,551,506,418,470,475,503,453,0,366],
[452,518,467,422,481,460,539,475,524,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,462,455,470,455,474,465,438,445],
[443,0,442,454,466,439,441,455,444,421],
[428,448,0,461,472,444,432,462,453,421],
[435,436,429,0,462,432,457,449,436,441],
[420,424,418,428,0,412,417,438,411,421],
[435,451,446,458,478,0,437,448,441,426],
[416,449,458,433,473,453,0,450,448,437],
[425,435,428,441,452,442,440,0,445,423],
[452,446,437,454,479,449,442,445,0,433],
[445,469,469,449,469,464,453,467,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,446,480,413,453,397,464,447,460],
[441,0,435,500,425,437,434,460,469,459],
[444,455,0,460,409,444,390,471,469,446],
[410,390,430,0,357,403,370,441,434,445],
[477,465,481,533,0,441,454,494,467,450],
[437,453,446,487,449,0,395,459,439,443],
[493,456,500,520,436,495,0,511,467,494],
[426,430,419,449,396,431,379,0,444,437],
[443,421,421,456,423,451,423,446,0,437],
[430,431,444,445,440,447,396,453,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,399,417,427,440,432,419,411,446],
[449,0,425,412,462,446,436,465,447,456],
[491,465,0,438,440,445,433,443,435,477],
[473,478,452,0,456,463,474,462,439,460],
[463,428,450,434,0,445,420,458,425,440],
[450,444,445,427,445,0,445,458,446,484],
[458,454,457,416,470,445,0,460,444,461],
[471,425,447,428,432,432,430,0,425,438],
[479,443,455,451,465,444,446,465,0,445],
[444,434,413,430,450,406,429,452,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,408,457,323,410,446,404,413,454],
[483,0,430,485,406,489,481,445,437,495],
[482,460,0,400,384,418,405,420,437,463],
[433,405,490,0,479,473,459,464,462,470],
[567,484,506,411,0,463,528,456,494,514],
[480,401,472,417,427,0,436,449,417,479],
[444,409,485,431,362,454,0,481,404,466],
[486,445,470,426,434,441,409,0,439,488],
[477,453,453,428,396,473,486,451,0,505],
[436,395,427,420,376,411,424,402,385,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,446,424,455,456,438,468,446,439],
[449,0,434,419,438,424,434,458,435,448],
[444,456,0,430,455,454,453,470,436,474],
[466,471,460,0,448,437,428,446,449,472],
[435,452,435,442,0,441,432,454,437,443],
[434,466,436,453,449,0,444,454,436,443],
[452,456,437,462,458,446,0,468,441,465],
[422,432,420,444,436,436,422,0,443,444],
[444,455,454,441,453,454,449,447,0,449],
[451,442,416,418,447,447,425,446,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,516,446,439,485,440,484,396,425],
[416,0,472,451,453,470,439,466,442,483],
[374,418,0,401,417,436,442,443,385,401],
[444,439,489,0,436,478,473,482,422,443],
[451,437,473,454,0,441,477,475,471,458],
[405,420,454,412,449,0,447,455,400,458],
[450,451,448,417,413,443,0,470,415,440],
[406,424,447,408,415,435,420,0,409,428],
[494,448,505,468,419,490,475,481,0,434],
[465,407,489,447,432,432,450,462,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,370,399,485,567,349,538,491,343,415],
[520,0,537,526,693,441,394,452,431,607],
[491,353,0,359,668,452,453,370,534,408],
[405,364,531,0,497,436,477,365,405,409],
[323,197,222,393,0,228,409,324,257,343],
[541,449,438,454,662,0,513,348,526,428],
[352,496,437,413,481,377,0,397,503,364],
[399,438,520,525,566,542,493,0,481,518],
[547,459,356,485,633,364,387,409,0,362],
[475,283,482,481,547,462,526,372,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,497,342,423,461,442,407,418,395],
[373,0,396,301,295,327,345,284,419,279],
[393,494,0,399,374,356,350,280,433,269],
[548,589,491,0,422,444,497,473,426,426],
[467,595,516,468,0,469,555,463,517,413],
[429,563,534,446,421,0,556,461,422,447],
[448,545,540,393,335,334,0,360,380,451],
[483,606,610,417,427,429,530,0,518,462],
[472,471,457,464,373,468,510,372,0,411],
[495,611,621,464,477,443,439,428,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,447,426,453,442,412,424,454,436],
[445,0,441,446,458,452,443,426,467,459],
[443,449,0,447,470,453,443,416,464,469],
[464,444,443,0,458,441,434,427,443,449],
[437,432,420,432,0,439,429,425,448,434],
[448,438,437,449,451,0,431,416,449,411],
[478,447,447,456,461,459,0,431,445,440],
[466,464,474,463,465,474,459,0,478,435],
[436,423,426,447,442,441,445,412,0,436],
[454,431,421,441,456,479,450,455,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,458,427,453,455,459,452,473,450],
[429,0,454,423,456,461,450,458,442,473],
[432,436,0,430,431,463,453,446,421,426],
[463,467,460,0,442,482,454,457,439,463],
[437,434,459,448,0,441,469,456,415,474],
[435,429,427,408,449,0,476,449,440,455],
[431,440,437,436,421,414,0,454,419,434],
[438,432,444,433,434,441,436,0,433,475],
[417,448,469,451,475,450,471,457,0,452],
[440,417,464,427,416,435,456,415,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,431,480,467,463,444,465,447,461],
[420,0,400,432,442,397,444,431,403,411],
[459,490,0,498,471,462,426,467,471,505],
[410,458,392,0,430,443,397,434,446,420],
[423,448,419,460,0,436,419,440,456,448],
[427,493,428,447,454,0,449,456,440,500],
[446,446,464,493,471,441,0,467,453,453],
[425,459,423,456,450,434,423,0,456,448],
[443,487,419,444,434,450,437,434,0,458],
[429,479,385,470,442,390,437,442,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,444,453,457,452,444,488,455,439],
[402,0,412,433,410,451,429,456,417,415],
[446,478,0,461,454,460,457,488,455,423],
[437,457,429,0,447,455,435,449,444,429],
[433,480,436,443,0,485,459,494,453,445],
[438,439,430,435,405,0,426,451,419,425],
[446,461,433,455,431,464,0,462,424,449],
[402,434,402,441,396,439,428,0,430,422],
[435,473,435,446,437,471,466,460,0,446],
[451,475,467,461,445,465,441,468,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,450,457,454,439,448,466,468,447],
[438,0,453,429,445,454,443,451,451,447],
[440,437,0,460,444,440,428,451,439,439],
[433,461,430,0,458,445,410,454,438,453],
[436,445,446,432,0,445,408,440,452,430],
[451,436,450,445,445,0,435,463,450,444],
[442,447,462,480,482,455,0,476,467,484],
[424,439,439,436,450,427,414,0,427,432],
[422,439,451,452,438,440,423,463,0,442],
[443,443,451,437,460,446,406,458,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,441,445,476,459,471,472,475,459],
[434,0,453,477,471,446,480,456,499,488],
[449,437,0,448,472,475,448,452,482,451],
[445,413,442,0,471,471,456,466,474,433],
[414,419,418,419,0,420,426,429,433,451],
[431,444,415,419,470,0,436,419,466,434],
[419,410,442,434,464,454,0,435,457,455],
[418,434,438,424,461,471,455,0,468,448],
[415,391,408,416,457,424,433,422,0,430],
[431,402,439,457,439,456,435,442,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,449,452,454,446,437,464,469,433],
[438,0,445,464,448,434,454,479,477,431],
[441,445,0,463,464,432,443,459,444,418],
[438,426,427,0,456,421,418,442,432,429],
[436,442,426,434,0,398,431,441,429,428],
[444,456,458,469,492,0,476,471,459,463],
[453,436,447,472,459,414,0,458,459,435],
[426,411,431,448,449,419,432,0,447,431],
[421,413,446,458,461,431,431,443,0,425],
[457,459,472,461,462,427,455,459,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,407,411,445,427,463,454,426,465],
[460,0,426,428,442,451,466,446,456,463],
[483,464,0,474,480,441,488,463,458,476],
[479,462,416,0,462,446,499,470,473,465],
[445,448,410,428,0,458,468,471,467,461],
[463,439,449,444,432,0,462,451,471,466],
[427,424,402,391,422,428,0,401,433,441],
[436,444,427,420,419,439,489,0,442,470],
[464,434,432,417,423,419,457,448,0,457],
[425,427,414,425,429,424,449,420,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,472,467,477,492,444,464,471,424],
[425,0,464,481,458,434,455,461,463,444],
[418,426,0,461,455,442,435,484,454,460],
[423,409,429,0,470,453,428,441,439,432],
[413,432,435,420,0,428,447,436,442,451],
[398,456,448,437,462,0,463,431,471,389],
[446,435,455,462,443,427,0,421,444,435],
[426,429,406,449,454,459,469,0,441,431],
[419,427,436,451,448,419,446,449,0,435],
[466,446,430,458,439,501,455,459,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,454,466,494,470,484,452,467,441],
[436,0,430,397,422,469,435,368,408,430],
[436,460,0,430,442,468,423,434,420,431],
[424,493,460,0,451,432,479,440,447,439],
[396,468,448,439,0,469,454,440,503,460],
[420,421,422,458,421,0,437,468,485,457],
[406,455,467,411,436,453,0,434,464,463],
[438,522,456,450,450,422,456,0,499,447],
[423,482,470,443,387,405,426,391,0,433],
[449,460,459,451,430,433,427,443,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,431,461,462,449,439,445,467,464],
[442,0,431,443,446,447,431,416,454,457],
[459,459,0,448,446,433,453,426,453,462],
[429,447,442,0,456,443,452,421,444,466],
[428,444,444,434,0,440,414,411,430,444],
[441,443,457,447,450,0,422,433,465,450],
[451,459,437,438,476,468,0,438,454,452],
[445,474,464,469,479,457,452,0,467,474],
[423,436,437,446,460,425,436,423,0,440],
[426,433,428,424,446,440,438,416,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,455,462,454,435,453,438,444,457],
[458,0,424,458,463,442,466,459,464,480],
[435,466,0,437,459,450,450,441,461,459],
[428,432,453,0,491,436,444,457,452,446],
[436,427,431,399,0,399,449,429,446,465],
[455,448,440,454,491,0,471,450,471,464],
[437,424,440,446,441,419,0,418,440,457],
[452,431,449,433,461,440,472,0,468,454],
[446,426,429,438,444,419,450,422,0,464],
[433,410,431,444,425,426,433,436,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,430,432,446,448,437,450,410,445],
[461,0,468,462,445,452,446,439,448,458],
[460,422,0,427,458,469,463,433,422,432],
[458,428,463,0,478,466,437,454,444,435],
[444,445,432,412,0,454,446,438,428,432],
[442,438,421,424,436,0,451,442,416,411],
[453,444,427,453,444,439,0,430,437,435],
[440,451,457,436,452,448,460,0,434,437],
[480,442,468,446,462,474,453,456,0,457],
[445,432,458,455,458,479,455,453,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,423,419,461,425,457,437,415,428],
[431,0,474,382,474,406,451,461,421,445],
[467,416,0,411,453,425,438,453,473,460],
[471,508,479,0,447,433,481,478,454,456],
[429,416,437,443,0,416,461,458,434,465],
[465,484,465,457,474,0,445,463,463,465],
[433,439,452,409,429,445,0,421,435,487],
[453,429,437,412,432,427,469,0,484,491],
[475,469,417,436,456,427,455,406,0,456],
[462,445,430,434,425,425,403,399,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,462,437,462,457,458,437,435,432],
[426,0,451,419,437,424,419,445,446,448],
[428,439,0,455,472,432,438,451,452,444],
[453,471,435,0,485,431,436,436,447,437],
[428,453,418,405,0,443,415,396,408,410],
[433,466,458,459,447,0,438,438,430,439],
[432,471,452,454,475,452,0,431,447,443],
[453,445,439,454,494,452,459,0,440,440],
[455,444,438,443,482,460,443,450,0,461],
[458,442,446,453,480,451,447,450,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,461,484,453,450,445,468,468,463],
[437,0,469,442,468,445,458,456,473,452],
[429,421,0,434,448,412,426,448,440,440],
[406,448,456,0,450,409,448,448,458,448],
[437,422,442,440,0,426,442,461,460,435],
[440,445,478,481,464,0,447,476,458,442],
[445,432,464,442,448,443,0,467,457,433],
[422,434,442,442,429,414,423,0,430,432],
[422,417,450,432,430,432,433,460,0,431],
[427,438,450,442,455,448,457,458,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,417,423,440,416,427,470,444,452],
[479,0,433,451,469,451,453,472,444,479],
[473,457,0,440,463,436,449,487,459,498],
[467,439,450,0,471,442,478,494,477,483],
[450,421,427,419,0,425,417,468,444,449],
[474,439,454,448,465,0,450,485,490,484],
[463,437,441,412,473,440,0,476,454,478],
[420,418,403,396,422,405,414,0,420,443],
[446,446,431,413,446,400,436,470,0,460],
[438,411,392,407,441,406,412,447,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,423,427,430,445,418,444,441,455],
[450,0,475,438,443,446,447,468,457,460],
[467,415,0,432,397,451,409,419,436,426],
[463,452,458,0,378,434,434,467,447,426],
[460,447,493,512,0,436,435,486,480,438],
[445,444,439,456,454,0,441,461,478,446],
[472,443,481,456,455,449,0,461,471,458],
[446,422,471,423,404,429,429,0,440,384],
[449,433,454,443,410,412,419,450,0,451],
[435,430,464,464,452,444,432,506,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,388,448,433,420,424,383,422,447,388],
[502,0,458,466,446,458,420,465,470,450],
[442,432,0,447,459,432,415,460,432,424],
[457,424,443,0,475,461,390,485,460,414],
[470,444,431,415,0,438,431,454,483,408],
[466,432,458,429,452,0,435,453,455,412],
[507,470,475,500,459,455,0,460,477,442],
[468,425,430,405,436,437,430,0,470,406],
[443,420,458,430,407,435,413,420,0,393],
[502,440,466,476,482,478,448,484,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,425,418,438,435,442,437,406,452],
[427,0,422,415,437,429,445,416,416,449],
[465,468,0,447,458,470,467,458,421,459],
[472,475,443,0,464,455,471,453,448,464],
[452,453,432,426,0,438,421,441,428,433],
[455,461,420,435,452,0,455,442,426,446],
[448,445,423,419,469,435,0,433,430,450],
[453,474,432,437,449,448,457,0,427,449],
[484,474,469,442,462,464,460,463,0,455],
[438,441,431,426,457,444,440,441,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,455,467,450,430,450,457,417,446],
[460,0,444,460,448,430,449,465,446,468],
[435,446,0,439,442,458,450,446,425,455],
[423,430,451,0,454,426,442,439,424,451],
[440,442,448,436,0,435,459,465,478,447],
[460,460,432,464,455,0,433,434,438,450],
[440,441,440,448,431,457,0,451,417,450],
[433,425,444,451,425,456,439,0,457,460],
[473,444,465,466,412,452,473,433,0,462],
[444,422,435,439,443,440,440,430,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,440,454,419,433,435,387,415,453],
[448,0,446,460,475,417,414,442,407,437],
[450,444,0,424,426,432,451,431,445,461],
[436,430,466,0,438,453,431,462,407,435],
[471,415,464,452,0,408,441,426,460,412],
[457,473,458,437,482,0,438,462,463,447],
[455,476,439,459,449,452,0,443,481,474],
[503,448,459,428,464,428,447,0,434,411],
[475,483,445,483,430,427,409,456,0,449],
[437,453,429,455,478,443,416,479,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,430,436,456,451,451,453,451,469],
[418,0,443,421,462,443,413,492,443,463],
[460,447,0,458,450,429,467,453,471,472],
[454,469,432,0,433,448,437,445,445,455],
[434,428,440,457,0,441,439,456,448,455],
[439,447,461,442,449,0,410,449,454,423],
[439,477,423,453,451,480,0,455,454,485],
[437,398,437,445,434,441,435,0,462,445],
[439,447,419,445,442,436,436,428,0,465],
[421,427,418,435,435,467,405,445,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,407,418,402,500,458,483,494,404],
[455,0,348,392,448,419,412,404,447,399],
[483,542,0,476,485,467,380,436,582,449],
[472,498,414,0,368,414,408,413,441,366],
[488,442,405,522,0,429,431,403,532,459],
[390,471,423,476,461,0,468,425,519,448],
[432,478,510,482,459,422,0,425,473,421],
[407,486,454,477,487,465,465,0,519,413],
[396,443,308,449,358,371,417,371,0,363],
[486,491,441,524,431,442,469,477,527,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,454,454,462,478,441,455,455,462],
[436,0,459,452,445,456,445,436,434,439],
[436,431,0,434,432,456,412,459,457,453],
[436,438,456,0,463,462,415,450,458,439],
[428,445,458,427,0,463,415,434,450,433],
[412,434,434,428,427,0,405,439,425,413],
[449,445,478,475,475,485,0,483,463,470],
[435,454,431,440,456,451,407,0,423,436],
[435,456,433,432,440,465,427,467,0,462],
[428,451,437,451,457,477,420,454,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,390,428,407,430,446,466,373,474],
[445,0,424,449,425,432,474,470,429,491],
[500,466,0,467,462,459,487,484,439,486],
[462,441,423,0,447,452,476,486,450,463],
[483,465,428,443,0,426,475,467,421,494],
[460,458,431,438,464,0,473,483,425,468],
[444,416,403,414,415,417,0,458,395,441],
[424,420,406,404,423,407,432,0,393,468],
[517,461,451,440,469,465,495,497,0,492],
[416,399,404,427,396,422,449,422,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,434,389,403,398,383,448,408,421],
[482,0,499,478,475,491,468,461,444,473],
[456,391,0,437,430,403,417,416,404,419],
[501,412,453,0,451,429,426,456,434,456],
[487,415,460,439,0,466,457,435,468,434],
[492,399,487,461,424,0,456,470,428,456],
[507,422,473,464,433,434,0,484,451,470],
[442,429,474,434,455,420,406,0,418,435],
[482,446,486,456,422,462,439,472,0,461],
[469,417,471,434,456,434,420,455,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,447,461,471,451,450,461,437,439],
[443,0,407,467,485,463,461,437,450,419],
[443,483,0,485,475,465,469,457,441,444],
[429,423,405,0,428,433,437,428,411,406],
[419,405,415,462,0,446,444,423,427,410],
[439,427,425,457,444,0,458,413,418,429],
[440,429,421,453,446,432,0,432,432,444],
[429,453,433,462,467,477,458,0,451,433],
[453,440,449,479,463,472,458,439,0,446],
[451,471,446,484,480,461,446,457,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,498,434,421,461,442,432,447,460],
[474,0,474,461,447,498,441,456,477,503],
[392,416,0,452,413,474,423,405,452,484],
[456,429,438,0,442,483,372,415,500,392],
[469,443,477,448,0,464,413,425,443,441],
[429,392,416,407,426,0,397,398,433,429],
[448,449,467,518,477,493,0,472,436,461],
[458,434,485,475,465,492,418,0,473,483],
[443,413,438,390,447,457,454,417,0,471],
[430,387,406,498,449,461,429,407,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,442,446,440,416,433,431,419,420],
[442,0,445,440,419,420,449,417,423,437],
[448,445,0,438,446,424,427,417,435,422],
[444,450,452,0,446,436,461,453,446,431],
[450,471,444,444,0,432,449,441,427,447],
[474,470,466,454,458,0,464,459,456,443],
[457,441,463,429,441,426,0,438,435,414],
[459,473,473,437,449,431,452,0,447,443],
[471,467,455,444,463,434,455,443,0,447],
[470,453,468,459,443,447,476,447,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,429,432,427,437,452,473,472,420],
[478,0,468,454,440,410,477,445,446,418],
[461,422,0,459,492,466,516,460,500,438],
[458,436,431,0,452,423,478,464,475,460],
[463,450,398,438,0,405,455,437,454,410],
[453,480,424,467,485,0,511,434,513,446],
[438,413,374,412,435,379,0,420,444,451],
[417,445,430,426,453,456,470,0,480,413],
[418,444,390,415,436,377,446,410,0,395],
[470,472,452,430,480,444,439,477,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,440,415,444,492,439,422,436,437],
[443,0,439,411,414,471,416,434,408,443],
[450,451,0,413,420,455,450,442,462,439],
[475,479,477,0,450,500,470,444,464,438],
[446,476,470,440,0,501,472,449,455,476],
[398,419,435,390,389,0,398,408,422,386],
[451,474,440,420,418,492,0,464,491,466],
[468,456,448,446,441,482,426,0,475,454],
[454,482,428,426,435,468,399,415,0,464],
[453,447,451,452,414,504,424,436,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,451,451,470,468,451,442,432,423],
[442,0,459,432,478,470,447,454,449,439],
[439,431,0,430,484,469,454,432,458,429],
[439,458,460,0,456,473,469,433,443,428],
[420,412,406,434,0,444,453,419,420,405],
[422,420,421,417,446,0,441,405,405,423],
[439,443,436,421,437,449,0,396,433,448],
[448,436,458,457,471,485,494,0,449,463],
[458,441,432,447,470,485,457,441,0,435],
[467,451,461,462,485,467,442,427,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,469,444,472,409,429,377,426,415],
[452,0,433,436,477,441,450,400,422,421],
[421,457,0,462,471,435,425,397,421,416],
[446,454,428,0,497,454,418,407,452,426],
[418,413,419,393,0,416,409,380,429,374],
[481,449,455,436,474,0,427,447,411,424],
[461,440,465,472,481,463,0,410,460,473],
[513,490,493,483,510,443,480,0,453,426],
[464,468,469,438,461,479,430,437,0,446],
[475,469,474,464,516,466,417,464,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,406,397,474,386,522,496,489,475],
[465,0,389,413,542,441,405,406,492,423],
[484,501,0,435,590,507,504,535,454,532],
[493,477,455,0,500,428,480,538,504,510],
[416,348,300,390,0,411,381,412,440,387],
[504,449,383,462,479,0,443,423,480,474],
[368,485,386,410,509,447,0,453,440,494],
[394,484,355,352,478,467,437,0,381,453],
[401,398,436,386,450,410,450,509,0,506],
[415,467,358,380,503,416,396,437,384,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,460,443,411,410,427,447,440,425],
[432,0,425,399,395,421,391,442,432,408],
[430,465,0,407,411,421,404,452,422,444],
[447,491,483,0,449,451,433,451,453,452],
[479,495,479,441,0,466,461,496,459,460],
[480,469,469,439,424,0,395,439,470,444],
[463,499,486,457,429,495,0,488,434,464],
[443,448,438,439,394,451,402,0,452,431],
[450,458,468,437,431,420,456,438,0,415],
[465,482,446,438,430,446,426,459,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,448,422,428,427,436,436,444,442],
[464,0,447,424,431,436,420,446,435,448],
[442,443,0,452,433,444,434,442,422,449],
[468,466,438,0,438,459,447,447,434,458],
[462,459,457,452,0,456,442,421,434,459],
[463,454,446,431,434,0,423,447,434,448],
[454,470,456,443,448,467,0,454,447,441],
[454,444,448,443,469,443,436,0,456,457],
[446,455,468,456,456,456,443,434,0,449],
[448,442,441,432,431,442,449,433,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,447,445,435,449,418,438,443,438],
[449,0,440,443,438,461,449,447,465,457],
[443,450,0,444,467,472,455,451,457,437],
[445,447,446,0,438,453,441,437,442,443],
[455,452,423,452,0,455,445,452,448,448],
[441,429,418,437,435,0,420,446,420,427],
[472,441,435,449,445,470,0,456,454,436],
[452,443,439,453,438,444,434,0,431,449],
[447,425,433,448,442,470,436,459,0,450],
[452,433,453,447,442,463,454,441,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,380,303,466,455,360,447,341,346],
[386,0,344,363,442,387,360,363,448,323],
[510,546,0,537,611,487,530,492,439,463],
[587,527,353,0,547,485,480,522,454,477],
[424,448,279,343,0,485,303,385,388,361],
[435,503,403,405,405,0,446,459,465,416],
[530,530,360,410,587,444,0,583,488,408],
[443,527,398,368,505,431,307,0,456,377],
[549,442,451,436,502,425,402,434,0,440],
[544,567,427,413,529,474,482,513,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,428,415,330,413,345,519,535,396],
[483,0,421,363,410,490,401,535,421,411],
[462,469,0,495,427,466,295,458,502,460],
[475,527,395,0,439,482,410,500,369,408],
[560,480,463,451,0,600,469,489,427,430],
[477,400,424,408,290,0,475,496,413,445],
[545,489,595,480,421,415,0,567,476,440],
[371,355,432,390,401,394,323,0,465,400],
[355,469,388,521,463,477,414,425,0,371],
[494,479,430,482,460,445,450,490,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,422,464,497,471,471,483,430,469],
[413,0,413,422,413,405,411,395,405,455],
[468,477,0,431,450,469,466,486,457,460],
[426,468,459,0,485,460,473,433,442,480],
[393,477,440,405,0,449,438,431,416,477],
[419,485,421,430,441,0,456,430,466,473],
[419,479,424,417,452,434,0,394,403,444],
[407,495,404,457,459,460,496,0,440,476],
[460,485,433,448,474,424,487,450,0,458],
[421,435,430,410,413,417,446,414,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,447,433,437,457,445,438,458,436],
[438,0,469,438,434,465,458,456,474,464],
[443,421,0,450,446,443,436,437,452,425],
[457,452,440,0,446,458,437,441,467,445],
[453,456,444,444,0,463,444,443,482,438],
[433,425,447,432,427,0,442,433,451,433],
[445,432,454,453,446,448,0,424,449,443],
[452,434,453,449,447,457,466,0,474,442],
[432,416,438,423,408,439,441,416,0,448],
[454,426,465,445,452,457,447,448,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,343,391,395,289,518,270,343,366],
[427,0,295,427,355,433,560,342,341,351],
[547,595,0,451,521,512,509,389,559,539],
[499,463,439,0,436,430,538,401,358,439],
[495,535,369,454,0,340,525,409,387,538],
[601,457,378,460,550,0,556,417,574,525],
[372,330,381,352,365,334,0,274,298,347],
[620,548,501,489,481,473,616,0,441,500],
[547,549,331,532,503,316,592,449,0,520],
[524,539,351,451,352,365,543,390,370,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,436,437,463,454,433,495,462,431],
[485,0,445,483,455,473,406,447,417,427],
[454,445,0,417,444,470,398,465,423,440],
[453,407,473,0,465,428,418,465,453,444],
[427,435,446,425,0,415,410,446,399,394],
[436,417,420,462,475,0,390,416,419,415],
[457,484,492,472,480,500,0,489,443,468],
[395,443,425,425,444,474,401,0,410,405],
[428,473,467,437,491,471,447,480,0,416],
[459,463,450,446,496,475,422,485,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,475,461,438,468,464,457,448,443],
[426,0,446,457,408,431,459,445,445,430],
[415,444,0,465,432,428,457,449,431,441],
[429,433,425,0,424,451,436,439,414,446],
[452,482,458,466,0,455,476,452,443,461],
[422,459,462,439,435,0,462,454,407,438],
[426,431,433,454,414,428,0,439,403,412],
[433,445,441,451,438,436,451,0,415,438],
[442,445,459,476,447,483,487,475,0,467],
[447,460,449,444,429,452,478,452,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,443,453,455,430,437,457,418,449],
[448,0,432,452,458,417,436,423,432,475],
[447,458,0,460,465,453,455,434,442,461],
[437,438,430,0,447,425,438,430,427,453],
[435,432,425,443,0,431,437,427,413,442],
[460,473,437,465,459,0,455,452,436,450],
[453,454,435,452,453,435,0,425,430,468],
[433,467,456,460,463,438,465,0,458,470],
[472,458,448,463,477,454,460,432,0,467],
[441,415,429,437,448,440,422,420,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,430,438,436,457,439,437,476,441],
[448,0,445,456,452,448,428,432,446,458],
[460,445,0,458,452,457,447,439,459,461],
[452,434,432,0,430,450,440,460,459,458],
[454,438,438,460,0,432,440,443,450,470],
[433,442,433,440,458,0,453,458,444,451],
[451,462,443,450,450,437,0,437,449,449],
[453,458,451,430,447,432,453,0,459,451],
[414,444,431,431,440,446,441,431,0,443],
[449,432,429,432,420,439,441,439,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,420,400,435,431,405,421,435,466],
[431,0,398,423,442,405,434,407,419,442],
[470,492,0,427,491,453,463,471,467,494],
[490,467,463,0,476,464,450,440,460,488],
[455,448,399,414,0,372,426,419,416,444],
[459,485,437,426,518,0,490,415,429,480],
[485,456,427,440,464,400,0,436,431,465],
[469,483,419,450,471,475,454,0,407,411],
[455,471,423,430,474,461,459,483,0,491],
[424,448,396,402,446,410,425,479,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,430,404,386,433,417,400,381,401],
[469,0,467,437,407,436,403,447,442,464],
[460,423,0,474,443,437,422,433,389,478],
[486,453,416,0,444,438,416,427,446,441],
[504,483,447,446,0,449,408,503,430,451],
[457,454,453,452,441,0,425,472,429,416],
[473,487,468,474,482,465,0,479,458,422],
[490,443,457,463,387,418,411,0,447,451],
[509,448,501,444,460,461,432,443,0,444],
[489,426,412,449,439,474,468,439,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,388,398,427,420,423,385,394,435,390],
[502,0,454,440,484,497,468,466,517,464],
[492,436,0,439,462,449,448,440,444,439],
[463,450,451,0,461,443,473,465,428,482],
[470,406,428,429,0,447,431,448,424,428],
[467,393,441,447,443,0,434,441,420,424],
[505,422,442,417,459,456,0,439,438,445],
[496,424,450,425,442,449,451,0,482,425],
[455,373,446,462,466,470,452,408,0,460],
[500,426,451,408,462,466,445,465,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,267,413,379,657,343,515,198,527],
[446,0,300,427,658,532,447,447,460,474],
[623,590,0,503,586,792,663,444,446,648],
[477,463,387,0,459,676,535,414,232,532],
[511,232,304,431,0,448,365,451,410,391],
[233,358,98,214,442,0,260,245,121,442],
[547,443,227,355,525,630,0,429,298,633],
[375,443,446,476,439,645,461,0,258,475],
[692,430,444,658,480,769,592,632,0,599],
[363,416,242,358,499,448,257,415,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,475,455,466,462,439,438,443,462],
[397,0,467,461,456,439,431,433,432,443],
[415,423,0,426,416,415,408,419,434,440],
[435,429,464,0,425,418,439,414,441,424],
[424,434,474,465,0,423,437,423,422,448],
[428,451,475,472,467,0,417,441,446,439],
[451,459,482,451,453,473,0,455,469,442],
[452,457,471,476,467,449,435,0,450,474],
[447,458,456,449,468,444,421,440,0,456],
[428,447,450,466,442,451,448,416,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,420,453,422,450,440,455,457,441],
[473,0,451,495,423,446,451,438,462,458],
[470,439,0,461,447,443,439,434,463,448],
[437,395,429,0,410,416,429,394,421,430],
[468,467,443,480,0,469,460,461,459,456],
[440,444,447,474,421,0,448,445,468,435],
[450,439,451,461,430,442,0,427,459,438],
[435,452,456,496,429,445,463,0,454,449],
[433,428,427,469,431,422,431,436,0,436],
[449,432,442,460,434,455,452,441,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,454,475,443,457,466,466,472,462],
[417,0,451,450,445,434,446,460,463,457],
[436,439,0,457,446,455,436,457,474,488],
[415,440,433,0,436,447,417,442,430,453],
[447,445,444,454,0,438,456,464,456,475],
[433,456,435,443,452,0,447,467,456,478],
[424,444,454,473,434,443,0,461,464,471],
[424,430,433,448,426,423,429,0,451,439],
[418,427,416,460,434,434,426,439,0,442],
[428,433,402,437,415,412,419,451,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,424,452,516,493,450,473,472,395],
[432,0,421,457,430,465,425,442,472,378],
[466,469,0,463,491,420,430,460,470,393],
[438,433,427,0,430,480,403,485,446,368],
[374,460,399,460,0,464,389,474,422,456],
[397,425,470,410,426,0,422,460,453,378],
[440,465,460,487,501,468,0,484,459,454],
[417,448,430,405,416,430,406,0,413,365],
[418,418,420,444,468,437,431,477,0,396],
[495,512,497,522,434,512,436,525,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,557,557,420,536,550,630,533,505],
[381,0,531,516,454,474,467,546,590,411],
[333,359,0,424,340,365,418,450,423,364],
[333,374,466,0,381,382,431,496,439,397],
[470,436,550,509,0,476,464,545,488,516],
[354,416,525,508,414,0,504,477,488,440],
[340,423,472,459,426,386,0,516,473,413],
[260,344,440,394,345,413,374,0,421,418],
[357,300,467,451,402,402,417,469,0,415],
[385,479,526,493,374,450,477,472,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,427,410,436,423,441,447,414,403],
[469,0,448,464,438,481,486,483,465,452],
[463,442,0,413,431,433,436,468,433,433],
[480,426,477,0,455,454,459,482,439,443],
[454,452,459,435,0,449,459,448,410,437],
[467,409,457,436,441,0,450,473,405,428],
[449,404,454,431,431,440,0,478,427,435],
[443,407,422,408,442,417,412,0,391,395],
[476,425,457,451,480,485,463,499,0,439],
[487,438,457,447,453,462,455,495,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,391,478,494,412,452,419,494,502,354],
[499,0,465,578,448,447,502,594,565,412],
[412,425,0,562,367,422,530,612,573,307],
[396,312,328,0,353,344,479,544,452,227],
[478,442,523,537,0,420,514,609,540,453],
[438,443,468,546,470,0,598,589,551,321],
[471,388,360,411,376,292,0,470,464,285],
[396,296,278,346,281,301,420,0,417,290],
[388,325,317,438,350,339,426,473,0,292],
[536,478,583,663,437,569,605,600,598,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,457,405,461,415,420,428,398,426],
[401,0,447,405,361,419,494,376,441,412],
[433,443,0,436,372,460,449,341,386,427],
[485,485,454,0,439,504,510,447,462,441],
[429,529,518,451,0,470,470,434,448,511],
[475,471,430,386,420,0,507,452,460,460],
[470,396,441,380,420,383,0,365,361,351],
[462,514,549,443,456,438,525,0,500,485],
[492,449,504,428,442,430,529,390,0,464],
[464,478,463,449,379,430,539,405,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,456,440,467,419,460,424,425,477],
[427,0,452,446,456,428,435,433,411,444],
[434,438,0,428,448,415,417,420,413,472],
[450,444,462,0,463,439,433,459,436,466],
[423,434,442,427,0,407,418,418,406,448],
[471,462,475,451,483,0,455,462,437,491],
[430,455,473,457,472,435,0,431,441,465],
[466,457,470,431,472,428,459,0,453,446],
[465,479,477,454,484,453,449,437,0,448],
[413,446,418,424,442,399,425,444,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,478,443,450,477,503,436,471,480],
[423,0,454,401,444,474,444,409,434,463],
[412,436,0,447,391,466,424,427,418,426],
[447,489,443,0,436,497,433,457,467,476],
[440,446,499,454,0,468,492,436,464,492],
[413,416,424,393,422,0,433,409,386,433],
[387,446,466,457,398,457,0,455,422,449],
[454,481,463,433,454,481,435,0,411,453],
[419,456,472,423,426,504,468,479,0,469],
[410,427,464,414,398,457,441,437,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,405,408,421,417,421,457,431,396],
[467,0,462,463,448,454,463,473,430,415],
[485,428,0,428,419,428,473,463,496,424],
[482,427,462,0,461,384,462,441,496,416],
[469,442,471,429,0,403,473,462,489,424],
[473,436,462,506,487,0,473,461,492,452],
[469,427,417,428,417,417,0,428,421,416],
[433,417,427,449,428,429,462,0,510,393],
[459,460,394,394,401,398,469,380,0,396],
[494,475,466,474,466,438,474,497,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,577,558,497,622,532,586,468,425,603],
[313,0,557,459,517,556,533,486,414,616],
[332,333,0,325,426,449,467,305,379,321],
[393,431,565,0,563,450,592,360,479,623],
[268,373,464,327,0,405,435,242,419,431],
[358,334,441,440,485,0,561,335,349,481],
[304,357,423,298,455,329,0,298,246,491],
[422,404,585,530,648,555,592,0,484,499],
[465,476,511,411,471,541,644,406,0,508],
[287,274,569,267,459,409,399,391,382,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,489,444,462,457,461,453,488,463],
[439,0,469,435,462,450,447,473,472,443],
[401,421,0,424,436,418,431,440,453,415],
[446,455,466,0,427,464,430,458,457,425],
[428,428,454,463,0,443,436,456,466,456],
[433,440,472,426,447,0,435,434,466,444],
[429,443,459,460,454,455,0,457,467,462],
[437,417,450,432,434,456,433,0,463,433],
[402,418,437,433,424,424,423,427,0,426],
[427,447,475,465,434,446,428,457,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,458,466,431,425,397,461,469,456],
[468,0,434,425,421,416,440,447,436,440],
[432,456,0,419,440,475,434,460,453,429],
[424,465,471,0,460,433,441,429,449,457],
[459,469,450,430,0,447,444,456,479,487],
[465,474,415,457,443,0,443,462,483,474],
[493,450,456,449,446,447,0,483,451,442],
[429,443,430,461,434,428,407,0,430,472],
[421,454,437,441,411,407,439,460,0,448],
[434,450,461,433,403,416,448,418,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,449,435,439,455,454,422,460,436],
[455,0,452,435,445,455,442,438,450,448],
[441,438,0,427,436,442,442,423,469,442],
[455,455,463,0,439,458,467,431,449,460],
[451,445,454,451,0,472,469,457,459,449],
[435,435,448,432,418,0,440,429,449,445],
[436,448,448,423,421,450,0,425,446,443],
[468,452,467,459,433,461,465,0,463,453],
[430,440,421,441,431,441,444,427,0,441],
[454,442,448,430,441,445,447,437,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,462,469,443,471,489,499,478,462],
[412,0,432,439,430,453,443,441,442,407],
[428,458,0,469,441,453,450,443,445,422],
[421,451,421,0,431,441,443,437,439,426],
[447,460,449,459,0,421,454,466,454,449],
[419,437,437,449,469,0,442,425,434,435],
[401,447,440,447,436,448,0,460,432,424],
[391,449,447,453,424,465,430,0,445,436],
[412,448,445,451,436,456,458,445,0,424],
[428,483,468,464,441,455,466,454,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,405,364,340,384,325,500,442,422],
[441,0,531,345,333,371,377,475,394,413],
[485,359,0,372,356,387,416,467,375,429],
[526,545,518,0,491,437,475,545,444,523],
[550,557,534,399,0,395,462,494,469,480],
[506,519,503,453,495,0,419,481,436,551],
[565,513,474,415,428,471,0,552,458,488],
[390,415,423,345,396,409,338,0,406,394],
[448,496,515,446,421,454,432,484,0,522],
[468,477,461,367,410,339,402,496,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,469,482,518,455,471,448,552,440],
[428,0,480,503,427,434,478,397,483,407],
[421,410,0,455,393,420,505,419,491,472],
[408,387,435,0,462,378,457,399,475,367],
[372,463,497,428,0,411,454,443,478,457],
[435,456,470,512,479,0,522,440,547,428],
[419,412,385,433,436,368,0,373,448,444],
[442,493,471,491,447,450,517,0,488,480],
[338,407,399,415,412,343,442,402,0,400],
[450,483,418,523,433,462,446,410,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,446,476,462,460,460,467,469,430],
[432,0,455,449,479,438,461,450,465,427],
[444,435,0,450,452,470,448,465,466,451],
[414,441,440,0,449,464,430,438,445,413],
[428,411,438,441,0,444,419,424,443,424],
[430,452,420,426,446,0,447,425,436,431],
[430,429,442,460,471,443,0,425,444,427],
[423,440,425,452,466,465,465,0,439,435],
[421,425,424,445,447,454,446,451,0,438],
[460,463,439,477,466,459,463,455,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,459,468,423,459,429,457,446,434],
[463,0,448,469,430,460,464,457,442,455],
[431,442,0,430,422,461,436,457,421,416],
[422,421,460,0,433,462,404,418,470,422],
[467,460,468,457,0,473,463,459,445,431],
[431,430,429,428,417,0,449,434,437,434],
[461,426,454,486,427,441,0,446,468,438],
[433,433,433,472,431,456,444,0,459,438],
[444,448,469,420,445,453,422,431,0,459],
[456,435,474,468,459,456,452,452,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,442,493,442,437,404,450,465,464],
[422,0,462,450,439,449,434,466,432,474],
[448,428,0,441,461,446,444,421,437,469],
[397,440,449,0,437,435,408,421,426,459],
[448,451,429,453,0,476,450,452,457,486],
[453,441,444,455,414,0,419,442,430,449],
[486,456,446,482,440,471,0,448,465,473],
[440,424,469,469,438,448,442,0,455,476],
[425,458,453,464,433,460,425,435,0,435],
[426,416,421,431,404,441,417,414,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,458,463,466,446,446,439,448,448],
[442,0,448,445,458,417,438,455,430,435],
[432,442,0,438,449,437,439,474,430,454],
[427,445,452,0,450,461,446,462,446,439],
[424,432,441,440,0,423,413,438,428,434],
[444,473,453,429,467,0,462,459,466,459],
[444,452,451,444,477,428,0,456,433,469],
[451,435,416,428,452,431,434,0,426,438],
[442,460,460,444,462,424,457,464,0,459],
[442,455,436,451,456,431,421,452,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,460,453,454,456,416,460,468,448],
[440,0,457,466,464,444,447,449,458,461],
[430,433,0,447,448,439,432,432,455,447],
[437,424,443,0,461,443,440,447,443,447],
[436,426,442,429,0,421,428,440,459,457],
[434,446,451,447,469,0,428,453,459,459],
[474,443,458,450,462,462,0,477,461,455],
[430,441,458,443,450,437,413,0,439,446],
[422,432,435,447,431,431,429,451,0,433],
[442,429,443,443,433,431,435,444,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,415,421,426,436,430,420,438,404],
[467,0,431,434,439,420,460,438,453,413],
[475,459,0,457,449,423,441,435,455,447],
[469,456,433,0,440,426,428,435,436,442],
[464,451,441,450,0,448,448,433,446,444],
[454,470,467,464,442,0,451,438,446,454],
[460,430,449,462,442,439,0,455,457,449],
[470,452,455,455,457,452,435,0,462,455],
[452,437,435,454,444,444,433,428,0,437],
[486,477,443,448,446,436,441,435,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,521,473,532,506,461,551,535,451],
[446,0,436,429,481,399,414,475,418,379],
[369,454,0,469,428,455,436,503,442,443],
[417,461,421,0,460,406,397,466,398,362],
[358,409,462,430,0,374,365,368,379,377],
[384,491,435,484,516,0,433,496,435,379],
[429,476,454,493,525,457,0,445,414,424],
[339,415,387,424,522,394,445,0,421,392],
[355,472,448,492,511,455,476,469,0,397],
[439,511,447,528,513,511,466,498,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,424,428,429,455,439,441,435,448],
[461,0,448,434,455,466,467,453,459,449],
[466,442,0,427,445,456,447,434,443,442],
[462,456,463,0,443,446,448,455,452,454],
[461,435,445,447,0,476,466,433,454,455],
[435,424,434,444,414,0,461,445,419,466],
[451,423,443,442,424,429,0,430,440,439],
[449,437,456,435,457,445,460,0,454,472],
[455,431,447,438,436,471,450,436,0,443],
[442,441,448,436,435,424,451,418,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,438,431,431,431,442,426,449,445],
[456,0,453,435,445,438,452,431,459,457],
[452,437,0,443,446,444,445,434,461,467],
[459,455,447,0,460,452,456,435,467,465],
[459,445,444,430,0,429,433,436,457,457],
[459,452,446,438,461,0,459,455,437,447],
[448,438,445,434,457,431,0,431,445,446],
[464,459,456,455,454,435,459,0,468,485],
[441,431,429,423,433,453,445,422,0,461],
[445,433,423,425,433,443,444,405,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,510,459,417,441,460,481,459,468],
[433,0,431,438,401,425,403,416,419,416],
[380,459,0,432,397,433,381,422,429,424],
[431,452,458,0,434,445,433,465,430,421],
[473,489,493,456,0,468,446,466,439,416],
[449,465,457,445,422,0,413,434,430,436],
[430,487,509,457,444,477,0,462,498,481],
[409,474,468,425,424,456,428,0,449,457],
[431,471,461,460,451,460,392,441,0,442],
[422,474,466,469,474,454,409,433,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,388,432,445,380,431,453,426,427,459],
[502,0,446,457,454,455,486,441,454,473],
[458,444,0,488,435,408,514,464,451,461],
[445,433,402,0,384,459,425,425,414,433],
[510,436,455,506,0,496,471,472,472,511],
[459,435,482,431,394,0,469,472,441,467],
[437,404,376,465,419,421,0,450,412,413],
[464,449,426,465,418,418,440,0,407,419],
[463,436,439,476,418,449,478,483,0,486],
[431,417,429,457,379,423,477,471,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,441,417,456,441,450,442,424,416],
[481,0,531,426,467,434,508,469,448,426],
[449,359,0,418,423,423,421,405,426,414],
[473,464,472,0,435,489,476,426,480,484],
[434,423,467,455,0,451,456,406,420,490],
[449,456,467,401,439,0,489,435,454,424],
[440,382,469,414,434,401,0,413,407,405],
[448,421,485,464,484,455,477,0,440,434],
[466,442,464,410,470,436,483,450,0,411],
[474,464,476,406,400,466,485,456,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,503,607,444,399,478,472,453,496],
[392,0,485,476,325,393,473,389,389,392],
[387,405,0,464,290,331,445,380,431,380],
[283,414,426,0,382,346,487,367,381,558],
[446,565,600,508,0,516,571,541,433,521],
[491,497,559,544,374,0,581,426,460,481],
[412,417,445,403,319,309,0,338,405,426],
[418,501,510,523,349,464,552,0,383,462],
[437,501,459,509,457,430,485,507,0,349],
[394,498,510,332,369,409,464,428,541,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,466,443,413,433,438,457,446,440],
[437,0,431,420,427,439,421,439,438,427],
[424,459,0,443,429,443,436,460,427,423],
[447,470,447,0,440,423,427,450,433,444],
[477,463,461,450,0,452,446,474,435,461],
[457,451,447,467,438,0,447,479,451,461],
[452,469,454,463,444,443,0,479,452,448],
[433,451,430,440,416,411,411,0,425,424],
[444,452,463,457,455,439,438,465,0,450],
[450,463,467,446,429,429,442,466,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,441,453,432,432,434,440,461,431],
[445,0,472,447,502,471,438,435,453,460],
[449,418,0,450,446,454,413,399,455,427],
[437,443,440,0,459,462,442,445,451,454],
[458,388,444,431,0,447,409,431,418,451],
[458,419,436,428,443,0,400,426,472,430],
[456,452,477,448,481,490,0,441,495,468],
[450,455,491,445,459,464,449,0,490,467],
[429,437,435,439,472,418,395,400,0,422],
[459,430,463,436,439,460,422,423,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,429,415,447,436,427,422,431,424],
[446,0,458,445,448,440,435,422,432,419],
[461,432,0,443,444,416,433,421,450,420],
[475,445,447,0,474,439,442,439,459,450],
[443,442,446,416,0,439,429,427,436,433],
[454,450,474,451,451,0,443,446,455,442],
[463,455,457,448,461,447,0,425,444,445],
[468,468,469,451,463,444,465,0,444,466],
[459,458,440,431,454,435,446,446,0,442],
[466,471,470,440,457,448,445,424,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,444,425,480,385,394,427,455,473],
[458,0,432,427,474,374,430,446,401,495],
[446,458,0,436,472,453,408,434,424,411],
[465,463,454,0,527,443,462,463,449,469],
[410,416,418,363,0,353,370,383,439,419],
[505,516,437,447,537,0,447,479,529,444],
[496,460,482,428,520,443,0,496,455,464],
[463,444,456,427,507,411,394,0,447,436],
[435,489,466,441,451,361,435,443,0,413],
[417,395,479,421,471,446,426,454,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,443,449,430,434,470,438,436,427],
[442,0,425,453,419,434,480,443,448,446],
[447,465,0,450,422,436,462,442,437,443],
[441,437,440,0,407,433,472,429,443,429],
[460,471,468,483,0,471,488,470,444,451],
[456,456,454,457,419,0,465,458,449,448],
[420,410,428,418,402,425,0,422,428,401],
[452,447,448,461,420,432,468,0,468,445],
[454,442,453,447,446,441,462,422,0,444],
[463,444,447,461,439,442,489,445,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,449,398,414,459,417,484,386,419],
[408,0,451,420,415,439,415,490,411,447],
[441,439,0,438,459,454,429,466,417,443],
[492,470,452,0,450,476,453,501,444,460],
[476,475,431,440,0,467,403,505,380,507],
[431,451,436,414,423,0,400,491,400,410],
[473,475,461,437,487,490,0,509,452,453],
[406,400,424,389,385,399,381,0,387,406],
[504,479,473,446,510,490,438,503,0,454],
[471,443,447,430,383,480,437,484,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,427,449,398,427,465,453,427,451],
[473,0,450,464,448,487,496,457,417,399],
[463,440,0,437,481,411,489,477,436,492],
[441,426,453,0,477,440,454,450,455,411],
[492,442,409,413,0,408,469,392,397,455],
[463,403,479,450,482,0,498,458,445,450],
[425,394,401,436,421,392,0,413,374,422],
[437,433,413,440,498,432,477,0,447,483],
[463,473,454,435,493,445,516,443,0,457],
[439,491,398,479,435,440,468,407,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,475,478,479,457,459,478,456,437],
[431,0,497,462,457,442,447,463,419,501],
[415,393,0,434,473,468,458,473,438,431],
[412,428,456,0,445,418,459,409,441,395],
[411,433,417,445,0,413,470,433,441,396],
[433,448,422,472,477,0,474,500,456,449],
[431,443,432,431,420,416,0,425,423,406],
[412,427,417,481,457,390,465,0,396,401],
[434,471,452,449,449,434,467,494,0,458],
[453,389,459,495,494,441,484,489,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,452,442,432,436,441,451,461,421],
[448,0,421,404,423,397,443,450,438,430],
[438,469,0,445,423,453,447,445,455,440],
[448,486,445,0,415,432,456,425,449,441],
[458,467,467,475,0,427,456,454,474,470],
[454,493,437,458,463,0,454,438,454,446],
[449,447,443,434,434,436,0,427,448,426],
[439,440,445,465,436,452,463,0,459,455],
[429,452,435,441,416,436,442,431,0,444],
[469,460,450,449,420,444,464,435,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,463,450,466,418,464,455,438,447],
[428,0,446,427,471,433,430,444,450,433],
[427,444,0,451,472,451,454,450,445,456],
[440,463,439,0,470,432,461,457,449,443],
[424,419,418,420,0,405,433,438,408,415],
[472,457,439,458,485,0,459,452,432,460],
[426,460,436,429,457,431,0,456,427,432],
[435,446,440,433,452,438,434,0,438,456],
[452,440,445,441,482,458,463,452,0,456],
[443,457,434,447,475,430,458,434,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,471,441,441,440,440,441,460,438],
[439,0,454,445,434,429,452,415,452,436],
[419,436,0,448,438,456,417,422,465,411],
[449,445,442,0,436,421,423,440,435,431],
[449,456,452,454,0,413,446,431,463,418],
[450,461,434,469,477,0,445,448,465,441],
[450,438,473,467,444,445,0,435,457,449],
[449,475,468,450,459,442,455,0,480,449],
[430,438,425,455,427,425,433,410,0,420],
[452,454,479,459,472,449,441,441,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,432,455,421,445,463,437,427,477],
[401,0,424,388,455,420,447,442,429,445],
[458,466,0,494,456,462,478,504,417,457],
[435,502,396,0,458,414,487,489,461,463],
[469,435,434,432,0,489,499,471,420,469],
[445,470,428,476,401,0,487,470,434,455],
[427,443,412,403,391,403,0,417,408,459],
[453,448,386,401,419,420,473,0,439,481],
[463,461,473,429,470,456,482,451,0,484],
[413,445,433,427,421,435,431,409,406,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,453,518,480,430,508,437,493,462],
[472,0,473,503,484,471,502,491,541,408],
[437,417,0,491,468,420,473,442,504,388],
[372,387,399,0,424,383,404,365,416,349],
[410,406,422,466,0,449,461,428,513,423],
[460,419,470,507,441,0,505,448,549,380],
[382,388,417,486,429,385,0,430,515,422],
[453,399,448,525,462,442,460,0,497,411],
[397,349,386,474,377,341,375,393,0,319],
[428,482,502,541,467,510,468,479,571,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,443,440,428,429,465,434,432,453],
[432,0,457,465,466,438,450,447,438,481],
[447,433,0,452,441,451,460,457,447,454],
[450,425,438,0,425,399,447,466,433,464],
[462,424,449,465,0,441,481,474,429,478],
[461,452,439,491,449,0,443,467,466,455],
[425,440,430,443,409,447,0,428,426,452],
[456,443,433,424,416,423,462,0,427,450],
[458,452,443,457,461,424,464,463,0,473],
[437,409,436,426,412,435,438,440,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,435,426,409,412,432,430,433,422],
[429,0,434,398,427,413,415,410,421,396],
[455,456,0,409,452,431,427,441,430,452],
[464,492,481,0,450,471,467,470,445,478],
[481,463,438,440,0,423,459,450,449,431],
[478,477,459,419,467,0,438,430,440,435],
[458,475,463,423,431,452,0,459,430,467],
[460,480,449,420,440,460,431,0,440,448],
[457,469,460,445,441,450,460,450,0,456],
[468,494,438,412,459,455,423,442,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,416,448,428,443,449,448,448,452],
[431,0,437,438,432,442,474,451,437,437],
[474,453,0,444,455,445,472,472,437,453],
[442,452,446,0,469,437,447,454,448,448],
[462,458,435,421,0,448,464,454,447,442],
[447,448,445,453,442,0,464,459,445,447],
[441,416,418,443,426,426,0,435,432,427],
[442,439,418,436,436,431,455,0,445,438],
[442,453,453,442,443,445,458,445,0,447],
[438,453,437,442,448,443,463,452,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,443,438,438,431,445,465,428,462],
[441,0,457,458,433,447,439,449,446,442],
[447,433,0,446,426,440,447,474,448,440],
[452,432,444,0,422,435,449,454,429,442],
[452,457,464,468,0,434,439,476,464,476],
[459,443,450,455,456,0,460,474,440,439],
[445,451,443,441,451,430,0,443,438,421],
[425,441,416,436,414,416,447,0,436,434],
[462,444,442,461,426,450,452,454,0,450],
[428,448,450,448,414,451,469,456,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,460,428,491,437,436,455,442,430],
[411,0,485,410,437,412,415,470,453,461],
[430,405,0,413,431,439,445,435,421,425],
[462,480,477,0,446,480,482,519,438,471],
[399,453,459,444,0,457,447,470,430,436],
[453,478,451,410,433,0,469,422,425,432],
[454,475,445,408,443,421,0,460,412,458],
[435,420,455,371,420,468,430,0,438,419],
[448,437,469,452,460,465,478,452,0,449],
[460,429,465,419,454,458,432,471,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,456,464,447,451,446,423,456,476],
[422,0,437,455,415,430,434,425,436,453],
[434,453,0,439,403,435,408,444,412,437],
[426,435,451,0,415,443,438,443,446,434],
[443,475,487,475,0,453,437,416,456,495],
[439,460,455,447,437,0,429,423,418,444],
[444,456,482,452,453,461,0,436,444,453],
[467,465,446,447,474,467,454,0,440,455],
[434,454,478,444,434,472,446,450,0,452],
[414,437,453,456,395,446,437,435,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,451,432,451,417,447,425,451,428],
[468,0,470,430,470,444,440,439,452,447],
[439,420,0,413,461,432,417,453,435,441],
[458,460,477,0,447,419,441,429,437,437],
[439,420,429,443,0,421,429,418,424,420],
[473,446,458,471,469,0,442,465,458,446],
[443,450,473,449,461,448,0,440,446,447],
[465,451,437,461,472,425,450,0,462,457],
[439,438,455,453,466,432,444,428,0,429],
[462,443,449,453,470,444,443,433,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,470,479,496,468,444,474,462,460],
[404,0,433,470,434,460,432,416,450,411],
[420,457,0,471,451,477,462,452,452,435],
[411,420,419,0,418,437,429,438,389,408],
[394,456,439,472,0,411,431,403,444,439],
[422,430,413,453,479,0,410,427,418,432],
[446,458,428,461,459,480,0,444,459,447],
[416,474,438,452,487,463,446,0,452,432],
[428,440,438,501,446,472,431,438,0,437],
[430,479,455,482,451,458,443,458,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,417,414,420,453,437,457,450,439],
[442,0,463,452,456,450,486,490,519,446],
[473,427,0,426,448,465,436,479,441,443],
[476,438,464,0,427,450,440,475,458,444],
[470,434,442,463,0,423,496,475,479,471],
[437,440,425,440,467,0,462,469,488,443],
[453,404,454,450,394,428,0,432,446,402],
[433,400,411,415,415,421,458,0,440,416],
[440,371,449,432,411,402,444,450,0,415],
[451,444,447,446,419,447,488,474,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,450,460,450,452,433,441,469,452],
[445,0,455,472,450,443,442,449,461,465],
[440,435,0,470,459,448,446,441,476,473],
[430,418,420,0,434,439,441,425,442,441],
[440,440,431,456,0,445,433,448,467,447],
[438,447,442,451,445,0,435,447,456,452],
[457,448,444,449,457,455,0,441,471,465],
[449,441,449,465,442,443,449,0,460,448],
[421,429,414,448,423,434,419,430,0,442],
[438,425,417,449,443,438,425,442,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,421,461,461,447,425,451,464,425],
[463,0,472,466,450,470,455,466,455,444],
[469,418,0,492,467,508,439,478,495,498],
[429,424,398,0,424,437,409,409,426,429],
[429,440,423,466,0,465,426,451,465,452],
[443,420,382,453,425,0,422,444,424,437],
[465,435,451,481,464,468,0,435,465,432],
[439,424,412,481,439,446,455,0,464,437],
[426,435,395,464,425,466,425,426,0,435],
[465,446,392,461,438,453,458,453,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,458,412,482,398,428,395,468,423],
[458,0,460,440,470,441,452,441,472,449],
[432,430,0,432,465,421,462,432,453,465],
[478,450,458,0,480,448,457,436,490,466],
[408,420,425,410,0,362,450,420,418,403],
[492,449,469,442,528,0,468,464,493,465],
[462,438,428,433,440,422,0,434,437,437],
[495,449,458,454,470,426,456,0,483,474],
[422,418,437,400,472,397,453,407,0,393],
[467,441,425,424,487,425,453,416,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,457,435,445,419,423,435,408,427],
[448,0,457,458,454,426,443,452,415,423],
[433,433,0,448,451,430,437,426,435,429],
[455,432,442,0,444,437,426,450,416,445],
[445,436,439,446,0,416,431,419,406,410],
[471,464,460,453,474,0,441,443,452,439],
[467,447,453,464,459,449,0,426,436,436],
[455,438,464,440,471,447,464,0,444,442],
[482,475,455,474,484,438,454,446,0,435],
[463,467,461,445,480,451,454,448,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,435,434,441,425,452,446,445,422],
[480,0,470,481,452,434,449,453,482,449],
[455,420,0,433,425,473,457,441,447,438],
[456,409,457,0,464,474,461,476,435,451],
[449,438,465,426,0,439,459,444,444,452],
[465,456,417,416,451,0,446,486,452,431],
[438,441,433,429,431,444,0,445,412,400],
[444,437,449,414,446,404,445,0,407,402],
[445,408,443,455,446,438,478,483,0,454],
[468,441,452,439,438,459,490,488,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,376,466,496,333,422,542,419,385,457],
[514,0,563,525,320,505,562,503,521,474],
[424,327,0,420,267,364,414,324,355,338],
[394,365,470,0,259,392,414,361,333,289],
[557,570,623,631,0,435,525,522,512,544],
[468,385,526,498,455,0,466,461,485,421],
[348,328,476,476,365,424,0,436,432,412],
[471,387,566,529,368,429,454,0,504,533],
[505,369,535,557,378,405,458,386,0,445],
[433,416,552,601,346,469,478,357,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,433,444,433,439,452,444,470,437],
[446,0,442,426,448,437,444,437,474,420],
[457,448,0,450,434,458,444,478,473,425],
[446,464,440,0,458,454,466,475,468,450],
[457,442,456,432,0,466,460,459,470,432],
[451,453,432,436,424,0,443,437,465,429],
[438,446,446,424,430,447,0,446,440,425],
[446,453,412,415,431,453,444,0,444,439],
[420,416,417,422,420,425,450,446,0,435],
[453,470,465,440,458,461,465,451,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,481,465,439,444,455,452,463,447],
[435,0,453,439,439,435,436,433,458,447],
[409,437,0,437,430,440,436,436,448,421],
[425,451,453,0,436,441,434,426,450,434],
[451,451,460,454,0,457,451,453,465,435],
[446,455,450,449,433,0,431,426,459,432],
[435,454,454,456,439,459,0,444,460,437],
[438,457,454,464,437,464,446,0,468,456],
[427,432,442,440,425,431,430,422,0,436],
[443,443,469,456,455,458,453,434,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,489,433,417,418,467,483,466,451],
[428,0,449,457,445,420,434,463,448,420],
[401,441,0,421,401,382,417,439,420,387],
[457,433,469,0,450,452,425,464,459,417],
[473,445,489,440,0,423,453,466,455,446],
[472,470,508,438,467,0,465,488,469,469],
[423,456,473,465,437,425,0,478,453,458],
[407,427,451,426,424,402,412,0,423,418],
[424,442,470,431,435,421,437,467,0,435],
[439,470,503,473,444,421,432,472,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,471,485,486,441,462,465,463,473],
[431,0,465,473,446,449,456,452,464,466],
[419,425,0,438,437,417,433,444,435,421],
[405,417,452,0,425,425,427,425,441,434],
[404,444,453,465,0,441,439,442,451,457],
[449,441,473,465,449,0,445,445,469,461],
[428,434,457,463,451,445,0,453,457,442],
[425,438,446,465,448,445,437,0,433,457],
[427,426,455,449,439,421,433,457,0,437],
[417,424,469,456,433,429,448,433,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,462,481,454,466,460,440,452,510],
[404,0,426,448,427,432,390,413,415,472],
[428,464,0,464,420,434,419,448,426,492],
[409,442,426,0,367,434,429,432,444,453],
[436,463,470,523,0,486,493,458,468,491],
[424,458,456,456,404,0,413,428,438,468],
[430,500,471,461,397,477,0,486,454,501],
[450,477,442,458,432,462,404,0,468,500],
[438,475,464,446,422,452,436,422,0,489],
[380,418,398,437,399,422,389,390,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,434,479,390,433,437,430,392,355],
[457,0,362,450,350,352,367,365,315,344],
[456,528,0,505,506,410,467,378,388,371],
[411,440,385,0,503,398,414,324,354,386],
[500,540,384,387,0,424,447,386,447,361],
[457,538,480,492,466,0,462,415,384,408],
[453,523,423,476,443,428,0,425,419,382],
[460,525,512,566,504,475,465,0,465,411],
[498,575,502,536,443,506,471,425,0,455],
[535,546,519,504,529,482,508,479,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,435,499,477,466,417,475,449,554],
[394,0,454,392,555,467,534,487,450,474],
[455,436,0,372,503,473,524,520,451,518],
[391,498,518,0,545,512,440,470,458,572],
[413,335,387,345,0,340,445,423,337,372],
[424,423,417,378,550,0,507,468,392,460],
[473,356,366,450,445,383,0,590,325,432],
[415,403,370,420,467,422,300,0,369,456],
[441,440,439,432,553,498,565,521,0,551],
[336,416,372,318,518,430,458,434,339,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,458,544,445,463,538,526,573,574],
[397,0,457,511,449,418,391,481,361,632],
[432,433,0,635,375,599,422,317,498,572],
[346,379,255,0,239,496,281,431,410,406],
[445,441,515,651,0,561,442,579,710,476],
[427,472,291,394,329,0,438,393,479,465],
[352,499,468,609,448,452,0,409,490,497],
[364,409,573,459,311,497,481,0,540,434],
[317,529,392,480,180,411,400,350,0,410],
[316,258,318,484,414,425,393,456,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,488,403,363,436,442,391,464,464],
[452,0,504,359,407,423,420,398,455,397],
[402,386,0,344,366,400,342,395,392,360],
[487,531,546,0,443,456,445,458,492,430],
[527,483,524,447,0,434,414,417,527,441],
[454,467,490,434,456,0,465,418,546,441],
[448,470,548,445,476,425,0,439,498,456],
[499,492,495,432,473,472,451,0,527,394],
[426,435,498,398,363,344,392,363,0,350],
[426,493,530,460,449,449,434,496,540,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,411,446,438,437,461,451,423,435],
[454,0,430,452,440,454,453,445,443,449],
[479,460,0,478,459,479,477,463,448,442],
[444,438,412,0,438,432,462,443,422,437],
[452,450,431,452,0,455,459,445,424,455],
[453,436,411,458,435,0,467,447,445,457],
[429,437,413,428,431,423,0,440,431,417],
[439,445,427,447,445,443,450,0,440,430],
[467,447,442,468,466,445,459,450,0,448],
[455,441,448,453,435,433,473,460,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,424,445,431,431,487,436,492,466],
[397,0,397,412,447,408,416,389,371,442],
[466,493,0,445,430,446,469,394,461,438],
[445,478,445,0,417,472,477,397,452,480],
[459,443,460,473,0,430,440,420,468,460],
[459,482,444,418,460,0,470,450,418,438],
[403,474,421,413,450,420,0,390,448,427],
[454,501,496,493,470,440,500,0,490,477],
[398,519,429,438,422,472,442,400,0,450],
[424,448,452,410,430,452,463,413,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,459,457,465,438,449,453,457,452],
[445,0,459,436,456,424,443,461,443,458],
[431,431,0,438,455,426,452,448,456,447],
[433,454,452,0,461,456,457,473,466,467],
[425,434,435,429,0,419,428,438,425,445],
[452,466,464,434,471,0,462,456,459,452],
[441,447,438,433,462,428,0,466,446,451],
[437,429,442,417,452,434,424,0,426,420],
[433,447,434,424,465,431,444,464,0,422],
[438,432,443,423,445,438,439,470,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,431,430,444,416,468,446,452,453],
[449,0,438,462,440,442,440,460,436,440],
[459,452,0,453,432,435,468,459,426,434],
[460,428,437,0,447,455,471,460,421,433],
[446,450,458,443,0,438,432,453,456,452],
[474,448,455,435,452,0,460,450,422,446],
[422,450,422,419,458,430,0,440,438,433],
[444,430,431,430,437,440,450,0,413,441],
[438,454,464,469,434,468,452,477,0,433],
[437,450,456,457,438,444,457,449,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,406,456,441,407,450,399,437,430],
[464,0,415,448,417,433,457,456,425,432],
[484,475,0,469,447,455,449,418,456,458],
[434,442,421,0,397,443,428,426,452,442],
[449,473,443,493,0,419,429,449,438,457],
[483,457,435,447,471,0,480,429,458,454],
[440,433,441,462,461,410,0,442,452,449],
[491,434,472,464,441,461,448,0,456,474],
[453,465,434,438,452,432,438,434,0,473],
[460,458,432,448,433,436,441,416,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,417,418,429,412,415,444,434,432],
[457,0,423,408,432,413,440,446,454,436],
[473,467,0,447,428,453,463,452,456,464],
[472,482,443,0,460,458,433,495,469,468],
[461,458,462,430,0,438,421,432,459,435],
[478,477,437,432,452,0,447,472,475,434],
[475,450,427,457,469,443,0,453,462,457],
[446,444,438,395,458,418,437,0,460,428],
[456,436,434,421,431,415,428,430,0,412],
[458,454,426,422,455,456,433,462,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,449,460,484,442,461,478,514,452],
[424,0,403,413,430,445,432,436,480,454],
[441,487,0,465,471,448,450,453,467,456],
[430,477,425,0,472,450,417,419,515,459],
[406,460,419,418,0,440,422,434,462,436],
[448,445,442,440,450,0,445,411,471,416],
[429,458,440,473,468,445,0,456,501,477],
[412,454,437,471,456,479,434,0,493,448],
[376,410,423,375,428,419,389,397,0,397],
[438,436,434,431,454,474,413,442,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,413,439,516,417,462,452,445,432],
[436,0,449,439,521,421,426,440,438,426],
[477,441,0,438,499,423,435,458,421,490],
[451,451,452,0,517,436,498,424,439,449],
[374,369,391,373,0,376,421,421,395,411],
[473,469,467,454,514,0,435,481,437,471],
[428,464,455,392,469,455,0,456,439,425],
[438,450,432,466,469,409,434,0,389,438],
[445,452,469,451,495,453,451,501,0,457],
[458,464,400,441,479,419,465,452,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,444,451,453,463,405,446,423,431],
[371,0,374,423,395,363,347,362,370,370],
[446,516,0,489,490,452,448,461,473,432],
[439,467,401,0,396,464,365,387,410,413],
[437,495,400,494,0,489,457,467,469,445],
[427,527,438,426,401,0,413,406,412,418],
[485,543,442,525,433,477,0,460,478,505],
[444,528,429,503,423,484,430,0,474,449],
[467,520,417,480,421,478,412,416,0,460],
[459,520,458,477,445,472,385,441,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,457,489,424,398,443,465,436,436],
[418,0,410,451,407,423,418,438,421,447],
[433,480,0,473,438,455,433,471,420,440],
[401,439,417,0,389,415,419,445,426,420],
[466,483,452,501,0,438,465,477,490,470],
[492,467,435,475,452,0,448,477,471,454],
[447,472,457,471,425,442,0,510,450,472],
[425,452,419,445,413,413,380,0,428,400],
[454,469,470,464,400,419,440,462,0,514],
[454,443,450,470,420,436,418,490,376,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,476,461,477,419,447,409,512,435],
[411,0,477,433,511,428,422,387,437,453],
[414,413,0,445,431,406,398,431,481,444],
[429,457,445,0,445,410,468,412,496,437],
[413,379,459,445,0,392,421,425,465,455],
[471,462,484,480,498,0,433,442,513,460],
[443,468,492,422,469,457,0,446,530,469],
[481,503,459,478,465,448,444,0,469,466],
[378,453,409,394,425,377,360,421,0,393],
[455,437,446,453,435,430,421,424,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,481,459,446,442,467,440,481,442],
[450,0,481,479,451,442,455,447,486,447],
[409,409,0,419,420,420,438,418,452,403],
[431,411,471,0,440,448,440,437,463,428],
[444,439,470,450,0,454,458,454,444,404],
[448,448,470,442,436,0,432,438,466,431],
[423,435,452,450,432,458,0,442,474,427],
[450,443,472,453,436,452,448,0,474,448],
[409,404,438,427,446,424,416,416,0,401],
[448,443,487,462,486,459,463,442,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,456,427,440,449,403,398,433,453],
[450,0,471,451,450,455,455,433,452,456],
[434,419,0,439,440,444,417,406,418,418],
[463,439,451,0,434,434,416,424,436,448],
[450,440,450,456,0,471,462,451,449,469],
[441,435,446,456,419,0,420,413,438,448],
[487,435,473,474,428,470,0,456,468,493],
[492,457,484,466,439,477,434,0,473,457],
[457,438,472,454,441,452,422,417,0,423],
[437,434,472,442,421,442,397,433,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,432,492,486,452,503,442,476,462],
[443,0,450,454,459,458,449,444,483,424],
[458,440,0,463,453,455,474,434,470,460],
[398,436,427,0,447,448,438,448,442,423],
[404,431,437,443,0,421,465,445,452,440],
[438,432,435,442,469,0,462,459,439,430],
[387,441,416,452,425,428,0,434,440,398],
[448,446,456,442,445,431,456,0,451,440],
[414,407,420,448,438,451,450,439,0,430],
[428,466,430,467,450,460,492,450,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,436,432,460,429,454,440,441,447],
[416,0,412,416,434,402,418,419,424,416],
[454,478,0,456,473,463,479,467,444,440],
[458,474,434,0,463,444,447,453,442,446],
[430,456,417,427,0,427,435,421,426,444],
[461,488,427,446,463,0,447,444,440,451],
[436,472,411,443,455,443,0,441,437,449],
[450,471,423,437,469,446,449,0,436,464],
[449,466,446,448,464,450,453,454,0,445],
[443,474,450,444,446,439,441,426,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,425,500,402,424,457,416,447,463],
[431,0,420,482,453,432,455,446,417,486],
[465,470,0,466,431,505,472,439,478,479],
[390,408,424,0,437,395,417,390,422,425],
[488,437,459,453,0,517,467,449,428,467],
[466,458,385,495,373,0,398,385,438,441],
[433,435,418,473,423,492,0,415,443,424],
[474,444,451,500,441,505,475,0,465,466],
[443,473,412,468,462,452,447,425,0,445],
[427,404,411,465,423,449,466,424,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,432,464,460,418,486,469,432,451],
[413,0,443,454,441,417,456,406,458,448],
[458,447,0,444,438,441,455,427,425,423],
[426,436,446,0,462,424,449,406,432,437],
[430,449,452,428,0,414,451,422,499,434],
[472,473,449,466,476,0,427,458,452,445],
[404,434,435,441,439,463,0,424,420,434],
[421,484,463,484,468,432,466,0,470,453],
[458,432,465,458,391,438,470,420,0,420],
[439,442,467,453,456,445,456,437,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,454,447,447,439,426,455,446,464],
[451,0,476,480,449,455,426,476,435,446],
[436,414,0,440,426,419,426,452,431,467],
[443,410,450,0,448,461,411,427,426,436],
[443,441,464,442,0,442,403,451,421,449],
[451,435,471,429,448,0,445,453,436,448],
[464,464,464,479,487,445,0,492,454,491],
[435,414,438,463,439,437,398,0,437,463],
[444,455,459,464,469,454,436,453,0,463],
[426,444,423,454,441,442,399,427,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,468,428,454,421,445,416,443,428],
[443,0,452,438,438,449,421,431,434,415],
[422,438,0,434,421,433,435,409,424,428],
[462,452,456,0,430,464,448,436,441,443],
[436,452,469,460,0,434,459,440,447,451],
[469,441,457,426,456,0,460,453,440,437],
[445,469,455,442,431,430,0,414,435,425],
[474,459,481,454,450,437,476,0,453,433],
[447,456,466,449,443,450,455,437,0,429],
[462,475,462,447,439,453,465,457,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,383,437,440,409,425,422,377,368],
[486,0,473,458,436,438,443,469,439,396],
[507,417,0,404,442,444,440,437,422,409],
[453,432,486,0,451,452,462,436,418,427],
[450,454,448,439,0,498,464,501,459,456],
[481,452,446,438,392,0,490,486,427,390],
[465,447,450,428,426,400,0,464,390,387],
[468,421,453,454,389,404,426,0,400,415],
[513,451,468,472,431,463,500,490,0,464],
[522,494,481,463,434,500,503,475,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,450,437,458,449,430,440,450,478],
[433,0,426,434,460,447,421,432,442,435],
[440,464,0,447,472,425,424,436,450,445],
[453,456,443,0,448,424,417,416,454,445],
[432,430,418,442,0,419,423,424,439,445],
[441,443,465,466,471,0,431,442,465,459],
[460,469,466,473,467,459,0,435,451,477],
[450,458,454,474,466,448,455,0,432,463],
[440,448,440,436,451,425,439,458,0,456],
[412,455,445,445,445,431,413,427,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,438,570,545,535,560,526,472,501],
[400,0,399,529,497,508,464,478,495,417],
[452,491,0,479,465,499,483,493,550,383],
[320,361,411,0,451,501,460,379,400,395],
[345,393,425,439,0,488,406,394,393,442],
[355,382,391,389,402,0,391,451,452,292],
[330,426,407,430,484,499,0,437,473,341],
[364,412,397,511,496,439,453,0,410,415],
[418,395,340,490,497,438,417,480,0,365],
[389,473,507,495,448,598,549,475,525,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,447,451,470,456,474,470,473,456],
[445,0,458,461,464,462,481,456,475,446],
[443,432,0,442,449,445,461,457,440,435],
[439,429,448,0,454,445,463,436,466,441],
[420,426,441,436,0,435,463,452,451,439],
[434,428,445,445,455,0,449,439,456,442],
[416,409,429,427,427,441,0,430,446,410],
[420,434,433,454,438,451,460,0,454,445],
[417,415,450,424,439,434,444,436,0,440],
[434,444,455,449,451,448,480,445,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,425,424,472,457,466,455,444,429],
[450,0,442,445,469,456,451,452,444,450],
[465,448,0,460,456,470,464,461,440,467],
[466,445,430,0,479,463,455,462,429,473],
[418,421,434,411,0,410,435,441,422,426],
[433,434,420,427,480,0,432,437,415,442],
[424,439,426,435,455,458,0,437,443,441],
[435,438,429,428,449,453,453,0,418,440],
[446,446,450,461,468,475,447,472,0,419],
[461,440,423,417,464,448,449,450,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,442,460,481,469,449,455,475,476],
[417,0,435,423,445,445,415,416,461,439],
[448,455,0,449,460,476,434,438,474,461],
[430,467,441,0,440,455,426,454,459,451],
[409,445,430,450,0,442,408,433,435,435],
[421,445,414,435,448,0,426,424,446,440],
[441,475,456,464,482,464,0,434,477,464],
[435,474,452,436,457,466,456,0,456,464],
[415,429,416,431,455,444,413,434,0,434],
[414,451,429,439,455,450,426,426,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,443,436,458,465,457,444,439,440],
[434,0,450,435,469,458,441,468,444,446],
[447,440,0,440,467,459,446,462,453,436],
[454,455,450,0,461,470,462,444,449,453],
[432,421,423,429,0,418,453,443,422,429],
[425,432,431,420,472,0,444,463,440,442],
[433,449,444,428,437,446,0,444,430,451],
[446,422,428,446,447,427,446,0,416,434],
[451,446,437,441,468,450,460,474,0,443],
[450,444,454,437,461,448,439,456,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,484,463,386,514,437,453,422,423],
[440,0,449,472,446,493,420,440,413,405],
[406,441,0,462,443,507,430,474,381,393],
[427,418,428,0,414,496,401,428,361,409],
[504,444,447,476,0,502,429,450,412,453],
[376,397,383,394,388,0,347,340,338,346],
[453,470,460,489,461,543,0,474,459,436],
[437,450,416,462,440,550,416,0,414,470],
[468,477,509,529,478,552,431,476,0,444],
[467,485,497,481,437,544,454,420,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,444,427,422,445,416,444,425,415],
[462,0,460,423,474,455,416,443,422,438],
[446,430,0,437,453,421,408,458,429,424],
[463,467,453,0,447,432,440,444,424,435],
[468,416,437,443,0,426,416,420,418,422],
[445,435,469,458,464,0,452,449,455,435],
[474,474,482,450,474,438,0,460,465,461],
[446,447,432,446,470,441,430,0,445,402],
[465,468,461,466,472,435,425,445,0,433],
[475,452,466,455,468,455,429,488,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,477,442,450,475,469,437,446,377],
[452,0,510,489,413,468,493,445,460,420],
[413,380,0,400,358,382,429,402,375,380],
[448,401,490,0,434,471,456,473,468,434],
[440,477,532,456,0,477,473,456,443,452],
[415,422,508,419,413,0,436,442,473,447],
[421,397,461,434,417,454,0,410,451,426],
[453,445,488,417,434,448,480,0,372,381],
[444,430,515,422,447,417,439,518,0,398],
[513,470,510,456,438,443,464,509,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,461,483,441,470,447,467,466,437],
[428,0,426,472,419,451,425,443,447,426],
[429,464,0,506,457,467,456,486,464,455],
[407,418,384,0,408,416,436,441,406,411],
[449,471,433,482,0,481,449,475,443,441],
[420,439,423,474,409,0,407,440,430,422],
[443,465,434,454,441,483,0,458,439,443],
[423,447,404,449,415,450,432,0,437,429],
[424,443,426,484,447,460,451,453,0,432],
[453,464,435,479,449,468,447,461,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,288,220,411,416,316,383,379,386],
[670,0,583,497,524,514,348,394,405,544],
[602,307,0,327,383,509,306,218,312,395],
[670,393,563,0,375,454,259,438,366,418],
[479,366,507,515,0,509,343,512,498,450],
[474,376,381,436,381,0,294,436,424,439],
[574,542,584,631,547,596,0,533,538,350],
[507,496,672,452,378,454,357,0,396,458],
[511,485,578,524,392,466,352,494,0,613],
[504,346,495,472,440,451,540,432,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,432,403,309,342,373,409,424,454],
[380,0,400,342,411,264,397,239,329,475],
[458,490,0,401,436,406,322,284,469,428],
[487,548,489,0,366,350,374,306,427,428],
[581,479,454,524,0,526,398,370,432,566],
[548,626,484,540,364,0,451,450,530,653],
[517,493,568,516,492,439,0,374,507,538],
[481,651,606,584,520,440,516,0,546,648],
[466,561,421,463,458,360,383,344,0,566],
[436,415,462,462,324,237,352,242,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,401,438,444,439,387,436,455,422],
[469,0,440,458,443,467,440,469,492,477],
[489,450,0,438,465,495,480,474,495,450],
[452,432,452,0,464,483,448,437,462,435],
[446,447,425,426,0,418,412,432,466,416],
[451,423,395,407,472,0,429,432,465,433],
[503,450,410,442,478,461,0,454,467,466],
[454,421,416,453,458,458,436,0,455,423],
[435,398,395,428,424,425,423,435,0,387],
[468,413,440,455,474,457,424,467,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,407,437,407,424,403,398,441,412],
[450,0,421,406,382,365,403,411,414,334],
[483,469,0,452,402,413,475,434,380,420],
[453,484,438,0,408,418,414,417,411,377],
[483,508,488,482,0,459,446,411,436,459],
[466,525,477,472,431,0,400,462,475,426],
[487,487,415,476,444,490,0,452,461,445],
[492,479,456,473,479,428,438,0,419,425],
[449,476,510,479,454,415,429,471,0,459],
[478,556,470,513,431,464,445,465,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,412,420,412,394,398,417,443,496],
[447,0,481,402,441,445,440,387,455,474],
[478,409,0,397,458,426,440,424,452,490],
[470,488,493,0,443,446,473,460,479,525],
[478,449,432,447,0,449,457,445,463,472],
[496,445,464,444,441,0,502,413,449,496],
[492,450,450,417,433,388,0,456,441,474],
[473,503,466,430,445,477,434,0,483,504],
[447,435,438,411,427,441,449,407,0,495],
[394,416,400,365,418,394,416,386,395,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,433,453,444,425,418,432,445,434],
[482,0,455,453,470,432,463,435,450,453],
[457,435,0,461,447,443,427,480,437,420],
[437,437,429,0,460,398,443,445,461,436],
[446,420,443,430,0,414,434,435,428,461],
[465,458,447,492,476,0,446,469,441,458],
[472,427,463,447,456,444,0,474,451,438],
[458,455,410,445,455,421,416,0,449,454],
[445,440,453,429,462,449,439,441,0,491],
[456,437,470,454,429,432,452,436,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,441,447,416,453,409,476,406,335],
[422,0,410,449,462,463,373,545,452,416],
[449,480,0,471,392,408,434,495,436,386],
[443,441,419,0,431,439,365,499,437,418],
[474,428,498,459,0,462,451,546,457,490],
[437,427,482,451,428,0,403,492,395,421],
[481,517,456,525,439,487,0,621,439,468],
[414,345,395,391,344,398,269,0,446,339],
[484,438,454,453,433,495,451,444,0,404],
[555,474,504,472,400,469,422,551,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,450,465,415,382,420,426,431,518],
[483,0,448,479,423,417,443,413,428,488],
[440,442,0,490,482,466,467,390,421,515],
[425,411,400,0,414,386,426,412,392,476],
[475,467,408,476,0,429,473,429,495,513],
[508,473,424,504,461,0,410,443,438,504],
[470,447,423,464,417,480,0,437,436,490],
[464,477,500,478,461,447,453,0,435,510],
[459,462,469,498,395,452,454,455,0,516],
[372,402,375,414,377,386,400,380,374,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,468,483,466,464,474,438,483,454],
[440,0,433,446,447,460,477,455,480,475],
[422,457,0,459,453,424,465,462,443,461],
[407,444,431,0,430,447,446,438,439,449],
[424,443,437,460,0,471,470,444,461,462],
[426,430,466,443,419,0,442,422,447,467],
[416,413,425,444,420,448,0,440,404,427],
[452,435,428,452,446,468,450,0,465,446],
[407,410,447,451,429,443,486,425,0,425],
[436,415,429,441,428,423,463,444,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,457,450,404,418,454,480,472,448],
[452,0,461,444,453,452,470,478,486,429],
[433,429,0,399,430,439,452,453,459,417],
[440,446,491,0,444,437,465,478,471,403],
[486,437,460,446,0,439,447,488,487,470],
[472,438,451,453,451,0,477,455,486,459],
[436,420,438,425,443,413,0,457,448,447],
[410,412,437,412,402,435,433,0,444,413],
[418,404,431,419,403,404,442,446,0,436],
[442,461,473,487,420,431,443,477,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,456,456,444,465,463,471,455,444],
[420,0,442,437,442,417,443,449,442,417],
[434,448,0,430,436,451,437,465,461,441],
[434,453,460,0,446,429,463,440,448,440],
[446,448,454,444,0,443,435,459,447,451],
[425,473,439,461,447,0,466,467,464,455],
[427,447,453,427,455,424,0,442,437,441],
[419,441,425,450,431,423,448,0,457,425],
[435,448,429,442,443,426,453,433,0,443],
[446,473,449,450,439,435,449,465,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,456,461,457,457,433,438,429,460],
[400,0,446,429,451,401,412,425,422,465],
[434,444,0,415,435,460,458,406,416,447],
[429,461,475,0,470,427,449,438,434,478],
[433,439,455,420,0,422,435,419,445,459],
[433,489,430,463,468,0,447,450,447,472],
[457,478,432,441,455,443,0,472,455,465],
[452,465,484,452,471,440,418,0,462,507],
[461,468,474,456,445,443,435,428,0,485],
[430,425,443,412,431,418,425,383,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,427,428,423,432,437,432,452,428],
[462,0,430,416,419,423,412,434,440,428],
[463,460,0,462,437,456,485,461,467,419],
[462,474,428,0,450,447,449,435,472,443],
[467,471,453,440,0,472,458,466,471,465],
[458,467,434,443,418,0,438,475,473,434],
[453,478,405,441,432,452,0,456,468,438],
[458,456,429,455,424,415,434,0,471,418],
[438,450,423,418,419,417,422,419,0,393],
[462,462,471,447,425,456,452,472,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,436,440,422,430,426,440,439,440],
[426,0,418,431,417,432,410,421,429,436],
[454,472,0,440,453,444,458,451,451,443],
[450,459,450,0,450,447,438,464,448,452],
[468,473,437,440,0,470,457,459,433,449],
[460,458,446,443,420,0,455,444,447,454],
[464,480,432,452,433,435,0,462,456,447],
[450,469,439,426,431,446,428,0,432,433],
[451,461,439,442,457,443,434,458,0,438],
[450,454,447,438,441,436,443,457,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,430,442,446,424,446,429,428,451],
[455,0,433,462,456,433,452,445,450,458],
[460,457,0,467,449,447,443,463,449,468],
[448,428,423,0,448,418,451,440,446,452],
[444,434,441,442,0,429,433,424,451,439],
[466,457,443,472,461,0,472,435,449,469],
[444,438,447,439,457,418,0,450,454,433],
[461,445,427,450,466,455,440,0,433,443],
[462,440,441,444,439,441,436,457,0,461],
[439,432,422,438,451,421,457,447,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,493,461,396,449,415,483,424,429],
[407,0,462,495,456,393,412,393,483,409],
[397,428,0,408,353,407,394,401,418,429],
[429,395,482,0,397,427,383,418,413,426],
[494,434,537,493,0,426,393,417,433,476],
[441,497,483,463,464,0,425,451,423,443],
[475,478,496,507,497,465,0,446,424,469],
[407,497,489,472,473,439,444,0,459,444],
[466,407,472,477,457,467,466,431,0,425],
[461,481,461,464,414,447,421,446,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,363,454,441,465,400,479,434,461],
[411,0,397,450,449,488,402,486,416,468],
[527,493,0,509,501,520,439,507,488,463],
[436,440,381,0,441,484,397,471,429,442],
[449,441,389,449,0,461,504,516,438,469],
[425,402,370,406,429,0,408,417,388,409],
[490,488,451,493,386,482,0,465,463,473],
[411,404,383,419,374,473,425,0,407,431],
[456,474,402,461,452,502,427,483,0,436],
[429,422,427,448,421,481,417,459,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,0,198,0,0,198,198,209,198],
[692,0,432,252,252,440,209,692,475,440],
[890,458,0,450,241,415,407,667,469,458],
[692,638,440,0,483,440,649,681,692,638],
[890,638,649,407,0,638,407,890,692,638],
[890,450,475,450,252,0,407,673,475,464],
[692,681,483,241,483,483,0,681,692,681],
[692,198,223,209,0,217,209,0,432,223],
[681,415,421,198,198,415,198,458,0,638],
[692,450,432,252,252,426,209,667,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,456,465,459,456,481,452,474,470],
[452,0,464,462,445,412,450,466,459,470],
[434,426,0,449,474,422,447,459,459,446],
[425,428,441,0,449,418,447,427,430,435],
[431,445,416,441,0,416,428,386,430,423],
[434,478,468,472,474,0,467,447,504,454],
[409,440,443,443,462,423,0,442,460,430],
[438,424,431,463,504,443,448,0,506,468],
[416,431,431,460,460,386,430,384,0,439],
[420,420,444,455,467,436,460,422,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,438,476,464,464,461,468,463,433],
[434,0,468,464,454,450,422,465,444,415],
[452,422,0,457,430,452,429,422,462,452],
[414,426,433,0,408,458,427,409,444,445],
[426,436,460,482,0,474,474,462,457,450],
[426,440,438,432,416,0,427,426,442,407],
[429,468,461,463,416,463,0,464,464,432],
[422,425,468,481,428,464,426,0,445,434],
[427,446,428,446,433,448,426,445,0,418],
[457,475,438,445,440,483,458,456,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,432,500,561,578,528,558,531,455],
[400,0,445,481,499,469,455,493,529,426],
[458,445,0,550,508,566,543,537,549,491],
[390,409,340,0,453,521,409,441,381,453],
[329,391,382,437,0,470,416,398,421,411],
[312,421,324,369,420,0,470,411,422,394],
[362,435,347,481,474,420,0,461,434,404],
[332,397,353,449,492,479,429,0,341,475],
[359,361,341,509,469,468,456,549,0,414],
[435,464,399,437,479,496,486,415,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,442,428,463,490,469,445,472,511],
[434,0,425,398,426,477,489,415,415,467],
[448,465,0,448,459,485,469,439,439,511],
[462,492,442,0,500,493,477,465,461,514],
[427,464,431,390,0,478,457,435,435,519],
[400,413,405,397,412,0,445,421,418,498],
[421,401,421,413,433,445,0,424,445,465],
[445,475,451,425,455,469,466,0,390,487],
[418,475,451,429,455,472,445,500,0,507],
[379,423,379,376,371,392,425,403,383,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,424,417,435,401,417,422,433,410],
[445,0,441,426,439,400,428,429,426,446],
[466,449,0,441,470,449,454,469,427,452],
[473,464,449,0,488,442,441,448,450,437],
[455,451,420,402,0,437,427,439,401,434],
[489,490,441,448,453,0,466,448,440,459],
[473,462,436,449,463,424,0,431,455,434],
[468,461,421,442,451,442,459,0,446,437],
[457,464,463,440,489,450,435,444,0,431],
[480,444,438,453,456,431,456,453,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,435,474,453,395,447,442,453,459],
[442,0,441,471,427,417,408,433,450,425],
[455,449,0,487,448,432,432,467,453,450],
[416,419,403,0,406,400,417,395,420,423],
[437,463,442,484,0,451,447,451,469,473],
[495,473,458,490,439,0,462,480,465,467],
[443,482,458,473,443,428,0,438,443,482],
[448,457,423,495,439,410,452,0,454,483],
[437,440,437,470,421,425,447,436,0,453],
[431,465,440,467,417,423,408,407,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,447,478,444,447,436,443,461,439],
[449,0,440,446,435,436,421,443,443,423],
[443,450,0,468,426,422,423,439,467,468],
[412,444,422,0,416,402,406,439,437,434],
[446,455,464,474,0,457,439,434,469,416],
[443,454,468,488,433,0,418,482,442,451],
[454,469,467,484,451,472,0,464,445,488],
[447,447,451,451,456,408,426,0,423,443],
[429,447,423,453,421,448,445,467,0,427],
[451,467,422,456,474,439,402,447,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,461,405,429,438,430,439,399,420],
[451,0,488,459,465,469,494,428,434,432],
[429,402,0,432,439,440,461,437,437,481],
[485,431,458,0,479,457,430,427,445,468],
[461,425,451,411,0,501,416,427,453,430],
[452,421,450,433,389,0,462,407,399,424],
[460,396,429,460,474,428,0,405,383,393],
[451,462,453,463,463,483,485,0,422,455],
[491,456,453,445,437,491,507,468,0,499],
[470,458,409,422,460,466,497,435,391,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,423,459,441,432,464,480,423,449],
[432,0,422,436,425,457,458,443,432,419],
[467,468,0,446,459,486,481,476,472,437],
[431,454,444,0,420,469,457,442,451,420],
[449,465,431,470,0,471,453,471,446,457],
[458,433,404,421,419,0,467,454,422,456],
[426,432,409,433,437,423,0,448,421,406],
[410,447,414,448,419,436,442,0,442,431],
[467,458,418,439,444,468,469,448,0,428],
[441,471,453,470,433,434,484,459,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,438,452,427,479,473,554,466,461],
[426,0,436,452,426,481,450,427,406,330],
[452,454,0,475,443,509,478,560,444,442],
[438,438,415,0,440,446,454,495,418,466],
[463,464,447,450,0,480,469,489,423,458],
[411,409,381,444,410,0,478,408,423,374],
[417,440,412,436,421,412,0,409,400,414],
[336,463,330,395,401,482,481,0,431,356],
[424,484,446,472,467,467,490,459,0,408],
[429,560,448,424,432,516,476,534,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,475,461,474,439,452,466,495,448],
[437,0,477,481,483,459,468,439,475,461],
[415,413,0,466,461,441,433,412,452,427],
[429,409,424,0,449,406,414,415,430,427],
[416,407,429,441,0,428,419,432,438,437],
[451,431,449,484,462,0,470,455,473,464],
[438,422,457,476,471,420,0,479,469,451],
[424,451,478,475,458,435,411,0,476,446],
[395,415,438,460,452,417,421,414,0,437],
[442,429,463,463,453,426,439,444,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,430,455,475,375,397,439,423,442],
[457,0,528,451,400,469,434,502,397,451],
[460,362,0,444,489,450,398,481,377,424],
[435,439,446,0,498,454,480,515,452,415],
[415,490,401,392,0,423,381,461,488,425],
[515,421,440,436,467,0,465,452,462,472],
[493,456,492,410,509,425,0,546,445,521],
[451,388,409,375,429,438,344,0,411,414],
[467,493,513,438,402,428,445,479,0,419],
[448,439,466,475,465,418,369,476,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,444,450,489,480,465,457,476,463],
[429,0,433,437,472,455,449,423,473,462],
[446,457,0,435,499,463,465,450,477,445],
[440,453,455,0,494,482,444,464,461,461],
[401,418,391,396,0,433,421,403,439,443],
[410,435,427,408,457,0,442,424,442,439],
[425,441,425,446,469,448,0,439,458,451],
[433,467,440,426,487,466,451,0,473,458],
[414,417,413,429,451,448,432,417,0,442],
[427,428,445,429,447,451,439,432,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,422,429,444,436,423,449,428,468],
[448,0,463,434,451,442,452,442,442,474],
[468,427,0,431,441,436,450,444,435,480],
[461,456,459,0,474,444,447,453,441,468],
[446,439,449,416,0,418,439,431,435,433],
[454,448,454,446,472,0,444,450,478,476],
[467,438,440,443,451,446,0,472,458,463],
[441,448,446,437,459,440,418,0,442,479],
[462,448,455,449,455,412,432,448,0,461],
[422,416,410,422,457,414,427,411,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,463,402,377,485,480,409,525,413],
[438,0,425,433,461,462,462,394,479,463],
[427,465,0,477,414,494,436,439,511,461],
[488,457,413,0,439,414,489,389,461,451],
[513,429,476,451,0,443,423,477,456,440],
[405,428,396,476,447,0,466,408,472,421],
[410,428,454,401,467,424,0,416,489,496],
[481,496,451,501,413,482,474,0,481,503],
[365,411,379,429,434,418,401,409,0,407],
[477,427,429,439,450,469,394,387,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,422,438,448,440,442,429,421,433],
[464,0,435,461,455,441,471,468,492,477],
[468,455,0,430,438,418,447,429,428,430],
[452,429,460,0,470,433,432,446,446,436],
[442,435,452,420,0,421,458,436,448,432],
[450,449,472,457,469,0,450,455,439,462],
[448,419,443,458,432,440,0,441,439,445],
[461,422,461,444,454,435,449,0,448,448],
[469,398,462,444,442,451,451,442,0,458],
[457,413,460,454,458,428,445,442,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,456,454,432,456,482,462,440,451],
[423,0,439,421,429,459,440,439,435,423],
[434,451,0,440,436,479,459,425,432,435],
[436,469,450,0,460,459,470,449,469,447],
[458,461,454,430,0,473,454,447,448,430],
[434,431,411,431,417,0,454,437,438,418],
[408,450,431,420,436,436,0,428,450,412],
[428,451,465,441,443,453,462,0,433,461],
[450,455,458,421,442,452,440,457,0,425],
[439,467,455,443,460,472,478,429,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,373,404,398,404,413,404,408,399],
[466,0,411,458,428,459,444,434,440,443],
[517,479,0,474,428,462,462,458,481,461],
[486,432,416,0,437,437,468,427,434,429],
[492,462,462,453,0,462,472,447,472,442],
[486,431,428,453,428,0,428,435,435,428],
[477,446,428,422,418,462,0,414,446,433],
[486,456,432,463,443,455,476,0,463,442],
[482,450,409,456,418,455,444,427,0,432],
[491,447,429,461,448,462,457,448,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,428,426,472,432,453,453,435,464],
[424,0,415,431,436,423,420,432,413,426],
[462,475,0,451,479,441,449,436,448,468],
[464,459,439,0,461,427,435,456,442,438],
[418,454,411,429,0,417,430,437,438,432],
[458,467,449,463,473,0,452,466,444,452],
[437,470,441,455,460,438,0,446,459,452],
[437,458,454,434,453,424,444,0,455,444],
[455,477,442,448,452,446,431,435,0,449],
[426,464,422,452,458,438,438,446,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,442,462,422,446,445,444,446,449],
[428,0,435,463,426,446,411,443,462,431],
[448,455,0,452,439,458,446,444,478,435],
[428,427,438,0,417,433,428,412,429,423],
[468,464,451,473,0,458,447,444,449,444],
[444,444,432,457,432,0,417,445,445,456],
[445,479,444,462,443,473,0,463,437,438],
[446,447,446,478,446,445,427,0,438,437],
[444,428,412,461,441,445,453,452,0,427],
[441,459,455,467,446,434,452,453,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,457,477,456,475,493,502,434,498],
[398,0,360,425,393,408,431,423,404,414],
[433,530,0,448,472,476,494,500,450,500],
[413,465,442,0,454,471,482,496,432,460],
[434,497,418,436,0,469,464,479,434,438],
[415,482,414,419,421,0,458,472,428,454],
[397,459,396,408,426,432,0,461,412,444],
[388,467,390,394,411,418,429,0,417,435],
[456,486,440,458,456,462,478,473,0,459],
[392,476,390,430,452,436,446,455,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,464,468,428,464,464,442,455,457],
[444,0,482,455,431,436,449,466,457,454],
[426,408,0,437,428,438,445,439,433,439],
[422,435,453,0,443,472,470,446,446,431],
[462,459,462,447,0,435,444,448,431,455],
[426,454,452,418,455,0,447,453,443,451],
[426,441,445,420,446,443,0,476,443,433],
[448,424,451,444,442,437,414,0,455,444],
[435,433,457,444,459,447,447,435,0,430],
[433,436,451,459,435,439,457,446,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,453,473,457,480,453,441,468,447],
[455,0,450,459,449,476,445,440,451,444],
[437,440,0,457,448,483,448,427,436,419],
[417,431,433,0,429,457,419,426,436,426],
[433,441,442,461,0,449,443,453,451,443],
[410,414,407,433,441,0,420,404,421,425],
[437,445,442,471,447,470,0,428,444,457],
[449,450,463,464,437,486,462,0,467,462],
[422,439,454,454,439,469,446,423,0,434],
[443,446,471,464,447,465,433,428,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,431,439,420,464,416,474,441,443],
[431,0,400,448,436,442,434,439,434,387],
[459,490,0,456,441,478,447,467,457,449],
[451,442,434,0,435,468,426,468,459,439],
[470,454,449,455,0,493,437,467,472,450],
[426,448,412,422,397,0,407,434,455,423],
[474,456,443,464,453,483,0,482,452,450],
[416,451,423,422,423,456,408,0,425,427],
[449,456,433,431,418,435,438,465,0,437],
[447,503,441,451,440,467,440,463,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,425,442,471,432,438,452,417,418],
[478,0,449,470,479,455,442,482,435,450],
[465,441,0,472,481,458,430,470,451,458],
[448,420,418,0,472,438,433,471,411,453],
[419,411,409,418,0,411,408,412,401,428],
[458,435,432,452,479,0,409,432,418,439],
[452,448,460,457,482,481,0,474,430,476],
[438,408,420,419,478,458,416,0,409,430],
[473,455,439,479,489,472,460,481,0,483],
[472,440,432,437,462,451,414,460,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,496,285,428,363,285,553,285,427],
[463,0,400,347,592,258,347,466,346,347],
[394,490,0,370,490,283,277,215,237,237],
[605,543,520,0,758,462,347,357,410,505],
[462,298,400,132,0,234,132,426,92,323],
[527,632,607,428,656,0,411,673,513,285],
[605,543,613,543,758,479,0,500,410,499],
[337,424,675,533,464,217,390,0,360,390],
[605,544,653,480,798,377,480,530,0,553],
[463,543,653,385,567,605,391,500,337,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,467,460,464,445,435,449,459,455],
[466,0,465,489,445,480,473,456,473,469],
[423,425,0,452,424,449,443,425,428,450],
[430,401,438,0,389,428,421,383,429,401],
[426,445,466,501,0,436,487,472,467,454],
[445,410,441,462,454,0,447,429,446,452],
[455,417,447,469,403,443,0,390,447,438],
[441,434,465,507,418,461,500,0,439,432],
[431,417,462,461,423,444,443,451,0,465],
[435,421,440,489,436,438,452,458,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,422,432,439,421,429,433,435,419],
[441,0,420,442,426,442,432,434,434,428],
[468,470,0,442,440,437,452,450,465,438],
[458,448,448,0,464,446,451,443,450,444],
[451,464,450,426,0,437,435,443,439,430],
[469,448,453,444,453,0,448,445,436,448],
[461,458,438,439,455,442,0,453,463,436],
[457,456,440,447,447,445,437,0,446,461],
[455,456,425,440,451,454,427,444,0,457],
[471,462,452,446,460,442,454,429,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,383,491,471,434,443,461,457,434],
[460,0,425,463,457,445,469,420,461,460],
[507,465,0,479,489,488,424,420,452,449],
[399,427,411,0,458,415,422,403,423,475],
[419,433,401,432,0,423,404,433,415,468],
[456,445,402,475,467,0,429,468,445,445],
[447,421,466,468,486,461,0,416,490,430],
[429,470,470,487,457,422,474,0,448,421],
[433,429,438,467,475,445,400,442,0,468],
[456,430,441,415,422,445,460,469,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,439,476,518,494,474,440,411,461],
[467,0,446,451,535,414,513,457,450,523],
[451,444,0,411,471,450,478,493,449,482],
[414,439,479,0,496,478,506,469,435,444],
[372,355,419,394,0,436,459,408,408,410],
[396,476,440,412,454,0,475,468,412,478],
[416,377,412,384,431,415,0,414,440,429],
[450,433,397,421,482,422,476,0,447,481],
[479,440,441,455,482,478,450,443,0,515],
[429,367,408,446,480,412,461,409,375,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,448,443,434,462,434,445,454,468],
[430,0,425,422,419,446,423,426,407,444],
[442,465,0,462,444,484,437,454,442,459],
[447,468,428,0,441,450,445,448,450,464],
[456,471,446,449,0,467,449,466,445,460],
[428,444,406,440,423,0,441,428,438,471],
[456,467,453,445,441,449,0,451,422,457],
[445,464,436,442,424,462,439,0,422,460],
[436,483,448,440,445,452,468,468,0,466],
[422,446,431,426,430,419,433,430,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,464,416,446,429,412,420,438,420],
[439,0,463,416,427,421,434,405,426,438],
[426,427,0,422,438,421,421,394,413,398],
[474,474,468,0,465,450,451,437,470,466],
[444,463,452,425,0,453,424,423,455,439],
[461,469,469,440,437,0,426,433,440,443],
[478,456,469,439,466,464,0,423,436,450],
[470,485,496,453,467,457,467,0,467,444],
[452,464,477,420,435,450,454,423,0,429],
[470,452,492,424,451,447,440,446,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,483,429,463,461,465,462,454,454],
[405,0,412,382,397,391,420,409,427,391],
[407,478,0,448,458,476,476,459,425,416],
[461,508,442,0,426,460,455,458,400,412],
[427,493,432,464,0,428,450,439,425,428],
[429,499,414,430,462,0,476,449,447,392],
[425,470,414,435,440,414,0,442,453,422],
[428,481,431,432,451,441,448,0,394,418],
[436,463,465,490,465,443,437,496,0,452],
[436,499,474,478,462,498,468,472,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,432,446,436,431,410,431,443,425],
[478,0,470,461,459,442,452,471,443,457],
[458,420,0,406,426,414,434,424,439,475],
[444,429,484,0,419,447,428,443,437,464],
[454,431,464,471,0,462,472,454,442,475],
[459,448,476,443,428,0,456,470,462,460],
[480,438,456,462,418,434,0,468,438,464],
[459,419,466,447,436,420,422,0,451,446],
[447,447,451,453,448,428,452,439,0,459],
[465,433,415,426,415,430,426,444,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,391,265,400,347,330,347,307,345,378],
[499,0,436,448,406,420,448,397,447,399],
[625,454,0,466,475,462,485,437,446,416],
[490,442,424,0,456,474,516,459,447,393],
[543,484,415,434,0,473,471,408,436,389],
[560,470,428,416,417,0,476,401,419,398],
[543,442,405,374,419,414,0,427,413,408],
[583,493,453,431,482,489,463,0,469,433],
[545,443,444,443,454,471,477,421,0,456],
[512,491,474,497,501,492,482,457,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,470,451,445,477,468,445,452,469],
[421,0,455,460,430,435,440,449,432,451],
[420,435,0,478,415,458,430,422,415,457],
[439,430,412,0,399,433,435,424,424,443],
[445,460,475,491,0,478,462,486,452,460],
[413,455,432,457,412,0,406,447,437,450],
[422,450,460,455,428,484,0,446,431,448],
[445,441,468,466,404,443,444,0,421,454],
[438,458,475,466,438,453,459,469,0,457],
[421,439,433,447,430,440,442,436,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,401,444,372,439,410,455,410,460],
[442,0,449,480,444,492,460,550,453,515],
[489,441,0,435,427,430,427,558,492,472],
[446,410,455,0,445,443,429,486,453,503],
[518,446,463,445,0,428,432,539,434,540],
[451,398,460,447,462,0,406,518,528,449],
[480,430,463,461,458,484,0,496,506,421],
[435,340,332,404,351,372,394,0,368,377],
[480,437,398,437,456,362,384,522,0,488],
[430,375,418,387,350,441,469,513,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,397,423,436,423,412,460,375,457,433],
[493,0,443,442,446,452,503,415,471,461],
[467,447,0,453,438,467,492,425,488,452],
[454,448,437,0,433,451,463,431,476,443],
[467,444,452,457,0,472,486,464,489,456],
[478,438,423,439,418,0,447,427,464,440],
[430,387,398,427,404,443,0,398,448,414],
[515,475,465,459,426,463,492,0,484,443],
[433,419,402,414,401,426,442,406,0,412],
[457,429,438,447,434,450,476,447,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,483,445,442,481,451,462,467,465],
[424,0,430,432,405,422,425,394,429,418],
[407,460,0,410,395,414,414,431,419,423],
[445,458,480,0,438,459,460,459,477,452],
[448,485,495,452,0,441,471,464,483,448],
[409,468,476,431,449,0,421,438,446,445],
[439,465,476,430,419,469,0,428,442,417],
[428,496,459,431,426,452,462,0,473,427],
[423,461,471,413,407,444,448,417,0,446],
[425,472,467,438,442,445,473,463,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,483,409,400,433,456,421,480,451],
[472,0,452,435,464,443,465,422,482,415],
[407,438,0,394,387,414,454,432,439,480],
[481,455,496,0,428,404,522,432,453,460],
[490,426,503,462,0,444,524,457,507,453],
[457,447,476,486,446,0,473,456,466,434],
[434,425,436,368,366,417,0,436,450,416],
[469,468,458,458,433,434,454,0,510,463],
[410,408,451,437,383,424,440,380,0,405],
[439,475,410,430,437,456,474,427,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,438,483,457,438,426,437,449,446],
[445,0,454,468,429,453,432,438,430,442],
[452,436,0,468,433,455,441,456,455,464],
[407,422,422,0,433,411,403,407,426,417],
[433,461,457,457,0,447,438,450,444,447],
[452,437,435,479,443,0,450,438,446,455],
[464,458,449,487,452,440,0,458,449,469],
[453,452,434,483,440,452,432,0,451,462],
[441,460,435,464,446,444,441,439,0,450],
[444,448,426,473,443,435,421,428,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,382,463,489,425,518,442,481,499,416],
[508,0,479,463,443,546,461,491,481,478],
[427,411,0,464,418,522,427,467,449,414],
[401,427,426,0,482,440,416,414,461,393],
[465,447,472,408,0,535,448,460,505,430],
[372,344,368,450,355,0,379,365,404,366],
[448,429,463,474,442,511,0,445,516,470],
[409,399,423,476,430,525,445,0,460,409],
[391,409,441,429,385,486,374,430,0,374],
[474,412,476,497,460,524,420,481,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,460,446,444,456,426,467,425,432],
[410,0,461,420,425,438,448,454,422,434],
[430,429,0,421,418,435,431,463,424,431],
[444,470,469,0,439,455,454,466,430,433],
[446,465,472,451,0,443,445,460,453,465],
[434,452,455,435,447,0,437,463,424,427],
[464,442,459,436,445,453,0,444,440,434],
[423,436,427,424,430,427,446,0,424,448],
[465,468,466,460,437,466,450,466,0,441],
[458,456,459,457,425,463,456,442,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,443,448,418,426,430,441,458,463],
[462,0,438,412,430,443,441,439,449,447],
[447,452,0,438,433,423,439,424,424,454],
[442,478,452,0,470,441,423,439,435,466],
[472,460,457,420,0,442,439,433,470,465],
[464,447,467,449,448,0,461,452,445,473],
[460,449,451,467,451,429,0,446,443,463],
[449,451,466,451,457,438,444,0,451,475],
[432,441,466,455,420,445,447,439,0,462],
[427,443,436,424,425,417,427,415,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,443,375,351,449,298,494,410,498],
[401,0,431,411,444,459,355,444,498,439],
[447,459,0,501,414,555,307,495,434,437],
[515,479,389,0,409,468,464,469,513,464],
[539,446,476,481,0,517,382,463,502,480],
[441,431,335,422,373,0,350,456,425,451],
[592,535,583,426,508,540,0,515,516,536],
[396,446,395,421,427,434,375,0,472,489],
[480,392,456,377,388,465,374,418,0,395],
[392,451,453,426,410,439,354,401,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,436,404,422,442,432,440,422,433],
[469,0,443,474,423,457,445,447,488,405],
[454,447,0,446,435,462,446,408,447,429],
[486,416,444,0,478,441,423,430,442,434],
[468,467,455,412,0,431,441,399,442,480],
[448,433,428,449,459,0,420,438,426,437],
[458,445,444,467,449,470,0,461,459,462],
[450,443,482,460,491,452,429,0,447,484],
[468,402,443,448,448,464,431,443,0,404],
[457,485,461,456,410,453,428,406,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,495,518,408,445,452,437,491,477],
[404,0,479,480,383,424,451,389,439,456],
[395,411,0,410,347,456,383,417,404,419],
[372,410,480,0,413,416,434,400,418,452],
[482,507,543,477,0,433,451,452,488,434],
[445,466,434,474,457,0,454,378,404,416],
[438,439,507,456,439,436,0,400,441,443],
[453,501,473,490,438,512,490,0,440,442],
[399,451,486,472,402,486,449,450,0,404],
[413,434,471,438,456,474,447,448,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,456,465,463,436,456,443,464,444],
[453,0,459,434,458,433,461,431,460,452],
[434,431,0,441,428,441,428,434,432,419],
[425,456,449,0,433,424,468,456,467,458],
[427,432,462,457,0,435,426,434,453,438],
[454,457,449,466,455,0,449,456,484,433],
[434,429,462,422,464,441,0,446,435,413],
[447,459,456,434,456,434,444,0,487,449],
[426,430,458,423,437,406,455,403,0,418],
[446,438,471,432,452,457,477,441,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,484,463,455,461,440,478,434,470],
[424,0,443,432,443,445,420,434,428,387],
[406,447,0,445,434,440,407,447,410,443],
[427,458,445,0,440,439,453,433,388,419],
[435,447,456,450,0,420,432,474,430,433],
[429,445,450,451,470,0,429,456,425,462],
[450,470,483,437,458,461,0,472,445,426],
[412,456,443,457,416,434,418,0,429,431],
[456,462,480,502,460,465,445,461,0,443],
[420,503,447,471,457,428,464,459,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,436,439,445,470,468,462,447,437],
[425,0,478,421,448,429,467,436,438,440],
[454,412,0,434,474,443,454,421,421,455],
[451,469,456,0,468,464,471,445,454,449],
[445,442,416,422,0,458,469,447,406,435],
[420,461,447,426,432,0,465,443,411,420],
[422,423,436,419,421,425,0,415,426,435],
[428,454,469,445,443,447,475,0,451,458],
[443,452,469,436,484,479,464,439,0,461],
[453,450,435,441,455,470,455,432,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,457,465,471,443,445,464,458,453],
[451,0,466,478,462,444,431,461,453,460],
[433,424,0,449,451,421,419,433,409,449],
[425,412,441,0,425,419,420,435,430,423],
[419,428,439,465,0,429,415,424,429,445],
[447,446,469,471,461,0,444,428,459,458],
[445,459,471,470,475,446,0,450,471,463],
[426,429,457,455,466,462,440,0,436,462],
[432,437,481,460,461,431,419,454,0,444],
[437,430,441,467,445,432,427,428,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,437,435,431,427,431,453,441,423],
[445,0,451,433,428,440,410,446,432,411],
[453,439,0,419,436,439,422,466,417,404],
[455,457,471,0,446,469,448,482,445,462],
[459,462,454,444,0,438,441,457,431,434],
[463,450,451,421,452,0,442,460,439,437],
[459,480,468,442,449,448,0,476,443,442],
[437,444,424,408,433,430,414,0,417,412],
[449,458,473,445,459,451,447,473,0,447],
[467,479,486,428,456,453,448,478,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,466,433,431,401,432,430,448,448],
[454,0,459,453,441,411,449,467,464,454],
[424,431,0,423,404,409,452,447,446,451],
[457,437,467,0,447,407,422,465,448,479],
[459,449,486,443,0,445,458,462,467,472],
[489,479,481,483,445,0,454,471,487,462],
[458,441,438,468,432,436,0,439,437,468],
[460,423,443,425,428,419,451,0,451,445],
[442,426,444,442,423,403,453,439,0,447],
[442,436,439,411,418,428,422,445,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,484,420,390,393,362,414,477,437],
[469,0,520,419,440,458,495,408,444,369],
[406,370,0,380,434,349,410,374,449,279],
[470,471,510,0,449,362,428,504,468,445],
[500,450,456,441,0,488,447,446,453,357],
[497,432,541,528,402,0,469,494,551,421],
[528,395,480,462,443,421,0,473,455,415],
[476,482,516,386,444,396,417,0,480,387],
[413,446,441,422,437,339,435,410,0,379],
[453,521,611,445,533,469,475,503,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,449,434,438,376,445,424,431,454],
[441,0,452,437,418,387,460,400,423,447],
[441,438,0,461,477,423,404,438,435,442],
[456,453,429,0,423,448,436,453,438,409],
[452,472,413,467,0,438,392,384,436,390],
[514,503,467,442,452,0,439,445,455,475],
[445,430,486,454,498,451,0,399,452,466],
[466,490,452,437,506,445,491,0,505,469],
[459,467,455,452,454,435,438,385,0,438],
[436,443,448,481,500,415,424,421,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,409,389,379,409,378,436,411,444],
[436,0,405,426,380,409,435,447,391,434],
[481,485,0,445,445,497,395,506,450,438],
[501,464,445,0,422,444,450,442,450,445],
[511,510,445,468,0,459,433,480,456,439],
[481,481,393,446,431,0,437,469,442,466],
[512,455,495,440,457,453,0,484,470,472],
[454,443,384,448,410,421,406,0,406,421],
[479,499,440,440,434,448,420,484,0,477],
[446,456,452,445,451,424,418,469,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,471,449,437,480,475,444,461,450],
[405,0,435,413,435,465,427,420,439,417],
[419,455,0,411,441,465,422,422,433,407],
[441,477,479,0,459,486,471,448,459,450],
[453,455,449,431,0,465,486,441,447,429],
[410,425,425,404,425,0,414,387,421,420],
[415,463,468,419,404,476,0,419,441,443],
[446,470,468,442,449,503,471,0,441,464],
[429,451,457,431,443,469,449,449,0,449],
[440,473,483,440,461,470,447,426,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,511,484,453,444,463,537,505,459],
[390,0,509,387,384,398,499,389,485,434],
[379,381,0,324,322,401,430,385,377,330],
[406,503,566,0,413,506,488,518,452,518],
[437,506,568,477,0,417,518,496,466,471],
[446,492,489,384,473,0,499,469,461,482],
[427,391,460,402,372,391,0,374,473,443],
[353,501,505,372,394,421,516,0,448,346],
[385,405,513,438,424,429,417,442,0,405],
[431,456,560,372,419,408,447,544,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,431,439,445,450,433,451,445,427],
[434,0,452,478,450,456,450,460,448,457],
[459,438,0,465,430,435,414,447,421,436],
[451,412,425,0,429,425,422,448,429,430],
[445,440,460,461,0,445,436,449,439,414],
[440,434,455,465,445,0,442,469,440,436],
[457,440,476,468,454,448,0,470,441,461],
[439,430,443,442,441,421,420,0,438,418],
[445,442,469,461,451,450,449,452,0,469],
[463,433,454,460,476,454,429,472,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,401,533,375,394,406,450,352,478],
[473,0,452,545,469,412,423,468,418,475],
[489,438,0,505,450,493,483,570,414,488],
[357,345,385,0,441,300,424,406,334,437],
[515,421,440,449,0,416,377,547,435,500],
[496,478,397,590,474,0,411,473,426,475],
[484,467,407,466,513,479,0,494,457,503],
[440,422,320,484,343,417,396,0,407,412],
[538,472,476,556,455,464,433,483,0,511],
[412,415,402,453,390,415,387,478,379,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,408,467,455,447,435,413,446,430],
[437,0,394,438,404,466,437,412,435,428],
[482,496,0,485,428,497,489,446,454,462],
[423,452,405,0,466,441,454,417,424,435],
[435,486,462,424,0,473,438,457,438,437],
[443,424,393,449,417,0,482,418,420,416],
[455,453,401,436,452,408,0,424,458,452],
[477,478,444,473,433,472,466,0,475,459],
[444,455,436,466,452,470,432,415,0,454],
[460,462,428,455,453,474,438,431,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,447,465,436,438,428,473,452,473],
[438,0,446,429,434,430,421,463,417,433],
[443,444,0,427,444,417,424,446,426,423],
[425,461,463,0,452,431,417,453,431,435],
[454,456,446,438,0,440,416,466,414,444],
[452,460,473,459,450,0,451,477,421,465],
[462,469,466,473,474,439,0,495,433,468],
[417,427,444,437,424,413,395,0,404,434],
[438,473,464,459,476,469,457,486,0,455],
[417,457,467,455,446,425,422,456,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,440,455,446,432,480,466,456,449],
[440,0,453,464,442,455,475,488,474,482],
[450,437,0,461,431,439,476,468,470,462],
[435,426,429,0,435,433,456,462,461,439],
[444,448,459,455,0,445,454,468,463,454],
[458,435,451,457,445,0,477,472,468,465],
[410,415,414,434,436,413,0,445,448,440],
[424,402,422,428,422,418,445,0,431,439],
[434,416,420,429,427,422,442,459,0,455],
[441,408,428,451,436,425,450,451,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,445,443,458,470,439,434,422,426],
[465,0,461,399,433,436,444,406,427,453],
[445,429,0,396,423,452,447,477,448,404],
[447,491,494,0,458,480,461,417,464,427],
[432,457,467,432,0,484,438,448,429,438],
[420,454,438,410,406,0,458,412,411,427],
[451,446,443,429,452,432,0,447,438,420],
[456,484,413,473,442,478,443,0,427,466],
[468,463,442,426,461,479,452,463,0,418],
[464,437,486,463,452,463,470,424,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,441,441,417,417,414,470,432,427],
[481,0,463,434,462,442,442,465,441,468],
[449,427,0,440,436,422,421,475,436,440],
[449,456,450,0,423,425,452,459,437,457],
[473,428,454,467,0,457,425,457,439,471],
[473,448,468,465,433,0,444,480,445,436],
[476,448,469,438,465,446,0,489,453,455],
[420,425,415,431,433,410,401,0,410,399],
[458,449,454,453,451,445,437,480,0,453],
[463,422,450,433,419,454,435,491,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,436,435,444,441,440,419,449,441],
[419,0,444,427,438,438,447,418,435,425],
[454,446,0,452,426,454,441,452,447,454],
[455,463,438,0,453,458,456,427,446,434],
[446,452,464,437,0,454,455,433,444,441],
[449,452,436,432,436,0,443,439,434,447],
[450,443,449,434,435,447,0,438,454,433],
[471,472,438,463,457,451,452,0,464,451],
[441,455,443,444,446,456,436,426,0,444],
[449,465,436,456,449,443,457,439,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,422,490,448,492,442,418,459,413],
[465,0,395,507,440,483,428,435,463,430],
[468,495,0,501,429,505,476,458,513,446],
[400,383,389,0,360,454,388,406,467,392],
[442,450,461,530,0,505,458,475,506,449],
[398,407,385,436,385,0,411,386,453,380],
[448,462,414,502,432,479,0,435,452,432],
[472,455,432,484,415,504,455,0,514,449],
[431,427,377,423,384,437,438,376,0,442],
[477,460,444,498,441,510,458,441,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,421,482,432,444,452,434,443,457],
[430,0,443,457,436,440,438,430,427,440],
[469,447,0,469,448,439,454,454,433,448],
[408,433,421,0,433,428,406,435,446,440],
[458,454,442,457,0,446,444,464,453,441],
[446,450,451,462,444,0,437,445,449,440],
[438,452,436,484,446,453,0,448,436,453],
[456,460,436,455,426,445,442,0,431,423],
[447,463,457,444,437,441,454,459,0,449],
[433,450,442,450,449,450,437,467,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,399,381,470,395,385,476,427,365],
[630,0,420,474,513,458,504,613,561,514],
[491,470,0,431,573,435,372,574,432,335],
[509,416,459,0,519,438,484,641,517,465],
[420,377,317,371,0,390,320,444,376,355],
[495,432,455,452,500,0,475,620,560,328],
[505,386,518,406,570,415,0,502,505,383],
[414,277,316,249,446,270,388,0,367,331],
[463,329,458,373,514,330,385,523,0,382],
[525,376,555,425,535,562,507,559,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,488,491,455,489,438,475,474,440],
[425,0,491,452,462,472,449,471,435,436],
[402,399,0,429,426,402,448,440,428,417],
[399,438,461,0,397,479,403,462,430,451],
[435,428,464,493,0,463,444,465,452,441],
[401,418,488,411,427,0,408,456,378,420],
[452,441,442,487,446,482,0,488,499,473],
[415,419,450,428,425,434,402,0,431,419],
[416,455,462,460,438,512,391,459,0,438],
[450,454,473,439,449,470,417,471,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,452,441,459,426,450,451,448,389],
[455,0,452,439,460,433,440,465,506,453],
[438,438,0,450,431,431,441,462,450,410],
[449,451,440,0,427,413,446,444,483,431],
[431,430,459,463,0,423,437,448,449,419],
[464,457,459,477,467,0,494,489,475,424],
[440,450,449,444,453,396,0,438,467,426],
[439,425,428,446,442,401,452,0,441,443],
[442,384,440,407,441,415,423,449,0,380],
[501,437,480,459,471,466,464,447,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,499,413,424,461,445,452,454,452],
[433,0,502,420,421,436,450,420,454,440],
[391,388,0,393,400,405,417,401,433,425],
[477,470,497,0,441,440,473,459,464,441],
[466,469,490,449,0,459,483,475,445,456],
[429,454,485,450,431,0,459,461,453,440],
[445,440,473,417,407,431,0,439,435,447],
[438,470,489,431,415,429,451,0,456,470],
[436,436,457,426,445,437,455,434,0,452],
[438,450,465,449,434,450,443,420,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,457,454,443,536,469,510,471,508],
[423,0,438,384,383,481,388,426,499,482],
[433,452,0,473,386,466,382,354,467,349],
[436,506,417,0,438,506,402,439,460,418],
[447,507,504,452,0,448,400,409,406,381],
[354,409,424,384,442,0,387,384,391,390],
[421,502,508,488,490,503,0,443,599,492],
[380,464,536,451,481,506,447,0,504,466],
[419,391,423,430,484,499,291,386,0,419],
[382,408,541,472,509,500,398,424,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,454,432,434,467,469,489,458,492],
[428,0,447,405,441,439,432,454,440,378],
[436,443,0,448,464,440,448,474,449,439],
[458,485,442,0,471,468,434,469,443,430],
[456,449,426,419,0,441,438,485,425,423],
[423,451,450,422,449,0,432,493,420,445],
[421,458,442,456,452,458,0,488,462,457],
[401,436,416,421,405,397,402,0,432,397],
[432,450,441,447,465,470,428,458,0,427],
[398,512,451,460,467,445,433,493,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,444,413,445,419,427,419,436,426],
[472,0,463,455,443,440,405,453,459,445],
[446,427,0,463,437,416,450,438,447,443],
[477,435,427,0,446,421,429,456,428,436],
[445,447,453,444,0,449,437,461,468,455],
[471,450,474,469,441,0,450,467,451,456],
[463,485,440,461,453,440,0,466,406,455],
[471,437,452,434,429,423,424,0,426,447],
[454,431,443,462,422,439,484,464,0,450],
[464,445,447,454,435,434,435,443,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,475,438,454,455,434,429,410,446],
[446,0,479,444,454,430,434,435,421,441],
[415,411,0,408,389,421,409,417,447,432],
[452,446,482,0,443,438,436,412,420,432],
[436,436,501,447,0,438,441,460,457,470],
[435,460,469,452,452,0,426,432,434,422],
[456,456,481,454,449,464,0,429,438,444],
[461,455,473,478,430,458,461,0,437,472],
[480,469,443,470,433,456,452,453,0,468],
[444,449,458,458,420,468,446,418,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,433,430,447,448,416,424,444,456],
[450,0,429,446,462,459,447,463,478,452],
[457,461,0,441,469,458,452,454,461,444],
[460,444,449,0,454,466,443,453,458,475],
[443,428,421,436,0,479,452,432,470,435],
[442,431,432,424,411,0,417,437,453,448],
[474,443,438,447,438,473,0,438,465,443],
[466,427,436,437,458,453,452,0,457,457],
[446,412,429,432,420,437,425,433,0,446],
[434,438,446,415,455,442,447,433,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,430,424,438,402,449,399,426,397],
[449,0,443,470,418,416,483,412,447,429],
[460,447,0,431,481,416,445,448,490,446],
[466,420,459,0,447,408,476,419,464,409],
[452,472,409,443,0,436,453,461,473,453],
[488,474,474,482,454,0,460,452,443,451],
[441,407,445,414,437,430,0,412,408,408],
[491,478,442,471,429,438,478,0,450,445],
[464,443,400,426,417,447,482,440,0,422],
[493,461,444,481,437,439,482,445,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,432,450,433,435,445,427,447,431],
[441,0,412,426,438,439,407,435,430,416],
[458,478,0,444,467,453,421,456,458,438],
[440,464,446,0,451,470,441,468,447,453],
[457,452,423,439,0,471,429,452,458,428],
[455,451,437,420,419,0,407,440,448,430],
[445,483,469,449,461,483,0,456,473,453],
[463,455,434,422,438,450,434,0,450,429],
[443,460,432,443,432,442,417,440,0,416],
[459,474,452,437,462,460,437,461,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,475,474,468,473,463,473,432,487],
[458,0,434,466,485,468,435,450,438,466],
[415,456,0,468,468,469,452,432,410,458],
[416,424,422,0,486,456,435,499,446,439],
[422,405,422,404,0,425,394,427,418,422],
[417,422,421,434,465,0,417,440,430,446],
[427,455,438,455,496,473,0,484,457,501],
[417,440,458,391,463,450,406,0,392,428],
[458,452,480,444,472,460,433,498,0,463],
[403,424,432,451,468,444,389,462,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,412,419,428,451,465,394,442,445],
[475,0,443,445,401,452,489,420,492,452],
[478,447,0,435,412,472,466,456,482,476],
[471,445,455,0,412,466,480,436,442,438],
[462,489,478,478,0,440,510,476,453,468],
[439,438,418,424,450,0,446,468,489,462],
[425,401,424,410,380,444,0,377,442,442],
[496,470,434,454,414,422,513,0,488,476],
[448,398,408,448,437,401,448,402,0,410],
[445,438,414,452,422,428,448,414,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,471,430,451,454,441,448,444,460],
[477,0,470,461,420,445,462,471,446,466],
[419,420,0,436,421,431,448,437,454,440],
[460,429,454,0,446,454,476,442,433,453],
[439,470,469,444,0,463,486,461,460,479],
[436,445,459,436,427,0,465,452,431,437],
[449,428,442,414,404,425,0,430,412,455],
[442,419,453,448,429,438,460,0,435,442],
[446,444,436,457,430,459,478,455,0,467],
[430,424,450,437,411,453,435,448,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,428,442,443,449,437,435,438,445],
[447,0,436,448,448,471,459,464,432,434],
[462,454,0,458,456,482,461,468,440,446],
[448,442,432,0,450,451,443,450,436,436],
[447,442,434,440,0,461,460,454,441,453],
[441,419,408,439,429,0,431,433,432,427],
[453,431,429,447,430,459,0,437,440,430],
[455,426,422,440,436,457,453,0,449,440],
[452,458,450,454,449,458,450,441,0,440],
[445,456,444,454,437,463,460,450,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,406,445,423,471,420,420,419,434],
[462,0,437,441,464,454,425,397,414,414],
[484,453,0,448,431,469,448,416,440,426],
[445,449,442,0,420,477,462,443,425,459],
[467,426,459,470,0,472,444,448,434,443],
[419,436,421,413,418,0,442,400,412,421],
[470,465,442,428,446,448,0,419,442,457],
[470,493,474,447,442,490,471,0,455,487],
[471,476,450,465,456,478,448,435,0,445],
[456,476,464,431,447,469,433,403,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,453,452,436,439,459,454,466,431],
[463,0,449,439,435,444,458,446,453,442],
[437,441,0,438,419,440,451,445,441,426],
[438,451,452,0,448,460,472,445,454,448],
[454,455,471,442,0,463,468,447,457,441],
[451,446,450,430,427,0,473,453,452,454],
[431,432,439,418,422,417,0,436,444,432],
[436,444,445,445,443,437,454,0,457,441],
[424,437,449,436,433,438,446,433,0,433],
[459,448,464,442,449,436,458,449,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,431,435,457,441,466,455,396,502],
[476,0,458,434,445,449,506,454,456,502],
[459,432,0,453,443,429,470,430,434,485],
[455,456,437,0,440,454,488,420,437,476],
[433,445,447,450,0,433,470,416,428,499],
[449,441,461,436,457,0,486,457,482,458],
[424,384,420,402,420,404,0,416,410,465],
[435,436,460,470,474,433,474,0,418,484],
[494,434,456,453,462,408,480,472,0,519],
[388,388,405,414,391,432,425,406,371,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,435,456,440,439,414,446,451,437],
[436,0,425,456,413,416,419,421,436,435],
[455,465,0,475,462,451,437,436,458,464],
[434,434,415,0,421,422,434,422,440,435],
[450,477,428,469,0,448,447,450,455,449],
[451,474,439,468,442,0,440,448,454,463],
[476,471,453,456,443,450,0,430,471,453],
[444,469,454,468,440,442,460,0,469,442],
[439,454,432,450,435,436,419,421,0,448],
[453,455,426,455,441,427,437,448,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,454,464,484,452,460,437,446,446],
[433,0,456,462,477,450,450,405,434,417],
[436,434,0,458,452,462,435,423,428,437],
[426,428,432,0,461,430,417,421,407,430],
[406,413,438,429,0,445,407,394,399,415],
[438,440,428,460,445,0,432,429,432,442],
[430,440,455,473,483,458,0,430,435,441],
[453,485,467,469,496,461,460,0,441,465],
[444,456,462,483,491,458,455,449,0,444],
[444,473,453,460,475,448,449,425,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,412,431,399,393,447,485,433,432],
[458,0,448,444,450,442,439,524,444,450],
[478,442,0,448,446,448,453,477,473,469],
[459,446,442,0,444,442,424,463,433,403],
[491,440,444,446,0,464,451,501,456,462],
[497,448,442,448,426,0,451,470,453,456],
[443,451,437,466,439,439,0,476,444,431],
[405,366,413,427,389,420,414,0,398,410],
[457,446,417,457,434,437,446,492,0,420],
[458,440,421,487,428,434,459,480,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,428,438,460,431,457,425,401,432],
[485,0,437,450,431,437,458,445,417,452],
[462,453,0,465,460,452,472,445,451,465],
[452,440,425,0,455,447,454,436,432,427],
[430,459,430,435,0,425,462,433,441,439],
[459,453,438,443,465,0,437,432,441,440],
[433,432,418,436,428,453,0,440,425,445],
[465,445,445,454,457,458,450,0,422,437],
[489,473,439,458,449,449,465,468,0,450],
[458,438,425,463,451,450,445,453,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,458,448,435,432,458,444,444,449],
[447,0,445,418,444,441,444,457,457,456],
[432,445,0,442,433,429,442,456,426,431],
[442,472,448,0,439,434,453,464,438,462],
[455,446,457,451,0,440,470,464,446,450],
[458,449,461,456,450,0,466,455,438,440],
[432,446,448,437,420,424,0,449,440,432],
[446,433,434,426,426,435,441,0,433,412],
[446,433,464,452,444,452,450,457,0,447],
[441,434,459,428,440,450,458,478,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,465,476,449,425,431,427,450,408],
[459,0,473,460,471,448,450,422,440,450],
[425,417,0,437,464,479,435,403,481,423],
[414,430,453,0,409,429,431,380,446,434],
[441,419,426,481,0,457,440,415,445,460],
[465,442,411,461,433,0,442,420,422,424],
[459,440,455,459,450,448,0,418,470,441],
[463,468,487,510,475,470,472,0,507,445],
[440,450,409,444,445,468,420,383,0,444],
[482,440,467,456,430,466,449,445,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,427,482,425,445,450,457,443,442],
[423,0,423,479,443,460,441,446,447,435],
[463,467,0,490,443,462,494,474,461,429],
[408,411,400,0,393,435,421,408,443,387],
[465,447,447,497,0,466,421,468,472,464],
[445,430,428,455,424,0,449,460,455,416],
[440,449,396,469,469,441,0,432,474,432],
[433,444,416,482,422,430,458,0,448,447],
[447,443,429,447,418,435,416,442,0,428],
[448,455,461,503,426,474,458,443,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,463,431,421,432,441,418,462,432],
[446,0,416,483,459,470,450,404,440,478],
[427,474,0,497,493,488,428,434,427,465],
[459,407,393,0,464,464,429,462,482,445],
[469,431,397,426,0,471,431,443,438,481],
[458,420,402,426,419,0,427,423,411,444],
[449,440,462,461,459,463,0,472,486,443],
[472,486,456,428,447,467,418,0,496,450],
[428,450,463,408,452,479,404,394,0,429],
[458,412,425,445,409,446,447,440,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,342,403,273,323,311,346,413,372,399],
[548,0,490,430,388,388,436,464,604,462],
[487,400,0,400,401,488,420,440,541,419],
[617,460,490,0,431,425,471,532,505,542],
[567,502,489,459,0,547,363,515,477,541],
[579,502,402,465,343,0,403,455,439,511],
[544,454,470,419,527,487,0,471,476,493],
[477,426,450,358,375,435,419,0,504,474],
[518,286,349,385,413,451,414,386,0,491],
[491,428,471,348,349,379,397,416,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,461,435,436,412,438,438,433,424],
[451,0,431,419,427,420,433,419,430,419],
[429,459,0,424,442,421,436,449,426,444],
[455,471,466,0,471,412,457,447,458,451],
[454,463,448,419,0,427,457,430,425,427],
[478,470,469,478,463,0,473,445,466,459],
[452,457,454,433,433,417,0,449,428,434],
[452,471,441,443,460,445,441,0,429,435],
[457,460,464,432,465,424,462,461,0,441],
[466,471,446,439,463,431,456,455,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,488,486,453,457,543,496,504,547],
[451,0,474,520,389,466,476,463,481,505],
[402,416,0,428,391,475,459,444,387,454],
[404,370,462,0,387,419,458,383,407,469],
[437,501,499,503,0,438,528,468,506,502],
[433,424,415,471,452,0,484,476,474,500],
[347,414,431,432,362,406,0,433,375,442],
[394,427,446,507,422,414,457,0,409,509],
[386,409,503,483,384,416,515,481,0,475],
[343,385,436,421,388,390,448,381,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,440,439,404,369,538,424,435,442],
[445,0,424,462,421,415,454,406,344,434],
[450,466,0,454,370,429,521,352,399,479],
[451,428,436,0,485,387,543,390,334,369],
[486,469,520,405,0,466,549,435,447,437],
[521,475,461,503,424,0,575,482,505,513],
[352,436,369,347,341,315,0,264,346,390],
[466,484,538,500,455,408,626,0,456,479],
[455,546,491,556,443,385,544,434,0,522],
[448,456,411,521,453,377,500,411,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,459,418,436,469,432,459,502,464],
[459,0,463,475,502,469,476,478,497,443],
[431,427,0,425,423,476,407,460,442,463],
[472,415,465,0,463,411,418,485,478,431],
[454,388,467,427,0,408,399,401,453,454],
[421,421,414,479,482,0,406,466,496,449],
[458,414,483,472,491,484,0,492,492,456],
[431,412,430,405,489,424,398,0,474,434],
[388,393,448,412,437,394,398,416,0,447],
[426,447,427,459,436,441,434,456,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,420,426,432,451,449,437,404,429],
[424,0,414,410,420,495,431,439,418,418],
[470,476,0,412,444,450,460,460,433,419],
[464,480,478,0,476,484,459,458,449,445],
[458,470,446,414,0,441,448,454,403,413],
[439,395,440,406,449,0,438,442,389,418],
[441,459,430,431,442,452,0,459,423,426],
[453,451,430,432,436,448,431,0,448,437],
[486,472,457,441,487,501,467,442,0,441],
[461,472,471,445,477,472,464,453,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,467,436,463,456,472,446,484,476],
[445,0,451,466,465,488,467,443,482,465],
[423,439,0,441,420,419,478,446,453,434],
[454,424,449,0,414,430,480,436,458,438],
[427,425,470,476,0,464,488,448,464,446],
[434,402,471,460,426,0,452,447,467,442],
[418,423,412,410,402,438,0,404,444,411],
[444,447,444,454,442,443,486,0,482,447],
[406,408,437,432,426,423,446,408,0,429],
[414,425,456,452,444,448,479,443,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,433,447,417,454,435,417,449,449],
[455,0,454,482,446,449,466,455,453,443],
[457,436,0,482,432,448,444,438,456,435],
[443,408,408,0,415,441,414,435,427,439],
[473,444,458,475,0,460,435,464,466,439],
[436,441,442,449,430,0,434,447,446,440],
[455,424,446,476,455,456,0,453,445,443],
[473,435,452,455,426,443,437,0,442,450],
[441,437,434,463,424,444,445,448,0,422],
[441,447,455,451,451,450,447,440,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,450,436,453,443,455,440,430,416],
[448,0,457,427,458,460,452,434,429,426],
[440,433,0,421,476,442,430,469,444,430],
[454,463,469,0,450,459,447,447,461,427],
[437,432,414,440,0,418,424,434,441,399],
[447,430,448,431,472,0,434,452,446,450],
[435,438,460,443,466,456,0,465,452,423],
[450,456,421,443,456,438,425,0,450,405],
[460,461,446,429,449,444,438,440,0,430],
[474,464,460,463,491,440,467,485,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,446,449,453,460,445,467,438,454],
[453,0,441,454,472,452,454,458,449,445],
[444,449,0,442,463,466,463,465,459,443],
[441,436,448,0,444,459,455,478,454,456],
[437,418,427,446,0,452,426,446,450,452],
[430,438,424,431,438,0,435,423,435,436],
[445,436,427,435,464,455,0,457,446,446],
[423,432,425,412,444,467,433,0,431,449],
[452,441,431,436,440,455,444,459,0,449],
[436,445,447,434,438,454,444,441,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,459,414,546,523,357,495,475,441],
[407,0,495,389,442,483,392,446,417,427],
[431,395,0,438,525,526,469,475,390,416],
[476,501,452,0,572,554,522,444,470,583],
[344,448,365,318,0,378,349,389,454,388],
[367,407,364,336,512,0,396,411,423,419],
[533,498,421,368,541,494,0,494,432,488],
[395,444,415,446,501,479,396,0,386,491],
[415,473,500,420,436,467,458,504,0,485],
[449,463,474,307,502,471,402,399,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,414,449,424,433,411,431,431,462],
[465,0,445,459,444,447,453,436,456,476],
[476,445,0,453,461,440,519,470,437,491],
[441,431,437,0,458,434,477,443,427,494],
[466,446,429,432,0,457,440,415,432,429],
[457,443,450,456,433,0,463,488,431,488],
[479,437,371,413,450,427,0,436,410,466],
[459,454,420,447,475,402,454,0,431,468],
[459,434,453,463,458,459,480,459,0,483],
[428,414,399,396,461,402,424,422,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,473,476,468,444,470,443,482,447],
[400,0,436,431,427,432,429,443,437,421],
[417,454,0,480,453,458,453,451,462,442],
[414,459,410,0,444,416,418,428,434,425],
[422,463,437,446,0,451,469,427,433,437],
[446,458,432,474,439,0,445,450,472,459],
[420,461,437,472,421,445,0,429,458,437],
[447,447,439,462,463,440,461,0,459,452],
[408,453,428,456,457,418,432,431,0,422],
[443,469,448,465,453,431,453,438,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,412,428,430,464,394,420,436,445],
[470,0,446,455,458,448,423,431,435,451],
[478,444,0,481,493,459,466,477,442,451],
[462,435,409,0,440,434,443,429,431,427],
[460,432,397,450,0,446,428,415,426,426],
[426,442,431,456,444,0,434,439,449,443],
[496,467,424,447,462,456,0,448,432,431],
[470,459,413,461,475,451,442,0,441,424],
[454,455,448,459,464,441,458,449,0,429],
[445,439,439,463,464,447,459,466,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,470,465,472,440,467,467,458,463],
[439,0,472,449,452,447,462,446,461,469],
[420,418,0,445,418,437,442,464,419,442],
[425,441,445,0,445,441,440,446,460,448],
[418,438,472,445,0,453,448,435,439,456],
[450,443,453,449,437,0,465,437,451,452],
[423,428,448,450,442,425,0,454,441,475],
[423,444,426,444,455,453,436,0,439,449],
[432,429,471,430,451,439,449,451,0,471],
[427,421,448,442,434,438,415,441,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,434,494,460,466,412,442,478,452],
[385,0,422,389,412,440,392,411,443,440],
[456,468,0,459,428,458,448,471,461,468],
[396,501,431,0,422,486,417,423,452,450],
[430,478,462,468,0,444,447,453,481,452],
[424,450,432,404,446,0,419,416,454,438],
[478,498,442,473,443,471,0,486,487,503],
[448,479,419,467,437,474,404,0,463,493],
[412,447,429,438,409,436,403,427,0,428],
[438,450,422,440,438,452,387,397,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,498,506,510,454,428,466,495,380],
[412,0,478,427,481,447,415,431,378,387],
[392,412,0,481,424,421,408,391,318,346],
[384,463,409,0,518,381,421,461,370,364],
[380,409,466,372,0,418,391,438,349,345],
[436,443,469,509,472,0,416,515,458,455],
[462,475,482,469,499,474,0,491,393,427],
[424,459,499,429,452,375,399,0,367,367],
[395,512,572,520,541,432,497,523,0,382],
[510,503,544,526,545,435,463,523,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,480,462,516,454,435,456,514,448],
[384,0,431,402,454,383,411,376,422,401],
[410,459,0,372,459,398,403,372,407,384],
[428,488,518,0,461,464,409,444,484,460],
[374,436,431,429,0,448,425,388,441,447],
[436,507,492,426,442,0,451,406,479,441],
[455,479,487,481,465,439,0,472,472,476],
[434,514,518,446,502,484,418,0,463,455],
[376,468,483,406,449,411,418,427,0,420],
[442,489,506,430,443,449,414,435,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,435,412,453,426,430,467,442,444],
[458,0,443,423,445,420,448,480,450,436],
[455,447,0,425,444,445,445,498,461,443],
[478,467,465,0,464,424,478,484,464,458],
[437,445,446,426,0,411,454,467,427,436],
[464,470,445,466,479,0,469,489,459,473],
[460,442,445,412,436,421,0,458,454,436],
[423,410,392,406,423,401,432,0,432,423],
[448,440,429,426,463,431,436,458,0,444],
[446,454,447,432,454,417,454,467,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,455,461,419,454,445,443,457,444],
[434,0,463,455,442,448,445,431,449,446],
[435,427,0,435,410,421,435,421,442,427],
[429,435,455,0,430,458,447,433,442,422],
[471,448,480,460,0,450,450,435,450,434],
[436,442,469,432,440,0,442,427,423,425],
[445,445,455,443,440,448,0,419,430,431],
[447,459,469,457,455,463,471,0,440,459],
[433,441,448,448,440,467,460,450,0,435],
[446,444,463,468,456,465,459,431,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,576,396,408,417,493,389,473,477,460],
[314,0,339,355,307,380,291,329,346,353],
[494,551,0,508,478,535,531,458,417,371],
[482,535,382,0,445,560,395,438,437,476],
[473,583,412,445,0,544,466,502,442,426],
[397,510,355,330,346,0,381,395,343,403],
[501,599,359,495,424,509,0,531,467,446],
[417,561,432,452,388,495,359,0,356,370],
[413,544,473,453,448,547,423,534,0,463],
[430,537,519,414,464,487,444,520,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,462,448,446,436,465,476,495,479],
[424,0,465,447,446,446,455,452,470,454],
[428,425,0,451,440,434,440,458,453,436],
[442,443,439,0,450,438,448,464,467,457],
[444,444,450,440,0,436,451,465,462,484],
[454,444,456,452,454,0,440,467,461,455],
[425,435,450,442,439,450,0,458,456,451],
[414,438,432,426,425,423,432,0,437,430],
[395,420,437,423,428,429,434,453,0,433],
[411,436,454,433,406,435,439,460,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,450,411,464,443,497,480,476,484],
[471,0,425,445,505,482,501,482,460,465],
[440,465,0,435,466,455,439,437,464,429],
[479,445,455,0,472,479,462,458,457,482],
[426,385,424,418,0,424,449,423,455,449],
[447,408,435,411,466,0,462,480,450,456],
[393,389,451,428,441,428,0,405,432,429],
[410,408,453,432,467,410,485,0,419,441],
[414,430,426,433,435,440,458,471,0,456],
[406,425,461,408,441,434,461,449,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,442,431,433,431,430,425,454,450],
[448,0,443,440,406,433,445,429,467,420],
[448,447,0,427,425,437,427,445,445,436],
[459,450,463,0,423,445,445,457,463,440],
[457,484,465,467,0,451,444,463,471,452],
[459,457,453,445,439,0,437,444,442,438],
[460,445,463,445,446,453,0,462,450,451],
[465,461,445,433,427,446,428,0,462,458],
[436,423,445,427,419,448,440,428,0,427],
[440,470,454,450,438,452,439,432,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,463,463,435,458,481,458,453,446],
[421,0,452,450,427,424,457,435,461,467],
[427,438,0,451,445,441,446,456,462,461],
[427,440,439,0,442,450,462,458,457,451],
[455,463,445,448,0,455,466,454,470,458],
[432,466,449,440,435,0,464,466,472,450],
[409,433,444,428,424,426,0,434,461,439],
[432,455,434,432,436,424,456,0,452,452],
[437,429,428,433,420,418,429,438,0,450],
[444,423,429,439,432,440,451,438,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,449,453,450,458,442,454,457,448],
[428,0,442,447,465,458,464,449,464,454],
[441,448,0,425,458,461,464,439,459,466],
[437,443,465,0,445,462,480,478,465,441],
[440,425,432,445,0,455,457,453,475,448],
[432,432,429,428,435,0,440,443,465,462],
[448,426,426,410,433,450,0,448,452,457],
[436,441,451,412,437,447,442,0,454,453],
[433,426,431,425,415,425,438,436,0,442],
[442,436,424,449,442,428,433,437,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,463,455,480,436,460,444,465,464],
[437,0,461,455,490,440,448,435,442,458],
[427,429,0,442,446,443,442,441,405,438],
[435,435,448,0,450,438,433,440,425,446],
[410,400,444,440,0,419,416,394,404,441],
[454,450,447,452,471,0,460,438,426,449],
[430,442,448,457,474,430,0,442,429,426],
[446,455,449,450,496,452,448,0,430,461],
[425,448,485,465,486,464,461,460,0,454],
[426,432,452,444,449,441,464,429,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,575,444,445,491,514,504,480,499,440],
[315,0,426,420,452,386,443,476,371,410],
[446,464,0,447,546,480,463,460,397,466],
[445,470,443,0,534,439,434,456,411,399],
[399,438,344,356,0,412,451,483,399,453],
[376,504,410,451,478,0,459,422,404,423],
[386,447,427,456,439,431,0,461,357,458],
[410,414,430,434,407,468,429,0,366,427],
[391,519,493,479,491,486,533,524,0,510],
[450,480,424,491,437,467,432,463,380,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,422,448,440,442,437,447,468,440],
[455,0,438,450,437,442,452,430,446,427],
[468,452,0,446,421,454,440,417,446,442],
[442,440,444,0,439,421,455,411,429,453],
[450,453,469,451,0,440,474,451,424,423],
[448,448,436,469,450,0,466,435,428,437],
[453,438,450,435,416,424,0,430,423,430],
[443,460,473,479,439,455,460,0,459,429],
[422,444,444,461,466,462,467,431,0,440],
[450,463,448,437,467,453,460,461,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,461,471,439,458,455,464,455,467],
[443,0,454,470,448,446,428,458,439,450],
[429,436,0,463,422,454,430,446,448,450],
[419,420,427,0,422,435,430,422,448,418],
[451,442,468,468,0,469,440,451,449,453],
[432,444,436,455,421,0,429,444,452,429],
[435,462,460,460,450,461,0,456,458,458],
[426,432,444,468,439,446,434,0,444,454],
[435,451,442,442,441,438,432,446,0,440],
[423,440,440,472,437,461,432,436,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,472,451,436,448,435,458,458,424],
[435,0,452,428,425,463,432,461,460,403],
[418,438,0,446,438,447,435,456,452,427],
[439,462,444,0,448,447,436,460,449,445],
[454,465,452,442,0,474,450,471,473,459],
[442,427,443,443,416,0,453,443,435,434],
[455,458,455,454,440,437,0,462,460,451],
[432,429,434,430,419,447,428,0,435,423],
[432,430,438,441,417,455,430,455,0,422],
[466,487,463,445,431,456,439,467,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,481,480,463,442,443,482,450,465],
[442,0,471,479,463,457,445,518,474,493],
[409,419,0,407,408,414,405,454,416,413],
[410,411,483,0,434,424,423,441,423,441],
[427,427,482,456,0,443,436,476,446,468],
[448,433,476,466,447,0,444,460,458,440],
[447,445,485,467,454,446,0,489,473,482],
[408,372,436,449,414,430,401,0,435,438],
[440,416,474,467,444,432,417,455,0,444],
[425,397,477,449,422,450,408,452,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,425,428,466,451,448,453,454,446],
[443,0,436,424,437,440,447,475,456,423],
[465,454,0,435,431,435,444,447,462,447],
[462,466,455,0,445,468,442,473,457,455],
[424,453,459,445,0,443,493,476,455,435],
[439,450,455,422,447,0,471,467,446,452],
[442,443,446,448,397,419,0,464,423,454],
[437,415,443,417,414,423,426,0,428,428],
[436,434,428,433,435,444,467,462,0,422],
[444,467,443,435,455,438,436,462,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,465,443,463,469,474,499,462,488],
[429,0,464,437,418,449,456,476,456,476],
[425,426,0,442,422,430,465,505,459,463],
[447,453,448,0,457,421,442,486,478,456],
[427,472,468,433,0,432,467,474,451,446],
[421,441,460,469,458,0,467,501,486,451],
[416,434,425,448,423,423,0,480,464,454],
[391,414,385,404,416,389,410,0,439,413],
[428,434,431,412,439,404,426,451,0,453],
[402,414,427,434,444,439,436,477,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,427,469,449,446,426,446,461,438],
[443,0,440,453,459,447,423,453,458,454],
[463,450,0,460,463,437,457,465,474,439],
[421,437,430,0,440,420,413,453,429,435],
[441,431,427,450,0,441,440,449,440,416],
[444,443,453,470,449,0,442,452,462,456],
[464,467,433,477,450,448,0,443,471,429],
[444,437,425,437,441,438,447,0,430,442],
[429,432,416,461,450,428,419,460,0,433],
[452,436,451,455,474,434,461,448,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,428,430,436,418,449,439,440,452],
[450,0,428,423,434,418,429,437,435,469],
[462,462,0,445,431,423,444,429,463,471],
[460,467,445,0,440,452,449,442,462,449],
[454,456,459,450,0,418,452,449,456,464],
[472,472,467,438,472,0,456,476,462,469],
[441,461,446,441,438,434,0,458,463,452],
[451,453,461,448,441,414,432,0,431,453],
[450,455,427,428,434,428,427,459,0,445],
[438,421,419,441,426,421,438,437,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,429,450,439,458,443,469,446,432],
[424,0,418,442,419,450,437,448,423,427],
[461,472,0,451,462,467,445,470,464,455],
[440,448,439,0,453,449,442,456,452,427],
[451,471,428,437,0,454,454,475,440,448],
[432,440,423,441,436,0,424,451,429,425],
[447,453,445,448,436,466,0,486,457,448],
[421,442,420,434,415,439,404,0,427,432],
[444,467,426,438,450,461,433,463,0,437],
[458,463,435,463,442,465,442,458,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,459,445,401,422,420,428,436,469],
[436,0,457,407,429,464,409,442,448,444],
[431,433,0,387,416,447,399,398,416,464],
[445,483,503,0,445,461,439,438,439,484],
[489,461,474,445,0,447,434,446,442,465],
[468,426,443,429,443,0,436,463,439,442],
[470,481,491,451,456,454,0,463,441,477],
[462,448,492,452,444,427,427,0,428,462],
[454,442,474,451,448,451,449,462,0,458],
[421,446,426,406,425,448,413,428,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,457,452,491,452,426,460,432,452],
[447,0,444,437,438,477,438,451,428,472],
[433,446,0,403,438,481,448,424,427,476],
[438,453,487,0,487,478,439,478,452,501],
[399,452,452,403,0,443,423,435,442,429],
[438,413,409,412,447,0,412,422,408,448],
[464,452,442,451,467,478,0,444,458,478],
[430,439,466,412,455,468,446,0,422,464],
[458,462,463,438,448,482,432,468,0,467],
[438,418,414,389,461,442,412,426,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,435,448,456,440,428,444,419,440],
[446,0,436,436,440,435,424,443,448,439],
[455,454,0,454,462,447,420,447,452,430],
[442,454,436,0,450,440,432,431,449,451],
[434,450,428,440,0,428,427,422,427,442],
[450,455,443,450,462,0,436,445,460,444],
[462,466,470,458,463,454,0,452,442,462],
[446,447,443,459,468,445,438,0,462,434],
[471,442,438,441,463,430,448,428,0,444],
[450,451,460,439,448,446,428,456,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,451,449,460,453,431,450,447,482],
[438,0,442,445,460,431,410,417,429,448],
[439,448,0,440,460,447,438,450,433,459],
[441,445,450,0,473,424,419,429,453,452],
[430,430,430,417,0,429,446,443,408,454],
[437,459,443,466,461,0,428,434,453,448],
[459,480,452,471,444,462,0,447,430,446],
[440,473,440,461,447,456,443,0,443,465],
[443,461,457,437,482,437,460,447,0,450],
[408,442,431,438,436,442,444,425,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,443,436,444,444,446,449,479,458],
[456,0,430,457,447,453,450,449,460,434],
[447,460,0,451,446,477,434,461,462,462],
[454,433,439,0,449,459,433,449,451,466],
[446,443,444,441,0,446,454,448,448,437],
[446,437,413,431,444,0,418,459,464,444],
[444,440,456,457,436,472,0,457,453,460],
[441,441,429,441,442,431,433,0,446,455],
[411,430,428,439,442,426,437,444,0,430],
[432,456,428,424,453,446,430,435,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,473,543,470,504,467,490,435,498],
[393,0,429,470,401,484,408,338,480,409],
[417,461,0,542,499,460,418,462,420,474],
[347,420,348,0,402,426,328,325,387,367],
[420,489,391,488,0,458,426,400,418,468],
[386,406,430,464,432,0,439,414,375,480],
[423,482,472,562,464,451,0,425,430,487],
[400,552,428,565,490,476,465,0,447,511],
[455,410,470,503,472,515,460,443,0,510],
[392,481,416,523,422,410,403,379,380,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,422,454,437,454,429,447,426,435],
[441,0,417,437,437,461,438,425,420,421],
[468,473,0,465,429,490,433,455,447,449],
[436,453,425,0,433,449,421,418,418,426],
[453,453,461,457,0,465,436,433,437,441],
[436,429,400,441,425,0,418,426,425,421],
[461,452,457,469,454,472,0,433,455,442],
[443,465,435,472,457,464,457,0,427,443],
[464,470,443,472,453,465,435,463,0,448],
[455,469,441,464,449,469,448,447,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,408,350,407,455,390,383,474,431],
[483,0,467,404,434,514,470,512,440,436],
[482,423,0,409,385,419,383,503,406,505],
[540,486,481,0,431,502,542,519,483,496],
[483,456,505,459,0,427,428,450,522,456],
[435,376,471,388,463,0,459,458,456,446],
[500,420,507,348,462,431,0,410,476,409],
[507,378,387,371,440,432,480,0,458,436],
[416,450,484,407,368,434,414,432,0,461],
[459,454,385,394,434,444,481,454,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,470,450,439,440,466,424,437,437],
[449,0,469,433,454,426,501,440,459,420],
[420,421,0,456,450,429,466,415,441,394],
[440,457,434,0,414,433,490,430,489,377],
[451,436,440,476,0,431,464,487,478,483],
[450,464,461,457,459,0,486,415,502,474],
[424,389,424,400,426,404,0,393,434,416],
[466,450,475,460,403,475,497,0,483,413],
[453,431,449,401,412,388,456,407,0,417],
[453,470,496,513,407,416,474,477,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,449,456,452,422,456,436,455,472],
[460,0,462,455,447,430,459,441,477,457],
[441,428,0,457,461,444,454,429,451,463],
[434,435,433,0,454,407,437,435,435,458],
[438,443,429,436,0,423,455,435,447,443],
[468,460,446,483,467,0,454,445,465,491],
[434,431,436,453,435,436,0,419,447,469],
[454,449,461,455,455,445,471,0,481,479],
[435,413,439,455,443,425,443,409,0,447],
[418,433,427,432,447,399,421,411,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,374,406,425,411,440,397,416,369],
[488,0,459,471,423,457,496,428,468,443],
[516,431,0,448,459,421,441,469,426,445],
[484,419,442,0,414,444,472,438,424,464],
[465,467,431,476,0,423,476,462,447,462],
[479,433,469,446,467,0,450,490,492,438],
[450,394,449,418,414,440,0,404,455,439],
[493,462,421,452,428,400,486,0,425,436],
[474,422,464,466,443,398,435,465,0,402],
[521,447,445,426,428,452,451,454,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,439,443,428,436,471,467,425,445],
[447,0,426,434,442,447,479,464,444,449],
[451,464,0,451,458,428,491,466,426,427],
[447,456,439,0,442,432,475,458,451,429],
[462,448,432,448,0,446,479,458,427,443],
[454,443,462,458,444,0,488,482,443,433],
[419,411,399,415,411,402,0,407,396,417],
[423,426,424,432,432,408,483,0,436,393],
[465,446,464,439,463,447,494,454,0,444],
[445,441,463,461,447,457,473,497,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,491,447,478,420,426,460,457,441],
[411,0,430,390,412,408,425,441,412,412],
[399,460,0,426,431,398,440,434,424,452],
[443,500,464,0,464,465,459,485,423,472],
[412,478,459,426,0,455,432,480,429,438],
[470,482,492,425,435,0,468,441,436,454],
[464,465,450,431,458,422,0,480,392,445],
[430,449,456,405,410,449,410,0,417,433],
[433,478,466,467,461,454,498,473,0,463],
[449,478,438,418,452,436,445,457,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,458,460,466,447,468,449,435,509],
[452,0,440,432,451,448,464,456,423,472],
[432,450,0,439,453,478,442,411,436,513],
[430,458,451,0,426,457,444,400,435,477],
[424,439,437,464,0,477,456,447,442,473],
[443,442,412,433,413,0,438,420,427,483],
[422,426,448,446,434,452,0,431,435,487],
[441,434,479,490,443,470,459,0,456,505],
[455,467,454,455,448,463,455,434,0,499],
[381,418,377,413,417,407,403,385,391,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,447,467,445,475,430,439,439,433],
[433,0,432,421,427,423,420,425,434,407],
[443,458,0,456,429,452,436,455,438,425],
[423,469,434,0,441,435,429,437,432,435],
[445,463,461,449,0,449,455,460,447,443],
[415,467,438,455,441,0,430,436,443,440],
[460,470,454,461,435,460,0,433,450,453],
[451,465,435,453,430,454,457,0,435,426],
[451,456,452,458,443,447,440,455,0,429],
[457,483,465,455,447,450,437,464,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,440,470,455,450,457,447,431,469],
[430,0,483,432,439,442,457,453,414,476],
[450,407,0,421,402,448,462,435,415,442],
[420,458,469,0,451,449,452,465,448,470],
[435,451,488,439,0,500,480,460,432,486],
[440,448,442,441,390,0,450,434,391,474],
[433,433,428,438,410,440,0,433,403,439],
[443,437,455,425,430,456,457,0,422,475],
[459,476,475,442,458,499,487,468,0,503],
[421,414,448,420,404,416,451,415,387,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,445,478,442,443,474,431,419,473],
[451,0,439,458,458,431,461,461,445,466],
[445,451,0,478,448,454,483,455,439,462],
[412,432,412,0,415,444,461,441,415,416],
[448,432,442,475,0,462,470,466,466,462],
[447,459,436,446,428,0,480,440,462,454],
[416,429,407,429,420,410,0,451,446,438],
[459,429,435,449,424,450,439,0,431,420],
[471,445,451,475,424,428,444,459,0,451],
[417,424,428,474,428,436,452,470,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,467,435,446,443,462,443,450,449],
[437,0,469,417,452,430,443,430,447,447],
[423,421,0,422,425,422,449,408,433,440],
[455,473,468,0,463,447,457,449,443,452],
[444,438,465,427,0,438,471,434,449,452],
[447,460,468,443,452,0,464,445,459,456],
[428,447,441,433,419,426,0,434,446,440],
[447,460,482,441,456,445,456,0,446,451],
[440,443,457,447,441,431,444,444,0,446],
[441,443,450,438,438,434,450,439,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,437,453,476,467,405,421,398,402],
[465,0,463,468,482,485,451,438,424,453],
[453,427,0,452,478,479,459,457,441,446],
[437,422,438,0,448,443,458,447,394,399],
[414,408,412,442,0,448,397,396,393,381],
[423,405,411,447,442,0,428,428,395,389],
[485,439,431,432,493,462,0,458,433,425],
[469,452,433,443,494,462,432,0,448,431],
[492,466,449,496,497,495,457,442,0,417],
[488,437,444,491,509,501,465,459,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,447,415,469,440,509,452,437,446],
[436,0,437,447,445,432,493,472,440,439],
[443,453,0,458,463,435,477,484,466,440],
[475,443,432,0,458,459,500,479,447,452],
[421,445,427,432,0,422,457,461,457,430],
[450,458,455,431,468,0,493,467,505,464],
[381,397,413,390,433,397,0,420,429,392],
[438,418,406,411,429,423,470,0,437,443],
[453,450,424,443,433,385,461,453,0,415],
[444,451,450,438,460,426,498,447,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,436,437,440,427,436,431,435,414],
[434,0,418,403,406,409,448,424,424,424],
[454,472,0,443,445,433,444,436,453,451],
[453,487,447,0,467,447,461,434,441,438],
[450,484,445,423,0,428,448,437,436,446],
[463,481,457,443,462,0,473,457,446,488],
[454,442,446,429,442,417,0,427,439,459],
[459,466,454,456,453,433,463,0,445,455],
[455,466,437,449,454,444,451,445,0,437],
[476,466,439,452,444,402,431,435,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,499,475,452,459,463,431,422,424],
[453,0,442,441,484,474,450,438,423,437],
[391,448,0,413,447,450,416,456,426,427],
[415,449,477,0,451,425,444,444,411,389],
[438,406,443,439,0,434,429,444,417,441],
[431,416,440,465,456,0,448,474,446,414],
[427,440,474,446,461,442,0,425,425,434],
[459,452,434,446,446,416,465,0,434,474],
[468,467,464,479,473,444,465,456,0,462],
[466,453,463,501,449,476,456,416,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,407,453,473,474,450,412,446,438],
[443,0,413,437,463,480,458,379,424,447],
[483,477,0,430,473,482,484,459,452,448],
[437,453,460,0,485,469,478,414,428,442],
[417,427,417,405,0,450,409,403,400,413],
[416,410,408,421,440,0,431,387,423,434],
[440,432,406,412,481,459,0,389,423,428],
[478,511,431,476,487,503,501,0,451,504],
[444,466,438,462,490,467,467,439,0,473],
[452,443,442,448,477,456,462,386,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,425,450,428,417,466,446,426,432],
[460,0,431,453,449,444,478,442,453,447],
[465,459,0,475,463,440,471,445,462,464],
[440,437,415,0,428,426,444,429,419,422],
[462,441,427,462,0,458,483,452,442,430],
[473,446,450,464,432,0,483,448,449,443],
[424,412,419,446,407,407,0,429,424,416],
[444,448,445,461,438,442,461,0,446,434],
[464,437,428,471,448,441,466,444,0,445],
[458,443,426,468,460,447,474,456,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,458,451,448,423,456,464,446,445],
[459,0,479,462,465,445,472,462,454,460],
[432,411,0,445,425,411,416,434,419,437],
[439,428,445,0,445,413,444,448,450,428],
[442,425,465,445,0,426,470,454,435,455],
[467,445,479,477,464,0,464,479,460,472],
[434,418,474,446,420,426,0,431,427,444],
[426,428,456,442,436,411,459,0,431,424],
[444,436,471,440,455,430,463,459,0,438],
[445,430,453,462,435,418,446,466,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,463,386,446,445,438,477,422,464],
[420,0,463,407,445,478,421,474,462,433],
[427,427,0,411,452,475,458,489,438,446],
[504,483,479,0,460,494,467,488,438,451],
[444,445,438,430,0,467,429,457,430,428],
[445,412,415,396,423,0,419,414,411,399],
[452,469,432,423,461,471,0,465,444,448],
[413,416,401,402,433,476,425,0,410,434],
[468,428,452,452,460,479,446,480,0,447],
[426,457,444,439,462,491,442,456,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,413,504,472,461,466,439,453,445],
[446,0,481,458,432,436,473,463,471,453],
[477,409,0,500,423,428,411,470,464,430],
[386,432,390,0,384,405,392,440,400,409],
[418,458,467,506,0,430,482,428,430,419],
[429,454,462,485,460,0,454,488,424,438],
[424,417,479,498,408,436,0,470,442,418],
[451,427,420,450,462,402,420,0,443,403],
[437,419,426,490,460,466,448,447,0,436],
[445,437,460,481,471,452,472,487,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,454,418,439,441,460,434,448,405],
[452,0,470,431,440,420,427,443,475,455],
[436,420,0,409,396,419,417,414,444,408],
[472,459,481,0,442,440,443,437,438,450],
[451,450,494,448,0,440,429,436,439,439],
[449,470,471,450,450,0,453,455,460,439],
[430,463,473,447,461,437,0,425,457,405],
[456,447,476,453,454,435,465,0,453,414],
[442,415,446,452,451,430,433,437,0,441],
[485,435,482,440,451,451,485,476,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,455,481,490,445,527,547,485,462],
[376,0,396,404,461,378,458,448,437,389],
[435,494,0,420,509,443,483,487,454,428],
[409,486,470,0,482,435,455,516,521,440],
[400,429,381,408,0,375,431,509,439,383],
[445,512,447,455,515,0,542,460,460,463],
[363,432,407,435,459,348,0,440,426,406],
[343,442,403,374,381,430,450,0,403,379],
[405,453,436,369,451,430,464,487,0,400],
[428,501,462,450,507,427,484,511,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,418,447,446,445,453,463,432,461],
[443,0,424,451,452,448,434,437,420,450],
[472,466,0,432,429,426,456,458,449,459],
[443,439,458,0,423,454,431,455,426,467],
[444,438,461,467,0,443,454,439,439,472],
[445,442,464,436,447,0,425,446,451,432],
[437,456,434,459,436,465,0,417,438,463],
[427,453,432,435,451,444,473,0,413,442],
[458,470,441,464,451,439,452,477,0,450],
[429,440,431,423,418,458,427,448,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,420,418,439,423,431,418,430,416],
[460,0,453,427,454,454,468,455,450,439],
[470,437,0,445,445,453,461,436,461,427],
[472,463,445,0,455,445,455,459,473,454],
[451,436,445,435,0,449,445,443,438,440],
[467,436,437,445,441,0,434,427,457,427],
[459,422,429,435,445,456,0,414,431,412],
[472,435,454,431,447,463,476,0,468,450],
[460,440,429,417,452,433,459,422,0,450],
[474,451,463,436,450,463,478,440,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,439,413,469,454,418,438,412,420],
[443,0,392,384,445,434,409,427,404,415],
[451,498,0,429,452,451,425,462,473,448],
[477,506,461,0,481,480,448,480,445,437],
[421,445,438,409,0,432,423,435,416,403],
[436,456,439,410,458,0,389,434,411,388],
[472,481,465,442,467,501,0,459,472,442],
[452,463,428,410,455,456,431,0,434,442],
[478,486,417,445,474,479,418,456,0,454],
[470,475,442,453,487,502,448,448,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,439,444,443,436,440,437,437,467],
[450,0,445,460,454,457,430,446,448,448],
[451,445,0,443,447,438,440,419,464,445],
[446,430,447,0,429,444,445,426,440,446],
[447,436,443,461,0,434,459,424,457,465],
[454,433,452,446,456,0,434,430,455,464],
[450,460,450,445,431,456,0,434,438,471],
[453,444,471,464,466,460,456,0,454,472],
[453,442,426,450,433,435,452,436,0,458],
[423,442,445,444,425,426,419,418,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,421,458,478,438,447,470,437,411],
[462,0,461,465,476,443,451,510,436,441],
[469,429,0,467,493,492,471,471,461,417],
[432,425,423,0,467,447,458,439,437,430],
[412,414,397,423,0,429,391,448,447,390],
[452,447,398,443,461,0,459,473,431,413],
[443,439,419,432,499,431,0,459,421,417],
[420,380,419,451,442,417,431,0,396,356],
[453,454,429,453,443,459,469,494,0,452],
[479,449,473,460,500,477,473,534,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,416,403,436,427,437,440,395,432],
[449,0,436,449,440,441,431,445,418,429],
[474,454,0,431,441,432,449,456,439,439],
[487,441,459,0,464,451,445,458,441,458],
[454,450,449,426,0,440,420,434,426,424],
[463,449,458,439,450,0,442,463,422,462],
[453,459,441,445,470,448,0,450,450,439],
[450,445,434,432,456,427,440,0,410,427],
[495,472,451,449,464,468,440,480,0,444],
[458,461,451,432,466,428,451,463,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,448,436,442,439,419,426,418,435],
[434,0,451,447,454,453,421,440,438,459],
[442,439,0,458,460,466,431,435,436,450],
[454,443,432,0,445,454,454,428,448,470],
[448,436,430,445,0,434,420,469,445,475],
[451,437,424,436,456,0,444,424,429,458],
[471,469,459,436,470,446,0,464,455,465],
[464,450,455,462,421,466,426,0,431,460],
[472,452,454,442,445,461,435,459,0,458],
[455,431,440,420,415,432,425,430,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,452,464,451,431,470,446,425,486],
[414,0,451,437,428,430,445,439,455,466],
[438,439,0,460,434,436,482,447,435,477],
[426,453,430,0,436,455,481,452,470,467],
[439,462,456,454,0,457,490,465,439,478],
[459,460,454,435,433,0,486,453,448,491],
[420,445,408,409,400,404,0,411,402,447],
[444,451,443,438,425,437,479,0,443,460],
[465,435,455,420,451,442,488,447,0,465],
[404,424,413,423,412,399,443,430,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,479,488,495,482,468,481,445,462],
[428,0,456,441,463,467,467,432,401,460],
[411,434,0,443,470,453,452,429,403,434],
[402,449,447,0,475,440,465,440,446,446],
[395,427,420,415,0,457,429,425,424,419],
[408,423,437,450,433,0,436,421,396,414],
[422,423,438,425,461,454,0,451,412,438],
[409,458,461,450,465,469,439,0,436,456],
[445,489,487,444,466,494,478,454,0,458],
[428,430,456,444,471,476,452,434,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,440,450,481,467,446,450,457,463],
[438,0,445,455,448,446,445,440,451,458],
[450,445,0,448,463,459,439,443,439,459],
[440,435,442,0,442,469,440,444,462,459],
[409,442,427,448,0,455,430,421,417,445],
[423,444,431,421,435,0,427,437,429,427],
[444,445,451,450,460,463,0,458,437,480],
[440,450,447,446,469,453,432,0,441,455],
[433,439,451,428,473,461,453,449,0,459],
[427,432,431,431,445,463,410,435,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,410,415,427,396,468,413,447,418],
[463,0,450,444,470,479,494,434,454,482],
[480,440,0,403,460,445,489,431,436,456],
[475,446,487,0,444,460,540,478,462,476],
[463,420,430,446,0,448,469,433,425,426],
[494,411,445,430,442,0,468,445,467,425],
[422,396,401,350,421,422,0,350,418,398],
[477,456,459,412,457,445,540,0,455,446],
[443,436,454,428,465,423,472,435,0,462],
[472,408,434,414,464,465,492,444,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,461,421,431,439,429,437,433,448],
[459,0,489,432,458,446,469,449,446,452],
[429,401,0,450,440,416,442,424,458,429],
[469,458,440,0,447,440,448,439,461,463],
[459,432,450,443,0,440,434,444,456,440],
[451,444,474,450,450,0,438,444,448,447],
[461,421,448,442,456,452,0,438,458,425],
[453,441,466,451,446,446,452,0,449,454],
[457,444,432,429,434,442,432,441,0,431],
[442,438,461,427,450,443,465,436,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,477,449,463,453,446,435,477,404],
[452,0,464,438,447,437,494,438,468,427],
[413,426,0,391,400,447,494,396,420,422],
[441,452,499,0,440,419,514,439,446,409],
[427,443,490,450,0,433,462,456,442,390],
[437,453,443,471,457,0,491,440,446,439],
[444,396,396,376,428,399,0,419,409,424],
[455,452,494,451,434,450,471,0,437,445],
[413,422,470,444,448,444,481,453,0,429],
[486,463,468,481,500,451,466,445,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,440,440,464,455,440,461,437,483],
[466,0,433,465,480,430,457,457,442,469],
[450,457,0,468,477,461,441,471,464,491],
[450,425,422,0,448,401,447,442,432,458],
[426,410,413,442,0,425,409,460,447,461],
[435,460,429,489,465,0,421,446,437,460],
[450,433,449,443,481,469,0,481,449,498],
[429,433,419,448,430,444,409,0,442,458],
[453,448,426,458,443,453,441,448,0,495],
[407,421,399,432,429,430,392,432,395,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,498,418,450,419,465,445,410,483],
[441,0,543,408,456,427,470,370,422,483],
[392,347,0,381,416,452,439,368,386,439],
[472,482,509,0,495,472,471,430,460,578],
[440,434,474,395,0,423,415,398,400,455],
[471,463,438,418,467,0,485,414,414,480],
[425,420,451,419,475,405,0,390,379,460],
[445,520,522,460,492,476,500,0,473,501],
[480,468,504,430,490,476,511,417,0,483],
[407,407,451,312,435,410,430,389,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,339,459,444,521,325,344,390,377],
[487,0,376,483,395,480,419,389,353,410],
[551,514,0,434,464,566,412,400,443,557],
[431,407,456,0,466,544,414,486,441,479],
[446,495,426,424,0,460,380,362,446,420],
[369,410,324,346,430,0,362,363,466,337],
[565,471,478,476,510,528,0,484,464,431],
[546,501,490,404,528,527,406,0,452,478],
[500,537,447,449,444,424,426,438,0,430],
[513,480,333,411,470,553,459,412,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,424,459,434,423,436,432,411,444],
[432,0,432,429,434,427,417,417,449,431],
[466,458,0,429,461,414,428,440,458,445],
[431,461,461,0,440,455,446,396,437,459],
[456,456,429,450,0,439,420,416,432,452],
[467,463,476,435,451,0,433,457,466,456],
[454,473,462,444,470,457,0,414,462,477],
[458,473,450,494,474,433,476,0,446,478],
[479,441,432,453,458,424,428,444,0,445],
[446,459,445,431,438,434,413,412,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,475,415,456,466,443,429,461,439],
[465,0,470,427,488,444,448,446,455,444],
[415,420,0,394,453,450,416,382,413,404],
[475,463,496,0,480,486,442,438,470,429],
[434,402,437,410,0,449,423,426,405,430],
[424,446,440,404,441,0,420,377,420,403],
[447,442,474,448,467,470,0,452,463,429],
[461,444,508,452,464,513,438,0,465,421],
[429,435,477,420,485,470,427,425,0,449],
[451,446,486,461,460,487,461,469,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,457,398,459,490,426,456,472,403],
[419,0,454,423,444,494,446,441,440,413],
[433,436,0,396,418,437,413,434,423,405],
[492,467,494,0,511,510,494,450,474,440],
[431,446,472,379,0,477,451,452,447,403],
[400,396,453,380,413,0,443,434,438,398],
[464,444,477,396,439,447,0,420,445,417],
[434,449,456,440,438,456,470,0,473,460],
[418,450,467,416,443,452,445,417,0,434],
[487,477,485,450,487,492,473,430,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,431,410,463,434,436,428,439,442],
[439,0,422,440,458,446,449,442,443,458],
[459,468,0,450,487,434,472,455,455,462],
[480,450,440,0,489,444,477,453,471,464],
[427,432,403,401,0,409,429,420,443,436],
[456,444,456,446,481,0,454,466,462,427],
[454,441,418,413,461,436,0,448,443,437],
[462,448,435,437,470,424,442,0,433,434],
[451,447,435,419,447,428,447,457,0,454],
[448,432,428,426,454,463,453,456,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,430,449,428,468,458,408,418,413],
[488,0,468,475,447,484,484,430,433,430],
[460,422,0,426,436,467,441,423,433,434],
[441,415,464,0,439,464,441,437,417,406],
[462,443,454,451,0,487,463,437,427,437],
[422,406,423,426,403,0,433,420,411,428],
[432,406,449,449,427,457,0,403,413,412],
[482,460,467,453,453,470,487,0,452,445],
[472,457,457,473,463,479,477,438,0,451],
[477,460,456,484,453,462,478,445,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,385,384,413,393,392,434,477,409,477],
[505,0,491,416,458,448,472,489,520,439],
[506,399,0,341,379,426,448,431,389,463],
[477,474,549,0,473,412,542,493,522,519],
[497,432,511,417,0,374,472,514,436,528],
[498,442,464,478,516,0,510,524,468,543],
[456,418,442,348,418,380,0,392,364,484],
[413,401,459,397,376,366,498,0,504,410],
[481,370,501,368,454,422,526,386,0,419],
[413,451,427,371,362,347,406,480,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,457,450,457,458,479,444,432,447],
[444,0,462,436,471,460,454,450,454,439],
[433,428,0,448,442,436,438,453,433,422],
[440,454,442,0,462,457,456,464,433,435],
[433,419,448,428,0,427,472,436,431,424],
[432,430,454,433,463,0,456,434,434,459],
[411,436,452,434,418,434,0,434,418,422],
[446,440,437,426,454,456,456,0,420,429],
[458,436,457,457,459,456,472,470,0,453],
[443,451,468,455,466,431,468,461,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,446,439,454,434,456,482,448,452],
[443,0,407,433,452,408,445,466,441,425],
[444,483,0,446,481,409,449,467,428,458],
[451,457,444,0,481,432,449,482,443,453],
[436,438,409,409,0,398,399,447,431,446],
[456,482,481,458,492,0,455,493,456,439],
[434,445,441,441,491,435,0,484,446,447],
[408,424,423,408,443,397,406,0,412,423],
[442,449,462,447,459,434,444,478,0,457],
[438,465,432,437,444,451,443,467,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,428,468,453,459,452,432,427,442],
[441,0,468,457,447,460,446,470,423,489],
[462,422,0,462,419,472,436,467,420,469],
[422,433,428,0,436,440,412,441,426,437],
[437,443,471,454,0,457,434,462,448,473],
[431,430,418,450,433,0,402,437,422,426],
[438,444,454,478,456,488,0,440,446,455],
[458,420,423,449,428,453,450,0,442,450],
[463,467,470,464,442,468,444,448,0,478],
[448,401,421,453,417,464,435,440,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,449,496,450,460,494,445,466,495],
[425,0,454,479,459,489,486,438,448,465],
[441,436,0,479,430,474,474,430,454,486],
[394,411,411,0,446,428,447,424,426,476],
[440,431,460,444,0,448,462,426,465,458],
[430,401,416,462,442,0,466,405,439,467],
[396,404,416,443,428,424,0,435,416,439],
[445,452,460,466,464,485,455,0,441,468],
[424,442,436,464,425,451,474,449,0,464],
[395,425,404,414,432,423,451,422,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,432,425,457,459,451,474,451,462],
[446,0,472,465,459,470,471,453,478,433],
[458,418,0,458,453,439,464,464,467,424],
[465,425,432,0,460,420,443,440,440,432],
[433,431,437,430,0,460,448,460,444,423],
[431,420,451,470,430,0,441,432,448,448],
[439,419,426,447,442,449,0,435,444,418],
[416,437,426,450,430,458,455,0,439,436],
[439,412,423,450,446,442,446,451,0,426],
[428,457,466,458,467,442,472,454,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,395,459,407,419,436,412,436,427],
[464,0,417,460,442,452,454,450,458,444],
[495,473,0,500,468,426,477,450,460,468],
[431,430,390,0,391,397,416,440,427,415],
[483,448,422,499,0,414,480,452,451,458],
[471,438,464,493,476,0,459,452,482,455],
[454,436,413,474,410,431,0,442,467,421],
[478,440,440,450,438,438,448,0,465,422],
[454,432,430,463,439,408,423,425,0,441],
[463,446,422,475,432,435,469,468,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,449,437,476,451,433,462,504,453],
[441,0,440,447,496,469,440,447,486,482],
[441,450,0,466,459,462,436,482,476,437],
[453,443,424,0,484,467,406,439,456,457],
[414,394,431,406,0,445,387,434,433,446],
[439,421,428,423,445,0,433,461,481,438],
[457,450,454,484,503,457,0,446,465,444],
[428,443,408,451,456,429,444,0,453,430],
[386,404,414,434,457,409,425,437,0,429],
[437,408,453,433,444,452,446,460,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,448,465,461,487,450,447,416,450],
[422,0,422,472,423,449,454,423,404,395],
[442,468,0,477,451,495,450,463,374,380],
[425,418,413,0,405,490,390,449,380,414],
[429,467,439,485,0,515,421,440,454,478],
[403,441,395,400,375,0,404,440,393,424],
[440,436,440,500,469,486,0,484,410,411],
[443,467,427,441,450,450,406,0,414,461],
[474,486,516,510,436,497,480,476,0,470],
[440,495,510,476,412,466,479,429,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,451,449,454,463,462,448,434,469],
[457,0,452,461,454,451,468,451,437,459],
[439,438,0,430,440,441,461,453,436,469],
[441,429,460,0,450,449,455,430,431,488],
[436,436,450,440,0,434,481,443,451,457],
[427,439,449,441,456,0,461,458,433,476],
[428,422,429,435,409,429,0,434,420,432],
[442,439,437,460,447,432,456,0,438,467],
[456,453,454,459,439,457,470,452,0,494],
[421,431,421,402,433,414,458,423,396,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,464,429,446,459,421,423,458,404],
[420,0,464,402,412,411,443,422,450,392],
[426,426,0,419,432,461,436,436,435,420],
[461,488,471,0,469,498,448,440,467,462],
[444,478,458,421,0,480,494,450,491,433],
[431,479,429,392,410,0,440,402,399,403],
[469,447,454,442,396,450,0,453,450,442],
[467,468,454,450,440,488,437,0,472,401],
[432,440,455,423,399,491,440,418,0,432],
[486,498,470,428,457,487,448,489,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,460,465,453,509,459,473,476,443],
[423,0,421,441,460,464,417,456,445,438],
[430,469,0,469,473,466,445,452,477,484],
[425,449,421,0,447,477,445,447,469,430],
[437,430,417,443,0,482,424,457,460,451],
[381,426,424,413,408,0,441,424,408,446],
[431,473,445,445,466,449,0,484,454,478],
[417,434,438,443,433,466,406,0,424,451],
[414,445,413,421,430,482,436,466,0,448],
[447,452,406,460,439,444,412,439,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,477,411,475,430,458,450,443,449],
[433,0,463,434,438,430,434,457,452,430],
[413,427,0,432,453,425,444,447,421,414],
[479,456,458,0,475,434,453,460,458,468],
[415,452,437,415,0,414,439,435,451,437],
[460,460,465,456,476,0,451,447,442,446],
[432,456,446,437,451,439,0,452,432,442],
[440,433,443,430,455,443,438,0,439,433],
[447,438,469,432,439,448,458,451,0,443],
[441,460,476,422,453,444,448,457,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,487,480,502,459,465,431,468,471],
[435,0,448,472,451,429,447,417,444,441],
[403,442,0,451,463,423,430,452,448,418],
[410,418,439,0,460,401,429,440,433,433],
[388,439,427,430,0,430,434,418,441,427],
[431,461,467,489,460,0,456,434,457,436],
[425,443,460,461,456,434,0,442,454,429],
[459,473,438,450,472,456,448,0,468,436],
[422,446,442,457,449,433,436,422,0,430],
[419,449,472,457,463,454,461,454,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,391,430,427,453,435,408,423,455,435],
[499,0,445,414,453,466,425,448,461,459],
[460,445,0,410,431,413,427,432,430,460],
[463,476,480,0,466,451,465,443,480,487],
[437,437,459,424,0,406,427,389,462,452],
[455,424,477,439,484,0,439,434,463,474],
[482,465,463,425,463,451,0,462,486,500],
[467,442,458,447,501,456,428,0,516,500],
[435,429,460,410,428,427,404,374,0,443],
[455,431,430,403,438,416,390,390,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,439,431,443,437,438,430,409,451],
[472,0,464,478,434,430,444,439,420,462],
[451,426,0,423,452,443,431,421,399,446],
[459,412,467,0,430,454,429,420,401,458],
[447,456,438,460,0,420,419,437,396,451],
[453,460,447,436,470,0,461,446,432,464],
[452,446,459,461,471,429,0,431,443,474],
[460,451,469,470,453,444,459,0,450,467],
[481,470,491,489,494,458,447,440,0,467],
[439,428,444,432,439,426,416,423,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,480,449,440,472,486,479,467,427],
[383,0,381,404,389,406,456,453,406,437],
[410,509,0,459,416,449,475,512,434,465],
[441,486,431,0,418,472,459,471,473,448],
[450,501,474,472,0,440,487,507,453,449],
[418,484,441,418,450,0,492,493,463,445],
[404,434,415,431,403,398,0,452,410,441],
[411,437,378,419,383,397,438,0,423,389],
[423,484,456,417,437,427,480,467,0,457],
[463,453,425,442,441,445,449,501,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,420,468,398,479,456,454,437,418],
[395,0,443,430,395,468,420,398,451,377],
[470,447,0,423,440,445,411,436,426,405],
[422,460,467,0,465,504,428,461,445,449],
[492,495,450,425,0,480,499,445,471,451],
[411,422,445,386,410,0,409,369,384,395],
[434,470,479,462,391,481,0,389,432,421],
[436,492,454,429,445,521,501,0,476,464],
[453,439,464,445,419,506,458,414,0,425],
[472,513,485,441,439,495,469,426,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,457,439,445,417,441,456,441,437],
[455,0,427,454,443,441,431,455,456,435],
[433,463,0,430,443,442,447,443,462,446],
[451,436,460,0,447,444,438,432,444,435],
[445,447,447,443,0,432,441,462,464,453],
[473,449,448,446,458,0,431,450,450,446],
[449,459,443,452,449,459,0,444,452,425],
[434,435,447,458,428,440,446,0,461,443],
[449,434,428,446,426,440,438,429,0,424],
[453,455,444,455,437,444,465,447,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,441,419,434,431,397,429,428,438],
[464,0,458,449,465,458,448,458,438,464],
[449,432,0,429,431,458,414,434,423,434],
[471,441,461,0,436,467,450,465,438,455],
[456,425,459,454,0,452,446,452,432,460],
[459,432,432,423,438,0,393,459,424,440],
[493,442,476,440,444,497,0,484,445,474],
[461,432,456,425,438,431,406,0,407,451],
[462,452,467,452,458,466,445,483,0,474],
[452,426,456,435,430,450,416,439,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,438,461,452,446,409,429,450,434],
[451,0,449,466,470,463,455,453,467,428],
[452,441,0,453,450,458,422,433,467,436],
[429,424,437,0,449,411,425,417,459,412],
[438,420,440,441,0,440,426,421,468,422],
[444,427,432,479,450,0,436,419,459,436],
[481,435,468,465,464,454,0,451,451,440],
[461,437,457,473,469,471,439,0,465,452],
[440,423,423,431,422,431,439,425,0,405],
[456,462,454,478,468,454,450,438,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,470,446,437,430,442,453,455,486],
[385,0,415,426,413,380,423,405,409,435],
[420,475,0,439,432,410,465,421,437,477],
[444,464,451,0,451,475,465,465,449,442],
[453,477,458,439,0,436,461,444,451,452],
[460,510,480,415,454,0,462,439,436,466],
[448,467,425,425,429,428,0,410,401,445],
[437,485,469,425,446,451,480,0,446,477],
[435,481,453,441,439,454,489,444,0,470],
[404,455,413,448,438,424,445,413,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,532,515,508,488,528,589,468,571],
[478,0,595,561,450,435,558,616,511,633],
[358,295,0,490,456,390,590,643,504,520],
[375,329,400,0,482,405,539,533,533,432],
[382,440,434,408,0,381,440,605,452,409],
[402,455,500,485,509,0,472,570,536,521],
[362,332,300,351,450,418,0,493,371,367],
[301,274,247,357,285,320,397,0,307,299],
[422,379,386,357,438,354,519,583,0,391],
[319,257,370,458,481,369,523,591,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,416,440,442,432,444,443,452,441],
[450,0,442,466,472,448,448,453,468,439],
[474,448,0,432,449,460,456,454,463,445],
[450,424,458,0,459,463,462,447,446,453],
[448,418,441,431,0,437,433,428,447,436],
[458,442,430,427,453,0,438,439,455,453],
[446,442,434,428,457,452,0,440,446,453],
[447,437,436,443,462,451,450,0,455,460],
[438,422,427,444,443,435,444,435,0,450],
[449,451,445,437,454,437,437,430,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,406,451,515,588,462,434,384,346],
[411,0,355,369,433,429,322,289,323,310],
[484,535,0,324,383,675,352,435,477,413],
[439,521,566,0,559,556,458,509,362,499],
[375,457,507,331,0,556,359,422,386,373],
[302,461,215,334,334,0,278,223,261,281],
[428,568,538,432,531,612,0,585,397,377],
[456,601,455,381,468,667,305,0,440,343],
[506,567,413,528,504,629,493,450,0,436],
[544,580,477,391,517,609,513,547,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,470,474,452,435,462,449,465,449],
[420,0,455,451,432,428,452,422,439,402],
[420,435,0,459,454,438,471,428,447,428],
[416,439,431,0,429,449,454,431,435,418],
[438,458,436,461,0,416,453,428,475,438],
[455,462,452,441,474,0,489,440,458,443],
[428,438,419,436,437,401,0,389,425,425],
[441,468,462,459,462,450,501,0,446,430],
[425,451,443,455,415,432,465,444,0,443],
[441,488,462,472,452,447,465,460,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,443,445,449,447,447,427,457,449],
[425,0,417,465,430,436,448,429,430,444],
[447,473,0,462,437,460,464,439,439,456],
[445,425,428,0,401,440,440,437,432,434],
[441,460,453,489,0,439,468,455,445,461],
[443,454,430,450,451,0,439,449,437,451],
[443,442,426,450,422,451,0,434,441,449],
[463,461,451,453,435,441,456,0,433,463],
[433,460,451,458,445,453,449,457,0,460],
[441,446,434,456,429,439,441,427,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,492,466,455,472,444,477,461,446],
[440,0,464,431,450,439,414,435,419,410],
[398,426,0,436,439,407,414,439,447,414],
[424,459,454,0,473,463,462,452,445,453],
[435,440,451,417,0,435,421,430,455,423],
[418,451,483,427,455,0,445,436,422,424],
[446,476,476,428,469,445,0,449,459,429],
[413,455,451,438,460,454,441,0,446,428],
[429,471,443,445,435,468,431,444,0,436],
[444,480,476,437,467,466,461,462,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,387,354,357,408,373,403,413,391,455],
[503,0,446,458,460,415,468,465,474,469],
[536,444,0,452,403,460,465,488,453,484],
[533,432,438,0,490,418,460,415,471,503],
[482,430,487,400,0,431,437,440,480,510],
[517,475,430,472,459,0,445,476,478,443],
[487,422,425,430,453,445,0,492,450,428],
[477,425,402,475,450,414,398,0,440,417],
[499,416,437,419,410,412,440,450,0,411],
[435,421,406,387,380,447,462,473,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,479,443,438,474,450,453,456,466],
[413,0,445,423,402,456,445,425,430,471],
[411,445,0,413,439,449,440,432,414,469],
[447,467,477,0,468,481,453,439,453,473],
[452,488,451,422,0,450,443,419,427,466],
[416,434,441,409,440,0,440,420,419,459],
[440,445,450,437,447,450,0,436,444,472],
[437,465,458,451,471,470,454,0,428,481],
[434,460,476,437,463,471,446,462,0,497],
[424,419,421,417,424,431,418,409,393,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,447,448,449,445,438,440,439,428],
[443,0,433,452,448,439,431,432,408,425],
[443,457,0,431,440,445,431,421,421,440],
[442,438,459,0,456,450,449,446,431,457],
[441,442,450,434,0,441,449,424,443,429],
[445,451,445,440,449,0,430,429,441,448],
[452,459,459,441,441,460,0,434,454,435],
[450,458,469,444,466,461,456,0,428,441],
[451,482,469,459,447,449,436,462,0,456],
[462,465,450,433,461,442,455,449,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,449,440,429,441,417,426,455,444],
[468,0,453,456,426,448,441,438,464,437],
[441,437,0,451,433,441,435,447,453,432],
[450,434,439,0,427,450,444,435,454,443],
[461,464,457,463,0,443,451,464,468,445],
[449,442,449,440,447,0,466,439,467,449],
[473,449,455,446,439,424,0,466,466,432],
[464,452,443,455,426,451,424,0,477,439],
[435,426,437,436,422,423,424,413,0,416],
[446,453,458,447,445,441,458,451,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,398,382,420,425,429,433,377,451],
[481,0,412,416,482,435,486,461,409,472],
[492,478,0,433,462,475,457,496,456,468],
[508,474,457,0,484,435,500,486,443,488],
[470,408,428,406,0,415,486,444,428,429],
[465,455,415,455,475,0,461,461,413,450],
[461,404,433,390,404,429,0,377,423,435],
[457,429,394,404,446,429,513,0,439,419],
[513,481,434,447,462,477,467,451,0,499],
[439,418,422,402,461,440,455,471,391,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,430,438,434,434,443,409,418,436],
[480,0,438,454,448,451,470,418,431,420],
[460,452,0,451,462,458,439,435,452,444],
[452,436,439,0,453,445,469,423,453,445],
[456,442,428,437,0,438,429,433,444,441],
[456,439,432,445,452,0,436,409,438,417],
[447,420,451,421,461,454,0,454,445,440],
[481,472,455,467,457,481,436,0,472,454],
[472,459,438,437,446,452,445,418,0,452],
[454,470,446,445,449,473,450,436,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,429,473,513,428,480,427,523,446],
[387,0,382,395,442,381,415,398,433,372],
[461,508,0,463,486,475,515,458,459,419],
[417,495,427,0,432,413,425,403,443,408],
[377,448,404,458,0,461,421,418,451,432],
[462,509,415,477,429,0,467,434,491,439],
[410,475,375,465,469,423,0,453,440,405],
[463,492,432,487,472,456,437,0,466,448],
[367,457,431,447,439,399,450,424,0,407],
[444,518,471,482,458,451,485,442,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,453,454,467,433,477,446,425,464],
[436,0,396,410,414,413,425,389,393,411],
[437,494,0,416,444,414,471,458,450,435],
[436,480,474,0,449,451,464,425,435,444],
[423,476,446,441,0,419,456,430,419,416],
[457,477,476,439,471,0,476,459,435,431],
[413,465,419,426,434,414,0,432,426,425],
[444,501,432,465,460,431,458,0,439,450],
[465,497,440,455,471,455,464,451,0,434],
[426,479,455,446,474,459,465,440,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,468,447,448,438,444,465,452,445],
[419,0,441,433,428,428,422,400,437,446],
[422,449,0,449,419,450,421,426,452,429],
[443,457,441,0,439,486,450,447,446,483],
[442,462,471,451,0,442,430,449,444,439],
[452,462,440,404,448,0,425,460,426,423],
[446,468,469,440,460,465,0,478,435,453],
[425,490,464,443,441,430,412,0,444,432],
[438,453,438,444,446,464,455,446,0,426],
[445,444,461,407,451,467,437,458,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,459,425,440,486,442,449,458,444],
[414,0,422,428,426,432,446,429,428,416],
[431,468,0,424,445,468,455,468,479,450],
[465,462,466,0,467,470,480,466,439,448],
[450,464,445,423,0,448,441,467,448,455],
[404,458,422,420,442,0,445,435,414,435],
[448,444,435,410,449,445,0,449,455,466],
[441,461,422,424,423,455,441,0,431,443],
[432,462,411,451,442,476,435,459,0,444],
[446,474,440,442,435,455,424,447,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,461,440,473,486,428,467,355,445],
[437,0,429,421,482,447,421,508,380,481],
[429,461,0,449,388,467,475,393,393,473],
[450,469,441,0,609,478,516,509,342,547],
[417,408,502,281,0,321,371,501,315,401],
[404,443,423,412,569,0,498,548,465,531],
[462,469,415,374,519,392,0,505,437,464],
[423,382,497,381,389,342,385,0,409,363],
[535,510,497,548,575,425,453,481,0,537],
[445,409,417,343,489,359,426,527,353,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,483,411,404,457,431,454,457,426],
[417,0,459,388,422,427,433,435,433,411],
[407,431,0,416,426,416,437,419,420,417],
[479,502,474,0,445,465,463,447,466,468],
[486,468,464,445,0,463,429,462,458,462],
[433,463,474,425,427,0,447,446,454,454],
[459,457,453,427,461,443,0,450,444,448],
[436,455,471,443,428,444,440,0,431,432],
[433,457,470,424,432,436,446,459,0,431],
[464,479,473,422,428,436,442,458,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,476,449,442,490,469,462,464,472],
[417,0,446,424,446,447,429,437,454,458],
[414,444,0,426,418,435,464,429,447,447],
[441,466,464,0,429,446,459,438,461,461],
[448,444,472,461,0,467,467,463,452,486],
[400,443,455,444,423,0,449,450,437,450],
[421,461,426,431,423,441,0,464,452,476],
[428,453,461,452,427,440,426,0,472,461],
[426,436,443,429,438,453,438,418,0,428],
[418,432,443,429,404,440,414,429,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,431,440,454,457,446,431,463,427],
[426,0,436,424,464,446,434,444,456,428],
[459,454,0,445,481,451,442,435,474,440],
[450,466,445,0,462,453,470,448,460,439],
[436,426,409,428,0,428,433,426,443,425],
[433,444,439,437,462,0,417,423,453,425],
[444,456,448,420,457,473,0,450,455,448],
[459,446,455,442,464,467,440,0,468,434],
[427,434,416,430,447,437,435,422,0,425],
[463,462,450,451,465,465,442,456,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,401,436,407,450,425,411,435,430],
[455,0,432,445,427,443,443,447,441,452],
[489,458,0,466,469,473,466,442,462,474],
[454,445,424,0,435,450,407,433,436,476],
[483,463,421,455,0,481,431,471,438,510],
[440,447,417,440,409,0,434,388,394,425],
[465,447,424,483,459,456,0,456,465,450],
[479,443,448,457,419,502,434,0,441,462],
[455,449,428,454,452,496,425,449,0,452],
[460,438,416,414,380,465,440,428,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,460,487,457,424,466,455,434,429],
[454,0,430,467,448,424,433,451,424,439],
[430,460,0,479,448,429,439,419,423,459],
[403,423,411,0,423,401,418,408,401,413],
[433,442,442,467,0,431,427,415,437,425],
[466,466,461,489,459,0,461,462,446,437],
[424,457,451,472,463,429,0,455,406,441],
[435,439,471,482,475,428,435,0,425,421],
[456,466,467,489,453,444,484,465,0,449],
[461,451,431,477,465,453,449,469,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,446,438,444,457,443,439,441,445],
[436,0,451,431,446,485,432,442,445,421],
[444,439,0,434,458,482,425,424,454,430],
[452,459,456,0,430,470,420,414,450,427],
[446,444,432,460,0,446,439,419,449,423],
[433,405,408,420,444,0,421,416,426,419],
[447,458,465,470,451,469,0,431,437,438],
[451,448,466,476,471,474,459,0,451,439],
[449,445,436,440,441,464,453,439,0,420],
[445,469,460,463,467,471,452,451,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,445,434,446,442,468,436,473,413],
[452,0,429,434,428,429,440,444,472,398],
[445,461,0,420,414,423,449,428,454,405],
[456,456,470,0,437,443,439,442,456,413],
[444,462,476,453,0,439,456,465,508,445],
[448,461,467,447,451,0,453,445,456,413],
[422,450,441,451,434,437,0,443,458,421],
[454,446,462,448,425,445,447,0,452,413],
[417,418,436,434,382,434,432,438,0,404],
[477,492,485,477,445,477,469,477,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,448,446,460,458,406,459,455,417],
[461,0,510,454,492,485,455,482,468,439],
[442,380,0,479,462,465,444,430,416,396],
[444,436,411,0,436,463,408,434,421,400],
[430,398,428,454,0,416,411,416,427,415],
[432,405,425,427,474,0,415,441,432,417],
[484,435,446,482,479,475,0,488,454,426],
[431,408,460,456,474,449,402,0,453,449],
[435,422,474,469,463,458,436,437,0,445],
[473,451,494,490,475,473,464,441,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,441,456,473,470,467,442,453,446],
[419,0,450,438,473,443,415,438,424,433],
[449,440,0,435,494,443,434,451,424,443],
[434,452,455,0,484,464,422,451,454,436],
[417,417,396,406,0,417,426,416,407,388],
[420,447,447,426,473,0,423,465,431,452],
[423,475,456,468,464,467,0,441,439,426],
[448,452,439,439,474,425,449,0,448,458],
[437,466,466,436,483,459,451,442,0,461],
[444,457,447,454,502,438,464,432,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,398,507,427,491,532,423,503,507],
[494,0,196,385,479,578,537,221,245,563],
[492,694,0,532,504,496,537,313,245,680],
[383,505,358,0,395,467,711,284,518,641],
[463,411,386,495,0,491,631,496,602,495],
[399,312,394,423,399,0,617,479,423,423],
[358,353,353,179,259,273,0,284,382,531],
[467,669,577,606,394,411,606,0,319,669],
[387,645,645,372,288,467,508,571,0,546],
[383,327,210,249,395,467,359,221,344,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,438,438,435,421,431,425,432,431],
[492,0,458,472,440,453,475,465,449,460],
[452,432,0,433,420,420,462,438,459,427],
[452,418,457,0,432,455,453,449,457,454],
[455,450,470,458,0,439,440,459,448,435],
[469,437,470,435,451,0,472,441,464,438],
[459,415,428,437,450,418,0,427,446,422],
[465,425,452,441,431,449,463,0,452,442],
[458,441,431,433,442,426,444,438,0,449],
[459,430,463,436,455,452,468,448,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,401,460,490,444,487,430,434,496,465],
[489,0,481,481,487,503,459,443,486,461],
[430,409,0,450,419,414,384,374,433,409],
[400,409,440,0,431,444,408,426,439,412],
[446,403,471,459,0,459,432,455,425,432],
[403,387,476,446,431,0,406,440,444,440],
[460,431,506,482,458,484,0,417,485,466],
[456,447,516,464,435,450,473,0,443,450],
[394,404,457,451,465,446,405,447,0,462],
[425,429,481,478,458,450,424,440,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,400,446,436,429,416,458,448,397,467],
[490,0,487,487,483,450,470,496,430,463],
[444,403,0,455,425,449,450,463,421,424],
[454,403,435,0,389,418,435,463,418,408],
[461,407,465,501,0,407,467,459,426,415],
[474,440,441,472,483,0,492,526,431,431],
[432,420,440,455,423,398,0,482,430,459],
[442,394,427,427,431,364,408,0,405,443],
[493,460,469,472,464,459,460,485,0,444],
[423,427,466,482,475,459,431,447,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,465,482,475,454,469,488,462,473],
[446,0,454,473,448,457,432,477,451,490],
[425,436,0,482,461,436,446,452,435,461],
[408,417,408,0,461,436,433,438,419,438],
[415,442,429,429,0,465,435,462,428,464],
[436,433,454,454,425,0,440,482,433,438],
[421,458,444,457,455,450,0,466,433,446],
[402,413,438,452,428,408,424,0,424,405],
[428,439,455,471,462,457,457,466,0,471],
[417,400,429,452,426,452,444,485,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,455,448,482,444,440,456,456,446],
[437,0,464,427,447,434,443,446,450,452],
[435,426,0,436,459,437,442,436,426,441],
[442,463,454,0,457,442,443,457,446,437],
[408,443,431,433,0,438,431,432,444,431],
[446,456,453,448,452,0,437,442,424,457],
[450,447,448,447,459,453,0,449,454,445],
[434,444,454,433,458,448,441,0,438,429],
[434,440,464,444,446,466,436,452,0,446],
[444,438,449,453,459,433,445,461,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,489,476,453,475,445,431,432,462],
[449,0,476,470,427,482,426,420,456,463],
[401,414,0,402,412,445,403,418,433,421],
[414,420,488,0,432,442,389,409,434,426],
[437,463,478,458,0,476,396,438,446,467],
[415,408,445,448,414,0,398,412,440,435],
[445,464,487,501,494,492,0,447,474,493],
[459,470,472,481,452,478,443,0,480,494],
[458,434,457,456,444,450,416,410,0,472],
[428,427,469,464,423,455,397,396,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,492,413,448,425,465,470,443,456],
[434,0,399,401,410,398,419,395,439,437],
[398,491,0,419,438,427,440,438,430,442],
[477,489,471,0,464,437,467,453,465,495],
[442,480,452,426,0,431,428,462,454,458],
[465,492,463,453,459,0,440,469,449,483],
[425,471,450,423,462,450,0,459,441,476],
[420,495,452,437,428,421,431,0,443,478],
[447,451,460,425,436,441,449,447,0,446],
[434,453,448,395,432,407,414,412,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,474,483,461,470,452,445,465,485],
[447,0,448,478,461,443,474,447,467,497],
[416,442,0,432,415,418,399,427,436,410],
[407,412,458,0,436,436,444,442,436,429],
[429,429,475,454,0,414,443,434,465,443],
[420,447,472,454,476,0,451,443,458,446],
[438,416,491,446,447,439,0,466,475,493],
[445,443,463,448,456,447,424,0,471,457],
[425,423,454,454,425,432,415,419,0,420],
[405,393,480,461,447,444,397,433,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,440,444,450,439,468,490,450,477],
[417,0,398,419,427,417,431,421,417,442],
[450,492,0,456,462,455,474,463,443,484],
[446,471,434,0,439,434,456,438,419,491],
[440,463,428,451,0,429,459,446,451,459],
[451,473,435,456,461,0,474,442,427,484],
[422,459,416,434,431,416,0,443,427,488],
[400,469,427,452,444,448,447,0,447,475],
[440,473,447,471,439,463,463,443,0,464],
[413,448,406,399,431,406,402,415,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,428,500,447,468,413,402,422,418],
[449,0,484,467,435,481,478,418,446,459],
[462,406,0,485,436,451,367,421,407,424],
[390,423,405,0,419,434,379,375,406,433],
[443,455,454,471,0,448,452,392,451,468],
[422,409,439,456,442,0,504,480,460,450],
[477,412,523,511,438,386,0,446,458,457],
[488,472,469,515,498,410,444,0,473,446],
[468,444,483,484,439,430,432,417,0,469],
[472,431,466,457,422,440,433,444,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,485,457,556,517,362,529,472,433],
[469,0,395,506,487,336,361,523,501,361],
[405,495,0,514,439,528,533,538,558,512],
[433,384,376,0,476,472,442,464,560,435],
[334,403,451,414,0,441,378,445,506,358],
[373,554,362,418,449,0,417,479,501,361],
[528,529,357,448,512,473,0,466,545,412],
[361,367,352,426,445,411,424,0,484,340],
[418,389,332,330,384,389,345,406,0,368],
[457,529,378,455,532,529,478,550,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,448,422,452,460,445,452,432,456],
[471,0,442,457,459,483,467,451,428,431],
[442,448,0,432,452,432,420,426,412,414],
[468,433,458,0,457,465,455,474,436,442],
[438,431,438,433,0,422,444,443,425,459],
[430,407,458,425,468,0,441,444,415,429],
[445,423,470,435,446,449,0,432,439,408],
[438,439,464,416,447,446,458,0,433,406],
[458,462,478,454,465,475,451,457,0,435],
[434,459,476,448,431,461,482,484,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,430,415,460,454,453,435,423,438],
[452,0,448,449,485,451,452,445,461,453],
[460,442,0,437,472,430,447,467,444,486],
[475,441,453,0,478,448,442,461,466,469],
[430,405,418,412,0,423,433,401,431,425],
[436,439,460,442,467,0,459,445,431,446],
[437,438,443,448,457,431,0,443,451,438],
[455,445,423,429,489,445,447,0,449,448],
[467,429,446,424,459,459,439,441,0,470],
[452,437,404,421,465,444,452,442,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,466,460,442,478,433,459,445,443],
[459,0,456,477,445,499,463,460,482,452],
[424,434,0,494,416,442,463,454,440,409],
[430,413,396,0,415,424,434,458,403,419],
[448,445,474,475,0,462,451,446,440,451],
[412,391,448,466,428,0,442,460,430,433],
[457,427,427,456,439,448,0,455,430,434],
[431,430,436,432,444,430,435,0,417,421],
[445,408,450,487,450,460,460,473,0,472],
[447,438,481,471,439,457,456,469,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,459,519,458,470,446,483,420,441],
[475,0,441,523,532,496,512,524,478,489],
[431,449,0,503,517,500,459,454,392,436],
[371,367,387,0,394,431,432,434,388,392],
[432,358,373,496,0,483,496,453,461,423],
[420,394,390,459,407,0,416,482,392,406],
[444,378,431,458,394,474,0,509,440,414],
[407,366,436,456,437,408,381,0,429,454],
[470,412,498,502,429,498,450,461,0,476],
[449,401,454,498,467,484,476,436,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,420,430,449,458,418,421,432,433],
[449,0,416,481,471,483,436,435,439,451],
[470,474,0,445,471,453,465,441,458,465],
[460,409,445,0,432,441,450,434,402,419],
[441,419,419,458,0,468,454,439,431,429],
[432,407,437,449,422,0,426,403,406,411],
[472,454,425,440,436,464,0,437,467,450],
[469,455,449,456,451,487,453,0,465,417],
[458,451,432,488,459,484,423,425,0,427],
[457,439,425,471,461,479,440,473,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,455,438,446,488,441,467,461,450],
[446,0,426,419,435,426,427,429,426,418],
[435,464,0,431,422,438,459,458,446,437],
[452,471,459,0,468,448,440,477,480,453],
[444,455,468,422,0,428,425,456,442,438],
[402,464,452,442,462,0,449,442,444,439],
[449,463,431,450,465,441,0,453,450,452],
[423,461,432,413,434,448,437,0,426,430],
[429,464,444,410,448,446,440,464,0,435],
[440,472,453,437,452,451,438,460,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,455,454,457,459,476,442,450,443],
[449,0,443,441,457,435,451,454,438,438],
[435,447,0,436,439,423,451,445,443,455],
[436,449,454,0,434,450,428,427,444,431],
[433,433,451,456,0,446,450,448,443,441],
[431,455,467,440,444,0,455,468,461,445],
[414,439,439,462,440,435,0,431,442,439],
[448,436,445,463,442,422,459,0,454,453],
[440,452,447,446,447,429,448,436,0,415],
[447,452,435,459,449,445,451,437,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,436,436,478,445,462,436,441,462],
[446,0,451,451,442,463,472,443,434,432],
[454,439,0,462,460,446,460,461,437,455],
[454,439,428,0,459,440,441,454,445,435],
[412,448,430,431,0,462,445,466,428,436],
[445,427,444,450,428,0,435,457,428,420],
[428,418,430,449,445,455,0,438,429,430],
[454,447,429,436,424,433,452,0,441,442],
[449,456,453,445,462,462,461,449,0,452],
[428,458,435,455,454,470,460,448,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,446,446,437,467,435,454,444,446],
[465,0,464,462,448,466,444,454,446,467],
[444,426,0,451,441,455,452,451,445,451],
[444,428,439,0,441,486,451,434,431,471],
[453,442,449,449,0,459,460,467,444,472],
[423,424,435,404,431,0,415,446,431,436],
[455,446,438,439,430,475,0,457,457,462],
[436,436,439,456,423,444,433,0,433,470],
[446,444,445,459,446,459,433,457,0,456],
[444,423,439,419,418,454,428,420,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,357,434,442,386,525,474,455,320,469],
[533,0,389,288,338,459,528,498,433,280],
[456,501,0,337,479,596,501,400,652,547],
[448,602,553,0,383,636,412,696,645,583],
[504,552,411,507,0,520,539,520,430,507],
[365,431,294,254,370,0,449,417,531,354],
[416,362,389,478,351,441,0,558,349,396],
[435,392,490,194,370,473,332,0,584,432],
[570,457,238,245,460,359,541,306,0,293],
[421,610,343,307,383,536,494,458,597,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,455,468,411,404,476,456,465,436],
[488,0,467,493,451,433,474,491,470,457],
[435,423,0,452,404,409,471,430,435,387],
[422,397,438,0,417,458,452,426,425,433],
[479,439,486,473,0,415,461,465,467,470],
[486,457,481,432,475,0,465,511,471,473],
[414,416,419,438,429,425,0,432,420,442],
[434,399,460,464,425,379,458,0,444,411],
[425,420,455,465,423,419,470,446,0,435],
[454,433,503,457,420,417,448,479,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,468,426,424,417,442,450,428,441],
[407,0,423,409,425,439,431,421,423,416],
[422,467,0,404,427,446,462,445,449,426],
[464,481,486,0,460,433,459,461,457,458],
[466,465,463,430,0,434,469,474,456,439],
[473,451,444,457,456,0,461,431,431,474],
[448,459,428,431,421,429,0,438,429,440],
[440,469,445,429,416,459,452,0,450,435],
[462,467,441,433,434,459,461,440,0,443],
[449,474,464,432,451,416,450,455,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,450,411,497,443,423,434,456,401],
[380,0,386,328,373,391,352,398,413,373],
[440,504,0,519,490,382,473,482,509,436],
[479,562,371,0,478,395,466,423,471,417],
[393,517,400,412,0,414,414,416,496,425],
[447,499,508,495,476,0,442,473,457,478],
[467,538,417,424,476,448,0,421,500,452],
[456,492,408,467,474,417,469,0,516,431],
[434,477,381,419,394,433,390,374,0,356],
[489,517,454,473,465,412,438,459,534,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,445,428,441,420,410,430,467,456],
[449,0,444,447,457,462,450,442,492,464],
[445,446,0,447,443,446,426,420,449,446],
[462,443,443,0,445,451,420,430,473,433],
[449,433,447,445,0,434,438,431,445,445],
[470,428,444,439,456,0,441,451,455,459],
[480,440,464,470,452,449,0,440,464,453],
[460,448,470,460,459,439,450,0,467,447],
[423,398,441,417,445,435,426,423,0,439],
[434,426,444,457,445,431,437,443,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,472,464,452,441,483,445,453,454],
[417,0,444,447,467,422,448,411,433,450],
[418,446,0,450,444,429,433,415,419,439],
[426,443,440,0,453,410,437,413,416,433],
[438,423,446,437,0,446,450,439,431,426],
[449,468,461,480,444,0,444,435,451,445],
[407,442,457,453,440,446,0,418,429,438],
[445,479,475,477,451,455,472,0,450,458],
[437,457,471,474,459,439,461,440,0,452],
[436,440,451,457,464,445,452,432,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,388,484,442,517,487,472,482,447,488],
[502,0,490,468,525,486,491,493,432,477],
[406,400,0,449,473,435,417,426,430,441],
[448,422,441,0,501,440,474,492,387,507],
[373,365,417,389,0,413,416,469,375,360],
[403,404,455,450,477,0,474,472,415,483],
[418,399,473,416,474,416,0,453,406,414],
[408,397,464,398,421,418,437,0,389,485],
[443,458,460,503,515,475,484,501,0,453],
[402,413,449,383,530,407,476,405,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,483,441,456,455,450,467,435,457],
[438,0,472,449,435,438,431,440,427,445],
[407,418,0,430,407,420,415,420,404,414],
[449,441,460,0,438,410,430,441,446,464],
[434,455,483,452,0,433,462,452,459,465],
[435,452,470,480,457,0,455,469,440,483],
[440,459,475,460,428,435,0,471,426,459],
[423,450,470,449,438,421,419,0,441,449],
[455,463,486,444,431,450,464,449,0,492],
[433,445,476,426,425,407,431,441,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,429,408,453,466,412,453,449,443],
[471,0,437,418,425,428,439,432,430,487],
[461,453,0,440,477,446,398,439,415,452],
[482,472,450,0,524,451,443,416,461,451],
[437,465,413,366,0,408,377,457,455,403],
[424,462,444,439,482,0,448,484,447,479],
[478,451,492,447,513,442,0,427,488,459],
[437,458,451,474,433,406,463,0,473,458],
[441,460,475,429,435,443,402,417,0,431],
[447,403,438,439,487,411,431,432,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,440,433,471,456,455,472,402,459],
[455,0,431,438,439,449,434,455,430,429],
[450,459,0,451,454,479,432,464,446,440],
[457,452,439,0,438,458,437,451,425,447],
[419,451,436,452,0,451,431,445,434,444],
[434,441,411,432,439,0,443,440,411,429],
[435,456,458,453,459,447,0,435,439,441],
[418,435,426,439,445,450,455,0,413,438],
[488,460,444,465,456,479,451,477,0,459],
[431,461,450,443,446,461,449,452,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,443,459,441,443,444,466,448,436],
[447,0,432,448,437,455,448,460,444,438],
[447,458,0,467,473,461,459,477,438,457],
[431,442,423,0,444,445,447,459,437,445],
[449,453,417,446,0,438,447,450,410,425],
[447,435,429,445,452,0,450,471,434,449],
[446,442,431,443,443,440,0,446,417,434],
[424,430,413,431,440,419,444,0,418,402],
[442,446,452,453,480,456,473,472,0,459],
[454,452,433,445,465,441,456,488,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,483,462,450,444,444,460,417,444],
[459,0,525,433,495,419,446,480,451,448],
[407,365,0,417,440,402,410,431,394,414],
[428,457,473,0,465,458,437,458,438,441],
[440,395,450,425,0,417,399,436,411,418],
[446,471,488,432,473,0,458,475,443,440],
[446,444,480,453,491,432,0,472,456,465],
[430,410,459,432,454,415,418,0,432,441],
[473,439,496,452,479,447,434,458,0,462],
[446,442,476,449,472,450,425,449,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,408,424,447,450,420,458,426,440],
[436,0,404,452,450,462,425,436,448,434],
[482,486,0,451,465,483,460,465,483,442],
[466,438,439,0,455,465,456,448,457,458],
[443,440,425,435,0,460,439,442,448,425],
[440,428,407,425,430,0,410,458,437,446],
[470,465,430,434,451,480,0,490,450,472],
[432,454,425,442,448,432,400,0,431,431],
[464,442,407,433,442,453,440,459,0,450],
[450,456,448,432,465,444,418,459,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,452,442,430,452,447,468,430,438],
[436,0,446,423,433,460,433,433,428,427],
[438,444,0,441,427,426,439,435,422,431],
[448,467,449,0,442,454,435,452,444,441],
[460,457,463,448,0,456,437,456,451,446],
[438,430,464,436,434,0,455,442,412,432],
[443,457,451,455,453,435,0,457,432,440],
[422,457,455,438,434,448,433,0,407,442],
[460,462,468,446,439,478,458,483,0,461],
[452,463,459,449,444,458,450,448,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,423,424,432,433,416,413,453,445],
[447,0,398,407,429,449,421,414,428,441],
[467,492,0,427,458,459,426,428,460,458],
[466,483,463,0,450,470,446,438,464,460],
[458,461,432,440,0,437,424,430,429,433],
[457,441,431,420,453,0,413,419,414,434],
[474,469,464,444,466,477,0,458,448,466],
[477,476,462,452,460,471,432,0,457,462],
[437,462,430,426,461,476,442,433,0,451],
[445,449,432,430,457,456,424,428,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,527,620,413,413,432,257,413,336],
[458,0,458,305,98,188,464,188,458,98],
[363,432,0,620,413,413,432,601,601,413],
[270,585,270,0,172,172,347,172,270,270],
[477,792,477,718,0,382,604,207,890,305],
[477,702,477,718,508,0,702,207,890,117],
[458,426,458,543,286,188,0,188,524,286],
[633,702,289,718,683,683,702,0,871,683],
[477,432,289,620,0,0,366,19,0,98],
[554,792,477,620,585,773,604,207,792,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,460,381,452,431,404,407,456,437],
[457,0,473,443,474,469,460,435,440,436],
[430,417,0,360,393,425,395,377,414,438],
[509,447,530,0,498,449,425,466,461,486],
[438,416,497,392,0,415,421,402,419,461],
[459,421,465,441,475,0,433,418,425,439],
[486,430,495,465,469,457,0,422,477,469],
[483,455,513,424,488,472,468,0,487,473],
[434,450,476,429,471,465,413,403,0,441],
[453,454,452,404,429,451,421,417,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,448,436,412,443,446,438,467,441],
[437,0,437,444,469,433,444,455,504,452],
[442,453,0,452,446,466,469,454,485,464],
[454,446,438,0,439,432,445,452,464,452],
[478,421,444,451,0,442,454,434,464,479],
[447,457,424,458,448,0,440,442,472,453],
[444,446,421,445,436,450,0,452,465,450],
[452,435,436,438,456,448,438,0,441,424],
[423,386,405,426,426,418,425,449,0,439],
[449,438,426,438,411,437,440,466,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,446,442,447,442,425,447,450,449],
[443,0,447,424,451,446,417,430,449,447],
[444,443,0,428,436,439,413,452,421,443],
[448,466,462,0,444,468,453,444,449,448],
[443,439,454,446,0,443,430,460,441,438],
[448,444,451,422,447,0,411,434,459,431],
[465,473,477,437,460,479,0,457,451,451],
[443,460,438,446,430,456,433,0,445,450],
[440,441,469,441,449,431,439,445,0,462],
[441,443,447,442,452,459,439,440,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,421,351,630,329,362,299,359,426],
[570,0,556,491,692,444,627,505,502,540],
[469,334,0,467,641,398,401,445,397,474],
[539,399,423,0,554,280,441,412,370,455],
[260,198,249,336,0,148,230,255,200,287],
[561,446,492,610,742,0,466,477,368,594],
[528,263,489,449,660,424,0,477,412,579],
[591,385,445,478,635,413,413,0,428,457],
[531,388,493,520,690,522,478,462,0,570],
[464,350,416,435,603,296,311,433,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,437,524,466,469,492,490,476,458],
[411,0,432,426,413,452,481,455,398,466],
[453,458,0,496,439,456,483,479,441,465],
[366,464,394,0,401,433,431,444,388,420],
[424,477,451,489,0,482,468,461,446,451],
[421,438,434,457,408,0,459,455,427,455],
[398,409,407,459,422,431,0,430,412,391],
[400,435,411,446,429,435,460,0,458,448],
[414,492,449,502,444,463,478,432,0,491],
[432,424,425,470,439,435,499,442,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,416,434,433,423,430,409,423,454],
[431,0,397,444,427,421,428,436,409,416],
[474,493,0,472,474,445,506,450,461,481],
[456,446,418,0,472,416,435,426,409,464],
[457,463,416,418,0,425,435,405,422,447],
[467,469,445,474,465,0,453,441,434,465],
[460,462,384,455,455,437,0,427,440,453],
[481,454,440,464,485,449,463,0,456,493],
[467,481,429,481,468,456,450,434,0,467],
[436,474,409,426,443,425,437,397,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,438,423,455,433,425,441,431,428],
[456,0,465,443,460,428,433,441,446,443],
[452,425,0,433,467,436,437,442,455,458],
[467,447,457,0,462,447,443,457,440,428],
[435,430,423,428,0,458,420,424,437,438],
[457,462,454,443,432,0,436,439,438,437],
[465,457,453,447,470,454,0,444,439,441],
[449,449,448,433,466,451,446,0,460,450],
[459,444,435,450,453,452,451,430,0,449],
[462,447,432,462,452,453,449,440,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,457,443,440,456,425,446,439,466],
[442,0,437,427,442,458,423,430,440,450],
[433,453,0,428,448,458,427,442,441,439],
[447,463,462,0,438,463,442,445,446,473],
[450,448,442,452,0,464,455,459,465,474],
[434,432,432,427,426,0,408,429,430,438],
[465,467,463,448,435,482,0,442,479,479],
[444,460,448,445,431,461,448,0,450,454],
[451,450,449,444,425,460,411,440,0,441],
[424,440,451,417,416,452,411,436,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,439,431,468,441,458,421,438,443],
[442,0,441,443,491,456,460,430,453,469],
[451,449,0,451,440,453,466,466,462,488],
[459,447,439,0,470,460,471,443,439,446],
[422,399,450,420,0,433,442,436,449,441],
[449,434,437,430,457,0,468,448,431,474],
[432,430,424,419,448,422,0,417,424,475],
[469,460,424,447,454,442,473,0,444,467],
[452,437,428,451,441,459,466,446,0,482],
[447,421,402,444,449,416,415,423,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,428,456,453,427,433,467,448,443],
[451,0,434,436,447,434,452,451,453,453],
[462,456,0,462,437,443,451,462,439,455],
[434,454,428,0,446,454,447,434,447,450],
[437,443,453,444,0,457,468,472,465,456],
[463,456,447,436,433,0,447,470,450,452],
[457,438,439,443,422,443,0,480,431,447],
[423,439,428,456,418,420,410,0,425,472],
[442,437,451,443,425,440,459,465,0,462],
[447,437,435,440,434,438,443,418,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,395,395,435,337,397,390,371,363],
[486,0,463,520,519,413,503,486,466,399],
[495,427,0,477,489,383,456,407,438,431],
[495,370,413,0,478,399,445,453,436,445],
[455,371,401,412,0,332,381,425,419,348],
[553,477,507,491,558,0,523,454,429,458],
[493,387,434,445,509,367,0,450,384,392],
[500,404,483,437,465,436,440,0,501,474],
[519,424,452,454,471,461,506,389,0,453],
[527,491,459,445,542,432,498,416,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,428,486,429,452,459,461,416,473],
[455,0,451,443,443,424,431,426,386,436],
[462,439,0,482,424,454,462,425,463,437],
[404,447,408,0,427,387,453,401,406,423],
[461,447,466,463,0,458,461,473,423,455],
[438,466,436,503,432,0,446,406,425,436],
[431,459,428,437,429,444,0,430,431,441],
[429,464,465,489,417,484,460,0,457,484],
[474,504,427,484,467,465,459,433,0,415],
[417,454,453,467,435,454,449,406,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,411,466,420,424,459,444,429,434],
[457,0,431,462,434,448,456,444,456,420],
[479,459,0,479,443,467,484,468,428,439],
[424,428,411,0,394,404,393,395,400,442],
[470,456,447,496,0,463,489,441,418,440],
[466,442,423,486,427,0,458,423,431,441],
[431,434,406,497,401,432,0,411,419,429],
[446,446,422,495,449,467,479,0,421,445],
[461,434,462,490,472,459,471,469,0,458],
[456,470,451,448,450,449,461,445,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,452,456,488,484,449,471,444,455],
[407,0,385,397,437,373,404,410,398,410],
[438,505,0,474,492,466,484,458,478,461],
[434,493,416,0,476,442,470,478,433,465],
[402,453,398,414,0,411,461,457,411,446],
[406,517,424,448,479,0,472,462,459,490],
[441,486,406,420,429,418,0,417,408,437],
[419,480,432,412,433,428,473,0,450,407],
[446,492,412,457,479,431,482,440,0,447],
[435,480,429,425,444,400,453,483,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,435,426,376,534,389,512,422,436],
[402,0,432,379,342,454,356,465,395,358],
[455,458,0,372,422,460,418,479,431,347],
[464,511,518,0,429,449,485,507,413,439],
[514,548,468,461,0,524,409,555,470,478],
[356,436,430,441,366,0,365,407,382,303],
[501,534,472,405,481,525,0,466,481,398],
[378,425,411,383,335,483,424,0,450,369],
[468,495,459,477,420,508,409,440,0,442],
[454,532,543,451,412,587,492,521,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,464,449,466,444,477,473,453,449],
[457,0,440,453,428,452,458,435,434,424],
[426,450,0,424,416,424,428,439,427,417],
[441,437,466,0,465,426,470,440,438,447],
[424,462,474,425,0,418,473,444,436,440],
[446,438,466,464,472,0,480,443,443,469],
[413,432,462,420,417,410,0,392,420,412],
[417,455,451,450,446,447,498,0,443,448],
[437,456,463,452,454,447,470,447,0,454],
[441,466,473,443,450,421,478,442,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,499,450,414,465,435,432,433,468],
[425,0,449,470,435,466,449,453,454,436],
[391,441,0,448,397,410,400,425,401,426],
[440,420,442,0,396,435,432,432,448,426],
[476,455,493,494,0,513,453,478,434,461],
[425,424,480,455,377,0,423,451,415,449],
[455,441,490,458,437,467,0,480,435,472],
[458,437,465,458,412,439,410,0,427,468],
[457,436,489,442,456,475,455,463,0,463],
[422,454,464,464,429,441,418,422,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,472,483,434,463,465,472,486,459],
[444,0,465,462,404,476,442,470,460,439],
[418,425,0,441,412,435,440,444,424,426],
[407,428,449,0,414,446,423,459,440,442],
[456,486,478,476,0,460,450,461,444,444],
[427,414,455,444,430,0,429,462,421,429],
[425,448,450,467,440,461,0,462,446,451],
[418,420,446,431,429,428,428,0,418,430],
[404,430,466,450,446,469,444,472,0,454],
[431,451,464,448,446,461,439,460,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,438,424,398,484,386,457,484,404],
[485,0,543,474,438,527,399,488,530,430],
[452,347,0,371,356,384,407,373,479,418],
[466,416,519,0,408,514,432,488,480,442],
[492,452,534,482,0,554,445,488,518,480],
[406,363,506,376,336,0,409,371,423,406],
[504,491,483,458,445,481,0,454,492,476],
[433,402,517,402,402,519,436,0,424,403],
[406,360,411,410,372,467,398,466,0,362],
[486,460,472,448,410,484,414,487,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,504,461,403,433,469,432,394,406],
[435,0,383,363,369,430,430,345,365,367],
[386,507,0,412,377,438,426,371,392,395],
[429,527,478,0,421,485,442,431,429,440],
[487,521,513,469,0,485,452,438,420,454],
[457,460,452,405,405,0,424,372,405,401],
[421,460,464,448,438,466,0,431,434,416],
[458,545,519,459,452,518,459,0,444,467],
[496,525,498,461,470,485,456,446,0,434],
[484,523,495,450,436,489,474,423,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,394,415,465,443,433,411,437,425],
[454,0,430,459,503,513,463,431,519,483],
[496,460,0,457,505,484,490,430,503,480],
[475,431,433,0,494,492,457,461,464,517],
[425,387,385,396,0,444,449,429,435,440],
[447,377,406,398,446,0,426,400,445,434],
[457,427,400,433,441,464,0,445,474,454],
[479,459,460,429,461,490,445,0,465,465],
[453,371,387,426,455,445,416,425,0,456],
[465,407,410,373,450,456,436,425,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,432,466,419,426,406,446,422,448],
[437,0,451,433,438,421,428,441,444,433],
[458,439,0,463,430,436,426,458,441,465],
[424,457,427,0,418,435,440,438,433,451],
[471,452,460,472,0,447,433,457,488,474],
[464,469,454,455,443,0,439,486,466,458],
[484,462,464,450,457,451,0,446,431,472],
[444,449,432,452,433,404,444,0,434,463],
[468,446,449,457,402,424,459,456,0,455],
[442,457,425,439,416,432,418,427,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,431,420,445,440,440,435,447,427],
[435,0,459,438,470,418,438,461,444,448],
[459,431,0,430,438,428,446,458,439,433],
[470,452,460,0,465,438,448,466,444,462],
[445,420,452,425,0,411,412,442,421,422],
[450,472,462,452,479,0,456,481,443,462],
[450,452,444,442,478,434,0,472,447,439],
[455,429,432,424,448,409,418,0,418,423],
[443,446,451,446,469,447,443,472,0,437],
[463,442,457,428,468,428,451,467,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,461,438,464,451,423,461,431,451],
[445,0,445,443,435,432,419,461,414,432],
[429,445,0,439,448,439,446,463,443,453],
[452,447,451,0,454,427,451,469,466,443],
[426,455,442,436,0,433,429,474,447,466],
[439,458,451,463,457,0,428,478,453,452],
[467,471,444,439,461,462,0,465,424,458],
[429,429,427,421,416,412,425,0,419,435],
[459,476,447,424,443,437,466,471,0,456],
[439,458,437,447,424,438,432,455,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,450,440,443,420,456,451,453,453],
[442,0,432,438,419,409,422,451,430,445],
[440,458,0,423,454,442,440,436,452,455],
[450,452,467,0,442,453,447,458,432,465],
[447,471,436,448,0,447,434,437,430,439],
[470,481,448,437,443,0,451,464,423,439],
[434,468,450,443,456,439,0,451,431,446],
[439,439,454,432,453,426,439,0,425,464],
[437,460,438,458,460,467,459,465,0,464],
[437,445,435,425,451,451,444,426,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,385,384,409,432,476,412,445,440,397],
[505,0,471,445,422,479,425,475,448,419],
[506,419,0,358,443,459,465,444,441,403],
[481,445,532,0,462,498,455,464,465,449],
[458,468,447,428,0,466,432,439,462,443],
[414,411,431,392,424,0,425,409,442,420],
[478,465,425,435,458,465,0,461,465,433],
[445,415,446,426,451,481,429,0,426,421],
[450,442,449,425,428,448,425,464,0,432],
[493,471,487,441,447,470,457,469,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,459,428,432,464,451,409,460,444],
[454,0,449,443,432,433,437,393,440,413],
[431,441,0,413,419,433,433,419,444,430],
[462,447,477,0,448,460,456,416,464,468],
[458,458,471,442,0,455,451,452,469,462],
[426,457,457,430,435,0,439,425,457,424],
[439,453,457,434,439,451,0,432,467,436],
[481,497,471,474,438,465,458,0,473,481],
[430,450,446,426,421,433,423,417,0,434],
[446,477,460,422,428,466,454,409,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,433,478,446,455,462,456,436,467],
[449,0,439,469,468,474,449,447,456,465],
[457,451,0,463,466,477,460,440,465,463],
[412,421,427,0,429,420,440,431,421,438],
[444,422,424,461,0,454,459,435,446,462],
[435,416,413,470,436,0,454,446,419,449],
[428,441,430,450,431,436,0,407,418,417],
[434,443,450,459,455,444,483,0,447,459],
[454,434,425,469,444,471,472,443,0,474],
[423,425,427,452,428,441,473,431,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,436,482,457,451,441,449,448,452],
[425,0,453,482,437,431,440,457,466,439],
[454,437,0,471,437,412,446,446,438,454],
[408,408,419,0,422,414,451,402,456,437],
[433,453,453,468,0,440,450,468,464,434],
[439,459,478,476,450,0,436,445,437,456],
[449,450,444,439,440,454,0,429,469,438],
[441,433,444,488,422,445,461,0,463,433],
[442,424,452,434,426,453,421,427,0,442],
[438,451,436,453,456,434,452,457,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,445,461,433,453,479,448,430,461],
[444,0,445,455,435,444,504,451,445,444],
[445,445,0,451,428,451,470,439,418,437],
[429,435,439,0,440,424,476,445,412,447],
[457,455,462,450,0,465,472,443,465,463],
[437,446,439,466,425,0,477,411,435,453],
[411,386,420,414,418,413,0,429,420,415],
[442,439,451,445,447,479,461,0,441,447],
[460,445,472,478,425,455,470,449,0,446],
[429,446,453,443,427,437,475,443,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,455,463,444,449,438,446,453,425],
[433,0,456,438,448,427,425,417,438,435],
[435,434,0,411,427,436,430,432,433,452],
[427,452,479,0,452,430,429,441,437,442],
[446,442,463,438,0,431,447,453,436,454],
[441,463,454,460,459,0,462,434,450,460],
[452,465,460,461,443,428,0,463,430,441],
[444,473,458,449,437,456,427,0,446,445],
[437,452,457,453,454,440,460,444,0,422],
[465,455,438,448,436,430,449,445,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,468,476,496,456,408,385,434,511],
[463,0,468,457,428,387,484,387,422,520],
[422,422,0,474,450,434,403,450,424,496],
[414,433,416,0,465,446,436,425,416,482],
[394,462,440,425,0,456,411,408,409,499],
[434,503,456,444,434,0,425,400,421,529],
[482,406,487,454,479,465,0,460,438,506],
[505,503,440,465,482,490,430,0,459,524],
[456,468,466,474,481,469,452,431,0,520],
[379,370,394,408,391,361,384,366,370,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,380,524,497,504,487,381,353,390],
[441,0,499,466,449,467,393,447,434,378],
[510,391,0,424,493,427,477,444,367,375],
[366,424,466,0,372,343,417,397,368,337],
[393,441,397,518,0,437,516,418,351,351],
[386,423,463,547,453,0,494,397,431,425],
[403,497,413,473,374,396,0,443,371,377],
[509,443,446,493,472,493,447,0,393,503],
[537,456,523,522,539,459,519,497,0,408],
[500,512,515,553,539,465,513,387,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,431,383,408,442,469,418,455,458],
[360,0,424,385,357,406,441,367,472,412],
[459,466,0,441,434,412,409,416,454,429],
[507,505,449,0,444,443,495,394,432,467],
[482,533,456,446,0,404,482,449,479,437],
[448,484,478,447,486,0,476,424,468,449],
[421,449,481,395,408,414,0,368,480,430],
[472,523,474,496,441,466,522,0,455,468],
[435,418,436,458,411,422,410,435,0,421],
[432,478,461,423,453,441,460,422,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,435,441,472,414,441,424,421,430],
[453,0,442,430,439,421,422,421,412,426],
[455,448,0,429,439,424,414,419,415,423],
[449,460,461,0,465,453,433,436,422,430],
[418,451,451,425,0,409,442,429,416,419],
[476,469,466,437,481,0,457,452,472,464],
[449,468,476,457,448,433,0,425,453,460],
[466,469,471,454,461,438,465,0,449,448],
[469,478,475,468,474,418,437,441,0,438],
[460,464,467,460,471,426,430,442,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,435,432,441,451,429,413,428,402],
[437,0,429,447,441,452,454,423,449,438],
[455,461,0,466,469,459,450,445,463,452],
[458,443,424,0,454,455,442,442,449,435],
[449,449,421,436,0,454,433,438,436,437],
[439,438,431,435,436,0,433,433,433,427],
[461,436,440,448,457,457,0,423,438,435],
[477,467,445,448,452,457,467,0,433,455],
[462,441,427,441,454,457,452,457,0,443],
[488,452,438,455,453,463,455,435,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,450,437,427,454,445,452,449,422],
[459,0,432,458,459,450,450,460,439,461],
[440,458,0,457,450,462,430,459,441,436],
[453,432,433,0,438,428,431,436,464,441],
[463,431,440,452,0,454,437,454,453,453],
[436,440,428,462,436,0,429,442,436,446],
[445,440,460,459,453,461,0,452,446,452],
[438,430,431,454,436,448,438,0,438,419],
[441,451,449,426,437,454,444,452,0,439],
[468,429,454,449,437,444,438,471,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,499,450,461,433,440,471,481,458],
[426,0,458,463,410,429,445,428,476,412],
[391,432,0,477,451,462,482,448,447,433],
[440,427,413,0,421,410,418,437,444,431],
[429,480,439,469,0,441,471,436,464,413],
[457,461,428,480,449,0,431,465,476,436],
[450,445,408,472,419,459,0,451,479,490],
[419,462,442,453,454,425,439,0,456,445],
[409,414,443,446,426,414,411,434,0,418],
[432,478,457,459,477,454,400,445,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,438,433,452,433,440,442,443,431],
[485,0,461,463,476,452,445,470,464,450],
[452,429,0,468,456,426,440,444,448,459],
[457,427,422,0,452,439,442,443,444,441],
[438,414,434,438,0,430,423,453,444,423],
[457,438,464,451,460,0,432,478,446,463],
[450,445,450,448,467,458,0,470,464,472],
[448,420,446,447,437,412,420,0,427,434],
[447,426,442,446,446,444,426,463,0,455],
[459,440,431,449,467,427,418,456,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,465,457,474,457,458,454,443,456],
[408,0,444,425,455,408,433,411,431,428],
[425,446,0,460,470,425,440,424,430,411],
[433,465,430,0,491,437,478,457,437,431],
[416,435,420,399,0,416,430,401,412,421],
[433,482,465,453,474,0,479,454,452,464],
[432,457,450,412,460,411,0,442,413,451],
[436,479,466,433,489,436,448,0,455,461],
[447,459,460,453,478,438,477,435,0,466],
[434,462,479,459,469,426,439,429,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,459,444,461,468,476,472,446,491],
[430,0,424,439,422,440,449,471,405,453],
[431,466,0,454,460,492,471,466,437,473],
[446,451,436,0,449,454,459,457,433,483],
[429,468,430,441,0,468,468,466,441,455],
[422,450,398,436,422,0,436,445,416,454],
[414,441,419,431,422,454,0,451,411,447],
[418,419,424,433,424,445,439,0,438,436],
[444,485,453,457,449,474,479,452,0,493],
[399,437,417,407,435,436,443,454,397,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,459,438,454,487,462,477,471,450],
[435,0,447,445,429,452,427,458,446,456],
[431,443,0,456,412,454,452,451,442,448],
[452,445,434,0,419,455,465,483,470,463],
[436,461,478,471,0,468,464,472,464,468],
[403,438,436,435,422,0,432,412,435,440],
[428,463,438,425,426,458,0,458,461,452],
[413,432,439,407,418,478,432,0,453,439],
[419,444,448,420,426,455,429,437,0,422],
[440,434,442,427,422,450,438,451,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,467,478,447,461,458,452,450,438],
[423,0,437,452,444,452,429,437,421,427],
[423,453,0,448,440,461,458,447,433,436],
[412,438,442,0,439,429,438,424,428,422],
[443,446,450,451,0,447,454,459,418,436],
[429,438,429,461,443,0,454,441,429,411],
[432,461,432,452,436,436,0,456,426,441],
[438,453,443,466,431,449,434,0,441,455],
[440,469,457,462,472,461,464,449,0,445],
[452,463,454,468,454,479,449,435,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,445,459,449,483,484,442,435,445],
[442,0,473,455,446,476,454,478,447,422],
[445,417,0,457,452,484,445,445,424,412],
[431,435,433,0,422,467,446,433,421,430],
[441,444,438,468,0,485,467,443,424,441],
[407,414,406,423,405,0,427,436,401,388],
[406,436,445,444,423,463,0,430,417,427],
[448,412,445,457,447,454,460,0,422,429],
[455,443,466,469,466,489,473,468,0,444],
[445,468,478,460,449,502,463,461,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,450,518,445,458,446,546,466,448],
[492,0,453,470,459,468,420,588,500,412],
[440,437,0,408,460,449,403,508,524,474],
[372,420,482,0,360,426,361,520,450,390],
[445,431,430,530,0,491,435,505,462,470],
[432,422,441,464,399,0,447,574,448,455],
[444,470,487,529,455,443,0,556,487,521],
[344,302,382,370,385,316,334,0,406,282],
[424,390,366,440,428,442,403,484,0,425],
[442,478,416,500,420,435,369,608,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,403,372,424,437,435,492,445,468],
[492,0,473,432,442,512,473,532,470,481],
[487,417,0,402,404,412,386,459,390,426],
[518,458,488,0,418,448,457,526,415,458],
[466,448,486,472,0,480,485,532,433,468],
[453,378,478,442,410,0,454,506,397,484],
[455,417,504,433,405,436,0,487,452,490],
[398,358,431,364,358,384,403,0,437,377],
[445,420,500,475,457,493,438,453,0,469],
[422,409,464,432,422,406,400,513,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,451,408,367,406,397,413,428,434],
[468,0,512,476,391,447,404,397,459,462],
[439,378,0,436,397,416,385,422,404,441],
[482,414,454,0,364,451,422,407,414,448],
[523,499,493,526,0,463,439,464,494,508],
[484,443,474,439,427,0,384,427,459,497],
[493,486,505,468,451,506,0,482,443,507],
[477,493,468,483,426,463,408,0,450,519],
[462,431,486,476,396,431,447,440,0,471],
[456,428,449,442,382,393,383,371,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,500,475,434,493,436,484,464,453],
[390,0,438,434,412,435,409,451,415,393],
[390,452,0,439,387,423,392,425,413,405],
[415,456,451,0,446,461,402,444,418,413],
[456,478,503,444,0,477,458,469,475,423],
[397,455,467,429,413,0,430,440,423,397],
[454,481,498,488,432,460,0,451,448,432],
[406,439,465,446,421,450,439,0,448,455],
[426,475,477,472,415,467,442,442,0,434],
[437,497,485,477,467,493,458,435,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,439,458,414,478,481,456,447,436],
[470,0,425,436,413,449,495,425,464,431],
[451,465,0,410,452,428,510,441,485,459],
[432,454,480,0,483,469,507,471,484,476],
[476,477,438,407,0,454,458,444,461,434],
[412,441,462,421,436,0,499,465,439,438],
[409,395,380,383,432,391,0,384,419,422],
[434,465,449,419,446,425,506,0,436,448],
[443,426,405,406,429,451,471,454,0,466],
[454,459,431,414,456,452,468,442,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,440,473,468,460,464,465,478,464],
[431,0,440,469,468,436,461,453,463,461],
[450,450,0,470,422,466,449,453,465,474],
[417,421,420,0,392,417,410,384,458,423],
[422,422,468,498,0,452,447,451,475,482],
[430,454,424,473,438,0,450,449,456,486],
[426,429,441,480,443,440,0,457,462,440],
[425,437,437,506,439,441,433,0,463,454],
[412,427,425,432,415,434,428,427,0,471],
[426,429,416,467,408,404,450,436,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,439,419,413,479,482,464,443,419],
[488,0,409,483,450,472,508,431,456,447],
[451,481,0,465,473,470,478,469,449,436],
[471,407,425,0,440,465,483,435,442,428],
[477,440,417,450,0,475,472,457,439,431],
[411,418,420,425,415,0,462,404,444,402],
[408,382,412,407,418,428,0,409,404,368],
[426,459,421,455,433,486,481,0,464,430],
[447,434,441,448,451,446,486,426,0,391],
[471,443,454,462,459,488,522,460,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,464,455,461,446,458,442,474,463],
[434,0,436,417,422,436,425,424,445,427],
[426,454,0,433,435,431,450,436,450,440],
[435,473,457,0,441,456,448,431,455,430],
[429,468,455,449,0,438,450,426,461,430],
[444,454,459,434,452,0,451,448,466,444],
[432,465,440,442,440,439,0,432,453,434],
[448,466,454,459,464,442,458,0,481,447],
[416,445,440,435,429,424,437,409,0,428],
[427,463,450,460,460,446,456,443,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,445,468,440,450,457,482,470,459],
[407,0,409,433,439,437,430,454,451,427],
[445,481,0,461,451,461,467,458,474,448],
[422,457,429,0,412,469,446,450,438,435],
[450,451,439,478,0,469,453,468,464,456],
[440,453,429,421,421,0,432,452,439,435],
[433,460,423,444,437,458,0,470,444,437],
[408,436,432,440,422,438,420,0,437,414],
[420,439,416,452,426,451,446,453,0,430],
[431,463,442,455,434,455,453,476,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,459,405,428,456,434,424,465,452],
[405,0,435,394,397,430,432,405,414,417],
[431,455,0,422,440,459,428,445,448,452],
[485,496,468,0,443,478,460,459,466,461],
[462,493,450,447,0,436,437,442,476,438],
[434,460,431,412,454,0,420,445,447,437],
[456,458,462,430,453,470,0,443,467,475],
[466,485,445,431,448,445,447,0,443,474],
[425,476,442,424,414,443,423,447,0,439],
[438,473,438,429,452,453,415,416,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,432,434,423,434,419,453,424,433],
[444,0,422,431,435,430,427,453,422,437],
[458,468,0,443,449,436,420,463,423,437],
[456,459,447,0,462,449,416,461,428,427],
[467,455,441,428,0,460,438,486,449,472],
[456,460,454,441,430,0,424,487,443,465],
[471,463,470,474,452,466,0,475,433,467],
[437,437,427,429,404,403,415,0,406,422],
[466,468,467,462,441,447,457,484,0,439],
[457,453,453,463,418,425,423,468,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,503,440,442,434,453,448,446,493],
[418,0,482,392,430,409,426,431,386,454],
[387,408,0,365,359,417,400,379,401,437],
[450,498,525,0,454,424,443,443,452,443],
[448,460,531,436,0,449,461,459,464,501],
[456,481,473,466,441,0,477,436,445,484],
[437,464,490,447,429,413,0,410,443,465],
[442,459,511,447,431,454,480,0,461,456],
[444,504,489,438,426,445,447,429,0,462],
[397,436,453,447,389,406,425,434,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,443,412,415,409,410,411,406,409],
[407,0,412,396,379,383,389,398,381,396],
[447,478,0,438,410,390,450,404,452,434],
[478,494,452,0,482,461,461,466,480,426],
[475,511,480,408,0,470,488,476,476,465],
[481,507,500,429,420,0,450,437,453,481],
[480,501,440,429,402,440,0,446,418,436],
[479,492,486,424,414,453,444,0,438,421],
[484,509,438,410,414,437,472,452,0,425],
[481,494,456,464,425,409,454,469,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,381,452,434,416,432,473,491,458,473],
[509,0,453,480,464,403,509,526,481,439],
[438,437,0,478,414,404,481,463,487,451],
[456,410,412,0,430,399,507,472,486,466],
[474,426,476,460,0,453,491,466,481,457],
[458,487,486,491,437,0,485,464,460,456],
[417,381,409,383,399,405,0,427,440,413],
[399,364,427,418,424,426,463,0,458,452],
[432,409,403,404,409,430,450,432,0,420],
[417,451,439,424,433,434,477,438,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,453,446,457,433,451,447,444,449],
[414,0,444,424,448,449,447,426,416,413],
[437,446,0,432,438,457,451,428,436,429],
[444,466,458,0,442,458,454,429,457,454],
[433,442,452,448,0,466,466,441,430,453],
[457,441,433,432,424,0,447,427,432,429],
[439,443,439,436,424,443,0,413,443,412],
[443,464,462,461,449,463,477,0,437,450],
[446,474,454,433,460,458,447,453,0,449],
[441,477,461,436,437,461,478,440,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,462,452,480,410,476,419,428,477],
[436,0,441,474,456,408,450,419,426,462],
[428,449,0,440,456,443,448,420,439,502],
[438,416,450,0,411,450,464,428,426,449],
[410,434,434,479,0,454,459,408,464,452],
[480,482,447,440,436,0,461,430,420,455],
[414,440,442,426,431,429,0,442,437,481],
[471,471,470,462,482,460,448,0,486,421],
[462,464,451,464,426,470,453,404,0,452],
[413,428,388,441,438,435,409,469,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,423,441,451,411,452,438,430,470],
[451,0,438,447,448,442,470,451,451,490],
[467,452,0,461,477,441,473,443,428,480],
[449,443,429,0,486,444,487,468,442,475],
[439,442,413,404,0,418,441,417,425,456],
[479,448,449,446,472,0,457,454,444,449],
[438,420,417,403,449,433,0,432,408,421],
[452,439,447,422,473,436,458,0,411,451],
[460,439,462,448,465,446,482,479,0,464],
[420,400,410,415,434,441,469,439,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,446,431,431,432,481,439,446,412],
[447,0,457,441,445,444,455,452,448,443],
[444,433,0,442,426,462,452,462,465,439],
[459,449,448,0,441,463,474,468,463,457],
[459,445,464,449,0,442,468,456,442,449],
[458,446,428,427,448,0,450,455,451,436],
[409,435,438,416,422,440,0,448,425,412],
[451,438,428,422,434,435,442,0,429,436],
[444,442,425,427,448,439,465,461,0,444],
[478,447,451,433,441,454,478,454,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,437,453,459,428,443,445,452,438],
[455,0,475,448,461,447,451,479,444,419],
[453,415,0,464,457,464,421,436,427,445],
[437,442,426,0,442,449,436,465,419,440],
[431,429,433,448,0,443,420,441,432,432],
[462,443,426,441,447,0,447,447,424,440],
[447,439,469,454,470,443,0,476,433,462],
[445,411,454,425,449,443,414,0,418,420],
[438,446,463,471,458,466,457,472,0,470],
[452,471,445,450,458,450,428,470,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,453,425,419,426,433,421,428,458],
[451,0,457,421,445,457,423,417,411,448],
[437,433,0,421,433,430,436,418,410,459],
[465,469,469,0,453,466,464,445,444,479],
[471,445,457,437,0,433,451,432,422,477],
[464,433,460,424,457,0,458,447,444,441],
[457,467,454,426,439,432,0,430,432,468],
[469,473,472,445,458,443,460,0,464,464],
[462,479,480,446,468,446,458,426,0,464],
[432,442,431,411,413,449,422,426,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,427,412,441,419,423,448,432,441],
[468,0,450,447,439,447,429,449,461,465],
[463,440,0,440,443,448,452,451,441,486],
[478,443,450,0,451,477,459,465,446,463],
[449,451,447,439,0,446,455,446,447,459],
[471,443,442,413,444,0,457,464,444,452],
[467,461,438,431,435,433,0,435,434,449],
[442,441,439,425,444,426,455,0,447,473],
[458,429,449,444,443,446,456,443,0,474],
[449,425,404,427,431,438,441,417,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,476,487,469,417,458,453,439,451],
[468,0,519,494,444,470,473,435,475,432],
[414,371,0,428,360,364,438,426,456,417],
[403,396,462,0,411,402,425,482,413,437],
[421,446,530,479,0,442,493,435,471,426],
[473,420,526,488,448,0,502,471,507,473],
[432,417,452,465,397,388,0,412,445,417],
[437,455,464,408,455,419,478,0,442,463],
[451,415,434,477,419,383,445,448,0,415],
[439,458,473,453,464,417,473,427,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,425,435,452,434,429,426,427,431],
[460,0,440,451,454,446,424,459,430,453],
[465,450,0,450,481,468,434,454,453,461],
[455,439,440,0,459,428,429,444,461,456],
[438,436,409,431,0,431,433,440,446,428],
[456,444,422,462,459,0,432,436,468,480],
[461,466,456,461,457,458,0,455,459,441],
[464,431,436,446,450,454,435,0,461,436],
[463,460,437,429,444,422,431,429,0,472],
[459,437,429,434,462,410,449,454,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,433,463,444,471,484,449,442,478],
[444,0,446,452,446,448,459,444,434,451],
[457,444,0,453,473,444,482,420,464,454],
[427,438,437,0,456,464,457,444,433,438],
[446,444,417,434,0,440,459,423,419,447],
[419,442,446,426,450,0,468,433,429,454],
[406,431,408,433,431,422,0,423,429,456],
[441,446,470,446,467,457,467,0,452,472],
[448,456,426,457,471,461,461,438,0,469],
[412,439,436,452,443,436,434,418,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,468,466,475,462,435,438,441,442],
[416,0,443,463,456,410,424,465,435,441],
[422,447,0,455,462,427,442,463,437,469],
[424,427,435,0,466,408,413,417,419,438],
[415,434,428,424,0,434,471,447,462,470],
[428,480,463,482,456,0,472,497,450,465],
[455,466,448,477,419,418,0,447,431,437],
[452,425,427,473,443,393,443,0,450,470],
[449,455,453,471,428,440,459,440,0,474],
[448,449,421,452,420,425,453,420,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,456,447,447,480,446,456,440,474],
[415,0,413,426,403,446,425,446,418,446],
[434,477,0,456,447,466,468,467,454,472],
[443,464,434,0,446,431,445,453,419,470],
[443,487,443,444,0,475,446,465,449,448],
[410,444,424,459,415,0,435,428,431,442],
[444,465,422,445,444,455,0,466,412,451],
[434,444,423,437,425,462,424,0,415,457],
[450,472,436,471,441,459,478,475,0,465],
[416,444,418,420,442,448,439,433,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,449,443,450,397,466,416,403,446],
[448,0,465,455,464,377,456,438,435,421],
[441,425,0,423,428,397,460,411,423,449],
[447,435,467,0,469,409,457,436,416,440],
[440,426,462,421,0,376,446,424,400,443],
[493,513,493,481,514,0,487,447,445,492],
[424,434,430,433,444,403,0,381,423,414],
[474,452,479,454,466,443,509,0,445,457],
[487,455,467,474,490,445,467,445,0,432],
[444,469,441,450,447,398,476,433,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,453,425,474,446,445,440,453,435],
[458,0,444,421,470,477,408,441,459,455],
[437,446,0,394,430,388,411,430,421,402],
[465,469,496,0,486,487,444,469,456,474],
[416,420,460,404,0,414,388,406,435,423],
[444,413,502,403,476,0,427,456,428,418],
[445,482,479,446,502,463,0,453,465,465],
[450,449,460,421,484,434,437,0,442,421],
[437,431,469,434,455,462,425,448,0,466],
[455,435,488,416,467,472,425,469,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,447,448,427,456,462,444,423,437],
[420,0,456,426,407,454,466,432,421,434],
[443,434,0,417,396,461,460,456,432,424],
[442,464,473,0,440,467,498,469,438,431],
[463,483,494,450,0,456,479,465,425,459],
[434,436,429,423,434,0,461,436,418,407],
[428,424,430,392,411,429,0,432,397,402],
[446,458,434,421,425,454,458,0,425,429],
[467,469,458,452,465,472,493,465,0,444],
[453,456,466,459,431,483,488,461,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,413,440,396,432,466,423,413,442],
[432,0,430,444,407,453,391,425,414,425],
[477,460,0,437,462,441,485,432,473,480],
[450,446,453,0,396,438,442,456,453,423],
[494,483,428,494,0,470,455,453,465,449],
[458,437,449,452,420,0,445,437,454,429],
[424,499,405,448,435,445,0,425,412,453],
[467,465,458,434,437,453,465,0,467,414],
[477,476,417,437,425,436,478,423,0,460],
[448,465,410,467,441,461,437,476,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,458,473,464,453,472,455,456,445],
[442,0,435,467,471,450,492,499,471,459],
[432,455,0,465,465,454,462,494,478,484],
[417,423,425,0,417,420,445,418,442,449],
[426,419,425,473,0,451,452,445,456,424],
[437,440,436,470,439,0,466,460,443,445],
[418,398,428,445,438,424,0,448,427,421],
[435,391,396,472,445,430,442,0,454,430],
[434,419,412,448,434,447,463,436,0,442],
[445,431,406,441,466,445,469,460,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,437,427,436,428,454,439,443,462],
[422,0,421,409,423,431,451,432,428,470],
[453,469,0,440,446,450,464,424,446,453],
[463,481,450,0,451,476,475,445,470,478],
[454,467,444,439,0,427,456,446,452,458],
[462,459,440,414,463,0,458,450,468,458],
[436,439,426,415,434,432,0,429,440,458],
[451,458,466,445,444,440,461,0,462,470],
[447,462,444,420,438,422,450,428,0,441],
[428,420,437,412,432,432,432,420,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,443,447,480,455,431,435,440,454],
[416,0,429,462,461,453,465,458,443,449],
[447,461,0,448,475,457,451,441,453,475],
[443,428,442,0,450,437,446,421,458,469],
[410,429,415,440,0,404,415,419,433,443],
[435,437,433,453,486,0,429,442,470,440],
[459,425,439,444,475,461,0,452,454,458],
[455,432,449,469,471,448,438,0,444,455],
[450,447,437,432,457,420,436,446,0,444],
[436,441,415,421,447,450,432,435,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,464,435,438,455,441,458,469,425],
[447,0,467,430,442,470,464,445,480,457],
[426,423,0,448,426,451,440,440,460,439],
[455,460,442,0,435,458,457,459,458,455],
[452,448,464,455,0,469,459,444,460,431],
[435,420,439,432,421,0,431,429,431,434],
[449,426,450,433,431,459,0,469,470,449],
[432,445,450,431,446,461,421,0,443,439],
[421,410,430,432,430,459,420,447,0,430],
[465,433,451,435,459,456,441,451,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,440,454,427,442,429,429,452,438],
[437,0,400,446,408,413,432,411,427,432],
[450,490,0,468,438,431,461,440,454,449],
[436,444,422,0,427,416,446,418,471,429],
[463,482,452,463,0,418,451,428,449,461],
[448,477,459,474,472,0,468,452,429,438],
[461,458,429,444,439,422,0,431,450,425],
[461,479,450,472,462,438,459,0,438,456],
[438,463,436,419,441,461,440,452,0,433],
[452,458,441,461,429,452,465,434,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,427,454,442,455,430,437,425,435],
[440,0,441,445,432,428,421,444,432,456],
[463,449,0,465,465,440,435,453,436,450],
[436,445,425,0,435,430,415,453,448,437],
[448,458,425,455,0,443,432,471,445,440],
[435,462,450,460,447,0,447,475,456,441],
[460,469,455,475,458,443,0,472,465,447],
[453,446,437,437,419,415,418,0,454,450],
[465,458,454,442,445,434,425,436,0,464],
[455,434,440,453,450,449,443,440,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,489,484,441,423,450,456,431,440],
[418,0,444,417,411,387,414,434,410,408],
[401,446,0,452,449,392,441,416,421,431],
[406,473,438,0,432,402,450,433,416,417],
[449,479,441,458,0,443,493,474,414,419],
[467,503,498,488,447,0,461,473,436,445],
[440,476,449,440,397,429,0,430,421,439],
[434,456,474,457,416,417,460,0,427,429],
[459,480,469,474,476,454,469,463,0,424],
[450,482,459,473,471,445,451,461,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,447,450,466,477,469,429,452,481],
[429,0,458,439,459,486,453,450,450,455],
[443,432,0,456,454,463,438,442,445,450],
[440,451,434,0,477,447,441,419,450,461],
[424,431,436,413,0,460,444,403,427,435],
[413,404,427,443,430,0,446,410,425,444],
[421,437,452,449,446,444,0,417,423,438],
[461,440,448,471,487,480,473,0,458,459],
[438,440,445,440,463,465,467,432,0,442],
[409,435,440,429,455,446,452,431,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,456,439,436,442,446,458,451,448],
[456,0,443,469,434,457,438,446,451,439],
[434,447,0,446,453,439,441,448,470,431],
[451,421,444,0,448,444,452,446,461,431],
[454,456,437,442,0,436,438,458,468,423],
[448,433,451,446,454,0,448,426,458,439],
[444,452,449,438,452,442,0,455,466,450],
[432,444,442,444,432,464,435,0,442,430],
[439,439,420,429,422,432,424,448,0,417],
[442,451,459,459,467,451,440,460,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,518,454,509,479,475,451,488,409],
[443,0,532,459,418,438,438,445,441,403],
[372,358,0,367,434,410,427,382,440,399],
[436,431,523,0,441,435,479,453,496,404],
[381,472,456,449,0,454,411,409,390,412],
[411,452,480,455,436,0,449,424,446,415],
[415,452,463,411,479,441,0,465,451,397],
[439,445,508,437,481,466,425,0,474,464],
[402,449,450,394,500,444,439,416,0,404],
[481,487,491,486,478,475,493,426,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,384,400,393,374,378,381,415,458],
[442,0,415,405,422,398,399,397,425,459],
[506,475,0,450,448,432,460,444,456,471],
[490,485,440,0,422,437,432,436,454,448],
[497,468,442,468,0,438,471,452,461,508],
[516,492,458,453,452,0,458,429,485,500],
[512,491,430,458,419,432,0,461,426,447],
[509,493,446,454,438,461,429,0,451,489],
[475,465,434,436,429,405,464,439,0,489],
[432,431,419,442,382,390,443,401,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,455,445,451,438,427,407,435,428],
[423,0,432,398,429,413,437,404,442,439],
[435,458,0,411,431,383,410,427,429,454],
[445,492,479,0,483,437,444,430,447,439],
[439,461,459,407,0,412,447,429,437,431],
[452,477,507,453,478,0,444,466,490,460],
[463,453,480,446,443,446,0,441,466,442],
[483,486,463,460,461,424,449,0,448,455],
[455,448,461,443,453,400,424,442,0,425],
[462,451,436,451,459,430,448,435,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,449,456,444,458,467,447,457,455],
[447,0,439,428,450,434,465,437,440,450],
[441,451,0,437,446,439,463,446,430,450],
[434,462,453,0,459,447,449,462,438,464],
[446,440,444,431,0,426,467,459,437,439],
[432,456,451,443,464,0,470,461,431,454],
[423,425,427,441,423,420,0,424,428,439],
[443,453,444,428,431,429,466,0,431,443],
[433,450,460,452,453,459,462,459,0,480],
[435,440,440,426,451,436,451,447,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,444,453,453,459,416,454,439,473],
[433,0,432,440,458,454,441,439,439,470],
[446,458,0,447,462,456,422,456,475,458],
[437,450,443,0,458,476,451,470,447,449],
[437,432,428,432,0,451,413,430,421,442],
[431,436,434,414,439,0,410,431,451,473],
[474,449,468,439,477,480,0,458,457,481],
[436,451,434,420,460,459,432,0,426,475],
[451,451,415,443,469,439,433,464,0,448],
[417,420,432,441,448,417,409,415,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,447,426,428,424,440,450,454,440],
[457,0,453,460,445,449,472,472,470,460],
[443,437,0,462,441,445,461,480,457,446],
[464,430,428,0,434,425,458,451,443,450],
[462,445,449,456,0,449,474,480,464,462],
[466,441,445,465,441,0,464,488,454,461],
[450,418,429,432,416,426,0,444,433,448],
[440,418,410,439,410,402,446,0,427,444],
[436,420,433,447,426,436,457,463,0,442],
[450,430,444,440,428,429,442,446,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,507,457,428,453,471,413,467,424],
[423,0,483,407,466,463,443,448,440,377],
[383,407,0,412,438,396,442,428,448,438],
[433,483,478,0,456,481,461,472,483,453],
[462,424,452,434,0,448,491,409,461,423],
[437,427,494,409,442,0,447,406,463,430],
[419,447,448,429,399,443,0,440,458,411],
[477,442,462,418,481,484,450,0,467,419],
[423,450,442,407,429,427,432,423,0,421],
[466,513,452,437,467,460,479,471,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,464,451,447,472,437,470,476,451],
[429,0,469,442,466,451,451,460,462,434],
[426,421,0,443,444,442,448,449,455,445],
[439,448,447,0,450,454,457,432,466,437],
[443,424,446,440,0,453,444,447,448,425],
[418,439,448,436,437,0,416,450,442,435],
[453,439,442,433,446,474,0,452,454,454],
[420,430,441,458,443,440,438,0,452,414],
[414,428,435,424,442,448,436,438,0,438],
[439,456,445,453,465,455,436,476,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,430,424,439,451,447,436,432,458],
[447,0,432,437,428,424,438,444,433,464],
[460,458,0,446,440,455,501,462,436,462],
[466,453,444,0,467,467,468,465,448,464],
[451,462,450,423,0,449,484,465,458,469],
[439,466,435,423,441,0,454,436,432,440],
[443,452,389,422,406,436,0,433,409,440],
[454,446,428,425,425,454,457,0,438,469],
[458,457,454,442,432,458,481,452,0,464],
[432,426,428,426,421,450,450,421,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,457,475,445,462,448,449,447,451],
[457,0,464,459,446,459,457,429,447,457],
[433,426,0,448,420,457,426,407,425,413],
[415,431,442,0,449,464,432,421,420,425],
[445,444,470,441,0,465,429,438,439,448],
[428,431,433,426,425,0,421,413,414,435],
[442,433,464,458,461,469,0,431,438,439],
[441,461,483,469,452,477,459,0,451,440],
[443,443,465,470,451,476,452,439,0,459],
[439,433,477,465,442,455,451,450,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,383,381,430,417,376,384,414,378,388],
[507,0,447,439,439,513,404,499,506,505],
[509,443,0,412,451,461,433,453,450,500],
[460,451,478,0,457,445,422,494,420,435],
[473,451,439,433,0,467,484,473,434,468],
[514,377,429,445,423,0,432,384,447,476],
[506,486,457,468,406,458,0,497,422,501],
[476,391,437,396,417,506,393,0,419,463],
[512,384,440,470,456,443,468,471,0,464],
[502,385,390,455,422,414,389,427,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,421,437,466,442,441,441,446,445],
[427,0,436,426,449,423,440,443,438,439],
[469,454,0,431,466,430,468,439,452,435],
[453,464,459,0,471,454,468,464,481,432],
[424,441,424,419,0,410,460,432,431,413],
[448,467,460,436,480,0,442,452,431,429],
[449,450,422,422,430,448,0,448,449,431],
[449,447,451,426,458,438,442,0,463,446],
[444,452,438,409,459,459,441,427,0,429],
[445,451,455,458,477,461,459,444,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,455,396,446,397,470,428,487,452],
[464,0,504,443,488,440,452,475,526,516],
[435,386,0,408,391,425,468,454,481,481],
[494,447,482,0,453,410,457,430,530,507],
[444,402,499,437,0,435,465,412,520,506],
[493,450,465,480,455,0,512,415,572,517],
[420,438,422,433,425,378,0,411,507,470],
[462,415,436,460,478,475,479,0,525,506],
[403,364,409,360,370,318,383,365,0,446],
[438,374,409,383,384,373,420,384,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,439,418,419,443,419,431,448,438],
[476,0,452,461,471,475,401,490,456,453],
[451,438,0,449,417,440,428,461,455,442],
[472,429,441,0,447,450,455,467,433,455],
[471,419,473,443,0,476,404,457,450,467],
[447,415,450,440,414,0,421,464,425,432],
[471,489,462,435,486,469,0,474,426,450],
[459,400,429,423,433,426,416,0,445,448],
[442,434,435,457,440,465,464,445,0,460],
[452,437,448,435,423,458,440,442,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,448,456,463,455,397,461,425,480],
[439,0,441,443,441,425,402,430,425,456],
[442,449,0,433,435,443,403,431,442,467],
[434,447,457,0,465,443,404,423,432,477],
[427,449,455,425,0,435,412,426,443,465],
[435,465,447,447,455,0,423,441,439,470],
[493,488,487,486,478,467,0,440,467,486],
[429,460,459,467,464,449,450,0,449,467],
[465,465,448,458,447,451,423,441,0,481],
[410,434,423,413,425,420,404,423,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,457,469,451,456,451,457,456,442],
[429,0,430,448,455,452,442,449,439,433],
[433,460,0,468,478,456,443,454,454,458],
[421,442,422,0,442,436,446,444,428,430],
[439,435,412,448,0,453,432,434,425,436],
[434,438,434,454,437,0,419,431,431,432],
[439,448,447,444,458,471,0,462,441,447],
[433,441,436,446,456,459,428,0,441,455],
[434,451,436,462,465,459,449,449,0,443],
[448,457,432,460,454,458,443,435,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,451,436,444,445,424,440,434,453],
[455,0,441,450,435,455,426,456,440,432],
[439,449,0,458,432,433,450,467,476,459],
[454,440,432,0,448,437,435,441,416,440],
[446,455,458,442,0,454,431,462,450,461],
[445,435,457,453,436,0,440,464,447,436],
[466,464,440,455,459,450,0,465,445,460],
[450,434,423,449,428,426,425,0,422,447],
[456,450,414,474,440,443,445,468,0,438],
[437,458,431,450,429,454,430,443,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,447,457,441,440,466,442,457,443],
[445,0,446,482,468,425,446,442,456,446],
[443,444,0,476,456,432,469,455,455,412],
[433,408,414,0,442,430,424,427,439,435],
[449,422,434,448,0,415,439,473,455,414],
[450,465,458,460,475,0,450,455,450,440],
[424,444,421,466,451,440,0,428,438,418],
[448,448,435,463,417,435,462,0,433,440],
[433,434,435,451,435,440,452,457,0,423],
[447,444,478,455,476,450,472,450,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,400,443,435,437,418,444,428,433,428],
[490,0,476,486,459,426,495,454,462,440],
[447,414,0,439,466,402,459,427,461,461],
[455,404,451,0,445,407,458,404,423,428],
[453,431,424,445,0,408,464,436,453,442],
[472,464,488,483,482,0,488,437,484,465],
[446,395,431,432,426,402,0,413,434,456],
[462,436,463,486,454,453,477,0,454,484],
[457,428,429,467,437,406,456,436,0,470],
[462,450,429,462,448,425,434,406,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,438,422,447,413,416,420,425,410],
[469,0,455,433,457,430,449,439,442,458],
[452,435,0,435,450,434,438,447,444,452],
[468,457,455,0,442,439,428,452,463,448],
[443,433,440,448,0,430,408,426,436,430],
[477,460,456,451,460,0,469,445,470,460],
[474,441,452,462,482,421,0,452,477,473],
[470,451,443,438,464,445,438,0,458,426],
[465,448,446,427,454,420,413,432,0,437],
[480,432,438,442,460,430,417,464,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,435,439,436,445,439,431,436,443],
[449,0,437,448,436,435,443,451,446,453],
[455,453,0,443,455,445,439,438,439,433],
[451,442,447,0,439,435,436,458,429,428],
[454,454,435,451,0,426,458,460,463,447],
[445,455,445,455,464,0,476,448,442,449],
[451,447,451,454,432,414,0,453,447,425],
[459,439,452,432,430,442,437,0,449,442],
[454,444,451,461,427,448,443,441,0,445],
[447,437,457,462,443,441,465,448,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,413,412,461,412,420,411,426,465],
[436,0,430,427,463,465,424,415,434,442],
[477,460,0,441,448,427,450,409,419,454],
[478,463,449,0,487,459,466,434,464,463],
[429,427,442,403,0,415,436,402,388,420],
[478,425,463,431,475,0,424,415,414,443],
[470,466,440,424,454,466,0,436,462,439],
[479,475,481,456,488,475,454,0,440,478],
[464,456,471,426,502,476,428,450,0,488],
[425,448,436,427,470,447,451,412,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,487,439,451,433,466,448,453,462],
[414,0,394,388,406,419,385,399,383,388],
[403,496,0,463,417,453,455,459,445,453],
[451,502,427,0,418,457,471,445,451,456],
[439,484,473,472,0,440,459,446,461,453],
[457,471,437,433,450,0,440,466,465,457],
[424,505,435,419,431,450,0,435,430,454],
[442,491,431,445,444,424,455,0,459,445],
[437,507,445,439,429,425,460,431,0,451],
[428,502,437,434,437,433,436,445,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,472,466,437,453,454,441,438,451],
[436,0,463,445,431,457,433,450,478,461],
[418,427,0,467,426,439,435,425,447,449],
[424,445,423,0,391,449,396,421,416,417],
[453,459,464,499,0,463,461,438,464,462],
[437,433,451,441,427,0,428,392,451,439],
[436,457,455,494,429,462,0,445,458,448],
[449,440,465,469,452,498,445,0,450,442],
[452,412,443,474,426,439,432,440,0,426],
[439,429,441,473,428,451,442,448,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,408,406,422,427,426,390,456,436],
[423,0,371,371,416,390,403,376,454,399],
[482,519,0,425,487,460,476,460,515,494],
[484,519,465,0,464,452,469,437,447,455],
[468,474,403,426,0,460,440,402,477,468],
[463,500,430,438,430,0,460,435,475,432],
[464,487,414,421,450,430,0,392,468,418],
[500,514,430,453,488,455,498,0,475,475],
[434,436,375,443,413,415,422,415,0,423],
[454,491,396,435,422,458,472,415,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,445,439,451,428,435,440,463,431],
[428,0,414,405,432,399,400,427,452,437],
[445,476,0,428,474,447,447,440,450,441],
[451,485,462,0,472,415,435,446,475,442],
[439,458,416,418,0,417,413,432,447,426],
[462,491,443,475,473,0,453,459,490,481],
[455,490,443,455,477,437,0,445,461,443],
[450,463,450,444,458,431,445,0,481,450],
[427,438,440,415,443,400,429,409,0,437],
[459,453,449,448,464,409,447,440,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,575,421,557,619,436,728,510,612,524],
[315,0,490,569,569,443,686,435,513,484],
[469,400,0,509,546,473,665,584,607,451],
[333,321,381,0,463,339,486,340,407,332],
[271,321,344,427,0,433,507,376,343,373],
[454,447,417,551,457,0,569,551,472,485],
[162,204,225,404,383,321,0,267,432,189],
[380,455,306,550,514,339,623,0,394,360],
[278,377,283,483,547,418,458,496,0,454],
[366,406,439,558,517,405,701,530,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,423,420,409,424,421,419,390,414],
[439,0,418,414,393,424,429,391,409,433],
[467,472,0,454,460,449,450,444,464,467],
[470,476,436,0,452,443,451,437,447,448],
[481,497,430,438,0,446,463,430,442,477],
[466,466,441,447,444,0,439,437,428,467],
[469,461,440,439,427,451,0,453,419,459],
[471,499,446,453,460,453,437,0,450,469],
[500,481,426,443,448,462,471,440,0,451],
[476,457,423,442,413,423,431,421,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,467,447,470,464,440,488,443,459],
[426,0,423,394,450,390,394,417,435,406],
[423,467,0,413,463,447,419,434,414,448],
[443,496,477,0,475,465,470,494,450,446],
[420,440,427,415,0,399,433,422,414,429],
[426,500,443,425,491,0,438,479,457,484],
[450,496,471,420,457,452,0,473,455,449],
[402,473,456,396,468,411,417,0,424,434],
[447,455,476,440,476,433,435,466,0,436],
[431,484,442,444,461,406,441,456,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,476,451,468,442,461,461,470,487],
[435,0,469,452,469,445,456,441,462,467],
[414,421,0,435,441,434,447,446,442,470],
[439,438,455,0,469,453,450,455,472,468],
[422,421,449,421,0,447,438,438,448,455],
[448,445,456,437,443,0,469,455,437,461],
[429,434,443,440,452,421,0,437,443,466],
[429,449,444,435,452,435,453,0,445,459],
[420,428,448,418,442,453,447,445,0,472],
[403,423,420,422,435,429,424,431,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,457,470,415,468,457,455,437,432],
[429,0,442,458,447,467,435,436,433,422],
[433,448,0,459,406,435,419,440,434,390],
[420,432,431,0,418,443,451,418,432,419],
[475,443,484,472,0,444,462,455,448,462],
[422,423,455,447,446,0,448,434,438,410],
[433,455,471,439,428,442,0,441,443,407],
[435,454,450,472,435,456,449,0,455,445],
[453,457,456,458,442,452,447,435,0,431],
[458,468,500,471,428,480,483,445,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,446,437,445,457,449,429,442,447],
[469,0,452,458,454,468,467,451,430,444],
[444,438,0,430,437,448,431,432,443,448],
[453,432,460,0,455,441,450,444,433,450],
[445,436,453,435,0,461,425,437,419,448],
[433,422,442,449,429,0,448,431,437,454],
[441,423,459,440,465,442,0,441,421,452],
[461,439,458,446,453,459,449,0,441,455],
[448,460,447,457,471,453,469,449,0,426],
[443,446,442,440,442,436,438,435,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,418,434,425,421,441,424,391,392],
[456,0,388,431,442,448,422,425,426,407],
[472,502,0,438,469,431,482,507,448,431],
[456,459,452,0,463,438,487,474,425,437],
[465,448,421,427,0,415,475,472,377,414],
[469,442,459,452,475,0,476,431,440,427],
[449,468,408,403,415,414,0,426,374,409],
[466,465,383,416,418,459,464,0,397,433],
[499,464,442,465,513,450,516,493,0,467],
[498,483,459,453,476,463,481,457,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,397,424,472,457,432,485,527,429],
[414,0,406,384,428,398,407,446,492,383],
[493,484,0,442,467,426,440,485,521,455],
[466,506,448,0,431,448,460,471,549,462],
[418,462,423,459,0,399,401,466,501,404],
[433,492,464,442,491,0,453,477,538,484],
[458,483,450,430,489,437,0,499,508,405],
[405,444,405,419,424,413,391,0,486,437],
[363,398,369,341,389,352,382,404,0,367],
[461,507,435,428,486,406,485,453,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,436,423,449,433,441,457,446,451],
[464,0,458,444,469,451,450,445,471,427],
[454,432,0,425,447,422,461,439,457,432],
[467,446,465,0,472,463,448,461,468,445],
[441,421,443,418,0,422,429,438,445,455],
[457,439,468,427,468,0,468,459,444,454],
[449,440,429,442,461,422,0,437,440,439],
[433,445,451,429,452,431,453,0,443,436],
[444,419,433,422,445,446,450,447,0,450],
[439,463,458,445,435,436,451,454,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,397,390,428,435,410,460,461,432],
[441,0,413,420,477,449,503,464,441,429],
[493,477,0,388,448,508,446,485,459,481],
[500,470,502,0,456,461,463,440,482,465],
[462,413,442,434,0,467,488,456,483,459],
[455,441,382,429,423,0,443,464,411,439],
[480,387,444,427,402,447,0,465,423,418],
[430,426,405,450,434,426,425,0,474,408],
[429,449,431,408,407,479,467,416,0,439],
[458,461,409,425,431,451,472,482,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,444,419,438,442,465,434,417,407],
[446,0,453,410,434,446,458,433,438,364],
[446,437,0,390,421,437,462,398,448,404],
[471,480,500,0,459,433,498,462,473,453],
[452,456,469,431,0,431,488,437,415,398],
[448,444,453,457,459,0,495,468,441,424],
[425,432,428,392,402,395,0,428,411,396],
[456,457,492,428,453,422,462,0,438,385],
[473,452,442,417,475,449,479,452,0,472],
[483,526,486,437,492,466,494,505,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,403,431,479,494,404,429,419,444],
[432,0,398,429,456,443,375,408,433,424],
[487,492,0,468,490,480,446,441,465,454],
[459,461,422,0,483,460,437,419,424,474],
[411,434,400,407,0,409,400,387,398,439],
[396,447,410,430,481,0,406,424,415,492],
[486,515,444,453,490,484,0,439,426,482],
[461,482,449,471,503,466,451,0,439,481],
[471,457,425,466,492,475,464,451,0,489],
[446,466,436,416,451,398,408,409,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,449,481,442,433,489,448,420,428],
[460,0,450,443,466,464,481,460,472,447],
[441,440,0,457,435,451,466,453,402,414],
[409,447,433,0,447,442,498,466,415,420],
[448,424,455,443,0,470,470,446,432,427],
[457,426,439,448,420,0,485,449,412,400],
[401,409,424,392,420,405,0,426,434,381],
[442,430,437,424,444,441,464,0,417,429],
[470,418,488,475,458,478,456,473,0,433],
[462,443,476,470,463,490,509,461,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,420,424,416,435,449,440,438,436],
[467,0,460,424,433,443,443,443,438,433],
[470,430,0,436,437,456,444,422,452,446],
[466,466,454,0,449,466,459,445,479,457],
[474,457,453,441,0,464,467,440,465,446],
[455,447,434,424,426,0,456,435,466,438],
[441,447,446,431,423,434,0,435,454,439],
[450,447,468,445,450,455,455,0,443,450],
[452,452,438,411,425,424,436,447,0,431],
[454,457,444,433,444,452,451,440,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,503,503,466,445,477,456,458,458],
[435,0,454,460,422,456,445,420,445,411],
[387,436,0,396,428,461,439,425,441,425],
[387,430,494,0,430,448,456,437,455,414],
[424,468,462,460,0,471,426,482,428,434],
[445,434,429,442,419,0,419,412,405,415],
[413,445,451,434,464,471,0,445,445,420],
[434,470,465,453,408,478,445,0,454,415],
[432,445,449,435,462,485,445,436,0,446],
[432,479,465,476,456,475,470,475,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,503,420,465,475,376,481,413,506],
[395,0,442,414,410,399,414,415,451,459],
[387,448,0,515,498,467,472,487,553,480],
[470,476,375,0,441,414,448,455,431,432],
[425,480,392,449,0,378,383,437,404,422],
[415,491,423,476,512,0,414,507,533,497],
[514,476,418,442,507,476,0,519,546,528],
[409,475,403,435,453,383,371,0,432,404],
[477,439,337,459,486,357,344,458,0,464],
[384,431,410,458,468,393,362,486,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,445,425,433,469,449,454,469,444],
[451,0,477,453,439,479,452,489,487,454],
[445,413,0,424,412,435,414,435,446,436],
[465,437,466,0,432,467,453,475,463,450],
[457,451,478,458,0,475,434,479,495,431],
[421,411,455,423,415,0,421,446,456,431],
[441,438,476,437,456,469,0,478,464,471],
[436,401,455,415,411,444,412,0,451,415],
[421,403,444,427,395,434,426,439,0,423],
[446,436,454,440,459,459,419,475,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,457,436,451,454,455,425,450,431],
[448,0,445,444,402,432,464,410,454,431],
[433,445,0,425,396,437,455,416,440,413],
[454,446,465,0,444,467,471,432,493,448],
[439,488,494,446,0,452,501,453,510,476],
[436,458,453,423,438,0,449,424,448,441],
[435,426,435,419,389,441,0,411,440,400],
[465,480,474,458,437,466,479,0,447,450],
[440,436,450,397,380,442,450,443,0,435],
[459,459,477,442,414,449,490,440,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,483,458,455,512,480,438,459,504],
[456,0,421,478,484,475,444,418,417,503],
[407,469,0,435,412,514,424,429,424,471],
[432,412,455,0,448,483,476,453,414,519],
[435,406,478,442,0,512,436,454,419,448],
[378,415,376,407,378,0,393,413,368,411],
[410,446,466,414,454,497,0,438,427,482],
[452,472,461,437,436,477,452,0,466,533],
[431,473,466,476,471,522,463,424,0,474],
[386,387,419,371,442,479,408,357,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,461,409,427,414,447,413,412,445],
[430,0,438,429,442,412,424,431,413,431],
[429,452,0,462,422,428,445,414,433,446],
[481,461,428,0,430,421,452,430,418,447],
[463,448,468,460,0,423,447,451,430,443],
[476,478,462,469,467,0,462,447,424,463],
[443,466,445,438,443,428,0,429,423,463],
[477,459,476,460,439,443,461,0,452,470],
[478,477,457,472,460,466,467,438,0,483],
[445,459,444,443,447,427,427,420,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,370,425,513,473,466,410,441,409],
[478,0,384,383,488,524,457,458,458,429],
[520,506,0,462,498,507,578,453,459,422],
[465,507,428,0,498,451,473,449,444,418],
[377,402,392,392,0,442,454,360,398,400],
[417,366,383,439,448,0,441,436,434,373],
[424,433,312,417,436,449,0,394,356,320],
[480,432,437,441,530,454,496,0,359,447],
[449,432,431,446,492,456,534,531,0,421],
[481,461,468,472,490,517,570,443,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,370,458,418,449,436,444,482,477],
[416,0,374,440,406,417,398,383,418,411],
[520,516,0,502,424,465,428,437,462,464],
[432,450,388,0,461,480,426,427,441,484],
[472,484,466,429,0,510,458,457,487,502],
[441,473,425,410,380,0,388,442,458,472],
[454,492,462,464,432,502,0,436,500,468],
[446,507,453,463,433,448,454,0,465,479],
[408,472,428,449,403,432,390,425,0,470],
[413,479,426,406,388,418,422,411,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,442,470,439,464,429,467,440,445],
[441,0,439,440,447,420,411,438,415,433],
[448,451,0,429,458,440,399,452,423,433],
[420,450,461,0,448,449,449,443,423,431],
[451,443,432,442,0,424,425,445,445,429],
[426,470,450,441,466,0,421,481,438,435],
[461,479,491,441,465,469,0,481,479,488],
[423,452,438,447,445,409,409,0,437,436],
[450,475,467,467,445,452,411,453,0,474],
[445,457,457,459,461,455,402,454,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,464,471,450,446,443,445,452,426],
[445,0,428,459,449,404,451,460,438,446],
[426,462,0,446,440,426,454,464,458,432],
[419,431,444,0,437,407,450,435,420,431],
[440,441,450,453,0,422,438,438,445,445],
[444,486,464,483,468,0,461,464,444,456],
[447,439,436,440,452,429,0,465,436,455],
[445,430,426,455,452,426,425,0,406,470],
[438,452,432,470,445,446,454,484,0,439],
[464,444,458,459,445,434,435,420,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,429,375,403,412,414,425,436,407],
[436,0,462,444,432,447,433,467,442,447],
[461,428,0,469,424,445,438,449,478,442],
[515,446,421,0,458,430,448,454,459,458],
[487,458,466,432,0,448,439,462,448,451],
[478,443,445,460,442,0,438,442,439,449],
[476,457,452,442,451,452,0,463,483,476],
[465,423,441,436,428,448,427,0,447,446],
[454,448,412,431,442,451,407,443,0,423],
[483,443,448,432,439,441,414,444,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,455,543,413,530,402,488,454,370],
[400,0,431,483,453,349,437,385,380,351],
[435,459,0,481,462,416,374,442,523,405],
[347,407,409,0,357,298,336,293,367,315],
[477,437,428,533,0,493,448,479,514,293],
[360,541,474,592,397,0,362,535,498,362],
[488,453,516,554,442,528,0,518,506,411],
[402,505,448,597,411,355,372,0,456,337],
[436,510,367,523,376,392,384,434,0,469],
[520,539,485,575,597,528,479,553,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,438,430,460,450,465,477,470,477],
[431,0,442,446,413,432,448,446,454,457],
[452,448,0,431,482,447,474,459,458,442],
[460,444,459,0,460,444,464,465,461,434],
[430,477,408,430,0,446,433,434,449,437],
[440,458,443,446,444,0,450,458,474,441],
[425,442,416,426,457,440,0,430,450,420],
[413,444,431,425,456,432,460,0,449,432],
[420,436,432,429,441,416,440,441,0,437],
[413,433,448,456,453,449,470,458,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,398,427,441,402,397,449,421,410],
[470,0,441,497,468,450,471,504,461,497],
[492,449,0,527,437,372,409,454,432,452],
[463,393,363,0,425,406,412,425,430,400],
[449,422,453,465,0,381,423,436,424,435],
[488,440,518,484,509,0,449,481,462,477],
[493,419,481,478,467,441,0,501,476,455],
[441,386,436,465,454,409,389,0,420,436],
[469,429,458,460,466,428,414,470,0,470],
[480,393,438,490,455,413,435,454,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,441,433,472,429,437,466,433,448],
[419,0,428,461,445,412,420,462,420,418],
[449,462,0,450,457,452,443,473,428,463],
[457,429,440,0,438,418,428,457,418,420],
[418,445,433,452,0,425,437,458,419,418],
[461,478,438,472,465,0,451,480,444,447],
[453,470,447,462,453,439,0,461,439,433],
[424,428,417,433,432,410,429,0,419,424],
[457,470,462,472,471,446,451,471,0,431],
[442,472,427,470,472,443,457,466,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,472,444,426,449,477,454,396,427],
[459,0,499,466,441,448,474,452,461,473],
[418,391,0,421,410,436,493,425,424,413],
[446,424,469,0,425,428,453,463,407,471],
[464,449,480,465,0,467,476,461,434,436],
[441,442,454,462,423,0,467,450,436,435],
[413,416,397,437,414,423,0,441,406,459],
[436,438,465,427,429,440,449,0,398,456],
[494,429,466,483,456,454,484,492,0,472],
[463,417,477,419,454,455,431,434,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,446,501,506,424,396,451,522,455],
[424,0,487,387,439,386,416,456,531,483],
[444,403,0,477,472,419,462,437,420,489],
[389,503,413,0,458,458,418,425,436,474],
[384,451,418,432,0,379,333,460,479,381],
[466,504,471,432,511,0,460,466,502,505],
[494,474,428,472,557,430,0,535,518,491],
[439,434,453,465,430,424,355,0,458,472],
[368,359,470,454,411,388,372,432,0,437],
[435,407,401,416,509,385,399,418,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,418,400,430,430,422,412,414,422],
[484,0,453,457,437,467,476,426,478,459],
[472,437,0,423,464,452,438,447,457,443],
[490,433,467,0,459,452,447,417,447,466],
[460,453,426,431,0,455,427,427,433,452],
[460,423,438,438,435,0,445,420,435,427],
[468,414,452,443,463,445,0,439,441,453],
[478,464,443,473,463,470,451,0,452,465],
[476,412,433,443,457,455,449,438,0,439],
[468,431,447,424,438,463,437,425,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,465,428,454,453,450,438,442,448],
[445,0,461,448,465,453,467,454,458,451],
[425,429,0,430,438,452,447,452,447,438],
[462,442,460,0,464,461,480,472,460,468],
[436,425,452,426,0,446,445,426,443,461],
[437,437,438,429,444,0,439,449,449,454],
[440,423,443,410,445,451,0,455,427,440],
[452,436,438,418,464,441,435,0,434,444],
[448,432,443,430,447,441,463,456,0,435],
[442,439,452,422,429,436,450,446,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,424,448,421,418,399,423,434,419],
[444,0,437,424,429,443,413,442,440,405],
[466,453,0,444,434,436,442,439,451,444],
[442,466,446,0,415,425,410,462,421,431],
[469,461,456,475,0,438,461,450,464,432],
[472,447,454,465,452,0,422,457,451,461],
[491,477,448,480,429,468,0,485,454,454],
[467,448,451,428,440,433,405,0,419,444],
[456,450,439,469,426,439,436,471,0,444],
[471,485,446,459,458,429,436,446,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,454,428,456,437,447,435,440,450],
[417,0,435,445,436,420,433,426,436,431],
[436,455,0,431,454,428,439,435,439,431],
[462,445,459,0,456,424,467,432,452,429],
[434,454,436,434,0,430,443,411,423,441],
[453,470,462,466,460,0,448,436,448,433],
[443,457,451,423,447,442,0,449,441,445],
[455,464,455,458,479,454,441,0,448,460],
[450,454,451,438,467,442,449,442,0,427],
[440,459,459,461,449,457,445,430,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,527,474,459,430,476,488,458,457],
[452,0,451,456,443,428,432,450,449,465],
[363,439,0,402,441,428,407,424,424,435],
[416,434,488,0,460,425,415,432,461,455],
[431,447,449,430,0,420,469,424,434,401],
[460,462,462,465,470,0,441,444,469,496],
[414,458,483,475,421,449,0,416,410,461],
[402,440,466,458,466,446,474,0,407,432],
[432,441,466,429,456,421,480,483,0,477],
[433,425,455,435,489,394,429,458,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,457,416,473,464,426,482,474,441],
[456,0,451,445,465,486,464,475,466,435],
[433,439,0,402,436,465,443,457,454,443],
[474,445,488,0,471,461,479,488,480,473],
[417,425,454,419,0,478,463,466,470,447],
[426,404,425,429,412,0,419,435,448,412],
[464,426,447,411,427,471,0,464,472,450],
[408,415,433,402,424,455,426,0,426,400],
[416,424,436,410,420,442,418,464,0,425],
[449,455,447,417,443,478,440,490,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,450,457,478,439,432,460,419,439],
[446,0,436,449,456,450,440,437,455,448],
[440,454,0,448,460,453,446,438,440,449],
[433,441,442,0,435,440,441,443,432,438],
[412,434,430,455,0,437,449,450,434,453],
[451,440,437,450,453,0,438,445,425,443],
[458,450,444,449,441,452,0,445,423,433],
[430,453,452,447,440,445,445,0,451,434],
[471,435,450,458,456,465,467,439,0,463],
[451,442,441,452,437,447,457,456,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,461,459,446,444,469,441,445,455],
[433,0,453,443,432,444,458,455,442,438],
[429,437,0,458,400,458,432,423,425,439],
[431,447,432,0,425,432,447,425,408,421],
[444,458,490,465,0,449,413,448,450,461],
[446,446,432,458,441,0,439,424,412,451],
[421,432,458,443,477,451,0,441,450,454],
[449,435,467,465,442,466,449,0,455,446],
[445,448,465,482,440,478,440,435,0,472],
[435,452,451,469,429,439,436,444,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,401,431,424,416,423,413,445,442],
[462,0,442,444,446,451,453,453,463,444],
[489,448,0,458,451,439,419,442,468,443],
[459,446,432,0,439,441,425,444,455,457],
[466,444,439,451,0,425,438,476,475,426],
[474,439,451,449,465,0,434,461,467,474],
[467,437,471,465,452,456,0,457,498,471],
[477,437,448,446,414,429,433,0,460,450],
[445,427,422,435,415,423,392,430,0,419],
[448,446,447,433,464,416,419,440,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,410,442,446,465,427,433,448,456],
[449,0,438,431,446,481,480,453,479,497],
[480,452,0,470,475,446,477,435,463,488],
[448,459,420,0,441,432,480,438,447,455],
[444,444,415,449,0,427,469,421,446,475],
[425,409,444,458,463,0,450,436,476,465],
[463,410,413,410,421,440,0,421,420,431],
[457,437,455,452,469,454,469,0,469,477],
[442,411,427,443,444,414,470,421,0,446],
[434,393,402,435,415,425,459,413,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,453,456,436,448,442,444,457,455],
[445,0,457,442,445,425,445,465,452,439],
[437,433,0,436,431,450,433,477,424,449],
[434,448,454,0,435,461,444,467,451,450],
[454,445,459,455,0,457,451,488,459,473],
[442,465,440,429,433,0,455,446,454,455],
[448,445,457,446,439,435,0,448,446,461],
[446,425,413,423,402,444,442,0,444,430],
[433,438,466,439,431,436,444,446,0,444],
[435,451,441,440,417,435,429,460,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,450,456,442,480,450,463,459,456],
[464,0,440,454,457,459,444,463,468,436],
[440,450,0,477,475,470,447,475,438,446],
[434,436,413,0,442,431,423,458,431,461],
[448,433,415,448,0,473,449,452,474,422],
[410,431,420,459,417,0,433,443,450,448],
[440,446,443,467,441,457,0,475,460,444],
[427,427,415,432,438,447,415,0,452,433],
[431,422,452,459,416,440,430,438,0,446],
[434,454,444,429,468,442,446,457,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,425,466,440,452,451,452,455,453],
[428,0,436,453,429,442,424,448,413,403],
[465,454,0,460,454,449,460,464,441,443],
[424,437,430,0,464,444,439,451,458,441],
[450,461,436,426,0,453,452,430,416,441],
[438,448,441,446,437,0,442,441,426,448],
[439,466,430,451,438,448,0,427,443,465],
[438,442,426,439,460,449,463,0,427,430],
[435,477,449,432,474,464,447,463,0,460],
[437,487,447,449,449,442,425,460,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,440,431,462,449,445,455,466,450],
[428,0,436,445,444,443,470,456,444,427],
[450,454,0,454,422,466,446,483,449,461],
[459,445,436,0,448,444,454,473,438,439],
[428,446,468,442,0,465,463,468,448,459],
[441,447,424,446,425,0,458,452,445,426],
[445,420,444,436,427,432,0,441,448,434],
[435,434,407,417,422,438,449,0,445,437],
[424,446,441,452,442,445,442,445,0,449],
[440,463,429,451,431,464,456,453,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,438,441,457,573,450,480,501,448],
[463,0,415,464,465,517,539,448,516,423],
[452,475,0,470,471,515,451,389,408,489],
[449,426,420,0,455,426,443,428,460,327],
[433,425,419,435,0,385,450,411,460,437],
[317,373,375,464,505,0,466,436,490,444],
[440,351,439,447,440,424,0,430,439,451],
[410,442,501,462,479,454,460,0,528,532],
[389,374,482,430,430,400,451,362,0,420],
[442,467,401,563,453,446,439,358,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,364,410,390,360,365,433,429,429,409],
[526,0,406,486,495,448,485,442,476,495],
[480,484,0,444,457,463,449,507,482,478],
[500,404,446,0,385,409,411,417,479,412],
[530,395,433,505,0,439,501,447,465,430],
[525,442,427,481,451,0,438,455,478,459],
[457,405,441,479,389,452,0,459,452,410],
[461,448,383,473,443,435,431,0,478,455],
[461,414,408,411,425,412,438,412,0,428],
[481,395,412,478,460,431,480,435,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,455,430,461,450,466,460,433,459],
[434,0,426,421,450,423,414,456,454,451],
[435,464,0,442,468,445,420,463,442,455],
[460,469,448,0,471,428,439,452,453,448],
[429,440,422,419,0,440,429,448,419,436],
[440,467,445,462,450,0,449,457,445,451],
[424,476,470,451,461,441,0,474,461,464],
[430,434,427,438,442,433,416,0,446,442],
[457,436,448,437,471,445,429,444,0,449],
[431,439,435,442,454,439,426,448,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,445,451,450,450,448,437,461,432],
[427,0,430,429,438,424,443,448,463,429],
[445,460,0,442,427,430,443,444,444,440],
[439,461,448,0,418,434,445,435,463,442],
[440,452,463,472,0,438,450,432,484,441],
[440,466,460,456,452,0,478,458,483,446],
[442,447,447,445,440,412,0,474,454,446],
[453,442,446,455,458,432,416,0,466,437],
[429,427,446,427,406,407,436,424,0,418],
[458,461,450,448,449,444,444,453,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,465,452,447,429,442,434,444,424],
[445,0,460,446,453,453,444,430,441,445],
[425,430,0,431,443,413,441,437,424,417],
[438,444,459,0,438,431,437,425,437,435],
[443,437,447,452,0,433,442,440,452,419],
[461,437,477,459,457,0,442,433,445,417],
[448,446,449,453,448,448,0,438,442,431],
[456,460,453,465,450,457,452,0,455,432],
[446,449,466,453,438,445,448,435,0,421],
[466,445,473,455,471,473,459,458,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,404,412,403,430,445,420,420,460],
[462,0,462,471,415,449,446,473,428,493],
[486,428,0,437,402,438,451,452,458,415],
[478,419,453,0,418,456,454,483,430,449],
[487,475,488,472,0,473,428,470,448,470],
[460,441,452,434,417,0,451,475,427,463],
[445,444,439,436,462,439,0,462,466,490],
[470,417,438,407,420,415,428,0,423,457],
[470,462,432,460,442,463,424,467,0,444],
[430,397,475,441,420,427,400,433,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,428,443,434,439,431,434,450,437],
[447,0,453,446,440,437,431,406,445,410],
[462,437,0,447,452,457,420,435,456,419],
[447,444,443,0,434,453,432,426,446,413],
[456,450,438,456,0,469,426,437,463,419],
[451,453,433,437,421,0,445,419,429,422],
[459,459,470,458,464,445,0,445,470,448],
[456,484,455,464,453,471,445,0,454,421],
[440,445,434,444,427,461,420,436,0,412],
[453,480,471,477,471,468,442,469,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,383,436,411,393,399,350,387,439,394],
[507,0,492,442,477,438,454,454,493,449],
[454,398,0,381,399,361,372,444,458,382],
[479,448,509,0,476,459,428,469,479,457],
[497,413,491,414,0,403,414,443,448,451],
[491,452,529,431,487,0,422,476,516,437],
[540,436,518,462,476,468,0,475,500,468],
[503,436,446,421,447,414,415,0,477,445],
[451,397,432,411,442,374,390,413,0,415],
[496,441,508,433,439,453,422,445,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,465,449,445,468,468,444,454,461],
[432,0,461,447,460,447,467,420,455,469],
[425,429,0,420,425,436,461,428,433,459],
[441,443,470,0,449,460,465,448,449,460],
[445,430,465,441,0,448,457,432,454,454],
[422,443,454,430,442,0,466,427,443,445],
[422,423,429,425,433,424,0,432,418,448],
[446,470,462,442,458,463,458,0,448,453],
[436,435,457,441,436,447,472,442,0,452],
[429,421,431,430,436,445,442,437,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,453,447,452,449,452,438,445,455],
[443,0,451,436,463,450,456,457,458,441],
[437,439,0,442,443,445,434,438,446,452],
[443,454,448,0,459,467,470,457,452,453],
[438,427,447,431,0,451,424,441,442,452],
[441,440,445,423,439,0,444,450,433,446],
[438,434,456,420,466,446,0,449,446,439],
[452,433,452,433,449,440,441,0,426,434],
[445,432,444,438,448,457,444,464,0,453],
[435,449,438,437,438,444,451,456,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,422,422,436,455,489,440,461,446],
[460,0,432,460,471,455,473,451,458,474],
[468,458,0,444,487,466,487,458,463,476],
[468,430,446,0,456,447,462,432,469,445],
[454,419,403,434,0,442,462,421,451,456],
[435,435,424,443,448,0,443,443,462,445],
[401,417,403,428,428,447,0,420,427,445],
[450,439,432,458,469,447,470,0,437,439],
[429,432,427,421,439,428,463,453,0,423],
[444,416,414,445,434,445,445,451,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,446,443,448,428,465,457,433,450],
[465,0,428,445,438,445,475,474,436,450],
[444,462,0,423,435,455,473,472,435,474],
[447,445,467,0,446,458,453,454,452,465],
[442,452,455,444,0,455,461,464,453,444],
[462,445,435,432,435,0,468,437,450,436],
[425,415,417,437,429,422,0,432,417,420],
[433,416,418,436,426,453,458,0,426,430],
[457,454,455,438,437,440,473,464,0,439],
[440,440,416,425,446,454,470,460,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,384,423,428,421,426,474,428,440],
[441,0,424,436,458,426,437,481,435,460],
[506,466,0,482,448,483,450,481,424,473],
[467,454,408,0,467,429,433,488,415,483],
[462,432,442,423,0,453,423,489,434,489],
[469,464,407,461,437,0,449,492,404,477],
[464,453,440,457,467,441,0,490,461,482],
[416,409,409,402,401,398,400,0,375,413],
[462,455,466,475,456,486,429,515,0,482],
[450,430,417,407,401,413,408,477,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,589,529,428,513,547,499,568,558,469],
[301,0,482,323,301,507,397,415,370,345],
[361,408,0,363,448,472,377,457,340,293],
[462,567,527,0,559,568,512,513,450,421],
[377,589,442,331,0,379,492,543,373,477],
[343,383,418,322,511,0,399,407,395,396],
[391,493,513,378,398,491,0,502,504,440],
[322,475,433,377,347,483,388,0,397,357],
[332,520,550,440,517,495,386,493,0,391],
[421,545,597,469,413,494,450,533,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,436,430,430,455,436,437,447,446],
[444,0,417,445,415,420,422,440,445,436],
[454,473,0,440,460,454,446,454,446,467],
[460,445,450,0,431,430,447,466,455,473],
[460,475,430,459,0,460,459,459,464,450],
[435,470,436,460,430,0,473,467,472,464],
[454,468,444,443,431,417,0,448,442,456],
[453,450,436,424,431,423,442,0,433,458],
[443,445,444,435,426,418,448,457,0,461],
[444,454,423,417,440,426,434,432,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,412,444,397,432,396,436,437,454],
[455,0,431,463,437,451,419,436,458,462],
[478,459,0,477,444,477,439,433,483,470],
[446,427,413,0,421,455,431,423,452,427],
[493,453,446,469,0,440,433,426,431,457],
[458,439,413,435,450,0,414,416,460,467],
[494,471,451,459,457,476,0,434,491,458],
[454,454,457,467,464,474,456,0,445,467],
[453,432,407,438,459,430,399,445,0,483],
[436,428,420,463,433,423,432,423,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,415,438,372,332,406,427,502,522],
[475,0,371,481,466,399,447,369,527,545],
[475,519,0,558,466,403,505,534,514,476],
[452,409,332,0,370,405,405,389,311,470],
[518,424,424,520,0,522,425,490,527,515],
[558,491,487,485,368,0,522,594,476,463],
[484,443,385,485,465,368,0,394,420,486],
[463,521,356,501,400,296,496,0,362,536],
[388,363,376,579,363,414,470,528,0,375],
[368,345,414,420,375,427,404,354,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,399,424,411,405,442,421,414,424],
[458,0,424,447,430,431,446,426,400,450],
[491,466,0,454,473,436,476,463,414,485],
[466,443,436,0,421,425,450,413,401,423],
[479,460,417,469,0,437,456,453,444,457],
[485,459,454,465,453,0,488,469,443,452],
[448,444,414,440,434,402,0,432,425,424],
[469,464,427,477,437,421,458,0,448,438],
[476,490,476,489,446,447,465,442,0,473],
[466,440,405,467,433,438,466,452,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,436,410,394,462,434,448,406,433],
[421,0,450,420,461,446,461,430,428,443],
[454,440,0,467,435,487,479,447,436,451],
[480,470,423,0,433,454,474,479,493,427],
[496,429,455,457,0,452,455,471,440,479],
[428,444,403,436,438,0,436,420,417,449],
[456,429,411,416,435,454,0,440,437,458],
[442,460,443,411,419,470,450,0,432,459],
[484,462,454,397,450,473,453,458,0,453],
[457,447,439,463,411,441,432,431,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,426,447,454,441,452,461,443,449],
[429,0,424,434,414,427,417,456,404,439],
[464,466,0,452,439,453,461,464,451,468],
[443,456,438,0,414,455,435,488,427,462],
[436,476,451,476,0,464,461,461,425,459],
[449,463,437,435,426,0,457,469,439,458],
[438,473,429,455,429,433,0,468,431,454],
[429,434,426,402,429,421,422,0,407,435],
[447,486,439,463,465,451,459,483,0,480],
[441,451,422,428,431,432,436,455,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,451,429,449,451,454,438,481,420],
[425,0,427,408,417,463,439,406,442,427],
[439,463,0,409,439,430,438,401,473,433],
[461,482,481,0,432,475,452,456,478,458],
[441,473,451,458,0,470,454,431,488,480],
[439,427,460,415,420,0,449,457,478,425],
[436,451,452,438,436,441,0,444,464,429],
[452,484,489,434,459,433,446,0,489,442],
[409,448,417,412,402,412,426,401,0,413],
[470,463,457,432,410,465,461,448,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,451,475,476,484,429,456,439,457],
[423,0,431,466,444,459,456,440,444,458],
[439,459,0,454,459,446,426,433,448,456],
[415,424,436,0,415,452,442,427,402,424],
[414,446,431,475,0,428,437,418,431,440],
[406,431,444,438,462,0,426,441,400,447],
[461,434,464,448,453,464,0,475,443,456],
[434,450,457,463,472,449,415,0,422,447],
[451,446,442,488,459,490,447,468,0,459],
[433,432,434,466,450,443,434,443,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,468,425,432,436,446,409,454,451],
[410,0,402,381,400,413,416,384,400,418],
[422,488,0,387,438,443,476,436,418,472],
[465,509,503,0,437,461,512,466,473,475],
[458,490,452,453,0,422,454,401,430,466],
[454,477,447,429,468,0,458,434,448,449],
[444,474,414,378,436,432,0,420,430,448],
[481,506,454,424,489,456,470,0,466,460],
[436,490,472,417,460,442,460,424,0,459],
[439,472,418,415,424,441,442,430,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,454,396,419,448,430,447,424,397],
[434,0,419,431,438,447,419,421,410,463],
[436,471,0,394,431,441,455,410,425,471],
[494,459,496,0,482,442,434,454,457,465],
[471,452,459,408,0,428,386,378,434,455],
[442,443,449,448,462,0,499,442,459,441],
[460,471,435,456,504,391,0,444,450,441],
[443,469,480,436,512,448,446,0,495,451],
[466,480,465,433,456,431,440,395,0,459],
[493,427,419,425,435,449,449,439,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,471,450,448,448,476,452,426,485],
[411,0,433,422,439,470,445,531,448,429],
[419,457,0,451,432,490,459,492,488,431],
[440,468,439,0,406,465,427,517,419,424],
[442,451,458,484,0,481,439,494,459,472],
[442,420,400,425,409,0,403,468,417,412],
[414,445,431,463,451,487,0,492,430,452],
[438,359,398,373,396,422,398,0,377,415],
[464,442,402,471,431,473,460,513,0,457],
[405,461,459,466,418,478,438,475,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,467,486,461,454,464,448,392,503],
[466,0,466,508,486,569,484,452,404,402],
[423,424,0,425,471,541,472,388,340,535],
[404,382,465,0,444,439,428,312,290,425],
[429,404,419,446,0,469,438,341,374,401],
[436,321,349,451,421,0,417,308,395,372],
[426,406,418,462,452,473,0,358,341,450],
[442,438,502,578,549,582,532,0,517,572],
[498,486,550,600,516,495,549,373,0,551],
[387,488,355,465,489,518,440,318,339,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,443,454,439,377,434,418,395,435],
[450,0,452,517,484,399,528,488,459,438],
[447,438,0,478,469,422,484,436,399,417],
[436,373,412,0,452,431,461,423,418,418],
[451,406,421,438,0,407,490,399,435,400],
[513,491,468,459,483,0,504,469,445,464],
[456,362,406,429,400,386,0,402,397,408],
[472,402,454,467,491,421,488,0,462,435],
[495,431,491,472,455,445,493,428,0,446],
[455,452,473,472,490,426,482,455,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,420,437,441,449,411,417,438,430],
[485,0,457,462,451,436,448,463,469,447],
[470,433,0,454,447,413,436,467,452,436],
[453,428,436,0,441,448,432,438,445,439],
[449,439,443,449,0,430,407,446,432,438],
[441,454,477,442,460,0,438,439,456,431],
[479,442,454,458,483,452,0,463,459,477],
[473,427,423,452,444,451,427,0,460,431],
[452,421,438,445,458,434,431,430,0,438],
[460,443,454,451,452,459,413,459,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,424,419,415,420,425,391,423,447],
[477,0,465,447,443,459,439,451,448,460],
[466,425,0,421,444,437,441,425,428,466],
[471,443,469,0,442,453,447,431,435,449],
[475,447,446,448,0,440,454,441,436,471],
[470,431,453,437,450,0,440,443,440,438],
[465,451,449,443,436,450,0,435,422,444],
[499,439,465,459,449,447,455,0,443,462],
[467,442,462,455,454,450,468,447,0,454],
[443,430,424,441,419,452,446,428,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,438,449,464,458,454,447,454,467],
[427,0,445,447,431,427,415,427,439,440],
[452,445,0,460,438,432,436,444,420,448],
[441,443,430,0,454,467,450,432,428,460],
[426,459,452,436,0,422,427,439,437,441],
[432,463,458,423,468,0,442,443,439,461],
[436,475,454,440,463,448,0,432,449,466],
[443,463,446,458,451,447,458,0,431,443],
[436,451,470,462,453,451,441,459,0,445],
[423,450,442,430,449,429,424,447,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,447,418,425,402,440,416,439,445],
[470,0,493,488,450,458,479,479,427,448],
[443,397,0,474,450,419,427,439,449,419],
[472,402,416,0,468,416,499,429,418,416],
[465,440,440,422,0,468,462,456,429,436],
[488,432,471,474,422,0,466,477,451,466],
[450,411,463,391,428,424,0,438,431,434],
[474,411,451,461,434,413,452,0,473,419],
[451,463,441,472,461,439,459,417,0,450],
[445,442,471,474,454,424,456,471,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,470,417,455,457,459,508,447,465],
[463,0,520,483,471,443,483,490,485,476],
[420,370,0,412,422,378,428,426,388,436],
[473,407,478,0,456,456,456,440,463,440],
[435,419,468,434,0,444,404,479,432,467],
[433,447,512,434,446,0,455,494,467,459],
[431,407,462,434,486,435,0,466,442,440],
[382,400,464,450,411,396,424,0,413,419],
[443,405,502,427,458,423,448,477,0,420],
[425,414,454,450,423,431,450,471,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,504,513,471,528,480,489,465,480],
[457,0,513,462,458,495,501,459,422,497],
[386,377,0,416,439,461,450,457,382,438],
[377,428,474,0,422,478,448,440,387,442],
[419,432,451,468,0,474,457,465,400,437],
[362,395,429,412,416,0,443,423,384,429],
[410,389,440,442,433,447,0,435,380,438],
[401,431,433,450,425,467,455,0,385,459],
[425,468,508,503,490,506,510,505,0,517],
[410,393,452,448,453,461,452,431,373,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,426,473,448,412,475,461,456,473],
[442,0,385,460,417,458,422,423,426,401],
[464,505,0,507,444,473,461,468,458,426],
[417,430,383,0,376,420,392,416,407,412],
[442,473,446,514,0,450,425,453,410,424],
[478,432,417,470,440,0,436,437,431,437],
[415,468,429,498,465,454,0,445,407,445],
[429,467,422,474,437,453,445,0,432,407],
[434,464,432,483,480,459,483,458,0,426],
[417,489,464,478,466,453,445,483,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,485,477,397,485,447,429,518,487],
[406,0,471,508,503,534,527,404,477,453],
[405,419,0,316,370,434,346,366,464,395],
[413,382,574,0,532,541,455,463,534,472],
[493,387,520,358,0,499,431,408,547,494],
[405,356,456,349,391,0,423,381,477,482],
[443,363,544,435,459,467,0,367,477,476],
[461,486,524,427,482,509,523,0,454,484],
[372,413,426,356,343,413,413,436,0,454],
[403,437,495,418,396,408,414,406,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,384,460,431,448,429,436,455,420,442],
[506,0,495,471,502,453,448,438,463,469],
[430,395,0,462,466,392,454,442,418,448],
[459,419,428,0,462,407,439,435,447,442],
[442,388,424,428,0,401,430,414,448,431],
[461,437,498,483,489,0,439,489,468,420],
[454,442,436,451,460,451,0,444,414,450],
[435,452,448,455,476,401,446,0,438,425],
[470,427,472,443,442,422,476,452,0,439],
[448,421,442,448,459,470,440,465,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,428,447,453,439,440,441,444,457],
[443,0,420,444,466,447,430,461,434,466],
[462,470,0,468,478,458,461,462,442,486],
[443,446,422,0,469,415,432,450,433,436],
[437,424,412,421,0,412,430,441,431,442],
[451,443,432,475,478,0,431,457,439,463],
[450,460,429,458,460,459,0,468,449,473],
[449,429,428,440,449,433,422,0,429,452],
[446,456,448,457,459,451,441,461,0,468],
[433,424,404,454,448,427,417,438,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,456,460,430,464,435,491,473,474],
[428,0,424,457,445,431,432,471,478,434],
[434,466,0,463,454,459,438,474,484,456],
[430,433,427,0,457,431,445,464,484,455],
[460,445,436,433,0,445,416,459,473,468],
[426,459,431,459,445,0,436,477,487,458],
[455,458,452,445,474,454,0,460,497,466],
[399,419,416,426,431,413,430,0,452,447],
[417,412,406,406,417,403,393,438,0,416],
[416,456,434,435,422,432,424,443,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,445,450,449,438,471,450,421,437],
[443,0,438,461,440,455,488,487,472,464],
[445,452,0,464,474,483,502,482,469,471],
[440,429,426,0,447,431,482,440,457,440],
[441,450,416,443,0,423,444,421,421,458],
[452,435,407,459,467,0,478,447,444,468],
[419,402,388,408,446,412,0,417,391,422],
[440,403,408,450,469,443,473,0,438,458],
[469,418,421,433,469,446,499,452,0,459],
[453,426,419,450,432,422,468,432,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,464,441,454,437,482,457,451,458],
[462,0,461,442,442,458,483,471,458,475],
[426,429,0,426,427,413,455,453,425,441],
[449,448,464,0,471,433,471,466,450,477],
[436,448,463,419,0,440,466,449,446,455],
[453,432,477,457,450,0,469,481,452,458],
[408,407,435,419,424,421,0,437,419,417],
[433,419,437,424,441,409,453,0,437,450],
[439,432,465,440,444,438,471,453,0,449],
[432,415,449,413,435,432,473,440,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,468,473,498,467,439,362,456,498],
[449,0,500,405,455,474,401,443,430,422],
[422,390,0,426,409,364,350,374,389,371],
[417,485,464,0,501,388,389,384,403,467],
[392,435,481,389,0,374,401,377,376,428],
[423,416,526,502,516,0,454,442,452,496],
[451,489,540,501,489,436,0,449,460,512],
[528,447,516,506,513,448,441,0,505,514],
[434,460,501,487,514,438,430,385,0,518],
[392,468,519,423,462,394,378,376,372,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,456,435,459,452,444,420,419,462],
[457,0,486,474,468,466,480,447,407,464],
[434,404,0,399,436,415,410,390,381,429],
[455,416,491,0,432,447,448,451,437,458],
[431,422,454,458,0,444,442,424,417,403],
[438,424,475,443,446,0,451,421,428,443],
[446,410,480,442,448,439,0,417,422,438],
[470,443,500,439,466,469,473,0,457,462],
[471,483,509,453,473,462,468,433,0,495],
[428,426,461,432,487,447,452,428,395,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,447,436,420,426,458,436,398,417],
[487,0,471,444,440,466,478,476,455,451],
[443,419,0,410,436,469,437,449,423,427],
[454,446,480,0,459,450,446,461,447,423],
[470,450,454,431,0,473,448,456,449,452],
[464,424,421,440,417,0,421,436,415,409],
[432,412,453,444,442,469,0,470,452,442],
[454,414,441,429,434,454,420,0,432,434],
[492,435,467,443,441,475,438,458,0,446],
[473,439,463,467,438,481,448,456,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,457,447,444,464,452,447,457,468],
[474,0,486,470,440,482,482,467,478,487],
[433,404,0,448,422,430,436,423,438,453],
[443,420,442,0,452,462,451,437,431,454],
[446,450,468,438,0,455,432,448,472,476],
[426,408,460,428,435,0,428,451,432,468],
[438,408,454,439,458,462,0,423,429,468],
[443,423,467,453,442,439,467,0,429,465],
[433,412,452,459,418,458,461,461,0,486],
[422,403,437,436,414,422,422,425,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,444,439,424,441,424,426,420,420],
[442,0,444,451,432,456,437,476,442,430],
[446,446,0,465,442,449,445,469,439,444],
[451,439,425,0,435,429,442,440,425,410],
[466,458,448,455,0,434,434,457,433,426],
[449,434,441,461,456,0,446,455,445,440],
[466,453,445,448,456,444,0,469,422,447],
[464,414,421,450,433,435,421,0,426,423],
[470,448,451,465,457,445,468,464,0,427],
[470,460,446,480,464,450,443,467,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,399,427,415,422,407,427,420,393],
[438,0,395,412,407,404,421,422,415,401],
[491,495,0,457,424,409,487,447,444,444],
[463,478,433,0,470,430,442,413,438,423],
[475,483,466,420,0,467,474,453,436,453],
[468,486,481,460,423,0,460,465,445,459],
[483,469,403,448,416,430,0,429,407,414],
[463,468,443,477,437,425,461,0,435,459],
[470,475,446,452,454,445,483,455,0,452],
[497,489,446,467,437,431,476,431,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,426,470,456,495,476,435,452,441],
[419,0,461,453,444,431,433,464,441,457],
[464,429,0,422,444,455,444,419,447,444],
[420,437,468,0,445,452,468,436,459,449],
[434,446,446,445,0,446,434,418,413,405],
[395,459,435,438,444,0,454,446,450,441],
[414,457,446,422,456,436,0,438,435,430],
[455,426,471,454,472,444,452,0,468,472],
[438,449,443,431,477,440,455,422,0,447],
[449,433,446,441,485,449,460,418,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,484,474,437,501,466,482,498,509],
[443,0,457,460,462,490,455,471,456,480],
[406,433,0,399,419,433,415,444,427,448],
[416,430,491,0,425,465,428,440,445,499],
[453,428,471,465,0,440,438,462,461,500],
[389,400,457,425,450,0,425,414,454,454],
[424,435,475,462,452,465,0,473,483,485],
[408,419,446,450,428,476,417,0,460,479],
[392,434,463,445,429,436,407,430,0,464],
[381,410,442,391,390,436,405,411,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,642,694,593,505,422,525,562,633,670],
[248,0,392,410,238,263,345,339,410,523],
[196,498,0,449,275,293,366,360,351,629],
[297,480,441,0,324,244,509,351,485,508],
[385,652,615,566,0,480,528,466,718,712],
[468,627,597,646,410,0,560,592,608,647],
[365,545,524,381,362,330,0,411,507,488],
[328,551,530,539,424,298,479,0,407,512],
[257,480,539,405,172,282,383,483,0,584],
[220,367,261,382,178,243,402,378,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,455,393,432,458,426,394,428,421],
[480,0,448,466,429,518,460,454,437,455],
[435,442,0,464,440,466,444,425,423,433],
[497,424,426,0,437,468,445,435,436,437],
[458,461,450,453,0,461,439,453,466,431],
[432,372,424,422,429,0,399,435,431,400],
[464,430,446,445,451,491,0,437,445,432],
[496,436,465,455,437,455,453,0,431,441],
[462,453,467,454,424,459,445,459,0,436],
[469,435,457,453,459,490,458,449,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,502,483,509,493,448,486,401,426],
[436,0,522,484,435,510,463,519,457,436],
[388,368,0,449,428,480,406,425,380,362],
[407,406,441,0,385,536,422,479,359,417],
[381,455,462,505,0,482,388,455,382,463],
[397,380,410,354,408,0,378,359,340,345],
[442,427,484,468,502,512,0,400,414,456],
[404,371,465,411,435,531,490,0,405,453],
[489,433,510,531,508,550,476,485,0,417],
[464,454,528,473,427,545,434,437,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,383,435,405,374,357,414,390,424],
[451,0,451,427,481,438,425,480,403,472],
[507,439,0,457,463,454,434,497,478,456],
[455,463,433,0,464,419,458,457,453,457],
[485,409,427,426,0,455,430,460,465,447],
[516,452,436,471,435,0,416,501,450,449],
[533,465,456,432,460,474,0,480,464,463],
[476,410,393,433,430,389,410,0,409,405],
[500,487,412,437,425,440,426,481,0,434],
[466,418,434,433,443,441,427,485,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,422,395,407,428,418,398,436,445],
[480,0,451,429,461,442,459,445,473,442],
[468,439,0,454,460,451,442,442,501,498],
[495,461,436,0,487,477,447,455,495,502],
[483,429,430,403,0,450,472,479,480,466],
[462,448,439,413,440,0,439,428,486,496],
[472,431,448,443,418,451,0,390,493,474],
[492,445,448,435,411,462,500,0,445,458],
[454,417,389,395,410,404,397,445,0,425],
[445,448,392,388,424,394,416,432,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,447,496,471,455,482,471,490,443],
[384,0,399,436,446,416,398,412,437,409],
[443,491,0,491,455,517,468,498,501,493],
[394,454,399,0,440,419,430,460,436,444],
[419,444,435,450,0,429,479,458,460,434],
[435,474,373,471,461,0,464,434,470,451],
[408,492,422,460,411,426,0,460,456,423],
[419,478,392,430,432,456,430,0,455,431],
[400,453,389,454,430,420,434,435,0,431],
[447,481,397,446,456,439,467,459,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,433,427,429,436,422,415,435,449],
[501,0,470,463,472,464,484,442,454,473],
[457,420,0,450,446,433,457,440,425,452],
[463,427,440,0,455,426,442,452,439,459],
[461,418,444,435,0,438,462,426,439,452],
[454,426,457,464,452,0,456,430,434,460],
[468,406,433,448,428,434,0,424,428,461],
[475,448,450,438,464,460,466,0,464,470],
[455,436,465,451,451,456,462,426,0,472],
[441,417,438,431,438,430,429,420,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,454,467,458,465,450,443,446,455],
[417,0,479,461,440,446,447,417,450,434],
[436,411,0,457,425,433,428,413,454,424],
[423,429,433,0,421,467,461,458,460,439],
[432,450,465,469,0,433,448,427,470,419],
[425,444,457,423,457,0,446,430,455,411],
[440,443,462,429,442,444,0,429,466,453],
[447,473,477,432,463,460,461,0,454,450],
[444,440,436,430,420,435,424,436,0,418],
[435,456,466,451,471,479,437,440,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,460,455,440,471,465,445,473,472],
[437,0,460,445,472,481,453,469,471,472],
[430,430,0,456,448,467,452,437,469,459],
[435,445,434,0,443,472,462,426,460,449],
[450,418,442,447,0,452,460,438,444,428],
[419,409,423,418,438,0,409,404,441,438],
[425,437,438,428,430,481,0,418,451,457],
[445,421,453,464,452,486,472,0,463,452],
[417,419,421,430,446,449,439,427,0,447],
[418,418,431,441,462,452,433,438,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,538,190,269,516,322,463,456,457],
[447,0,396,430,349,534,321,445,436,594],
[352,494,0,451,404,512,348,395,540,543],
[700,460,439,0,454,628,369,434,398,495],
[621,541,486,436,0,581,522,468,537,625],
[374,356,378,262,309,0,337,376,361,377],
[568,569,542,521,368,553,0,430,438,521],
[427,445,495,456,422,514,460,0,450,609],
[434,454,350,492,353,529,452,440,0,552],
[433,296,347,395,265,513,369,281,338,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,533,364,407,494,406,422,430,464],
[459,0,544,428,396,434,418,431,479,434],
[357,346,0,326,344,470,378,508,412,391],
[526,462,564,0,486,563,468,538,377,474],
[483,494,546,404,0,432,476,448,429,386],
[396,456,420,327,458,0,498,368,414,388],
[484,472,512,422,414,392,0,517,380,522],
[468,459,382,352,442,522,373,0,371,438],
[460,411,478,513,461,476,510,519,0,565],
[426,456,499,416,504,502,368,452,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,418,440,418,420,435,423,439,427],
[460,0,463,457,451,463,428,448,437,465],
[472,427,0,458,423,464,430,432,454,457],
[450,433,432,0,418,458,434,451,432,443],
[472,439,467,472,0,451,444,494,463,476],
[470,427,426,432,439,0,451,443,448,437],
[455,462,460,456,446,439,0,468,461,474],
[467,442,458,439,396,447,422,0,446,448],
[451,453,436,458,427,442,429,444,0,456],
[463,425,433,447,414,453,416,442,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,456,446,459,460,451,457,452,429],
[437,0,451,446,463,446,450,465,442,442],
[434,439,0,450,444,436,440,447,425,429],
[444,444,440,0,464,428,416,457,420,422],
[431,427,446,426,0,440,437,445,433,432],
[430,444,454,462,450,0,435,457,440,454],
[439,440,450,474,453,455,0,456,438,442],
[433,425,443,433,445,433,434,0,452,427],
[438,448,465,470,457,450,452,438,0,450],
[461,448,461,468,458,436,448,463,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,443,443,476,454,450,452,453,442],
[437,0,443,447,477,444,425,447,449,449],
[447,447,0,449,464,438,448,457,453,439],
[447,443,441,0,459,471,433,472,476,444],
[414,413,426,431,0,429,425,443,437,431],
[436,446,452,419,461,0,445,450,444,430],
[440,465,442,457,465,445,0,456,470,455],
[438,443,433,418,447,440,434,0,440,429],
[437,441,437,414,453,446,420,450,0,447],
[448,441,451,446,459,460,435,461,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,388,412,451,452,449,435,464,405,405],
[502,0,475,479,472,498,479,442,439,460],
[478,415,0,399,445,438,457,442,470,495],
[439,411,491,0,457,460,419,396,443,419],
[438,418,445,433,0,447,480,462,431,436],
[441,392,452,430,443,0,438,407,474,421],
[455,411,433,471,410,452,0,437,425,423],
[426,448,448,494,428,483,453,0,445,414],
[485,451,420,447,459,416,465,445,0,430],
[485,430,395,471,454,469,467,476,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,440,446,441,469,477,465,482,468],
[412,0,414,402,403,425,407,405,445,426],
[450,476,0,427,434,465,442,462,468,455],
[444,488,463,0,441,459,468,490,466,459],
[449,487,456,449,0,461,477,494,476,445],
[421,465,425,431,429,0,457,454,439,443],
[413,483,448,422,413,433,0,429,451,445],
[425,485,428,400,396,436,461,0,450,438],
[408,445,422,424,414,451,439,440,0,446],
[422,464,435,431,445,447,445,452,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,403,446,431,432,458,439,468,421],
[423,0,424,411,424,448,417,406,450,404],
[487,466,0,468,431,473,462,447,492,404],
[444,479,422,0,424,456,455,421,454,412],
[459,466,459,466,0,445,461,425,478,451],
[458,442,417,434,445,0,456,434,459,437],
[432,473,428,435,429,434,0,422,448,438],
[451,484,443,469,465,456,468,0,492,436],
[422,440,398,436,412,431,442,398,0,421],
[469,486,486,478,439,453,452,454,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,491,479,453,458,472,456,478,436],
[441,0,443,421,432,433,447,446,444,451],
[399,447,0,428,428,421,454,440,432,411],
[411,469,462,0,444,444,485,463,443,442],
[437,458,462,446,0,461,436,461,420,449],
[432,457,469,446,429,0,455,470,439,452],
[418,443,436,405,454,435,0,420,424,429],
[434,444,450,427,429,420,470,0,464,423],
[412,446,458,447,470,451,466,426,0,441],
[454,439,479,448,441,438,461,467,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,454,462,437,464,459,454,466,435],
[438,0,442,426,436,438,457,439,453,433],
[436,448,0,463,426,450,445,449,441,441],
[428,464,427,0,438,428,400,474,440,459],
[453,454,464,452,0,422,437,453,484,447],
[426,452,440,462,468,0,458,448,490,461],
[431,433,445,490,453,432,0,445,454,436],
[436,451,441,416,437,442,445,0,466,446],
[424,437,449,450,406,400,436,424,0,407],
[455,457,449,431,443,429,454,444,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,446,430,452,457,435,422,436,437],
[429,0,446,435,443,442,439,426,432,447],
[444,444,0,447,463,447,467,429,463,452],
[460,455,443,0,422,433,459,415,454,454],
[438,447,427,468,0,448,433,424,425,461],
[433,448,443,457,442,0,420,407,444,440],
[455,451,423,431,457,470,0,457,436,428],
[468,464,461,475,466,483,433,0,432,445],
[454,458,427,436,465,446,454,458,0,439],
[453,443,438,436,429,450,462,445,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,473,460,463,442,428,442,445,440],
[445,0,439,436,416,411,392,456,414,400],
[417,451,0,430,447,431,421,431,427,411],
[430,454,460,0,445,447,433,460,442,426],
[427,474,443,445,0,435,422,448,419,399],
[448,479,459,443,455,0,412,447,429,433],
[462,498,469,457,468,478,0,477,447,432],
[448,434,459,430,442,443,413,0,416,411],
[445,476,463,448,471,461,443,474,0,464],
[450,490,479,464,491,457,458,479,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,486,530,461,473,515,462,490,534],
[457,0,419,456,443,448,446,440,408,479],
[404,471,0,492,452,462,496,426,453,533],
[360,434,398,0,400,415,437,418,401,440],
[429,447,438,490,0,462,493,450,455,510],
[417,442,428,475,428,0,460,413,435,477],
[375,444,394,453,397,430,0,369,402,474],
[428,450,464,472,440,477,521,0,422,520],
[400,482,437,489,435,455,488,468,0,495],
[356,411,357,450,380,413,416,370,395,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,359,375,481,435,460,503,428,370],
[431,0,487,366,474,476,470,512,440,356],
[531,403,0,436,420,478,432,528,401,363],
[515,524,454,0,488,470,477,554,425,403],
[409,416,470,402,0,470,481,507,491,446],
[455,414,412,420,420,0,483,523,507,376],
[430,420,458,413,409,407,0,535,411,395],
[387,378,362,336,383,367,355,0,336,320],
[462,450,489,465,399,383,479,554,0,364],
[520,534,527,487,444,514,495,570,526,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,449,435,450,472,549,506,413,508],
[398,0,493,463,407,417,520,512,441,437],
[441,397,0,501,438,461,561,423,449,476],
[455,427,389,0,430,422,541,413,400,468],
[440,483,452,460,0,493,541,472,474,484],
[418,473,429,468,397,0,562,437,391,447],
[341,370,329,349,349,328,0,372,370,415],
[384,378,467,477,418,453,518,0,370,456],
[477,449,441,490,416,499,520,520,0,486],
[382,453,414,422,406,443,475,434,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,546,507,486,512,468,463,455,497],
[453,0,476,399,450,428,455,443,441,454],
[344,414,0,367,444,405,402,402,336,391],
[383,491,523,0,446,462,438,451,441,443],
[404,440,446,444,0,477,429,466,388,447],
[378,462,485,428,413,0,424,415,448,400],
[422,435,488,452,461,466,0,416,401,464],
[427,447,488,439,424,475,474,0,457,432],
[435,449,554,449,502,442,489,433,0,483],
[393,436,499,447,443,490,426,458,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,422,450,439,464,438,456,478,431],
[418,0,394,391,411,414,403,394,403,379],
[468,496,0,457,456,448,448,453,477,433],
[440,499,433,0,465,491,466,451,445,423],
[451,479,434,425,0,419,431,438,456,419],
[426,476,442,399,471,0,461,467,443,449],
[452,487,442,424,459,429,0,455,466,436],
[434,496,437,439,452,423,435,0,452,457],
[412,487,413,445,434,447,424,438,0,433],
[459,511,457,467,471,441,454,433,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,404,395,470,385,506,369,386,436],
[448,0,406,399,456,433,479,425,454,431],
[486,484,0,445,506,432,500,493,447,534],
[495,491,445,0,543,455,552,498,467,470],
[420,434,384,347,0,385,450,378,434,374],
[505,457,458,435,505,0,540,500,414,464],
[384,411,390,338,440,350,0,393,403,359],
[521,465,397,392,512,390,497,0,460,474],
[504,436,443,423,456,476,487,430,0,516],
[454,459,356,420,516,426,531,416,374,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,453,441,424,408,465,403,406,425],
[438,0,491,435,441,375,433,392,422,361],
[437,399,0,429,456,371,424,354,357,374],
[449,455,461,0,395,384,477,423,435,390],
[466,449,434,495,0,411,459,483,389,407],
[482,515,519,506,479,0,480,418,494,467],
[425,457,466,413,431,410,0,455,404,419],
[487,498,536,467,407,472,435,0,448,447],
[484,468,533,455,501,396,486,442,0,436],
[465,529,516,500,483,423,471,443,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,420,425,454,413,434,455,422,415],
[405,0,382,417,398,391,384,404,382,396],
[470,508,0,458,441,450,467,458,476,459],
[465,473,432,0,449,437,396,445,410,458],
[436,492,449,441,0,452,422,457,474,452],
[477,499,440,453,438,0,435,500,441,472],
[456,506,423,494,468,455,0,450,467,429],
[435,486,432,445,433,390,440,0,429,440],
[468,508,414,480,416,449,423,461,0,452],
[475,494,431,432,438,418,461,450,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,450,446,424,415,441,427,425,433],
[463,0,471,445,417,434,471,452,438,461],
[440,419,0,435,422,411,430,428,438,465],
[444,445,455,0,438,438,456,441,446,434],
[466,473,468,452,0,442,469,462,456,447],
[475,456,479,452,448,0,456,463,459,445],
[449,419,460,434,421,434,0,457,453,446],
[463,438,462,449,428,427,433,0,455,436],
[465,452,452,444,434,431,437,435,0,449],
[457,429,425,456,443,445,444,454,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,459,416,441,463,445,458,448,458],
[433,0,449,447,439,440,438,443,453,446],
[431,441,0,438,465,472,445,443,471,461],
[474,443,452,0,444,462,452,462,471,456],
[449,451,425,446,0,464,451,451,466,472],
[427,450,418,428,426,0,417,410,448,437],
[445,452,445,438,439,473,0,453,457,449],
[432,447,447,428,439,480,437,0,477,447],
[442,437,419,419,424,442,433,413,0,445],
[432,444,429,434,418,453,441,443,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,503,494,412,464,436,443,447,454],
[450,0,506,504,438,537,500,495,463,446],
[387,384,0,479,477,485,441,468,420,454],
[396,386,411,0,418,445,420,416,410,412],
[478,452,413,472,0,526,458,477,489,492],
[426,353,405,445,364,0,481,446,440,393],
[454,390,449,470,432,409,0,442,426,441],
[447,395,422,474,413,444,448,0,436,463],
[443,427,470,480,401,450,464,454,0,424],
[436,444,436,478,398,497,449,427,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,460,461,441,409,464,456,479,465],
[443,0,444,444,411,418,428,432,450,451],
[430,446,0,442,451,424,453,447,462,441],
[429,446,448,0,421,411,433,438,462,469],
[449,479,439,469,0,460,468,473,486,479],
[481,472,466,479,430,0,444,475,492,481],
[426,462,437,457,422,446,0,457,472,442],
[434,458,443,452,417,415,433,0,472,430],
[411,440,428,428,404,398,418,418,0,435],
[425,439,449,421,411,409,448,460,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,477,437,439,443,445,466,468,434],
[437,0,480,461,449,459,446,449,450,478],
[413,410,0,449,401,401,414,429,424,432],
[453,429,441,0,419,435,459,457,434,454],
[451,441,489,471,0,463,445,477,448,425],
[447,431,489,455,427,0,455,438,436,441],
[445,444,476,431,445,435,0,458,445,434],
[424,441,461,433,413,452,432,0,408,428],
[422,440,466,456,442,454,445,482,0,455],
[456,412,458,436,465,449,456,462,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,394,372,404,399,408,393,359,418,406],
[496,0,474,457,467,428,458,460,440,444],
[518,416,0,442,401,473,437,426,462,432],
[486,433,448,0,445,403,415,424,447,443],
[491,423,489,445,0,447,441,449,480,444],
[482,462,417,487,443,0,421,414,444,426],
[497,432,453,475,449,469,0,410,431,433],
[531,430,464,466,441,476,480,0,510,458],
[472,450,428,443,410,446,459,380,0,420],
[484,446,458,447,446,464,457,432,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,405,390,429,438,401,409,424,385],
[426,0,453,371,455,437,439,419,475,446],
[485,437,0,449,494,436,448,475,564,434],
[500,519,441,0,451,486,478,466,544,432],
[461,435,396,439,0,455,400,471,435,363],
[452,453,454,404,435,0,448,448,490,444],
[489,451,442,412,490,442,0,408,539,448],
[481,471,415,424,419,442,482,0,469,438],
[466,415,326,346,455,400,351,421,0,330],
[505,444,456,458,527,446,442,452,560,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,468,470,456,449,456,439,446,449],
[430,0,405,438,437,437,435,421,440,424],
[422,485,0,461,474,464,447,431,433,447],
[420,452,429,0,442,457,447,435,429,427],
[434,453,416,448,0,442,428,440,437,443],
[441,453,426,433,448,0,453,432,421,447],
[434,455,443,443,462,437,0,426,424,419],
[451,469,459,455,450,458,464,0,444,454],
[444,450,457,461,453,469,466,446,0,432],
[441,466,443,463,447,443,471,436,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,452,420,443,448,443,454,444,446],
[463,0,460,419,451,429,437,448,424,453],
[438,430,0,423,432,447,426,452,427,457],
[470,471,467,0,449,440,452,478,446,455],
[447,439,458,441,0,445,443,468,450,447],
[442,461,443,450,445,0,446,460,448,471],
[447,453,464,438,447,444,0,469,447,461],
[436,442,438,412,422,430,421,0,436,429],
[446,466,463,444,440,442,443,454,0,472],
[444,437,433,435,443,419,429,461,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,438,414,405,414,409,434,419,466],
[450,0,447,444,423,451,414,438,427,465],
[452,443,0,425,416,447,408,437,441,439],
[476,446,465,0,433,453,433,459,449,465],
[485,467,474,457,0,460,446,456,444,474],
[476,439,443,437,430,0,403,441,421,441],
[481,476,482,457,444,487,0,447,470,486],
[456,452,453,431,434,449,443,0,444,464],
[471,463,449,441,446,469,420,446,0,462],
[424,425,451,425,416,449,404,426,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,463,455,461,457,461,457,459,431],
[430,0,450,478,448,455,473,461,466,449],
[427,440,0,453,441,433,452,451,427,410],
[435,412,437,0,428,442,457,447,434,447],
[429,442,449,462,0,459,481,448,450,441],
[433,435,457,448,431,0,458,466,439,427],
[429,417,438,433,409,432,0,430,438,401],
[433,429,439,443,442,424,460,0,449,427],
[431,424,463,456,440,451,452,441,0,421],
[459,441,480,443,449,463,489,463,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,462,461,460,460,457,462,445,451],
[407,0,439,461,435,450,458,432,414,425],
[428,451,0,465,458,444,471,439,440,442],
[429,429,425,0,436,430,473,433,417,430],
[430,455,432,454,0,456,458,441,452,447],
[430,440,446,460,434,0,464,423,422,435],
[433,432,419,417,432,426,0,419,416,437],
[428,458,451,457,449,467,471,0,434,467],
[445,476,450,473,438,468,474,456,0,470],
[439,465,448,460,443,455,453,423,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,463,445,447,445,451,480,468,482],
[434,0,454,489,427,471,465,449,483,456],
[427,436,0,472,439,449,426,440,453,459],
[445,401,418,0,431,452,421,417,399,432],
[443,463,451,459,0,446,435,468,420,449],
[445,419,441,438,444,0,434,439,429,452],
[439,425,464,469,455,456,0,441,411,424],
[410,441,450,473,422,451,449,0,436,436],
[422,407,437,491,470,461,479,454,0,460],
[408,434,431,458,441,438,466,454,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,361,521,594,388,409,459,507,257],
[466,0,429,562,477,626,428,457,384,359],
[529,461,0,616,418,462,545,574,490,445],
[369,328,274,0,268,391,376,413,512,170],
[296,413,472,622,0,413,463,571,398,297],
[502,264,428,499,477,0,512,543,390,337],
[481,462,345,514,427,378,0,475,489,489],
[431,433,316,477,319,347,415,0,472,440],
[383,506,400,378,492,500,401,418,0,384],
[633,531,445,720,593,553,401,450,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,446,440,473,467,453,443,438,454],
[444,0,421,424,432,435,399,408,419,408],
[444,469,0,436,458,443,431,430,413,451],
[450,466,454,0,462,458,412,440,433,451],
[417,458,432,428,0,439,415,414,415,436],
[423,455,447,432,451,0,406,421,429,435],
[437,491,459,478,475,484,0,442,447,463],
[447,482,460,450,476,469,448,0,435,456],
[452,471,477,457,475,461,443,455,0,461],
[436,482,439,439,454,455,427,434,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,467,459,480,458,479,442,474,454],
[436,0,447,472,442,435,434,446,463,464],
[423,443,0,436,430,432,426,438,455,416],
[431,418,454,0,491,460,439,456,451,411],
[410,448,460,399,0,429,404,407,456,426],
[432,455,458,430,461,0,419,443,466,421],
[411,456,464,451,486,471,0,460,444,443],
[448,444,452,434,483,447,430,0,485,434],
[416,427,435,439,434,424,446,405,0,425],
[436,426,474,479,464,469,447,456,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,450,441,478,479,474,477,469,472],
[422,0,409,436,459,423,443,455,435,450],
[440,481,0,449,477,490,476,482,473,478],
[449,454,441,0,473,485,469,470,451,467],
[412,431,413,417,0,445,457,444,442,407],
[411,467,400,405,445,0,442,445,430,438],
[416,447,414,421,433,448,0,425,432,438],
[413,435,408,420,446,445,465,0,467,439],
[421,455,417,439,448,460,458,423,0,431],
[418,440,412,423,483,452,452,451,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,420,456,425,481,469,466,433,448],
[463,0,427,411,459,490,437,438,423,420],
[470,463,0,451,453,481,464,436,450,451],
[434,479,439,0,466,504,488,461,467,456],
[465,431,437,424,0,465,452,479,449,420],
[409,400,409,386,425,0,416,419,409,424],
[421,453,426,402,438,474,0,448,451,436],
[424,452,454,429,411,471,442,0,435,415],
[457,467,440,423,441,481,439,455,0,445],
[442,470,439,434,470,466,454,475,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,422,450,433,452,445,445,442,443],
[411,0,435,444,438,423,447,441,424,444],
[468,455,0,466,437,450,465,467,438,447],
[440,446,424,0,430,439,470,436,429,450],
[457,452,453,460,0,442,440,443,450,454],
[438,467,440,451,448,0,458,437,423,444],
[445,443,425,420,450,432,0,415,420,436],
[445,449,423,454,447,453,475,0,458,437],
[448,466,452,461,440,467,470,432,0,445],
[447,446,443,440,436,446,454,453,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,459,450,462,443,449,435,458,498],
[480,0,478,464,483,483,481,444,454,491],
[431,412,0,452,466,441,428,433,438,424],
[440,426,438,0,416,440,420,420,427,446],
[428,407,424,474,0,446,447,424,421,465],
[447,407,449,450,444,0,466,418,422,433],
[441,409,462,470,443,424,0,415,406,436],
[455,446,457,470,466,472,475,0,433,467],
[432,436,452,463,469,468,484,457,0,458],
[392,399,466,444,425,457,454,423,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,435,441,447,405,370,419,450,359],
[415,0,492,470,418,458,432,429,445,443],
[455,398,0,435,385,436,412,394,470,446],
[449,420,455,0,405,441,419,437,442,389],
[443,472,505,485,0,452,435,414,453,459],
[485,432,454,449,438,0,455,430,475,460],
[520,458,478,471,455,435,0,464,499,434],
[471,461,496,453,476,460,426,0,467,419],
[440,445,420,448,437,415,391,423,0,415],
[531,447,444,501,431,430,456,471,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,484,430,470,462,484,447,464,477],
[448,0,466,472,497,427,458,466,469,435],
[406,424,0,436,562,469,490,430,491,371],
[460,418,454,0,487,411,468,418,464,395],
[420,393,328,403,0,341,427,372,378,343],
[428,463,421,479,549,0,564,451,506,399],
[406,432,400,422,463,326,0,419,383,358],
[443,424,460,472,518,439,471,0,452,441],
[426,421,399,426,512,384,507,438,0,366],
[413,455,519,495,547,491,532,449,524,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,458,419,424,461,440,409,421,464],
[444,0,423,417,422,482,446,427,449,448],
[432,467,0,396,433,463,447,431,440,446],
[471,473,494,0,473,514,470,441,476,493],
[466,468,457,417,0,505,451,445,435,484],
[429,408,427,376,385,0,410,403,408,417],
[450,444,443,420,439,480,0,428,427,479],
[481,463,459,449,445,487,462,0,427,471],
[469,441,450,414,455,482,463,463,0,475],
[426,442,444,397,406,473,411,419,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,460,459,447,453,464,443,472,440],
[428,0,441,417,431,432,423,446,471,411],
[430,449,0,450,427,456,440,424,473,422],
[431,473,440,0,450,455,464,458,475,442],
[443,459,463,440,0,466,464,435,468,444],
[437,458,434,435,424,0,462,449,463,452],
[426,467,450,426,426,428,0,449,454,444],
[447,444,466,432,455,441,441,0,474,451],
[418,419,417,415,422,427,436,416,0,423],
[450,479,468,448,446,438,446,439,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,436,460,441,450,439,466,465,464],
[416,0,428,448,449,444,430,483,469,454],
[454,462,0,447,426,467,452,473,473,454],
[430,442,443,0,434,460,446,463,473,463],
[449,441,464,456,0,460,446,468,480,460],
[440,446,423,430,430,0,429,435,449,446],
[451,460,438,444,444,461,0,472,490,458],
[424,407,417,427,422,455,418,0,442,435],
[425,421,417,417,410,441,400,448,0,439],
[426,436,436,427,430,444,432,455,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,446,457,447,447,456,445,449,434],
[436,0,423,423,436,444,445,449,419,453],
[444,467,0,449,460,457,464,447,459,451],
[433,467,441,0,450,450,445,433,429,448],
[443,454,430,440,0,432,447,434,447,437],
[443,446,433,440,458,0,431,432,437,436],
[434,445,426,445,443,459,0,446,429,433],
[445,441,443,457,456,458,444,0,438,444],
[441,471,431,461,443,453,461,452,0,434],
[456,437,439,442,453,454,457,446,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,495,498,517,523,501,528,472,432],
[428,0,458,587,506,533,541,588,492,494],
[395,432,0,556,497,505,410,496,467,424],
[392,303,334,0,399,383,410,404,380,292],
[373,384,393,491,0,446,391,474,440,381],
[367,357,385,507,444,0,403,473,437,368],
[389,349,480,480,499,487,0,483,407,443],
[362,302,394,486,416,417,407,0,390,370],
[418,398,423,510,450,453,483,500,0,360],
[458,396,466,598,509,522,447,520,530,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,471,447,495,437,489,459,427,450],
[386,0,444,426,443,442,410,385,404,416],
[419,446,0,457,448,439,465,450,399,450],
[443,464,433,0,449,412,451,425,434,459],
[395,447,442,441,0,437,451,428,435,448],
[453,448,451,478,453,0,463,438,457,437],
[401,480,425,439,439,427,0,400,419,445],
[431,505,440,465,462,452,490,0,442,471],
[463,486,491,456,455,433,471,448,0,471],
[440,474,440,431,442,453,445,419,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,462,446,447,438,479,440,464,426],
[449,0,468,447,462,464,482,436,478,469],
[428,422,0,416,422,441,479,461,459,447],
[444,443,474,0,466,443,483,437,455,447],
[443,428,468,424,0,422,495,437,453,465],
[452,426,449,447,468,0,493,467,463,447],
[411,408,411,407,395,397,0,409,432,447],
[450,454,429,453,453,423,481,0,444,446],
[426,412,431,435,437,427,458,446,0,441],
[464,421,443,443,425,443,443,444,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,463,456,455,448,451,456,448,434],
[449,0,444,468,459,455,448,429,451,453],
[427,446,0,452,426,425,441,419,436,419],
[434,422,438,0,428,435,435,421,446,419],
[435,431,464,462,0,430,441,440,455,442],
[442,435,465,455,460,0,446,433,449,453],
[439,442,449,455,449,444,0,443,443,449],
[434,461,471,469,450,457,447,0,436,438],
[442,439,454,444,435,441,447,454,0,444],
[456,437,471,471,448,437,441,452,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,465,414,506,414,552,416,432,459],
[450,0,457,402,435,393,456,415,461,362],
[425,433,0,454,440,450,460,426,503,376],
[476,488,436,0,506,451,511,464,495,383],
[384,455,450,384,0,362,508,356,459,412],
[476,497,440,439,528,0,580,423,493,478],
[338,434,430,379,382,310,0,375,458,377],
[474,475,464,426,534,467,515,0,483,475],
[458,429,387,395,431,397,432,407,0,366],
[431,528,514,507,478,412,513,415,524,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,449,441,441,448,489,414,477,471],
[461,0,449,454,471,471,485,453,444,464],
[441,441,0,465,458,458,458,410,416,464],
[449,436,425,0,431,442,450,428,436,471],
[449,419,432,459,0,462,477,457,442,445],
[442,419,432,448,428,0,435,429,457,439],
[401,405,432,440,413,455,0,404,421,471],
[476,437,480,462,433,461,486,0,478,467],
[413,446,474,454,448,433,469,412,0,456],
[419,426,426,419,445,451,419,423,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,447,451,469,459,430,465,451,505],
[438,0,457,457,475,461,458,459,447,453],
[443,433,0,421,463,451,428,468,434,477],
[439,433,469,0,458,436,437,452,418,487],
[421,415,427,432,0,418,423,455,437,445],
[431,429,439,454,472,0,431,450,430,455],
[460,432,462,453,467,459,0,455,430,467],
[425,431,422,438,435,440,435,0,410,454],
[439,443,456,472,453,460,460,480,0,480],
[385,437,413,403,445,435,423,436,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,438,450,445,456,456,444,443,449],
[432,0,419,435,395,445,437,413,415,426],
[452,471,0,456,440,456,460,443,443,453],
[440,455,434,0,426,431,455,442,445,419],
[445,495,450,464,0,463,466,445,448,443],
[434,445,434,459,427,0,459,442,424,437],
[434,453,430,435,424,431,0,426,426,427],
[446,477,447,448,445,448,464,0,443,456],
[447,475,447,445,442,466,464,447,0,466],
[441,464,437,471,447,453,463,434,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,404,445,412,390,421,427,423,386],
[487,0,436,504,469,446,462,469,467,471],
[486,454,0,453,449,465,434,444,470,450],
[445,386,437,0,412,412,411,427,443,431],
[478,421,441,478,0,446,442,446,444,434],
[500,444,425,478,444,0,480,459,459,456],
[469,428,456,479,448,410,0,457,461,462],
[463,421,446,463,444,431,433,0,431,446],
[467,423,420,447,446,431,429,459,0,436],
[504,419,440,459,456,434,428,444,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,447,434,444,446,446,427,443,447],
[437,0,448,429,466,455,442,446,445,444],
[443,442,0,399,431,434,444,426,419,425],
[456,461,491,0,462,471,469,443,454,452],
[446,424,459,428,0,442,449,421,425,428],
[444,435,456,419,448,0,453,444,440,436],
[444,448,446,421,441,437,0,433,428,417],
[463,444,464,447,469,446,457,0,435,454],
[447,445,471,436,465,450,462,455,0,441],
[443,446,465,438,462,454,473,436,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,444,460,454,447,439,482,457,454],
[437,0,443,438,482,453,430,441,441,421],
[446,447,0,450,457,441,436,467,451,466],
[430,452,440,0,468,420,452,480,446,450],
[436,408,433,422,0,441,399,453,429,439],
[443,437,449,470,449,0,431,451,451,469],
[451,460,454,438,491,459,0,466,483,461],
[408,449,423,410,437,439,424,0,442,442],
[433,449,439,444,461,439,407,448,0,439],
[436,469,424,440,451,421,429,448,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,458,446,462,420,410,442,428,423],
[444,0,430,442,443,427,435,431,430,427],
[432,460,0,430,419,423,419,436,433,411],
[444,448,460,0,440,414,462,420,444,436],
[428,447,471,450,0,426,432,397,430,447],
[470,463,467,476,464,0,432,439,437,457],
[480,455,471,428,458,458,0,429,453,458],
[448,459,454,470,493,451,461,0,444,451],
[462,460,457,446,460,453,437,446,0,432],
[467,463,479,454,443,433,432,439,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,424,532,382,431,387,467,415,462],
[407,0,449,571,390,383,446,395,457,493],
[466,441,0,539,413,459,441,387,365,507],
[358,319,351,0,301,306,389,351,333,437],
[508,500,477,589,0,427,407,543,475,508],
[459,507,431,584,463,0,486,555,454,547],
[503,444,449,501,483,404,0,469,485,519],
[423,495,503,539,347,335,421,0,424,535],
[475,433,525,557,415,436,405,466,0,454],
[428,397,383,453,382,343,371,355,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,448,447,445,456,437,424,444,422],
[437,0,463,425,430,424,431,443,438,424],
[442,427,0,446,440,444,419,431,441,397],
[443,465,444,0,421,444,430,429,443,410],
[445,460,450,469,0,457,444,452,458,425],
[434,466,446,446,433,0,420,416,441,420],
[453,459,471,460,446,470,0,432,482,461],
[466,447,459,461,438,474,458,0,447,454],
[446,452,449,447,432,449,408,443,0,420],
[468,466,493,480,465,470,429,436,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,417,418,411,463,452,418,438,455],
[446,0,434,409,422,461,416,430,438,454],
[473,456,0,413,427,449,454,411,440,451],
[472,481,477,0,447,480,444,453,470,510],
[479,468,463,443,0,466,472,448,486,473],
[427,429,441,410,424,0,458,422,453,436],
[438,474,436,446,418,432,0,411,443,464],
[472,460,479,437,442,468,479,0,485,500],
[452,452,450,420,404,437,447,405,0,455],
[435,436,439,380,417,454,426,390,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,415,383,407,410,396,456,454,388],
[480,0,450,424,469,445,472,458,490,438],
[475,440,0,402,436,372,453,428,465,424],
[507,466,488,0,496,449,481,443,493,455],
[483,421,454,394,0,396,391,410,442,403],
[480,445,518,441,494,0,457,469,488,433],
[494,418,437,409,499,433,0,424,447,393],
[434,432,462,447,480,421,466,0,482,380],
[436,400,425,397,448,402,443,408,0,422],
[502,452,466,435,487,457,497,510,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,453,447,437,430,431,414,442,437],
[436,0,463,458,456,411,426,447,431,434],
[437,427,0,464,454,414,447,434,442,455],
[443,432,426,0,426,404,407,427,412,418],
[453,434,436,464,0,426,408,433,457,435],
[460,479,476,486,464,0,415,435,453,477],
[459,464,443,483,482,475,0,469,463,477],
[476,443,456,463,457,455,421,0,462,477],
[448,459,448,478,433,437,427,428,0,443],
[453,456,435,472,455,413,413,413,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,453,496,507,424,564,460,500,465],
[413,0,421,456,424,453,483,421,443,449],
[437,469,0,436,374,402,459,414,425,448],
[394,434,454,0,462,453,476,389,454,423],
[383,466,516,428,0,447,516,436,452,486],
[466,437,488,437,443,0,474,474,472,454],
[326,407,431,414,374,416,0,372,435,440],
[430,469,476,501,454,416,518,0,496,467],
[390,447,465,436,438,418,455,394,0,422],
[425,441,442,467,404,436,450,423,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,439,428,459,449,441,451,452,463],
[435,0,450,416,466,437,431,460,479,450],
[451,440,0,445,476,402,414,438,466,466],
[462,474,445,0,469,453,438,450,475,454],
[431,424,414,421,0,419,431,427,447,442],
[441,453,488,437,471,0,449,458,458,459],
[449,459,476,452,459,441,0,468,467,479],
[439,430,452,440,463,432,422,0,448,470],
[438,411,424,415,443,432,423,442,0,439],
[427,440,424,436,448,431,411,420,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,445,404,433,418,443,436,443,452],
[437,0,432,432,415,412,436,440,414,428],
[445,458,0,426,420,436,427,447,439,439],
[486,458,464,0,435,434,450,467,439,441],
[457,475,470,455,0,425,467,455,457,456],
[472,478,454,456,465,0,467,487,474,435],
[447,454,463,440,423,423,0,435,452,432],
[454,450,443,423,435,403,455,0,435,446],
[447,476,451,451,433,416,438,455,0,453],
[438,462,451,449,434,455,458,444,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,463,462,432,486,478,423,452,489],
[433,0,474,416,410,467,461,467,431,451],
[427,416,0,410,427,447,416,406,420,408],
[428,474,480,0,421,477,486,421,441,438],
[458,480,463,469,0,486,466,437,478,455],
[404,423,443,413,404,0,474,416,401,415],
[412,429,474,404,424,416,0,405,404,467],
[467,423,484,469,453,474,485,0,449,471],
[438,459,470,449,412,489,486,441,0,479],
[401,439,482,452,435,475,423,419,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,440,466,519,458,468,470,446,448],
[442,0,460,448,439,405,446,432,432,425],
[450,430,0,463,496,428,450,407,432,441],
[424,442,427,0,485,449,446,402,438,432],
[371,451,394,405,0,386,380,398,419,406],
[432,485,462,441,504,0,472,434,445,458],
[422,444,440,444,510,418,0,408,439,419],
[420,458,483,488,492,456,482,0,443,447],
[444,458,458,452,471,445,451,447,0,426],
[442,465,449,458,484,432,471,443,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,469,462,457,460,441,444,471,470],
[450,0,443,449,465,457,460,442,473,486],
[421,447,0,459,483,445,455,425,441,447],
[428,441,431,0,463,431,425,435,472,419],
[433,425,407,427,0,414,403,424,428,425],
[430,433,445,459,476,0,431,431,445,430],
[449,430,435,465,487,459,0,455,472,461],
[446,448,465,455,466,459,435,0,439,456],
[419,417,449,418,462,445,418,451,0,449],
[420,404,443,471,465,460,429,434,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,430,464,463,442,477,429,449,471],
[453,0,439,463,466,459,460,419,433,464],
[460,451,0,452,487,449,472,441,445,477],
[426,427,438,0,448,433,448,438,418,468],
[427,424,403,442,0,424,445,415,423,439],
[448,431,441,457,466,0,440,444,438,465],
[413,430,418,442,445,450,0,416,428,437],
[461,471,449,452,475,446,474,0,445,473],
[441,457,445,472,467,452,462,445,0,476],
[419,426,413,422,451,425,453,417,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,384,449,436,395,437,426,413,424],
[467,0,430,466,459,447,451,410,458,417],
[506,460,0,476,465,407,459,441,477,464],
[441,424,414,0,443,409,439,420,442,448],
[454,431,425,447,0,387,438,402,438,427],
[495,443,483,481,503,0,428,474,473,477],
[453,439,431,451,452,462,0,440,488,453],
[464,480,449,470,488,416,450,0,463,435],
[477,432,413,448,452,417,402,427,0,465],
[466,473,426,442,463,413,437,455,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,466,533,511,424,507,454,476,518],
[401,0,416,424,422,379,448,402,407,509],
[424,474,0,484,485,500,486,442,479,497],
[357,466,406,0,418,385,428,411,409,462],
[379,468,405,472,0,428,411,419,444,460],
[466,511,390,505,462,0,477,477,471,530],
[383,442,404,462,479,413,0,414,446,469],
[436,488,448,479,471,413,476,0,424,514],
[414,483,411,481,446,419,444,466,0,469],
[372,381,393,428,430,360,421,376,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,429,445,426,444,413,461,448,427],
[451,0,427,457,453,513,444,476,436,439],
[461,463,0,485,439,483,459,486,450,480],
[445,433,405,0,432,468,427,441,433,444],
[464,437,451,458,0,463,453,453,441,471],
[446,377,407,422,427,0,407,437,425,419],
[477,446,431,463,437,483,0,457,444,444],
[429,414,404,449,437,453,433,0,429,440],
[442,454,440,457,449,465,446,461,0,470],
[463,451,410,446,419,471,446,450,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,461,494,416,454,437,495,470,441],
[454,0,424,500,438,416,452,476,447,425],
[429,466,0,469,429,419,416,451,472,442],
[396,390,421,0,427,395,399,465,400,413],
[474,452,461,463,0,443,481,435,481,432],
[436,474,471,495,447,0,446,480,454,475],
[453,438,474,491,409,444,0,463,460,442],
[395,414,439,425,455,410,427,0,433,413],
[420,443,418,490,409,436,430,457,0,468],
[449,465,448,477,458,415,448,477,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,395,428,435,359,460,447,409,394,386],
[495,0,454,421,382,475,459,427,397,410],
[462,436,0,459,409,500,482,415,438,373],
[455,469,431,0,389,456,465,408,470,418],
[531,508,481,501,0,552,506,490,515,441],
[430,415,390,434,338,0,452,406,358,429],
[443,431,408,425,384,438,0,432,408,342],
[481,463,475,482,400,484,458,0,431,430],
[496,493,452,420,375,532,482,459,0,447],
[504,480,517,472,449,461,548,460,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,378,408,431,456,432,427,433,430],
[473,0,466,441,452,489,484,459,479,476],
[512,424,0,431,451,467,474,443,474,429],
[482,449,459,0,482,467,456,440,506,442],
[459,438,439,408,0,460,455,444,439,409],
[434,401,423,423,430,0,477,435,458,437],
[458,406,416,434,435,413,0,435,463,438],
[463,431,447,450,446,455,455,0,470,449],
[457,411,416,384,451,432,427,420,0,426],
[460,414,461,448,481,453,452,441,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,456,453,475,489,431,465,477,457],
[431,0,461,436,470,451,425,459,433,468],
[434,429,0,451,465,425,426,446,440,428],
[437,454,439,0,465,435,429,417,457,449],
[415,420,425,425,0,450,404,397,431,423],
[401,439,465,455,440,0,436,448,457,438],
[459,465,464,461,486,454,0,479,477,443],
[425,431,444,473,493,442,411,0,449,436],
[413,457,450,433,459,433,413,441,0,428],
[433,422,462,441,467,452,447,454,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,392,398,283,395,445,529,449,410,370],
[498,0,523,434,479,569,393,509,384,500],
[492,367,0,395,419,502,459,431,359,402],
[607,456,495,0,527,540,412,430,409,380],
[495,411,471,363,0,471,499,479,378,434],
[445,321,388,350,419,0,432,424,387,294],
[361,497,431,478,391,458,0,390,354,357],
[441,381,459,460,411,466,500,0,403,399],
[480,506,531,481,512,503,536,487,0,440],
[520,390,488,510,456,596,533,491,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,471,454,458,428,477,438,477,439],
[448,0,454,431,448,440,453,462,471,445],
[419,436,0,450,461,422,462,427,445,423],
[436,459,440,0,486,455,457,442,455,437],
[432,442,429,404,0,424,441,452,447,437],
[462,450,468,435,466,0,465,447,484,459],
[413,437,428,433,449,425,0,441,455,441],
[452,428,463,448,438,443,449,0,464,430],
[413,419,445,435,443,406,435,426,0,409],
[451,445,467,453,453,431,449,460,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,445,476,452,455,437,491,447,454],
[461,0,482,449,480,449,445,487,445,456],
[445,408,0,476,419,409,438,468,420,445],
[414,441,414,0,405,409,417,442,404,426],
[438,410,471,485,0,449,454,483,440,437],
[435,441,481,481,441,0,458,487,455,456],
[453,445,452,473,436,432,0,472,451,463],
[399,403,422,448,407,403,418,0,422,438],
[443,445,470,486,450,435,439,468,0,454],
[436,434,445,464,453,434,427,452,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,416,431,429,424,462,417,429,446],
[482,0,470,462,479,459,470,452,444,455],
[474,420,0,449,449,440,472,459,471,461],
[459,428,441,0,477,428,469,443,473,461],
[461,411,441,413,0,422,449,446,426,443],
[466,431,450,462,468,0,482,475,439,502],
[428,420,418,421,441,408,0,438,436,445],
[473,438,431,447,444,415,452,0,409,465],
[461,446,419,417,464,451,454,481,0,463],
[444,435,429,429,447,388,445,425,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,435,456,444,460,449,444,437,449],
[439,0,451,453,440,447,451,438,446,448],
[455,439,0,448,427,422,428,420,442,433],
[434,437,442,0,427,460,432,443,444,435],
[446,450,463,463,0,452,444,448,443,461],
[430,443,468,430,438,0,434,424,446,436],
[441,439,462,458,446,456,0,456,438,435],
[446,452,470,447,442,466,434,0,449,433],
[453,444,448,446,447,444,452,441,0,449],
[441,442,457,455,429,454,455,457,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,443,449,439,451,467,455,458,473],
[434,0,435,421,425,463,463,441,440,438],
[447,455,0,427,454,457,464,449,460,451],
[441,469,463,0,467,461,463,467,446,453],
[451,465,436,423,0,459,478,456,444,468],
[439,427,433,429,431,0,456,417,437,439],
[423,427,426,427,412,434,0,437,423,432],
[435,449,441,423,434,473,453,0,445,443],
[432,450,430,444,446,453,467,445,0,434],
[417,452,439,437,422,451,458,447,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,453,446,426,449,452,451,443,453],
[455,0,453,450,460,456,454,463,425,453],
[437,437,0,422,427,444,469,429,430,450],
[444,440,468,0,447,446,463,443,434,443],
[464,430,463,443,0,461,467,483,445,457],
[441,434,446,444,429,0,468,439,451,447],
[438,436,421,427,423,422,0,428,429,434],
[439,427,461,447,407,451,462,0,431,455],
[447,465,460,456,445,439,461,459,0,458],
[437,437,440,447,433,443,456,435,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,400,428,474,431,403,409,444,438,462],
[490,0,437,475,452,460,460,473,465,455],
[462,453,0,476,463,420,433,475,482,479],
[416,415,414,0,416,407,429,417,451,421],
[459,438,427,474,0,441,463,440,461,443],
[487,430,470,483,449,0,447,477,467,480],
[481,430,457,461,427,443,0,471,457,527],
[446,417,415,473,450,413,419,0,461,469],
[452,425,408,439,429,423,433,429,0,445],
[428,435,411,469,447,410,363,421,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,444,454,448,444,423,449,385,499],
[442,0,470,468,498,434,432,455,433,496],
[446,420,0,470,378,403,417,435,453,477],
[436,422,420,0,389,437,390,424,345,483],
[442,392,512,501,0,492,462,473,465,526],
[446,456,487,453,398,0,396,441,457,504],
[467,458,473,500,428,494,0,424,411,554],
[441,435,455,466,417,449,466,0,409,497],
[505,457,437,545,425,433,479,481,0,534],
[391,394,413,407,364,386,336,393,356,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,395,451,436,417,456,438,437,478,432],
[495,0,441,465,452,469,512,476,502,458],
[439,449,0,445,435,466,460,405,477,403],
[454,425,445,0,444,423,467,448,472,415],
[473,438,455,446,0,477,493,448,489,457],
[434,421,424,467,413,0,440,427,447,405],
[452,378,430,423,397,450,0,409,479,397],
[453,414,485,442,442,463,481,0,480,433],
[412,388,413,418,401,443,411,410,0,377],
[458,432,487,475,433,485,493,457,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,411,450,438,414,429,420,445,435],
[450,0,438,460,435,389,418,398,411,431],
[479,452,0,482,437,406,438,446,442,447],
[440,430,408,0,400,407,420,403,423,396],
[452,455,453,490,0,450,437,448,445,436],
[476,501,484,483,440,0,454,431,439,457],
[461,472,452,470,453,436,0,463,442,446],
[470,492,444,487,442,459,427,0,454,445],
[445,479,448,467,445,451,448,436,0,420],
[455,459,443,494,454,433,444,445,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,457,450,437,435,485,403,401,440],
[439,0,454,445,449,431,451,413,434,429],
[433,436,0,431,429,410,494,391,416,422],
[440,445,459,0,442,404,494,425,419,439],
[453,441,461,448,0,421,467,442,456,439],
[455,459,480,486,469,0,491,483,420,472],
[405,439,396,396,423,399,0,414,389,418],
[487,477,499,465,448,407,476,0,469,475],
[489,456,474,471,434,470,501,421,0,459],
[450,461,468,451,451,418,472,415,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,450,451,450,433,487,434,438,461],
[438,0,439,410,434,399,467,405,469,470],
[440,451,0,383,435,415,462,400,438,429],
[439,480,507,0,485,464,518,459,443,491],
[440,456,455,405,0,418,489,443,445,480],
[457,491,475,426,472,0,514,484,459,504],
[403,423,428,372,401,376,0,404,416,450],
[456,485,490,431,447,406,486,0,464,493],
[452,421,452,447,445,431,474,426,0,475],
[429,420,461,399,410,386,440,397,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,450,434,462,449,469,463,447,432],
[420,0,471,437,449,444,459,452,452,416],
[440,419,0,433,450,430,429,460,436,411],
[456,453,457,0,456,426,470,460,474,453],
[428,441,440,434,0,439,447,438,464,436],
[441,446,460,464,451,0,441,480,455,430],
[421,431,461,420,443,449,0,463,450,442],
[427,438,430,430,452,410,427,0,441,420],
[443,438,454,416,426,435,440,449,0,438],
[458,474,479,437,454,460,448,470,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,422,457,431,432,445,440,422,452],
[447,0,438,446,425,421,443,458,447,432],
[468,452,0,441,433,424,456,436,445,444],
[433,444,449,0,439,426,448,439,458,441],
[459,465,457,451,0,433,453,463,468,466],
[458,469,466,464,457,0,458,440,454,442],
[445,447,434,442,437,432,0,442,439,438],
[450,432,454,451,427,450,448,0,462,447],
[468,443,445,432,422,436,451,428,0,447],
[438,458,446,449,424,448,452,443,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,435,437,455,424,449,437,426,435],
[441,0,428,472,476,422,434,451,431,425],
[455,462,0,455,443,442,468,462,440,442],
[453,418,435,0,467,427,439,432,404,436],
[435,414,447,423,0,419,436,427,414,405],
[466,468,448,463,471,0,459,471,446,444],
[441,456,422,451,454,431,0,449,415,446],
[453,439,428,458,463,419,441,0,423,416],
[464,459,450,486,476,444,475,467,0,461],
[455,465,448,454,485,446,444,474,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,434,425,441,432,439,446,430,440],
[457,0,425,425,444,435,445,454,462,422],
[456,465,0,456,445,427,445,451,439,453],
[465,465,434,0,433,438,441,433,442,438],
[449,446,445,457,0,437,452,446,440,418],
[458,455,463,452,453,0,475,467,451,436],
[451,445,445,449,438,415,0,430,417,438],
[444,436,439,457,444,423,460,0,433,441],
[460,428,451,448,450,439,473,457,0,438],
[450,468,437,452,472,454,452,449,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,400,420,400,429,407,411,483,434],
[491,0,461,463,425,492,403,439,472,472],
[490,429,0,430,422,463,429,469,485,465],
[470,427,460,0,463,449,405,442,466,479],
[490,465,468,427,0,460,463,467,499,485],
[461,398,427,441,430,0,408,407,448,451],
[483,487,461,485,427,482,0,462,489,500],
[479,451,421,448,423,483,428,0,472,467],
[407,418,405,424,391,442,401,418,0,409],
[456,418,425,411,405,439,390,423,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,534,430,523,507,492,414,600,507,457],
[356,0,398,410,421,423,433,457,458,397],
[460,492,0,457,465,411,430,516,512,401],
[367,480,433,0,433,373,391,511,467,383],
[383,469,425,457,0,417,457,547,482,416],
[398,467,479,517,473,0,464,524,520,398],
[476,457,460,499,433,426,0,527,486,431],
[290,433,374,379,343,366,363,0,435,395],
[383,432,378,423,408,370,404,455,0,420],
[433,493,489,507,474,492,459,495,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,473,454,467,445,481,416,406,465],
[487,0,485,467,443,391,470,442,410,472],
[417,405,0,447,472,406,454,422,405,448],
[436,423,443,0,449,409,462,451,410,465],
[423,447,418,441,0,401,469,437,420,420],
[445,499,484,481,489,0,465,494,466,483],
[409,420,436,428,421,425,0,430,413,472],
[474,448,468,439,453,396,460,0,444,439],
[484,480,485,480,470,424,477,446,0,471],
[425,418,442,425,470,407,418,451,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,499,474,534,507,550,417,558,534],
[384,0,371,332,405,379,399,273,358,365],
[391,519,0,496,481,444,496,443,468,459],
[416,558,394,0,454,401,488,441,443,477],
[356,485,409,436,0,421,378,424,387,418],
[383,511,446,489,469,0,517,485,492,458],
[340,491,394,402,512,373,0,343,419,368],
[473,617,447,449,466,405,547,0,508,448],
[332,532,422,447,503,398,471,382,0,425],
[356,525,431,413,472,432,522,442,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,492,443,493,456,414,460,529,503],
[413,0,405,430,412,395,410,435,466,470],
[398,485,0,444,418,453,378,427,505,494],
[447,460,446,0,419,438,422,466,496,490],
[397,478,472,471,0,456,425,468,497,497],
[434,495,437,452,434,0,449,475,530,519],
[476,480,512,468,465,441,0,487,548,526],
[430,455,463,424,422,415,403,0,473,440],
[361,424,385,394,393,360,342,417,0,398],
[387,420,396,400,393,371,364,450,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,423,455,420,441,463,428,395,439],
[446,0,404,464,471,464,421,425,411,419],
[467,486,0,482,445,442,468,438,463,479],
[435,426,408,0,383,418,403,421,416,392],
[470,419,445,507,0,441,452,458,433,414],
[449,426,448,472,449,0,433,464,432,445],
[427,469,422,487,438,457,0,455,434,442],
[462,465,452,469,432,426,435,0,457,402],
[495,479,427,474,457,458,456,433,0,459],
[451,471,411,498,476,445,448,488,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,420,449,418,436,438,438,438,433],
[459,0,456,474,465,445,437,431,452,438],
[470,434,0,462,443,447,436,429,441,434],
[441,416,428,0,419,435,444,426,431,431],
[472,425,447,471,0,443,437,449,447,451],
[454,445,443,455,447,0,429,443,427,443],
[452,453,454,446,453,461,0,417,442,433],
[452,459,461,464,441,447,473,0,449,458],
[452,438,449,459,443,463,448,441,0,429],
[457,452,456,459,439,447,457,432,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,447,478,445,453,425,444,479,445],
[438,0,405,470,441,442,452,421,444,452],
[443,485,0,487,435,470,478,449,475,451],
[412,420,403,0,429,427,408,414,442,406],
[445,449,455,461,0,447,452,427,449,421],
[437,448,420,463,443,0,440,424,470,438],
[465,438,412,482,438,450,0,454,461,449],
[446,469,441,476,463,466,436,0,480,450],
[411,446,415,448,441,420,429,410,0,447],
[445,438,439,484,469,452,441,440,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,490,569,521,463,371,437,515,485],
[375,0,389,367,468,420,443,430,375,459],
[400,501,0,384,560,448,467,418,568,523],
[321,523,506,0,478,561,493,431,525,507],
[369,422,330,412,0,419,434,354,361,486],
[427,470,442,329,471,0,444,501,472,562],
[519,447,423,397,456,446,0,449,443,555],
[453,460,472,459,536,389,441,0,384,439],
[375,515,322,365,529,418,447,506,0,558],
[405,431,367,383,404,328,335,451,332,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,444,413,430,425,443,451,435,431],
[449,0,455,448,459,439,459,438,450,446],
[446,435,0,433,443,439,456,423,443,417],
[477,442,457,0,433,458,448,450,460,464],
[460,431,447,457,0,429,467,443,450,452],
[465,451,451,432,461,0,472,450,457,459],
[447,431,434,442,423,418,0,418,440,437],
[439,452,467,440,447,440,472,0,453,463],
[455,440,447,430,440,433,450,437,0,440],
[459,444,473,426,438,431,453,427,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,442,425,458,435,464,415,425,385],
[494,0,403,444,422,423,412,506,470,442],
[448,487,0,440,551,461,479,499,490,429],
[465,446,450,0,425,445,444,468,395,443],
[432,468,339,465,0,455,434,441,434,467],
[455,467,429,445,435,0,424,446,468,428],
[426,478,411,446,456,466,0,423,374,403],
[475,384,391,422,449,444,467,0,456,393],
[465,420,400,495,456,422,516,434,0,455],
[505,448,461,447,423,462,487,497,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,445,463,498,450,485,462,429,459],
[445,0,434,433,471,448,414,416,421,461],
[445,456,0,421,450,470,455,433,386,476],
[427,457,469,0,480,464,455,449,463,456],
[392,419,440,410,0,433,421,390,392,444],
[440,442,420,426,457,0,449,421,424,473],
[405,476,435,435,469,441,0,419,412,425],
[428,474,457,441,500,469,471,0,446,451],
[461,469,504,427,498,466,478,444,0,497],
[431,429,414,434,446,417,465,439,393,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,449,459,433,441,407,405,431,455],
[465,0,450,458,447,433,467,440,427,469],
[441,440,0,448,449,449,446,431,446,467],
[431,432,442,0,416,446,445,413,427,447],
[457,443,441,474,0,419,428,456,451,452],
[449,457,441,444,471,0,442,446,427,451],
[483,423,444,445,462,448,0,454,449,454],
[485,450,459,477,434,444,436,0,448,448],
[459,463,444,463,439,463,441,442,0,433],
[435,421,423,443,438,439,436,442,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,445,440,448,436,461,429,436,450],
[452,0,444,465,454,443,446,445,450,429],
[445,446,0,443,438,431,420,448,442,441],
[450,425,447,0,448,441,449,446,468,446],
[442,436,452,442,0,430,441,440,423,409],
[454,447,459,449,460,0,452,444,460,438],
[429,444,470,441,449,438,0,444,432,431],
[461,445,442,444,450,446,446,0,436,433],
[454,440,448,422,467,430,458,454,0,429],
[440,461,449,444,481,452,459,457,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,408,478,473,431,420,448,405,489],
[424,0,434,464,451,437,444,444,412,456],
[482,456,0,491,515,469,473,513,438,472],
[412,426,399,0,467,448,462,466,407,425],
[417,439,375,423,0,442,446,449,382,423],
[459,453,421,442,448,0,441,478,413,463],
[470,446,417,428,444,449,0,459,442,431],
[442,446,377,424,441,412,431,0,437,416],
[485,478,452,483,508,477,448,453,0,445],
[401,434,418,465,467,427,459,474,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,418,450,464,431,449,445,445,463],
[438,0,470,406,391,417,414,409,455,448],
[472,420,0,427,439,444,427,441,455,470],
[440,484,463,0,432,482,461,490,456,484],
[426,499,451,458,0,446,457,439,459,480],
[459,473,446,408,444,0,478,446,474,449],
[441,476,463,429,433,412,0,451,474,463],
[445,481,449,400,451,444,439,0,434,443],
[445,435,435,434,431,416,416,456,0,441],
[427,442,420,406,410,441,427,447,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,453,456,452,453,448,440,459,436],
[428,0,447,438,422,431,419,437,435,429],
[437,443,0,438,451,441,442,428,450,435],
[434,452,452,0,436,436,422,459,448,441],
[438,468,439,454,0,455,457,450,458,435],
[437,459,449,454,435,0,423,452,422,461],
[442,471,448,468,433,467,0,460,459,433],
[450,453,462,431,440,438,430,0,465,443],
[431,455,440,442,432,468,431,425,0,437],
[454,461,455,449,455,429,457,447,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,390,362,415,466,442,437,376,366,389],
[500,0,467,483,491,497,444,442,437,500],
[528,423,0,477,504,495,426,435,395,475],
[475,407,413,0,490,475,428,445,424,431],
[424,399,386,400,0,455,419,402,418,456],
[448,393,395,415,435,0,386,410,394,429],
[453,446,464,462,471,504,0,435,458,493],
[514,448,455,445,488,480,455,0,401,432],
[524,453,495,466,472,496,432,489,0,490],
[501,390,415,459,434,461,397,458,400,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,469,465,447,460,425,449,474,467],
[434,0,425,423,436,464,415,431,454,441],
[421,465,0,440,441,473,409,416,466,419],
[425,467,450,0,455,469,446,443,442,426],
[443,454,449,435,0,480,426,433,444,432],
[430,426,417,421,410,0,401,423,453,436],
[465,475,481,444,464,489,0,456,460,445],
[441,459,474,447,457,467,434,0,447,455],
[416,436,424,448,446,437,430,443,0,440],
[423,449,471,464,458,454,445,435,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,445,455,463,454,460,486,456,459],
[437,0,464,453,480,442,497,511,477,478],
[445,426,0,442,476,459,474,467,481,461],
[435,437,448,0,457,440,497,467,460,446],
[427,410,414,433,0,431,433,443,436,458],
[436,448,431,450,459,0,461,469,464,452],
[430,393,416,393,457,429,0,447,429,432],
[404,379,423,423,447,421,443,0,440,440],
[434,413,409,430,454,426,461,450,0,450],
[431,412,429,444,432,438,458,450,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,455,448,485,434,455,447,438,472],
[430,0,486,457,455,451,450,450,473,445],
[435,404,0,425,476,430,426,419,427,426],
[442,433,465,0,450,452,435,393,443,464],
[405,435,414,440,0,469,484,420,421,441],
[456,439,460,438,421,0,478,446,449,432],
[435,440,464,455,406,412,0,460,456,451],
[443,440,471,497,470,444,430,0,460,448],
[452,417,463,447,469,441,434,430,0,465],
[418,445,464,426,449,458,439,442,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,438,458,445,430,450,475,452,435],
[488,0,454,469,477,452,452,469,467,438],
[452,436,0,452,454,446,445,453,449,435],
[432,421,438,0,435,415,447,450,432,406],
[445,413,436,455,0,419,449,440,444,411],
[460,438,444,475,471,0,450,446,457,422],
[440,438,445,443,441,440,0,460,453,446],
[415,421,437,440,450,444,430,0,411,434],
[438,423,441,458,446,433,437,479,0,451],
[455,452,455,484,479,468,444,456,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,415,392,434,401,418,428,403,414],
[464,0,414,402,430,436,436,446,425,418],
[475,476,0,422,461,407,451,458,459,432],
[498,488,468,0,442,485,458,478,442,466],
[456,460,429,448,0,450,423,445,441,424],
[489,454,483,405,440,0,437,454,450,460],
[472,454,439,432,467,453,0,465,453,447],
[462,444,432,412,445,436,425,0,407,439],
[487,465,431,448,449,440,437,483,0,465],
[476,472,458,424,466,430,443,451,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,395,410,397,410,432,395,403,418,436],
[495,0,454,451,465,474,459,461,444,488],
[480,436,0,415,455,446,438,442,424,471],
[493,439,475,0,459,471,453,449,451,479],
[480,425,435,431,0,431,427,443,418,448],
[458,416,444,419,459,0,420,450,415,444],
[495,431,452,437,463,470,0,470,450,475],
[487,429,448,441,447,440,420,0,438,462],
[472,446,466,439,472,475,440,452,0,471],
[454,402,419,411,442,446,415,428,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,473,496,460,497,429,506,424,480],
[389,0,428,446,465,469,451,483,459,475],
[417,462,0,419,447,512,454,458,451,463],
[394,444,471,0,428,430,408,471,405,462],
[430,425,443,462,0,451,441,444,448,412],
[393,421,378,460,439,0,412,439,429,471],
[461,439,436,482,449,478,0,476,455,450],
[384,407,432,419,446,451,414,0,440,465],
[466,431,439,485,442,461,435,450,0,478],
[410,415,427,428,478,419,440,425,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,457,434,409,378,424,462,371,414],
[393,0,405,467,456,479,493,492,391,400],
[433,485,0,425,466,420,497,525,368,415],
[456,423,465,0,465,479,434,554,438,499],
[481,434,424,425,0,339,448,478,384,408],
[512,411,470,411,551,0,500,513,360,474],
[466,397,393,456,442,390,0,459,429,406],
[428,398,365,336,412,377,431,0,336,410],
[519,499,522,452,506,530,461,554,0,434],
[476,490,475,391,482,416,484,480,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,372,408,409,327,458,402,403,396,361],
[518,0,503,458,472,562,481,409,477,485],
[482,387,0,479,421,466,448,403,433,421],
[481,432,411,0,367,462,435,420,424,359],
[563,418,469,523,0,559,427,453,403,426],
[432,328,424,428,331,0,389,414,378,403],
[488,409,442,455,463,501,0,460,489,433],
[487,481,487,470,437,476,430,0,437,442],
[494,413,457,466,487,512,401,453,0,449],
[529,405,469,531,464,487,457,448,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,474,432,414,457,413,439,440,477],
[449,0,489,446,411,458,474,481,433,449],
[416,401,0,417,417,460,456,434,436,492],
[458,444,473,0,419,439,418,478,469,447],
[476,479,473,471,0,489,484,431,480,515],
[433,432,430,451,401,0,411,447,440,468],
[477,416,434,472,406,479,0,457,448,478],
[451,409,456,412,459,443,433,0,451,483],
[450,457,454,421,410,450,442,439,0,488],
[413,441,398,443,375,422,412,407,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,377,454,534,463,503,493,508,413,509],
[513,0,462,489,510,502,497,489,402,508],
[436,428,0,512,437,476,450,542,411,526],
[356,401,378,0,390,333,305,445,355,398],
[427,380,453,500,0,414,481,502,448,526],
[387,388,414,557,476,0,407,382,456,433],
[397,393,440,585,409,483,0,493,459,466],
[382,401,348,445,388,508,397,0,348,375],
[477,488,479,535,442,434,431,542,0,481],
[381,382,364,492,364,457,424,515,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,446,436,421,508,491,459,429,431],
[434,0,442,433,462,475,468,476,426,436],
[444,448,0,402,468,482,492,427,447,405],
[454,457,488,0,449,440,494,433,471,448],
[469,428,422,441,0,447,454,457,437,428],
[382,415,408,450,443,0,520,416,455,422],
[399,422,398,396,436,370,0,372,402,393],
[431,414,463,457,433,474,518,0,470,460],
[461,464,443,419,453,435,488,420,0,470],
[459,454,485,442,462,468,497,430,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,421,484,470,451,449,445,464,453],
[415,0,437,476,433,432,396,437,427,441],
[469,453,0,467,443,431,438,441,477,452],
[406,414,423,0,443,437,434,417,436,450],
[420,457,447,447,0,425,444,436,442,445],
[439,458,459,453,465,0,480,478,438,447],
[441,494,452,456,446,410,0,446,451,462],
[445,453,449,473,454,412,444,0,446,464],
[426,463,413,454,448,452,439,444,0,448],
[437,449,438,440,445,443,428,426,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,469,482,461,389,483,457,439,369],
[449,0,484,470,463,366,440,479,422,393],
[421,406,0,383,408,386,357,437,407,369],
[408,420,507,0,425,357,445,446,427,417],
[429,427,482,465,0,453,453,516,474,465],
[501,524,504,533,437,0,514,483,429,455],
[407,450,533,445,437,376,0,478,393,436],
[433,411,453,444,374,407,412,0,434,444],
[451,468,483,463,416,461,497,456,0,413],
[521,497,521,473,425,435,454,446,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,451,445,452,462,454,442,444,482],
[434,0,448,427,424,421,452,449,448,441],
[439,442,0,421,419,449,447,446,428,452],
[445,463,469,0,440,458,463,467,460,469],
[438,466,471,450,0,465,476,449,451,481],
[428,469,441,432,425,0,437,447,415,452],
[436,438,443,427,414,453,0,447,423,443],
[448,441,444,423,441,443,443,0,422,436],
[446,442,462,430,439,475,467,468,0,477],
[408,449,438,421,409,438,447,454,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,475,478,456,474,453,462,467,485],
[451,0,435,480,453,441,472,435,464,479],
[415,455,0,449,430,438,429,421,466,437],
[412,410,441,0,425,448,433,433,438,450],
[434,437,460,465,0,442,430,436,463,465],
[416,449,452,442,448,0,444,445,453,448],
[437,418,461,457,460,446,0,459,491,458],
[428,455,469,457,454,445,431,0,437,463],
[423,426,424,452,427,437,399,453,0,449],
[405,411,453,440,425,442,432,427,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,449,389,437,448,493,424,413,445],
[441,0,422,381,404,402,459,416,433,418],
[441,468,0,412,445,443,448,464,412,442],
[501,509,478,0,429,435,498,462,465,482],
[453,486,445,461,0,425,461,450,449,454],
[442,488,447,455,465,0,484,441,425,409],
[397,431,442,392,429,406,0,420,406,422],
[466,474,426,428,440,449,470,0,431,442],
[477,457,478,425,441,465,484,459,0,461],
[445,472,448,408,436,481,468,448,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,416,418,438,467,430,400,442,447],
[465,0,445,437,474,462,470,441,458,489],
[474,445,0,447,487,439,466,448,475,470],
[472,453,443,0,465,492,458,467,427,454],
[452,416,403,425,0,493,442,442,443,451],
[423,428,451,398,397,0,405,416,394,422],
[460,420,424,432,448,485,0,446,423,444],
[490,449,442,423,448,474,444,0,477,456],
[448,432,415,463,447,496,467,413,0,439],
[443,401,420,436,439,468,446,434,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,437,407,411,452,432,383,428,399],
[442,0,479,437,449,431,422,388,418,395],
[453,411,0,412,386,388,430,391,415,346],
[483,453,478,0,426,451,451,428,435,449],
[479,441,504,464,0,427,427,438,420,419],
[438,459,502,439,463,0,468,425,458,405],
[458,468,460,439,463,422,0,424,446,444],
[507,502,499,462,452,465,466,0,465,431],
[462,472,475,455,470,432,444,425,0,428],
[491,495,544,441,471,485,446,459,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,421,404,436,446,419,434,418,449],
[475,0,459,434,473,467,471,443,447,476],
[469,431,0,423,423,460,455,436,436,456],
[486,456,467,0,478,477,472,470,444,489],
[454,417,467,412,0,435,441,419,411,453],
[444,423,430,413,455,0,447,458,431,460],
[471,419,435,418,449,443,0,423,443,466],
[456,447,454,420,471,432,467,0,455,455],
[472,443,454,446,479,459,447,435,0,456],
[441,414,434,401,437,430,424,435,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,432,456,447,437,448,443,441,458],
[442,0,412,451,437,450,444,423,433,426],
[458,478,0,446,455,439,454,426,440,452],
[434,439,444,0,441,459,439,429,452,460],
[443,453,435,449,0,432,441,452,446,443],
[453,440,451,431,458,0,441,451,452,443],
[442,446,436,451,449,449,0,438,447,449],
[447,467,464,461,438,439,452,0,463,443],
[449,457,450,438,444,438,443,427,0,447],
[432,464,438,430,447,447,441,447,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,430,405,427,449,426,418,415,440],
[459,0,450,446,456,472,455,432,449,475],
[460,440,0,438,416,460,421,440,436,460],
[485,444,452,0,438,475,459,455,443,470],
[463,434,474,452,0,472,458,459,432,460],
[441,418,430,415,418,0,442,424,419,469],
[464,435,469,431,432,448,0,453,442,453],
[472,458,450,435,431,466,437,0,434,449],
[475,441,454,447,458,471,448,456,0,475],
[450,415,430,420,430,421,437,441,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,389,400,408,414,464,424,378,413],
[444,0,408,441,428,433,451,436,435,416],
[501,482,0,468,441,462,465,460,445,465],
[490,449,422,0,459,448,479,454,433,427],
[482,462,449,431,0,440,462,451,460,448],
[476,457,428,442,450,0,484,489,455,429],
[426,439,425,411,428,406,0,419,405,401],
[466,454,430,436,439,401,471,0,429,433],
[512,455,445,457,430,435,485,461,0,448],
[477,474,425,463,442,461,489,457,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,426,476,455,440,486,459,481,440],
[442,0,387,431,415,432,444,451,440,376],
[464,503,0,479,481,430,456,463,465,406],
[414,459,411,0,501,413,479,498,473,408],
[435,475,409,389,0,441,489,457,479,475],
[450,458,460,477,449,0,500,488,498,432],
[404,446,434,411,401,390,0,520,474,413],
[431,439,427,392,433,402,370,0,487,414],
[409,450,425,417,411,392,416,403,0,379],
[450,514,484,482,415,458,477,476,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,455,485,461,442,419,441,444,492],
[457,0,442,469,456,446,436,449,433,489],
[435,448,0,474,430,438,419,453,446,451],
[405,421,416,0,429,414,381,429,409,436],
[429,434,460,461,0,447,434,444,435,451],
[448,444,452,476,443,0,422,440,429,452],
[471,454,471,509,456,468,0,445,459,482],
[449,441,437,461,446,450,445,0,475,488],
[446,457,444,481,455,461,431,415,0,453],
[398,401,439,454,439,438,408,402,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,465,450,488,439,516,465,445,467],
[428,0,367,433,474,452,472,427,408,428],
[425,523,0,484,535,507,546,479,456,524],
[440,457,406,0,492,423,476,428,431,450],
[402,416,355,398,0,419,414,429,353,437],
[451,438,383,467,471,0,472,451,444,481],
[374,418,344,414,476,418,0,438,411,430],
[425,463,411,462,461,439,452,0,440,447],
[445,482,434,459,537,446,479,450,0,499],
[423,462,366,440,453,409,460,443,391,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,466,493,449,469,473,473,441,506],
[445,0,492,476,445,440,427,497,432,502],
[424,398,0,451,439,393,451,430,410,470],
[397,414,439,0,396,400,427,469,434,456],
[441,445,451,494,0,448,484,447,449,510],
[421,450,497,490,442,0,501,462,498,509],
[417,463,439,463,406,389,0,459,471,467],
[417,393,460,421,443,428,431,0,425,444],
[449,458,480,456,441,392,419,465,0,463],
[384,388,420,434,380,381,423,446,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,548,488,479,452,497,499,478,445],
[376,0,521,482,456,451,445,492,438,403],
[342,369,0,445,365,416,370,392,381,411],
[402,408,445,0,405,335,400,461,447,422],
[411,434,525,485,0,456,444,466,462,496],
[438,439,474,555,434,0,391,457,431,480],
[393,445,520,490,446,499,0,491,463,473],
[391,398,498,429,424,433,399,0,371,410],
[412,452,509,443,428,459,427,519,0,490],
[445,487,479,468,394,410,417,480,400,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,437,439,378,428,429,450,419,430],
[488,0,442,464,463,473,477,480,475,460],
[453,448,0,478,460,449,449,465,484,439],
[451,426,412,0,421,409,425,418,454,445],
[512,427,430,469,0,455,439,450,424,440],
[462,417,441,481,435,0,458,448,449,449],
[461,413,441,465,451,432,0,461,442,471],
[440,410,425,472,440,442,429,0,430,436],
[471,415,406,436,466,441,448,460,0,465],
[460,430,451,445,450,441,419,454,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,496,490,421,471,450,476,462,452],
[402,0,445,445,447,397,405,440,433,433],
[394,445,0,433,412,403,426,443,440,426],
[400,445,457,0,434,415,405,410,472,422],
[469,443,478,456,0,444,441,500,463,477],
[419,493,487,475,446,0,444,466,486,449],
[440,485,464,485,449,446,0,475,464,467],
[414,450,447,480,390,424,415,0,431,463],
[428,457,450,418,427,404,426,459,0,417],
[438,457,464,468,413,441,423,427,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,457,437,434,450,467,430,432,462],
[428,0,458,427,416,434,467,406,420,428],
[433,432,0,404,423,427,451,435,406,436],
[453,463,486,0,430,437,449,438,454,447],
[456,474,467,460,0,441,482,447,421,441],
[440,456,463,453,449,0,474,428,414,452],
[423,423,439,441,408,416,0,424,402,426],
[460,484,455,452,443,462,466,0,428,460],
[458,470,484,436,469,476,488,462,0,455],
[428,462,454,443,449,438,464,430,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,415,411,445,425,383,392,366,355],
[467,0,371,445,418,476,363,389,419,440],
[475,519,0,454,450,511,438,517,485,463],
[479,445,436,0,476,442,477,410,427,424],
[445,472,440,414,0,499,398,403,484,429],
[465,414,379,448,391,0,395,425,418,371],
[507,527,452,413,492,495,0,439,530,459],
[498,501,373,480,487,465,451,0,511,438],
[524,471,405,463,406,472,360,379,0,438],
[535,450,427,466,461,519,431,452,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,426,422,434,431,432,457,423,433],
[459,0,433,444,437,422,421,466,439,428],
[464,457,0,466,430,457,435,463,435,458],
[468,446,424,0,442,407,427,443,436,443],
[456,453,460,448,0,418,414,495,432,434],
[459,468,433,483,472,0,446,476,456,453],
[458,469,455,463,476,444,0,488,443,460],
[433,424,427,447,395,414,402,0,435,441],
[467,451,455,454,458,434,447,455,0,464],
[457,462,432,447,456,437,430,449,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,444,514,397,451,416,543,494,496],
[360,0,413,463,444,439,426,515,436,450],
[446,477,0,527,435,419,449,556,458,490],
[376,427,363,0,414,435,428,505,430,439],
[493,446,455,476,0,461,444,550,491,504],
[439,451,471,455,429,0,376,520,441,401],
[474,464,441,462,446,514,0,508,506,490],
[347,375,334,385,340,370,382,0,384,393],
[396,454,432,460,399,449,384,506,0,489],
[394,440,400,451,386,489,400,497,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,430,424,429,442,428,420,441,424],
[464,0,442,455,459,454,466,454,464,470],
[460,448,0,447,449,457,453,463,435,436],
[466,435,443,0,446,458,463,448,486,422],
[461,431,441,444,0,441,440,450,477,440],
[448,436,433,432,449,0,442,415,441,447],
[462,424,437,427,450,448,0,460,469,428],
[470,436,427,442,440,475,430,0,449,443],
[449,426,455,404,413,449,421,441,0,417],
[466,420,454,468,450,443,462,447,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,435,445,440,456,425,476,443,455],
[429,0,415,432,436,444,407,427,417,444],
[455,475,0,451,436,485,440,452,446,472],
[445,458,439,0,425,455,431,464,427,461],
[450,454,454,465,0,468,441,452,461,457],
[434,446,405,435,422,0,426,441,425,456],
[465,483,450,459,449,464,0,469,431,445],
[414,463,438,426,438,449,421,0,434,448],
[447,473,444,463,429,465,459,456,0,451],
[435,446,418,429,433,434,445,442,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,454,449,462,450,484,462,441,477],
[440,0,476,465,462,434,470,488,463,495],
[436,414,0,426,434,437,448,463,418,421],
[441,425,464,0,441,422,469,450,431,458],
[428,428,456,449,0,436,453,456,422,454],
[440,456,453,468,454,0,471,455,446,462],
[406,420,442,421,437,419,0,430,422,419],
[428,402,427,440,434,435,460,0,440,450],
[449,427,472,459,468,444,468,450,0,439],
[413,395,469,432,436,428,471,440,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,464,481,503,459,476,461,525,453],
[471,0,461,452,499,482,499,445,521,474],
[426,429,0,431,427,428,408,422,467,406],
[409,438,459,0,455,426,486,458,508,420],
[387,391,463,435,0,405,429,438,466,390],
[431,408,462,464,485,0,469,450,516,453],
[414,391,482,404,461,421,0,399,477,418],
[429,445,468,432,452,440,491,0,520,465],
[365,369,423,382,424,374,413,370,0,397],
[437,416,484,470,500,437,472,425,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,435,462,437,452,464,431,475,420],
[434,0,449,468,433,420,463,460,444,423],
[455,441,0,471,471,420,457,438,466,468],
[428,422,419,0,390,410,431,427,405,414],
[453,457,419,500,0,424,483,433,470,429],
[438,470,470,480,466,0,506,502,463,476],
[426,427,433,459,407,384,0,429,443,414],
[459,430,452,463,457,388,461,0,462,440],
[415,446,424,485,420,427,447,428,0,428],
[470,467,422,476,461,414,476,450,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,512,515,455,436,500,556,499,505],
[396,0,409,482,380,426,454,390,366,426],
[378,481,0,530,428,438,459,441,401,326],
[375,408,360,0,359,423,391,373,331,314],
[435,510,462,531,0,487,553,450,493,446],
[454,464,452,467,403,0,483,490,375,441],
[390,436,431,499,337,407,0,435,348,397],
[334,500,449,517,440,400,455,0,444,403],
[391,524,489,559,397,515,542,446,0,408],
[385,464,564,576,444,449,493,487,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,436,456,474,463,457,437,457,448],
[432,0,411,430,447,440,448,440,428,440],
[454,479,0,451,456,450,449,456,438,468],
[434,460,439,0,474,436,459,438,441,454],
[416,443,434,416,0,431,440,429,439,444],
[427,450,440,454,459,0,450,433,436,459],
[433,442,441,431,450,440,0,453,426,446],
[453,450,434,452,461,457,437,0,462,460],
[433,462,452,449,451,454,464,428,0,471],
[442,450,422,436,446,431,444,430,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,439,413,474,426,420,448,427,435],
[460,0,454,437,457,437,435,454,418,470],
[451,436,0,469,464,448,440,452,425,471],
[477,453,421,0,454,453,409,464,467,489],
[416,433,426,436,0,454,416,441,440,471],
[464,453,442,437,436,0,457,466,469,451],
[470,455,450,481,474,433,0,450,434,479],
[442,436,438,426,449,424,440,0,435,462],
[463,472,465,423,450,421,456,455,0,463],
[455,420,419,401,419,439,411,428,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,414,413,435,470,438,427,448,434],
[435,0,419,426,440,433,436,442,464,466],
[476,471,0,437,475,477,462,449,483,477],
[477,464,453,0,468,467,424,465,463,483],
[455,450,415,422,0,454,413,449,455,455],
[420,457,413,423,436,0,402,447,473,457],
[452,454,428,466,477,488,0,450,464,461],
[463,448,441,425,441,443,440,0,454,474],
[442,426,407,427,435,417,426,436,0,423],
[456,424,413,407,435,433,429,416,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,445,436,441,437,448,455,421,435],
[433,0,431,441,417,423,440,423,431,414],
[445,459,0,448,443,429,428,465,433,430],
[454,449,442,0,428,438,449,443,422,424],
[449,473,447,462,0,449,461,445,459,449],
[453,467,461,452,441,0,455,464,439,427],
[442,450,462,441,429,435,0,413,420,438],
[435,467,425,447,445,426,477,0,434,444],
[469,459,457,468,431,451,470,456,0,444],
[455,476,460,466,441,463,452,446,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,487,455,473,426,421,430,478,460],
[467,0,493,473,473,450,435,483,476,491],
[403,397,0,417,420,412,407,406,423,407],
[435,417,473,0,452,415,412,421,439,439],
[417,417,470,438,0,411,438,451,435,431],
[464,440,478,475,479,0,446,440,475,466],
[469,455,483,478,452,444,0,467,447,446],
[460,407,484,469,439,450,423,0,469,443],
[412,414,467,451,455,415,443,421,0,425],
[430,399,483,451,459,424,444,447,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,434,412,403,453,436,483,437,494],
[466,0,492,496,418,525,449,458,509,542],
[456,398,0,359,405,439,362,357,395,481],
[478,394,531,0,400,416,438,446,497,518],
[487,472,485,490,0,501,460,450,462,435],
[437,365,451,474,389,0,431,428,453,497],
[454,441,528,452,430,459,0,453,472,539],
[407,432,533,444,440,462,437,0,475,514],
[453,381,495,393,428,437,418,415,0,457],
[396,348,409,372,455,393,351,376,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,420,417,416,418,429,466,414,394],
[469,0,444,449,457,452,434,460,459,432],
[470,446,0,436,449,459,435,454,442,430],
[473,441,454,0,465,425,445,475,469,426],
[474,433,441,425,0,427,426,448,439,428],
[472,438,431,465,463,0,444,460,465,413],
[461,456,455,445,464,446,0,470,438,470],
[424,430,436,415,442,430,420,0,413,404],
[476,431,448,421,451,425,452,477,0,422],
[496,458,460,464,462,477,420,486,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,452,437,434,443,444,436,448,438],
[460,0,469,449,444,473,451,452,460,463],
[438,421,0,433,456,461,433,431,447,453],
[453,441,457,0,452,447,452,457,477,443],
[456,446,434,438,0,458,460,434,459,457],
[447,417,429,443,432,0,438,437,441,438],
[446,439,457,438,430,452,0,435,433,431],
[454,438,459,433,456,453,455,0,458,458],
[442,430,443,413,431,449,457,432,0,439],
[452,427,437,447,433,452,459,432,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,486,452,451,468,503,439,485,451],
[434,0,449,425,459,424,450,417,424,409],
[404,441,0,396,417,405,411,400,392,399],
[438,465,494,0,502,466,477,435,470,437],
[439,431,473,388,0,432,455,412,413,373],
[422,466,485,424,458,0,480,469,435,395],
[387,440,479,413,435,410,0,410,377,402],
[451,473,490,455,478,421,480,0,480,425],
[405,466,498,420,477,455,513,410,0,453],
[439,481,491,453,517,495,488,465,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,432,445,420,410,411,434,408,429],
[437,0,428,468,417,422,409,427,417,434],
[458,462,0,461,426,455,419,441,431,461],
[445,422,429,0,406,426,416,439,445,450],
[470,473,464,484,0,484,439,452,431,476],
[480,468,435,464,406,0,419,428,429,437],
[479,481,471,474,451,471,0,465,432,458],
[456,463,449,451,438,462,425,0,408,440],
[482,473,459,445,459,461,458,482,0,480],
[461,456,429,440,414,453,432,450,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,400,419,358,390,373,407,429,307,372],
[490,0,408,409,436,424,497,472,448,461],
[471,482,0,478,434,504,456,421,390,386],
[532,481,412,0,429,452,500,445,407,474],
[500,454,456,461,0,451,477,459,413,452],
[517,466,386,438,439,0,419,444,405,427],
[483,393,434,390,413,471,0,393,368,453],
[461,418,469,445,431,446,497,0,398,465],
[583,442,500,483,477,485,522,492,0,478],
[518,429,504,416,438,463,437,425,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,468,455,449,466,435,471,479,446],
[431,0,470,456,441,489,457,482,492,458],
[422,420,0,454,428,487,399,445,442,437],
[435,434,436,0,432,449,431,443,474,449],
[441,449,462,458,0,472,424,458,448,432],
[424,401,403,441,418,0,419,400,447,420],
[455,433,491,459,466,471,0,493,473,463],
[419,408,445,447,432,490,397,0,465,404],
[411,398,448,416,442,443,417,425,0,418],
[444,432,453,441,458,470,427,486,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,429,433,427,433,429,431,459,413],
[440,0,416,463,401,427,422,449,428,411],
[461,474,0,460,443,494,475,463,485,429],
[457,427,430,0,426,462,440,463,464,409],
[463,489,447,464,0,480,469,484,476,435],
[457,463,396,428,410,0,413,431,435,434],
[461,468,415,450,421,477,0,451,429,445],
[459,441,427,427,406,459,439,0,461,415],
[431,462,405,426,414,455,461,429,0,392],
[477,479,461,481,455,456,445,475,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,460,441,442,428,433,443,449,435],
[453,0,443,440,454,442,454,446,456,438],
[430,447,0,436,452,441,461,447,445,452],
[449,450,454,0,465,450,472,468,476,427],
[448,436,438,425,0,460,456,440,453,442],
[462,448,449,440,430,0,443,441,475,462],
[457,436,429,418,434,447,0,439,441,451],
[447,444,443,422,450,449,451,0,471,458],
[441,434,445,414,437,415,449,419,0,447],
[455,452,438,463,448,428,439,432,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,474,438,432,454,486,436,468,431],
[471,0,442,432,432,411,509,472,466,526],
[416,448,0,467,419,426,477,435,483,499],
[452,458,423,0,430,410,474,511,482,482],
[458,458,471,460,0,416,531,473,446,494],
[436,479,464,480,474,0,495,487,512,505],
[404,381,413,416,359,395,0,446,385,410],
[454,418,455,379,417,403,444,0,436,474],
[422,424,407,408,444,378,505,454,0,423],
[459,364,391,408,396,385,480,416,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,440,442,450,479,475,486,492,481],
[452,0,453,448,489,468,490,484,513,431],
[450,437,0,440,472,460,516,483,501,468],
[448,442,450,0,472,475,507,478,489,471],
[440,401,418,418,0,466,460,456,473,444],
[411,422,430,415,424,0,444,452,457,416],
[415,400,374,383,430,446,0,421,426,433],
[404,406,407,412,434,438,469,0,461,431],
[398,377,389,401,417,433,464,429,0,452],
[409,459,422,419,446,474,457,459,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,457,408,484,478,458,472,484,535],
[411,0,430,401,454,451,463,439,490,469],
[433,460,0,421,477,417,469,427,448,486],
[482,489,469,0,491,501,470,435,505,487],
[406,436,413,399,0,446,462,409,430,486],
[412,439,473,389,444,0,445,445,460,473],
[432,427,421,420,428,445,0,421,425,441],
[418,451,463,455,481,445,469,0,462,475],
[406,400,442,385,460,430,465,428,0,440],
[355,421,404,403,404,417,449,415,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,451,448,459,465,459,457,437,453],
[453,0,472,451,446,453,458,444,433,434],
[439,418,0,478,446,443,455,452,449,467],
[442,439,412,0,450,476,442,447,411,470],
[431,444,444,440,0,484,458,418,418,460],
[425,437,447,414,406,0,427,419,411,434],
[431,432,435,448,432,463,0,458,421,433],
[433,446,438,443,472,471,432,0,422,442],
[453,457,441,479,472,479,469,468,0,461],
[437,456,423,420,430,456,457,448,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,447,453,449,456,439,430,438,442],
[454,0,439,431,461,421,436,444,455,467],
[443,451,0,439,450,452,440,445,463,429],
[437,459,451,0,474,462,460,467,468,462],
[441,429,440,416,0,433,429,411,442,429],
[434,469,438,428,457,0,440,447,470,425],
[451,454,450,430,461,450,0,453,446,464],
[460,446,445,423,479,443,437,0,443,465],
[452,435,427,422,448,420,444,447,0,458],
[448,423,461,428,461,465,426,425,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,436,461,429,438,438,432,436,445],
[454,0,453,463,447,441,420,460,469,465],
[454,437,0,478,464,447,449,463,466,454],
[429,427,412,0,441,419,438,454,454,436],
[461,443,426,449,0,445,442,443,457,431],
[452,449,443,471,445,0,444,454,460,431],
[452,470,441,452,448,446,0,462,479,442],
[458,430,427,436,447,436,428,0,449,426],
[454,421,424,436,433,430,411,441,0,445],
[445,425,436,454,459,459,448,464,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,414,442,435,419,461,463,440,398],
[468,0,453,464,460,473,490,501,487,440],
[476,437,0,485,447,475,467,467,480,467],
[448,426,405,0,415,413,457,437,415,422],
[455,430,443,475,0,454,467,498,476,455],
[471,417,415,477,436,0,457,457,429,436],
[429,400,423,433,423,433,0,453,442,431],
[427,389,423,453,392,433,437,0,415,412],
[450,403,410,475,414,461,448,475,0,431],
[492,450,423,468,435,454,459,478,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,486,434,460,445,452,484,447,452],
[469,0,440,445,466,476,467,451,450,462],
[404,450,0,436,430,443,446,470,435,423],
[456,445,454,0,466,458,469,455,418,458],
[430,424,460,424,0,418,458,435,433,413],
[445,414,447,432,472,0,473,452,435,425],
[438,423,444,421,432,417,0,449,444,420],
[406,439,420,435,455,438,441,0,435,423],
[443,440,455,472,457,455,446,455,0,454],
[438,428,467,432,477,465,470,467,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,428,439,410,423,434,416,420,442],
[470,0,420,452,432,430,464,433,415,439],
[462,470,0,468,457,460,453,454,437,450],
[451,438,422,0,396,423,432,437,448,438],
[480,458,433,494,0,458,456,466,442,467],
[467,460,430,467,432,0,477,420,444,482],
[456,426,437,458,434,413,0,426,427,434],
[474,457,436,453,424,470,464,0,465,435],
[470,475,453,442,448,446,463,425,0,463],
[448,451,440,452,423,408,456,455,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,408,431,436,418,439,402,432,429],
[429,0,453,432,470,443,461,430,440,454],
[482,437,0,456,456,466,442,386,470,477],
[459,458,434,0,442,429,454,430,445,486],
[454,420,434,448,0,462,450,408,447,475],
[472,447,424,461,428,0,476,418,436,467],
[451,429,448,436,440,414,0,404,440,446],
[488,460,504,460,482,472,486,0,467,438],
[458,450,420,445,443,454,450,423,0,445],
[461,436,413,404,415,423,444,452,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,464,435,458,442,417,471,454,414],
[384,0,407,453,426,421,408,453,434,437],
[426,483,0,448,476,438,438,423,452,453],
[455,437,442,0,467,441,458,461,414,428],
[432,464,414,423,0,447,426,436,435,441],
[448,469,452,449,443,0,433,470,460,470],
[473,482,452,432,464,457,0,465,453,432],
[419,437,467,429,454,420,425,0,436,449],
[436,456,438,476,455,430,437,454,0,438],
[476,453,437,462,449,420,458,441,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,459,466,438,423,471,452,458,472],
[425,0,430,425,407,401,425,453,432,452],
[431,460,0,475,466,447,484,471,451,515],
[424,465,415,0,457,426,490,478,462,480],
[452,483,424,433,0,440,475,460,476,483],
[467,489,443,464,450,0,495,474,470,481],
[419,465,406,400,415,395,0,401,435,441],
[438,437,419,412,430,416,489,0,436,442],
[432,458,439,428,414,420,455,454,0,455],
[418,438,375,410,407,409,449,448,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,464,445,467,466,442,471,472,464],
[419,0,455,449,455,481,451,444,475,485],
[426,435,0,443,433,480,430,456,448,437],
[445,441,447,0,479,443,441,450,451,466],
[423,435,457,411,0,421,412,439,449,461],
[424,409,410,447,469,0,440,456,449,461],
[448,439,460,449,478,450,0,440,441,447],
[419,446,434,440,451,434,450,0,434,461],
[418,415,442,439,441,441,449,456,0,443],
[426,405,453,424,429,429,443,429,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,454,484,492,432,466,525,492,546],
[435,0,418,520,471,439,461,530,468,535],
[436,472,0,449,446,389,454,469,488,470],
[406,370,441,0,430,376,414,454,435,480],
[398,419,444,460,0,454,438,465,465,463],
[458,451,501,514,436,0,481,488,485,486],
[424,429,436,476,452,409,0,495,405,480],
[365,360,421,436,425,402,395,0,416,487],
[398,422,402,455,425,405,485,474,0,479],
[344,355,420,410,427,404,410,403,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,405,447,393,415,414,432,403,471],
[452,0,403,444,387,445,427,439,429,466],
[485,487,0,503,449,458,445,452,469,480],
[443,446,387,0,405,420,407,425,448,447],
[497,503,441,485,0,446,470,494,449,527],
[475,445,432,470,444,0,439,459,410,469],
[476,463,445,483,420,451,0,429,448,469],
[458,451,438,465,396,431,461,0,425,451],
[487,461,421,442,441,480,442,465,0,459],
[419,424,410,443,363,421,421,439,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,408,443,244,406,448,480,362,402],
[409,0,408,489,246,448,410,446,488,489],
[482,482,0,402,324,406,406,482,483,442],
[447,401,488,0,327,448,407,442,445,443],
[646,644,566,563,0,524,566,604,401,565],
[484,442,484,442,366,0,529,481,363,444],
[442,480,484,483,324,361,0,482,445,401],
[410,444,408,448,286,409,408,0,325,365],
[528,402,407,445,489,527,445,565,0,442],
[488,401,448,447,325,446,489,525,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,441,450,426,461,436,436,434,443],
[427,0,430,412,422,435,409,440,426,445],
[449,460,0,421,451,466,446,432,444,430],
[440,478,469,0,460,443,449,470,450,433],
[464,468,439,430,0,442,450,440,436,418],
[429,455,424,447,448,0,421,440,421,429],
[454,481,444,441,440,469,0,446,431,457],
[454,450,458,420,450,450,444,0,459,464],
[456,464,446,440,454,469,459,431,0,451],
[447,445,460,457,472,461,433,426,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,445,445,445,223,223,222,666,445],
[445,0,890,667,668,668,668,667,667,890],
[445,0,0,445,445,445,668,445,445,445],
[445,223,445,0,447,447,447,224,890,447],
[445,222,445,443,0,223,444,446,443,222],
[667,222,445,443,667,0,666,667,443,443],
[667,222,222,443,446,224,0,446,443,446],
[668,223,445,666,444,223,444,0,666,223],
[224,223,445,0,447,447,447,224,0,447],
[445,0,445,443,668,447,444,667,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,464,481,426,420,432,460,428,426],
[435,0,445,433,423,422,417,450,432,410],
[426,445,0,427,396,429,413,443,433,412],
[409,457,463,0,439,449,406,434,409,417],
[464,467,494,451,0,449,435,464,454,444],
[470,468,461,441,441,0,413,438,450,418],
[458,473,477,484,455,477,0,466,463,432],
[430,440,447,456,426,452,424,0,439,447],
[462,458,457,481,436,440,427,451,0,420],
[464,480,478,473,446,472,458,443,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,623,622,622,356,445,444,622,535,711],
[267,0,355,445,267,446,265,444,356,355],
[268,535,0,623,446,446,355,711,446,623],
[268,445,267,0,356,269,267,532,268,445],
[534,623,444,534,0,534,444,354,533,623],
[445,444,444,621,356,0,266,621,443,622],
[446,625,535,623,446,624,0,534,446,445],
[268,446,179,358,536,269,356,0,446,358],
[355,534,444,622,357,447,444,444,0,712],
[179,535,267,445,267,268,445,532,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,430,429,443,433,445,444,431,489],
[440,0,444,431,476,452,426,446,426,491],
[460,446,0,442,469,441,425,442,455,478],
[461,459,448,0,490,442,485,478,456,489],
[447,414,421,400,0,409,427,416,418,447],
[457,438,449,448,481,0,450,460,459,487],
[445,464,465,405,463,440,0,441,442,465],
[446,444,448,412,474,430,449,0,434,462],
[459,464,435,434,472,431,448,456,0,460],
[401,399,412,401,443,403,425,428,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,528,496,435,469,504,493,457,472],
[483,0,457,487,444,439,481,427,452,485],
[362,433,0,432,370,378,381,401,390,470],
[394,403,458,0,470,468,424,451,477,529],
[455,446,520,420,0,459,474,468,441,518],
[421,451,512,422,431,0,476,485,494,454],
[386,409,509,466,416,414,0,419,470,447],
[397,463,489,439,422,405,471,0,511,476],
[433,438,500,413,449,396,420,379,0,491],
[418,405,420,361,372,436,443,414,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,453,445,396,438,439,430,422,441],
[448,0,491,478,427,463,448,438,465,478],
[437,399,0,411,444,437,425,415,393,443],
[445,412,479,0,413,446,425,426,447,458],
[494,463,446,477,0,464,462,421,480,479],
[452,427,453,444,426,0,426,406,477,455],
[451,442,465,465,428,464,0,443,429,451],
[460,452,475,464,469,484,447,0,433,492],
[468,425,497,443,410,413,461,457,0,474],
[449,412,447,432,411,435,439,398,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,444,440,439,402,489,428,411,429],
[468,0,450,454,465,427,471,441,477,450],
[446,440,0,462,464,456,480,457,477,428],
[450,436,428,0,467,446,451,449,441,439],
[451,425,426,423,0,404,460,428,430,443],
[488,463,434,444,486,0,481,466,455,460],
[401,419,410,439,430,409,0,416,444,418],
[462,449,433,441,462,424,474,0,427,423],
[479,413,413,449,460,435,446,463,0,436],
[461,440,462,451,447,430,472,467,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,423,446,474,418,400,437,405,439],
[410,0,410,422,470,436,391,423,455,397],
[467,480,0,496,477,448,419,462,476,462],
[444,468,394,0,465,449,430,454,453,428],
[416,420,413,425,0,424,389,435,413,419],
[472,454,442,441,466,0,439,457,453,437],
[490,499,471,460,501,451,0,487,504,443],
[453,467,428,436,455,433,403,0,470,431],
[485,435,414,437,477,437,386,420,0,428],
[451,493,428,462,471,453,447,459,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,481,363,371,436,425,343,420,474],
[409,0,427,394,358,421,371,410,398,289],
[409,463,0,416,406,382,368,406,422,370],
[527,496,474,0,414,474,431,497,456,436],
[519,532,484,476,0,476,451,422,424,474],
[454,469,508,416,414,0,426,428,483,430],
[465,519,522,459,439,464,0,424,450,427],
[547,480,484,393,468,462,466,0,505,472],
[470,492,468,434,466,407,440,385,0,440],
[416,601,520,454,416,460,463,418,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,282,331,471,567,375,237,561,325],
[471,0,377,564,563,518,518,425,563,421],
[608,513,0,610,658,567,562,422,703,466],
[559,326,280,0,465,471,373,375,559,418],
[419,327,232,425,0,423,330,189,468,421],
[323,372,323,419,467,0,370,232,511,418],
[515,372,328,517,560,520,0,331,657,468],
[653,465,468,515,701,658,559,0,701,416],
[329,327,187,331,422,379,233,189,0,236],
[565,469,424,472,469,472,422,474,654,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,393,477,434,433,468,472,477,440],
[426,0,411,464,409,440,467,392,463,426],
[497,479,0,460,462,456,478,515,438,489],
[413,426,430,0,402,449,421,409,426,422],
[456,481,428,488,0,460,484,486,458,431],
[457,450,434,441,430,0,506,438,450,430],
[422,423,412,469,406,384,0,430,435,419],
[418,498,375,481,404,452,460,0,430,379],
[413,427,452,464,432,440,455,460,0,383],
[450,464,401,468,459,460,471,511,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,446,409,453,474,408,482,452,395],
[458,0,434,429,429,453,404,524,433,440],
[444,456,0,404,504,406,462,445,406,400],
[481,461,486,0,444,467,451,484,435,439],
[437,461,386,446,0,435,457,479,457,446],
[416,437,484,423,455,0,426,447,431,430],
[482,486,428,439,433,464,0,505,439,419],
[408,366,445,406,411,443,385,0,404,404],
[438,457,484,455,433,459,451,486,0,449],
[495,450,490,451,444,460,471,486,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,460,422,422,403,448,405,422,472],
[456,0,469,455,434,462,467,445,470,491],
[430,421,0,419,475,431,449,412,447,461],
[468,435,471,0,467,420,455,425,466,489],
[468,456,415,423,0,425,452,435,433,446],
[487,428,459,470,465,0,475,410,452,508],
[442,423,441,435,438,415,0,396,437,479],
[485,445,478,465,455,480,494,0,461,472],
[468,420,443,424,457,438,453,429,0,482],
[418,399,429,401,444,382,411,418,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,449,443,444,429,495,458,428,465],
[422,0,403,409,430,417,429,442,410,433],
[441,487,0,491,474,471,497,484,443,463],
[447,481,399,0,451,420,466,457,464,453],
[446,460,416,439,0,426,453,458,416,435],
[461,473,419,470,464,0,467,480,436,433],
[395,461,393,424,437,423,0,455,396,446],
[432,448,406,433,432,410,435,0,391,410],
[462,480,447,426,474,454,494,499,0,435],
[425,457,427,437,455,457,444,480,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,436,434,446,441,438,434,445,439],
[429,0,414,427,411,413,427,435,428,426],
[454,476,0,481,449,431,450,457,473,471],
[456,463,409,0,448,430,435,442,440,453],
[444,479,441,442,0,436,445,443,451,465],
[449,477,459,460,454,0,439,453,473,471],
[452,463,440,455,445,451,0,438,460,460],
[456,455,433,448,447,437,452,0,456,459],
[445,462,417,450,439,417,430,434,0,453],
[451,464,419,437,425,419,430,431,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,430,452,383,429,426,430,444,499],
[424,0,362,407,361,404,440,420,404,441],
[460,528,0,448,455,458,433,461,457,474],
[438,483,442,0,436,483,458,491,425,488],
[507,529,435,454,0,452,489,464,463,527],
[461,486,432,407,438,0,454,406,443,466],
[464,450,457,432,401,436,0,449,426,493],
[460,470,429,399,426,484,441,0,402,453],
[446,486,433,465,427,447,464,488,0,488],
[391,449,416,402,363,424,397,437,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,435,464,442,431,464,510,469,426],
[473,0,428,428,507,440,458,512,447,456],
[455,462,0,411,467,456,490,502,431,424],
[426,462,479,0,488,451,501,498,474,461],
[448,383,423,402,0,388,452,453,403,411],
[459,450,434,439,502,0,485,493,455,488],
[426,432,400,389,438,405,0,492,430,410],
[380,378,388,392,437,397,398,0,394,400],
[421,443,459,416,487,435,460,496,0,474],
[464,434,466,429,479,402,480,490,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,435,442,437,436,426,437,425,437],
[473,0,438,436,438,435,459,435,430,440],
[455,452,0,466,429,442,463,426,428,445],
[448,454,424,0,410,426,407,415,408,406],
[453,452,461,480,0,444,448,433,448,445],
[454,455,448,464,446,0,444,456,429,448],
[464,431,427,483,442,446,0,443,456,437],
[453,455,464,475,457,434,447,0,444,440],
[465,460,462,482,442,461,434,446,0,444],
[453,450,445,484,445,442,453,450,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,468,450,467,500,479,477,443,491],
[403,0,445,446,416,452,455,429,406,477],
[422,445,0,435,427,458,463,448,447,476],
[440,444,455,0,442,474,452,473,430,485],
[423,474,463,448,0,505,468,476,454,484],
[390,438,432,416,385,0,418,423,396,427],
[411,435,427,438,422,472,0,454,398,476],
[413,461,442,417,414,467,436,0,426,475],
[447,484,443,460,436,494,492,464,0,482],
[399,413,414,405,406,463,414,415,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,443,445,457,430,437,455,455,438],
[430,0,446,443,431,443,425,436,458,424],
[447,444,0,459,443,424,440,434,458,438],
[445,447,431,0,439,438,442,431,459,432],
[433,459,447,451,0,446,456,444,449,446],
[460,447,466,452,444,0,456,451,455,468],
[453,465,450,448,434,434,0,427,454,445],
[435,454,456,459,446,439,463,0,471,434],
[435,432,432,431,441,435,436,419,0,438],
[452,466,452,458,444,422,445,456,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,416,443,371,445,514,492,421,489],
[566,0,421,470,374,444,423,397,423,515],
[474,469,0,497,376,378,425,400,400,494],
[447,420,393,0,396,400,471,398,445,469],
[519,516,514,494,0,447,514,470,444,562],
[445,446,512,490,443,0,518,516,516,516],
[376,467,465,419,376,372,0,325,421,536],
[398,493,490,492,420,374,565,0,467,565],
[469,467,490,445,446,374,469,423,0,492],
[401,375,396,421,328,374,354,325,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,446,432,436,439,418,450,437,443],
[465,0,456,431,453,450,439,463,426,438],
[444,434,0,439,442,437,434,441,422,458],
[458,459,451,0,438,453,442,452,434,451],
[454,437,448,452,0,469,439,457,438,459],
[451,440,453,437,421,0,429,430,452,446],
[472,451,456,448,451,461,0,462,435,458],
[440,427,449,438,433,460,428,0,423,451],
[453,464,468,456,452,438,455,467,0,459],
[447,452,432,439,431,444,432,439,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,360,431,341,337,316,321,390,364,365],
[530,0,433,364,407,479,414,411,481,433],
[459,457,0,368,434,367,348,459,456,339],
[549,526,522,0,456,480,436,433,527,409],
[553,483,456,434,0,457,485,458,505,524],
[574,411,523,410,433,0,368,504,500,519],
[569,476,542,454,405,522,0,478,522,518],
[500,479,431,457,432,386,412,0,453,431],
[526,409,434,363,385,390,368,437,0,473],
[525,457,551,481,366,371,372,459,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,448,486,476,457,463,450,444,444],
[455,0,476,478,503,456,445,467,453,439],
[442,414,0,438,470,439,420,437,443,435],
[404,412,452,0,473,425,439,428,453,428],
[414,387,420,417,0,409,420,417,421,438],
[433,434,451,465,481,0,441,447,454,430],
[427,445,470,451,470,449,0,418,445,438],
[440,423,453,462,473,443,472,0,455,453],
[446,437,447,437,469,436,445,435,0,440],
[446,451,455,462,452,460,452,437,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,459,472,451,446,468,457,446,444],
[450,0,427,453,453,445,469,448,451,439],
[431,463,0,453,462,451,458,459,453,442],
[418,437,437,0,436,435,447,430,448,441],
[439,437,428,454,0,440,460,447,438,438],
[444,445,439,455,450,0,472,443,454,450],
[422,421,432,443,430,418,0,427,429,439],
[433,442,431,460,443,447,463,0,450,428],
[444,439,437,442,452,436,461,440,0,447],
[446,451,448,449,452,440,451,462,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,498,436,514,453,452,438,516,510],
[380,0,437,411,434,374,357,480,357,480],
[392,453,0,454,527,471,455,393,399,427],
[454,479,436,0,460,477,401,518,462,554],
[376,456,363,430,0,337,376,495,440,414],
[437,516,419,413,553,0,442,502,538,456],
[438,533,435,489,514,448,0,513,443,413],
[452,410,497,372,395,388,377,0,357,427],
[374,533,491,428,450,352,447,533,0,454],
[380,410,463,336,476,434,477,463,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,452,417,415,459,493,422,433,453],
[420,0,409,415,411,406,422,400,402,427],
[438,481,0,436,438,445,460,463,423,445],
[473,475,454,0,438,469,459,439,455,449],
[475,479,452,452,0,439,486,449,428,474],
[431,484,445,421,451,0,471,427,430,431],
[397,468,430,431,404,419,0,431,387,447],
[468,490,427,451,441,463,459,0,431,486],
[457,488,467,435,462,460,503,459,0,446],
[437,463,445,441,416,459,443,404,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,423,414,430,401,425,403,410,427],
[475,0,449,473,491,446,468,439,449,468],
[467,441,0,440,444,429,453,431,438,448],
[476,417,450,0,441,421,463,434,434,447],
[460,399,446,449,0,416,446,425,439,429],
[489,444,461,469,474,0,444,448,453,456],
[465,422,437,427,444,446,0,413,435,441],
[487,451,459,456,465,442,477,0,465,461],
[480,441,452,456,451,437,455,425,0,442],
[463,422,442,443,461,434,449,429,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,441,430,420,460,477,446,428,415],
[471,0,459,451,460,460,486,450,445,438],
[449,431,0,433,432,458,452,407,402,408],
[460,439,457,0,457,486,465,436,398,421],
[470,430,458,433,0,463,487,447,446,442],
[430,430,432,404,427,0,479,435,422,434],
[413,404,438,425,403,411,0,420,409,418],
[444,440,483,454,443,455,470,0,444,446],
[462,445,488,492,444,468,481,446,0,448],
[475,452,482,469,448,456,472,444,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,439,461,471,455,479,461,445,464],
[406,0,405,446,450,422,469,442,428,434],
[451,485,0,414,466,455,483,450,462,445],
[429,444,476,0,435,425,456,468,472,437],
[419,440,424,455,0,417,457,454,417,427],
[435,468,435,465,473,0,441,469,448,434],
[411,421,407,434,433,449,0,436,450,417],
[429,448,440,422,436,421,454,0,447,445],
[445,462,428,418,473,442,440,443,0,450],
[426,456,445,453,463,456,473,445,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,463,423,432,428,478,406,443,453],
[420,0,424,426,426,430,443,405,412,437],
[427,466,0,427,438,433,463,441,450,456],
[467,464,463,0,472,442,487,446,461,463],
[458,464,452,418,0,437,475,434,437,411],
[462,460,457,448,453,0,467,451,445,467],
[412,447,427,403,415,423,0,405,423,431],
[484,485,449,444,456,439,485,0,473,463],
[447,478,440,429,453,445,467,417,0,407],
[437,453,434,427,479,423,459,427,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,458,499,496,452,466,468,484,445],
[420,0,437,451,463,435,456,452,436,425],
[432,453,0,462,517,496,485,479,496,461],
[391,439,428,0,446,464,483,424,462,418],
[394,427,373,444,0,462,465,426,434,403],
[438,455,394,426,428,0,451,447,462,416],
[424,434,405,407,425,439,0,448,450,389],
[422,438,411,466,464,443,442,0,444,418],
[406,454,394,428,456,428,440,446,0,417],
[445,465,429,472,487,474,501,472,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,461,448,453,480,448,450,449,429],
[423,0,454,466,454,453,440,477,439,449],
[429,436,0,454,479,480,467,444,425,445],
[442,424,436,0,422,439,436,429,398,418],
[437,436,411,468,0,440,453,455,416,402],
[410,437,410,451,450,0,470,451,427,418],
[442,450,423,454,437,420,0,426,424,441],
[440,413,446,461,435,439,464,0,437,420],
[441,451,465,492,474,463,466,453,0,450],
[461,441,445,472,488,472,449,470,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,444,446,379,449,381,445,510,509],
[446,0,445,383,254,258,319,318,511,447],
[446,445,0,511,382,257,381,447,574,509],
[444,507,379,0,380,445,317,445,382,508],
[511,636,508,510,0,447,508,445,574,573],
[441,632,633,445,443,0,381,508,572,380],
[509,571,509,573,382,509,0,573,638,572],
[445,572,443,445,445,382,317,0,573,381],
[380,379,316,508,316,318,252,317,0,317],
[381,443,381,382,317,510,318,509,573,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,439,442,448,415,421,408,443,422],
[468,0,442,447,441,415,425,436,445,429],
[451,448,0,462,458,434,425,424,424,433],
[448,443,428,0,430,446,441,428,440,432],
[442,449,432,460,0,430,447,423,411,426],
[475,475,456,444,460,0,441,448,461,443],
[469,465,465,449,443,449,0,437,484,467],
[482,454,466,462,467,442,453,0,457,449],
[447,445,466,450,479,429,406,433,0,433],
[468,461,457,458,464,447,423,441,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,514,405,437,443,451,378,452,428],
[420,0,475,427,452,444,443,451,444,431],
[376,415,0,396,393,399,410,329,418,426],
[485,463,494,0,444,455,426,398,456,439],
[453,438,497,446,0,410,481,393,475,412],
[447,446,491,435,480,0,467,388,463,454],
[439,447,480,464,409,423,0,382,456,454],
[512,439,561,492,497,502,508,0,469,513],
[438,446,472,434,415,427,434,421,0,457],
[462,459,464,451,478,436,436,377,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,451,452,430,435,433,460,431,428],
[470,0,463,455,466,476,468,487,446,442],
[439,427,0,435,429,434,453,474,433,430],
[438,435,455,0,430,451,454,449,432,440],
[460,424,461,460,0,455,453,476,441,428],
[455,414,456,439,435,0,459,452,443,429],
[457,422,437,436,437,431,0,448,427,442],
[430,403,416,441,414,438,442,0,416,422],
[459,444,457,458,449,447,463,474,0,452],
[462,448,460,450,462,461,448,468,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,454,441,472,497,400,441,485,469],
[407,0,402,412,417,409,410,425,467,398],
[436,488,0,400,479,475,438,480,482,458],
[449,478,490,0,466,496,464,420,519,476],
[418,473,411,424,0,442,434,460,437,429],
[393,481,415,394,448,0,415,417,437,427],
[490,480,452,426,456,475,0,415,511,456],
[449,465,410,470,430,473,475,0,461,462],
[405,423,408,371,453,453,379,429,0,428],
[421,492,432,414,461,463,434,428,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,473,437,452,448,430,451,465,466],
[433,0,467,452,441,455,462,456,462,477],
[417,423,0,405,416,445,414,430,431,426],
[453,438,485,0,448,431,436,450,450,452],
[438,449,474,442,0,432,439,447,437,471],
[442,435,445,459,458,0,445,432,451,464],
[460,428,476,454,451,445,0,455,471,461],
[439,434,460,440,443,458,435,0,454,448],
[425,428,459,440,453,439,419,436,0,463],
[424,413,464,438,419,426,429,442,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,425,474,446,477,461,457,435,454],
[440,0,395,450,417,460,472,410,421,446],
[465,495,0,503,470,492,529,482,444,494],
[416,440,387,0,446,460,448,447,418,435],
[444,473,420,444,0,473,467,455,454,438],
[413,430,398,430,417,0,463,431,403,413],
[429,418,361,442,423,427,0,450,426,421],
[433,480,408,443,435,459,440,0,437,420],
[455,469,446,472,436,487,464,453,0,446],
[436,444,396,455,452,477,469,470,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,443,447,463,437,439,446,475,443],
[445,0,412,449,468,441,460,428,456,446],
[447,478,0,468,456,450,438,457,447,449],
[443,441,422,0,491,448,454,453,476,441],
[427,422,434,399,0,441,418,416,463,423],
[453,449,440,442,449,0,441,440,475,479],
[451,430,452,436,472,449,0,455,467,441],
[444,462,433,437,474,450,435,0,476,429],
[415,434,443,414,427,415,423,414,0,421],
[447,444,441,449,467,411,449,461,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,446,461,379,449,451,420,421,452],
[412,0,391,438,372,427,432,378,371,378],
[444,499,0,448,414,461,499,474,440,476],
[429,452,442,0,382,441,471,417,403,423],
[511,518,476,508,0,498,503,437,472,493],
[441,463,429,449,392,0,420,443,389,432],
[439,458,391,419,387,470,0,426,403,436],
[470,512,416,473,453,447,464,0,433,465],
[469,519,450,487,418,501,487,457,0,456],
[438,512,414,467,397,458,454,425,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,474,439,458,479,446,443,454,449],
[406,0,461,461,435,465,442,453,432,450],
[416,429,0,423,435,427,428,409,444,405],
[451,429,467,0,457,479,429,436,465,444],
[432,455,455,433,0,445,444,428,450,439],
[411,425,463,411,445,0,408,416,408,409],
[444,448,462,461,446,482,0,459,437,456],
[447,437,481,454,462,474,431,0,453,447],
[436,458,446,425,440,482,453,437,0,454],
[441,440,485,446,451,481,434,443,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,456,465,472,473,462,430,454,443],
[441,0,454,447,460,483,477,459,444,445],
[434,436,0,440,455,479,456,436,418,431],
[425,443,450,0,452,455,473,428,457,448],
[418,430,435,438,0,444,467,446,438,433],
[417,407,411,435,446,0,434,421,431,423],
[428,413,434,417,423,456,0,421,423,427],
[460,431,454,462,444,469,469,0,471,438],
[436,446,472,433,452,459,467,419,0,425],
[447,445,459,442,457,467,463,452,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,425,446,424,464,442,426,466,452],
[454,0,428,442,431,453,456,436,457,456],
[465,462,0,433,466,475,456,463,483,462],
[444,448,457,0,427,446,422,452,461,466],
[466,459,424,463,0,433,457,452,470,473],
[426,437,415,444,457,0,435,425,469,427],
[448,434,434,468,433,455,0,449,452,431],
[464,454,427,438,438,465,441,0,455,433],
[424,433,407,429,420,421,438,435,0,435],
[438,434,428,424,417,463,459,457,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,437,465,450,430,462,465,428,454],
[477,0,454,466,470,436,472,483,467,455],
[453,436,0,453,467,439,447,492,461,488],
[425,424,437,0,431,419,466,466,443,454],
[440,420,423,459,0,399,424,459,411,424],
[460,454,451,471,491,0,472,467,436,488],
[428,418,443,424,466,418,0,480,462,447],
[425,407,398,424,431,423,410,0,420,439],
[462,423,429,447,479,454,428,470,0,463],
[436,435,402,436,466,402,443,451,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,451,453,458,439,428,483,476,436],
[398,0,464,416,406,411,415,408,448,434],
[439,426,0,410,419,423,415,432,466,441],
[437,474,480,0,443,407,426,441,443,428],
[432,484,471,447,0,453,465,447,460,459],
[451,479,467,483,437,0,459,444,484,442],
[462,475,475,464,425,431,0,449,479,445],
[407,482,458,449,443,446,441,0,482,413],
[414,442,424,447,430,406,411,408,0,403],
[454,456,449,462,431,448,445,477,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,448,440,427,423,434,434,434,456],
[464,0,442,438,432,435,434,445,445,440],
[442,448,0,461,446,439,434,440,445,455],
[450,452,429,0,455,459,462,456,454,439],
[463,458,444,435,0,442,432,445,444,441],
[467,455,451,431,448,0,453,465,460,453],
[456,456,456,428,458,437,0,434,428,431],
[456,445,450,434,445,425,456,0,452,428],
[456,445,445,436,446,430,462,438,0,435],
[434,450,435,451,449,437,459,462,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,441,463,469,464,450,450,432,435],
[435,0,454,453,438,451,438,456,436,426],
[449,436,0,467,442,463,459,442,438,443],
[427,437,423,0,448,428,436,440,429,419],
[421,452,448,442,0,461,463,451,445,454],
[426,439,427,462,429,0,432,432,439,437],
[440,452,431,454,427,458,0,443,459,450],
[440,434,448,450,439,458,447,0,465,453],
[458,454,452,461,445,451,431,425,0,453],
[455,464,447,471,436,453,440,437,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,423,438,471,427,418,449,457,445],
[441,0,439,413,460,441,446,455,424,441],
[467,451,0,451,470,459,469,480,469,443],
[452,477,439,0,466,468,466,496,464,443],
[419,430,420,424,0,423,446,451,455,414],
[463,449,431,422,467,0,438,465,440,444],
[472,444,421,424,444,452,0,480,467,446],
[441,435,410,394,439,425,410,0,437,426],
[433,466,421,426,435,450,423,453,0,430],
[445,449,447,447,476,446,444,464,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,443,434,443,479,439,435,438,458],
[463,0,429,443,458,490,461,466,450,449],
[447,461,0,457,443,474,464,455,438,457],
[456,447,433,0,463,477,469,485,461,461],
[447,432,447,427,0,470,444,429,429,458],
[411,400,416,413,420,0,447,426,419,430],
[451,429,426,421,446,443,0,445,462,426],
[455,424,435,405,461,464,445,0,456,474],
[452,440,452,429,461,471,428,434,0,449],
[432,441,433,429,432,460,464,416,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,462,472,410,479,422,431,463,464],
[476,0,450,459,407,478,458,417,455,488],
[428,440,0,455,405,459,444,462,427,451],
[418,431,435,0,385,471,445,433,459,446],
[480,483,485,505,0,508,437,450,455,523],
[411,412,431,419,382,0,408,449,404,450],
[468,432,446,445,453,482,0,446,473,524],
[459,473,428,457,440,441,444,0,425,432],
[427,435,463,431,435,486,417,465,0,470],
[426,402,439,444,367,440,366,458,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,466,454,448,473,455,432,461,463],
[435,0,481,446,474,473,462,464,471,453],
[424,409,0,412,418,430,441,424,410,398],
[436,444,478,0,440,427,466,444,455,442],
[442,416,472,450,0,407,436,437,440,411],
[417,417,460,463,483,0,462,426,411,424],
[435,428,449,424,454,428,0,456,460,381],
[458,426,466,446,453,464,434,0,456,437],
[429,419,480,435,450,479,430,434,0,401],
[427,437,492,448,479,466,509,453,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,456,481,440,424,457,434,453,449],
[444,0,417,464,443,433,463,453,428,438],
[434,473,0,471,461,428,475,438,438,445],
[409,426,419,0,417,401,421,420,422,430],
[450,447,429,473,0,420,462,448,428,464],
[466,457,462,489,470,0,471,464,456,444],
[433,427,415,469,428,419,0,413,432,453],
[456,437,452,470,442,426,477,0,450,457],
[437,462,452,468,462,434,458,440,0,423],
[441,452,445,460,426,446,437,433,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,405,434,443,476,444,454,445,461],
[439,0,442,424,422,475,439,453,442,426],
[485,448,0,436,450,453,467,455,463,477],
[456,466,454,0,450,445,461,450,458,486],
[447,468,440,440,0,490,444,485,437,467],
[414,415,437,445,400,0,417,429,430,430],
[446,451,423,429,446,473,0,435,438,431],
[436,437,435,440,405,461,455,0,434,458],
[445,448,427,432,453,460,452,456,0,470],
[429,464,413,404,423,460,459,432,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,430,447,430,466,453,436,454,426],
[434,0,406,422,410,440,405,414,420,407],
[460,484,0,462,457,460,471,440,447,427],
[443,468,428,0,411,458,438,434,441,438],
[460,480,433,479,0,465,429,431,433,432],
[424,450,430,432,425,0,413,416,432,402],
[437,485,419,452,461,477,0,467,433,433],
[454,476,450,456,459,474,423,0,448,430],
[436,470,443,449,457,458,457,442,0,453],
[464,483,463,452,458,488,457,460,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,481,467,477,448,447,420,483,491],
[449,0,474,458,448,458,433,422,484,460],
[409,416,0,437,413,450,421,405,466,473],
[423,432,453,0,426,448,395,437,476,420],
[413,442,477,464,0,491,458,459,458,504],
[442,432,440,442,399,0,471,439,472,449],
[443,457,469,495,432,419,0,474,471,441],
[470,468,485,453,431,451,416,0,463,458],
[407,406,424,414,432,418,419,427,0,444],
[399,430,417,470,386,441,449,432,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,408,424,420,456,461,409,421,425],
[482,0,465,454,443,476,494,452,472,485],
[482,425,0,436,450,454,485,453,447,468],
[466,436,454,0,449,429,478,456,446,455],
[470,447,440,441,0,454,486,439,438,480],
[434,414,436,461,436,0,451,433,417,460],
[429,396,405,412,404,439,0,429,399,433],
[481,438,437,434,451,457,461,0,459,456],
[469,418,443,444,452,473,491,431,0,480],
[465,405,422,435,410,430,457,434,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,463,481,461,448,436,436,462,425],
[465,0,438,487,443,443,447,434,449,447],
[427,452,0,481,459,446,449,434,461,442],
[409,403,409,0,427,440,393,402,425,400],
[429,447,431,463,0,419,431,434,450,419],
[442,447,444,450,471,0,426,443,433,451],
[454,443,441,497,459,464,0,441,462,445],
[454,456,456,488,456,447,449,0,434,444],
[428,441,429,465,440,457,428,456,0,433],
[465,443,448,490,471,439,445,446,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,480,466,472,471,452,472,455,454],
[450,0,459,445,442,455,451,437,444,439],
[410,431,0,411,459,440,451,433,443,402],
[424,445,479,0,452,464,449,436,466,426],
[418,448,431,438,0,462,439,444,455,449],
[419,435,450,426,428,0,438,439,459,428],
[438,439,439,441,451,452,0,436,466,418],
[418,453,457,454,446,451,454,0,459,408],
[435,446,447,424,435,431,424,431,0,423],
[436,451,488,464,441,462,472,482,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,430,429,447,490,446,446,452,423],
[469,0,448,379,455,414,410,445,441,432],
[460,442,0,421,394,420,400,379,427,426],
[461,511,469,0,498,473,442,430,437,494],
[443,435,496,392,0,490,447,442,431,473],
[400,476,470,417,400,0,409,426,432,425],
[444,480,490,448,443,481,0,461,490,462],
[444,445,511,460,448,464,429,0,442,464],
[438,449,463,453,459,458,400,448,0,447],
[467,458,464,396,417,465,428,426,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,443,437,441,400,435,412,423,453],
[461,0,436,449,443,436,465,434,452,446],
[447,454,0,452,467,434,457,453,458,472],
[453,441,438,0,449,433,450,445,454,468],
[449,447,423,441,0,427,451,424,432,457],
[490,454,456,457,463,0,479,440,454,460],
[455,425,433,440,439,411,0,425,450,457],
[478,456,437,445,466,450,465,0,444,454],
[467,438,432,436,458,436,440,446,0,448],
[437,444,418,422,433,430,433,436,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,434,444,410,417,410,452,419,446],
[484,0,490,478,452,417,471,464,440,480],
[456,400,0,397,413,389,419,451,427,433],
[446,412,493,0,438,424,424,456,413,442],
[480,438,477,452,0,445,465,470,431,465],
[473,473,501,466,445,0,475,442,481,483],
[480,419,471,466,425,415,0,434,448,468],
[438,426,439,434,420,448,456,0,447,462],
[471,450,463,477,459,409,442,443,0,472],
[444,410,457,448,425,407,422,428,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,459,428,435,459,458,446,449,446],
[420,0,476,428,455,436,452,434,434,437],
[431,414,0,416,423,431,439,415,421,431],
[462,462,474,0,466,459,467,441,436,468],
[455,435,467,424,0,487,456,438,442,446],
[431,454,459,431,403,0,472,425,434,454],
[432,438,451,423,434,418,0,415,425,453],
[444,456,475,449,452,465,475,0,470,464],
[441,456,469,454,448,456,465,420,0,450],
[444,453,459,422,444,436,437,426,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,452,467,471,454,475,427,461,468],
[424,0,416,419,435,421,435,418,431,453],
[438,474,0,478,451,440,453,434,473,435],
[423,471,412,0,480,422,470,444,462,443],
[419,455,439,410,0,465,471,456,462,442],
[436,469,450,468,425,0,499,455,465,465],
[415,455,437,420,419,391,0,426,446,444],
[463,472,456,446,434,435,464,0,478,478],
[429,459,417,428,428,425,444,412,0,455],
[422,437,455,447,448,425,446,412,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,422,476,500,431,469,421,473,432],
[492,0,459,489,520,468,491,433,487,400],
[468,431,0,464,479,452,471,457,471,419],
[414,401,426,0,446,443,412,426,460,428],
[390,370,411,444,0,406,425,410,441,426],
[459,422,438,447,484,0,490,457,489,398],
[421,399,419,478,465,400,0,406,446,399],
[469,457,433,464,480,433,484,0,500,469],
[417,403,419,430,449,401,444,390,0,378],
[458,490,471,462,464,492,491,421,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,438,544,511,478,479,508,499,454],
[390,0,335,543,506,469,430,405,468,482],
[452,555,0,614,560,544,563,466,518,441],
[346,347,276,0,378,387,391,356,412,400],
[379,384,330,512,0,406,401,433,407,439],
[412,421,346,503,484,0,415,465,505,439],
[411,460,327,499,489,475,0,411,411,476],
[382,485,424,534,457,425,479,0,462,418],
[391,422,372,478,483,385,479,428,0,441],
[436,408,449,490,451,451,414,472,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,471,467,457,464,472,416,437,451],
[424,0,429,434,422,425,482,415,437,448],
[419,461,0,424,424,449,467,428,421,398],
[423,456,466,0,458,457,452,425,452,427],
[433,468,466,432,0,465,492,428,495,473],
[426,465,441,433,425,0,457,417,441,441],
[418,408,423,438,398,433,0,394,416,408],
[474,475,462,465,462,473,496,0,435,450],
[453,453,469,438,395,449,474,455,0,450],
[439,442,492,463,417,449,482,440,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,444,469,475,424,451,434,456,461],
[445,0,458,448,467,433,430,438,450,448],
[446,432,0,442,425,434,440,432,451,448],
[421,442,448,0,448,453,426,409,447,421],
[415,423,465,442,0,410,414,420,432,459],
[466,457,456,437,480,0,473,463,479,481],
[439,460,450,464,476,417,0,445,460,471],
[456,452,458,481,470,427,445,0,456,477],
[434,440,439,443,458,411,430,434,0,447],
[429,442,442,469,431,409,419,413,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,442,441,439,464,481,406,454,446],
[428,0,451,452,445,459,441,429,452,462],
[448,439,0,409,447,465,461,406,423,446],
[449,438,481,0,461,461,434,439,440,446],
[451,445,443,429,0,422,461,403,450,428],
[426,431,425,429,468,0,430,441,464,444],
[409,449,429,456,429,460,0,429,475,436],
[484,461,484,451,487,449,461,0,480,436],
[436,438,467,450,440,426,415,410,0,439],
[444,428,444,444,462,446,454,454,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,462,441,463,408,460,426,409,427],
[464,0,432,456,482,439,477,461,431,441],
[428,458,0,421,446,422,435,438,410,431],
[449,434,469,0,472,454,455,402,434,429],
[427,408,444,418,0,435,440,444,427,405],
[482,451,468,436,455,0,474,469,478,485],
[430,413,455,435,450,416,0,439,438,455],
[464,429,452,488,446,421,451,0,442,450],
[481,459,480,456,463,412,452,448,0,474],
[463,449,459,461,485,405,435,440,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,445,445,445,0,445,890,445,0],
[445,0,445,890,445,445,445,890,890,0],
[445,445,0,445,445,0,445,445,445,445],
[445,0,445,0,445,445,445,890,890,0],
[445,445,445,445,0,0,445,890,445,0],
[890,445,890,445,890,0,890,890,445,445],
[445,445,445,445,445,0,0,445,445,445],
[0,0,445,0,0,0,445,0,445,0],
[445,0,445,0,445,445,445,445,0,0],
[890,890,445,890,890,445,445,890,890,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,426,459,456,435,441,472,438,463],
[425,0,421,440,452,442,447,477,430,451],
[464,469,0,470,453,456,442,484,452,497],
[431,450,420,0,461,446,436,461,433,467],
[434,438,437,429,0,412,427,443,426,470],
[455,448,434,444,478,0,430,471,440,458],
[449,443,448,454,463,460,0,486,423,451],
[418,413,406,429,447,419,404,0,406,426],
[452,460,438,457,464,450,467,484,0,471],
[427,439,393,423,420,432,439,464,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,453,421,419,429,433,426,438,441],
[451,0,443,423,421,419,416,426,453,447],
[437,447,0,439,450,444,435,461,464,485],
[469,467,451,0,448,434,446,471,467,472],
[471,469,440,442,0,445,446,460,469,451],
[461,471,446,456,445,0,450,447,455,481],
[457,474,455,444,444,440,0,444,482,472],
[464,464,429,419,430,443,446,0,458,443],
[452,437,426,423,421,435,408,432,0,463],
[449,443,405,418,439,409,418,447,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,427,458,456,447,442,426,478,437],
[425,0,432,451,455,398,429,447,452,423],
[463,458,0,443,441,435,455,429,443,461],
[432,439,447,0,423,446,436,434,461,441],
[434,435,449,467,0,441,461,464,449,461],
[443,492,455,444,449,0,438,443,471,450],
[448,461,435,454,429,452,0,450,448,448],
[464,443,461,456,426,447,440,0,457,478],
[412,438,447,429,441,419,442,433,0,445],
[453,467,429,449,429,440,442,412,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,426,419,398,423,460,424,393,421],
[408,0,413,432,442,425,448,447,403,449],
[464,477,0,454,439,425,460,464,447,480],
[471,458,436,0,435,453,461,447,414,420],
[492,448,451,455,0,450,469,464,430,457],
[467,465,465,437,440,0,483,464,452,468],
[430,442,430,429,421,407,0,423,446,436],
[466,443,426,443,426,426,467,0,459,453],
[497,487,443,476,460,438,444,431,0,449],
[469,441,410,470,433,422,454,437,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,449,434,487,436,455,461,458,393],
[438,0,425,407,419,436,411,438,400,406],
[441,465,0,437,435,473,457,471,450,433],
[456,483,453,0,489,476,441,467,451,448],
[403,471,455,401,0,458,426,448,417,425],
[454,454,417,414,432,0,439,428,439,430],
[435,479,433,449,464,451,0,455,460,457],
[429,452,419,423,442,462,435,0,452,436],
[432,490,440,439,473,451,430,438,0,445],
[497,484,457,442,465,460,433,454,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,469,404,437,439,419,430,457,421],
[425,0,433,445,419,410,443,432,452,444],
[421,457,0,439,411,415,396,419,458,429],
[486,445,451,0,426,446,444,450,434,472],
[453,471,479,464,0,439,434,433,464,447],
[451,480,475,444,451,0,451,459,476,453],
[471,447,494,446,456,439,0,444,484,452],
[460,458,471,440,457,431,446,0,495,496],
[433,438,432,456,426,414,406,395,0,426],
[469,446,461,418,443,437,438,394,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,447,451,438,477,477,456,413,440],
[420,0,453,436,409,444,462,434,425,423],
[443,437,0,465,449,495,483,440,402,447],
[439,454,425,0,385,462,458,454,426,456],
[452,481,441,505,0,463,511,479,473,466],
[413,446,395,428,427,0,444,447,427,442],
[413,428,407,432,379,446,0,423,406,397],
[434,456,450,436,411,443,467,0,411,438],
[477,465,488,464,417,463,484,479,0,452],
[450,467,443,434,424,448,493,452,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,467,493,441,412,452,472,447,471],
[415,0,434,442,468,441,484,465,381,443],
[423,456,0,482,451,403,428,470,385,409],
[397,448,408,0,419,431,433,439,399,482],
[449,422,439,471,0,466,471,426,411,453],
[478,449,487,459,424,0,453,429,447,412],
[438,406,462,457,419,437,0,435,445,438],
[418,425,420,451,464,461,455,0,422,432],
[443,509,505,491,479,443,445,468,0,481],
[419,447,481,408,437,478,452,458,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,392,359,341,389,457,432,456,428],
[415,0,360,407,373,392,492,367,408,347],
[498,530,0,411,421,455,529,525,414,447],
[531,483,479,0,449,437,526,520,485,456],
[549,517,469,441,0,427,527,508,457,481],
[501,498,435,453,463,0,499,492,489,473],
[433,398,361,364,363,391,0,390,395,393],
[458,523,365,370,382,398,500,0,399,392],
[434,482,476,405,433,401,495,491,0,433],
[462,543,443,434,409,417,497,498,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,472,455,437,471,546,377,402,363],
[387,0,421,367,382,381,494,277,326,315],
[418,469,0,351,346,435,476,342,364,401],
[435,523,539,0,450,484,507,414,396,453],
[453,508,544,440,0,448,512,413,472,454],
[419,509,455,406,442,0,512,455,384,405],
[344,396,414,383,378,378,0,431,380,367],
[513,613,548,476,477,435,459,0,454,386],
[488,564,526,494,418,506,510,436,0,474],
[527,575,489,437,436,485,523,504,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,448,444,462,459,420,437,455,429],
[448,0,475,438,472,461,451,465,458,463],
[442,415,0,428,437,434,416,445,452,449],
[446,452,462,0,401,437,434,410,459,419],
[428,418,453,489,0,442,420,434,454,459],
[431,429,456,453,448,0,450,449,458,427],
[470,439,474,456,470,440,0,443,487,442],
[453,425,445,480,456,441,447,0,457,466],
[435,432,438,431,436,432,403,433,0,452],
[461,427,441,471,431,463,448,424,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,460,452,426,441,444,450,487,483],
[430,0,451,473,440,447,475,457,466,493],
[430,439,0,458,435,427,430,443,463,476],
[438,417,432,0,462,431,458,447,455,455],
[464,450,455,428,0,445,456,481,482,492],
[449,443,463,459,445,0,440,445,451,479],
[446,415,460,432,434,450,0,458,450,480],
[440,433,447,443,409,445,432,0,439,446],
[403,424,427,435,408,439,440,451,0,436],
[407,397,414,435,398,411,410,444,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,385,424,413,378,451,453,408,419],
[469,0,415,425,443,413,453,418,423,402],
[505,475,0,483,449,424,479,464,431,440],
[466,465,407,0,458,424,458,452,446,417],
[477,447,441,432,0,434,450,420,459,428],
[512,477,466,466,456,0,481,452,436,440],
[439,437,411,432,440,409,0,425,425,413],
[437,472,426,438,470,438,465,0,432,447],
[482,467,459,444,431,454,465,458,0,451],
[471,488,450,473,462,450,477,443,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,470,429,446,454,497,463,421,467],
[427,0,448,440,427,450,463,425,415,392],
[420,442,0,483,455,432,480,457,452,429],
[461,450,407,0,443,430,448,457,405,440],
[444,463,435,447,0,427,480,424,426,416],
[436,440,458,460,463,0,505,417,430,436],
[393,427,410,442,410,385,0,425,391,423],
[427,465,433,433,466,473,465,0,414,445],
[469,475,438,485,464,460,499,476,0,456],
[423,498,461,450,474,454,467,445,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,413,422,509,462,421,444,371,360],
[462,0,438,445,459,504,492,476,473,412],
[477,452,0,452,507,499,436,490,432,445],
[468,445,438,0,483,491,449,469,425,393],
[381,431,383,407,0,455,420,430,352,391],
[428,386,391,399,435,0,411,382,400,364],
[469,398,454,441,470,479,0,454,442,345],
[446,414,400,421,460,508,436,0,397,435],
[519,417,458,465,538,490,448,493,0,459],
[530,478,445,497,499,526,545,455,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,416,435,428,415,448,421,416,460],
[478,0,439,432,466,452,451,453,446,476],
[474,451,0,429,433,447,460,452,449,441],
[455,458,461,0,458,475,462,456,444,474],
[462,424,457,432,0,433,434,445,434,463],
[475,438,443,415,457,0,447,460,441,459],
[442,439,430,428,456,443,0,449,428,454],
[469,437,438,434,445,430,441,0,435,465],
[474,444,441,446,456,449,462,455,0,449],
[430,414,449,416,427,431,436,425,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,449,461,468,481,444,462,472,453],
[433,0,398,443,452,448,443,428,447,416],
[441,492,0,458,456,483,463,443,474,464],
[429,447,432,0,459,443,432,442,473,429],
[422,438,434,431,0,440,433,433,467,412],
[409,442,407,447,450,0,444,435,459,434],
[446,447,427,458,457,446,0,438,458,437],
[428,462,447,448,457,455,452,0,475,441],
[418,443,416,417,423,431,432,415,0,390],
[437,474,426,461,478,456,453,449,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,442,468,476,506,386,416,422,414],
[431,0,468,451,497,490,432,456,419,458],
[448,422,0,432,467,453,407,423,440,401],
[422,439,458,0,481,486,420,392,411,418],
[414,393,423,409,0,425,390,413,412,441],
[384,400,437,404,465,0,425,354,364,402],
[504,458,483,470,500,465,0,423,429,474],
[474,434,467,498,477,536,467,0,472,471],
[468,471,450,479,478,526,461,418,0,483],
[476,432,489,472,449,488,416,419,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,443,470,470,449,443,463,468,461],
[444,0,454,464,483,459,453,479,475,454],
[447,436,0,440,477,420,439,425,439,408],
[420,426,450,0,463,433,436,455,450,454],
[420,407,413,427,0,401,422,418,429,418],
[441,431,470,457,489,0,442,432,443,441],
[447,437,451,454,468,448,0,455,456,450],
[427,411,465,435,472,458,435,0,446,441],
[422,415,451,440,461,447,434,444,0,444],
[429,436,482,436,472,449,440,449,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,425,402,416,410,437,431,436,428],
[445,0,380,405,431,399,426,459,421,409],
[465,510,0,439,464,419,502,441,424,447],
[488,485,451,0,445,446,474,461,472,474],
[474,459,426,445,0,441,456,438,442,399],
[480,491,471,444,449,0,469,448,451,444],
[453,464,388,416,434,421,0,466,446,431],
[459,431,449,429,452,442,424,0,421,435],
[454,469,466,418,448,439,444,469,0,434],
[462,481,443,416,491,446,459,455,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,403,473,493,382,460,420,490,441],
[438,0,451,445,463,432,446,478,497,519],
[487,439,0,459,485,447,472,451,520,487],
[417,445,431,0,500,459,472,457,479,481],
[397,427,405,390,0,395,453,425,464,415],
[508,458,443,431,495,0,462,484,507,482],
[430,444,418,418,437,428,0,489,418,455],
[470,412,439,433,465,406,401,0,456,447],
[400,393,370,411,426,383,472,434,0,475],
[449,371,403,409,475,408,435,443,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,457,422,413,425,429,433,434,469],
[447,0,422,413,422,414,408,447,416,425],
[433,468,0,430,424,428,436,452,435,461],
[468,477,460,0,462,436,463,470,483,469],
[477,468,466,428,0,425,431,461,443,456],
[465,476,462,454,465,0,442,446,447,478],
[461,482,454,427,459,448,0,453,453,469],
[457,443,438,420,429,444,437,0,460,473],
[456,474,455,407,447,443,437,430,0,457],
[421,465,429,421,434,412,421,417,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,446,417,455,450,444,460,458,436],
[451,0,430,435,444,440,447,455,479,470],
[444,460,0,454,450,453,462,483,477,450],
[473,455,436,0,460,453,460,460,455,447],
[435,446,440,430,0,449,454,455,482,447],
[440,450,437,437,441,0,428,440,443,455],
[446,443,428,430,436,462,0,488,477,464],
[430,435,407,430,435,450,402,0,483,425],
[432,411,413,435,408,447,413,407,0,439],
[454,420,440,443,443,435,426,465,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,480,454,477,492,448,425,483,475],
[401,0,441,465,431,443,392,366,413,437],
[410,449,0,448,451,468,411,409,434,450],
[436,425,442,0,437,455,425,398,431,451],
[413,459,439,453,0,459,372,388,471,452],
[398,447,422,435,431,0,397,382,442,442],
[442,498,479,465,518,493,0,470,505,495],
[465,524,481,492,502,508,420,0,475,467],
[407,477,456,459,419,448,385,415,0,421],
[415,453,440,439,438,448,395,423,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,457,461,435,432,443,446,452,469],
[405,0,413,440,422,425,414,422,418,440],
[433,477,0,478,444,427,432,449,444,465],
[429,450,412,0,425,420,446,431,426,444],
[455,468,446,465,0,442,440,441,439,464],
[458,465,463,470,448,0,445,452,452,478],
[447,476,458,444,450,445,0,444,424,459],
[444,468,441,459,449,438,446,0,444,467],
[438,472,446,464,451,438,466,446,0,474],
[421,450,425,446,426,412,431,423,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,432,453,403,415,431,450,422,456],
[463,0,453,448,433,416,431,468,416,420],
[458,437,0,409,454,420,411,463,447,450],
[437,442,481,0,420,431,428,458,451,445],
[487,457,436,470,0,433,465,478,436,469],
[475,474,470,459,457,0,433,501,456,481],
[459,459,479,462,425,457,0,496,475,478],
[440,422,427,432,412,389,394,0,412,427],
[468,474,443,439,454,434,415,478,0,475],
[434,470,440,445,421,409,412,463,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,486,446,443,409,435,456,489,422],
[420,0,453,428,428,419,424,432,465,435],
[404,437,0,434,423,414,415,394,429,420],
[444,462,456,0,455,415,434,448,463,443],
[447,462,467,435,0,453,431,421,476,410],
[481,471,476,475,437,0,451,461,487,446],
[455,466,475,456,459,439,0,435,478,470],
[434,458,496,442,469,429,455,0,477,430],
[401,425,461,427,414,403,412,413,0,408],
[468,455,470,447,480,444,420,460,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,406,471,429,466,512,463,503,481],
[405,0,400,434,437,439,453,435,472,457],
[484,490,0,478,455,476,481,444,468,464],
[419,456,412,0,411,449,429,451,455,421],
[461,453,435,479,0,443,446,461,450,440],
[424,451,414,441,447,0,446,441,451,437],
[378,437,409,461,444,444,0,462,463,470],
[427,455,446,439,429,449,428,0,476,437],
[387,418,422,435,440,439,427,414,0,423],
[409,433,426,469,450,453,420,453,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,472,415,428,433,492,449,415,480],
[407,0,406,469,415,439,457,413,406,427],
[418,484,0,449,470,473,465,464,391,434],
[475,421,441,0,410,421,490,432,390,437],
[462,475,420,480,0,390,490,472,473,466],
[457,451,417,469,500,0,452,442,434,445],
[398,433,425,400,400,438,0,428,412,428],
[441,477,426,458,418,448,462,0,447,429],
[475,484,499,500,417,456,478,443,0,482],
[410,463,456,453,424,445,462,461,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,429,461,440,471,434,394,475,468],
[449,0,445,454,469,392,448,486,537,424],
[461,445,0,473,455,434,436,363,485,452],
[429,436,417,0,401,413,383,472,467,469],
[450,421,435,489,0,413,377,424,473,447],
[419,498,456,477,477,0,431,384,520,467],
[456,442,454,507,513,459,0,424,475,461],
[496,404,527,418,466,506,466,0,442,489],
[415,353,405,423,417,370,415,448,0,422],
[422,466,438,421,443,423,429,401,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,461,461,493,445,462,451,467,467],
[415,0,435,449,464,425,444,435,458,463],
[429,455,0,446,476,454,475,438,453,460],
[429,441,444,0,467,421,448,444,454,432],
[397,426,414,423,0,433,433,442,437,437],
[445,465,436,469,457,0,461,440,465,431],
[428,446,415,442,457,429,0,406,444,444],
[439,455,452,446,448,450,484,0,459,458],
[423,432,437,436,453,425,446,431,0,472],
[423,427,430,458,453,459,446,432,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,405,403,406,454,408,445,431,420],
[478,0,417,416,430,450,429,469,455,433],
[485,473,0,452,460,476,446,493,452,445],
[487,474,438,0,447,460,456,502,482,478],
[484,460,430,443,0,473,474,494,458,459],
[436,440,414,430,417,0,405,442,414,435],
[482,461,444,434,416,485,0,484,457,467],
[445,421,397,388,396,448,406,0,399,420],
[459,435,438,408,432,476,433,491,0,457],
[470,457,445,412,431,455,423,470,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,442,425,425,432,467,436,452,432],
[434,0,435,423,424,415,455,423,413,421],
[448,455,0,429,436,451,436,432,452,437],
[465,467,461,0,428,416,463,438,466,443],
[465,466,454,462,0,438,476,453,453,445],
[458,475,439,474,452,0,450,463,465,452],
[423,435,454,427,414,440,0,429,440,427],
[454,467,458,452,437,427,461,0,458,431],
[438,477,438,424,437,425,450,432,0,412],
[458,469,453,447,445,438,463,459,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,476,463,461,446,445,444,455,470],
[420,0,471,432,423,438,437,455,441,421],
[414,419,0,417,419,445,439,432,426,434],
[427,458,473,0,454,451,455,472,453,479],
[429,467,471,436,0,458,453,462,454,444],
[444,452,445,439,432,0,429,430,441,437],
[445,453,451,435,437,461,0,441,451,446],
[446,435,458,418,428,460,449,0,426,426],
[435,449,464,437,436,449,439,464,0,452],
[420,469,456,411,446,453,444,464,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,452,442,440,477,430,449,467,471],
[467,0,438,443,486,461,439,434,468,473],
[438,452,0,437,444,439,431,421,471,463],
[448,447,453,0,470,444,446,416,464,453],
[450,404,446,420,0,431,402,417,437,442],
[413,429,451,446,459,0,432,418,457,434],
[460,451,459,444,488,458,0,449,470,458],
[441,456,469,474,473,472,441,0,473,459],
[423,422,419,426,453,433,420,417,0,442],
[419,417,427,437,448,456,432,431,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,427,380,428,494,446,429,470,382],
[438,0,466,443,445,380,509,446,484,399],
[463,424,0,404,489,428,505,515,489,445],
[510,447,486,0,443,512,439,467,577,532],
[462,445,401,447,0,405,420,470,509,423],
[396,510,462,378,485,0,443,510,464,464],
[444,381,385,451,470,447,0,408,538,381],
[461,444,375,423,420,380,482,0,531,447],
[420,406,401,313,381,426,352,359,0,319],
[508,491,445,358,467,426,509,443,571,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,493,456,435,467,484,477,440,505],
[425,0,464,450,453,474,478,468,467,481],
[397,426,0,433,473,422,423,438,440,464],
[434,440,457,0,461,442,452,457,402,466],
[455,437,417,429,0,408,446,449,440,445],
[423,416,468,448,482,0,432,474,430,457],
[406,412,467,438,444,458,0,481,438,468],
[413,422,452,433,441,416,409,0,412,455],
[450,423,450,488,450,460,452,478,0,453],
[385,409,426,424,445,433,422,435,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,419,397,451,448,420,414,423,420],
[459,0,422,446,499,465,438,448,449,437],
[471,468,0,450,498,474,452,478,451,438],
[493,444,440,0,488,471,483,455,473,469],
[439,391,392,402,0,417,416,398,414,406],
[442,425,416,419,473,0,423,408,455,419],
[470,452,438,407,474,467,0,445,448,452],
[476,442,412,435,492,482,445,0,466,442],
[467,441,439,417,476,435,442,424,0,414],
[470,453,452,421,484,471,438,448,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,434,466,430,446,432,434,442,458],
[463,0,437,448,436,467,448,453,469,473],
[456,453,0,461,448,450,448,443,471,459],
[424,442,429,0,446,455,435,434,426,440],
[460,454,442,444,0,465,441,438,463,454],
[444,423,440,435,425,0,443,433,445,465],
[458,442,442,455,449,447,0,441,470,468],
[456,437,447,456,452,457,449,0,448,468],
[448,421,419,464,427,445,420,442,0,442],
[432,417,431,450,436,425,422,422,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,462,458,459,455,456,481,444,448],
[420,0,441,417,423,420,451,461,418,410],
[428,449,0,450,453,444,468,462,447,451],
[432,473,440,0,450,411,426,454,418,439],
[431,467,437,440,0,446,465,452,424,452],
[435,470,446,479,444,0,451,478,415,474],
[434,439,422,464,425,439,0,450,420,438],
[409,429,428,436,438,412,440,0,415,436],
[446,472,443,472,466,475,470,475,0,461],
[442,480,439,451,438,416,452,454,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,539,484,495,457,465,502,475,548],
[461,0,517,498,488,496,485,458,415,555],
[351,373,0,382,378,397,367,388,356,412],
[406,392,508,0,450,484,415,439,406,473],
[395,402,512,440,0,444,389,440,408,497],
[433,394,493,406,446,0,421,434,429,467],
[425,405,523,475,501,469,0,477,446,524],
[388,432,502,451,450,456,413,0,377,469],
[415,475,534,484,482,461,444,513,0,547],
[342,335,478,417,393,423,366,421,343,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,450,442,461,431,446,449,446,464],
[437,0,480,461,463,463,450,457,435,474],
[440,410,0,430,409,420,405,403,414,473],
[448,429,460,0,456,418,436,451,491,462],
[429,427,481,434,0,449,422,449,460,467],
[459,427,470,472,441,0,451,446,450,451],
[444,440,485,454,468,439,0,456,465,457],
[441,433,487,439,441,444,434,0,474,449],
[444,455,476,399,430,440,425,416,0,457],
[426,416,417,428,423,439,433,441,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,456,455,459,460,447,444,448,447],
[451,0,444,429,418,427,396,413,436,427],
[434,446,0,456,456,459,422,428,446,443],
[435,461,434,0,449,416,439,453,446,434],
[431,472,434,441,0,455,429,441,427,439],
[430,463,431,474,435,0,447,421,445,437],
[443,494,468,451,461,443,0,455,466,461],
[446,477,462,437,449,469,435,0,446,459],
[442,454,444,444,463,445,424,444,0,454],
[443,463,447,456,451,453,429,431,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,383,369,378,467,397,409,425,457],
[476,0,442,429,437,478,422,465,422,485],
[507,448,0,455,489,482,443,453,442,489],
[521,461,435,0,459,474,452,434,438,514],
[512,453,401,431,0,418,470,437,470,491],
[423,412,408,416,472,0,467,426,423,469],
[493,468,447,438,420,423,0,464,417,488],
[481,425,437,456,453,464,426,0,408,458],
[465,468,448,452,420,467,473,482,0,519],
[433,405,401,376,399,421,402,432,371,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,389,523,457,458,481,487,457,498],
[431,0,419,433,444,462,393,454,428,443],
[501,471,0,473,429,482,445,458,451,457],
[367,457,417,0,422,454,379,453,378,362],
[433,446,461,468,0,474,430,475,446,449],
[432,428,408,436,416,0,425,405,408,394],
[409,497,445,511,460,465,0,483,471,414],
[403,436,432,437,415,485,407,0,399,424],
[433,462,439,512,444,482,419,491,0,444],
[392,447,433,528,441,496,476,466,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,452,427,439,441,432,432,437,443],
[442,0,447,424,454,454,442,438,427,441],
[438,443,0,422,445,462,449,453,450,437],
[463,466,468,0,463,467,451,447,444,438],
[451,436,445,427,0,430,444,425,442,430],
[449,436,428,423,460,0,434,450,435,448],
[458,448,441,439,446,456,0,452,453,465],
[458,452,437,443,465,440,438,0,418,456],
[453,463,440,446,448,455,437,472,0,452],
[447,449,453,452,460,442,425,434,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,451,425,407,425,423,432,428,434],
[463,0,483,433,448,460,442,465,415,455],
[439,407,0,404,435,433,428,430,421,413],
[465,457,486,0,450,464,473,469,440,451],
[483,442,455,440,0,476,464,448,445,444],
[465,430,457,426,414,0,433,431,425,446],
[467,448,462,417,426,457,0,449,444,447],
[458,425,460,421,442,459,441,0,433,446],
[462,475,469,450,445,465,446,457,0,444],
[456,435,477,439,446,444,443,444,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,390,417,439,537,504,415,488,509],
[378,0,470,432,453,492,421,409,443,412],
[500,420,0,450,420,496,467,404,432,443],
[473,458,440,0,472,508,431,448,497,485],
[451,437,470,418,0,512,456,349,458,419],
[353,398,394,382,378,0,452,364,391,429],
[386,469,423,459,434,438,0,393,429,510],
[475,481,486,442,541,526,497,0,495,503],
[402,447,458,393,432,499,461,395,0,452],
[381,478,447,405,471,461,380,387,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,448,448,452,434,456,462,415,438],
[451,0,445,457,472,430,450,474,420,453],
[442,445,0,460,425,436,447,464,428,445],
[442,433,430,0,424,439,456,435,393,434],
[438,418,465,466,0,439,455,451,432,436],
[456,460,454,451,451,0,472,456,441,447],
[434,440,443,434,435,418,0,427,431,458],
[428,416,426,455,439,434,463,0,420,431],
[475,470,462,497,458,449,459,470,0,445],
[452,437,445,456,454,443,432,459,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,520,463,387,415,455,459,439,435],
[436,0,460,455,473,417,436,419,428,431],
[370,430,0,407,363,395,424,376,389,431],
[427,435,483,0,413,424,447,422,428,452],
[503,417,527,477,0,473,504,460,467,476],
[475,473,495,466,417,0,483,426,460,475],
[435,454,466,443,386,407,0,406,440,440],
[431,471,514,468,430,464,484,0,389,446],
[451,462,501,462,423,430,450,501,0,424],
[455,459,459,438,414,415,450,444,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,441,479,455,451,467,452,485,447],
[442,0,397,451,459,431,457,439,442,436],
[449,493,0,448,473,435,467,450,477,441],
[411,439,442,0,431,448,435,463,457,441],
[435,431,417,459,0,451,446,439,439,453],
[439,459,455,442,439,0,443,456,440,456],
[423,433,423,455,444,447,0,458,462,430],
[438,451,440,427,451,434,432,0,453,460],
[405,448,413,433,451,450,428,437,0,438],
[443,454,449,449,437,434,460,430,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,447,429,447,430,431,465,434,445],
[426,0,444,459,474,433,472,501,453,440],
[443,446,0,451,431,442,426,477,448,450],
[461,431,439,0,456,430,455,493,455,446],
[443,416,459,434,0,423,444,466,446,426],
[460,457,448,460,467,0,462,487,452,441],
[459,418,464,435,446,428,0,484,453,413],
[425,389,413,397,424,403,406,0,404,379],
[456,437,442,435,444,438,437,486,0,453],
[445,450,440,444,464,449,477,511,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,427,432,421,459,448,461,434,436],
[431,0,446,441,440,443,455,467,417,443],
[463,444,0,449,455,461,457,462,450,463],
[458,449,441,0,434,452,463,460,441,428],
[469,450,435,456,0,461,452,477,460,447],
[431,447,429,438,429,0,437,452,433,422],
[442,435,433,427,438,453,0,444,439,429],
[429,423,428,430,413,438,446,0,425,430],
[456,473,440,449,430,457,451,465,0,427],
[454,447,427,462,443,468,461,460,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,445,394,396,396,435,415,389,412],
[472,0,478,428,435,493,459,465,424,452],
[445,412,0,424,400,427,437,402,414,433],
[496,462,466,0,420,459,468,438,441,484],
[494,455,490,470,0,475,450,443,428,497],
[494,397,463,431,415,0,455,454,437,464],
[455,431,453,422,440,435,0,415,471,477],
[475,425,488,452,447,436,475,0,432,473],
[501,466,476,449,462,453,419,458,0,473],
[478,438,457,406,393,426,413,417,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,475,439,396,515,482,436,446,411],
[421,0,441,408,384,497,417,410,430,394],
[415,449,0,420,446,509,484,430,482,413],
[451,482,470,0,417,505,460,450,464,446],
[494,506,444,473,0,524,468,495,495,451],
[375,393,381,385,366,0,448,407,420,366],
[408,473,406,430,422,442,0,441,401,393],
[454,480,460,440,395,483,449,0,461,435],
[444,460,408,426,395,470,489,429,0,442],
[479,496,477,444,439,524,497,455,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,470,506,486,470,485,439,492,458],
[447,0,443,470,493,481,482,471,475,440],
[420,447,0,451,487,420,443,411,515,431],
[384,420,439,0,454,442,450,440,461,421],
[404,397,403,436,0,430,466,410,497,431],
[420,409,470,448,460,0,454,433,484,413],
[405,408,447,440,424,436,0,429,448,430],
[451,419,479,450,480,457,461,0,530,427],
[398,415,375,429,393,406,442,360,0,366],
[432,450,459,469,459,477,460,463,524,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,446,427,491,434,441,410,476,440],
[425,0,442,416,471,409,447,398,415,426],
[444,448,0,444,471,467,426,389,454,397],
[463,474,446,0,480,424,456,393,514,447],
[399,419,419,410,0,401,412,371,388,409],
[456,481,423,466,489,0,485,454,494,456],
[449,443,464,434,478,405,0,411,442,441],
[480,492,501,497,519,436,479,0,480,478],
[414,475,436,376,502,396,448,410,0,404],
[450,464,493,443,481,434,449,412,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,414,429,432,477,426,437,437,435],
[470,0,439,439,449,449,453,459,463,470],
[476,451,0,428,441,466,411,445,426,452],
[461,451,462,0,439,449,434,455,448,460],
[458,441,449,451,0,478,456,437,450,448],
[413,441,424,441,412,0,435,446,438,432],
[464,437,479,456,434,455,0,456,484,469],
[453,431,445,435,453,444,434,0,431,451],
[453,427,464,442,440,452,406,459,0,455],
[455,420,438,430,442,458,421,439,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,453,441,452,399,437,512,417,400],
[464,0,428,388,390,363,413,417,392,406],
[437,462,0,459,447,395,499,473,376,444],
[449,502,431,0,483,426,498,586,441,489],
[438,500,443,407,0,433,496,550,480,457],
[491,527,495,464,457,0,453,511,486,412],
[453,477,391,392,394,437,0,499,400,355],
[378,473,417,304,340,379,391,0,373,382],
[473,498,514,449,410,404,490,517,0,439],
[490,484,446,401,433,478,535,508,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,439,411,446,413,418,454,413,447],
[451,0,458,442,435,438,398,461,426,434],
[451,432,0,440,440,453,486,450,439,433],
[479,448,450,0,496,451,437,458,424,489],
[444,455,450,394,0,442,447,459,434,411],
[477,452,437,439,448,0,458,472,440,437],
[472,492,404,453,443,432,0,459,423,425],
[436,429,440,432,431,418,431,0,426,400],
[477,464,451,466,456,450,467,464,0,429],
[443,456,457,401,479,453,465,490,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,469,478,481,426,458,436,456,464],
[420,0,442,449,435,434,443,409,446,437],
[421,448,0,437,440,418,442,432,485,446],
[412,441,453,0,474,454,435,408,462,441],
[409,455,450,416,0,441,442,413,430,458],
[464,456,472,436,449,0,439,426,476,436],
[432,447,448,455,448,451,0,453,480,479],
[454,481,458,482,477,464,437,0,475,473],
[434,444,405,428,460,414,410,415,0,431],
[426,453,444,449,432,454,411,417,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,464,477,467,440,485,501,473,479],
[443,0,421,450,455,437,448,476,444,465],
[426,469,0,465,465,461,450,483,481,490],
[413,440,425,0,456,438,421,480,452,443],
[423,435,425,434,0,392,414,435,431,459],
[450,453,429,452,498,0,444,468,503,506],
[405,442,440,469,476,446,0,487,464,468],
[389,414,407,410,455,422,403,0,428,423],
[417,446,409,438,459,387,426,462,0,428],
[411,425,400,447,431,384,422,467,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,446,447,463,474,447,438,450,456],
[449,0,440,435,454,454,447,455,455,440],
[444,450,0,446,447,463,433,440,448,437],
[443,455,444,0,453,457,425,425,436,423],
[427,436,443,437,0,465,429,452,448,432],
[416,436,427,433,425,0,429,417,423,421],
[443,443,457,465,461,461,0,444,468,440],
[452,435,450,465,438,473,446,0,466,447],
[440,435,442,454,442,467,422,424,0,425],
[434,450,453,467,458,469,450,443,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,439,443,455,454,430,445,438,444],
[463,0,475,448,471,439,468,474,474,458],
[451,415,0,429,455,439,465,439,406,440],
[447,442,461,0,445,454,473,436,457,436],
[435,419,435,445,0,446,443,449,425,446],
[436,451,451,436,444,0,460,452,429,440],
[460,422,425,417,447,430,0,436,441,402],
[445,416,451,454,441,438,454,0,452,425],
[452,416,484,433,465,461,449,438,0,454],
[446,432,450,454,444,450,488,465,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,465,441,457,442,433,432,472,479],
[433,0,433,456,449,451,441,452,466,470],
[425,457,0,433,430,449,411,427,450,469],
[449,434,457,0,441,443,439,434,451,471],
[433,441,460,449,0,448,437,431,457,476],
[448,439,441,447,442,0,448,439,432,454],
[457,449,479,451,453,442,0,451,449,473],
[458,438,463,456,459,451,439,0,458,461],
[418,424,440,439,433,458,441,432,0,463],
[411,420,421,419,414,436,417,429,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,447,453,430,447,451,449,467,470],
[423,0,434,466,424,417,419,434,419,440],
[443,456,0,429,436,444,422,425,440,441],
[437,424,461,0,429,442,446,410,436,424],
[460,466,454,461,0,454,457,415,460,458],
[443,473,446,448,436,0,434,416,437,452],
[439,471,468,444,433,456,0,442,460,430],
[441,456,465,480,475,474,448,0,451,450],
[423,471,450,454,430,453,430,439,0,450],
[420,450,449,466,432,438,460,440,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,474,474,432,462,439,456,440,430],
[479,0,496,468,466,447,476,455,439,499],
[416,394,0,405,407,417,432,453,397,441],
[416,422,485,0,462,439,439,431,431,452],
[458,424,483,428,0,459,451,458,436,436],
[428,443,473,451,431,0,456,418,416,423],
[451,414,458,451,439,434,0,436,424,438],
[434,435,437,459,432,472,454,0,451,430],
[450,451,493,459,454,474,466,439,0,419],
[460,391,449,438,454,467,452,460,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,433,469,458,453,447,436,430,458],
[438,0,430,462,467,418,467,458,428,416],
[457,460,0,454,442,434,457,463,446,418],
[421,428,436,0,447,440,426,434,430,410],
[432,423,448,443,0,440,455,436,418,450],
[437,472,456,450,450,0,459,411,431,439],
[443,423,433,464,435,431,0,406,446,429],
[454,432,427,456,454,479,484,0,436,444],
[460,462,444,460,472,459,444,454,0,441],
[432,474,472,480,440,451,461,446,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,471,472,481,507,516,438,577,465],
[382,0,442,438,453,475,442,440,476,380],
[419,448,0,462,443,457,511,434,493,446],
[418,452,428,0,505,468,507,477,505,429],
[409,437,447,385,0,444,430,463,464,404],
[383,415,433,422,446,0,472,411,451,419],
[374,448,379,383,460,418,0,455,466,425],
[452,450,456,413,427,479,435,0,484,459],
[313,414,397,385,426,439,424,406,0,357],
[425,510,444,461,486,471,465,431,533,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,401,423,419,411,426,406,411,428,418],
[489,0,470,429,427,438,445,460,464,440],
[467,420,0,408,427,470,419,446,456,452],
[471,461,482,0,416,463,455,459,485,454],
[479,463,463,474,0,471,443,453,439,451],
[464,452,420,427,419,0,437,444,453,444],
[484,445,471,435,447,453,0,464,454,445],
[479,430,444,431,437,446,426,0,456,442],
[462,426,434,405,451,437,436,434,0,423],
[472,450,438,436,439,446,445,448,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,437,409,416,466,449,438,440,408],
[427,0,483,446,422,508,431,449,450,518],
[453,407,0,436,402,488,459,411,438,488],
[481,444,454,0,419,522,455,430,470,479],
[474,468,488,471,0,521,439,435,491,490],
[424,382,402,368,369,0,402,406,433,416],
[441,459,431,435,451,488,0,462,433,450],
[452,441,479,460,455,484,428,0,518,513],
[450,440,452,420,399,457,457,372,0,465],
[482,372,402,411,400,474,440,377,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,449,443,446,458,468,460,456,440],
[436,0,441,450,437,439,462,445,455,452],
[441,449,0,457,451,442,443,449,465,461],
[447,440,433,0,450,436,440,457,444,448],
[444,453,439,440,0,436,447,455,452,448],
[432,451,448,454,454,0,464,455,460,463],
[422,428,447,450,443,426,0,442,441,442],
[430,445,441,433,435,435,448,0,464,448],
[434,435,425,446,438,430,449,426,0,435],
[450,438,429,442,442,427,448,442,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,458,441,482,449,431,516,525,451],
[398,0,488,405,515,406,424,435,474,467],
[432,402,0,388,465,397,438,559,439,419],
[449,485,502,0,425,399,440,470,500,488],
[408,375,425,465,0,445,397,478,445,394],
[441,484,493,491,445,0,445,484,489,424],
[459,466,452,450,493,445,0,528,499,489],
[374,455,331,420,412,406,362,0,400,455],
[365,416,451,390,445,401,391,490,0,385],
[439,423,471,402,496,466,401,435,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,459,472,456,431,445,476,409,416],
[441,0,421,426,463,413,437,460,405,389],
[431,469,0,446,460,414,436,417,445,440],
[418,464,444,0,452,414,420,441,403,423],
[434,427,430,438,0,429,455,429,434,415],
[459,477,476,476,461,0,425,436,471,491],
[445,453,454,470,435,465,0,421,444,441],
[414,430,473,449,461,454,469,0,403,413],
[481,485,445,487,456,419,446,487,0,419],
[474,501,450,467,475,399,449,477,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,435,485,488,455,433,486,465,467],
[437,0,474,503,486,449,487,495,474,428],
[455,416,0,475,464,415,445,440,448,448],
[405,387,415,0,455,398,410,441,410,436],
[402,404,426,435,0,414,422,443,424,412],
[435,441,475,492,476,0,432,499,448,452],
[457,403,445,480,468,458,0,476,465,449],
[404,395,450,449,447,391,414,0,420,437],
[425,416,442,480,466,442,425,470,0,435],
[423,462,442,454,478,438,441,453,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,460,472,467,450,463,430,452,427],
[435,0,446,436,452,430,429,440,424,434],
[430,444,0,428,488,454,477,421,434,457],
[418,454,462,0,469,496,493,468,442,438],
[423,438,402,421,0,442,448,436,461,387],
[440,460,436,394,448,0,479,434,433,415],
[427,461,413,397,442,411,0,443,425,413],
[460,450,469,422,454,456,447,0,431,429],
[438,466,456,448,429,457,465,459,0,432],
[463,456,433,452,503,475,477,461,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,459,478,462,450,458,458,441,457],
[434,0,460,462,463,436,459,449,433,447],
[431,430,0,453,431,405,430,442,426,432],
[412,428,437,0,442,441,430,445,432,451],
[428,427,459,448,0,420,434,444,423,424],
[440,454,485,449,470,0,431,452,452,430],
[432,431,460,460,456,459,0,439,463,446],
[432,441,448,445,446,438,451,0,438,449],
[449,457,464,458,467,438,427,452,0,444],
[433,443,458,439,466,460,444,441,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,480,455,467,477,439,449,456,470],
[448,0,469,440,465,437,477,464,456,453],
[410,421,0,477,438,451,453,437,442,449],
[435,450,413,0,433,382,450,434,412,414],
[423,425,452,457,0,407,464,453,456,451],
[413,453,439,508,483,0,441,456,433,441],
[451,413,437,440,426,449,0,430,436,427],
[441,426,453,456,437,434,460,0,425,449],
[434,434,448,478,434,457,454,465,0,427],
[420,437,441,476,439,449,463,441,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,456,445,479,451,438,430,439,462],
[459,0,477,429,479,470,460,464,438,519],
[434,413,0,409,459,441,456,458,430,475],
[445,461,481,0,498,458,423,475,474,478],
[411,411,431,392,0,429,428,413,407,418],
[439,420,449,432,461,0,430,437,441,485],
[452,430,434,467,462,460,0,452,440,483],
[460,426,432,415,477,453,438,0,444,458],
[451,452,460,416,483,449,450,446,0,495],
[428,371,415,412,472,405,407,432,395,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,445,462,463,443,441,435,432,440],
[457,0,462,465,462,436,462,445,452,465],
[445,428,0,461,451,451,456,458,433,464],
[428,425,429,0,438,424,423,429,441,433],
[427,428,439,452,0,419,425,432,426,433],
[447,454,439,466,471,0,474,439,462,447],
[449,428,434,467,465,416,0,442,433,436],
[455,445,432,461,458,451,448,0,437,439],
[458,438,457,449,464,428,457,453,0,444],
[450,425,426,457,457,443,454,451,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,492,418,467,464,454,468,454,496],
[434,0,474,446,467,433,441,434,454,470],
[398,416,0,422,425,447,418,422,420,439],
[472,444,468,0,464,468,463,432,456,466],
[423,423,465,426,0,446,422,434,422,471],
[426,457,443,422,444,0,420,424,421,462],
[436,449,472,427,468,470,0,432,454,461],
[422,456,468,458,456,466,458,0,463,454],
[436,436,470,434,468,469,436,427,0,455],
[394,420,451,424,419,428,429,436,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,469,497,416,409,422,432,483,471],
[494,0,533,517,481,426,467,464,485,411],
[421,357,0,476,438,423,432,421,459,381],
[393,373,414,0,447,406,399,454,450,386],
[474,409,452,443,0,465,427,446,412,385],
[481,464,467,484,425,0,449,436,471,464],
[468,423,458,491,463,441,0,455,503,445],
[458,426,469,436,444,454,435,0,463,409],
[407,405,431,440,478,419,387,427,0,414],
[419,479,509,504,505,426,445,481,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,437,414,434,428,439,430,431,437],
[464,0,446,426,443,456,455,433,454,446],
[453,444,0,435,438,449,441,428,462,461],
[476,464,455,0,459,444,470,454,464,452],
[456,447,452,431,0,454,456,455,470,448],
[462,434,441,446,436,0,453,438,467,454],
[451,435,449,420,434,437,0,461,435,431],
[460,457,462,436,435,452,429,0,456,466],
[459,436,428,426,420,423,455,434,0,429],
[453,444,429,438,442,436,459,424,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,435,450,447,444,469,446,445,435],
[452,0,417,409,411,443,473,418,449,429],
[455,473,0,470,433,492,470,443,463,450],
[440,481,420,0,441,430,448,459,460,446],
[443,479,457,449,0,449,478,435,480,441],
[446,447,398,460,441,0,466,421,459,455],
[421,417,420,442,412,424,0,413,441,436],
[444,472,447,431,455,469,477,0,471,460],
[445,441,427,430,410,431,449,419,0,445],
[455,461,440,444,449,435,454,430,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,375,412,387,403,417,401,458,425,379],
[515,0,521,416,474,436,472,465,473,438],
[478,369,0,414,422,385,431,458,465,406],
[503,474,476,0,450,435,448,430,485,403],
[487,416,468,440,0,451,463,498,474,424],
[473,454,505,455,439,0,444,437,469,453],
[489,418,459,442,427,446,0,460,428,436],
[432,425,432,460,392,453,430,0,462,445],
[465,417,425,405,416,421,462,428,0,402],
[511,452,484,487,466,437,454,445,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,455,433,430,432,439,418,437,420],
[454,0,451,459,441,440,440,454,438,431],
[435,439,0,441,444,431,437,415,448,419],
[457,431,449,0,428,428,438,414,450,422],
[460,449,446,462,0,437,454,410,441,438],
[458,450,459,462,453,0,460,430,454,425],
[451,450,453,452,436,430,0,406,431,425],
[472,436,475,476,480,460,484,0,469,448],
[453,452,442,440,449,436,459,421,0,428],
[470,459,471,468,452,465,465,442,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,464,493,452,435,458,461,452,461],
[437,0,435,442,417,438,416,457,457,441],
[426,455,0,438,421,411,441,457,438,410],
[397,448,452,0,429,420,443,430,465,450],
[438,473,469,461,0,450,468,450,480,433],
[455,452,479,470,440,0,477,484,477,446],
[432,474,449,447,422,413,0,459,480,435],
[429,433,433,460,440,406,431,0,473,445],
[438,433,452,425,410,413,410,417,0,391],
[429,449,480,440,457,444,455,445,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,501,458,490,490,487,427,470,465],
[462,0,464,496,422,498,510,522,456,514],
[389,426,0,459,414,434,477,409,373,436],
[432,394,431,0,396,425,399,449,480,454],
[400,468,476,494,0,433,450,419,436,491],
[400,392,456,465,457,0,484,425,510,481],
[403,380,413,491,440,406,0,430,368,435],
[463,368,481,441,471,465,460,0,388,492],
[420,434,517,410,454,380,522,502,0,476],
[425,376,454,436,399,409,455,398,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,477,452,438,443,446,456,437,429],
[464,0,482,437,454,454,431,470,437,461],
[413,408,0,431,407,425,451,407,437,395],
[438,453,459,0,433,469,451,453,441,427],
[452,436,483,457,0,426,449,452,462,425],
[447,436,465,421,464,0,449,426,425,441],
[444,459,439,439,441,441,0,432,429,432],
[434,420,483,437,438,464,458,0,458,425],
[453,453,453,449,428,465,461,432,0,450],
[461,429,495,463,465,449,458,465,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,492,408,408,495,480,408,444,454],
[481,0,504,431,470,500,508,457,504,451],
[398,386,0,351,396,420,428,393,414,407],
[482,459,539,0,467,496,518,443,512,463],
[482,420,494,423,0,469,507,400,472,431],
[395,390,470,394,421,0,468,405,428,417],
[410,382,462,372,383,422,0,393,440,379],
[482,433,497,447,490,485,497,0,472,449],
[446,386,476,378,418,462,450,418,0,428],
[436,439,483,427,459,473,511,441,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,451,449,445,475,453,443,430,452],
[444,0,454,463,453,484,453,447,445,467],
[439,436,0,444,454,451,427,439,434,447],
[441,427,446,0,433,438,434,435,428,447],
[445,437,436,457,0,459,422,425,437,450],
[415,406,439,452,431,0,425,422,426,423],
[437,437,463,456,468,465,0,453,443,443],
[447,443,451,455,465,468,437,0,448,472],
[460,445,456,462,453,464,447,442,0,445],
[438,423,443,443,440,467,447,418,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,455,480,438,459,453,473,455,485],
[443,0,436,452,438,450,452,404,439,474],
[435,454,0,447,471,420,459,447,438,460],
[410,438,443,0,460,408,406,413,420,422],
[452,452,419,430,0,398,430,413,448,439],
[431,440,470,482,492,0,461,495,449,491],
[437,438,431,484,460,429,0,432,470,463],
[417,486,443,477,477,395,458,0,453,461],
[435,451,452,470,442,441,420,437,0,470],
[405,416,430,468,451,399,427,429,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,445,438,425,427,423,435,464,455],
[443,0,453,432,415,426,408,448,420,439],
[445,437,0,436,412,441,458,450,434,433],
[452,458,454,0,420,419,434,447,445,450],
[465,475,478,470,0,461,467,432,459,461],
[463,464,449,471,429,0,448,449,466,438],
[467,482,432,456,423,442,0,469,479,454],
[455,442,440,443,458,441,421,0,445,446],
[426,470,456,445,431,424,411,445,0,447],
[435,451,457,440,429,452,436,444,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,462,467,429,451,464,448,439,438],
[451,0,483,472,457,450,441,456,453,423],
[428,407,0,438,426,427,452,453,448,417],
[423,418,452,0,436,436,441,443,437,435],
[461,433,464,454,0,458,456,471,441,443],
[439,440,463,454,432,0,454,464,443,413],
[426,449,438,449,434,436,0,453,426,419],
[442,434,437,447,419,426,437,0,444,457],
[451,437,442,453,449,447,464,446,0,434],
[452,467,473,455,447,477,471,433,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,451,453,452,445,443,468,450,452],
[446,0,424,424,447,430,446,449,436,446],
[439,466,0,424,430,444,469,468,461,442],
[437,466,466,0,455,449,462,488,468,446],
[438,443,460,435,0,435,454,477,445,436],
[445,460,446,441,455,0,471,472,441,437],
[447,444,421,428,436,419,0,443,438,437],
[422,441,422,402,413,418,447,0,443,435],
[440,454,429,422,445,449,452,447,0,422],
[438,444,448,444,454,453,453,455,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,442,470,451,494,466,403,421,461],
[439,0,424,450,418,438,454,398,424,423],
[448,466,0,452,442,452,463,458,427,464],
[420,440,438,0,388,467,412,482,455,472],
[439,472,448,502,0,498,458,427,454,483],
[396,452,438,423,392,0,396,432,411,443],
[424,436,427,478,432,494,0,474,416,438],
[487,492,432,408,463,458,416,0,442,445],
[469,466,463,435,436,479,474,448,0,431],
[429,467,426,418,407,447,452,445,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,459,457,450,445,427,462,451,446],
[466,0,473,460,423,470,457,445,449,442],
[431,417,0,450,437,452,424,445,449,434],
[433,430,440,0,455,446,406,447,449,442],
[440,467,453,435,0,454,421,472,453,425],
[445,420,438,444,436,0,435,441,416,432],
[463,433,466,484,469,455,0,483,462,481],
[428,445,445,443,418,449,407,0,438,445],
[439,441,441,441,437,474,428,452,0,450],
[444,448,456,448,465,458,409,445,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,440,436,405,410,442,420,430,442],
[465,0,462,429,451,434,453,432,453,463],
[450,428,0,417,430,388,422,426,448,425],
[454,461,473,0,438,428,453,451,485,440],
[485,439,460,452,0,432,464,429,473,458],
[480,456,502,462,458,0,477,440,485,469],
[448,437,468,437,426,413,0,439,459,428],
[470,458,464,439,461,450,451,0,471,431],
[460,437,442,405,417,405,431,419,0,430],
[448,427,465,450,432,421,462,459,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,378,339,349,365,348,356,297,324,452],
[512,0,427,457,441,471,440,473,455,469],
[551,463,0,394,439,442,434,436,424,498],
[541,433,496,0,505,462,443,485,396,504],
[525,449,451,385,0,433,444,413,388,539],
[542,419,448,428,457,0,442,434,445,494],
[534,450,456,447,446,448,0,426,393,479],
[593,417,454,405,477,456,464,0,422,514],
[566,435,466,494,502,445,497,468,0,506],
[438,421,392,386,351,396,411,376,384,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,451,453,459,475,475,455,489,445],
[435,0,443,454,434,457,480,422,460,454],
[439,447,0,443,429,433,470,438,469,448],
[437,436,447,0,444,432,460,409,476,430],
[431,456,461,446,0,431,473,454,475,444],
[415,433,457,458,459,0,462,417,456,438],
[415,410,420,430,417,428,0,424,433,451],
[435,468,452,481,436,473,466,0,492,463],
[401,430,421,414,415,434,457,398,0,422],
[445,436,442,460,446,452,439,427,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,474,405,439,432,458,471,462,436],
[447,0,469,418,429,450,452,480,434,423],
[416,421,0,424,410,448,427,464,436,419],
[485,472,466,0,452,475,435,450,462,439],
[451,461,480,438,0,451,448,452,440,438],
[458,440,442,415,439,0,435,410,456,422],
[432,438,463,455,442,455,0,463,450,450],
[419,410,426,440,438,480,427,0,393,419],
[428,456,454,428,450,434,440,497,0,405],
[454,467,471,451,452,468,440,471,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,473,408,430,413,444,469,420,419],
[467,0,472,448,449,451,441,453,451,438],
[417,418,0,416,423,405,403,411,414,385],
[482,442,474,0,450,448,455,461,423,431],
[460,441,467,440,0,436,457,470,414,419],
[477,439,485,442,454,0,468,460,456,422],
[446,449,487,435,433,422,0,445,431,419],
[421,437,479,429,420,430,445,0,413,414],
[470,439,476,467,476,434,459,477,0,451],
[471,452,505,459,471,468,471,476,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,454,528,518,511,479,501,439,494],
[385,0,447,440,461,436,414,497,394,479],
[436,443,0,485,495,516,496,410,431,464],
[362,450,405,0,426,457,466,458,450,479],
[372,429,395,464,0,465,458,414,355,443],
[379,454,374,433,425,0,388,448,375,471],
[411,476,394,424,432,502,0,498,413,500],
[389,393,480,432,476,442,392,0,410,446],
[451,496,459,440,535,515,477,480,0,538],
[396,411,426,411,447,419,390,444,352,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,436,459,430,442,459,424,469,488],
[459,0,448,467,452,408,408,516,460,510],
[454,442,0,434,484,483,418,459,416,425],
[431,423,456,0,419,429,458,484,463,479],
[460,438,406,471,0,458,388,450,422,460],
[448,482,407,461,432,0,446,466,409,481],
[431,482,472,432,502,444,0,497,469,505],
[466,374,431,406,440,424,393,0,426,505],
[421,430,474,427,468,481,421,464,0,496],
[402,380,465,411,430,409,385,385,394,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,442,436,417,415,446,426,393,399],
[483,0,507,465,435,433,464,447,458,448],
[448,383,0,479,454,441,478,409,410,436],
[454,425,411,0,431,434,456,424,436,420],
[473,455,436,459,0,442,498,399,431,454],
[475,457,449,456,448,0,480,462,444,446],
[444,426,412,434,392,410,0,412,420,430],
[464,443,481,466,491,428,478,0,422,469],
[497,432,480,454,459,446,470,468,0,478],
[491,442,454,470,436,444,460,421,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,470,471,447,433,482,450,472,443],
[425,0,448,451,445,446,459,470,439,454],
[420,442,0,473,458,440,455,429,443,428],
[419,439,417,0,444,418,448,430,427,439],
[443,445,432,446,0,440,486,461,488,467],
[457,444,450,472,450,0,469,439,450,451],
[408,431,435,442,404,421,0,414,403,389],
[440,420,461,460,429,451,476,0,466,445],
[418,451,447,463,402,440,487,424,0,432],
[447,436,462,451,423,439,501,445,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,476,461,462,495,428,432,438,449],
[445,0,478,477,487,477,453,459,452,484],
[414,412,0,420,441,425,408,412,433,456],
[429,413,470,0,459,463,414,441,451,437],
[428,403,449,431,0,456,415,437,421,443],
[395,413,465,427,434,0,393,422,427,434],
[462,437,482,476,475,497,0,479,450,492],
[458,431,478,449,453,468,411,0,430,447],
[452,438,457,439,469,463,440,460,0,467],
[441,406,434,453,447,456,398,443,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,436,413,486,459,421,399,429,450],
[470,0,434,421,464,451,434,400,438,448],
[454,456,0,461,474,440,464,459,446,445],
[477,469,429,0,474,487,464,438,483,461],
[404,426,416,416,0,423,419,395,435,451],
[431,439,450,403,467,0,430,420,446,435],
[469,456,426,426,471,460,0,430,458,483],
[491,490,431,452,495,470,460,0,431,473],
[461,452,444,407,455,444,432,459,0,464],
[440,442,445,429,439,455,407,417,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,457,456,446,482,445,459,452,456],
[440,0,454,459,426,443,442,442,454,450],
[433,436,0,431,419,460,421,452,445,442],
[434,431,459,0,411,458,424,431,448,430],
[444,464,471,479,0,475,444,460,482,461],
[408,447,430,432,415,0,425,449,445,434],
[445,448,469,466,446,465,0,442,454,449],
[431,448,438,459,430,441,448,0,448,438],
[438,436,445,442,408,445,436,442,0,435],
[434,440,448,460,429,456,441,452,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,435,428,426,426,423,452,420,455],
[460,0,450,444,430,446,437,460,448,470],
[455,440,0,462,427,432,440,457,439,463],
[462,446,428,0,454,471,444,474,451,472],
[464,460,463,436,0,466,443,464,414,489],
[464,444,458,419,424,0,440,445,437,449],
[467,453,450,446,447,450,0,462,428,485],
[438,430,433,416,426,445,428,0,432,461],
[470,442,451,439,476,453,462,458,0,500],
[435,420,427,418,401,441,405,429,390,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,455,470,442,470,435,448,443,451],
[425,0,465,472,435,475,439,441,432,438],
[435,425,0,464,415,442,411,442,435,450],
[420,418,426,0,395,433,405,430,413,423],
[448,455,475,495,0,463,445,453,458,474],
[420,415,448,457,427,0,428,423,440,432],
[455,451,479,485,445,462,0,438,466,464],
[442,449,448,460,437,467,452,0,462,456],
[447,458,455,477,432,450,424,428,0,455],
[439,452,440,467,416,458,426,434,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,475,448,417,407,472,429,450,447],
[451,0,435,435,462,423,442,434,476,402],
[415,455,0,438,435,382,435,392,487,443],
[442,455,452,0,419,430,463,443,490,447],
[473,428,455,471,0,432,480,444,489,451],
[483,467,508,460,458,0,480,408,487,450],
[418,448,455,427,410,410,0,411,447,404],
[461,456,498,447,446,482,479,0,498,436],
[440,414,403,400,401,403,443,392,0,389],
[443,488,447,443,439,440,486,454,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,479,433,441,480,459,432,445,456],
[446,0,455,437,426,480,475,449,428,435],
[411,435,0,393,397,429,427,410,425,413],
[457,453,497,0,435,424,438,449,443,451],
[449,464,493,455,0,451,450,443,452,434],
[410,410,461,466,439,0,439,425,417,441],
[431,415,463,452,440,451,0,436,416,434],
[458,441,480,441,447,465,454,0,447,443],
[445,462,465,447,438,473,474,443,0,452],
[434,455,477,439,456,449,456,447,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,484,470,431,495,483,484,446,420],
[378,0,429,440,364,463,433,459,423,442],
[406,461,0,449,405,424,489,444,389,380],
[420,450,441,0,414,461,460,458,435,482],
[459,526,485,476,0,497,542,433,463,468],
[395,427,466,429,393,0,452,391,423,382],
[407,457,401,430,348,438,0,422,476,365],
[406,431,446,432,457,499,468,0,449,432],
[444,467,501,455,427,467,414,441,0,460],
[470,448,510,408,422,508,525,458,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,444,510,438,420,478,451,446,432],
[463,0,421,469,424,429,473,421,472,426],
[446,469,0,460,440,409,449,417,445,427],
[380,421,430,0,410,425,414,390,421,392],
[452,466,450,480,0,447,480,429,456,435],
[470,461,481,465,443,0,488,445,458,453],
[412,417,441,476,410,402,0,406,432,399],
[439,469,473,500,461,445,484,0,474,428],
[444,418,445,469,434,432,458,416,0,409],
[458,464,463,498,455,437,491,462,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,476,465,484,484,485,472,441,432],
[428,0,441,494,477,467,464,457,457,440],
[414,449,0,444,457,473,433,441,456,418],
[425,396,446,0,425,437,459,444,432,414],
[406,413,433,465,0,467,450,452,449,431],
[406,423,417,453,423,0,417,444,420,427],
[405,426,457,431,440,473,0,466,421,409],
[418,433,449,446,438,446,424,0,448,390],
[449,433,434,458,441,470,469,442,0,455],
[458,450,472,476,459,463,481,500,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,485,441,498,595,486,420,425,458],
[392,0,471,411,447,509,448,471,407,402],
[405,419,0,363,457,445,399,417,397,391],
[449,479,527,0,484,519,426,449,457,477],
[392,443,433,406,0,472,414,427,398,389],
[295,381,445,371,418,0,324,375,377,343],
[404,442,491,464,476,566,0,392,415,416],
[470,419,473,441,463,515,498,0,425,408],
[465,483,493,433,492,513,475,465,0,485],
[432,488,499,413,501,547,474,482,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,473,467,441,467,436,429,407,455],
[466,0,441,436,423,475,460,422,413,469],
[417,449,0,479,416,509,448,413,450,467],
[423,454,411,0,405,434,462,412,431,398],
[449,467,474,485,0,437,501,420,421,492],
[423,415,381,456,453,0,469,421,406,448],
[454,430,442,428,389,421,0,429,410,423],
[461,468,477,478,470,469,461,0,436,466],
[483,477,440,459,469,484,480,454,0,489],
[435,421,423,492,398,442,467,424,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,461,432,444,415,451,442,452,456],
[449,0,421,422,427,436,452,451,471,461],
[429,469,0,438,447,444,411,448,439,456],
[458,468,452,0,433,456,433,440,452,446],
[446,463,443,457,0,426,449,426,471,457],
[475,454,446,434,464,0,432,450,453,441],
[439,438,479,457,441,458,0,441,445,479],
[448,439,442,450,464,440,449,0,489,472],
[438,419,451,438,419,437,445,401,0,441],
[434,429,434,444,433,449,411,418,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,435,453,422,462,476,458,446,467],
[452,0,427,460,452,471,478,451,429,466],
[455,463,0,461,439,484,463,456,431,477],
[437,430,429,0,395,448,447,452,403,436],
[468,438,451,495,0,475,478,478,455,478],
[428,419,406,442,415,0,416,432,425,430],
[414,412,427,443,412,474,0,449,421,444],
[432,439,434,438,412,458,441,0,434,435],
[444,461,459,487,435,465,469,456,0,476],
[423,424,413,454,412,460,446,455,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,457,441,457,447,440,444,452,427],
[445,0,452,470,452,450,453,448,484,451],
[433,438,0,463,460,454,449,436,469,442],
[449,420,427,0,432,447,427,424,444,414],
[433,438,430,458,0,460,435,423,438,431],
[443,440,436,443,430,0,408,405,447,423],
[450,437,441,463,455,482,0,436,448,443],
[446,442,454,466,467,485,454,0,473,449],
[438,406,421,446,452,443,442,417,0,444],
[463,439,448,476,459,467,447,441,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,479,473,458,470,445,444,450,462],
[435,0,464,447,431,448,423,410,429,428],
[411,426,0,439,435,434,425,432,418,419],
[417,443,451,0,448,432,429,421,419,420],
[432,459,455,442,0,427,427,445,431,425],
[420,442,456,458,463,0,451,439,437,455],
[445,467,465,461,463,439,0,461,451,440],
[446,480,458,469,445,451,429,0,441,444],
[440,461,472,471,459,453,439,449,0,474],
[428,462,471,470,465,435,450,446,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,431,454,456,476,447,435,472,503],
[396,0,416,432,435,442,423,446,405,465],
[459,474,0,469,492,485,463,456,441,507],
[436,458,421,0,469,477,462,444,456,512],
[434,455,398,421,0,466,488,430,449,471],
[414,448,405,413,424,0,443,441,417,441],
[443,467,427,428,402,447,0,431,432,478],
[455,444,434,446,460,449,459,0,461,508],
[418,485,449,434,441,473,458,429,0,486],
[387,425,383,378,419,449,412,382,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,421,411,416,420,416,416,419,443],
[466,0,429,435,424,429,440,443,445,461],
[469,461,0,440,455,458,460,455,456,467],
[479,455,450,0,462,460,457,461,441,460],
[474,466,435,428,0,463,440,445,445,497],
[470,461,432,430,427,0,443,465,443,473],
[474,450,430,433,450,447,0,482,463,484],
[474,447,435,429,445,425,408,0,438,465],
[471,445,434,449,445,447,427,452,0,470],
[447,429,423,430,393,417,406,425,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,473,429,459,427,460,435,453,475],
[455,0,460,445,468,454,450,483,489,483],
[417,430,0,460,434,386,418,447,443,461],
[461,445,430,0,448,401,417,443,461,464],
[431,422,456,442,0,419,447,432,476,459],
[463,436,504,489,471,0,467,481,490,487],
[430,440,472,473,443,423,0,433,464,465],
[455,407,443,447,458,409,457,0,442,460],
[437,401,447,429,414,400,426,448,0,463],
[415,407,429,426,431,403,425,430,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,513,470,436,486,523,477,505,443],
[417,0,503,443,440,419,481,421,451,412],
[377,387,0,407,369,384,417,394,399,366],
[420,447,483,0,415,395,451,436,429,409],
[454,450,521,475,0,445,534,448,456,429],
[404,471,506,495,445,0,516,444,437,484],
[367,409,473,439,356,374,0,419,435,403],
[413,469,496,454,442,446,471,0,439,445],
[385,439,491,461,434,453,455,451,0,443],
[447,478,524,481,461,406,487,445,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,353,393,445,479,409,411,451,422,465],
[537,0,492,456,510,480,443,512,497,498],
[497,398,0,496,481,449,489,472,463,463],
[445,434,394,0,481,408,436,475,430,506],
[411,380,409,409,0,354,373,435,430,415],
[481,410,441,482,536,0,424,487,478,468],
[479,447,401,454,517,466,0,506,435,460],
[439,378,418,415,455,403,384,0,373,420],
[468,393,427,460,460,412,455,517,0,455],
[425,392,427,384,475,422,430,470,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,395,440,454,436,470,463,425,440,397],
[495,0,472,463,439,485,424,480,442,429],
[450,418,0,477,449,451,491,464,450,455],
[436,427,413,0,443,474,442,458,421,450],
[454,451,441,447,0,445,450,468,452,470],
[420,405,439,416,445,0,450,447,426,465],
[427,466,399,448,440,440,0,441,424,426],
[465,410,426,432,422,443,449,0,401,424],
[450,448,440,469,438,464,466,489,0,478],
[493,461,435,440,420,425,464,466,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,422,454,437,422,460,426,399,424],
[437,0,434,454,432,433,450,429,420,419],
[468,456,0,458,447,446,463,465,433,443],
[436,436,432,0,434,428,437,438,442,448],
[453,458,443,456,0,441,456,453,438,435],
[468,457,444,462,449,0,447,441,448,435],
[430,440,427,453,434,443,0,445,421,422],
[464,461,425,452,437,449,445,0,434,432],
[491,470,457,448,452,442,469,456,0,454],
[466,471,447,442,455,455,468,458,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,464,421,425,481,420,440,468,463],
[440,0,450,411,425,449,428,450,434,451],
[426,440,0,398,437,439,410,466,417,447],
[469,479,492,0,438,484,484,509,461,495],
[465,465,453,452,0,491,431,473,444,488],
[409,441,451,406,399,0,393,420,394,458],
[470,462,480,406,459,497,0,462,435,487],
[450,440,424,381,417,470,428,0,426,443],
[422,456,473,429,446,496,455,464,0,488],
[427,439,443,395,402,432,403,447,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,409,451,469,435,446,417,476,430],
[446,0,435,454,491,450,454,470,476,442],
[481,455,0,443,486,450,436,469,477,444],
[439,436,447,0,474,438,427,457,469,428],
[421,399,404,416,0,406,428,448,445,436],
[455,440,440,452,484,0,459,444,475,445],
[444,436,454,463,462,431,0,451,464,487],
[473,420,421,433,442,446,439,0,453,448],
[414,414,413,421,445,415,426,437,0,452],
[460,448,446,462,454,445,403,442,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,554,390,504,391,557,277,446,444,445],
[336,0,223,392,278,390,335,280,445,445],
[500,667,0,560,447,501,445,280,556,500],
[386,498,330,0,498,385,441,279,441,496],
[499,612,443,392,0,442,447,334,443,444],
[333,500,389,505,448,0,279,392,502,502],
[613,555,445,449,443,611,0,280,611,553],
[444,610,610,611,556,498,610,0,611,721],
[446,445,334,449,447,388,279,279,0,392],
[445,445,390,394,446,388,337,169,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,419,417,462,456,436,407,453,455],
[459,0,460,453,466,445,457,438,451,455],
[471,430,0,476,458,474,455,445,459,455],
[473,437,414,0,431,459,445,401,450,431],
[428,424,432,459,0,463,442,413,491,450],
[434,445,416,431,427,0,406,408,446,412],
[454,433,435,445,448,484,0,434,469,463],
[483,452,445,489,477,482,456,0,481,483],
[437,439,431,440,399,444,421,409,0,442],
[435,435,435,459,440,478,427,407,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,368,410,432,428,460,446,434,436,388],
[522,0,441,484,487,471,511,461,492,438],
[480,449,0,491,474,475,507,405,449,461],
[458,406,399,0,462,441,476,406,410,406],
[462,403,416,428,0,429,468,410,412,429],
[430,419,415,449,461,0,450,428,462,465],
[444,379,383,414,422,440,0,438,416,404],
[456,429,485,484,480,462,452,0,458,459],
[454,398,441,480,478,428,474,432,0,440],
[502,452,429,484,461,425,486,431,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,444,417,449,450,454,418,441,440],
[492,0,459,441,465,463,460,467,459,443],
[446,431,0,449,452,456,487,480,428,463],
[473,449,441,0,460,464,492,442,465,460],
[441,425,438,430,0,431,488,452,434,467],
[440,427,434,426,459,0,459,446,427,461],
[436,430,403,398,402,431,0,434,436,412],
[472,423,410,448,438,444,456,0,421,419],
[449,431,462,425,456,463,454,469,0,454],
[450,447,427,430,423,429,478,471,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,435,453,464,458,457,446,467,471],
[439,0,436,440,453,435,439,432,431,460],
[455,454,0,437,467,434,432,446,435,449],
[437,450,453,0,459,467,446,436,446,450],
[426,437,423,431,0,447,426,424,437,438],
[432,455,456,423,443,0,441,454,439,481],
[433,451,458,444,464,449,0,441,442,465],
[444,458,444,454,466,436,449,0,446,470],
[423,459,455,444,453,451,448,444,0,477],
[419,430,441,440,452,409,425,420,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,450,444,433,460,443,444,438,443],
[447,0,473,461,428,438,446,456,455,440],
[440,417,0,446,427,437,417,451,451,435],
[446,429,444,0,447,456,431,453,452,448],
[457,462,463,443,0,452,425,459,429,458],
[430,452,453,434,438,0,440,457,444,451],
[447,444,473,459,465,450,0,468,447,472],
[446,434,439,437,431,433,422,0,418,428],
[452,435,439,438,461,446,443,472,0,450],
[447,450,455,442,432,439,418,462,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,440,442,412,430,414,447,443,446],
[432,0,459,448,416,450,441,427,441,441],
[450,431,0,438,426,382,428,407,431,419],
[448,442,452,0,411,417,428,467,475,434],
[478,474,464,479,0,460,458,476,467,445],
[460,440,508,473,430,0,467,458,504,423],
[476,449,462,462,432,423,0,455,441,440],
[443,463,483,423,414,432,435,0,468,432],
[447,449,459,415,423,386,449,422,0,433],
[444,449,471,456,445,467,450,458,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,430,430,444,426,441,439,420,411],
[453,0,435,417,433,421,458,468,429,429],
[460,455,0,459,444,446,462,449,424,434],
[460,473,431,0,468,458,473,458,457,441],
[446,457,446,422,0,425,458,452,434,416],
[464,469,444,432,465,0,468,471,456,450],
[449,432,428,417,432,422,0,442,437,424],
[451,422,441,432,438,419,448,0,416,424],
[470,461,466,433,456,434,453,474,0,447],
[479,461,456,449,474,440,466,466,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,498,448,475,484,548,445,441,487],
[375,0,407,406,371,434,487,440,408,459],
[392,483,0,374,422,421,490,406,508,443],
[442,484,516,0,476,505,510,463,514,467],
[415,519,468,414,0,456,483,435,473,501],
[406,456,469,385,434,0,503,441,429,446],
[342,403,400,380,407,387,0,370,391,408],
[445,450,484,427,455,449,520,0,427,443],
[449,482,382,376,417,461,499,463,0,436],
[403,431,447,423,389,444,482,447,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,471,467,457,497,419,460,460,424],
[407,0,448,426,447,451,427,445,405,416],
[419,442,0,430,444,453,420,420,435,429],
[423,464,460,0,438,486,458,458,466,426],
[433,443,446,452,0,458,456,444,433,452],
[393,439,437,404,432,0,406,427,436,419],
[471,463,470,432,434,484,0,439,446,463],
[430,445,470,432,446,463,451,0,453,431],
[430,485,455,424,457,454,444,437,0,410],
[466,474,461,464,438,471,427,459,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,425,444,428,420,436,441,445,441],
[451,0,457,467,446,427,474,480,455,452],
[465,433,0,458,440,434,459,429,424,456],
[446,423,432,0,429,419,453,441,407,435],
[462,444,450,461,0,444,445,440,415,453],
[470,463,456,471,446,0,455,450,427,447],
[454,416,431,437,445,435,0,455,426,442],
[449,410,461,449,450,440,435,0,435,440],
[445,435,466,483,475,463,464,455,0,457],
[449,438,434,455,437,443,448,450,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,467,379,379,492,517,539,543,492],
[383,0,358,386,400,450,465,499,449,480],
[423,532,0,456,460,435,485,506,510,470],
[511,504,434,0,429,495,500,516,496,535],
[511,490,430,461,0,494,529,525,495,501],
[398,440,455,395,396,0,500,489,484,416],
[373,425,405,390,361,390,0,485,431,450],
[351,391,384,374,365,401,405,0,452,411],
[347,441,380,394,395,406,459,438,0,378],
[398,410,420,355,389,474,440,479,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,437,467,478,449,463,450,450,447],
[440,0,472,466,439,452,471,449,440,433],
[453,418,0,434,452,450,465,450,423,443],
[423,424,456,0,438,445,458,440,417,413],
[412,451,438,452,0,449,458,436,421,420],
[441,438,440,445,441,0,440,421,432,432],
[427,419,425,432,432,450,0,424,441,417],
[440,441,440,450,454,469,466,0,443,451],
[440,450,467,473,469,458,449,447,0,452],
[443,457,447,477,470,458,473,439,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,456,449,434,443,433,430,453,415],
[460,0,477,468,454,464,446,431,455,433],
[434,413,0,442,426,434,443,428,433,440],
[441,422,448,0,436,445,430,427,438,442],
[456,436,464,454,0,463,456,440,438,449],
[447,426,456,445,427,0,436,433,420,443],
[457,444,447,460,434,454,0,440,424,434],
[460,459,462,463,450,457,450,0,455,430],
[437,435,457,452,452,470,466,435,0,437],
[475,457,450,448,441,447,456,460,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,453,463,452,429,405,462,473,477],
[413,0,412,431,429,446,426,451,431,425],
[437,478,0,431,423,435,441,417,457,445],
[427,459,459,0,421,455,436,483,456,462],
[438,461,467,469,0,424,428,417,469,448],
[461,444,455,435,466,0,433,461,471,438],
[485,464,449,454,462,457,0,436,465,453],
[428,439,473,407,473,429,454,0,454,450],
[417,459,433,434,421,419,425,436,0,409],
[413,465,445,428,442,452,437,440,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,473,440,464,443,469,469,457,458],
[414,0,440,455,463,425,459,445,438,441],
[417,450,0,412,452,413,437,435,430,450],
[450,435,478,0,465,448,462,450,441,472],
[426,427,438,425,0,433,449,451,454,442],
[447,465,477,442,457,0,477,455,466,470],
[421,431,453,428,441,413,0,436,425,439],
[421,445,455,440,439,435,454,0,440,444],
[433,452,460,449,436,424,465,450,0,442],
[432,449,440,418,448,420,451,446,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,436,405,412,415,435,421,424,419],
[480,0,472,438,463,436,444,449,449,458],
[454,418,0,426,462,463,444,451,463,457],
[485,452,464,0,457,438,459,455,457,473],
[478,427,428,433,0,456,452,424,449,452],
[475,454,427,452,434,0,439,449,443,469],
[455,446,446,431,438,451,0,444,455,447],
[469,441,439,435,466,441,446,0,441,469],
[466,441,427,433,441,447,435,449,0,445],
[471,432,433,417,438,421,443,421,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,443,473,466,444,457,439,429,455],
[426,0,418,451,425,430,441,435,410,435],
[447,472,0,484,451,440,472,441,451,476],
[417,439,406,0,432,427,431,420,426,434],
[424,465,439,458,0,425,460,430,426,443],
[446,460,450,463,465,0,454,459,426,448],
[433,449,418,459,430,436,0,423,412,425],
[451,455,449,470,460,431,467,0,439,448],
[461,480,439,464,464,464,478,451,0,454],
[435,455,414,456,447,442,465,442,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,448,432,422,453,430,411,421,420],
[454,0,421,418,440,434,467,443,428,419],
[442,469,0,464,458,466,474,449,460,431],
[458,472,426,0,451,472,480,444,437,445],
[468,450,432,439,0,474,472,444,449,428],
[437,456,424,418,416,0,457,424,404,419],
[460,423,416,410,418,433,0,395,419,387],
[479,447,441,446,446,466,495,0,461,444],
[469,462,430,453,441,486,471,429,0,414],
[470,471,459,445,462,471,503,446,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,416,436,409,423,432,468,448,445],
[435,0,439,421,396,440,419,450,416,439],
[474,451,0,456,449,434,469,486,436,487],
[454,469,434,0,421,445,444,485,484,491],
[481,494,441,469,0,460,443,487,453,466],
[467,450,456,445,430,0,437,471,424,460],
[458,471,421,446,447,453,0,483,463,459],
[422,440,404,405,403,419,407,0,397,454],
[442,474,454,406,437,466,427,493,0,450],
[445,451,403,399,424,430,431,436,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,467,443,463,448,455,465,476,443],
[443,0,459,435,426,423,443,416,447,437],
[423,431,0,433,423,420,443,433,437,428],
[447,455,457,0,440,451,456,458,439,448],
[427,464,467,450,0,440,453,426,443,448],
[442,467,470,439,450,0,436,447,450,447],
[435,447,447,434,437,454,0,435,436,439],
[425,474,457,432,464,443,455,0,464,439],
[414,443,453,451,447,440,454,426,0,444],
[447,453,462,442,442,443,451,451,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,435,444,449,418,443,438,408,471],
[483,0,447,463,433,460,475,446,447,497],
[455,443,0,477,453,452,460,444,450,474],
[446,427,413,0,431,453,425,425,421,456],
[441,457,437,459,0,414,451,431,425,494],
[472,430,438,437,476,0,468,418,413,491],
[447,415,430,465,439,422,0,416,448,471],
[452,444,446,465,459,472,474,0,454,475],
[482,443,440,469,465,477,442,436,0,526],
[419,393,416,434,396,399,419,415,364,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,477,447,460,469,469,454,444,466],
[446,0,451,431,436,449,459,442,428,472],
[413,439,0,432,417,443,455,444,424,433],
[443,459,458,0,421,462,463,446,422,436],
[430,454,473,469,0,464,477,443,436,479],
[421,441,447,428,426,0,446,416,430,445],
[421,431,435,427,413,444,0,435,430,447],
[436,448,446,444,447,474,455,0,436,432],
[446,462,466,468,454,460,460,454,0,443],
[424,418,457,454,411,445,443,458,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,422,403,461,446,428,456,452,409],
[425,0,448,449,505,468,457,464,467,446],
[468,442,0,425,474,489,467,453,478,436],
[487,441,465,0,471,457,467,472,499,460],
[429,385,416,419,0,405,445,426,425,417],
[444,422,401,433,485,0,449,416,448,421],
[462,433,423,423,445,441,0,431,424,415],
[434,426,437,418,464,474,459,0,457,452],
[438,423,412,391,465,442,466,433,0,422],
[481,444,454,430,473,469,475,438,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,465,452,458,435,454,473,425,460],
[422,0,440,435,453,429,442,436,424,425],
[425,450,0,446,422,438,452,417,437,416],
[438,455,444,0,431,415,427,413,423,414],
[432,437,468,459,0,417,474,434,444,427],
[455,461,452,475,473,0,480,445,456,450],
[436,448,438,463,416,410,0,435,452,441],
[417,454,473,477,456,445,455,0,454,466],
[465,466,453,467,446,434,438,436,0,430],
[430,465,474,476,463,440,449,424,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,541,444,559,576,506,577,464,438,413],
[349,0,313,376,495,484,514,406,389,364],
[446,577,0,513,587,522,562,484,439,450],
[331,514,377,0,452,477,496,402,375,371],
[314,395,303,438,0,418,438,364,402,346],
[384,406,368,413,472,0,451,386,392,334],
[313,376,328,394,452,439,0,313,359,329],
[426,484,406,488,526,504,577,0,452,445],
[452,501,451,515,488,498,531,438,0,411],
[477,526,440,519,544,556,561,445,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,379,346,400,364,368,447,429,395,353],
[511,0,417,440,470,442,463,430,441,415],
[544,473,0,463,417,453,477,444,440,405],
[490,450,427,0,423,417,476,449,432,438],
[526,420,473,467,0,455,520,483,467,447],
[522,448,437,473,435,0,530,456,478,412],
[443,427,413,414,370,360,0,385,417,389],
[461,460,446,441,407,434,505,0,447,421],
[495,449,450,458,423,412,473,443,0,434],
[537,475,485,452,443,478,501,469,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,428,425,398,448,443,412,418,447],
[459,0,437,448,460,452,517,427,450,497],
[462,453,0,450,435,446,449,409,427,468],
[465,442,440,0,466,465,486,450,450,481],
[492,430,455,424,0,410,497,423,471,469],
[442,438,444,425,480,0,463,449,441,484],
[447,373,441,404,393,427,0,445,423,489],
[478,463,481,440,467,441,445,0,432,463],
[472,440,463,440,419,449,467,458,0,469],
[443,393,422,409,421,406,401,427,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,396,424,415,444,418,427,410,463],
[483,0,455,451,448,447,461,433,432,442],
[494,435,0,491,435,467,464,467,446,478],
[466,439,399,0,461,450,444,465,432,468],
[475,442,455,429,0,452,444,455,427,453],
[446,443,423,440,438,0,455,473,417,479],
[472,429,426,446,446,435,0,447,412,488],
[463,457,423,425,435,417,443,0,423,467],
[480,458,444,458,463,473,478,467,0,477],
[427,448,412,422,437,411,402,423,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,382,403,368,399,391,411,386,417],
[482,0,458,453,396,450,465,449,418,485],
[508,432,0,472,446,379,463,454,421,494],
[487,437,418,0,408,382,417,421,422,455],
[522,494,444,482,0,445,493,469,476,531],
[491,440,511,508,445,0,460,469,469,475],
[499,425,427,473,397,430,0,454,405,456],
[479,441,436,469,421,421,436,0,424,479],
[504,472,469,468,414,421,485,466,0,488],
[473,405,396,435,359,415,434,411,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,500,459,440,469,458,481,468,468],
[406,0,443,404,430,435,428,439,435,435],
[390,447,0,442,422,441,427,450,432,424],
[431,486,448,0,448,445,446,466,443,447],
[450,460,468,442,0,444,444,466,462,438],
[421,455,449,445,446,0,439,447,437,454],
[432,462,463,444,446,451,0,455,451,436],
[409,451,440,424,424,443,435,0,424,453],
[422,455,458,447,428,453,439,466,0,430],
[422,455,466,443,452,436,454,437,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,447,518,462,446,498,408,494,413],
[463,0,465,501,445,466,436,487,475,402],
[443,425,0,486,435,406,442,448,510,418],
[372,389,404,0,409,372,451,410,444,366],
[428,445,455,481,0,413,492,448,501,445],
[444,424,484,518,477,0,499,439,471,408],
[392,454,448,439,398,391,0,341,414,374],
[482,403,442,480,442,451,549,0,440,424],
[396,415,380,446,389,419,476,450,0,428],
[477,488,472,524,445,482,516,466,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,364,423,442,446,443,447,417,448],
[472,0,423,426,413,467,434,456,436,490],
[526,467,0,508,458,464,440,476,483,472],
[467,464,382,0,422,451,418,441,430,478],
[448,477,432,468,0,430,445,504,455,500],
[444,423,426,439,460,0,401,465,424,469],
[447,456,450,472,445,489,0,485,477,490],
[443,434,414,449,386,425,405,0,428,465],
[473,454,407,460,435,466,413,462,0,451],
[442,400,418,412,390,421,400,425,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,509,486,429,424,490,484,488,473],
[436,0,503,437,461,455,461,519,489,486],
[381,387,0,408,393,404,424,497,392,472],
[404,453,482,0,431,399,425,502,516,476],
[461,429,497,459,0,450,449,477,448,525],
[466,435,486,491,440,0,458,477,463,487],
[400,429,466,465,441,432,0,484,442,511],
[406,371,393,388,413,413,406,0,421,482],
[402,401,498,374,442,427,448,469,0,463],
[417,404,418,414,365,403,379,408,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,462,412,450,466,449,437,421,437],
[449,0,473,458,400,457,442,455,437,449],
[428,417,0,442,410,443,456,430,424,405],
[478,432,448,0,466,430,444,443,455,442],
[440,490,480,424,0,442,455,426,463,461],
[424,433,447,460,448,0,446,446,414,429],
[441,448,434,446,435,444,0,439,441,462],
[453,435,460,447,464,444,451,0,445,437],
[469,453,466,435,427,476,449,445,0,439],
[453,441,485,448,429,461,428,453,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,429,409,434,426,423,451,451,435],
[462,0,459,412,469,424,423,438,440,447],
[461,431,0,423,445,452,430,459,446,467],
[481,478,467,0,464,456,457,469,442,453],
[456,421,445,426,0,455,427,455,408,465],
[464,466,438,434,435,0,451,487,461,442],
[467,467,460,433,463,439,0,490,477,448],
[439,452,431,421,435,403,400,0,402,434],
[439,450,444,448,482,429,413,488,0,447],
[455,443,423,437,425,448,442,456,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,484,419,380,404,455,414,384,499],
[420,0,430,463,437,404,395,442,461,462],
[406,460,0,448,445,444,456,444,465,480],
[471,427,442,0,477,439,432,436,419,426],
[510,453,445,413,0,430,444,420,422,484],
[486,486,446,451,460,0,436,480,426,547],
[435,495,434,458,446,454,0,458,438,457],
[476,448,446,454,470,410,432,0,454,490],
[506,429,425,471,468,464,452,436,0,465],
[391,428,410,464,406,343,433,400,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,452,440,463,446,439,441,461,462],
[466,0,483,487,475,450,467,463,469,437],
[438,407,0,460,467,440,479,430,443,460],
[450,403,430,0,446,423,409,400,446,447],
[427,415,423,444,0,431,420,399,441,408],
[444,440,450,467,459,0,447,429,459,463],
[451,423,411,481,470,443,0,459,441,455],
[449,427,460,490,491,461,431,0,437,466],
[429,421,447,444,449,431,449,453,0,428],
[428,453,430,443,482,427,435,424,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,434,438,424,421,435,448,452,419],
[465,0,429,444,434,447,424,453,433,417],
[456,461,0,435,450,446,433,461,477,413],
[452,446,455,0,466,449,458,470,444,431],
[466,456,440,424,0,452,437,461,469,433],
[469,443,444,441,438,0,435,446,428,434],
[455,466,457,432,453,455,0,449,435,456],
[442,437,429,420,429,444,441,0,433,425],
[438,457,413,446,421,462,455,457,0,447],
[471,473,477,459,457,456,434,465,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,410,433,452,415,442,473,435,421],
[460,0,393,433,440,427,419,419,437,423],
[480,497,0,486,463,445,446,451,447,467],
[457,457,404,0,447,436,442,422,399,425],
[438,450,427,443,0,406,440,445,443,407],
[475,463,445,454,484,0,456,463,467,458],
[448,471,444,448,450,434,0,463,456,452],
[417,471,439,468,445,427,427,0,425,434],
[455,453,443,491,447,423,434,465,0,430],
[469,467,423,465,483,432,438,456,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,482,458,478,447,468,438,442,468],
[403,0,448,415,419,414,396,430,441,450],
[408,442,0,407,448,429,382,431,449,408],
[432,475,483,0,421,423,431,432,458,423],
[412,471,442,469,0,432,437,439,456,452],
[443,476,461,467,458,0,425,443,433,427],
[422,494,508,459,453,465,0,471,435,470],
[452,460,459,458,451,447,419,0,446,420],
[448,449,441,432,434,457,455,444,0,423],
[422,440,482,467,438,463,420,470,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,438,524,479,460,477,412,478,464],
[387,0,417,474,430,371,470,406,434,411],
[452,473,0,480,487,434,511,464,467,428],
[366,416,410,0,436,401,426,397,431,406],
[411,460,403,454,0,396,427,423,415,417],
[430,519,456,489,494,0,491,419,469,468],
[413,420,379,464,463,399,0,427,449,395],
[478,484,426,493,467,471,463,0,487,454],
[412,456,423,459,475,421,441,403,0,428],
[426,479,462,484,473,422,495,436,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,441,450,425,478,420,473,473,439],
[429,0,455,423,411,459,424,430,451,438],
[449,435,0,435,416,446,414,456,469,397],
[440,467,455,0,456,472,429,466,454,447],
[465,479,474,434,0,443,441,477,472,449],
[412,431,444,418,447,0,414,438,437,424],
[470,466,476,461,449,476,0,449,440,437],
[417,460,434,424,413,452,441,0,419,422],
[417,439,421,436,418,453,450,471,0,432],
[451,452,493,443,441,466,453,468,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,466,459,478,466,423,475,442,446],
[421,0,404,427,447,435,413,431,428,448],
[424,486,0,444,472,460,436,435,468,460],
[431,463,446,0,489,444,440,456,444,446],
[412,443,418,401,0,405,409,432,407,430],
[424,455,430,446,485,0,418,440,434,455],
[467,477,454,450,481,472,0,423,468,488],
[415,459,455,434,458,450,467,0,426,437],
[448,462,422,446,483,456,422,464,0,457],
[444,442,430,444,460,435,402,453,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,440,436,438,425,425,463,457,424],
[464,0,423,449,416,430,418,452,470,415],
[450,467,0,463,431,426,442,451,465,437],
[454,441,427,0,459,409,433,474,481,431],
[452,474,459,431,0,406,438,473,486,449],
[465,460,464,481,484,0,487,496,496,445],
[465,472,448,457,452,403,0,458,463,441],
[427,438,439,416,417,394,432,0,451,394],
[433,420,425,409,404,394,427,439,0,404],
[466,475,453,459,441,445,449,496,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,447,451,464,465,469,452,440,447],
[434,0,452,464,444,447,452,444,450,446],
[443,438,0,467,446,466,440,472,451,450],
[439,426,423,0,431,424,419,435,437,437],
[426,446,444,459,0,463,424,445,442,433],
[425,443,424,466,427,0,431,421,444,442],
[421,438,450,471,466,459,0,435,440,457],
[438,446,418,455,445,469,455,0,474,451],
[450,440,439,453,448,446,450,416,0,436],
[443,444,440,453,457,448,433,439,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,426,415,424,433,450,416,442,452],
[451,0,432,434,436,428,452,427,448,447],
[464,458,0,439,447,446,443,442,433,439],
[475,456,451,0,448,447,437,445,457,463],
[466,454,443,442,0,454,466,440,447,453],
[457,462,444,443,436,0,456,437,462,469],
[440,438,447,453,424,434,0,434,429,433],
[474,463,448,445,450,453,456,0,461,461],
[448,442,457,433,443,428,461,429,0,460],
[438,443,451,427,437,421,457,429,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,443,428,425,446,430,418,442,424],
[464,0,460,480,449,483,461,453,463,434],
[447,430,0,447,438,449,429,442,441,420],
[462,410,443,0,432,457,426,437,439,441],
[465,441,452,458,0,465,446,449,450,441],
[444,407,441,433,425,0,434,428,440,419],
[460,429,461,464,444,456,0,424,431,438],
[472,437,448,453,441,462,466,0,453,458],
[448,427,449,451,440,450,459,437,0,435],
[466,456,470,449,449,471,452,432,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,455,446,407,418,416,432,414,427],
[456,0,444,449,433,431,408,426,431,430],
[435,446,0,432,407,401,428,440,413,427],
[444,441,458,0,426,439,450,455,442,450],
[483,457,483,464,0,449,450,471,450,436],
[472,459,489,451,441,0,452,455,449,459],
[474,482,462,440,440,438,0,465,447,441],
[458,464,450,435,419,435,425,0,439,429],
[476,459,477,448,440,441,443,451,0,424],
[463,460,463,440,454,431,449,461,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,395,431,441,402,413,431,424,426],
[458,0,433,441,465,430,409,452,416,431],
[495,457,0,467,469,427,454,490,452,450],
[459,449,423,0,445,432,426,446,444,460],
[449,425,421,445,0,420,421,440,416,424],
[488,460,463,458,470,0,437,491,454,451],
[477,481,436,464,469,453,0,491,444,445],
[459,438,400,444,450,399,399,0,443,437],
[466,474,438,446,474,436,446,447,0,443],
[464,459,440,430,466,439,445,453,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,451,456,446,456,461,435,455,458],
[422,0,428,432,440,432,454,443,431,435],
[439,462,0,447,448,467,457,431,452,443],
[434,458,443,0,450,439,459,450,440,439],
[444,450,442,440,0,455,439,447,447,419],
[434,458,423,451,435,0,439,410,425,453],
[429,436,433,431,451,451,0,456,425,448],
[455,447,459,440,443,480,434,0,451,452],
[435,459,438,450,443,465,465,439,0,438],
[432,455,447,451,471,437,442,438,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,461,516,459,506,516,436,532,513],
[406,0,469,458,476,448,521,436,489,452],
[429,421,0,516,450,407,514,450,453,480],
[374,432,374,0,419,470,419,397,430,419],
[431,414,440,471,0,460,471,398,479,458],
[384,442,483,420,430,0,492,459,520,434],
[374,369,376,471,419,398,0,387,429,420],
[454,454,440,493,492,431,503,0,518,475],
[358,401,437,460,411,370,461,372,0,391],
[377,438,410,471,432,456,470,415,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,454,445,444,452,427,428,413,426],
[455,0,463,469,487,473,454,453,462,444],
[436,427,0,429,445,427,454,441,442,436],
[445,421,461,0,454,453,421,437,453,442],
[446,403,445,436,0,444,423,442,434,437],
[438,417,463,437,446,0,409,433,435,439],
[463,436,436,469,467,481,0,446,461,456],
[462,437,449,453,448,457,444,0,434,428],
[477,428,448,437,456,455,429,456,0,454],
[464,446,454,448,453,451,434,462,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,441,453,434,469,434,435,407,428],
[404,0,366,492,433,460,426,412,416,334],
[449,524,0,520,449,425,477,477,491,448],
[437,398,370,0,442,434,412,425,426,386],
[456,457,441,448,0,482,462,497,472,409],
[421,430,465,456,408,0,430,411,413,389],
[456,464,413,478,428,460,0,442,451,390],
[455,478,413,465,393,479,448,0,501,395],
[483,474,399,464,418,477,439,389,0,425],
[462,556,442,504,481,501,500,495,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,452,447,436,459,448,455,474,457],
[428,0,427,401,428,437,437,434,448,438],
[438,463,0,439,443,446,434,440,453,444],
[443,489,451,0,458,455,461,459,474,476],
[454,462,447,432,0,455,450,460,465,447],
[431,453,444,435,435,0,461,462,467,455],
[442,453,456,429,440,429,0,438,464,450],
[435,456,450,431,430,428,452,0,466,437],
[416,442,437,416,425,423,426,424,0,432],
[433,452,446,414,443,435,440,453,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,459,490,499,465,439,454,391,514],
[391,0,400,488,463,464,426,453,440,497],
[431,490,0,522,452,484,455,444,396,480],
[400,402,368,0,424,423,408,407,385,472],
[391,427,438,466,0,452,442,475,424,465],
[425,426,406,467,438,0,417,403,392,481],
[451,464,435,482,448,473,0,448,463,482],
[436,437,446,483,415,487,442,0,407,491],
[499,450,494,505,466,498,427,483,0,474],
[376,393,410,418,425,409,408,399,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,450,434,437,429,441,444,414,422],
[471,0,442,412,425,443,436,465,438,461],
[440,448,0,441,449,436,435,450,425,449],
[456,478,449,0,441,429,436,460,438,472],
[453,465,441,449,0,421,427,443,455,466],
[461,447,454,461,469,0,443,427,444,457],
[449,454,455,454,463,447,0,451,434,461],
[446,425,440,430,447,463,439,0,453,442],
[476,452,465,452,435,446,456,437,0,469],
[468,429,441,418,424,433,429,448,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,436,450,447,433,430,442,439,447],
[445,0,407,420,432,431,447,400,462,456],
[454,483,0,458,457,448,466,441,460,472],
[440,470,432,0,438,431,455,435,458,455],
[443,458,433,452,0,423,463,426,448,456],
[457,459,442,459,467,0,481,451,463,469],
[460,443,424,435,427,409,0,420,458,472],
[448,490,449,455,464,439,470,0,460,481],
[451,428,430,432,442,427,432,430,0,465],
[443,434,418,435,434,421,418,409,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,445,423,587,495,492,418,467,443],
[400,0,491,493,539,562,514,445,538,444],
[445,399,0,470,425,374,448,423,419,327],
[467,397,420,0,494,352,442,372,489,488],
[303,351,465,396,0,372,372,372,421,393],
[395,328,516,538,518,0,422,398,444,514],
[398,376,442,448,518,468,0,422,440,442],
[472,445,467,518,518,492,468,0,562,467],
[423,352,471,401,469,446,450,328,0,372],
[447,446,563,402,497,376,448,423,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,479,430,468,451,417,463,455,436],
[418,0,459,430,422,437,399,434,439,408],
[411,431,0,434,425,440,403,438,463,411],
[460,460,456,0,469,441,446,439,467,428],
[422,468,465,421,0,436,435,434,453,441],
[439,453,450,449,454,0,417,437,483,430],
[473,491,487,444,455,473,0,477,475,470],
[427,456,452,451,456,453,413,0,460,419],
[435,451,427,423,437,407,415,430,0,412],
[454,482,479,462,449,460,420,471,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,454,450,418,466,445,444,464,478],
[449,0,473,454,469,439,433,470,478,465],
[436,417,0,415,450,442,453,433,479,467],
[440,436,475,0,461,470,435,460,472,479],
[472,421,440,429,0,458,425,439,450,455],
[424,451,448,420,432,0,409,422,448,460],
[445,457,437,455,465,481,0,462,474,471],
[446,420,457,430,451,468,428,0,490,472],
[426,412,411,418,440,442,416,400,0,451],
[412,425,423,411,435,430,419,418,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,457,436,411,454,422,449,461,440],
[421,0,438,413,439,441,397,442,442,399],
[433,452,0,428,412,437,403,414,469,421],
[454,477,462,0,440,446,440,473,463,429],
[479,451,478,450,0,450,428,450,465,451],
[436,449,453,444,440,0,426,462,465,433],
[468,493,487,450,462,464,0,475,463,442],
[441,448,476,417,440,428,415,0,463,420],
[429,448,421,427,425,425,427,427,0,433],
[450,491,469,461,439,457,448,470,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,440,454,427,434,411,418,434,443],
[450,0,460,463,431,457,474,450,458,481],
[450,430,0,473,429,423,461,461,444,448],
[436,427,417,0,430,450,432,437,425,444],
[463,459,461,460,0,467,484,472,432,453],
[456,433,467,440,423,0,458,423,440,460],
[479,416,429,458,406,432,0,429,446,461],
[472,440,429,453,418,467,461,0,432,418],
[456,432,446,465,458,450,444,458,0,457],
[447,409,442,446,437,430,429,472,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,407,396,444,449,408,428,442,446],
[471,0,430,409,435,454,447,428,426,442],
[483,460,0,422,445,466,430,473,435,483],
[494,481,468,0,484,497,464,460,424,459],
[446,455,445,406,0,452,442,458,431,462],
[441,436,424,393,438,0,425,451,399,451],
[482,443,460,426,448,465,0,496,448,464],
[462,462,417,430,432,439,394,0,404,435],
[448,464,455,466,459,491,442,486,0,472],
[444,448,407,431,428,439,426,455,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,480,442,443,478,471,457,442,459],
[467,0,476,466,448,462,456,453,471,433],
[410,414,0,440,451,465,440,437,426,456],
[448,424,450,0,434,468,458,473,437,450],
[447,442,439,456,0,453,465,439,410,418],
[412,428,425,422,437,0,438,425,432,426],
[419,434,450,432,425,452,0,434,433,435],
[433,437,453,417,451,465,456,0,444,431],
[448,419,464,453,480,458,457,446,0,426],
[431,457,434,440,472,464,455,459,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,431,440,455,429,449,452,408,440],
[440,0,457,438,456,460,439,472,467,445],
[459,433,0,446,449,458,423,462,453,438],
[450,452,444,0,454,449,451,464,448,458],
[435,434,441,436,0,451,447,445,439,470],
[461,430,432,441,439,0,432,439,449,439],
[441,451,467,439,443,458,0,441,430,445],
[438,418,428,426,445,451,449,0,440,426],
[482,423,437,442,451,441,460,450,0,469],
[450,445,452,432,420,451,445,464,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,475,466,437,445,456,470,457,440],
[425,0,442,444,435,434,413,432,443,418],
[415,448,0,461,430,441,433,443,453,419],
[424,446,429,0,424,441,447,422,436,434],
[453,455,460,466,0,447,448,456,443,447],
[445,456,449,449,443,0,439,433,456,445],
[434,477,457,443,442,451,0,449,454,447],
[420,458,447,468,434,457,441,0,449,449],
[433,447,437,454,447,434,436,441,0,438],
[450,472,471,456,443,445,443,441,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,439,449,437,434,434,433,438,472],
[470,0,448,472,442,454,476,466,470,486],
[451,442,0,454,447,431,443,444,442,460],
[441,418,436,0,425,429,430,430,431,473],
[453,448,443,465,0,443,446,428,456,468],
[456,436,459,461,447,0,446,435,462,479],
[456,414,447,460,444,444,0,415,460,488],
[457,424,446,460,462,455,475,0,470,462],
[452,420,448,459,434,428,430,420,0,485],
[418,404,430,417,422,411,402,428,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,437,479,456,456,389,443,427,468],
[470,0,489,482,462,476,423,492,454,461],
[453,401,0,392,496,464,409,434,459,470],
[411,408,498,0,467,504,436,437,437,436],
[434,428,394,423,0,447,406,448,410,421],
[434,414,426,386,443,0,415,459,421,436],
[501,467,481,454,484,475,0,510,434,486],
[447,398,456,453,442,431,380,0,432,487],
[463,436,431,453,480,469,456,458,0,475],
[422,429,420,454,469,454,404,403,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,470,452,474,431,471,447,454,450],
[435,0,471,447,469,428,459,427,450,425],
[420,419,0,434,427,408,441,423,427,433],
[438,443,456,0,464,414,472,431,445,419],
[416,421,463,426,0,444,461,444,449,417],
[459,462,482,476,446,0,492,458,459,444],
[419,431,449,418,429,398,0,425,412,405],
[443,463,467,459,446,432,465,0,437,452],
[436,440,463,445,441,431,478,453,0,435],
[440,465,457,471,473,446,485,438,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,449,453,450,443,443,453,433,443],
[443,0,441,450,440,478,454,461,430,459],
[441,449,0,449,424,452,455,455,440,422],
[437,440,441,0,442,465,467,476,454,460],
[440,450,466,448,0,454,454,465,450,452],
[447,412,438,425,436,0,403,442,409,439],
[447,436,435,423,436,487,0,454,421,445],
[437,429,435,414,425,448,436,0,438,449],
[457,460,450,436,440,481,469,452,0,445],
[447,431,468,430,438,451,445,441,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,447,473,421,449,418,428,430,436],
[456,0,443,484,416,439,412,433,439,436],
[443,447,0,461,435,443,411,456,436,434],
[417,406,429,0,406,424,409,435,407,422],
[469,474,455,484,0,468,451,468,439,451],
[441,451,447,466,422,0,435,442,432,434],
[472,478,479,481,439,455,0,457,473,451],
[462,457,434,455,422,448,433,0,438,418],
[460,451,454,483,451,458,417,452,0,460],
[454,454,456,468,439,456,439,472,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,446,437,425,489,488,465,499,486],
[451,0,426,482,487,446,440,480,470,479],
[444,464,0,480,477,476,432,457,462,502],
[453,408,410,0,481,446,422,431,471,451],
[465,403,413,409,0,447,438,445,467,419],
[401,444,414,444,443,0,418,448,476,466],
[402,450,458,468,452,472,0,476,497,455],
[425,410,433,459,445,442,414,0,452,481],
[391,420,428,419,423,414,393,438,0,434],
[404,411,388,439,471,424,435,409,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,416,470,399,438,445,434,442,455],
[438,0,419,440,446,441,427,428,453,444],
[474,471,0,486,480,478,438,459,462,467],
[420,450,404,0,438,450,446,440,441,428],
[491,444,410,452,0,478,491,433,437,452],
[452,449,412,440,412,0,425,389,485,454],
[445,463,452,444,399,465,0,405,434,461],
[456,462,431,450,457,501,485,0,500,486],
[448,437,428,449,453,405,456,390,0,404],
[435,446,423,462,438,436,429,404,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,367,455,367,373,486,497,453,412,444],
[523,0,538,459,546,503,539,497,438,421],
[435,352,0,329,401,438,337,397,351,396],
[523,431,561,0,541,527,522,519,462,457],
[517,344,489,349,0,427,478,450,406,440],
[404,387,452,363,463,0,359,453,359,434],
[393,351,553,368,412,531,0,454,466,446],
[437,393,493,371,440,437,436,0,313,463],
[478,452,539,428,484,531,424,577,0,494],
[446,469,494,433,450,456,444,427,396,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,511,522,395,484,479,489,448,453],
[455,0,466,467,462,503,473,433,539,427],
[379,424,0,431,411,450,392,449,453,449],
[368,423,459,0,424,450,493,457,464,444],
[495,428,479,466,0,468,454,469,497,398],
[406,387,440,440,422,0,472,438,445,420],
[411,417,498,397,436,418,0,410,425,387],
[401,457,441,433,421,452,480,0,484,449],
[442,351,437,426,393,445,465,406,0,402],
[437,463,441,446,492,470,503,441,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,450,427,419,437,473,457,456,415],
[452,0,450,436,406,444,468,458,454,385],
[440,440,0,429,423,423,450,443,446,391],
[463,454,461,0,438,456,471,473,452,417],
[471,484,467,452,0,449,490,461,495,435],
[453,446,467,434,441,0,483,477,473,447],
[417,422,440,419,400,407,0,417,462,369],
[433,432,447,417,429,413,473,0,442,390],
[434,436,444,438,395,417,428,448,0,401],
[475,505,499,473,455,443,521,500,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,435,419,459,434,450,450,457,438],
[441,0,451,453,470,444,441,474,463,441],
[455,439,0,443,452,443,447,467,474,452],
[471,437,447,0,455,439,419,468,476,442],
[431,420,438,435,0,436,435,442,466,435],
[456,446,447,451,454,0,442,447,442,449],
[440,449,443,471,455,448,0,467,474,448],
[440,416,423,422,448,443,423,0,454,430],
[433,427,416,414,424,448,416,436,0,435],
[452,449,438,448,455,441,442,460,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,446,443,428,440,456,463,476,442],
[449,0,472,457,457,469,476,446,491,443],
[444,418,0,420,447,445,444,435,463,432],
[447,433,470,0,466,456,470,455,492,449],
[462,433,443,424,0,436,427,428,487,420],
[450,421,445,434,454,0,449,447,475,456],
[434,414,446,420,463,441,0,454,466,453],
[427,444,455,435,462,443,436,0,486,440],
[414,399,427,398,403,415,424,404,0,408],
[448,447,458,441,470,434,437,450,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,449,439,449,450,437,465,427,447],
[423,0,449,430,427,430,431,459,461,428],
[441,441,0,432,452,414,439,460,434,451],
[451,460,458,0,480,423,464,497,438,478],
[441,463,438,410,0,415,440,452,424,443],
[440,460,476,467,475,0,462,479,450,453],
[453,459,451,426,450,428,0,464,425,467],
[425,431,430,393,438,411,426,0,411,431],
[463,429,456,452,466,440,465,479,0,444],
[443,462,439,412,447,437,423,459,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,442,491,504,472,455,423,477,456],
[422,0,433,464,466,452,435,393,497,415],
[448,457,0,467,468,468,432,444,463,435],
[399,426,423,0,429,440,430,412,436,417],
[386,424,422,461,0,437,438,437,456,426],
[418,438,422,450,453,0,434,428,482,447],
[435,455,458,460,452,456,0,458,452,427],
[467,497,446,478,453,462,432,0,508,475],
[413,393,427,454,434,408,438,382,0,424],
[434,475,455,473,464,443,463,415,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,430,470,417,453,433,424,436,472],
[461,0,465,487,450,474,437,441,443,468],
[460,425,0,454,413,436,418,437,431,448],
[420,403,436,0,416,427,420,407,426,438],
[473,440,477,474,0,466,449,443,475,471],
[437,416,454,463,424,0,424,446,421,461],
[457,453,472,470,441,466,0,440,474,475],
[466,449,453,483,447,444,450,0,419,487],
[454,447,459,464,415,469,416,471,0,471],
[418,422,442,452,419,429,415,403,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,449,440,461,423,448,453,439,457],
[443,0,467,455,450,442,452,464,432,469],
[441,423,0,456,453,418,417,459,432,477],
[450,435,434,0,432,440,451,451,424,456],
[429,440,437,458,0,432,429,449,444,456],
[467,448,472,450,458,0,455,467,435,465],
[442,438,473,439,461,435,0,467,441,463],
[437,426,431,439,441,423,423,0,446,453],
[451,458,458,466,446,455,449,444,0,441],
[433,421,413,434,434,425,427,437,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,433,426,413,413,429,431,433,431],
[449,0,416,431,406,437,456,425,444,448],
[457,474,0,452,435,418,456,411,456,450],
[464,459,438,0,440,454,454,451,474,469],
[477,484,455,450,0,443,480,467,469,471],
[477,453,472,436,447,0,462,430,490,459],
[461,434,434,436,410,428,0,402,449,434],
[459,465,479,439,423,460,488,0,469,476],
[457,446,434,416,421,400,441,421,0,448],
[459,442,440,421,419,431,456,414,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,427,447,458,449,433,455,467,435],
[443,0,418,444,455,440,437,440,449,417],
[463,472,0,459,443,461,462,455,479,448],
[443,446,431,0,453,442,444,435,450,448],
[432,435,447,437,0,446,438,438,442,438],
[441,450,429,448,444,0,450,452,462,438],
[457,453,428,446,452,440,0,455,461,444],
[435,450,435,455,452,438,435,0,463,447],
[423,441,411,440,448,428,429,427,0,430],
[455,473,442,442,452,452,446,443,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,437,417,428,454,403,488,409,425],
[418,0,400,432,409,384,418,411,418,400],
[453,490,0,437,440,440,447,503,434,442],
[473,458,453,0,440,435,440,490,464,449],
[462,481,450,450,0,424,432,475,448,493],
[436,506,450,455,466,0,486,491,447,421],
[487,472,443,450,458,404,0,499,486,433],
[402,479,387,400,415,399,391,0,379,402],
[481,472,456,426,442,443,404,511,0,442],
[465,490,448,441,397,469,457,488,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,382,421,453,448,440,472,424,455],
[405,0,420,401,453,458,459,470,461,426],
[508,470,0,458,508,475,479,503,426,499],
[469,489,432,0,473,502,472,494,421,496],
[437,437,382,417,0,457,519,437,434,435],
[442,432,415,388,433,0,460,448,442,449],
[450,431,411,418,371,430,0,469,420,430],
[418,420,387,396,453,442,421,0,441,422],
[466,429,464,469,456,448,470,449,0,473],
[435,464,391,394,455,441,460,468,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,434,467,458,430,425,430,436,441],
[424,0,445,447,444,454,424,438,426,444],
[456,445,0,464,469,450,461,430,440,457],
[423,443,426,0,433,420,436,404,424,429],
[432,446,421,457,0,439,425,409,407,436],
[460,436,440,470,451,0,468,433,443,465],
[465,466,429,454,465,422,0,446,447,443],
[460,452,460,486,481,457,444,0,448,454],
[454,464,450,466,483,447,443,442,0,446],
[449,446,433,461,454,425,447,436,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,434,430,448,438,437,444,444,466],
[456,0,434,441,463,439,440,447,448,444],
[456,456,0,428,472,432,466,458,465,453],
[460,449,462,0,449,434,447,457,469,431],
[442,427,418,441,0,444,425,467,457,446],
[452,451,458,456,446,0,440,468,466,457],
[453,450,424,443,465,450,0,453,458,452],
[446,443,432,433,423,422,437,0,446,432],
[446,442,425,421,433,424,432,444,0,444],
[424,446,437,459,444,433,438,458,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,450,477,466,476,435,513,502,498],
[439,0,447,449,436,432,450,442,451,487],
[440,443,0,483,461,412,423,432,463,446],
[413,441,407,0,379,464,393,448,498,454],
[424,454,429,511,0,451,448,482,486,509],
[414,458,478,426,439,0,391,441,519,482],
[455,440,467,497,442,499,0,500,509,520],
[377,448,458,442,408,449,390,0,482,461],
[388,439,427,392,404,371,381,408,0,430],
[392,403,444,436,381,408,370,429,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,401,405,429,429,419,431,436,429,400],
[489,0,446,463,463,463,464,467,437,451],
[485,444,0,469,458,469,445,479,457,461],
[461,427,421,0,429,436,433,468,421,412],
[461,427,432,461,0,456,421,459,437,440],
[471,427,421,454,434,0,432,480,450,440],
[459,426,445,457,469,458,0,451,458,438],
[454,423,411,422,431,410,439,0,434,442],
[461,453,433,469,453,440,432,456,0,456],
[490,439,429,478,450,450,452,448,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,452,450,442,488,463,487,484,464],
[461,0,406,425,418,454,431,453,454,438],
[438,484,0,449,433,452,463,446,461,476],
[440,465,441,0,437,483,438,444,490,447],
[448,472,457,453,0,446,453,420,468,452],
[402,436,438,407,444,0,435,454,444,420],
[427,459,427,452,437,455,0,426,472,460],
[403,437,444,446,470,436,464,0,457,426],
[406,436,429,400,422,446,418,433,0,436],
[426,452,414,443,438,470,430,464,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,442,456,446,399,445,448,426,431],
[462,0,429,461,437,423,437,434,430,435],
[448,461,0,467,449,431,441,431,455,400],
[434,429,423,0,448,425,425,440,437,414],
[444,453,441,442,0,407,454,429,424,431],
[491,467,459,465,483,0,446,466,453,424],
[445,453,449,465,436,444,0,459,442,441],
[442,456,459,450,461,424,431,0,444,430],
[464,460,435,453,466,437,448,446,0,455],
[459,455,490,476,459,466,449,460,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,538,505,488,482,435,557,493,488],
[406,0,453,422,495,472,405,491,408,401],
[352,437,0,365,383,437,475,401,403,436],
[385,468,525,0,475,450,472,472,438,505],
[402,395,507,415,0,505,455,365,404,401],
[408,418,453,440,385,0,493,387,494,443],
[455,485,415,418,435,397,0,487,472,454],
[333,399,489,418,525,503,403,0,402,385],
[397,482,487,452,486,396,418,488,0,438],
[402,489,454,385,489,447,436,505,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,482,461,457,429,437,452,443,493],
[467,0,500,417,473,426,405,477,473,430],
[408,390,0,349,373,386,398,385,390,351],
[429,473,541,0,421,404,442,494,385,420],
[433,417,517,469,0,434,460,477,423,463],
[461,464,504,486,456,0,419,453,445,432],
[453,485,492,448,430,471,0,460,462,418],
[438,413,505,396,413,437,430,0,411,366],
[447,417,500,505,467,445,428,479,0,457],
[397,460,539,470,427,458,472,524,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,432,424,432,429,451,438,439,441],
[463,0,457,441,448,435,453,444,479,455],
[458,433,0,433,434,436,431,418,446,437],
[466,449,457,0,467,439,455,451,463,458],
[458,442,456,423,0,447,452,447,457,447],
[461,455,454,451,443,0,438,448,469,425],
[439,437,459,435,438,452,0,449,436,429],
[452,446,472,439,443,442,441,0,445,454],
[451,411,444,427,433,421,454,445,0,412],
[449,435,453,432,443,465,461,436,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,460,461,443,533,487,476,508,443],
[417,0,343,477,480,498,446,437,473,463],
[430,547,0,429,491,501,493,508,418,515],
[429,413,461,0,401,462,453,421,405,471],
[447,410,399,489,0,368,421,469,366,430],
[357,392,389,428,522,0,470,405,382,436],
[403,444,397,437,469,420,0,453,447,475],
[414,453,382,469,421,485,437,0,432,442],
[382,417,472,485,524,508,443,458,0,471],
[447,427,375,419,460,454,415,448,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,427,444,411,449,446,425,435,434],
[451,0,421,448,444,429,402,451,427,439],
[463,469,0,463,454,440,449,461,458,433],
[446,442,427,0,421,436,419,446,439,417],
[479,446,436,469,0,462,440,445,431,441],
[441,461,450,454,428,0,451,433,424,438],
[444,488,441,471,450,439,0,455,454,452],
[465,439,429,444,445,457,435,0,425,449],
[455,463,432,451,459,466,436,465,0,441],
[456,451,457,473,449,452,438,441,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,456,457,442,455,430,466,457,472],
[419,0,433,447,443,439,416,424,433,437],
[434,457,0,446,439,435,435,454,436,457],
[433,443,444,0,432,436,413,415,444,449],
[448,447,451,458,0,429,450,459,472,481],
[435,451,455,454,461,0,414,439,483,461],
[460,474,455,477,440,476,0,461,478,466],
[424,466,436,475,431,451,429,0,467,448],
[433,457,454,446,418,407,412,423,0,452],
[418,453,433,441,409,429,424,442,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,442,437,452,452,460,424,482,457],
[454,0,457,446,443,446,447,446,478,480],
[448,433,0,417,444,422,440,400,448,447],
[453,444,473,0,460,447,473,472,512,438],
[438,447,446,430,0,416,429,430,452,429],
[438,444,468,443,474,0,432,453,473,405],
[430,443,450,417,461,458,0,435,455,456],
[466,444,490,418,460,437,455,0,482,448],
[408,412,442,378,438,417,435,408,0,420],
[433,410,443,452,461,485,434,442,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,443,422,458,459,446,487,441,477],
[438,0,433,475,445,453,482,467,435,469],
[447,457,0,473,454,463,436,487,451,490],
[468,415,417,0,428,448,442,468,448,460],
[432,445,436,462,0,437,437,447,468,466],
[431,437,427,442,453,0,448,472,462,452],
[444,408,454,448,453,442,0,466,408,469],
[403,423,403,422,443,418,424,0,434,451],
[449,455,439,442,422,428,482,456,0,495],
[413,421,400,430,424,438,421,439,395,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,447,425,467,477,447,431,455,468],
[441,0,419,461,470,457,481,436,464,477],
[443,471,0,489,494,464,488,471,489,495],
[465,429,401,0,478,449,451,454,459,467],
[423,420,396,412,0,414,448,428,415,448],
[413,433,426,441,476,0,428,418,455,459],
[443,409,402,439,442,462,0,427,440,443],
[459,454,419,436,462,472,463,0,461,460],
[435,426,401,431,475,435,450,429,0,483],
[422,413,395,423,442,431,447,430,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,450,461,455,449,457,434,468,447],
[451,0,446,432,435,424,456,433,467,400],
[440,444,0,423,446,475,478,463,436,419],
[429,458,467,0,450,465,444,428,446,419],
[435,455,444,440,0,447,459,418,467,422],
[441,466,415,425,443,0,455,434,464,397],
[433,434,412,446,431,435,0,429,481,406],
[456,457,427,462,472,456,461,0,450,423],
[422,423,454,444,423,426,409,440,0,411],
[443,490,471,471,468,493,484,467,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,397,458,493,405,380,425,490,462],
[400,0,350,411,379,379,396,400,392,401],
[493,540,0,512,450,471,471,442,447,428],
[432,479,378,0,442,405,428,432,454,453],
[397,511,440,448,0,425,442,449,457,435],
[485,511,419,485,465,0,464,433,474,464],
[510,494,419,462,448,426,0,477,448,463],
[465,490,448,458,441,457,413,0,444,428],
[400,498,443,436,433,416,442,446,0,503],
[428,489,462,437,455,426,427,462,387,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,446,460,416,450,449,421,441,437],
[458,0,452,466,441,455,458,445,439,430],
[444,438,0,451,420,454,447,446,447,442],
[430,424,439,0,411,468,463,421,427,434],
[474,449,470,479,0,455,455,433,451,449],
[440,435,436,422,435,0,450,412,457,440],
[441,432,443,427,435,440,0,433,437,420],
[469,445,444,469,457,478,457,0,449,462],
[449,451,443,463,439,433,453,441,0,451],
[453,460,448,456,441,450,470,428,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,393,443,425,410,421,443,419,426,431],
[497,0,466,486,450,457,474,449,455,437],
[447,424,0,495,434,429,451,409,443,443],
[465,404,395,0,408,444,463,430,425,434],
[480,440,456,482,0,454,453,480,451,441],
[469,433,461,446,436,0,454,476,433,439],
[447,416,439,427,437,436,0,423,434,411],
[471,441,481,460,410,414,467,0,448,445],
[464,435,447,465,439,457,456,442,0,421],
[459,453,447,456,449,451,479,445,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,428,404,425,399,422,439,401,442],
[445,0,405,403,383,453,427,468,429,464],
[462,485,0,443,454,462,464,483,466,484],
[486,487,447,0,462,469,444,489,448,467],
[465,507,436,428,0,468,463,486,463,475],
[491,437,428,421,422,0,408,467,415,452],
[468,463,426,446,427,482,0,449,420,459],
[451,422,407,401,404,423,441,0,427,471],
[489,461,424,442,427,475,470,463,0,450],
[448,426,406,423,415,438,431,419,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,452,502,483,474,468,441,465,524],
[441,0,479,477,460,464,446,482,457,501],
[438,411,0,448,428,434,463,446,421,479],
[388,413,442,0,427,423,430,427,443,456],
[407,430,462,463,0,419,431,417,413,466],
[416,426,456,467,471,0,438,443,452,478],
[422,444,427,460,459,452,0,445,433,485],
[449,408,444,463,473,447,445,0,446,509],
[425,433,469,447,477,438,457,444,0,485],
[366,389,411,434,424,412,405,381,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,437,462,451,456,513,441,408,402],
[436,0,425,450,417,470,451,428,419,387],
[453,465,0,509,422,484,521,434,411,382],
[428,440,381,0,401,482,466,416,365,354],
[439,473,468,489,0,486,487,468,448,464],
[434,420,406,408,404,0,487,413,412,356],
[377,439,369,424,403,403,0,402,349,358],
[449,462,456,474,422,477,488,0,419,413],
[482,471,479,525,442,478,541,471,0,447],
[488,503,508,536,426,534,532,477,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,439,463,478,445,486,445,437,435],
[439,0,419,471,457,436,426,444,436,456],
[451,471,0,442,455,437,454,453,430,462],
[427,419,448,0,456,447,426,459,419,440],
[412,433,435,434,0,431,419,456,439,425],
[445,454,453,443,459,0,424,450,437,446],
[404,464,436,464,471,466,0,439,459,458],
[445,446,437,431,434,440,451,0,417,441],
[453,454,460,471,451,453,431,473,0,485],
[455,434,428,450,465,444,432,449,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,427,443,456,468,446,434,416,433],
[457,0,446,460,471,444,479,454,455,442],
[463,444,0,466,443,440,431,441,429,414],
[447,430,424,0,436,440,452,438,430,424],
[434,419,447,454,0,445,441,434,426,440],
[422,446,450,450,445,0,470,459,433,448],
[444,411,459,438,449,420,0,462,418,426],
[456,436,449,452,456,431,428,0,436,415],
[474,435,461,460,464,457,472,454,0,444],
[457,448,476,466,450,442,464,475,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,402,396,461,456,441,434,452,422],
[429,0,394,431,421,422,423,423,399,431],
[488,496,0,485,460,453,438,459,448,443],
[494,459,405,0,416,432,411,420,401,472],
[429,469,430,474,0,455,433,424,433,434],
[434,468,437,458,435,0,425,424,426,412],
[449,467,452,479,457,465,0,454,462,435],
[456,467,431,470,466,466,436,0,463,486],
[438,491,442,489,457,464,428,427,0,454],
[468,459,447,418,456,478,455,404,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,456,469,440,447,485,437,486,476],
[415,0,447,443,397,373,446,448,472,443],
[434,443,0,446,415,423,424,431,453,423],
[421,447,444,0,419,446,432,420,442,428],
[450,493,475,471,0,426,468,445,471,458],
[443,517,467,444,464,0,481,450,474,478],
[405,444,466,458,422,409,0,425,477,453],
[453,442,459,470,445,440,465,0,443,445],
[404,418,437,448,419,416,413,447,0,416],
[414,447,467,462,432,412,437,445,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,463,406,423,389,428,405,429,427],
[464,0,472,396,448,413,424,425,444,448],
[427,418,0,407,439,399,420,401,423,423],
[484,494,483,0,457,478,477,437,479,488],
[467,442,451,433,0,420,446,430,423,449],
[501,477,491,412,470,0,460,426,465,477],
[462,466,470,413,444,430,0,430,449,474],
[485,465,489,453,460,464,460,0,439,466],
[461,446,467,411,467,425,441,451,0,477],
[463,442,467,402,441,413,416,424,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,417,463,436,414,440,454,418,399],
[465,0,445,466,467,457,476,444,422,435],
[473,445,0,530,458,500,524,459,433,457],
[427,424,360,0,399,442,435,438,431,407],
[454,423,432,491,0,490,492,445,443,442],
[476,433,390,448,400,0,457,409,459,440],
[450,414,366,455,398,433,0,421,432,400],
[436,446,431,452,445,481,469,0,459,405],
[472,468,457,459,447,431,458,431,0,430],
[491,455,433,483,448,450,490,485,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,445,452,443,448,438,438,427,462],
[435,0,434,389,426,427,436,408,449,440],
[445,456,0,459,440,461,435,430,459,441],
[438,501,431,0,441,458,443,434,470,471],
[447,464,450,449,0,471,444,447,477,448],
[442,463,429,432,419,0,444,421,454,443],
[452,454,455,447,446,446,0,416,457,435],
[452,482,460,456,443,469,474,0,481,455],
[463,441,431,420,413,436,433,409,0,437],
[428,450,449,419,442,447,455,435,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,459,434,454,462,440,463,456,444],
[443,0,441,460,459,448,451,475,460,459],
[431,449,0,434,444,425,424,467,437,449],
[456,430,456,0,455,455,449,445,458,458],
[436,431,446,435,0,432,437,447,455,443],
[428,442,465,435,458,0,444,463,464,455],
[450,439,466,441,453,446,0,461,467,466],
[427,415,423,445,443,427,429,0,442,434],
[434,430,453,432,435,426,423,448,0,441],
[446,431,441,432,447,435,424,456,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,422,354,272,425,402,405,399,401],
[446,0,360,422,336,492,404,381,384,422],
[468,530,0,467,359,467,424,510,381,318],
[536,468,423,0,339,470,446,467,446,424],
[618,554,531,551,0,532,488,492,487,423],
[465,398,423,420,358,0,382,443,404,422],
[488,486,466,444,402,508,0,531,491,407],
[485,509,380,423,398,447,359,0,405,464],
[491,506,509,444,403,486,399,485,0,464],
[489,468,572,466,467,468,483,426,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,420,420,462,444,445,481,427,418],
[449,0,420,440,433,432,463,445,425,433],
[470,470,0,450,462,461,470,481,455,437],
[470,450,440,0,463,436,475,484,461,451],
[428,457,428,427,0,425,451,453,406,442],
[446,458,429,454,465,0,454,487,433,458],
[445,427,420,415,439,436,0,460,407,427],
[409,445,409,406,437,403,430,0,403,396],
[463,465,435,429,484,457,483,487,0,449],
[472,457,453,439,448,432,463,494,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,394,592,495,691,592,493,397,493],
[397,0,298,297,397,298,496,298,397,297],
[496,592,0,395,593,397,495,495,496,495],
[298,593,495,0,494,594,594,497,596,497],
[395,493,297,396,0,495,495,396,495,495],
[199,592,493,296,395,0,595,395,297,396],
[298,394,395,296,395,295,0,198,297,298],
[397,592,395,393,494,495,692,0,198,395],
[493,493,394,294,395,593,593,692,0,394],
[397,593,395,393,395,494,592,495,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,444,446,449,476,455,464,464,440],
[426,0,445,438,448,459,452,453,462,435],
[446,445,0,456,458,458,475,452,455,466],
[444,452,434,0,445,440,459,468,480,463],
[441,442,432,445,0,451,447,448,454,434],
[414,431,432,450,439,0,445,435,437,426],
[435,438,415,431,443,445,0,456,457,466],
[426,437,438,422,442,455,434,0,441,441],
[426,428,435,410,436,453,433,449,0,433],
[450,455,424,427,456,464,424,449,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,465,443,460,454,439,446,453,453],
[439,0,478,467,456,440,459,444,459,481],
[425,412,0,438,432,415,410,445,444,445],
[447,423,452,0,432,435,425,445,453,425],
[430,434,458,458,0,429,441,442,463,453],
[436,450,475,455,461,0,446,420,455,484],
[451,431,480,465,449,444,0,425,467,480],
[444,446,445,445,448,470,465,0,450,456],
[437,431,446,437,427,435,423,440,0,451],
[437,409,445,465,437,406,410,434,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,441,460,424,430,410,501,443,453],
[477,0,474,494,493,395,438,502,473,470],
[449,416,0,421,431,408,469,449,434,427],
[430,396,469,0,502,420,415,488,480,423],
[466,397,459,388,0,396,393,491,417,452],
[460,495,482,470,494,0,493,477,439,484],
[480,452,421,475,497,397,0,424,424,460],
[389,388,441,402,399,413,466,0,401,397],
[447,417,456,410,473,451,466,489,0,474],
[437,420,463,467,438,406,430,493,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,471,449,435,493,444,444,447,474],
[452,0,455,460,425,522,477,479,442,481],
[419,435,0,433,451,474,456,448,439,445],
[441,430,457,0,450,485,488,451,453,456],
[455,465,439,440,0,492,462,444,446,443],
[397,368,416,405,398,0,420,406,412,424],
[446,413,434,402,428,470,0,448,419,459],
[446,411,442,439,446,484,442,0,423,420],
[443,448,451,437,444,478,471,467,0,457],
[416,409,445,434,447,466,431,470,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,406,478,437,434,445,465,429,439],
[452,0,455,492,463,471,482,430,490,467],
[484,435,0,470,497,443,456,477,465,444],
[412,398,420,0,417,420,422,455,411,428],
[453,427,393,473,0,446,417,445,440,451],
[456,419,447,470,444,0,425,483,434,432],
[445,408,434,468,473,465,0,465,468,436],
[425,460,413,435,445,407,425,0,448,470],
[461,400,425,479,450,456,422,442,0,440],
[451,423,446,462,439,458,454,420,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,481,446,435,449,472,445,460,439],
[434,0,455,435,435,422,448,427,430,452],
[409,435,0,418,414,402,434,436,440,467],
[444,455,472,0,455,466,438,474,451,463],
[455,455,476,435,0,455,442,454,457,474],
[441,468,488,424,435,0,449,467,437,424],
[418,442,456,452,448,441,0,448,428,427],
[445,463,454,416,436,423,442,0,430,435],
[430,460,450,439,433,453,462,460,0,438],
[451,438,423,427,416,466,463,455,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,334,497,277,223,385,442,221,443,331],
[556,0,553,336,386,609,443,332,443,443],
[393,337,0,335,280,503,334,390,442,391],
[613,554,555,0,389,666,555,443,664,441],
[667,504,610,501,0,664,442,501,553,388],
[505,281,387,224,226,0,332,279,443,332],
[448,447,556,335,448,558,0,334,500,501],
[669,558,500,447,389,611,556,0,609,387],
[447,447,448,226,337,447,390,281,0,392],
[559,447,499,449,502,558,389,503,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,501,486,478,352,527,365,312,328],
[408,0,440,483,439,330,390,367,461,365],
[389,450,0,501,537,391,427,428,365,368],
[404,407,389,0,363,392,388,329,329,290],
[412,451,353,527,0,411,394,371,370,310],
[538,560,499,498,479,0,484,460,480,404],
[363,500,463,502,496,406,0,366,404,364],
[525,523,462,561,519,430,524,0,483,407],
[578,429,525,561,520,410,486,407,0,445],
[562,525,522,600,580,486,526,483,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,435,444,426,462,436,459,466,445],
[401,0,433,434,413,421,420,417,452,440],
[455,457,0,440,425,446,435,464,484,447],
[446,456,450,0,451,451,443,449,460,490],
[464,477,465,439,0,457,457,444,463,464],
[428,469,444,439,433,0,429,431,465,456],
[454,470,455,447,433,461,0,446,495,482],
[431,473,426,441,446,459,444,0,489,463],
[424,438,406,430,427,425,395,401,0,421],
[445,450,443,400,426,434,408,427,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,367,363,404,549,456,479,428,307],
[412,0,347,392,391,416,423,497,441,359],
[523,543,0,408,486,516,552,560,494,456],
[527,498,482,0,437,520,424,446,525,410],
[486,499,404,453,0,523,476,468,546,398],
[341,474,374,370,367,0,455,364,335,437],
[434,467,338,466,414,435,0,370,412,350],
[411,393,330,444,422,526,520,0,456,380],
[462,449,396,365,344,555,478,434,0,412],
[583,531,434,480,492,453,540,510,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,389,431,430,487,431,408,440,460],
[408,0,414,406,410,438,449,426,420,381],
[501,476,0,458,464,511,497,422,491,450],
[459,484,432,0,411,514,442,451,464,472],
[460,480,426,479,0,471,489,435,411,436],
[403,452,379,376,419,0,450,371,382,417],
[459,441,393,448,401,440,0,411,486,428],
[482,464,468,439,455,519,479,0,531,479],
[450,470,399,426,479,508,404,359,0,420],
[430,509,440,418,454,473,462,411,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,445,480,472,426,459,490,475,467],
[405,0,443,437,469,423,441,439,440,426],
[445,447,0,441,475,433,475,459,450,430],
[410,453,449,0,444,417,454,452,434,434],
[418,421,415,446,0,434,455,453,441,421],
[464,467,457,473,456,0,478,472,467,418],
[431,449,415,436,435,412,0,446,449,440],
[400,451,431,438,437,418,444,0,427,398],
[415,450,440,456,449,423,441,463,0,417],
[423,464,460,456,469,472,450,492,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,469,471,481,471,468,438,467,458],
[438,0,459,446,441,456,449,434,453,454],
[421,431,0,448,442,440,433,444,450,418],
[419,444,442,0,442,441,441,438,442,452],
[409,449,448,448,0,442,436,435,446,445],
[419,434,450,449,448,0,441,433,447,443],
[422,441,457,449,454,449,0,454,470,434],
[452,456,446,452,455,457,436,0,451,441],
[423,437,440,448,444,443,420,439,0,432],
[432,436,472,438,445,447,456,449,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,446,453,479,469,455,467,456,432],
[426,0,421,430,467,412,428,481,462,436],
[444,469,0,426,443,464,453,447,452,452],
[437,460,464,0,459,441,438,447,438,444],
[411,423,447,431,0,409,398,423,418,427],
[421,478,426,449,481,0,445,433,446,433],
[435,462,437,452,492,445,0,448,427,422],
[423,409,443,443,467,457,442,0,439,416],
[434,428,438,452,472,444,463,451,0,397],
[458,454,438,446,463,457,468,474,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,453,428,463,452,446,432,478,442],
[428,0,430,400,459,428,457,407,443,449],
[437,460,0,459,445,409,466,435,448,490],
[462,490,431,0,477,414,468,424,497,472],
[427,431,445,413,0,425,416,436,431,434],
[438,462,481,476,465,0,444,460,457,469],
[444,433,424,422,474,446,0,416,450,428],
[458,483,455,466,454,430,474,0,495,456],
[412,447,442,393,459,433,440,395,0,434],
[448,441,400,418,456,421,462,434,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,456,455,441,457,430,430,442,444],
[431,0,446,433,407,451,440,424,452,451],
[434,444,0,441,434,439,421,420,439,456],
[435,457,449,0,441,439,428,424,435,458],
[449,483,456,449,0,461,444,447,460,472],
[433,439,451,451,429,0,436,429,421,455],
[460,450,469,462,446,454,0,440,450,448],
[460,466,470,466,443,461,450,0,456,482],
[448,438,451,455,430,469,440,434,0,449],
[446,439,434,432,418,435,442,408,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,456,422,434,430,409,425,405,425],
[453,0,434,459,410,473,411,454,382,439],
[434,456,0,467,421,449,437,430,403,427],
[468,431,423,0,391,443,424,402,394,440],
[456,480,469,499,0,454,428,468,430,470],
[460,417,441,447,436,0,408,435,389,440],
[481,479,453,466,462,482,0,412,449,475],
[465,436,460,488,422,455,478,0,427,494],
[485,508,487,496,460,501,441,463,0,443],
[465,451,463,450,420,450,415,396,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,405,411,468,427,445,460,429,496],
[457,0,442,461,492,473,466,466,473,521],
[485,448,0,431,479,474,486,497,452,563],
[479,429,459,0,477,446,467,479,471,514],
[422,398,411,413,0,398,463,462,457,483],
[463,417,416,444,492,0,452,470,477,493],
[445,424,404,423,427,438,0,454,405,481],
[430,424,393,411,428,420,436,0,428,488],
[461,417,438,419,433,413,485,462,0,491],
[394,369,327,376,407,397,409,402,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,421,435,427,444,423,420,404,433],
[476,0,432,445,439,454,456,461,431,449],
[469,458,0,456,462,470,468,463,445,462],
[455,445,434,0,425,435,451,433,404,409],
[463,451,428,465,0,458,460,436,413,456],
[446,436,420,455,432,0,427,438,395,433],
[467,434,422,439,430,463,0,454,424,457],
[470,429,427,457,454,452,436,0,420,462],
[486,459,445,486,477,495,466,470,0,482],
[457,441,428,481,434,457,433,428,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,468,481,446,425,479,455,467,470],
[434,0,445,439,439,433,462,445,436,452],
[422,445,0,447,443,438,460,442,447,461],
[409,451,443,0,422,452,443,442,433,453],
[444,451,447,468,0,440,462,460,454,474],
[465,457,452,438,450,0,471,443,444,487],
[411,428,430,447,428,419,0,441,450,449],
[435,445,448,448,430,447,449,0,445,483],
[423,454,443,457,436,446,440,445,0,466],
[420,438,429,437,416,403,441,407,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,462,428,477,451,457,452,457,436],
[430,0,450,445,440,427,430,465,450,441],
[428,440,0,436,445,458,441,456,432,444],
[462,445,454,0,444,454,442,429,439,450],
[413,450,445,446,0,445,437,433,442,452],
[439,463,432,436,445,0,445,433,427,439],
[433,460,449,448,453,445,0,443,438,468],
[438,425,434,461,457,457,447,0,435,448],
[433,440,458,451,448,463,452,455,0,449],
[454,449,446,440,438,451,422,442,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,464,449,469,434,459,436,489,406],
[450,0,475,469,493,445,478,456,507,419],
[426,415,0,433,461,454,472,445,460,421],
[441,421,457,0,473,439,456,440,453,438],
[421,397,429,417,0,452,448,435,455,445],
[456,445,436,451,438,0,438,451,474,453],
[431,412,418,434,442,452,0,436,431,440],
[454,434,445,450,455,439,454,0,481,421],
[401,383,430,437,435,416,459,409,0,411],
[484,471,469,452,445,437,450,469,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,457,442,462,445,421,437,436,475],
[469,0,448,439,433,473,425,431,429,471],
[433,442,0,428,426,438,409,380,418,456],
[448,451,462,0,485,449,458,455,435,480],
[428,457,464,405,0,463,433,404,451,458],
[445,417,452,441,427,0,433,428,429,459],
[469,465,481,432,457,457,0,453,453,485],
[453,459,510,435,486,462,437,0,445,480],
[454,461,472,455,439,461,437,445,0,463],
[415,419,434,410,432,431,405,410,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,494,483,443,449,424,484,465,482],
[448,0,473,476,431,456,449,492,417,465],
[396,417,0,448,420,424,409,433,436,436],
[407,414,442,0,399,411,438,440,406,459],
[447,459,470,491,0,460,426,502,448,472],
[441,434,466,479,430,0,411,487,406,474],
[466,441,481,452,464,479,0,466,448,487],
[406,398,457,450,388,403,424,0,404,466],
[425,473,454,484,442,484,442,486,0,493],
[408,425,454,431,418,416,403,424,397,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,470,479,435,448,492,489,468,480],
[445,0,478,459,453,430,477,489,468,500],
[420,412,0,446,454,395,438,442,456,464],
[411,431,444,0,424,422,453,465,449,481],
[455,437,436,466,0,441,481,467,482,474],
[442,460,495,468,449,0,463,468,435,480],
[398,413,452,437,409,427,0,449,428,457],
[401,401,448,425,423,422,441,0,443,458],
[422,422,434,441,408,455,462,447,0,453],
[410,390,426,409,416,410,433,432,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,458,461,450,445,470,463,461,446],
[432,0,469,446,456,439,452,438,417,432],
[432,421,0,431,450,448,432,434,433,424],
[429,444,459,0,461,435,471,433,461,422],
[440,434,440,429,0,455,434,437,438,425],
[445,451,442,455,435,0,439,445,447,451],
[420,438,458,419,456,451,0,447,455,432],
[427,452,456,457,453,445,443,0,465,449],
[429,473,457,429,452,443,435,425,0,426],
[444,458,466,468,465,439,458,441,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,419,442,446,402,437,454,455,422],
[441,0,436,410,438,438,413,415,454,433],
[471,454,0,428,470,456,426,428,442,452],
[448,480,462,0,470,454,438,478,469,445],
[444,452,420,420,0,436,402,446,413,395],
[488,452,434,436,454,0,461,474,469,430],
[453,477,464,452,488,429,0,446,462,452],
[436,475,462,412,444,416,444,0,485,410],
[435,436,448,421,477,421,428,405,0,420],
[468,457,438,445,495,460,438,480,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,441,419,412,440,413,424,451,399],
[470,0,460,453,453,461,446,455,457,445],
[449,430,0,441,430,445,437,432,444,405],
[471,437,449,0,440,455,436,436,457,437],
[478,437,460,450,0,439,431,446,467,428],
[450,429,445,435,451,0,421,434,448,433],
[477,444,453,454,459,469,0,443,462,460],
[466,435,458,454,444,456,447,0,465,452],
[439,433,446,433,423,442,428,425,0,422],
[491,445,485,453,462,457,430,438,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,456,470,459,435,457,476,423,446],
[456,0,470,462,467,439,450,445,439,439],
[434,420,0,445,433,447,456,417,425,438],
[420,428,445,0,458,434,428,431,405,437],
[431,423,457,432,0,438,465,428,424,449],
[455,451,443,456,452,0,447,437,449,434],
[433,440,434,462,425,443,0,425,416,438],
[414,445,473,459,462,453,465,0,428,442],
[467,451,465,485,466,441,474,462,0,475],
[444,451,452,453,441,456,452,448,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,439,440,434,450,426,439,447,440],
[450,0,441,443,432,422,461,440,447,471],
[451,449,0,435,448,440,451,446,441,450],
[450,447,455,0,446,428,448,440,444,453],
[456,458,442,444,0,449,462,450,436,479],
[440,468,450,462,441,0,463,451,452,466],
[464,429,439,442,428,427,0,432,432,457],
[451,450,444,450,440,439,458,0,433,480],
[443,443,449,446,454,438,458,457,0,466],
[450,419,440,437,411,424,433,410,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,431,432,423,460,429,446,437,441],
[430,0,437,427,413,443,432,422,429,444],
[459,453,0,425,455,457,450,452,453,454],
[458,463,465,0,440,448,439,460,452,452],
[467,477,435,450,0,459,439,441,430,470],
[430,447,433,442,431,0,428,407,425,423],
[461,458,440,451,451,462,0,448,428,449],
[444,468,438,430,449,483,442,0,443,450],
[453,461,437,438,460,465,462,447,0,464],
[449,446,436,438,420,467,441,440,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,449,446,477,431,440,442,450,471],
[480,0,459,440,455,432,458,462,481,485],
[441,431,0,419,486,479,454,453,473,461],
[444,450,471,0,473,453,485,475,468,438],
[413,435,404,417,0,449,450,473,454,461],
[459,458,411,437,441,0,453,471,463,436],
[450,432,436,405,440,437,0,476,463,461],
[448,428,437,415,417,419,414,0,446,439],
[440,409,417,422,436,427,427,444,0,439],
[419,405,429,452,429,454,429,451,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,432,432,462,439,445,432,460,455],
[458,0,439,415,440,439,450,414,460,420],
[458,451,0,455,472,417,428,446,468,439],
[458,475,435,0,451,454,430,444,458,431],
[428,450,418,439,0,431,439,429,449,411],
[451,451,473,436,459,0,441,462,472,451],
[445,440,462,460,451,449,0,479,481,431],
[458,476,444,446,461,428,411,0,471,444],
[430,430,422,432,441,418,409,419,0,405],
[435,470,451,459,479,439,459,446,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,451,454,453,451,441,440,471,449],
[459,0,442,423,427,461,451,461,450,453],
[439,448,0,471,428,476,457,477,461,443],
[436,467,419,0,460,478,459,470,442,472],
[437,463,462,430,0,480,415,464,447,449],
[439,429,414,412,410,0,388,450,415,408],
[449,439,433,431,475,502,0,477,481,441],
[450,429,413,420,426,440,413,0,441,415],
[419,440,429,448,443,475,409,449,0,428],
[441,437,447,418,441,482,449,475,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,380,377,377,447,414,368,343,398,405],
[510,0,455,448,403,459,452,434,448,440],
[513,435,0,423,469,443,421,492,442,491],
[513,442,467,0,474,553,447,501,466,520],
[443,487,421,416,0,487,420,424,416,436],
[476,431,447,337,403,0,361,400,396,422],
[522,438,469,443,470,529,0,456,471,447],
[547,456,398,389,466,490,434,0,449,419],
[492,442,448,424,474,494,419,441,0,483],
[485,450,399,370,454,468,443,471,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,398,346,400,364,409,363,432,418],
[445,0,394,360,421,405,461,432,454,451],
[492,496,0,398,412,381,502,458,422,420],
[544,530,492,0,441,469,573,468,511,485],
[490,469,478,449,0,420,513,476,511,511],
[526,485,509,421,470,0,560,503,488,532],
[481,429,388,317,377,330,0,456,352,396],
[527,458,432,422,414,387,434,0,460,421],
[458,436,468,379,379,402,538,430,0,446],
[472,439,470,405,379,358,494,469,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,432,420,460,439,445,457,437,436],
[435,0,435,448,491,441,452,471,457,470],
[458,455,0,429,463,448,449,477,440,471],
[470,442,461,0,457,463,452,464,447,469],
[430,399,427,433,0,418,436,472,422,419],
[451,449,442,427,472,0,437,465,435,457],
[445,438,441,438,454,453,0,475,461,470],
[433,419,413,426,418,425,415,0,418,432],
[453,433,450,443,468,455,429,472,0,469],
[454,420,419,421,471,433,420,458,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,465,421,420,434,425,406,434,412],
[453,0,457,438,442,444,434,433,451,420],
[425,433,0,427,427,417,422,429,442,415],
[469,452,463,0,450,448,408,420,433,433],
[470,448,463,440,0,436,448,445,454,444],
[456,446,473,442,454,0,441,436,464,446],
[465,456,468,482,442,449,0,434,468,452],
[484,457,461,470,445,454,456,0,472,429],
[456,439,448,457,436,426,422,418,0,426],
[478,470,475,457,446,444,438,461,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,475,457,444,455,465,412,439,442],
[433,0,460,430,422,429,447,395,423,420],
[415,430,0,433,407,426,450,411,402,412],
[433,460,457,0,449,444,458,406,438,436],
[446,468,483,441,0,442,461,414,424,401],
[435,461,464,446,448,0,464,416,439,436],
[425,443,440,432,429,426,0,398,418,402],
[478,495,479,484,476,474,492,0,449,442],
[451,467,488,452,466,451,472,441,0,449],
[448,470,478,454,489,454,488,448,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,319,374,523,284,518,460,574,458],
[459,0,374,373,493,369,489,487,577,572],
[571,516,0,403,549,455,460,519,575,459],
[516,517,487,0,575,427,487,430,459,604],
[367,397,341,315,0,370,456,428,433,401],
[606,521,435,463,520,0,576,546,604,576],
[372,401,430,403,434,314,0,488,486,428],
[430,403,371,460,462,344,402,0,462,372],
[316,313,315,431,457,286,404,428,0,397],
[432,318,431,286,489,314,462,518,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,430,467,410,430,401,430,475,451],
[469,0,442,504,448,456,451,451,458,436],
[460,448,0,502,455,465,420,469,448,452],
[423,386,388,0,383,432,409,445,417,416],
[480,442,435,507,0,455,425,465,429,456],
[460,434,425,458,435,0,401,425,442,452],
[489,439,470,481,465,489,0,451,449,465],
[460,439,421,445,425,465,439,0,421,429],
[415,432,442,473,461,448,441,469,0,478],
[439,454,438,474,434,438,425,461,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,440,445,457,421,472,430,445,481],
[414,0,440,435,444,425,469,432,453,423],
[450,450,0,442,457,410,459,463,449,465],
[445,455,448,0,441,418,473,454,459,456],
[433,446,433,449,0,468,460,473,439,452],
[469,465,480,472,422,0,487,456,437,474],
[418,421,431,417,430,403,0,422,391,427],
[460,458,427,436,417,434,468,0,431,452],
[445,437,441,431,451,453,499,459,0,469],
[409,467,425,434,438,416,463,438,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,429,470,471,418,446,487,406,514],
[457,0,455,444,498,469,419,493,438,479],
[461,435,0,438,501,489,425,477,412,467],
[420,446,452,0,470,462,414,454,379,463],
[419,392,389,420,0,442,448,449,403,476],
[472,421,401,428,448,0,438,409,463,444],
[444,471,465,476,442,452,0,452,477,494],
[403,397,413,436,441,481,438,0,412,438],
[484,452,478,511,487,427,413,478,0,518],
[376,411,423,427,414,446,396,452,372,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,470,429,469,465,442,459,441,426],
[477,0,456,439,455,465,415,437,436,428],
[420,434,0,453,456,434,414,436,467,436],
[461,451,437,0,464,431,440,429,475,443],
[421,435,434,426,0,434,413,425,440,433],
[425,425,456,459,456,0,448,457,449,445],
[448,475,476,450,477,442,0,432,466,433],
[431,453,454,461,465,433,458,0,432,457],
[449,454,423,415,450,441,424,458,0,425],
[464,462,454,447,457,445,457,433,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,479,417,475,453,440,381,390,429],
[466,0,433,424,454,486,430,424,434,402],
[411,457,0,397,457,449,448,425,415,443],
[473,466,493,0,464,499,471,432,464,436],
[415,436,433,426,0,436,424,362,395,426],
[437,404,441,391,454,0,445,391,429,439],
[450,460,442,419,466,445,0,407,419,436],
[509,466,465,458,528,499,483,0,465,442],
[500,456,475,426,495,461,471,425,0,484],
[461,488,447,454,464,451,454,448,406,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,540,502,500,533,430,396,535,398,469],
[350,0,532,422,638,387,641,496,462,494],
[388,358,0,493,459,461,464,462,357,464],
[390,468,397,0,499,359,394,464,396,463],
[357,252,431,391,0,322,429,464,432,358],
[460,503,429,531,568,0,502,572,464,500],
[494,249,426,496,461,388,0,426,358,320],
[355,394,428,426,426,318,464,0,397,429],
[492,428,533,494,458,426,532,493,0,566],
[421,396,426,427,532,390,570,461,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,392,362,388,437,472,381,500,380,423],
[498,0,424,490,460,465,419,501,483,421],
[528,466,0,488,491,483,423,543,452,419],
[502,400,402,0,486,471,458,521,450,426],
[453,430,399,404,0,474,371,471,428,446],
[418,425,407,419,416,0,430,488,448,428],
[509,471,467,432,519,460,0,576,474,423],
[390,389,347,369,419,402,314,0,422,355],
[510,407,438,440,462,442,416,468,0,400],
[467,469,471,464,444,462,467,535,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,444,461,455,479,448,425,434,474],
[446,0,437,433,448,447,461,427,445,454],
[446,453,0,448,466,462,441,462,448,454],
[429,457,442,0,431,445,430,422,418,447],
[435,442,424,459,0,471,433,443,437,442],
[411,443,428,445,419,0,436,417,412,415],
[442,429,449,460,457,454,0,435,445,449],
[465,463,428,468,447,473,455,0,443,465],
[456,445,442,472,453,478,445,447,0,460],
[416,436,436,443,448,475,441,425,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,419,449,444,448,482,480,450,399],
[413,0,399,464,436,452,492,442,423,407],
[471,491,0,477,486,434,508,473,520,486],
[441,426,413,0,443,432,464,422,463,367],
[446,454,404,447,0,459,447,443,434,441],
[442,438,456,458,431,0,487,463,448,433],
[408,398,382,426,443,403,0,405,433,374],
[410,448,417,468,447,427,485,0,445,415],
[440,467,370,427,456,442,457,445,0,421],
[491,483,404,523,449,457,516,475,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,456,450,480,451,464,451,437,462],
[443,0,459,430,450,457,456,454,472,463],
[434,431,0,431,453,438,452,423,453,454],
[440,460,459,0,461,452,459,456,443,446],
[410,440,437,429,0,438,422,442,416,442],
[439,433,452,438,452,0,443,441,448,457],
[426,434,438,431,468,447,0,450,428,440],
[439,436,467,434,448,449,440,0,457,443],
[453,418,437,447,474,442,462,433,0,454],
[428,427,436,444,448,433,450,447,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,429,438,428,429,438,434,409,432],
[431,0,394,435,420,453,420,421,400,441],
[461,496,0,469,457,472,460,433,434,489],
[452,455,421,0,439,439,443,417,423,422],
[462,470,433,451,0,449,465,452,429,436],
[461,437,418,451,441,0,426,418,414,428],
[452,470,430,447,425,464,0,460,410,410],
[456,469,457,473,438,472,430,0,435,443],
[481,490,456,467,461,476,480,455,0,438],
[458,449,401,468,454,462,480,447,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,442,453,430,472,454,423,421,447],
[476,0,510,452,450,449,500,453,488,409],
[448,380,0,410,412,427,479,413,380,409],
[437,438,480,0,452,491,469,476,433,451],
[460,440,478,438,0,499,502,459,487,451],
[418,441,463,399,391,0,444,450,435,431],
[436,390,411,421,388,446,0,410,407,391],
[467,437,477,414,431,440,480,0,439,425],
[469,402,510,457,403,455,483,451,0,461],
[443,481,481,439,439,459,499,465,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,459,487,447,460,443,459,464,470],
[461,0,449,453,442,450,477,458,462,462],
[431,441,0,435,445,448,445,455,477,462],
[403,437,455,0,435,425,436,447,456,457],
[443,448,445,455,0,456,466,486,467,435],
[430,440,442,465,434,0,431,468,441,451],
[447,413,445,454,424,459,0,452,445,451],
[431,432,435,443,404,422,438,0,448,433],
[426,428,413,434,423,449,445,442,0,431],
[420,428,428,433,455,439,439,457,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,389,424,439,406,446,405,382,369],
[478,0,444,478,465,435,462,445,448,441],
[501,446,0,448,445,423,474,442,455,407],
[466,412,442,0,477,430,481,449,393,414],
[451,425,445,413,0,494,421,444,423,423],
[484,455,467,460,396,0,475,415,448,437],
[444,428,416,409,469,415,0,427,444,351],
[485,445,448,441,446,475,463,0,453,435],
[508,442,435,497,467,442,446,437,0,449],
[521,449,483,476,467,453,539,455,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,452,452,451,450,435,431,440,444],
[431,0,449,449,457,424,439,440,462,453],
[438,441,0,458,462,430,456,420,458,455],
[438,441,432,0,452,419,416,435,427,446],
[439,433,428,438,0,418,405,417,434,424],
[440,466,460,471,472,0,458,452,466,429],
[455,451,434,474,485,432,0,444,443,454],
[459,450,470,455,473,438,446,0,440,442],
[450,428,432,463,456,424,447,450,0,435],
[446,437,435,444,466,461,436,448,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,465,453,437,440,478,432,447,446],
[425,0,427,415,412,394,426,396,415,436],
[425,463,0,413,430,427,444,405,433,453],
[437,475,477,0,453,462,453,432,452,469],
[453,478,460,437,0,455,449,432,449,445],
[450,496,463,428,435,0,452,457,446,450],
[412,464,446,437,441,438,0,402,436,428],
[458,494,485,458,458,433,488,0,455,469],
[443,475,457,438,441,444,454,435,0,464],
[444,454,437,421,445,440,462,421,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,473,485,447,472,466,455,431,465],
[429,0,444,467,429,471,461,442,459,433],
[417,446,0,439,418,429,466,449,409,444],
[405,423,451,0,400,426,468,446,429,429],
[443,461,472,490,0,475,441,500,479,472],
[418,419,461,464,415,0,470,471,424,432],
[424,429,424,422,449,420,0,485,427,423],
[435,448,441,444,390,419,405,0,384,395],
[459,431,481,461,411,466,463,506,0,424],
[425,457,446,461,418,458,467,495,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,409,438,447,428,475,424,435,445],
[482,0,457,464,464,441,483,467,479,488],
[481,433,0,470,493,454,508,448,464,498],
[452,426,420,0,464,415,446,435,461,442],
[443,426,397,426,0,411,444,424,421,453],
[462,449,436,475,479,0,483,468,472,461],
[415,407,382,444,446,407,0,420,422,432],
[466,423,442,455,466,422,470,0,473,460],
[455,411,426,429,469,418,468,417,0,452],
[445,402,392,448,437,429,458,430,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,656,485,465,500,564,517,503,398],
[373,0,556,483,399,420,500,452,459,453],
[234,334,0,385,370,268,466,354,373,289],
[405,407,505,0,421,488,421,472,476,323],
[425,491,520,469,0,417,468,488,458,404],
[390,470,622,402,473,0,516,520,525,436],
[326,390,424,469,422,374,0,439,373,324],
[373,438,536,418,402,370,451,0,427,354],
[387,431,517,414,432,365,517,463,0,354],
[492,437,601,567,486,454,566,536,536,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,449,447,452,452,426,439,426,437],
[427,0,445,413,447,459,427,428,431,429],
[441,445,0,424,449,475,438,440,423,442],
[443,477,466,0,485,495,456,477,447,462],
[438,443,441,405,0,453,450,436,421,447],
[438,431,415,395,437,0,433,431,388,433],
[464,463,452,434,440,457,0,457,422,437],
[451,462,450,413,454,459,433,0,422,444],
[464,459,467,443,469,502,468,468,0,458],
[453,461,448,428,443,457,453,446,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,482,463,459,448,455,477,475,442],
[402,0,470,426,427,434,448,452,473,436],
[408,420,0,436,425,423,426,441,449,420],
[427,464,454,0,440,426,458,449,449,438],
[431,463,465,450,0,454,449,469,451,449],
[442,456,467,464,436,0,454,464,453,464],
[435,442,464,432,441,436,0,456,440,446],
[413,438,449,441,421,426,434,0,452,443],
[415,417,441,441,439,437,450,438,0,457],
[448,454,470,452,441,426,444,447,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,422,476,432,440,427,440,477,437],
[455,0,459,456,465,469,431,449,500,479],
[468,431,0,457,469,467,436,445,457,447],
[414,434,433,0,439,424,419,425,476,460],
[458,425,421,451,0,460,437,441,479,456],
[450,421,423,466,430,0,416,429,478,444],
[463,459,454,471,453,474,0,441,461,491],
[450,441,445,465,449,461,449,0,483,483],
[413,390,433,414,411,412,429,407,0,427],
[453,411,443,430,434,446,399,407,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,424,453,465,455,453,432,410,466],
[441,0,434,455,440,445,437,429,439,438],
[466,456,0,447,463,464,467,460,451,438],
[437,435,443,0,448,437,429,435,415,444],
[425,450,427,442,0,438,436,428,414,456],
[435,445,426,453,452,0,430,436,432,431],
[437,453,423,461,454,460,0,444,433,454],
[458,461,430,455,462,454,446,0,443,453],
[480,451,439,475,476,458,457,447,0,426],
[424,452,452,446,434,459,436,437,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,425,457,426,429,473,453,415,456],
[445,0,457,448,419,425,458,425,414,422],
[465,433,0,440,427,413,450,444,407,411],
[433,442,450,0,417,446,444,439,412,411],
[464,471,463,473,0,453,508,472,424,434],
[461,465,477,444,437,0,486,451,440,426],
[417,432,440,446,382,404,0,417,402,423],
[437,465,446,451,418,439,473,0,460,453],
[475,476,483,478,466,450,488,430,0,469],
[434,468,479,479,456,464,467,437,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,459,459,470,454,420,462,457,415],
[431,0,447,453,506,415,440,437,439,451],
[431,443,0,478,428,440,440,478,486,445],
[431,437,412,0,434,391,426,441,475,425],
[420,384,462,456,0,452,449,442,420,402],
[436,475,450,499,438,0,450,434,438,466],
[470,450,450,464,441,440,0,456,451,454],
[428,453,412,449,448,456,434,0,482,411],
[433,451,404,415,470,452,439,408,0,411],
[475,439,445,465,488,424,436,479,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,463,496,428,435,435,459,409,469],
[467,0,426,461,445,411,413,461,432,485],
[427,464,0,466,416,435,420,464,392,437],
[394,429,424,0,420,450,422,467,427,457],
[462,445,474,470,0,436,450,484,425,467],
[455,479,455,440,454,0,405,481,453,475],
[455,477,470,468,440,485,0,460,435,491],
[431,429,426,423,406,409,430,0,401,436],
[481,458,498,463,465,437,455,489,0,496],
[421,405,453,433,423,415,399,454,394,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,475,429,420,414,378,444,448,414],
[432,0,469,443,431,423,414,460,471,445],
[415,421,0,418,413,414,422,442,433,410],
[461,447,472,0,453,452,443,440,500,453],
[470,459,477,437,0,419,428,483,480,441],
[476,467,476,438,471,0,452,468,478,461],
[512,476,468,447,462,438,0,476,463,445],
[446,430,448,450,407,422,414,0,473,431],
[442,419,457,390,410,412,427,417,0,406],
[476,445,480,437,449,429,445,459,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,453,443,405,396,433,420,424,414],
[461,0,437,467,414,450,440,457,444,452],
[437,453,0,426,408,409,436,443,454,446],
[447,423,464,0,409,437,417,449,454,420],
[485,476,482,481,0,438,450,491,459,447],
[494,440,481,453,452,0,454,441,442,443],
[457,450,454,473,440,436,0,473,444,452],
[470,433,447,441,399,449,417,0,450,436],
[466,446,436,436,431,448,446,440,0,433],
[476,438,444,470,443,447,438,454,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,432,473,478,451,518,462,489,477],
[404,0,452,461,452,413,455,398,444,434],
[458,438,0,475,455,456,481,450,479,442],
[417,429,415,0,422,412,444,416,500,422],
[412,438,435,468,0,424,460,417,449,427],
[439,477,434,478,466,0,491,460,480,427],
[372,435,409,446,430,399,0,446,457,406],
[428,492,440,474,473,430,444,0,504,460],
[401,446,411,390,441,410,433,386,0,384],
[413,456,448,468,463,463,484,430,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,449,447,432,450,443,433,444,423],
[451,0,508,452,481,460,455,447,462,412],
[441,382,0,420,424,419,433,397,419,417],
[443,438,470,0,439,420,445,427,475,426],
[458,409,466,451,0,432,460,423,443,423],
[440,430,471,470,458,0,452,456,458,426],
[447,435,457,445,430,438,0,428,453,409],
[457,443,493,463,467,434,462,0,458,452],
[446,428,471,415,447,432,437,432,0,413],
[467,478,473,464,467,464,481,438,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,414,432,411,445,436,396,436,415],
[452,0,436,451,465,458,436,442,442,434],
[476,454,0,468,442,486,450,436,463,460],
[458,439,422,0,436,447,455,456,453,425],
[479,425,448,454,0,451,469,452,458,444],
[445,432,404,443,439,0,441,402,413,423],
[454,454,440,435,421,449,0,437,427,426],
[494,448,454,434,438,488,453,0,443,436],
[454,448,427,437,432,477,463,447,0,450],
[475,456,430,465,446,467,464,454,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,438,435,466,429,435,444,452,444],
[435,0,445,439,430,443,436,435,412,420],
[452,445,0,452,463,443,438,452,440,446],
[455,451,438,0,460,445,451,441,430,448],
[424,460,427,430,0,425,439,426,433,434],
[461,447,447,445,465,0,459,442,455,442],
[455,454,452,439,451,431,0,463,435,430],
[446,455,438,449,464,448,427,0,421,444],
[438,478,450,460,457,435,455,469,0,432],
[446,470,444,442,456,448,460,446,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,438,460,415,452,441,451,432,436],
[434,0,459,456,426,409,415,458,426,428],
[452,431,0,455,429,442,438,480,409,442],
[430,434,435,0,439,423,453,473,423,458],
[475,464,461,451,0,435,442,488,446,446],
[438,481,448,467,455,0,458,470,433,448],
[449,475,452,437,448,432,0,466,434,464],
[439,432,410,417,402,420,424,0,424,423],
[458,464,481,467,444,457,456,466,0,448],
[454,462,448,432,444,442,426,467,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,522,442,414,427,417,432,402,424],
[441,0,469,454,395,402,447,438,461,421],
[368,421,0,427,409,458,429,435,402,419],
[448,436,463,0,449,464,451,452,446,470],
[476,495,481,441,0,484,448,478,429,463],
[463,488,432,426,406,0,389,456,393,419],
[473,443,461,439,442,501,0,448,484,435],
[458,452,455,438,412,434,442,0,445,460],
[488,429,488,444,461,497,406,445,0,458],
[466,469,471,420,427,471,455,430,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,431,526,450,525,397,482,369,473],
[391,0,379,454,390,523,400,453,371,452],
[459,511,0,458,420,506,408,458,389,487],
[364,436,432,0,296,491,382,444,370,401],
[440,500,470,594,0,566,489,487,449,513],
[365,367,384,399,324,0,340,425,325,352],
[493,490,482,508,401,550,0,419,374,517],
[408,437,432,446,403,465,471,0,323,453],
[521,519,501,520,441,565,516,567,0,511],
[417,438,403,489,377,538,373,437,379,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,470,454,486,499,392,472,448,447],
[455,0,469,439,488,521,460,479,447,461],
[420,421,0,450,460,493,415,427,409,439],
[436,451,440,0,493,478,446,414,427,405],
[404,402,430,397,0,485,420,437,421,416],
[391,369,397,412,405,0,408,416,424,402],
[498,430,475,444,470,482,0,465,428,466],
[418,411,463,476,453,474,425,0,397,460],
[442,443,481,463,469,466,462,493,0,470],
[443,429,451,485,474,488,424,430,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,397,404,402,408,404,390,409,388,416],
[493,0,476,451,452,422,461,481,450,496],
[486,414,0,427,420,423,442,430,439,467],
[488,439,463,0,462,422,417,441,443,471],
[482,438,470,428,0,437,425,415,429,477],
[486,468,467,468,453,0,436,478,470,481],
[500,429,448,473,465,454,0,436,416,443],
[481,409,460,449,475,412,454,0,432,451],
[502,440,451,447,461,420,474,458,0,489],
[474,394,423,419,413,409,447,439,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,457,504,453,478,459,463,426,484],
[457,0,469,524,462,514,507,467,471,389],
[433,421,0,485,484,469,496,454,422,517],
[386,366,405,0,396,394,399,438,420,391],
[437,428,406,494,0,410,408,429,505,404],
[412,376,421,496,480,0,464,372,398,451],
[431,383,394,491,482,426,0,455,502,371],
[427,423,436,452,461,518,435,0,459,479],
[464,419,468,470,385,492,388,431,0,421],
[406,501,373,499,486,439,519,411,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,413,427,440,411,410,445,447,437],
[459,0,459,477,477,474,417,463,440,447],
[477,431,0,463,441,474,447,459,447,441],
[463,413,427,0,424,420,443,469,480,419],
[450,413,449,466,0,446,422,440,452,443],
[479,416,416,470,444,0,408,472,453,423],
[480,473,443,447,468,482,0,467,466,440],
[445,427,431,421,450,418,423,0,446,420],
[443,450,443,410,438,437,424,444,0,453],
[453,443,449,471,447,467,450,470,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,422,418,479,448,461,445,405,411],
[413,0,378,426,465,429,448,398,415,436],
[468,512,0,468,457,450,445,438,427,455],
[472,464,422,0,472,490,469,478,459,462],
[411,425,433,418,0,447,439,403,371,474],
[442,461,440,400,443,0,431,446,433,442],
[429,442,445,421,451,459,0,432,434,392],
[445,492,452,412,487,444,458,0,426,490],
[485,475,463,431,519,457,456,464,0,492],
[479,454,435,428,416,448,498,400,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,458,448,443,419,432,456,463,422],
[428,0,433,472,465,442,450,456,457,448],
[432,457,0,441,440,419,436,464,450,417],
[442,418,449,0,453,432,434,439,457,437],
[447,425,450,437,0,441,435,455,437,426],
[471,448,471,458,449,0,472,441,464,458],
[458,440,454,456,455,418,0,473,466,451],
[434,434,426,451,435,449,417,0,442,428],
[427,433,440,433,453,426,424,448,0,445],
[468,442,473,453,464,432,439,462,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,443,436,447,439,422,451,432,422],
[477,0,446,412,456,469,445,429,433,410],
[447,444,0,414,461,454,434,452,412,446],
[454,478,476,0,473,474,431,491,465,447],
[443,434,429,417,0,423,404,431,417,440],
[451,421,436,416,467,0,431,433,408,439],
[468,445,456,459,486,459,0,467,470,472],
[439,461,438,399,459,457,423,0,426,449],
[458,457,478,425,473,482,420,464,0,431],
[468,480,444,443,450,451,418,441,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,456,510,433,375,429,457,407,323],
[488,0,489,567,354,488,407,546,410,357],
[434,401,0,484,435,432,432,489,408,380],
[380,323,406,0,405,462,381,411,328,245],
[457,536,455,485,0,592,459,541,378,375],
[515,402,458,428,298,0,457,486,324,326],
[461,483,458,509,431,433,0,462,300,459],
[433,344,401,479,349,404,428,0,353,327],
[483,480,482,562,512,566,590,537,0,432],
[567,533,510,645,515,564,431,563,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,411,437,463,385,395,386,425,405],
[446,0,440,422,454,410,475,423,449,421],
[479,450,0,450,475,422,462,481,402,408],
[453,468,440,0,451,415,437,423,420,403],
[427,436,415,439,0,464,442,427,403,394],
[505,480,468,475,426,0,456,467,440,443],
[495,415,428,453,448,434,0,404,422,440],
[504,467,409,467,463,423,486,0,450,439],
[465,441,488,470,487,450,468,440,0,467],
[485,469,482,487,496,447,450,451,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,419,411,420,420,420,428,439,419],
[446,0,448,430,434,449,450,476,461,430],
[471,442,0,431,449,449,420,462,474,425],
[479,460,459,0,440,449,457,454,480,444],
[470,456,441,450,0,454,455,452,440,472],
[470,441,441,441,436,0,448,463,477,437],
[470,440,470,433,435,442,0,452,484,455],
[462,414,428,436,438,427,438,0,424,440],
[451,429,416,410,450,413,406,466,0,427],
[471,460,465,446,418,453,435,450,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,439,438,438,428,420,434,416,454],
[471,0,459,459,465,450,452,455,443,450],
[451,431,0,451,468,431,456,444,439,464],
[452,431,439,0,466,426,434,434,447,461],
[452,425,422,424,0,431,434,406,412,454],
[462,440,459,464,459,0,444,438,436,473],
[470,438,434,456,456,446,0,425,429,459],
[456,435,446,456,484,452,465,0,427,468],
[474,447,451,443,478,454,461,463,0,479],
[436,440,426,429,436,417,431,422,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,434,440,455,440,461,424,452,450],
[433,0,411,427,433,446,455,442,439,437],
[456,479,0,452,464,461,465,436,450,458],
[450,463,438,0,467,467,475,421,462,476],
[435,457,426,423,0,454,455,423,449,439],
[450,444,429,423,436,0,469,449,438,449],
[429,435,425,415,435,421,0,428,433,442],
[466,448,454,469,467,441,462,0,450,467],
[438,451,440,428,441,452,457,440,0,436],
[440,453,432,414,451,441,448,423,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,470,424,451,479,450,441,453,445],
[452,0,432,423,431,434,457,443,431,426],
[420,458,0,419,453,458,417,410,446,414],
[466,467,471,0,467,459,450,462,423,453],
[439,459,437,423,0,435,430,419,415,428],
[411,456,432,431,455,0,437,438,442,434],
[440,433,473,440,460,453,0,431,437,428],
[449,447,480,428,471,452,459,0,457,446],
[437,459,444,467,475,448,453,433,0,455],
[445,464,476,437,462,456,462,444,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,439,449,442,435,431,432,444,431],
[478,0,457,491,466,437,450,459,462,447],
[451,433,0,457,448,451,425,442,461,416],
[441,399,433,0,420,420,412,435,449,423],
[448,424,442,470,0,434,426,443,465,440],
[455,453,439,470,456,0,456,438,464,434],
[459,440,465,478,464,434,0,464,464,435],
[458,431,448,455,447,452,426,0,443,416],
[446,428,429,441,425,426,426,447,0,423],
[459,443,474,467,450,456,455,474,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,414,458,441,450,421,440,432,435],
[454,0,434,420,413,463,431,434,419,427],
[476,456,0,452,434,477,472,458,469,444],
[432,470,438,0,450,445,447,426,437,437],
[449,477,456,440,0,441,464,447,464,474],
[440,427,413,445,449,0,456,435,443,462],
[469,459,418,443,426,434,0,434,455,441],
[450,456,432,464,443,455,456,0,432,445],
[458,471,421,453,426,447,435,458,0,444],
[455,463,446,453,416,428,449,445,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,460,453,401,454,434,485,436,431],
[444,0,439,447,421,426,454,459,463,416],
[430,451,0,450,456,442,439,432,460,447],
[437,443,440,0,430,455,439,452,421,424],
[489,469,434,460,0,456,474,464,459,458],
[436,464,448,435,434,0,456,466,442,467],
[456,436,451,451,416,434,0,460,442,457],
[405,431,458,438,426,424,430,0,438,423],
[454,427,430,469,431,448,448,452,0,434],
[459,474,443,466,432,423,433,467,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,412,436,410,409,432,436,433,431],
[443,0,400,430,409,404,416,436,429,451],
[478,490,0,482,455,468,434,478,460,485],
[454,460,408,0,417,424,442,447,429,434],
[480,481,435,473,0,447,450,449,444,460],
[481,486,422,466,443,0,448,467,453,474],
[458,474,456,448,440,442,0,448,443,472],
[454,454,412,443,441,423,442,0,428,447],
[457,461,430,461,446,437,447,462,0,459],
[459,439,405,456,430,416,418,443,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,463,440,430,463,453,445,417,423],
[448,0,440,421,386,378,428,435,391,401],
[427,450,0,479,437,518,439,485,435,427],
[450,469,411,0,405,455,480,451,429,409],
[460,504,453,485,0,470,475,487,445,458],
[427,512,372,435,420,0,474,428,444,425],
[437,462,451,410,415,416,0,432,395,379],
[445,455,405,439,403,462,458,0,436,411],
[473,499,455,461,445,446,495,454,0,433],
[467,489,463,481,432,465,511,479,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,510,455,440,458,415,474,486,468],
[406,0,457,439,453,451,431,455,456,430],
[380,433,0,438,417,407,397,413,434,409],
[435,451,452,0,404,424,407,420,472,394],
[450,437,473,486,0,455,480,457,517,475],
[432,439,483,466,435,0,411,435,474,435],
[475,459,493,483,410,479,0,440,491,451],
[416,435,477,470,433,455,450,0,475,433],
[404,434,456,418,373,416,399,415,0,399],
[422,460,481,496,415,455,439,457,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,463,424,390,509,483,480,467,450],
[470,0,480,413,444,511,469,466,447,476],
[427,410,0,418,354,382,405,463,447,411],
[466,477,472,0,424,450,466,484,440,466],
[500,446,536,466,0,409,473,477,508,446],
[381,379,508,440,481,0,427,458,405,363],
[407,421,485,424,417,463,0,429,500,412],
[410,424,427,406,413,432,461,0,519,450],
[423,443,443,450,382,485,390,371,0,348],
[440,414,479,424,444,527,478,440,542,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,363,409,401,432,406,459,402,404,463],
[527,0,470,405,453,425,440,458,452,504],
[481,420,0,473,435,480,531,455,441,515],
[489,485,417,0,461,457,493,490,430,486],
[458,437,455,429,0,437,473,443,485,519],
[484,465,410,433,453,0,494,443,495,507],
[431,450,359,397,417,396,0,431,442,437],
[488,432,435,400,447,447,459,0,446,474],
[486,438,449,460,405,395,448,444,0,430],
[427,386,375,404,371,383,453,416,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,441,464,457,472,473,470,492,471],
[399,0,382,446,398,425,417,418,420,421],
[449,508,0,465,453,482,456,402,486,461],
[426,444,425,0,431,466,462,442,453,449],
[433,492,437,459,0,469,455,429,435,445],
[418,465,408,424,421,0,427,409,476,402],
[417,473,434,428,435,463,0,413,435,413],
[420,472,488,448,461,481,477,0,474,446],
[398,470,404,437,455,414,455,416,0,414],
[419,469,429,441,445,488,477,444,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,431,448,434,434,444,426,425,438],
[455,0,422,440,446,455,448,448,450,455],
[459,468,0,452,480,434,456,474,438,453],
[442,450,438,0,430,401,454,443,406,445],
[456,444,410,460,0,445,470,460,444,459],
[456,435,456,489,445,0,470,466,469,437],
[446,442,434,436,420,420,0,423,385,450],
[464,442,416,447,430,424,467,0,414,425],
[465,440,452,484,446,421,505,476,0,465],
[452,435,437,445,431,453,440,465,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,450,432,423,445,427,435,467,447],
[436,0,435,438,430,434,422,413,453,429],
[440,455,0,461,433,449,456,453,455,448],
[458,452,429,0,425,440,460,410,441,442],
[467,460,457,465,0,455,461,427,474,460],
[445,456,441,450,435,0,441,423,443,437],
[463,468,434,430,429,449,0,453,477,448],
[455,477,437,480,463,467,437,0,463,469],
[423,437,435,449,416,447,413,427,0,424],
[443,461,442,448,430,453,442,421,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,434,433,433,446,413,432,433,445],
[446,0,449,426,469,436,433,441,444,435],
[456,441,0,447,477,446,427,480,428,453],
[457,464,443,0,471,449,446,440,446,425],
[457,421,413,419,0,448,419,434,411,442],
[444,454,444,441,442,0,433,447,418,429],
[477,457,463,444,471,457,0,450,450,429],
[458,449,410,450,456,443,440,0,434,433],
[457,446,462,444,479,472,440,456,0,463],
[445,455,437,465,448,461,461,457,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,431,416,400,414,388,431,405,420],
[435,0,419,416,407,405,434,420,476,438],
[459,471,0,441,439,429,422,438,461,449],
[474,474,449,0,411,444,442,458,462,435],
[490,483,451,479,0,443,452,446,474,449],
[476,485,461,446,447,0,443,459,455,448],
[502,456,468,448,438,447,0,470,491,433],
[459,470,452,432,444,431,420,0,453,416],
[485,414,429,428,416,435,399,437,0,446],
[470,452,441,455,441,442,457,474,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,440,431,466,470,422,461,437,451],
[439,0,430,428,437,447,420,445,432,426],
[450,460,0,442,456,437,406,460,458,445],
[459,462,448,0,444,470,446,440,443,460],
[424,453,434,446,0,455,430,438,430,435],
[420,443,453,420,435,0,400,429,429,434],
[468,470,484,444,460,490,0,479,461,446],
[429,445,430,450,452,461,411,0,446,447],
[453,458,432,447,460,461,429,444,0,449],
[439,464,445,430,455,456,444,443,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,453,457,433,450,468,434,433,447],
[430,0,445,437,438,443,432,423,431,420],
[437,445,0,437,417,459,420,428,433,430],
[433,453,453,0,458,461,464,430,467,440],
[457,452,473,432,0,467,470,421,460,427],
[440,447,431,429,423,0,450,402,423,421],
[422,458,470,426,420,440,0,442,444,449],
[456,467,462,460,469,488,448,0,455,433],
[457,459,457,423,430,467,446,435,0,453],
[443,470,460,450,463,469,441,457,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,467,464,463,445,456,422,464,446],
[451,0,447,417,431,434,432,423,429,426],
[423,443,0,435,451,453,410,446,456,461],
[426,473,455,0,448,466,439,423,445,458],
[427,459,439,442,0,454,446,442,444,415],
[445,456,437,424,436,0,414,440,428,441],
[434,458,480,451,444,476,0,450,451,452],
[468,467,444,467,448,450,440,0,442,478],
[426,461,434,445,446,462,439,448,0,445],
[444,464,429,432,475,449,438,412,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,479,474,425,472,450,472,469,459],
[433,0,447,454,418,447,433,436,453,443],
[411,443,0,456,441,448,456,466,450,436],
[416,436,434,0,396,415,435,434,446,436],
[465,472,449,494,0,465,460,458,453,445],
[418,443,442,475,425,0,451,463,463,438],
[440,457,434,455,430,439,0,441,455,438],
[418,454,424,456,432,427,449,0,445,426],
[421,437,440,444,437,427,435,445,0,447],
[431,447,454,454,445,452,452,464,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,478,496,473,488,452,451,462,453],
[456,0,454,489,475,482,461,448,440,467],
[412,436,0,463,454,468,448,443,434,447],
[394,401,427,0,440,448,450,398,427,460],
[417,415,436,450,0,458,421,409,415,446],
[402,408,422,442,432,0,447,435,430,404],
[438,429,442,440,469,443,0,429,447,435],
[439,442,447,492,481,455,461,0,426,471],
[428,450,456,463,475,460,443,464,0,447],
[437,423,443,430,444,486,455,419,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,464,460,437,442,425,421,446,456],
[425,0,463,457,454,422,430,450,445,449],
[426,427,0,431,424,473,428,428,403,462],
[430,433,459,0,458,446,420,411,427,418],
[453,436,466,432,0,450,440,436,442,436],
[448,468,417,444,440,0,414,439,438,446],
[465,460,462,470,450,476,0,427,457,460],
[469,440,462,479,454,451,463,0,451,462],
[444,445,487,463,448,452,433,439,0,428],
[434,441,428,472,454,444,430,428,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,404,453,442,437,414,425,426,449],
[466,0,448,459,464,454,475,441,474,468],
[486,442,0,456,461,461,437,446,476,477],
[437,431,434,0,454,467,452,424,460,489],
[448,426,429,436,0,412,454,438,446,464],
[453,436,429,423,478,0,452,429,429,470],
[476,415,453,438,436,438,0,423,436,468],
[465,449,444,466,452,461,467,0,475,463],
[464,416,414,430,444,461,454,415,0,460],
[441,422,413,401,426,420,422,427,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,444,499,455,423,481,446,449,472],
[416,0,430,494,421,409,453,407,415,405],
[446,460,0,493,449,448,442,441,469,493],
[391,396,397,0,387,411,430,434,408,398],
[435,469,441,503,0,489,519,449,459,439],
[467,481,442,479,401,0,489,444,454,422],
[409,437,448,460,371,401,0,420,447,397],
[444,483,449,456,441,446,470,0,470,440],
[441,475,421,482,431,436,443,420,0,441],
[418,485,397,492,451,468,493,450,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,445,436,429,433,449,472,440,438],
[436,0,452,434,437,448,432,477,443,452],
[445,438,0,451,477,429,487,466,432,500],
[454,456,439,0,444,441,454,471,411,431],
[461,453,413,446,0,423,443,476,455,514],
[457,442,461,449,467,0,477,490,462,473],
[441,458,403,436,447,413,0,463,448,473],
[418,413,424,419,414,400,427,0,407,400],
[450,447,458,479,435,428,442,483,0,443],
[452,438,390,459,376,417,417,490,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,477,473,456,454,444,473,481,461],
[414,0,449,436,456,444,444,441,452,440],
[413,441,0,447,439,419,439,435,432,426],
[417,454,443,0,470,449,459,454,445,448],
[434,434,451,420,0,423,423,444,449,429],
[436,446,471,441,467,0,476,476,439,441],
[446,446,451,431,467,414,0,460,455,461],
[417,449,455,436,446,414,430,0,430,421],
[409,438,458,445,441,451,435,460,0,440],
[429,450,464,442,461,449,429,469,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,443,417,430,480,430,453,478,463],
[415,0,423,442,373,416,426,427,466,435],
[447,467,0,474,429,472,445,426,492,429],
[473,448,416,0,427,471,415,458,471,431],
[460,517,461,463,0,495,450,439,508,441],
[410,474,418,419,395,0,418,433,465,469],
[460,464,445,475,440,472,0,436,497,445],
[437,463,464,432,451,457,454,0,517,429],
[412,424,398,419,382,425,393,373,0,420],
[427,455,461,459,449,421,445,461,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,424,407,445,447,463,413,427,433],
[461,0,408,420,457,449,462,430,456,445],
[466,482,0,461,462,498,467,436,489,467],
[483,470,429,0,463,472,478,441,462,459],
[445,433,428,427,0,442,451,429,435,426],
[443,441,392,418,448,0,451,414,432,423],
[427,428,423,412,439,439,0,445,432,463],
[477,460,454,449,461,476,445,0,464,475],
[463,434,401,428,455,458,458,426,0,432],
[457,445,423,431,464,467,427,415,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,451,430,447,446,436,430,451,410],
[414,0,445,416,448,452,438,406,460,432],
[439,445,0,432,460,468,447,428,465,431],
[460,474,458,0,471,481,455,454,488,437],
[443,442,430,419,0,440,445,423,462,432],
[444,438,422,409,450,0,433,422,469,392],
[454,452,443,435,445,457,0,435,466,434],
[460,484,462,436,467,468,455,0,475,454],
[439,430,425,402,428,421,424,415,0,412],
[480,458,459,453,458,498,456,436,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,449,438,434,439,494,443,445,428],
[436,0,477,449,452,455,475,445,447,455],
[441,413,0,447,446,408,463,423,455,424],
[452,441,443,0,435,425,462,423,452,436],
[456,438,444,455,0,427,481,422,429,419],
[451,435,482,465,463,0,475,450,437,442],
[396,415,427,428,409,415,0,416,430,415],
[447,445,467,467,468,440,474,0,445,397],
[445,443,435,438,461,453,460,445,0,431],
[462,435,466,454,471,448,475,493,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,457,450,450,454,452,428,456,468],
[450,0,455,465,450,478,445,461,456,479],
[433,435,0,463,437,456,444,456,460,446],
[440,425,427,0,427,440,423,415,445,464],
[440,440,453,463,0,460,449,485,449,460],
[436,412,434,450,430,0,421,405,446,448],
[438,445,446,467,441,469,0,451,478,482],
[462,429,434,475,405,485,439,0,462,465],
[434,434,430,445,441,444,412,428,0,446],
[422,411,444,426,430,442,408,425,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,480,488,505,513,511,540,384,519],
[398,0,414,431,430,440,416,462,402,413],
[410,476,0,435,433,395,453,553,451,453],
[402,459,455,0,458,452,445,511,449,454],
[385,460,457,432,0,500,462,496,454,457],
[377,450,495,438,390,0,394,480,392,428],
[379,474,437,445,428,496,0,510,376,469],
[350,428,337,379,394,410,380,0,367,416],
[506,488,439,441,436,498,514,523,0,480],
[371,477,437,436,433,462,421,474,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,465,475,511,445,437,416,521,443],
[486,0,509,460,498,483,444,459,515,477],
[425,381,0,437,425,399,418,435,447,421],
[415,430,453,0,494,474,465,433,488,464],
[379,392,465,396,0,436,426,407,477,442],
[445,407,491,416,454,0,427,392,511,461],
[453,446,472,425,464,463,0,429,496,481],
[474,431,455,457,483,498,461,0,525,462],
[369,375,443,402,413,379,394,365,0,423],
[447,413,469,426,448,429,409,428,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,388,430,406,417,423,423,419,399,437],
[502,0,409,434,397,385,427,430,417,424],
[460,481,0,450,424,430,451,492,427,445],
[484,456,440,0,447,400,401,400,412,428],
[473,493,466,443,0,444,470,414,449,461],
[467,505,460,490,446,0,471,453,436,485],
[467,463,439,489,420,419,0,441,428,459],
[471,460,398,490,476,437,449,0,445,462],
[491,473,463,478,441,454,462,445,0,480],
[453,466,445,462,429,405,431,428,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,385,415,437,526,429,446,439,449],
[458,0,444,439,470,527,502,499,444,462],
[505,446,0,422,506,503,427,434,411,481],
[475,451,468,0,515,521,434,454,474,470],
[453,420,384,375,0,434,385,395,407,430],
[364,363,387,369,456,0,396,408,403,384],
[461,388,463,456,505,494,0,477,401,444],
[444,391,456,436,495,482,413,0,465,407],
[451,446,479,416,483,487,489,425,0,441],
[441,428,409,420,460,506,446,483,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,432,416,444,414,485,480,443,425],
[440,0,421,468,470,412,439,476,443,463],
[458,469,0,438,457,429,471,480,445,457],
[474,422,452,0,439,459,469,477,413,458],
[446,420,433,451,0,407,451,451,458,443],
[476,478,461,431,483,0,467,511,468,469],
[405,451,419,421,439,423,0,451,436,429],
[410,414,410,413,439,379,439,0,447,464],
[447,447,445,477,432,422,454,443,0,441],
[465,427,433,432,447,421,461,426,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,396,429,445,445,424,454,444,437],
[456,0,437,430,456,435,410,431,435,462],
[494,453,0,438,458,465,432,454,462,439],
[461,460,452,0,480,431,445,444,454,461],
[445,434,432,410,0,433,420,458,440,439],
[445,455,425,459,457,0,428,426,410,439],
[466,480,458,445,470,462,0,433,461,445],
[436,459,436,446,432,464,457,0,448,459],
[446,455,428,436,450,480,429,442,0,481],
[453,428,451,429,451,451,445,431,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,425,450,429,416,428,425,434,437],
[428,0,417,431,399,413,414,417,408,403],
[465,473,0,452,436,457,437,421,457,438],
[440,459,438,0,438,416,448,414,453,419],
[461,491,454,452,0,442,444,430,439,444],
[474,477,433,474,448,0,445,448,470,454],
[462,476,453,442,446,445,0,431,436,448],
[465,473,469,476,460,442,459,0,459,465],
[456,482,433,437,451,420,454,431,0,447],
[453,487,452,471,446,436,442,425,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,438,435,420,450,413,448,443,428],
[421,0,408,379,434,449,444,422,444,411],
[452,482,0,418,448,459,457,468,473,454],
[455,511,472,0,440,469,460,444,438,453],
[470,456,442,450,0,481,456,422,448,439],
[440,441,431,421,409,0,428,417,417,407],
[477,446,433,430,434,462,0,445,473,435],
[442,468,422,446,468,473,445,0,467,450],
[447,446,417,452,442,473,417,423,0,423],
[462,479,436,437,451,483,455,440,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,435,441,439,414,448,432,438,412],
[442,0,412,440,410,441,424,401,452,426],
[455,478,0,455,448,443,430,435,464,456],
[449,450,435,0,426,422,422,423,444,453],
[451,480,442,464,0,454,445,445,494,456],
[476,449,447,468,436,0,450,427,454,449],
[442,466,460,468,445,440,0,408,459,466],
[458,489,455,467,445,463,482,0,468,456],
[452,438,426,446,396,436,431,422,0,436],
[478,464,434,437,434,441,424,434,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,444,454,443,417,456,459,461,458],
[439,0,436,438,435,410,441,439,453,439],
[446,454,0,469,440,455,455,469,478,497],
[436,452,421,0,446,441,454,436,430,458],
[447,455,450,444,0,420,474,452,454,456],
[473,480,435,449,470,0,477,476,471,484],
[434,449,435,436,416,413,0,441,436,439],
[431,451,421,454,438,414,449,0,442,439],
[429,437,412,460,436,419,454,448,0,440],
[432,451,393,432,434,406,451,451,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,453,442,432,455,476,474,415,418],
[449,0,435,468,466,459,466,521,461,474],
[437,455,0,430,426,442,441,482,429,466],
[448,422,460,0,428,465,471,500,464,487],
[458,424,464,462,0,436,436,505,456,447],
[435,431,448,425,454,0,462,478,410,390],
[414,424,449,419,454,428,0,481,387,422],
[416,369,408,390,385,412,409,0,408,366],
[475,429,461,426,434,480,503,482,0,446],
[472,416,424,403,443,500,468,524,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,391,387,370,422,316,448,372,418,366],
[499,0,492,471,497,418,574,341,524,495],
[503,398,0,479,477,339,503,423,553,475],
[520,419,411,0,472,263,497,342,441,362],
[468,393,413,418,0,466,519,470,495,362],
[574,472,551,627,424,0,500,498,575,551],
[442,316,387,393,371,390,0,367,471,362],
[518,549,467,548,420,392,523,0,597,493],
[472,366,337,449,395,315,419,293,0,394],
[524,395,415,528,528,339,528,397,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,485,439,480,442,515,469,489,502],
[417,0,462,399,424,419,449,444,477,474],
[405,428,0,374,437,413,424,439,438,453],
[451,491,516,0,440,464,459,490,451,489],
[410,466,453,450,0,411,418,443,489,458],
[448,471,477,426,479,0,444,434,508,496],
[375,441,466,431,472,446,0,449,453,486],
[421,446,451,400,447,456,441,0,473,473],
[401,413,452,439,401,382,437,417,0,444],
[388,416,437,401,432,394,404,417,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,465,436,453,456,461,420,430,473],
[459,0,476,454,465,470,457,431,435,447],
[425,414,0,443,420,449,437,431,432,454],
[454,436,447,0,461,470,468,466,449,472],
[437,425,470,429,0,451,467,446,460,455],
[434,420,441,420,439,0,439,432,414,467],
[429,433,453,422,423,451,0,435,416,440],
[470,459,459,424,444,458,455,0,432,478],
[460,455,458,441,430,476,474,458,0,473],
[417,443,436,418,435,423,450,412,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,435,452,474,434,433,468,456,431],
[423,0,435,463,476,447,446,467,441,428],
[455,455,0,457,498,465,442,480,451,451],
[438,427,433,0,454,448,425,451,424,441],
[416,414,392,436,0,413,414,452,399,416],
[456,443,425,442,477,0,434,463,448,435],
[457,444,448,465,476,456,0,459,451,468],
[422,423,410,439,438,427,431,0,425,438],
[434,449,439,466,491,442,439,465,0,453],
[459,462,439,449,474,455,422,452,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,429,439,407,397,431,467,435,421],
[473,0,454,505,440,428,468,491,427,453],
[461,436,0,466,457,437,457,492,442,439],
[451,385,424,0,429,426,426,464,427,374],
[483,450,433,461,0,435,451,459,475,449],
[493,462,453,464,455,0,449,490,445,446],
[459,422,433,464,439,441,0,471,422,437],
[423,399,398,426,431,400,419,0,419,397],
[455,463,448,463,415,445,468,471,0,453],
[469,437,451,516,441,444,453,493,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,441,442,444,407,438,416,435,459],
[482,0,475,456,467,437,449,441,450,483],
[449,415,0,463,462,442,464,446,460,436],
[448,434,427,0,448,448,440,415,484,430],
[446,423,428,442,0,419,453,422,469,454],
[483,453,448,442,471,0,456,447,457,439],
[452,441,426,450,437,434,0,419,454,438],
[474,449,444,475,468,443,471,0,475,485],
[455,440,430,406,421,433,436,415,0,435],
[431,407,454,460,436,451,452,405,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,467,458,455,460,457,456,463,452],
[462,0,472,472,466,427,468,452,472,468],
[423,418,0,433,437,433,445,431,442,440],
[432,418,457,0,442,451,441,432,463,443],
[435,424,453,448,0,425,446,448,462,439],
[430,463,457,439,465,0,448,441,481,455],
[433,422,445,449,444,442,0,435,442,433],
[434,438,459,458,442,449,455,0,455,452],
[427,418,448,427,428,409,448,435,0,438],
[438,422,450,447,451,435,457,438,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,404,432,423,416,442,438,438,432],
[438,0,420,437,469,417,427,409,439,441],
[486,470,0,461,470,447,434,443,447,455],
[458,453,429,0,450,465,461,456,448,458],
[467,421,420,440,0,435,424,425,457,458],
[474,473,443,425,455,0,429,449,460,435],
[448,463,456,429,466,461,0,425,468,451],
[452,481,447,434,465,441,465,0,471,461],
[452,451,443,442,433,430,422,419,0,442],
[458,449,435,432,432,455,439,429,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,437,450,453,443,438,454,453,460],
[418,0,444,429,443,439,450,454,470,420],
[453,446,0,432,449,421,434,438,465,461],
[440,461,458,0,445,433,440,459,455,457],
[437,447,441,445,0,391,432,451,429,450],
[447,451,469,457,499,0,452,460,445,458],
[452,440,456,450,458,438,0,453,433,450],
[436,436,452,431,439,430,437,0,430,454],
[437,420,425,435,461,445,457,460,0,466],
[430,470,429,433,440,432,440,436,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,429,447,430,384,429,435,429,405],
[430,0,417,437,418,415,458,430,431,432],
[461,473,0,432,451,412,467,440,481,428],
[443,453,458,0,407,436,452,459,436,453],
[460,472,439,483,0,456,461,455,480,438],
[506,475,478,454,434,0,467,491,444,442],
[461,432,423,438,429,423,0,464,447,407],
[455,460,450,431,435,399,426,0,426,463],
[461,459,409,454,410,446,443,464,0,438],
[485,458,462,437,452,448,483,427,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,453,396,418,485,435,431,453,408],
[416,0,429,378,421,445,457,428,407,418],
[437,461,0,447,443,467,489,412,443,449],
[494,512,443,0,441,474,481,417,462,482],
[472,469,447,449,0,484,469,438,462,428],
[405,445,423,416,406,0,458,394,437,443],
[455,433,401,409,421,432,0,419,384,424],
[459,462,478,473,452,496,471,0,426,442],
[437,483,447,428,428,453,506,464,0,456],
[482,472,441,408,462,447,466,448,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,455,470,505,482,481,443,451,442],
[408,0,449,462,497,450,464,437,472,448],
[435,441,0,464,469,447,413,444,435,407],
[420,428,426,0,435,430,437,440,412,421],
[385,393,421,455,0,401,386,400,439,394],
[408,440,443,460,489,0,416,436,437,446],
[409,426,477,453,504,474,0,418,456,452],
[447,453,446,450,490,454,472,0,433,442],
[439,418,455,478,451,453,434,457,0,441],
[448,442,483,469,496,444,438,448,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,470,519,567,474,514,377,421,473],
[377,0,373,378,330,377,332,281,235,332],
[420,517,0,423,425,470,327,375,421,377],
[371,512,467,0,332,517,376,371,281,328],
[323,560,465,558,0,422,375,420,372,420],
[416,513,420,373,468,0,422,461,418,468],
[376,558,563,514,515,468,0,374,417,422],
[513,609,515,519,470,429,516,0,466,378],
[469,655,469,609,518,472,473,424,0,473],
[417,558,513,562,470,422,468,512,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,456,396,436,437,449,424,461,445],
[440,0,462,385,431,442,459,413,441,423],
[434,428,0,418,407,397,412,422,437,426],
[494,505,472,0,430,457,467,467,476,451],
[454,459,483,460,0,500,471,445,453,445],
[453,448,493,433,390,0,460,465,464,441],
[441,431,478,423,419,430,0,416,425,442],
[466,477,468,423,445,425,474,0,464,442],
[429,449,453,414,437,426,465,426,0,447],
[445,467,464,439,445,449,448,448,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,413,434,441,470,427,439,468,446],
[455,0,428,456,430,446,442,459,464,462],
[477,462,0,440,426,462,454,469,451,444],
[456,434,450,0,453,462,442,462,448,442],
[449,460,464,437,0,495,447,451,467,455],
[420,444,428,428,395,0,404,429,411,440],
[463,448,436,448,443,486,0,474,457,468],
[451,431,421,428,439,461,416,0,466,452],
[422,426,439,442,423,479,433,424,0,446],
[444,428,446,448,435,450,422,438,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,431,404,419,407,421,423,425,400],
[454,0,433,439,481,432,427,468,436,423],
[459,457,0,414,449,414,431,444,450,403],
[486,451,476,0,483,440,447,432,453,440],
[471,409,441,407,0,432,426,432,450,430],
[483,458,476,450,458,0,442,451,467,457],
[469,463,459,443,464,448,0,447,430,437],
[467,422,446,458,458,439,443,0,456,444],
[465,454,440,437,440,423,460,434,0,450],
[490,467,487,450,460,433,453,446,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,449,454,463,457,482,418,508,478],
[428,0,449,454,445,436,455,375,460,448],
[441,441,0,464,459,489,481,460,474,475],
[436,436,426,0,531,468,448,433,439,447],
[427,445,431,359,0,436,452,443,401,411],
[433,454,401,422,454,0,451,449,459,442],
[408,435,409,442,438,439,0,400,500,488],
[472,515,430,457,447,441,490,0,443,455],
[382,430,416,451,489,431,390,447,0,444],
[412,442,415,443,479,448,402,435,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,444,460,435,449,463,439,436,446],
[435,0,430,432,425,412,449,445,440,436],
[446,460,0,461,441,444,452,458,441,447],
[430,458,429,0,415,436,442,433,450,440],
[455,465,449,475,0,451,463,448,454,442],
[441,478,446,454,439,0,442,459,451,465],
[427,441,438,448,427,448,0,432,446,433],
[451,445,432,457,442,431,458,0,442,432],
[454,450,449,440,436,439,444,448,0,450],
[444,454,443,450,448,425,457,458,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,437,432,464,431,431,436,414,451],
[418,0,436,383,407,408,444,418,407,399],
[453,454,0,446,444,470,454,412,477,471],
[458,507,444,0,426,488,453,471,422,470],
[426,483,446,464,0,463,488,425,464,467],
[459,482,420,402,427,0,452,433,429,420],
[459,446,436,437,402,438,0,403,424,457],
[454,472,478,419,465,457,487,0,434,460],
[476,483,413,468,426,461,466,456,0,458],
[439,491,419,420,423,470,433,430,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,444,442,438,458,474,418,433,463],
[446,0,459,484,438,469,453,447,464,452],
[446,431,0,440,446,428,439,430,420,431],
[448,406,450,0,431,422,442,432,425,422],
[452,452,444,459,0,444,438,429,445,450],
[432,421,462,468,446,0,457,455,446,443],
[416,437,451,448,452,433,0,445,450,452],
[472,443,460,458,461,435,445,0,447,468],
[457,426,470,465,445,444,440,443,0,436],
[427,438,459,468,440,447,438,422,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,441,477,438,414,424,428,421,441],
[436,0,442,459,423,420,444,435,427,426],
[449,448,0,447,416,419,418,435,408,413],
[413,431,443,0,396,439,429,435,431,436],
[452,467,474,494,0,459,458,464,453,445],
[476,470,471,451,431,0,470,481,466,449],
[466,446,472,461,432,420,0,464,449,451],
[462,455,455,455,426,409,426,0,440,441],
[469,463,482,459,437,424,441,450,0,445],
[449,464,477,454,445,441,439,449,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,484,518,468,461,501,441,497,463],
[437,0,428,479,508,427,477,450,469,430],
[406,462,0,502,435,450,445,440,418,448],
[372,411,388,0,414,417,386,368,406,393],
[422,382,455,476,0,419,450,436,410,432],
[429,463,440,473,471,0,421,452,425,414],
[389,413,445,504,440,469,0,366,396,407],
[449,440,450,522,454,438,524,0,452,451],
[393,421,472,484,480,465,494,438,0,445],
[427,460,442,497,458,476,483,439,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,450,480,469,466,448,442,438,439],
[440,0,440,445,419,442,430,426,425,425],
[440,450,0,442,435,435,426,438,432,425],
[410,445,448,0,442,423,410,425,433,414],
[421,471,455,448,0,432,443,445,452,464],
[424,448,455,467,458,0,442,445,435,430],
[442,460,464,480,447,448,0,458,439,450],
[448,464,452,465,445,445,432,0,432,442],
[452,465,458,457,438,455,451,458,0,450],
[451,465,465,476,426,460,440,448,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,410,426,446,423,423,432,429,420],
[446,0,418,441,443,434,422,453,437,441],
[480,472,0,449,468,449,466,480,440,449],
[464,449,441,0,472,442,448,471,446,447],
[444,447,422,418,0,411,426,442,460,416],
[467,456,441,448,479,0,458,487,462,451],
[467,468,424,442,464,432,0,445,471,432],
[458,437,410,419,448,403,445,0,419,433],
[461,453,450,444,430,428,419,471,0,433],
[470,449,441,443,474,439,458,457,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,453,494,443,476,489,442,479,448],
[452,0,452,503,451,501,456,428,464,426],
[437,438,0,454,448,458,445,441,438,443],
[396,387,436,0,401,420,415,407,442,421],
[447,439,442,489,0,463,463,460,489,455],
[414,389,432,470,427,0,434,427,452,426],
[401,434,445,475,427,456,0,445,471,434],
[448,462,449,483,430,463,445,0,485,458],
[411,426,452,448,401,438,419,405,0,399],
[442,464,447,469,435,464,456,432,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,453,439,421,456,460,474,462,453],
[440,0,461,439,457,449,477,453,444,467],
[437,429,0,418,416,433,449,441,435,455],
[451,451,472,0,430,444,461,451,448,466],
[469,433,474,460,0,447,476,463,454,463],
[434,441,457,446,443,0,432,446,440,459],
[430,413,441,429,414,458,0,435,445,457],
[416,437,449,439,427,444,455,0,449,453],
[428,446,455,442,436,450,445,441,0,460],
[437,423,435,424,427,431,433,437,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,412,453,449,433,448,442,442,408],
[461,0,443,453,431,462,464,450,466,455],
[478,447,0,451,454,496,482,432,455,441],
[437,437,439,0,455,454,486,455,440,436],
[441,459,436,435,0,451,478,466,454,433],
[457,428,394,436,439,0,457,432,441,408],
[442,426,408,404,412,433,0,411,418,407],
[448,440,458,435,424,458,479,0,476,419],
[448,424,435,450,436,449,472,414,0,427],
[482,435,449,454,457,482,483,471,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,429,434,435,443,454,441,443,395],
[445,0,436,412,425,403,423,447,424,435],
[461,454,0,414,420,423,438,450,429,413],
[456,478,476,0,463,453,467,465,481,440],
[455,465,470,427,0,441,478,455,460,447],
[447,487,467,437,449,0,469,459,439,439],
[436,467,452,423,412,421,0,435,434,435],
[449,443,440,425,435,431,455,0,449,433],
[447,466,461,409,430,451,456,441,0,431],
[495,455,477,450,443,451,455,457,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,441,453,489,453,427,421,458,428],
[436,0,440,444,478,462,433,460,437,410],
[449,450,0,457,480,452,412,451,459,413],
[437,446,433,0,461,453,413,434,438,429],
[401,412,410,429,0,431,437,393,439,381],
[437,428,438,437,459,0,433,426,451,404],
[463,457,478,477,453,457,0,445,458,450],
[469,430,439,456,497,464,445,0,442,406],
[432,453,431,452,451,439,432,448,0,411],
[462,480,477,461,509,486,440,484,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,487,535,496,487,427,492,492,438],
[403,0,449,422,448,442,457,441,441,456],
[403,441,0,487,461,450,425,462,453,433],
[355,468,403,0,460,398,439,444,459,410],
[394,442,429,430,0,451,444,418,476,420],
[403,448,440,492,439,0,477,459,456,435],
[463,433,465,451,446,413,0,404,468,419],
[398,449,428,446,472,431,486,0,480,406],
[398,449,437,431,414,434,422,410,0,430],
[452,434,457,480,470,455,471,484,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,448,483,428,445,431,458,382,442],
[456,0,472,476,444,520,445,424,452,447],
[442,418,0,470,467,480,442,466,436,442],
[407,414,420,0,397,436,412,432,398,412],
[462,446,423,493,0,451,446,469,433,406],
[445,370,410,454,439,0,433,425,408,414],
[459,445,448,478,444,457,0,443,419,431],
[432,466,424,458,421,465,447,0,436,413],
[508,438,454,492,457,482,471,454,0,448],
[448,443,448,478,484,476,459,477,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,394,456,414,468,427,457,418,411,416],
[496,0,463,426,496,495,485,487,476,438],
[434,427,0,404,431,440,475,408,420,420],
[476,464,486,0,467,496,477,476,461,426],
[422,394,459,423,0,465,438,421,449,411],
[463,395,450,394,425,0,465,464,413,419],
[433,405,415,413,452,425,0,411,418,427],
[472,403,482,414,469,426,479,0,446,449],
[479,414,470,429,441,477,472,444,0,421],
[474,452,470,464,479,471,463,441,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,435,445,444,437,417,410,448,449],
[464,0,398,441,446,426,397,418,438,424],
[455,492,0,463,486,447,446,434,453,455],
[445,449,427,0,479,461,415,441,436,449],
[446,444,404,411,0,438,412,420,434,430],
[453,464,443,429,452,0,403,430,443,424],
[473,493,444,475,478,487,0,447,472,481],
[480,472,456,449,470,460,443,0,452,467],
[442,452,437,454,456,447,418,438,0,415],
[441,466,435,441,460,466,409,423,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,439,441,436,412,443,452,444,430],
[477,0,456,468,437,454,455,473,439,419],
[451,434,0,418,440,432,432,426,404,384],
[449,422,472,0,434,425,441,454,432,438],
[454,453,450,456,0,439,446,450,420,445],
[478,436,458,465,451,0,448,463,411,420],
[447,435,458,449,444,442,0,464,408,419],
[438,417,464,436,440,427,426,0,409,402],
[446,451,486,458,470,479,482,481,0,425],
[460,471,506,452,445,470,471,488,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,444,445,471,458,442,438,457,432],
[436,0,435,406,447,443,444,420,444,427],
[446,455,0,438,472,440,440,441,448,452],
[445,484,452,0,475,479,462,444,457,456],
[419,443,418,415,0,424,423,424,427,435],
[432,447,450,411,466,0,450,427,441,410],
[448,446,450,428,467,440,0,446,452,444],
[452,470,449,446,466,463,444,0,457,453],
[433,446,442,433,463,449,438,433,0,442],
[458,463,438,434,455,480,446,437,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,433,438,450,467,476,435,457,441],
[456,0,453,465,431,452,468,492,438,474],
[457,437,0,447,416,426,469,453,444,446],
[452,425,443,0,418,459,457,459,427,443],
[440,459,474,472,0,455,473,486,452,431],
[423,438,464,431,435,0,453,485,404,437],
[414,422,421,433,417,437,0,429,416,410],
[455,398,437,431,404,405,461,0,442,432],
[433,452,446,463,438,486,474,448,0,457],
[449,416,444,447,459,453,480,458,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,410,438,411,427,459,422,435,420],
[473,0,446,432,440,450,465,429,453,444],
[480,444,0,447,445,461,467,446,440,464],
[452,458,443,0,445,445,469,449,462,459],
[479,450,445,445,0,462,479,433,455,453],
[463,440,429,445,428,0,454,438,454,440],
[431,425,423,421,411,436,0,417,420,428],
[468,461,444,441,457,452,473,0,446,441],
[455,437,450,428,435,436,470,444,0,451],
[470,446,426,431,437,450,462,449,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,454,474,456,440,429,472,433,466],
[464,0,451,456,437,431,442,466,460,485],
[436,439,0,445,433,439,433,460,416,468],
[416,434,445,0,429,453,432,438,451,438],
[434,453,457,461,0,423,449,462,477,454],
[450,459,451,437,467,0,432,464,456,470],
[461,448,457,458,441,458,0,470,465,457],
[418,424,430,452,428,426,420,0,446,451],
[457,430,474,439,413,434,425,444,0,458],
[424,405,422,452,436,420,433,439,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,406,457,451,442,405,410,463,433],
[451,0,424,403,430,427,437,408,449,415],
[484,466,0,458,472,442,453,445,482,449],
[433,487,432,0,472,420,441,464,461,445],
[439,460,418,418,0,427,403,402,437,419],
[448,463,448,470,463,0,466,437,466,429],
[485,453,437,449,487,424,0,457,473,430],
[480,482,445,426,488,453,433,0,470,435],
[427,441,408,429,453,424,417,420,0,427],
[457,475,441,445,471,461,460,455,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,455,470,445,460,480,465,438,467],
[436,0,450,464,443,471,474,463,471,457],
[435,440,0,434,434,443,437,449,431,431],
[420,426,456,0,436,450,435,422,430,426],
[445,447,456,454,0,459,441,449,440,455],
[430,419,447,440,431,0,433,446,426,435],
[410,416,453,455,449,457,0,443,415,413],
[425,427,441,468,441,444,447,0,420,423],
[452,419,459,460,450,464,475,470,0,456],
[423,433,459,464,435,455,477,467,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,451,403,387,447,436,434,414,416],
[413,0,476,456,362,413,422,404,416,373],
[439,414,0,433,383,442,431,402,418,411],
[487,434,457,0,376,463,450,427,444,424],
[503,528,507,514,0,467,483,497,443,450],
[443,477,448,427,423,0,426,429,452,438],
[454,468,459,440,407,464,0,441,428,422],
[456,486,488,463,393,461,449,0,444,416],
[476,474,472,446,447,438,462,446,0,388],
[474,517,479,466,440,452,468,474,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,449,469,454,441,441,449,443,461],
[454,0,466,469,462,448,439,451,448,470],
[441,424,0,457,440,442,433,450,450,446],
[421,421,433,0,450,426,429,432,440,445],
[436,428,450,440,0,424,439,434,432,449],
[449,442,448,464,466,0,452,447,444,452],
[449,451,457,461,451,438,0,441,440,461],
[441,439,440,458,456,443,449,0,429,447],
[447,442,440,450,458,446,450,461,0,444],
[429,420,444,445,441,438,429,443,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,446,445,462,431,484,426,425,455],
[453,0,457,461,494,438,477,416,462,457],
[444,433,0,467,447,419,471,423,418,451],
[445,429,423,0,443,437,432,433,453,461],
[428,396,443,447,0,393,441,410,401,435],
[459,452,471,453,497,0,484,433,440,492],
[406,413,419,458,449,406,0,399,413,420],
[464,474,467,457,480,457,491,0,431,468],
[465,428,472,437,489,450,477,459,0,500],
[435,433,439,429,455,398,470,422,390,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,483,491,469,398,470,414,437,457],
[461,0,405,426,440,384,418,406,446,421],
[407,485,0,433,460,462,446,437,450,440],
[399,464,457,0,428,421,472,443,433,468],
[421,450,430,462,0,415,433,428,446,464],
[492,506,428,469,475,0,471,474,468,464],
[420,472,444,418,457,419,0,410,470,432],
[476,484,453,447,462,416,480,0,471,455],
[453,444,440,457,444,422,420,419,0,442],
[433,469,450,422,426,426,458,435,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,431,399,430,386,443,450,406,440],
[440,0,450,419,420,421,442,433,414,442],
[459,440,0,432,438,471,464,471,455,450],
[491,471,458,0,469,420,461,466,428,463],
[460,470,452,421,0,439,447,465,452,431],
[504,469,419,470,451,0,442,470,462,464],
[447,448,426,429,443,448,0,433,446,442],
[440,457,419,424,425,420,457,0,424,431],
[484,476,435,462,438,428,444,466,0,457],
[450,448,440,427,459,426,448,459,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,444,429,427,436,449,442,433,439],
[454,0,442,448,423,472,439,434,427,435],
[446,448,0,418,412,418,425,428,437,423],
[461,442,472,0,448,457,445,418,457,455],
[463,467,478,442,0,477,459,457,482,470],
[454,418,472,433,413,0,417,396,420,450],
[441,451,465,445,431,473,0,438,447,425],
[448,456,462,472,433,494,452,0,460,451],
[457,463,453,433,408,470,443,430,0,431],
[451,455,467,435,420,440,465,439,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,446,423,442,436,434,446,440,453],
[432,0,453,431,439,435,428,440,427,429],
[444,437,0,423,452,431,445,440,436,428],
[467,459,467,0,462,445,445,452,437,453],
[448,451,438,428,0,427,437,435,428,432],
[454,455,459,445,463,0,456,458,442,448],
[456,462,445,445,453,434,0,456,443,437],
[444,450,450,438,455,432,434,0,438,428],
[450,463,454,453,462,448,447,452,0,437],
[437,461,462,437,458,442,453,462,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,427,422,431,433,417,456,457,466],
[482,0,475,445,451,452,450,465,457,488],
[463,415,0,473,410,447,451,479,451,495],
[468,445,417,0,414,460,414,458,458,478],
[459,439,480,476,0,436,434,481,476,450],
[457,438,443,430,454,0,445,435,462,466],
[473,440,439,476,456,445,0,501,453,484],
[434,425,411,432,409,455,389,0,443,450],
[433,433,439,432,414,428,437,447,0,447],
[424,402,395,412,440,424,406,440,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,461,464,441,456,470,431,452,447],
[444,0,411,458,436,440,455,432,447,420],
[429,479,0,478,484,457,484,474,490,444],
[426,432,412,0,447,432,441,457,479,425],
[449,454,406,443,0,401,454,422,456,404],
[434,450,433,458,489,0,445,468,484,428],
[420,435,406,449,436,445,0,447,472,427],
[459,458,416,433,468,422,443,0,453,420],
[438,443,400,411,434,406,418,437,0,416],
[443,470,446,465,486,462,463,470,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,393,426,398,432,419,382,453,447,395],
[497,0,447,469,464,479,445,480,461,444],
[464,443,0,417,446,424,438,475,481,441],
[492,421,473,0,448,481,397,438,485,475],
[458,426,444,442,0,447,421,412,442,434],
[471,411,466,409,443,0,392,456,447,420],
[508,445,452,493,469,498,0,487,514,476],
[437,410,415,452,478,434,403,0,452,431],
[443,429,409,405,448,443,376,438,0,431],
[495,446,449,415,456,470,414,459,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,476,440,444,436,425,431,438,433],
[444,0,430,449,446,444,429,458,416,460],
[414,460,0,410,444,438,415,399,427,434],
[450,441,480,0,449,431,426,430,450,444],
[446,444,446,441,0,442,433,442,463,465],
[454,446,452,459,448,0,446,443,454,460],
[465,461,475,464,457,444,0,458,455,467],
[459,432,491,460,448,447,432,0,452,416],
[452,474,463,440,427,436,435,438,0,458],
[457,430,456,446,425,430,423,474,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,424,449,400,457,431,412,434,414],
[438,0,485,429,445,462,458,425,423,427],
[466,405,0,440,429,465,432,420,417,400],
[441,461,450,0,412,472,444,431,444,441],
[490,445,461,478,0,460,465,465,412,455],
[433,428,425,418,430,0,414,420,419,420],
[459,432,458,446,425,476,0,443,435,412],
[478,465,470,459,425,470,447,0,446,461],
[456,467,473,446,478,471,455,444,0,444],
[476,463,490,449,435,470,478,429,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,375,475,348,485,391,458,374,357],
[484,0,450,466,338,429,466,481,430,380],
[515,440,0,556,349,453,441,524,440,374],
[415,424,334,0,254,411,396,415,410,345],
[542,552,541,636,0,568,429,512,427,473],
[405,461,437,479,322,0,388,482,379,412],
[499,424,449,494,461,502,0,481,446,459],
[432,409,366,475,378,408,409,0,330,362],
[516,460,450,480,463,511,444,560,0,351],
[533,510,516,545,417,478,431,528,539,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,406,483,427,383,450,408,419,445],
[440,0,431,549,446,460,473,489,467,500],
[484,459,0,492,433,439,484,431,451,436],
[407,341,398,0,402,343,390,449,404,374],
[463,444,457,488,0,426,475,449,466,433],
[507,430,451,547,464,0,481,484,483,478],
[440,417,406,500,415,409,0,436,432,446],
[482,401,459,441,441,406,454,0,438,415],
[471,423,439,486,424,407,458,452,0,426],
[445,390,454,516,457,412,444,475,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,445,445,445,0,445,0,445,890],
[445,0,445,890,445,445,445,445,445,890],
[445,445,0,445,890,445,445,445,890,890],
[445,0,445,0,445,0,445,445,445,445],
[445,445,0,445,0,0,445,0,445,890],
[890,445,445,890,890,0,445,445,445,890],
[445,445,445,445,445,445,0,445,445,445],
[890,445,445,445,890,445,445,0,445,890],
[445,445,0,445,445,445,445,445,0,890],
[0,0,0,445,0,0,445,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,547,366,501,449,506,406,477,433,472],
[343,0,435,552,318,482,452,457,348,297],
[524,455,0,523,429,545,504,502,455,500],
[389,338,367,0,406,480,387,410,456,432],
[441,572,461,484,0,506,502,528,482,508],
[384,408,345,410,384,0,339,455,269,362],
[484,438,386,503,388,551,0,438,459,504],
[413,433,388,480,362,435,452,0,407,412],
[457,542,435,434,408,621,431,483,0,500],
[418,593,390,458,382,528,386,478,390,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,454,423,450,431,453,440,432,419],
[426,0,472,429,408,415,444,427,420,435],
[436,418,0,451,420,424,445,423,417,426],
[467,461,439,0,455,440,481,475,448,450],
[440,482,470,435,0,455,458,481,477,447],
[459,475,466,450,435,0,477,473,446,443],
[437,446,445,409,432,413,0,437,426,443],
[450,463,467,415,409,417,453,0,422,448],
[458,470,473,442,413,444,464,468,0,463],
[471,455,464,440,443,447,447,442,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,412,452,416,413,440,448,449,398],
[454,0,437,437,433,439,415,426,446,430],
[478,453,0,430,447,433,437,439,438,448],
[438,453,460,0,436,438,450,436,433,442],
[474,457,443,454,0,443,478,443,455,401],
[477,451,457,452,447,0,430,430,457,431],
[450,475,453,440,412,460,0,449,464,433],
[442,464,451,454,447,460,441,0,456,437],
[441,444,452,457,435,433,426,434,0,412],
[492,460,442,448,489,459,457,453,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,438,436,435,418,461,428,486,430],
[458,0,429,467,445,412,427,413,465,421],
[452,461,0,482,451,422,479,443,478,468],
[454,423,408,0,426,372,412,401,438,417],
[455,445,439,464,0,415,443,466,467,427],
[472,478,468,518,475,0,497,428,507,452],
[429,463,411,478,447,393,0,378,445,388],
[462,477,447,489,424,462,512,0,497,447],
[404,425,412,452,423,383,445,393,0,428],
[460,469,422,473,463,438,502,443,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,444,466,448,451,430,446,447,450],
[460,0,449,454,450,438,430,450,449,454],
[446,441,0,444,448,444,435,444,461,447],
[424,436,446,0,443,454,412,437,434,449],
[442,440,442,447,0,452,442,435,458,439],
[439,452,446,436,438,0,426,444,431,429],
[460,460,455,478,448,464,0,451,438,442],
[444,440,446,453,455,446,439,0,455,455],
[443,441,429,456,432,459,452,435,0,453],
[440,436,443,441,451,461,448,435,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,417,428,442,446,465,433,446,449],
[451,0,424,440,446,444,455,461,436,454],
[473,466,0,451,443,458,477,490,463,479],
[462,450,439,0,442,441,471,457,444,453],
[448,444,447,448,0,452,484,482,441,450],
[444,446,432,449,438,0,452,462,462,462],
[425,435,413,419,406,438,0,455,429,443],
[457,429,400,433,408,428,435,0,431,437],
[444,454,427,446,449,428,461,459,0,457],
[441,436,411,437,440,428,447,453,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,410,446,458,426,436,479,414,412],
[426,0,432,417,437,449,443,467,424,439],
[480,458,0,408,430,420,419,436,426,405],
[444,473,482,0,462,439,431,466,439,446],
[432,453,460,428,0,439,419,450,454,442],
[464,441,470,451,451,0,437,453,411,432],
[454,447,471,459,471,453,0,476,460,438],
[411,423,454,424,440,437,414,0,405,429],
[476,466,464,451,436,479,430,485,0,469],
[478,451,485,444,448,458,452,461,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,531,484,394,458,446,401,448,514],
[428,0,456,485,440,459,454,462,495,481],
[359,434,0,392,397,422,414,380,412,408],
[406,405,498,0,378,476,432,417,405,416],
[496,450,493,512,0,426,455,459,515,470],
[432,431,468,414,464,0,449,417,443,452],
[444,436,476,458,435,441,0,405,446,450],
[489,428,510,473,431,473,485,0,522,508],
[442,395,478,485,375,447,444,368,0,435],
[376,409,482,474,420,438,440,382,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,235,422,329,375,471,280,424,282],
[466,0,374,468,468,468,330,327,514,376],
[655,516,0,375,327,562,469,420,562,327],
[468,422,515,0,422,468,282,374,421,470],
[561,422,563,468,0,561,422,467,515,516],
[515,422,328,422,329,0,423,326,515,375],
[419,560,421,608,468,467,0,326,702,421],
[610,563,470,516,423,564,564,0,564,518],
[466,376,328,469,375,375,188,326,0,328],
[608,514,563,420,374,515,469,372,562,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,453,389,421,439,393,410,405,430],
[478,0,466,433,430,467,452,435,469,454],
[437,424,0,448,429,444,453,438,428,401],
[501,457,442,0,425,443,466,455,434,461],
[469,460,461,465,0,468,460,469,450,440],
[451,423,446,447,422,0,440,460,431,440],
[497,438,437,424,430,450,0,460,454,445],
[480,455,452,435,421,430,430,0,443,437],
[485,421,462,456,440,459,436,447,0,476],
[460,436,489,429,450,450,445,453,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,430,424,419,419,447,449,445,437],
[450,0,443,433,427,441,427,436,467,451],
[460,447,0,439,439,443,459,479,476,457],
[466,457,451,0,439,451,432,461,457,459],
[471,463,451,451,0,452,437,468,471,474],
[471,449,447,439,438,0,445,454,476,445],
[443,463,431,458,453,445,0,466,451,466],
[441,454,411,429,422,436,424,0,461,426],
[445,423,414,433,419,414,439,429,0,434],
[453,439,433,431,416,445,424,464,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,444,446,443,457,452,459,445,466],
[442,0,407,399,424,435,425,420,425,448],
[446,483,0,446,449,474,461,441,446,436],
[444,491,444,0,430,466,467,442,435,451],
[447,466,441,460,0,464,471,454,440,468],
[433,455,416,424,426,0,437,439,439,473],
[438,465,429,423,419,453,0,419,419,453],
[431,470,449,448,436,451,471,0,452,450],
[445,465,444,455,450,451,471,438,0,451],
[424,442,454,439,422,417,437,440,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,450,380,403,468,446,433,419,474],
[459,0,397,377,400,446,428,420,408,443],
[440,493,0,426,434,443,426,428,449,469],
[510,513,464,0,475,506,434,484,468,502],
[487,490,456,415,0,486,469,473,447,490],
[422,444,447,384,404,0,446,423,424,447],
[444,462,464,456,421,444,0,440,438,469],
[457,470,462,406,417,467,450,0,470,478],
[471,482,441,422,443,466,452,420,0,466],
[416,447,421,388,400,443,421,412,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,416,450,429,454,453,440,450,434],
[480,0,420,473,468,467,470,468,456,453],
[474,470,0,441,465,471,477,472,480,463],
[440,417,449,0,428,442,440,463,453,418],
[461,422,425,462,0,465,467,475,454,436],
[436,423,419,448,425,0,455,446,453,431],
[437,420,413,450,423,435,0,442,473,444],
[450,422,418,427,415,444,448,0,473,432],
[440,434,410,437,436,437,417,417,0,435],
[456,437,427,472,454,459,446,458,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,433,436,502,471,446,459,448,443],
[439,0,429,456,541,440,443,429,433,415],
[457,461,0,462,492,469,475,463,438,434],
[454,434,428,0,503,471,472,497,436,457],
[388,349,398,387,0,411,384,387,369,376],
[419,450,421,419,479,0,430,453,409,416],
[444,447,415,418,506,460,0,459,416,439],
[431,461,427,393,503,437,431,0,416,405],
[442,457,452,454,521,481,474,474,0,467],
[447,475,456,433,514,474,451,485,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,407,434,454,416,425,431,441,437],
[410,0,413,449,424,419,423,408,432,432],
[483,477,0,458,465,476,443,457,447,482],
[456,441,432,0,434,412,435,425,466,438],
[436,466,425,456,0,407,436,437,452,456],
[474,471,414,478,483,0,465,442,484,480],
[465,467,447,455,454,425,0,458,485,450],
[459,482,433,465,453,448,432,0,445,466],
[449,458,443,424,438,406,405,445,0,459],
[453,458,408,452,434,410,440,424,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,442,446,440,437,475,447,435,438],
[447,0,442,468,450,441,455,476,454,465],
[448,448,0,466,447,439,472,464,439,462],
[444,422,424,0,434,430,447,435,444,437],
[450,440,443,456,0,452,462,447,450,450],
[453,449,451,460,438,0,467,476,468,471],
[415,435,418,443,428,423,0,447,448,436],
[443,414,426,455,443,414,443,0,434,457],
[455,436,451,446,440,422,442,456,0,423],
[452,425,428,453,440,419,454,433,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,404,400,407,438,430,443,440,415],
[434,0,381,400,364,381,380,391,369,392],
[486,509,0,490,444,468,479,458,460,483],
[490,490,400,0,466,411,470,457,464,471],
[483,526,446,424,0,445,435,465,451,458],
[452,509,422,479,445,0,455,439,475,504],
[460,510,411,420,455,435,0,449,477,435],
[447,499,432,433,425,451,441,0,486,455],
[450,521,430,426,439,415,413,404,0,458],
[475,498,407,419,432,386,455,435,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,401,443,455,433,473,443,456,444,424],
[489,0,499,488,479,472,435,453,439,442],
[447,391,0,459,463,440,425,460,450,421],
[435,402,431,0,453,446,413,389,449,418],
[457,411,427,437,0,422,402,419,450,375],
[417,418,450,444,468,0,438,432,475,428],
[447,455,465,477,488,452,0,435,444,404],
[434,437,430,501,471,458,455,0,463,462],
[446,451,440,441,440,415,446,427,0,410],
[466,448,469,472,515,462,486,428,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,382,511,469,398,461,412,369,458,526],
[508,0,511,535,492,397,474,476,399,542],
[379,379,0,439,456,440,392,395,422,457],
[421,355,451,0,397,433,450,342,383,512],
[492,398,434,493,0,444,521,382,426,474],
[429,493,450,457,446,0,457,399,411,477],
[478,416,498,440,369,433,0,385,397,458],
[521,414,495,548,508,491,505,0,476,571],
[432,491,468,507,464,479,493,414,0,488],
[364,348,433,378,416,413,432,319,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,369,369,422,414,415,412,438,406,298],
[521,0,457,507,504,519,433,434,376,410],
[521,433,0,551,483,547,466,439,469,442],
[468,383,339,0,404,426,425,462,434,364],
[476,386,407,486,0,407,454,455,450,354],
[475,371,343,464,483,0,427,428,408,366],
[478,457,424,465,436,463,0,463,416,411],
[452,456,451,428,435,462,427,0,452,452],
[484,514,421,456,440,482,474,438,0,481],
[592,480,448,526,536,524,479,438,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,422,457,426,456,458,442,432,447],
[455,0,450,450,447,473,462,453,464,438],
[468,440,0,447,434,477,455,456,457,426],
[433,440,443,0,423,444,465,455,446,437],
[464,443,456,467,0,458,483,447,460,456],
[434,417,413,446,432,0,459,445,435,416],
[432,428,435,425,407,431,0,449,463,412],
[448,437,434,435,443,445,441,0,461,432],
[458,426,433,444,430,455,427,429,0,425],
[443,452,464,453,434,474,478,458,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,441,439,457,438,420,448,447,446],
[455,0,431,434,476,430,434,440,435,447],
[449,459,0,461,466,440,437,452,464,465],
[451,456,429,0,477,454,422,445,456,453],
[433,414,424,413,0,415,416,404,407,430],
[452,460,450,436,475,0,447,439,466,466],
[470,456,453,468,474,443,0,452,470,469],
[442,450,438,445,486,451,438,0,455,449],
[443,455,426,434,483,424,420,435,0,461],
[444,443,425,437,460,424,421,441,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,422,433,448,449,428,441,441,430],
[431,0,435,450,438,438,418,443,438,415],
[468,455,0,452,446,473,455,461,466,442],
[457,440,438,0,446,429,440,425,432,433],
[442,452,444,444,0,444,428,412,459,428],
[441,452,417,461,446,0,434,448,448,450],
[462,472,435,450,462,456,0,431,443,438],
[449,447,429,465,478,442,459,0,442,418],
[449,452,424,458,431,442,447,448,0,406],
[460,475,448,457,462,440,452,472,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,444,463,496,445,469,468,463,478],
[455,0,445,463,500,455,479,483,469,457],
[446,445,0,449,476,454,490,458,484,439],
[427,427,441,0,488,450,445,464,465,440],
[394,390,414,402,0,397,431,436,412,402],
[445,435,436,440,493,0,467,468,459,445],
[421,411,400,445,459,423,0,442,458,431],
[422,407,432,426,454,422,448,0,452,420],
[427,421,406,425,478,431,432,438,0,434],
[412,433,451,450,488,445,459,470,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,618,471,540,471,392,470,490,321],
[469,0,645,444,615,570,509,370,566,470],
[272,245,0,371,295,347,344,393,444,320],
[419,446,519,0,443,470,441,419,466,422],
[350,275,595,447,0,547,371,396,472,323],
[419,320,543,420,343,0,367,373,394,348],
[498,381,546,449,519,523,0,478,495,376],
[420,520,497,471,494,517,412,0,518,349],
[400,324,446,424,418,496,395,372,0,352],
[569,420,570,468,567,542,514,541,538,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,479,440,444,432,455,436,445,435],
[464,0,464,484,428,440,473,470,406,413],
[411,426,0,426,432,405,429,412,395,414],
[450,406,464,0,466,429,441,462,428,400],
[446,462,458,424,0,439,455,432,409,427],
[458,450,485,461,451,0,457,424,449,462],
[435,417,461,449,435,433,0,424,416,387],
[454,420,478,428,458,466,466,0,415,417],
[445,484,495,462,481,441,474,475,0,432],
[455,477,476,490,463,428,503,473,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,428,469,454,434,445,431,460,432],
[417,0,442,443,428,432,428,444,427,427],
[462,448,0,454,426,443,444,438,435,470],
[421,447,436,0,444,443,445,446,428,458],
[436,462,464,446,0,447,456,453,447,457],
[456,458,447,447,443,0,442,445,438,441],
[445,462,446,445,434,448,0,427,424,434],
[459,446,452,444,437,445,463,0,423,446],
[430,463,455,462,443,452,466,467,0,448],
[458,463,420,432,433,449,456,444,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,426,465,470,448,452,448,447,466],
[437,0,432,478,460,425,455,437,423,442],
[464,458,0,477,463,461,440,449,448,455],
[425,412,413,0,450,439,426,406,415,432],
[420,430,427,440,0,426,435,410,423,417],
[442,465,429,451,464,0,450,438,430,444],
[438,435,450,464,455,440,0,454,460,440],
[442,453,441,484,480,452,436,0,445,446],
[443,467,442,475,467,460,430,445,0,444],
[424,448,435,458,473,446,450,444,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,462,438,437,440,456,431,431,447],
[471,0,466,442,447,446,467,448,436,473],
[428,424,0,433,427,411,448,431,427,452],
[452,448,457,0,447,443,459,451,451,455],
[453,443,463,443,0,433,451,438,440,459],
[450,444,479,447,457,0,462,474,439,462],
[434,423,442,431,439,428,0,434,429,450],
[459,442,459,439,452,416,456,0,434,444],
[459,454,463,439,450,451,461,456,0,456],
[443,417,438,435,431,428,440,446,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,431,422,424,410,421,460,442,412],
[457,0,448,407,428,426,435,452,440,420],
[459,442,0,438,451,423,432,473,462,433],
[468,483,452,0,440,451,451,501,477,466],
[466,462,439,450,0,449,424,476,466,451],
[480,464,467,439,441,0,428,494,463,455],
[469,455,458,439,466,462,0,462,467,432],
[430,438,417,389,414,396,428,0,428,429],
[448,450,428,413,424,427,423,462,0,447],
[478,470,457,424,439,435,458,461,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,437,444,428,458,434,403,435,435],
[448,0,466,465,441,470,456,416,446,444],
[453,424,0,455,440,458,448,423,412,418],
[446,425,435,0,418,453,437,413,436,437],
[462,449,450,472,0,457,451,433,460,466],
[432,420,432,437,433,0,416,406,428,433],
[456,434,442,453,439,474,0,433,439,441],
[487,474,467,477,457,484,457,0,455,445],
[455,444,478,454,430,462,451,435,0,458],
[455,446,472,453,424,457,449,445,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,432,442,439,452,463,443,453,449],
[456,0,454,465,440,492,462,454,486,462],
[458,436,0,449,448,464,452,446,454,437],
[448,425,441,0,434,466,461,436,473,443],
[451,450,442,456,0,473,454,453,489,453],
[438,398,426,424,417,0,453,415,434,442],
[427,428,438,429,436,437,0,431,450,443],
[447,436,444,454,437,475,459,0,466,441],
[437,404,436,417,401,456,440,424,0,426],
[441,428,453,447,437,448,447,449,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,458,488,436,427,425,428,450,450],
[435,0,397,447,398,402,382,386,446,445],
[432,493,0,511,449,460,421,465,463,471],
[402,443,379,0,398,418,391,394,423,412],
[454,492,441,492,0,469,456,442,505,459],
[463,488,430,472,421,0,444,449,440,460],
[465,508,469,499,434,446,0,444,475,490],
[462,504,425,496,448,441,446,0,502,504],
[440,444,427,467,385,450,415,388,0,421],
[440,445,419,478,431,430,400,386,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,444,436,451,437,439,450,432,436],
[438,0,441,438,431,428,405,445,442,419],
[446,449,0,455,460,429,434,457,446,444],
[454,452,435,0,471,417,419,454,446,443],
[439,459,430,419,0,437,395,471,415,432],
[453,462,461,473,453,0,451,479,440,455],
[451,485,456,471,495,439,0,491,431,472],
[440,445,433,436,419,411,399,0,419,412],
[458,448,444,444,475,450,459,471,0,466],
[454,471,446,447,458,435,418,478,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,453,450,436,470,427,471,441,503],
[419,0,419,428,394,382,412,431,418,455],
[437,471,0,435,428,456,436,440,444,500],
[440,462,455,0,433,442,435,488,411,482],
[454,496,462,457,0,460,464,475,414,461],
[420,508,434,448,430,0,445,460,444,504],
[463,478,454,455,426,445,0,437,470,482],
[419,459,450,402,415,430,453,0,396,493],
[449,472,446,479,476,446,420,494,0,538],
[387,435,390,408,429,386,408,397,352,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,456,465,450,410,513,461,455,476],
[461,0,433,437,416,446,491,461,436,431],
[434,457,0,428,451,445,474,475,462,470],
[425,453,462,0,434,439,497,466,439,446],
[440,474,439,456,0,430,496,446,453,465],
[480,444,445,451,460,0,493,472,475,493],
[377,399,416,393,394,397,0,430,434,434],
[429,429,415,424,444,418,460,0,423,450],
[435,454,428,451,437,415,456,467,0,415],
[414,459,420,444,425,397,456,440,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,470,464,437,455,448,445,483,440],
[441,0,476,451,427,438,449,445,459,450],
[420,414,0,442,437,396,436,430,459,424],
[426,439,448,0,412,420,429,420,464,423],
[453,463,453,478,0,448,454,442,483,479],
[435,452,494,470,442,0,435,432,479,443],
[442,441,454,461,436,455,0,446,463,451],
[445,445,460,470,448,458,444,0,491,438],
[407,431,431,426,407,411,427,399,0,414],
[450,440,466,467,411,447,439,452,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,462,476,438,457,459,471,456,454],
[429,0,479,449,489,437,430,467,436,473],
[428,411,0,443,418,428,406,464,431,438],
[414,441,447,0,438,424,425,443,435,425],
[452,401,472,452,0,430,456,461,470,468],
[433,453,462,466,460,0,428,465,474,435],
[431,460,484,465,434,462,0,475,459,456],
[419,423,426,447,429,425,415,0,431,445],
[434,454,459,455,420,416,431,459,0,456],
[436,417,452,465,422,455,434,445,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,529,528,529,463,472,489,449,424],
[440,0,469,520,496,452,441,514,441,467],
[361,421,0,519,533,466,468,465,477,455],
[362,370,371,0,458,373,426,398,388,407],
[361,394,357,432,0,352,386,375,354,407],
[427,438,424,517,538,0,444,480,465,489],
[418,449,422,464,504,446,0,521,420,484],
[401,376,425,492,515,410,369,0,460,440],
[441,449,413,502,536,425,470,430,0,487],
[466,423,435,483,483,401,406,450,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,465,457,438,473,461,420,452,442],
[410,0,427,450,444,421,425,400,417,416],
[425,463,0,436,422,425,451,438,445,445],
[433,440,454,0,423,453,458,413,450,443],
[452,446,468,467,0,444,429,448,437,437],
[417,469,465,437,446,0,434,421,444,409],
[429,465,439,432,461,456,0,409,440,426],
[470,490,452,477,442,469,481,0,482,467],
[438,473,445,440,453,446,450,408,0,434],
[448,474,445,447,453,481,464,423,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,427,401,436,430,462,460,414,427],
[467,0,438,484,442,459,463,468,455,469],
[463,452,0,493,455,485,466,483,431,453],
[489,406,397,0,433,429,439,449,439,432],
[454,448,435,457,0,467,441,457,417,453],
[460,431,405,461,423,0,455,456,436,441],
[428,427,424,451,449,435,0,469,417,446],
[430,422,407,441,433,434,421,0,398,443],
[476,435,459,451,473,454,473,492,0,465],
[463,421,437,458,437,449,444,447,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,482,461,452,422,465,440,443,426],
[442,0,482,469,458,445,424,414,456,455],
[408,408,0,414,483,416,420,404,447,440],
[429,421,476,0,435,439,449,450,442,453],
[438,432,407,455,0,447,412,421,430,434],
[468,445,474,451,443,0,451,453,440,457],
[425,466,470,441,478,439,0,460,446,434],
[450,476,486,440,469,437,430,0,469,457],
[447,434,443,448,460,450,444,421,0,473],
[464,435,450,437,456,433,456,433,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,429,389,352,540,393,502,387,312],
[579,0,581,621,543,576,464,613,578,425],
[461,309,0,504,502,382,349,418,460,379],
[501,269,386,0,465,575,350,539,462,382],
[538,347,388,425,0,502,272,539,345,344],
[350,314,508,315,388,0,313,622,425,349],
[497,426,541,540,618,577,0,655,345,576],
[388,277,472,351,351,268,235,0,270,388],
[503,312,430,428,545,465,545,620,0,467],
[578,465,511,508,546,541,314,502,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,424,468,395,452,456,457,445,450],
[425,0,423,447,419,451,441,429,440,437],
[466,467,0,483,411,491,473,486,427,419],
[422,443,407,0,394,416,453,465,409,426],
[495,471,479,496,0,525,438,494,498,490],
[438,439,399,474,365,0,434,411,453,423],
[434,449,417,437,452,456,0,456,446,491],
[433,461,404,425,396,479,434,0,476,485],
[445,450,463,481,392,437,444,414,0,449],
[440,453,471,464,400,467,399,405,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,443,435,439,434,417,409,429,463],
[480,0,463,469,468,441,444,447,456,470],
[447,427,0,433,451,451,424,417,428,442],
[455,421,457,0,458,449,421,434,422,463],
[451,422,439,432,0,449,391,409,400,429],
[456,449,439,441,441,0,432,417,409,452],
[473,446,466,469,499,458,0,459,444,467],
[481,443,473,456,481,473,431,0,466,454],
[461,434,462,468,490,481,446,424,0,457],
[427,420,448,427,461,438,423,436,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,461,461,459,472,448,487,446,428],
[447,0,449,468,437,506,447,471,478,469],
[429,441,0,460,460,458,463,456,450,442],
[429,422,430,0,415,463,427,471,426,418],
[431,453,430,475,0,465,449,443,443,441],
[418,384,432,427,425,0,417,439,408,404],
[442,443,427,463,441,473,0,462,431,447],
[403,419,434,419,447,451,428,0,432,453],
[444,412,440,464,447,482,459,458,0,418],
[462,421,448,472,449,486,443,437,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,430,451,414,429,460,443,407,466],
[476,0,469,465,404,450,496,476,488,450],
[460,421,0,443,436,441,441,497,424,470],
[439,425,447,0,455,417,505,474,428,468],
[476,486,454,435,0,460,491,475,455,432],
[461,440,449,473,430,0,486,459,415,480],
[430,394,449,385,399,404,0,480,458,413],
[447,414,393,416,415,431,410,0,417,435],
[483,402,466,462,435,475,432,473,0,439],
[424,440,420,422,458,410,477,455,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,468,450,434,453,451,465,449,460],
[415,0,442,443,453,395,422,454,424,430],
[422,448,0,454,424,444,445,456,444,425],
[440,447,436,0,428,416,440,440,440,425],
[456,437,466,462,0,475,466,449,455,449],
[437,495,446,474,415,0,461,452,445,460],
[439,468,445,450,424,429,0,451,435,445],
[425,436,434,450,441,438,439,0,433,418],
[441,466,446,450,435,445,455,457,0,442],
[430,460,465,465,441,430,445,472,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,437,451,452,477,444,447,446,470],
[421,0,444,443,466,474,453,429,439,460],
[453,446,0,450,447,468,440,437,462,471],
[439,447,440,0,431,468,437,427,459,451],
[438,424,443,459,0,455,438,428,440,449],
[413,416,422,422,435,0,419,427,429,432],
[446,437,450,453,452,471,0,448,450,458],
[443,461,453,463,462,463,442,0,452,465],
[444,451,428,431,450,461,440,438,0,441],
[420,430,419,439,441,458,432,425,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,459,441,476,458,458,473,490,479],
[436,0,436,424,478,457,422,470,501,475],
[431,454,0,452,451,473,449,449,497,468],
[449,466,438,0,481,453,458,459,484,460],
[414,412,439,409,0,446,438,437,494,459],
[432,433,417,437,444,0,415,429,465,454],
[432,468,441,432,452,475,0,455,459,475],
[417,420,441,431,453,461,435,0,463,457],
[400,389,393,406,396,425,431,427,0,438],
[411,415,422,430,431,436,415,433,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,467,464,478,408,443,472,459,456],
[430,0,462,453,451,410,459,451,420,406],
[423,428,0,439,437,420,406,446,415,452],
[426,437,451,0,470,434,437,486,413,442],
[412,439,453,420,0,395,416,453,416,455],
[482,480,470,456,495,0,443,478,457,475],
[447,431,484,453,474,447,0,495,458,452],
[418,439,444,404,437,412,395,0,452,405],
[431,470,475,477,474,433,432,438,0,404],
[434,484,438,448,435,415,438,485,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,457,473,435,458,425,452,455,457],
[439,0,453,440,440,452,440,453,448,454],
[433,437,0,445,447,443,419,440,443,453],
[417,450,445,0,435,446,428,453,431,443],
[455,450,443,455,0,457,440,450,444,466],
[432,438,447,444,433,0,453,444,441,428],
[465,450,471,462,450,437,0,470,450,450],
[438,437,450,437,440,446,420,0,450,465],
[435,442,447,459,446,449,440,440,0,446],
[433,436,437,447,424,462,440,425,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,469,421,442,449,436,441,454,428],
[468,0,444,472,431,448,424,458,436,434],
[421,446,0,437,453,484,405,441,450,455],
[469,418,453,0,435,438,437,421,434,453],
[448,459,437,455,0,450,441,426,438,451],
[441,442,406,452,440,0,437,481,452,438],
[454,466,485,453,449,453,0,459,438,413],
[449,432,449,469,464,409,431,0,419,432],
[436,454,440,456,452,438,452,471,0,424],
[462,456,435,437,439,452,477,458,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,409,421,434,447,454,449,402,428],
[472,0,435,450,485,447,468,470,447,460],
[481,455,0,433,454,440,456,459,429,435],
[469,440,457,0,465,469,465,460,442,445],
[456,405,436,425,0,452,449,455,417,424],
[443,443,450,421,438,0,441,460,419,441],
[436,422,434,425,441,449,0,445,418,441],
[441,420,431,430,435,430,445,0,411,435],
[488,443,461,448,473,471,472,479,0,439],
[462,430,455,445,466,449,449,455,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,506,406,485,516,467,449,468,494],
[439,0,417,370,454,440,352,430,384,473],
[384,473,0,426,472,433,447,458,446,437],
[484,520,464,0,517,446,476,489,438,460],
[405,436,418,373,0,430,403,437,426,425],
[374,450,457,444,460,0,430,432,406,447],
[423,538,443,414,487,460,0,511,473,462],
[441,460,432,401,453,458,379,0,424,456],
[422,506,444,452,464,484,417,466,0,482],
[396,417,453,430,465,443,428,434,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,433,437,452,451,426,433,430,436],
[475,0,447,464,467,461,419,454,457,447],
[457,443,0,472,468,443,440,449,465,445],
[453,426,418,0,448,452,442,436,445,444],
[438,423,422,442,0,437,430,433,448,428],
[439,429,447,438,453,0,410,435,426,425],
[464,471,450,448,460,480,0,440,454,450],
[457,436,441,454,457,455,450,0,463,426],
[460,433,425,445,442,464,436,427,0,439],
[454,443,445,446,462,465,440,464,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,391,386,413,431,423,458,427,395],
[465,0,447,432,459,451,448,466,495,433],
[499,443,0,436,441,444,437,488,464,448],
[504,458,454,0,435,457,452,510,481,468],
[477,431,449,455,0,456,433,503,504,476],
[459,439,446,433,434,0,434,487,457,439],
[467,442,453,438,457,456,0,487,484,464],
[432,424,402,380,387,403,403,0,463,414],
[463,395,426,409,386,433,406,427,0,404],
[495,457,442,422,414,451,426,476,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,444,463,458,452,483,466,469,413],
[469,0,415,412,459,438,481,451,432,436],
[446,475,0,429,452,459,487,501,470,459],
[427,478,461,0,495,489,486,482,470,454],
[432,431,438,395,0,434,456,473,428,399],
[438,452,431,401,456,0,459,480,459,427],
[407,409,403,404,434,431,0,421,418,430],
[424,439,389,408,417,410,469,0,423,398],
[421,458,420,420,462,431,472,467,0,401],
[477,454,431,436,491,463,460,492,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,458,445,462,429,432,446,432,447],
[444,0,449,399,434,384,426,444,441,408],
[432,441,0,442,424,392,437,425,426,440],
[445,491,448,0,448,421,439,420,445,434],
[428,456,466,442,0,435,458,453,447,488],
[461,506,498,469,455,0,436,440,438,459],
[458,464,453,451,432,454,0,442,433,461],
[444,446,465,470,437,450,448,0,465,473],
[458,449,464,445,443,452,457,425,0,420],
[443,482,450,456,402,431,429,417,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,465,429,438,460,462,434,482,438],
[425,0,415,420,427,418,433,390,415,441],
[425,475,0,445,432,433,453,432,447,447],
[461,470,445,0,439,434,445,449,472,465],
[452,463,458,451,0,452,437,455,459,478],
[430,472,457,456,438,0,445,415,446,458],
[428,457,437,445,453,445,0,427,446,444],
[456,500,458,441,435,475,463,0,458,471],
[408,475,443,418,431,444,444,432,0,436],
[452,449,443,425,412,432,446,419,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,521,544,542,474,479,542,475,418],
[388,0,433,474,435,411,388,368,413,371],
[369,457,0,369,415,411,411,479,437,461],
[346,416,521,0,460,369,390,501,435,460],
[348,455,475,430,0,348,478,368,307,437],
[416,479,479,521,542,0,438,564,451,459],
[411,502,479,500,412,452,0,524,501,478],
[348,522,411,389,522,326,366,0,394,412],
[415,477,453,455,583,439,389,496,0,411],
[472,519,429,430,453,431,412,478,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,478,387,378,415,428,417,411,419],
[494,0,427,446,460,434,436,487,470,474],
[412,463,0,373,399,402,476,450,440,439],
[503,444,517,0,453,495,457,479,462,438],
[512,430,491,437,0,466,469,473,423,523],
[475,456,488,395,424,0,453,470,470,453],
[462,454,414,433,421,437,0,403,448,395],
[473,403,440,411,417,420,487,0,441,472],
[479,420,450,428,467,420,442,449,0,460],
[471,416,451,452,367,437,495,418,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,441,457,427,445,440,414,414,429],
[444,0,451,470,466,427,432,453,449,432],
[449,439,0,450,437,422,430,452,431,411],
[433,420,440,0,436,440,435,435,426,419],
[463,424,453,454,0,440,439,442,428,452],
[445,463,468,450,450,0,449,445,430,430],
[450,458,460,455,451,441,0,446,445,455],
[476,437,438,455,448,445,444,0,435,443],
[476,441,459,464,462,460,445,455,0,446],
[461,458,479,471,438,460,435,447,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,462,479,430,419,408,450,448,406],
[429,0,442,485,426,470,446,448,477,418],
[428,448,0,451,409,430,424,464,416,441],
[411,405,439,0,413,418,391,461,404,416],
[460,464,481,477,0,472,446,480,459,401],
[471,420,460,472,418,0,428,466,450,431],
[482,444,466,499,444,462,0,503,459,448],
[440,442,426,429,410,424,387,0,415,398],
[442,413,474,486,431,440,431,475,0,433],
[484,472,449,474,489,459,442,492,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,436,432,460,439,455,436,442,432],
[433,0,431,443,447,440,436,426,458,467],
[454,459,0,439,441,452,459,450,445,449],
[458,447,451,0,455,466,468,440,450,434],
[430,443,449,435,0,426,446,443,464,426],
[451,450,438,424,464,0,461,430,464,432],
[435,454,431,422,444,429,0,437,422,421],
[454,464,440,450,447,460,453,0,449,436],
[448,432,445,440,426,426,468,441,0,440],
[458,423,441,456,464,458,469,454,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,890,445,890,890,890,0,890,890,445],
[0,0,0,445,445,890,0,890,445,445],
[445,890,0,890,890,890,0,890,890,445],
[0,445,0,0,445,890,0,445,445,0],
[0,445,0,445,0,890,0,445,445,0],
[0,0,0,0,0,0,0,445,0,0],
[890,890,890,890,890,890,0,890,890,445],
[0,0,0,445,445,445,0,0,445,0],
[0,445,0,445,445,890,0,445,0,0],
[445,445,445,890,890,890,445,890,890,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,436,449,457,436,409,422,430,452],
[482,0,452,475,474,460,427,472,431,470],
[454,438,0,461,480,465,446,460,449,449],
[441,415,429,0,469,433,413,454,414,456],
[433,416,410,421,0,408,415,420,400,413],
[454,430,425,457,482,0,412,443,424,455],
[481,463,444,477,475,478,0,461,481,461],
[468,418,430,436,470,447,429,0,433,450],
[460,459,441,476,490,466,409,457,0,466],
[438,420,441,434,477,435,429,440,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,461,427,409,441,449,409,507,486],
[450,0,442,446,413,451,449,432,479,495],
[429,448,0,430,422,441,461,425,497,476],
[463,444,460,0,445,482,449,430,470,492],
[481,477,468,445,0,450,451,452,488,525],
[449,439,449,408,440,0,435,421,462,474],
[441,441,429,441,439,455,0,425,499,449],
[481,458,465,460,438,469,465,0,509,489],
[383,411,393,420,402,428,391,381,0,425],
[404,395,414,398,365,416,441,401,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,421,436,473,418,401,429,412,434],
[475,0,455,443,474,455,447,448,432,456],
[469,435,0,468,445,477,429,472,436,470],
[454,447,422,0,455,472,395,415,429,456],
[417,416,445,435,0,444,412,454,413,451],
[472,435,413,418,446,0,401,449,437,437],
[489,443,461,495,478,489,0,480,454,469],
[461,442,418,475,436,441,410,0,431,443],
[478,458,454,461,477,453,436,459,0,480],
[456,434,420,434,439,453,421,447,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,425,448,425,445,416,447,436,447],
[434,0,432,422,413,437,427,456,431,415],
[465,458,0,449,431,435,450,454,437,452],
[442,468,441,0,422,486,417,448,478,447],
[465,477,459,468,0,461,436,472,437,460],
[445,453,455,404,429,0,412,424,432,438],
[474,463,440,473,454,478,0,448,468,466],
[443,434,436,442,418,466,442,0,433,449],
[454,459,453,412,453,458,422,457,0,437],
[443,475,438,443,430,452,424,441,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,449,438,460,448,435,448,430,485],
[443,0,435,476,473,426,441,443,445,447],
[441,455,0,459,462,460,433,438,433,474],
[452,414,431,0,469,454,441,455,434,465],
[430,417,428,421,0,427,451,425,428,454],
[442,464,430,436,463,0,453,445,451,464],
[455,449,457,449,439,437,0,447,443,475],
[442,447,452,435,465,445,443,0,449,454],
[460,445,457,456,462,439,447,441,0,474],
[405,443,416,425,436,426,415,436,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,481,505,474,461,499,461,447,462],
[449,0,483,457,480,450,481,439,450,468],
[409,407,0,450,463,401,456,434,420,412],
[385,433,440,0,449,416,460,423,409,439],
[416,410,427,441,0,430,455,433,412,424],
[429,440,489,474,460,0,487,448,428,425],
[391,409,434,430,435,403,0,406,408,395],
[429,451,456,467,457,442,484,0,416,425],
[443,440,470,481,478,462,482,474,0,469],
[428,422,478,451,466,465,495,465,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,483,480,451,436,454,474,477,456],
[451,0,489,467,440,449,458,479,448,463],
[407,401,0,403,403,388,412,420,398,391],
[410,423,487,0,433,414,439,440,431,419],
[439,450,487,457,0,415,451,445,467,435],
[454,441,502,476,475,0,457,451,460,449],
[436,432,478,451,439,433,0,436,424,431],
[416,411,470,450,445,439,454,0,429,452],
[413,442,492,459,423,430,466,461,0,421],
[434,427,499,471,455,441,459,438,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,399,385,485,428,464,394,393,401],
[418,0,416,405,457,476,502,369,416,391],
[491,474,0,463,459,445,504,342,450,494],
[505,485,427,0,528,454,484,395,420,457],
[405,433,431,362,0,424,500,398,399,415],
[462,414,445,436,466,0,543,416,476,429],
[426,388,386,406,390,347,0,346,345,391],
[496,521,548,495,492,474,544,0,443,460],
[497,474,440,470,491,414,545,447,0,444],
[489,499,396,433,475,461,499,430,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,461,468,448,477,443,457,443,449],
[401,0,429,440,428,423,412,399,406,412],
[429,461,0,492,468,459,420,446,439,459],
[422,450,398,0,435,437,422,414,440,417],
[442,462,422,455,0,424,434,428,404,417],
[413,467,431,453,466,0,446,452,440,431],
[447,478,470,468,456,444,0,428,458,451],
[433,491,444,476,462,438,462,0,471,432],
[447,484,451,450,486,450,432,419,0,446],
[441,478,431,473,473,459,439,458,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,442,449,494,417,401,447,453,485],
[440,0,455,459,496,461,483,466,509,430],
[448,435,0,398,479,423,440,457,414,443],
[441,431,492,0,463,418,495,452,479,483],
[396,394,411,427,0,409,420,445,421,433],
[473,429,467,472,481,0,450,450,441,475],
[489,407,450,395,470,440,0,478,448,452],
[443,424,433,438,445,440,412,0,471,467],
[437,381,476,411,469,449,442,419,0,456],
[405,460,447,407,457,415,438,423,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,411,450,416,448,441,430,477,418],
[427,0,444,452,419,420,423,407,456,454],
[479,446,0,473,461,458,443,450,492,445],
[440,438,417,0,444,445,412,441,479,429],
[474,471,429,446,0,461,413,409,460,440],
[442,470,432,445,429,0,425,419,458,442],
[449,467,447,478,477,465,0,443,505,446],
[460,483,440,449,481,471,447,0,491,456],
[413,434,398,411,430,432,385,399,0,430],
[472,436,445,461,450,448,444,434,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,446,487,443,452,458,457,470,460],
[454,0,449,438,444,420,431,454,462,451],
[444,441,0,431,454,437,434,436,456,441],
[403,452,459,0,434,418,441,431,442,403],
[447,446,436,456,0,447,420,464,436,432],
[438,470,453,472,443,0,470,477,470,457],
[432,459,456,449,470,420,0,436,450,444],
[433,436,454,459,426,413,454,0,448,420],
[420,428,434,448,454,420,440,442,0,411],
[430,439,449,487,458,433,446,470,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,434,453,422,426,469,409,421,424],
[444,0,428,427,422,411,462,409,401,396],
[456,462,0,502,457,475,490,461,469,429],
[437,463,388,0,424,434,462,415,438,383],
[468,468,433,466,0,465,451,424,435,400],
[464,479,415,456,425,0,469,414,451,444],
[421,428,400,428,439,421,0,403,438,375],
[481,481,429,475,466,476,487,0,469,461],
[469,489,421,452,455,439,452,421,0,422],
[466,494,461,507,490,446,515,429,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,460,459,447,428,439,429,425,439],
[434,0,488,451,476,434,455,453,442,462],
[430,402,0,415,432,417,408,430,412,410],
[431,439,475,0,454,414,443,443,430,419],
[443,414,458,436,0,438,429,443,410,445],
[462,456,473,476,452,0,447,433,437,459],
[451,435,482,447,461,443,0,449,458,458],
[461,437,460,447,447,457,441,0,463,450],
[465,448,478,460,480,453,432,427,0,447],
[451,428,480,471,445,431,432,440,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,437,454,443,429,405,401,412,465],
[473,0,461,465,473,408,472,437,421,484],
[453,429,0,486,466,410,445,415,427,480],
[436,425,404,0,427,422,446,408,389,461],
[447,417,424,463,0,455,451,455,437,471],
[461,482,480,468,435,0,459,415,437,489],
[485,418,445,444,439,431,0,417,434,440],
[489,453,475,482,435,475,473,0,455,476],
[478,469,463,501,453,453,456,435,0,486],
[425,406,410,429,419,401,450,414,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,446,468,444,451,457,443,450,437],
[449,0,474,494,447,427,458,446,465,438],
[444,416,0,460,429,441,428,469,447,466],
[422,396,430,0,444,441,401,440,406,443],
[446,443,461,446,0,437,472,447,459,467],
[439,463,449,449,453,0,444,472,451,438],
[433,432,462,489,418,446,0,431,444,466],
[447,444,421,450,443,418,459,0,455,432],
[440,425,443,484,431,439,446,435,0,447],
[453,452,424,447,423,452,424,458,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,462,437,446,467,435,440,433,430],
[442,0,465,458,454,450,445,451,442,483],
[428,425,0,432,432,450,426,425,442,456],
[453,432,458,0,431,473,448,446,445,416],
[444,436,458,459,0,459,442,429,462,461],
[423,440,440,417,431,0,430,441,437,464],
[455,445,464,442,448,460,0,442,460,456],
[450,439,465,444,461,449,448,0,459,456],
[457,448,448,445,428,453,430,431,0,452],
[460,407,434,474,429,426,434,434,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,475,451,450,448,447,446,443,455],
[441,0,462,433,443,466,458,443,458,443],
[415,428,0,435,421,451,444,457,457,439],
[439,457,455,0,437,439,445,454,428,449],
[440,447,469,453,0,444,460,463,438,448],
[442,424,439,451,446,0,443,446,433,450],
[443,432,446,445,430,447,0,445,451,435],
[444,447,433,436,427,444,445,0,431,445],
[447,432,433,462,452,457,439,459,0,450],
[435,447,451,441,442,440,455,445,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,411,492,428,423,508,433,426,379],
[460,0,364,511,411,454,419,411,460,460],
[479,526,0,531,442,449,463,384,449,429],
[398,379,359,0,351,405,355,340,413,358],
[462,479,448,539,0,451,517,440,464,407],
[467,436,441,485,439,0,472,426,452,426],
[382,471,427,535,373,418,0,393,449,408],
[457,479,506,550,450,464,497,0,478,403],
[464,430,441,477,426,438,441,412,0,422],
[511,430,461,532,483,464,482,487,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,436,439,426,431,413,430,429,450],
[460,0,476,462,468,442,443,459,453,473],
[454,414,0,448,463,433,429,433,442,452],
[451,428,442,0,447,435,427,432,457,467],
[464,422,427,443,0,416,407,431,415,445],
[459,448,457,455,474,0,417,442,447,480],
[477,447,461,463,483,473,0,460,436,459],
[460,431,457,458,459,448,430,0,440,461],
[461,437,448,433,475,443,454,450,0,472],
[440,417,438,423,445,410,431,429,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,475,460,444,452,445,470,474,510],
[419,0,406,477,441,471,425,395,449,412],
[415,484,0,501,508,487,474,479,526,482],
[430,413,389,0,444,423,400,384,449,494],
[446,449,382,446,0,443,428,393,433,485],
[438,419,403,467,447,0,410,426,486,425],
[445,465,416,490,462,480,0,471,499,507],
[420,495,411,506,497,464,419,0,429,468],
[416,441,364,441,457,404,391,461,0,473],
[380,478,408,396,405,465,383,422,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,383,475,481,448,454,420,437,421,465],
[507,0,492,552,527,508,435,511,606,507],
[415,398,0,457,461,458,430,510,508,441],
[409,338,433,0,434,442,469,449,431,483],
[442,363,429,456,0,503,421,477,490,439],
[436,382,432,448,387,0,361,426,445,449],
[470,455,460,421,469,529,0,483,505,487],
[453,379,380,441,413,464,407,0,420,450],
[469,284,382,459,400,445,385,470,0,412],
[425,383,449,407,451,441,403,440,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,445,448,442,441,431,439,441,420],
[446,0,449,425,442,476,433,463,450,429],
[445,441,0,455,450,453,443,446,470,439],
[442,465,435,0,419,452,445,438,440,449],
[448,448,440,471,0,473,439,441,474,429],
[449,414,437,438,417,0,415,421,440,442],
[459,457,447,445,451,475,0,452,473,442],
[451,427,444,452,449,469,438,0,439,423],
[449,440,420,450,416,450,417,451,0,425],
[470,461,451,441,461,448,448,467,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,448,435,436,412,431,414,433,452],
[444,0,446,435,431,406,452,418,426,449],
[442,444,0,430,447,429,459,439,430,432],
[455,455,460,0,452,441,444,445,437,438],
[454,459,443,438,0,414,428,430,425,449],
[478,484,461,449,476,0,429,460,448,462],
[459,438,431,446,462,461,0,437,443,449],
[476,472,451,445,460,430,453,0,442,445],
[457,464,460,453,465,442,447,448,0,466],
[438,441,458,452,441,428,441,445,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,388,481,373,359,394,416,472,405,399],
[502,0,537,383,475,488,439,481,475,433],
[409,353,0,392,407,417,398,411,378,417],
[517,507,498,0,440,486,436,516,469,459],
[531,415,483,450,0,503,409,478,500,432],
[496,402,473,404,387,0,447,477,502,411],
[474,451,492,454,481,443,0,501,469,440],
[418,409,479,374,412,413,389,0,478,413],
[485,415,512,421,390,388,421,412,0,414],
[491,457,473,431,458,479,450,477,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,419,404,429,419,418,457,411,442],
[486,0,442,454,458,467,454,465,445,497],
[471,448,0,434,467,453,425,470,433,467],
[486,436,456,0,438,462,450,452,446,465],
[461,432,423,452,0,443,447,472,431,489],
[471,423,437,428,447,0,455,456,440,452],
[472,436,465,440,443,435,0,449,426,445],
[433,425,420,438,418,434,441,0,436,411],
[479,445,457,444,459,450,464,454,0,477],
[448,393,423,425,401,438,445,479,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,448,415,456,423,449,443,467,503],
[486,0,471,469,459,423,475,501,519,496],
[442,419,0,395,444,411,431,462,452,478],
[475,421,495,0,485,423,475,515,478,518],
[434,431,446,405,0,442,402,473,416,463],
[467,467,479,467,448,0,449,487,437,493],
[441,415,459,415,488,441,0,459,462,447],
[447,389,428,375,417,403,431,0,447,450],
[423,371,438,412,474,453,428,443,0,468],
[387,394,412,372,427,397,443,440,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,553,554,635,444,562,480,555,559],
[368,0,478,367,555,332,407,365,440,481],
[337,412,0,374,524,338,410,410,409,519],
[336,523,516,0,596,298,484,372,445,408],
[255,335,366,294,0,146,334,182,217,294],
[446,558,552,592,744,0,669,405,516,518],
[328,483,480,406,556,221,0,407,331,405],
[410,525,480,518,708,485,483,0,443,406],
[335,450,481,445,673,374,559,447,0,555],
[331,409,371,482,596,372,485,484,335,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,450,459,475,440,482,473,460,429],
[443,0,445,451,463,461,463,463,466,441],
[440,445,0,410,437,418,466,425,428,420],
[431,439,480,0,448,459,472,460,437,462],
[415,427,453,442,0,454,469,445,463,435],
[450,429,472,431,436,0,463,463,469,430],
[408,427,424,418,421,427,0,430,428,415],
[417,427,465,430,445,427,460,0,427,422],
[430,424,462,453,427,421,462,463,0,436],
[461,449,470,428,455,460,475,468,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,421,434,442,433,461,434,440,444],
[437,0,436,439,472,454,450,443,450,449],
[469,454,0,438,472,465,457,448,447,455],
[456,451,452,0,462,435,483,437,453,452],
[448,418,418,428,0,429,427,428,457,446],
[457,436,425,455,461,0,451,456,454,446],
[429,440,433,407,463,439,0,452,440,442],
[456,447,442,453,462,434,438,0,452,461],
[450,440,443,437,433,436,450,438,0,445],
[446,441,435,438,444,444,448,429,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,351,429,457,407,405,345,478,348,402],
[539,0,406,375,460,514,456,508,432,487],
[461,484,0,433,405,459,457,507,457,463],
[433,515,457,0,490,514,373,537,406,460],
[483,430,485,400,0,593,482,455,457,483],
[485,376,431,376,297,0,485,481,460,379],
[545,434,433,517,408,405,0,512,435,435],
[412,382,383,353,435,409,378,0,300,382],
[542,458,433,484,433,430,455,590,0,431],
[488,403,427,430,407,511,455,508,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,456,463,458,435,456,494,475,447],
[453,0,434,453,455,430,444,457,461,447],
[434,456,0,484,454,433,428,457,426,430],
[427,437,406,0,443,430,419,475,419,418],
[432,435,436,447,0,399,429,487,417,436],
[455,460,457,460,491,0,419,458,450,458],
[434,446,462,471,461,471,0,471,423,438],
[396,433,433,415,403,432,419,0,410,424],
[415,429,464,471,473,440,467,480,0,435],
[443,443,460,472,454,432,452,466,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,457,462,442,460,443,454,451,419],
[466,0,452,492,446,460,470,477,472,416],
[433,438,0,488,440,440,447,472,452,424],
[428,398,402,0,414,418,429,422,416,404],
[448,444,450,476,0,459,465,458,444,445],
[430,430,450,472,431,0,410,444,422,392],
[447,420,443,461,425,480,0,449,445,419],
[436,413,418,468,432,446,441,0,425,413],
[439,418,438,474,446,468,445,465,0,441],
[471,474,466,486,445,498,471,477,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,446,461,449,483,440,467,435,488],
[482,0,475,463,473,494,512,500,445,500],
[444,415,0,464,439,451,442,488,394,468],
[429,427,426,0,419,451,426,464,393,449],
[441,417,451,471,0,454,467,484,435,470],
[407,396,439,439,436,0,418,438,381,449],
[450,378,448,464,423,472,0,449,418,434],
[423,390,402,426,406,452,441,0,402,444],
[455,445,496,497,455,509,472,488,0,472],
[402,390,422,441,420,441,456,446,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,427,442,426,413,426,421,471,448],
[486,0,458,467,454,442,461,445,475,444],
[463,432,0,444,446,441,499,424,460,451],
[448,423,446,0,420,408,449,411,486,421],
[464,436,444,470,0,445,481,443,482,446],
[477,448,449,482,445,0,468,450,471,463],
[464,429,391,441,409,422,0,404,469,423],
[469,445,466,479,447,440,486,0,524,463],
[419,415,430,404,408,419,421,366,0,447],
[442,446,439,469,444,427,467,427,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,499,454,455,468,452,460,467,488],
[448,0,471,432,431,443,487,465,461,494],
[391,419,0,437,429,423,403,457,434,485],
[436,458,453,0,439,423,444,462,481,472],
[435,459,461,451,0,443,435,455,450,465],
[422,447,467,467,447,0,455,472,463,481],
[438,403,487,446,455,435,0,455,436,492],
[430,425,433,428,435,418,435,0,465,482],
[423,429,456,409,440,427,454,425,0,462],
[402,396,405,418,425,409,398,408,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,439,419,395,448,456,458,425,429],
[469,0,471,472,435,462,438,455,443,438],
[451,419,0,468,410,436,435,468,433,425],
[471,418,422,0,415,461,427,444,399,429],
[495,455,480,475,0,488,440,492,459,465],
[442,428,454,429,402,0,445,450,423,415],
[434,452,455,463,450,445,0,468,459,412],
[432,435,422,446,398,440,422,0,410,437],
[465,447,457,491,431,467,431,480,0,431],
[461,452,465,461,425,475,478,453,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,479,434,466,464,466,468,522,455],
[424,0,441,442,436,449,479,460,490,450],
[411,449,0,420,448,428,441,469,471,469],
[456,448,470,0,448,435,451,478,502,468],
[424,454,442,442,0,413,449,489,498,435],
[426,441,462,455,477,0,441,467,500,472],
[424,411,449,439,441,449,0,462,519,457],
[422,430,421,412,401,423,428,0,473,411],
[368,400,419,388,392,390,371,417,0,370],
[435,440,421,422,455,418,433,479,520,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,416,376,400,408,408,425,465,375],
[484,0,434,454,455,385,404,473,513,404],
[474,456,0,413,409,418,446,518,473,429],
[514,436,477,0,423,440,431,446,491,446],
[490,435,481,467,0,374,436,467,497,447],
[482,505,472,450,516,0,431,499,507,498],
[482,486,444,459,454,459,0,511,487,433],
[465,417,372,444,423,391,379,0,460,382],
[425,377,417,399,393,383,403,430,0,347],
[515,486,461,444,443,392,457,508,543,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,470,451,438,446,453,439,425,430],
[427,0,479,448,439,434,456,427,445,437],
[420,411,0,403,432,403,433,403,424,426],
[439,442,487,0,432,446,446,455,436,433],
[452,451,458,458,0,447,431,444,444,456],
[444,456,487,444,443,0,458,455,437,445],
[437,434,457,444,459,432,0,436,461,437],
[451,463,487,435,446,435,454,0,439,446],
[465,445,466,454,446,453,429,451,0,444],
[460,453,464,457,434,445,453,444,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,435,387,408,416,460,375,400,421],
[460,0,483,472,475,460,520,418,430,449],
[455,407,0,386,421,418,435,388,361,392],
[503,418,504,0,450,475,526,412,449,494],
[482,415,469,440,0,398,463,461,459,425],
[474,430,472,415,492,0,491,462,434,471],
[430,370,455,364,427,399,0,359,416,367],
[515,472,502,478,429,428,531,0,430,451],
[490,460,529,441,431,456,474,460,0,440],
[469,441,498,396,465,419,523,439,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,443,448,447,455,477,421,445,464],
[438,0,445,453,440,467,454,435,424,465],
[447,445,0,458,448,468,477,438,448,485],
[442,437,432,0,451,451,466,432,432,456],
[443,450,442,439,0,448,451,435,408,469],
[435,423,422,439,442,0,461,428,410,467],
[413,436,413,424,439,429,0,430,403,445],
[469,455,452,458,455,462,460,0,440,477],
[445,466,442,458,482,480,487,450,0,480],
[426,425,405,434,421,423,445,413,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,447,471,477,448,451,482,460,443],
[435,0,424,451,474,416,442,452,458,426],
[443,466,0,467,470,452,457,490,469,447],
[419,439,423,0,453,426,443,460,445,430],
[413,416,420,437,0,417,434,457,447,432],
[442,474,438,464,473,0,469,470,458,428],
[439,448,433,447,456,421,0,472,450,433],
[408,438,400,430,433,420,418,0,424,413],
[430,432,421,445,443,432,440,466,0,430],
[447,464,443,460,458,462,457,477,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,402,447,417,434,415,453,449,441],
[491,0,445,469,477,489,420,456,455,439],
[488,445,0,459,467,464,479,500,475,441],
[443,421,431,0,423,422,443,440,427,410],
[473,413,423,467,0,427,418,460,453,444],
[456,401,426,468,463,0,402,468,437,455],
[475,470,411,447,472,488,0,485,464,440],
[437,434,390,450,430,422,405,0,413,401],
[441,435,415,463,437,453,426,477,0,442],
[449,451,449,480,446,435,450,489,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,451,431,440,414,454,446,452,436],
[455,0,462,457,450,444,464,446,452,441],
[439,428,0,409,434,425,432,421,445,426],
[459,433,481,0,437,426,451,449,461,442],
[450,440,456,453,0,435,463,431,437,449],
[476,446,465,464,455,0,444,443,465,462],
[436,426,458,439,427,446,0,415,430,436],
[444,444,469,441,459,447,475,0,463,441],
[438,438,445,429,453,425,460,427,0,434],
[454,449,464,448,441,428,454,449,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,482,441,438,468,423,454,460,472],
[439,0,473,441,455,452,433,455,463,478],
[408,417,0,419,420,430,407,436,433,433],
[449,449,471,0,460,464,447,445,459,481],
[452,435,470,430,0,443,425,424,445,446],
[422,438,460,426,447,0,422,433,453,459],
[467,457,483,443,465,468,0,453,461,485],
[436,435,454,445,466,457,437,0,463,472],
[430,427,457,431,445,437,429,427,0,461],
[418,412,457,409,444,431,405,418,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,465,443,472,473,429,458,444,463],
[445,0,432,453,442,440,438,437,428,445],
[425,458,0,439,444,447,432,456,417,443],
[447,437,451,0,442,457,454,452,452,457],
[418,448,446,448,0,445,440,449,424,438],
[417,450,443,433,445,0,445,459,433,432],
[461,452,458,436,450,445,0,458,432,455],
[432,453,434,438,441,431,432,0,425,436],
[446,462,473,438,466,457,458,465,0,433],
[427,445,447,433,452,458,435,454,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,439,489,455,466,460,459,432,472],
[451,0,431,479,450,442,467,453,471,455],
[451,459,0,509,429,487,482,482,487,470],
[401,411,381,0,429,444,429,432,423,429],
[435,440,461,461,0,473,465,487,437,464],
[424,448,403,446,417,0,424,453,443,440],
[430,423,408,461,425,466,0,437,447,443],
[431,437,408,458,403,437,453,0,433,429],
[458,419,403,467,453,447,443,457,0,444],
[418,435,420,461,426,450,447,461,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,463,442,449,457,431,456,464,439],
[425,0,431,422,418,449,425,437,416,419],
[427,459,0,457,477,450,456,468,454,447],
[448,468,433,0,453,457,430,444,435,439],
[441,472,413,437,0,438,411,418,398,430],
[433,441,440,433,452,0,422,416,419,420],
[459,465,434,460,479,468,0,475,448,465],
[434,453,422,446,472,474,415,0,437,430],
[426,474,436,455,492,471,442,453,0,438],
[451,471,443,451,460,470,425,460,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,434,471,456,478,460,436,456,461],
[414,0,408,408,424,438,431,430,410,425],
[456,482,0,444,442,454,454,439,453,465],
[419,482,446,0,422,448,425,430,442,456],
[434,466,448,468,0,458,442,446,448,455],
[412,452,436,442,432,0,435,413,435,431],
[430,459,436,465,448,455,0,423,452,448],
[454,460,451,460,444,477,467,0,451,454],
[434,480,437,448,442,455,438,439,0,442],
[429,465,425,434,435,459,442,436,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,440,433,460,422,453,439,452,459],
[454,0,442,452,479,435,464,453,460,439],
[450,448,0,416,457,431,442,449,452,440],
[457,438,474,0,458,440,459,474,485,447],
[430,411,433,432,0,417,446,453,454,433],
[468,455,459,450,473,0,455,455,460,443],
[437,426,448,431,444,435,0,465,453,430],
[451,437,441,416,437,435,425,0,459,423],
[438,430,438,405,436,430,437,431,0,426],
[431,451,450,443,457,447,460,467,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,436,445,423,447,473,441,446,471],
[409,0,435,424,418,417,456,420,415,477],
[454,455,0,447,469,472,430,468,456,462],
[445,466,443,0,467,476,463,466,474,456],
[467,472,421,423,0,442,456,432,459,466],
[443,473,418,414,448,0,444,452,438,474],
[417,434,460,427,434,446,0,435,405,474],
[449,470,422,424,458,438,455,0,437,467],
[444,475,434,416,431,452,485,453,0,472],
[419,413,428,434,424,416,416,423,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,427,440,442,433,439,445,431,420],
[455,0,452,440,450,445,464,431,448,451],
[463,438,0,468,447,463,455,447,452,467],
[450,450,422,0,446,445,449,443,443,426],
[448,440,443,444,0,432,463,443,443,447],
[457,445,427,445,458,0,443,451,426,443],
[451,426,435,441,427,447,0,430,451,449],
[445,459,443,447,447,439,460,0,448,436],
[459,442,438,447,447,464,439,442,0,437],
[470,439,423,464,443,447,441,454,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,431,456,443,483,452,463,461,428],
[460,0,447,432,466,476,477,491,476,475],
[459,443,0,453,435,496,431,472,464,448],
[434,458,437,0,458,451,464,455,451,443],
[447,424,455,432,0,503,456,462,471,429],
[407,414,394,439,387,0,415,458,448,442],
[438,413,459,426,434,475,0,456,463,447],
[427,399,418,435,428,432,434,0,448,440],
[429,414,426,439,419,442,427,442,0,427],
[462,415,442,447,461,448,443,450,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,465,461,451,451,450,435,415,456],
[438,0,450,440,442,454,431,435,401,442],
[425,440,0,443,430,441,443,430,417,437],
[429,450,447,0,438,451,451,458,427,444],
[439,448,460,452,0,478,437,448,448,459],
[439,436,449,439,412,0,451,425,432,436],
[440,459,447,439,453,439,0,448,435,461],
[455,455,460,432,442,465,442,0,443,456],
[475,489,473,463,442,458,455,447,0,461],
[434,448,453,446,431,454,429,434,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,456,459,423,499,493,459,394,429],
[389,0,451,437,450,473,471,446,420,419],
[434,439,0,434,411,456,439,457,417,371],
[431,453,456,0,421,497,462,470,422,403],
[467,440,479,469,0,492,486,460,448,457],
[391,417,434,393,398,0,455,430,384,392],
[397,419,451,428,404,435,0,396,402,361],
[431,444,433,420,430,460,494,0,406,398],
[496,470,473,468,442,506,488,484,0,429],
[461,471,519,487,433,498,529,492,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,457,427,423,407,432,432,440,447],
[438,0,429,437,419,407,440,416,438,419],
[433,461,0,441,409,435,455,426,439,451],
[463,453,449,0,419,442,462,452,461,424],
[467,471,481,471,0,460,478,445,485,459],
[483,483,455,448,430,0,470,454,437,450],
[458,450,435,428,412,420,0,427,438,430],
[458,474,464,438,445,436,463,0,461,454],
[450,452,451,429,405,453,452,429,0,421],
[443,471,439,466,431,440,460,436,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,449,430,444,430,425,454,444,458],
[458,0,456,450,445,446,438,452,443,450],
[441,434,0,455,453,430,440,454,446,465],
[460,440,435,0,448,431,427,446,422,466],
[446,445,437,442,0,417,433,448,443,478],
[460,444,460,459,473,0,448,465,461,470],
[465,452,450,463,457,442,0,446,443,473],
[436,438,436,444,442,425,444,0,441,448],
[446,447,444,468,447,429,447,449,0,478],
[432,440,425,424,412,420,417,442,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,449,457,453,438,448,458,447,441],
[431,0,441,434,431,423,417,428,418,433],
[441,449,0,450,413,418,419,416,427,432],
[433,456,440,0,415,418,427,418,424,430],
[437,459,477,475,0,430,453,431,429,459],
[452,467,472,472,460,0,437,452,459,453],
[442,473,471,463,437,453,0,441,446,441],
[432,462,474,472,459,438,449,0,452,455],
[443,472,463,466,461,431,444,438,0,462],
[449,457,458,460,431,437,449,435,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,491,459,424,456,469,443,455,471],
[445,0,472,450,423,427,462,451,428,454],
[399,418,0,391,410,435,446,401,413,440],
[431,440,499,0,446,482,459,455,429,464],
[466,467,480,444,0,459,485,443,491,455],
[434,463,455,408,431,0,452,460,407,417],
[421,428,444,431,405,438,0,419,431,427],
[447,439,489,435,447,430,471,0,456,421],
[435,462,477,461,399,483,459,434,0,458],
[419,436,450,426,435,473,463,469,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,442,423,439,446,433,440,462,436],
[459,0,428,438,441,447,424,451,457,445],
[448,462,0,443,435,429,418,471,452,451],
[467,452,447,0,444,459,447,471,451,462],
[451,449,455,446,0,437,416,471,443,471],
[444,443,461,431,453,0,441,450,434,447],
[457,466,472,443,474,449,0,455,432,457],
[450,439,419,419,419,440,435,0,422,431],
[428,433,438,439,447,456,458,468,0,462],
[454,445,439,428,419,443,433,459,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,407,455,445,440,444,442,460,423],
[436,0,385,408,460,438,415,410,364,388],
[483,505,0,489,515,469,483,480,457,443],
[435,482,401,0,425,442,399,428,409,412],
[445,430,375,465,0,423,387,424,435,404],
[450,452,421,448,467,0,438,445,441,422],
[446,475,407,491,503,452,0,470,451,432],
[448,480,410,462,466,445,420,0,419,411],
[430,526,433,481,455,449,439,471,0,449],
[467,502,447,478,486,468,458,479,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,528,441,453,392,477,447,478,476],
[471,0,412,469,503,390,499,447,531,472],
[362,478,0,389,426,450,447,421,451,419],
[449,421,501,0,394,362,444,449,449,447],
[437,387,464,496,0,328,493,441,413,410],
[498,500,440,528,562,0,552,445,530,385],
[413,391,443,446,397,338,0,423,471,500],
[443,443,469,441,449,445,467,0,414,415],
[412,359,439,441,477,360,419,476,0,443],
[414,418,471,443,480,505,390,475,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,392,385,421,390,443,413,410,381,405],
[498,0,433,454,446,469,437,452,422,459],
[505,457,0,472,407,458,461,441,425,462],
[469,436,418,0,441,437,465,436,453,465],
[500,444,483,449,0,496,453,449,443,476],
[447,421,432,453,394,0,466,441,429,420],
[477,453,429,425,437,424,0,436,420,450],
[480,438,449,454,441,449,454,0,459,436],
[509,468,465,437,447,461,470,431,0,486],
[485,431,428,425,414,470,440,454,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,439,475,407,465,425,406,435,432],
[419,0,405,462,432,454,416,422,442,457],
[451,485,0,452,442,456,409,448,434,467],
[415,428,438,0,428,454,426,427,413,415],
[483,458,448,462,0,452,461,431,442,485],
[425,436,434,436,438,0,414,434,416,426],
[465,474,481,464,429,476,0,472,458,478],
[484,468,442,463,459,456,418,0,464,479],
[455,448,456,477,448,474,432,426,0,433],
[458,433,423,475,405,464,412,411,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,392,375,378,392,466,414,409,427,425],
[498,0,521,525,450,491,445,452,477,448],
[515,369,0,502,461,504,415,403,434,433],
[512,365,388,0,417,433,431,398,406,388],
[498,440,429,473,0,511,449,405,483,418],
[424,399,386,457,379,0,379,367,386,394],
[476,445,475,459,441,511,0,464,494,472],
[481,438,487,492,485,523,426,0,466,449],
[463,413,456,484,407,504,396,424,0,427],
[465,442,457,502,472,496,418,441,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,404,413,460,422,445,465,481,388],
[479,0,421,456,427,459,453,475,460,406],
[486,469,0,450,411,438,462,476,474,422],
[477,434,440,0,450,450,458,460,466,422],
[430,463,479,440,0,445,449,494,487,449],
[468,431,452,440,445,0,453,458,475,426],
[445,437,428,432,441,437,0,435,459,444],
[425,415,414,430,396,432,455,0,437,433],
[409,430,416,424,403,415,431,453,0,422],
[502,484,468,468,441,464,446,457,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,446,438,420,465,435,449,433,418],
[440,0,451,427,431,473,441,451,440,428],
[444,439,0,434,448,463,444,451,433,446],
[452,463,456,0,431,496,476,475,462,455],
[470,459,442,459,0,483,459,463,444,446],
[425,417,427,394,407,0,434,411,439,408],
[455,449,446,414,431,456,0,446,448,437],
[441,439,439,415,427,479,444,0,470,433],
[457,450,457,428,446,451,442,420,0,434],
[472,462,444,435,444,482,453,457,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,481,461,461,442,453,449,467,446],
[436,0,462,470,447,468,439,449,451,439],
[409,428,0,434,426,415,424,397,433,419],
[429,420,456,0,447,432,438,424,449,415],
[429,443,464,443,0,444,452,430,449,449],
[448,422,475,458,446,0,423,422,445,421],
[437,451,466,452,438,467,0,445,449,447],
[441,441,493,466,460,468,445,0,469,458],
[423,439,457,441,441,445,441,421,0,425],
[444,451,471,475,441,469,443,432,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,446,439,437,435,396,424,431,431],
[435,0,456,404,448,442,434,401,430,449],
[444,434,0,409,413,425,413,422,429,422],
[451,486,481,0,455,452,456,429,457,453],
[453,442,477,435,0,460,439,438,443,437],
[455,448,465,438,430,0,434,437,418,445],
[494,456,477,434,451,456,0,438,438,461],
[466,489,468,461,452,453,452,0,430,443],
[459,460,461,433,447,472,452,460,0,441],
[459,441,468,437,453,445,429,447,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,449,433,405,433,411,412,407,419],
[457,0,443,428,412,459,423,420,438,428],
[441,447,0,451,411,449,425,462,423,441],
[457,462,439,0,467,457,426,446,461,459],
[485,478,479,423,0,448,451,461,472,448],
[457,431,441,433,442,0,426,425,431,440],
[479,467,465,464,439,464,0,446,439,452],
[478,470,428,444,429,465,444,0,425,437],
[483,452,467,429,418,459,451,465,0,444],
[471,462,449,431,442,450,438,453,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,428,439,443,463,455,464,457,475],
[453,0,476,511,462,422,485,427,494,438],
[462,414,0,466,429,461,485,425,489,449],
[451,379,424,0,436,429,479,412,471,488],
[447,428,461,454,0,410,489,457,487,474],
[427,468,429,461,480,0,473,460,499,441],
[435,405,405,411,401,417,0,410,440,410],
[426,463,465,478,433,430,480,0,472,495],
[433,396,401,419,403,391,450,418,0,453],
[415,452,441,402,416,449,480,395,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,443,445,431,429,411,439,384,414],
[421,0,422,406,414,408,432,425,429,464],
[447,468,0,461,430,438,428,424,395,433],
[445,484,429,0,436,410,421,439,419,447],
[459,476,460,454,0,444,462,467,434,433],
[461,482,452,480,446,0,463,446,442,476],
[479,458,462,469,428,427,0,467,471,456],
[451,465,466,451,423,444,423,0,390,415],
[506,461,495,471,456,448,419,500,0,484],
[476,426,457,443,457,414,434,475,406,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,526,456,493,475,465,497,422,512,458],
[364,0,450,450,452,447,461,429,447,419],
[434,440,0,458,474,500,479,453,478,459],
[397,440,432,0,422,422,457,398,452,397],
[415,438,416,468,0,426,453,402,494,448],
[425,443,390,468,464,0,482,409,471,406],
[393,429,411,433,437,408,0,383,453,392],
[468,461,437,492,488,481,507,0,497,438],
[378,443,412,438,396,419,437,393,0,373],
[432,471,431,493,442,484,498,452,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,421,464,432,440,439,459,435,440],
[470,0,456,478,446,463,447,464,432,478],
[469,434,0,491,442,447,450,481,457,475],
[426,412,399,0,399,436,422,448,424,416],
[458,444,448,491,0,468,474,471,438,463],
[450,427,443,454,422,0,444,452,406,456],
[451,443,440,468,416,446,0,455,443,470],
[431,426,409,442,419,438,435,0,402,457],
[455,458,433,466,452,484,447,488,0,493],
[450,412,415,474,427,434,420,433,397,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,482,447,462,503,442,470,487,478],
[383,0,427,420,394,436,413,404,414,432],
[408,463,0,441,446,426,395,425,419,418],
[443,470,449,0,431,455,446,465,427,453],
[428,496,444,459,0,466,450,465,460,461],
[387,454,464,435,424,0,437,452,447,418],
[448,477,495,444,440,453,0,439,457,458],
[420,486,465,425,425,438,451,0,444,444],
[403,476,471,463,430,443,433,446,0,431],
[412,458,472,437,429,472,432,446,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,427,421,421,443,449,436,442,459],
[458,0,459,451,433,440,442,428,437,459],
[463,431,0,449,463,459,473,456,477,458],
[469,439,441,0,458,461,456,454,463,467],
[469,457,427,432,0,451,461,443,457,479],
[447,450,431,429,439,0,451,451,463,454],
[441,448,417,434,429,439,0,439,440,451],
[454,462,434,436,447,439,451,0,442,455],
[448,453,413,427,433,427,450,448,0,444],
[431,431,432,423,411,436,439,435,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,476,523,470,501,493,464,417,491],
[378,0,443,431,507,444,468,415,416,383],
[414,447,0,419,414,442,464,421,393,441],
[367,459,471,0,453,465,447,423,407,448],
[420,383,476,437,0,458,491,391,384,459],
[389,446,448,425,432,0,465,378,369,389],
[397,422,426,443,399,425,0,421,415,480],
[426,475,469,467,499,512,469,0,404,454],
[473,474,497,483,506,521,475,486,0,436],
[399,507,449,442,431,501,410,436,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,355,573,570,323,396,356,396,321],
[388,0,276,531,635,351,316,351,317,391],
[535,614,0,611,609,499,572,469,467,432],
[317,359,279,0,462,322,284,357,284,465],
[320,255,281,428,0,284,248,247,287,215],
[567,539,391,568,606,0,391,354,499,463],
[494,574,318,606,642,499,0,355,357,427],
[534,539,421,533,643,536,535,0,461,501],
[494,573,423,606,603,391,533,429,0,464],
[569,499,458,425,675,427,463,389,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,446,458,473,474,452,431,460,461],
[439,0,431,445,452,463,442,447,456,430],
[444,459,0,472,458,468,463,463,447,440],
[432,445,418,0,449,444,439,432,460,427],
[417,438,432,441,0,464,431,461,457,448],
[416,427,422,446,426,0,436,419,443,440],
[438,448,427,451,459,454,0,466,459,446],
[459,443,427,458,429,471,424,0,463,442],
[430,434,443,430,433,447,431,427,0,442],
[429,460,450,463,442,450,444,448,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,466,454,424,443,429,470,455,454],
[428,0,422,415,460,428,459,430,436,436],
[424,468,0,404,438,377,402,468,437,460],
[436,475,486,0,432,451,459,480,455,454],
[466,430,452,458,0,410,440,463,468,431],
[447,462,513,439,480,0,455,469,446,466],
[461,431,488,431,450,435,0,424,447,460],
[420,460,422,410,427,421,466,0,398,436],
[435,454,453,435,422,444,443,492,0,475],
[436,454,430,436,459,424,430,454,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,418,399,412,442,454,418,416,442],
[464,0,448,437,444,487,444,443,423,434],
[472,442,0,467,428,451,445,440,441,443],
[491,453,423,0,429,460,444,443,437,414],
[478,446,462,461,0,466,464,449,459,444],
[448,403,439,430,424,0,415,445,441,452],
[436,446,445,446,426,475,0,452,462,451],
[472,447,450,447,441,445,438,0,445,422],
[474,467,449,453,431,449,428,445,0,448],
[448,456,447,476,446,438,439,468,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,436,423,414,446,425,402,429,408],
[475,0,451,456,436,483,445,431,452,427],
[454,439,0,453,443,454,435,422,461,435],
[467,434,437,0,430,466,438,418,434,434],
[476,454,447,460,0,477,437,433,449,444],
[444,407,436,424,413,0,441,396,427,411],
[465,445,455,452,453,449,0,451,465,446],
[488,459,468,472,457,494,439,0,471,460],
[461,438,429,456,441,463,425,419,0,437],
[482,463,455,456,446,479,444,430,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,435,423,467,409,388,445,424,413],
[431,0,423,421,473,438,420,467,439,456],
[455,467,0,496,462,438,427,484,462,446],
[467,469,394,0,448,452,463,467,473,465],
[423,417,428,442,0,430,371,452,441,433],
[481,452,452,438,460,0,391,440,477,433],
[502,470,463,427,519,499,0,474,474,469],
[445,423,406,423,438,450,416,0,445,387],
[466,451,428,417,449,413,416,445,0,462],
[477,434,444,425,457,457,421,503,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,535,525,445,489,422,441,462,527],
[474,0,507,507,422,424,440,466,418,440],
[355,383,0,442,393,372,415,442,422,431],
[365,383,448,0,386,371,417,409,433,453],
[445,468,497,504,0,429,460,453,461,466],
[401,466,518,519,461,0,478,427,468,399],
[468,450,475,473,430,412,0,465,435,468],
[449,424,448,481,437,463,425,0,416,521],
[428,472,468,457,429,422,455,474,0,505],
[363,450,459,437,424,491,422,369,385,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,442,441,454,445,419,424,450,436],
[481,0,477,454,453,452,434,454,456,460],
[448,413,0,431,413,439,409,416,427,428],
[449,436,459,0,439,456,413,433,448,443],
[436,437,477,451,0,456,441,439,449,441],
[445,438,451,434,434,0,420,413,429,447],
[471,456,481,477,449,470,0,442,461,453],
[466,436,474,457,451,477,448,0,458,454],
[440,434,463,442,441,461,429,432,0,448],
[454,430,462,447,449,443,437,436,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,403,448,425,441,444,455,435,435],
[459,0,420,435,448,437,436,440,452,452],
[487,470,0,443,452,461,438,460,464,483],
[442,455,447,0,453,446,445,457,472,465],
[465,442,438,437,0,448,456,440,469,449],
[449,453,429,444,442,0,448,453,459,453],
[446,454,452,445,434,442,0,442,463,461],
[435,450,430,433,450,437,448,0,467,437],
[455,438,426,418,421,431,427,423,0,429],
[455,438,407,425,441,437,429,453,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,432,388,424,467,424,439,457,397],
[470,0,476,437,470,486,484,459,477,441],
[458,414,0,414,469,420,433,421,437,395],
[502,453,476,0,440,457,447,466,456,439],
[466,420,421,450,0,483,411,476,442,430],
[423,404,470,433,407,0,409,428,437,375],
[466,406,457,443,479,481,0,436,487,447],
[451,431,469,424,414,462,454,0,468,410],
[433,413,453,434,448,453,403,422,0,414],
[493,449,495,451,460,515,443,480,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,432,444,433,441,419,450,451,461],
[440,0,434,432,433,424,443,442,395,411],
[458,456,0,466,434,423,465,432,402,444],
[446,458,424,0,424,415,432,439,384,433],
[457,457,456,466,0,458,455,444,411,449],
[449,466,467,475,432,0,464,463,431,461],
[471,447,425,458,435,426,0,430,443,452],
[440,448,458,451,446,427,460,0,409,432],
[439,495,488,506,479,459,447,481,0,476],
[429,479,446,457,441,429,438,458,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,435,467,463,446,471,463,474,460],
[442,0,430,432,459,454,449,457,451,443],
[455,460,0,445,461,454,441,450,435,448],
[423,458,445,0,455,448,430,470,438,463],
[427,431,429,435,0,438,428,444,430,443],
[444,436,436,442,452,0,448,435,459,453],
[419,441,449,460,462,442,0,458,439,432],
[427,433,440,420,446,455,432,0,438,446],
[416,439,455,452,460,431,451,452,0,432],
[430,447,442,427,447,437,458,444,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,414,462,446,416,432,429,447,435],
[463,0,443,466,464,428,429,442,442,463],
[476,447,0,471,462,432,448,446,455,480],
[428,424,419,0,409,419,427,431,443,432],
[444,426,428,481,0,423,430,457,428,449],
[474,462,458,471,467,0,452,434,472,463],
[458,461,442,463,460,438,0,444,464,465],
[461,448,444,459,433,456,446,0,453,451],
[443,448,435,447,462,418,426,437,0,461],
[455,427,410,458,441,427,425,439,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,416,416,406,471,424,410,439,428],
[449,0,443,417,421,499,371,367,440,394],
[474,447,0,450,475,478,453,441,455,446],
[474,473,440,0,467,495,419,440,452,452],
[484,469,415,423,0,490,401,424,447,434],
[419,391,412,395,400,0,336,415,413,382],
[466,519,437,471,489,554,0,459,480,453],
[480,523,449,450,466,475,431,0,426,422],
[451,450,435,438,443,477,410,464,0,414],
[462,496,444,438,456,508,437,468,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,461,442,460,459,481,468,455,463],
[430,0,462,459,468,446,444,442,472,464],
[429,428,0,437,465,418,457,457,414,434],
[448,431,453,0,469,461,460,451,435,449],
[430,422,425,421,0,454,444,429,421,429],
[431,444,472,429,436,0,453,461,448,459],
[409,446,433,430,446,437,0,455,442,456],
[422,448,433,439,461,429,435,0,442,443],
[435,418,476,455,469,442,448,448,0,460],
[427,426,456,441,461,431,434,447,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,455,463,453,416,427,443,445,456],
[446,0,449,452,443,434,398,468,424,451],
[435,441,0,465,419,402,407,415,379,427],
[427,438,425,0,456,424,444,421,389,455],
[437,447,471,434,0,428,440,470,453,478],
[474,456,488,466,462,0,453,455,430,463],
[463,492,483,446,450,437,0,436,400,457],
[447,422,475,469,420,435,454,0,430,452],
[445,466,511,501,437,460,490,460,0,480],
[434,439,463,435,412,427,433,438,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,368,400,400,373,420,352,523,407,423],
[522,0,343,428,364,511,430,463,420,476],
[490,547,0,417,449,422,405,513,413,539],
[490,462,473,0,359,487,479,525,517,503],
[517,526,441,531,0,447,464,549,480,523],
[470,379,468,403,443,0,388,491,385,441],
[538,460,485,411,426,502,0,566,460,498],
[367,427,377,365,341,399,324,0,391,401],
[483,470,477,373,410,505,430,499,0,485],
[467,414,351,387,367,449,392,489,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,429,473,470,452,469,473,430,458],
[419,0,434,441,453,418,452,458,429,438],
[461,456,0,436,436,451,474,455,425,454],
[417,449,454,0,429,432,457,451,414,425],
[420,437,454,461,0,428,447,431,438,460],
[438,472,439,458,462,0,470,456,442,461],
[421,438,416,433,443,420,0,468,446,435],
[417,432,435,439,459,434,422,0,426,434],
[460,461,465,476,452,448,444,464,0,468],
[432,452,436,465,430,429,455,456,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,433,435,444,425,471,438,447,451],
[447,0,456,441,435,418,432,433,439,417],
[457,434,0,430,448,418,445,420,461,434],
[455,449,460,0,468,447,449,436,465,447],
[446,455,442,422,0,423,437,456,450,434],
[465,472,472,443,467,0,459,446,473,462],
[419,458,445,441,453,431,0,460,464,432],
[452,457,470,454,434,444,430,0,440,411],
[443,451,429,425,440,417,426,450,0,441],
[439,473,456,443,456,428,458,479,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,382,582,524,528,461,484,553,543,522],
[508,0,509,510,551,437,521,544,472,551],
[308,381,0,425,446,396,470,495,458,423],
[366,380,465,0,444,429,462,450,431,455],
[362,339,444,446,0,414,428,424,441,467],
[429,453,494,461,476,0,459,466,486,509],
[406,369,420,428,462,431,0,404,447,397],
[337,346,395,440,466,424,486,0,454,413],
[347,418,432,459,449,404,443,436,0,442],
[368,339,467,435,423,381,493,477,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,431,445,432,450,453,425,444,415],
[414,0,414,424,422,435,430,407,434,419],
[459,476,0,448,417,464,488,452,469,420],
[445,466,442,0,423,471,411,435,473,403],
[458,468,473,467,0,473,458,443,467,446],
[440,455,426,419,417,0,390,405,428,411],
[437,460,402,479,432,500,0,449,451,428],
[465,483,438,455,447,485,441,0,475,443],
[446,456,421,417,423,462,439,415,0,404],
[475,471,470,487,444,479,462,447,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,429,424,389,432,412,443,414,452],
[448,0,449,461,445,430,434,420,464,458],
[461,441,0,434,398,453,433,429,468,463],
[466,429,456,0,391,455,438,440,430,444],
[501,445,492,499,0,516,437,441,448,478],
[458,460,437,435,374,0,415,402,410,460],
[478,456,457,452,453,475,0,471,446,437],
[447,470,461,450,449,488,419,0,449,457],
[476,426,422,460,442,480,444,441,0,465],
[438,432,427,446,412,430,453,433,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,429,459,415,424,435,452,481,446],
[433,0,443,430,432,467,452,430,447,434],
[461,447,0,455,449,462,443,515,443,433],
[431,460,435,0,446,473,438,500,477,471],
[475,458,441,444,0,434,432,469,478,452],
[466,423,428,417,456,0,406,455,475,448],
[455,438,447,452,458,484,0,486,497,485],
[438,460,375,390,421,435,404,0,441,420],
[409,443,447,413,412,415,393,449,0,424],
[444,456,457,419,438,442,405,470,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,436,457,470,459,442,461,449,461],
[413,0,449,461,473,452,433,440,418,454],
[454,441,0,432,464,440,433,438,458,420],
[433,429,458,0,440,450,439,459,424,421],
[420,417,426,450,0,433,429,439,410,430],
[431,438,450,440,457,0,446,433,442,478],
[448,457,457,451,461,444,0,457,440,473],
[429,450,452,431,451,457,433,0,436,445],
[441,472,432,466,480,448,450,454,0,428],
[429,436,470,469,460,412,417,445,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,398,459,454,391,440,445,414,468],
[459,0,402,492,435,421,423,443,400,443],
[492,488,0,496,473,448,440,456,439,496],
[431,398,394,0,454,417,405,434,404,464],
[436,455,417,436,0,430,433,430,420,477],
[499,469,442,473,460,0,448,454,455,499],
[450,467,450,485,457,442,0,472,427,529],
[445,447,434,456,460,436,418,0,404,447],
[476,490,451,486,470,435,463,486,0,482],
[422,447,394,426,413,391,361,443,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,449,467,463,457,457,431,456,452],
[429,0,442,433,453,451,442,433,442,470],
[441,448,0,436,435,454,433,448,428,440],
[423,457,454,0,435,448,442,447,446,459],
[427,437,455,455,0,449,459,443,433,450],
[433,439,436,442,441,0,429,417,431,451],
[433,448,457,448,431,461,0,444,453,461],
[459,457,442,443,447,473,446,0,443,462],
[434,448,462,444,457,459,437,447,0,466],
[438,420,450,431,440,439,429,428,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,442,451,467,455,474,450,453,460],
[433,0,440,442,468,431,460,457,470,446],
[448,450,0,427,477,464,461,439,448,467],
[439,448,463,0,474,450,453,467,466,450],
[423,422,413,416,0,428,443,430,463,439],
[435,459,426,440,462,0,474,444,459,452],
[416,430,429,437,447,416,0,447,450,456],
[440,433,451,423,460,446,443,0,451,422],
[437,420,442,424,427,431,440,439,0,437],
[430,444,423,440,451,438,434,468,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,417,430,437,452,440,423,416,410],
[459,0,440,443,468,450,452,438,416,441],
[473,450,0,430,452,444,442,454,425,424],
[460,447,460,0,441,448,443,447,445,419],
[453,422,438,449,0,450,429,465,453,426],
[438,440,446,442,440,0,471,444,428,415],
[450,438,448,447,461,419,0,451,449,425],
[467,452,436,443,425,446,439,0,431,450],
[474,474,465,445,437,462,441,459,0,434],
[480,449,466,471,464,475,465,440,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,458,464,449,471,461,478,472,464],
[448,0,441,462,461,480,438,486,479,458],
[432,449,0,448,455,458,454,471,446,433],
[426,428,442,0,421,441,437,464,454,429],
[441,429,435,469,0,472,453,489,457,465],
[419,410,432,449,418,0,434,458,440,432],
[429,452,436,453,437,456,0,459,456,457],
[412,404,419,426,401,432,431,0,435,435],
[418,411,444,436,433,450,434,455,0,430],
[426,432,457,461,425,458,433,455,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,447,490,422,442,453,446,439,413],
[417,0,435,467,435,439,436,423,427,430],
[443,455,0,480,419,441,450,417,439,402],
[400,423,410,0,406,410,422,398,414,385],
[468,455,471,484,0,452,461,432,458,412],
[448,451,449,480,438,0,448,460,438,429],
[437,454,440,468,429,442,0,446,434,423],
[444,467,473,492,458,430,444,0,454,448],
[451,463,451,476,432,452,456,436,0,441],
[477,460,488,505,478,461,467,442,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,429,438,464,430,414,427,463,449],
[420,0,463,455,489,448,443,445,461,468],
[461,427,0,438,457,430,431,441,439,455],
[452,435,452,0,445,433,447,421,434,451],
[426,401,433,445,0,396,408,413,431,419],
[460,442,460,457,494,0,464,469,472,480],
[476,447,459,443,482,426,0,444,459,477],
[463,445,449,469,477,421,446,0,460,458],
[427,429,451,456,459,418,431,430,0,478],
[441,422,435,439,471,410,413,432,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,445,437,451,433,450,432,423,425],
[454,0,461,443,464,464,443,461,451,453],
[445,429,0,428,425,444,440,449,445,430],
[453,447,462,0,457,450,424,451,450,435],
[439,426,465,433,0,430,441,454,442,447],
[457,426,446,440,460,0,433,453,445,439],
[440,447,450,466,449,457,0,437,429,440],
[458,429,441,439,436,437,453,0,433,445],
[467,439,445,440,448,445,461,457,0,426],
[465,437,460,455,443,451,450,445,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,446,437,424,445,429,430,439,405],
[424,0,430,444,404,410,427,406,434,423],
[444,460,0,465,410,431,451,426,452,438],
[453,446,425,0,413,433,417,433,456,445],
[466,486,480,477,0,419,462,458,476,450],
[445,480,459,457,471,0,458,453,462,467],
[461,463,439,473,428,432,0,424,466,428],
[460,484,464,457,432,437,466,0,461,451],
[451,456,438,434,414,428,424,429,0,437],
[485,467,452,445,440,423,462,439,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,460,427,413,438,417,452,455,424],
[464,0,433,444,458,437,451,453,451,490],
[430,457,0,438,452,463,418,466,454,438],
[463,446,452,0,467,439,428,440,486,468],
[477,432,438,423,0,435,415,448,458,434],
[452,453,427,451,455,0,413,452,445,452],
[473,439,472,462,475,477,0,470,463,498],
[438,437,424,450,442,438,420,0,437,433],
[435,439,436,404,432,445,427,453,0,427],
[466,400,452,422,456,438,392,457,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,443,484,485,439,429,440,431,436],
[463,0,472,450,441,437,499,468,431,463],
[447,418,0,437,443,448,444,420,435,427],
[406,440,453,0,435,441,451,449,432,421],
[405,449,447,455,0,442,455,445,443,421],
[451,453,442,449,448,0,450,452,426,432],
[461,391,446,439,435,440,0,438,407,459],
[450,422,470,441,445,438,452,0,447,451],
[459,459,455,458,447,464,483,443,0,440],
[454,427,463,469,469,458,431,439,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,477,433,444,472,466,463,435,450],
[427,0,440,444,429,469,417,431,414,458],
[413,450,0,432,433,460,441,426,439,451],
[457,446,458,0,467,455,442,454,451,453],
[446,461,457,423,0,471,471,445,439,453],
[418,421,430,435,419,0,455,438,431,436],
[424,473,449,448,419,435,0,430,441,459],
[427,459,464,436,445,452,460,0,469,475],
[455,476,451,439,451,459,449,421,0,465],
[440,432,439,437,437,454,431,415,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,420,449,445,431,451,423,453,441],
[444,0,431,445,440,430,446,451,458,452],
[470,459,0,476,473,449,438,441,482,474],
[441,445,414,0,420,418,440,415,442,432],
[445,450,417,470,0,441,451,455,444,443],
[459,460,441,472,449,0,476,438,454,475],
[439,444,452,450,439,414,0,444,466,462],
[467,439,449,475,435,452,446,0,472,459],
[437,432,408,448,446,436,424,418,0,454],
[449,438,416,458,447,415,428,431,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,335,112,335,223,335,334,223,112,223],
[555,0,223,335,444,223,223,222,111,334],
[778,667,0,667,667,334,666,556,222,334],
[555,555,223,0,444,111,666,445,334,223],
[667,446,223,446,0,334,445,445,111,334],
[555,667,556,779,556,0,667,334,334,446],
[556,667,224,224,445,223,0,111,223,111],
[667,668,334,445,445,556,779,0,445,335],
[778,779,668,556,779,556,667,445,0,446],
[667,556,556,667,556,444,779,555,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,437,451,390,411,466,407,518,402],
[421,0,434,411,441,444,466,452,529,412],
[453,456,0,433,483,452,496,371,499,408],
[439,479,457,0,449,464,471,394,513,418],
[500,449,407,441,0,429,461,370,500,465],
[479,446,438,426,461,0,432,374,455,408],
[424,424,394,419,429,458,0,449,487,395],
[483,438,519,496,520,516,441,0,530,478],
[372,361,391,377,390,435,403,360,0,375],
[488,478,482,472,425,482,495,412,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,430,412,447,430,440,425,425,404],
[463,0,435,431,454,436,443,428,464,413],
[460,455,0,434,453,456,453,452,448,414],
[478,459,456,0,473,473,453,456,477,440],
[443,436,437,417,0,431,431,418,440,427],
[460,454,434,417,459,0,453,446,460,449],
[450,447,437,437,459,437,0,447,455,421],
[465,462,438,434,472,444,443,0,457,428],
[465,426,442,413,450,430,435,433,0,432],
[486,477,476,450,463,441,469,462,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,365,409,374,435,412,435,495,376],
[447,0,416,369,326,403,362,414,379,366],
[525,474,0,474,423,434,441,514,499,433],
[481,521,416,0,448,420,414,512,454,393],
[516,564,467,442,0,433,362,500,457,494],
[455,487,456,470,457,0,378,488,426,458],
[478,528,449,476,528,512,0,530,536,400],
[455,476,376,378,390,402,360,0,365,309],
[395,511,391,436,433,464,354,525,0,382],
[514,524,457,497,396,432,490,581,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,434,445,459,449,453,448,468,473],
[443,0,435,440,452,452,419,417,445,456],
[456,455,0,437,458,483,444,469,446,466],
[445,450,453,0,463,458,431,454,454,454],
[431,438,432,427,0,452,428,433,458,449],
[441,438,407,432,438,0,408,425,434,444],
[437,471,446,459,462,482,0,456,451,459],
[442,473,421,436,457,465,434,0,456,454],
[422,445,444,436,432,456,439,434,0,450],
[417,434,424,436,441,446,431,436,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,439,455,468,421,461,466,472,428],
[475,0,453,488,438,443,452,476,454,437],
[451,437,0,461,457,437,460,477,473,455],
[435,402,429,0,423,415,458,494,460,420],
[422,452,433,467,0,445,477,465,463,424],
[469,447,453,475,445,0,481,489,482,423],
[429,438,430,432,413,409,0,455,453,409],
[424,414,413,396,425,401,435,0,420,410],
[418,436,417,430,427,408,437,470,0,415],
[462,453,435,470,466,467,481,480,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,509,451,457,452,466,456,401,437],
[446,0,489,453,453,433,448,447,421,458],
[381,401,0,425,436,427,442,442,421,412],
[439,437,465,0,463,440,447,425,391,436],
[433,437,454,427,0,376,440,425,399,446],
[438,457,463,450,514,0,458,436,439,483],
[424,442,448,443,450,432,0,468,417,439],
[434,443,448,465,465,454,422,0,457,466],
[489,469,469,499,491,451,473,433,0,460],
[453,432,478,454,444,407,451,424,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,457,423,455,480,477,441,446,428],
[458,0,454,458,462,461,479,450,438,436],
[433,436,0,437,435,409,447,444,406,397],
[467,432,453,0,441,477,450,460,433,412],
[435,428,455,449,0,460,465,429,467,450],
[410,429,481,413,430,0,480,455,464,430],
[413,411,443,440,425,410,0,420,419,401],
[449,440,446,430,461,435,470,0,428,422],
[444,452,484,457,423,426,471,462,0,422],
[462,454,493,478,440,460,489,468,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,447,439,447,461,465,453,459,459],
[432,0,447,446,428,398,436,431,431,433],
[443,443,0,435,418,445,451,448,445,456],
[451,444,455,0,449,458,425,431,453,451],
[443,462,472,441,0,458,433,437,470,447],
[429,492,445,432,432,0,472,444,448,438],
[425,454,439,465,457,418,0,419,435,452],
[437,459,442,459,453,446,471,0,444,456],
[431,459,445,437,420,442,455,446,0,439],
[431,457,434,439,443,452,438,434,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,456,491,491,450,491,418,500,474],
[420,0,452,437,462,454,505,455,479,490],
[434,438,0,411,437,471,432,439,477,434],
[399,453,479,0,444,453,483,457,524,464],
[399,428,453,446,0,452,452,411,465,444],
[440,436,419,437,438,0,433,438,465,422],
[399,385,458,407,438,457,0,399,461,440],
[472,435,451,433,479,452,491,0,474,475],
[390,411,413,366,425,425,429,416,0,418],
[416,400,456,426,446,468,450,415,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,490,367,461,460,491,492,462,368],
[369,0,556,404,434,524,521,557,433,521],
[400,334,0,368,465,430,432,431,369,427],
[523,486,522,0,518,489,583,493,429,517],
[429,456,425,372,0,489,519,461,337,457],
[430,366,460,401,401,0,522,464,401,491],
[399,369,458,307,371,368,0,433,434,365],
[398,333,459,397,429,426,457,0,339,335],
[428,457,521,461,553,489,456,551,0,548],
[522,369,463,373,433,399,525,555,342,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,447,383,453,473,406,416,478,508],
[468,0,457,433,478,420,509,436,459,454],
[443,433,0,478,496,467,445,461,474,470],
[507,457,412,0,487,472,465,397,462,479],
[437,412,394,403,0,468,420,434,438,447],
[417,470,423,418,422,0,404,388,433,418],
[484,381,445,425,470,486,0,417,465,455],
[474,454,429,493,456,502,473,0,456,455],
[412,431,416,428,452,457,425,434,0,468],
[382,436,420,411,443,472,435,435,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,485,455,461,443,443,435,489,442],
[402,0,444,448,444,436,434,436,490,418],
[405,446,0,453,429,441,437,457,455,422],
[435,442,437,0,437,460,437,453,482,439],
[429,446,461,453,0,418,425,427,461,401],
[447,454,449,430,472,0,470,419,476,464],
[447,456,453,453,465,420,0,453,479,440],
[455,454,433,437,463,471,437,0,440,451],
[401,400,435,408,429,414,411,450,0,402],
[448,472,468,451,489,426,450,439,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,482,429,439,494,427,407,445,475],
[419,0,454,402,470,457,464,477,442,501],
[408,436,0,401,488,474,466,449,402,517],
[461,488,489,0,504,525,458,424,481,500],
[451,420,402,386,0,504,455,453,440,483],
[396,433,416,365,386,0,421,406,397,476],
[463,426,424,432,435,469,0,432,410,525],
[483,413,441,466,437,484,458,0,514,425],
[445,448,488,409,450,493,480,376,0,501],
[415,389,373,390,407,414,365,465,389,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,447,439,441,446,456,418,467,444],
[438,0,431,443,456,440,442,447,462,441],
[443,459,0,465,443,449,448,445,479,451],
[451,447,425,0,440,431,439,433,455,427],
[449,434,447,450,0,447,441,432,473,442],
[444,450,441,459,443,0,449,437,461,431],
[434,448,442,451,449,441,0,432,454,448],
[472,443,445,457,458,453,458,0,463,478],
[423,428,411,435,417,429,436,427,0,446],
[446,449,439,463,448,459,442,412,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,426,450,471,443,440,438,443,454],
[451,0,435,454,462,447,451,461,443,438],
[464,455,0,460,438,451,465,455,461,441],
[440,436,430,0,456,441,444,444,440,444],
[419,428,452,434,0,427,434,436,433,429],
[447,443,439,449,463,0,458,446,445,443],
[450,439,425,446,456,432,0,451,448,418],
[452,429,435,446,454,444,439,0,450,420],
[447,447,429,450,457,445,442,440,0,447],
[436,452,449,446,461,447,472,470,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,478,467,445,458,452,451,435,455],
[459,0,475,467,470,463,430,454,437,451],
[412,415,0,408,439,452,432,405,410,439],
[423,423,482,0,440,454,424,437,451,438],
[445,420,451,450,0,472,433,422,417,424],
[432,427,438,436,418,0,418,440,429,407],
[438,460,458,466,457,472,0,444,447,438],
[439,436,485,453,468,450,446,0,446,466],
[455,453,480,439,473,461,443,444,0,450],
[435,439,451,452,466,483,452,424,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,529,449,416,337,612,446,474,528,473],
[361,0,416,392,275,583,500,388,473,447],
[441,474,0,418,361,526,389,388,413,360],
[474,498,472,0,360,664,528,446,496,471],
[553,615,529,530,0,638,531,473,554,388],
[278,307,364,226,252,0,303,249,333,305],
[444,390,501,362,359,587,0,444,444,330],
[416,502,502,444,417,641,446,0,499,361],
[362,417,477,394,336,557,446,391,0,335],
[417,443,530,419,502,585,560,529,555,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,437,458,470,445,443,433,437,453],
[440,0,428,446,453,446,457,446,427,419],
[453,462,0,470,461,437,452,453,453,433],
[432,444,420,0,460,430,450,437,428,421],
[420,437,429,430,0,433,442,432,443,430],
[445,444,453,460,457,0,428,409,449,430],
[447,433,438,440,448,462,0,441,450,434],
[457,444,437,453,458,481,449,0,444,452],
[453,463,437,462,447,441,440,446,0,445],
[437,471,457,469,460,460,456,438,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,445,454,436,450,449,434,455,409],
[457,0,432,437,414,442,458,441,432,454],
[445,458,0,455,443,446,406,436,481,427],
[436,453,435,0,407,450,425,459,452,439],
[454,476,447,483,0,471,453,455,490,419],
[440,448,444,440,419,0,435,438,436,430],
[441,432,484,465,437,455,0,444,478,443],
[456,449,454,431,435,452,446,0,463,455],
[435,458,409,438,400,454,412,427,0,430],
[481,436,463,451,471,460,447,435,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,456,442,454,452,463,440,430,469],
[459,0,432,443,452,443,439,460,469,456],
[434,458,0,466,432,447,450,456,452,484],
[448,447,424,0,466,440,463,434,444,446],
[436,438,458,424,0,418,444,455,449,459],
[438,447,443,450,472,0,436,439,434,448],
[427,451,440,427,446,454,0,422,418,464],
[450,430,434,456,435,451,468,0,448,457],
[460,421,438,446,441,456,472,442,0,458],
[421,434,406,444,431,442,426,433,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,437,437,459,443,459,454,460,484],
[433,0,439,452,447,446,460,430,460,449],
[453,451,0,440,428,445,449,445,454,473],
[453,438,450,0,432,445,450,448,455,461],
[431,443,462,458,0,455,501,448,449,470],
[447,444,445,445,435,0,476,448,462,468],
[431,430,441,440,389,414,0,444,469,445],
[436,460,445,442,442,442,446,0,445,462],
[430,430,436,435,441,428,421,445,0,441],
[406,441,417,429,420,422,445,428,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,482,434,452,460,443,481,469,432],
[441,0,461,410,434,430,453,443,496,455],
[408,429,0,461,454,429,421,428,475,436],
[456,480,429,0,479,435,453,440,467,447],
[438,456,436,411,0,432,437,457,449,391],
[430,460,461,455,458,0,515,474,494,441],
[447,437,469,437,453,375,0,452,442,416],
[409,447,462,450,433,416,438,0,461,400],
[421,394,415,423,441,396,448,429,0,386],
[458,435,454,443,499,449,474,490,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,502,459,513,511,441,468,436,445],
[395,0,419,393,427,392,356,344,422,344],
[388,471,0,469,439,388,461,466,425,406],
[431,497,421,0,462,412,467,414,453,449],
[377,463,451,428,0,413,434,471,460,413],
[379,498,502,478,477,0,437,411,457,406],
[449,534,429,423,456,453,0,387,465,412],
[422,546,424,476,419,479,503,0,482,436],
[454,468,465,437,430,433,425,408,0,400],
[445,546,484,441,477,484,478,454,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,533,473,352,533,474,534,532,474],
[416,0,355,356,295,353,413,354,357,413],
[357,535,0,533,413,533,531,593,593,591],
[417,534,357,0,474,591,651,532,532,536],
[538,595,477,416,0,595,653,537,653,597],
[357,537,357,299,295,0,535,596,593,420],
[416,477,359,239,237,355,0,359,415,418],
[356,536,297,358,353,294,531,0,475,297],
[358,533,297,358,237,297,475,415,0,358],
[416,477,299,354,293,470,472,593,532,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,456,425,429,492,414,432,422,441],
[463,0,507,458,445,464,478,442,447,420],
[434,383,0,413,425,448,404,443,392,404],
[465,432,477,0,448,463,432,452,447,455],
[461,445,465,442,0,450,442,467,449,434],
[398,426,442,427,440,0,409,429,389,394],
[476,412,486,458,448,481,0,509,470,424],
[458,448,447,438,423,461,381,0,413,401],
[468,443,498,443,441,501,420,477,0,432],
[449,470,486,435,456,496,466,489,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,442,472,462,465,476,483,469,475],
[434,0,426,434,451,438,452,449,442,441],
[448,464,0,450,445,442,454,458,434,447],
[418,456,440,0,447,431,437,459,447,453],
[428,439,445,443,0,438,445,462,423,449],
[425,452,448,459,452,0,434,468,456,443],
[414,438,436,453,445,456,0,459,419,416],
[407,441,432,431,428,422,431,0,443,426],
[421,448,456,443,467,434,471,447,0,429],
[415,449,443,437,441,447,474,464,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,501,410,478,454,468,457,459,488],
[411,0,484,429,431,449,436,472,439,458],
[389,406,0,406,416,431,440,423,435,432],
[480,461,484,0,463,447,443,470,471,475],
[412,459,474,427,0,440,463,466,454,445],
[436,441,459,443,450,0,431,451,436,452],
[422,454,450,447,427,459,0,442,449,443],
[433,418,467,420,424,439,448,0,423,439],
[431,451,455,419,436,454,441,467,0,459],
[402,432,458,415,445,438,447,451,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,447,435,448,457,438,423,410,437],
[431,0,488,436,471,450,434,434,433,429],
[443,402,0,449,438,430,402,394,421,408],
[455,454,441,0,470,466,436,448,453,425],
[442,419,452,420,0,443,397,421,417,407],
[433,440,460,424,447,0,443,437,399,435],
[452,456,488,454,493,447,0,444,449,444],
[467,456,496,442,469,453,446,0,435,445],
[480,457,469,437,473,491,441,455,0,450],
[453,461,482,465,483,455,446,445,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,425,403,439,408,422,427,438,397],
[501,0,449,433,466,443,446,437,471,424],
[465,441,0,434,431,402,476,393,456,386],
[487,457,456,0,469,416,509,428,486,464],
[451,424,459,421,0,398,464,423,459,425],
[482,447,488,474,492,0,486,416,482,449],
[468,444,414,381,426,404,0,409,430,386],
[463,453,497,462,467,474,481,0,485,431],
[452,419,434,404,431,408,460,405,0,416],
[493,466,504,426,465,441,504,459,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,410,395,417,407,437,406,414,424],
[453,0,435,440,434,434,418,451,397,429],
[480,455,0,466,441,422,438,450,418,455],
[495,450,424,0,433,440,418,472,443,424],
[473,456,449,457,0,462,459,474,432,440],
[483,456,468,450,428,0,479,459,457,470],
[453,472,452,472,431,411,0,458,419,442],
[484,439,440,418,416,431,432,0,402,454],
[476,493,472,447,458,433,471,488,0,449],
[466,461,435,466,450,420,448,436,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,445,452,471,443,438,430,438,449],
[461,0,462,471,459,478,459,440,466,444],
[445,428,0,461,456,487,456,467,449,446],
[438,419,429,0,462,414,435,427,438,415],
[419,431,434,428,0,447,426,448,439,437],
[447,412,403,476,443,0,431,426,444,432],
[452,431,434,455,464,459,0,445,446,475],
[460,450,423,463,442,464,445,0,457,446],
[452,424,441,452,451,446,444,433,0,436],
[441,446,444,475,453,458,415,444,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,391,387,373,418,431,399,388,439],
[487,0,418,422,472,505,488,467,445,471],
[499,472,0,412,484,503,460,486,457,506],
[503,468,478,0,434,468,478,495,466,477],
[517,418,406,456,0,472,460,453,435,470],
[472,385,387,422,418,0,432,438,392,443],
[459,402,430,412,430,458,0,460,424,472],
[491,423,404,395,437,452,430,0,433,466],
[502,445,433,424,455,498,466,457,0,468],
[451,419,384,413,420,447,418,424,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,403,462,458,472,441,445,464,439],
[471,0,466,522,451,442,448,490,452,501],
[487,424,0,463,457,472,417,486,461,482],
[428,368,427,0,428,463,389,439,413,422],
[432,439,433,462,0,455,442,438,460,407],
[418,448,418,427,435,0,470,445,451,420],
[449,442,473,501,448,420,0,482,461,470],
[445,400,404,451,452,445,408,0,444,395],
[426,438,429,477,430,439,429,446,0,451],
[451,389,408,468,483,470,420,495,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,452,433,457,428,457,431,434,462],
[466,0,450,434,456,444,447,464,484,462],
[438,440,0,414,459,447,443,460,458,490],
[457,456,476,0,445,451,459,435,473,492],
[433,434,431,445,0,438,436,466,456,469],
[462,446,443,439,452,0,430,433,502,455],
[433,443,447,431,454,460,0,459,461,483],
[459,426,430,455,424,457,431,0,462,455],
[456,406,432,417,434,388,429,428,0,451],
[428,428,400,398,421,435,407,435,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,438,441,413,447,464,363,406,427],
[475,0,473,451,401,486,450,466,430,470],
[452,417,0,473,433,487,410,457,412,441],
[449,439,417,0,457,477,457,431,429,425],
[477,489,457,433,0,485,450,460,455,446],
[443,404,403,413,405,0,435,433,419,476],
[426,440,480,433,440,455,0,427,489,431],
[527,424,433,459,430,457,463,0,486,468],
[484,460,478,461,435,471,401,404,0,436],
[463,420,449,465,444,414,459,422,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,355,380,352,403,398,471,428,380,448],
[535,0,426,385,451,414,517,457,367,507],
[510,464,0,377,474,511,500,550,523,550],
[538,505,513,0,453,513,556,517,441,529],
[487,439,416,437,0,439,451,490,442,474],
[492,476,379,377,451,0,509,499,488,537],
[419,373,390,334,439,381,0,451,403,415],
[462,433,340,373,400,391,439,0,344,430],
[510,523,367,449,448,402,487,546,0,488],
[442,383,340,361,416,353,475,460,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,484,467,435,434,441,423,452,483],
[448,0,482,459,454,463,440,436,440,498],
[406,408,0,438,427,440,403,397,432,466],
[423,431,452,0,401,420,435,410,429,443],
[455,436,463,489,0,457,437,433,430,486],
[456,427,450,470,433,0,440,434,434,487],
[449,450,487,455,453,450,0,446,437,484],
[467,454,493,480,457,456,444,0,467,492],
[438,450,458,461,460,456,453,423,0,504],
[407,392,424,447,404,403,406,398,386,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,443,438,453,447,429,449,434,436],
[452,0,433,470,468,401,425,418,440,456],
[447,457,0,475,474,469,438,450,436,459],
[452,420,415,0,472,434,445,446,448,445],
[437,422,416,418,0,424,446,424,429,419],
[443,489,421,456,466,0,464,449,468,484],
[461,465,452,445,444,426,0,477,478,432],
[441,472,440,444,466,441,413,0,434,408],
[456,450,454,442,461,422,412,456,0,425],
[454,434,431,445,471,406,458,482,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,450,434,461,445,487,452,492,457],
[433,0,457,458,441,463,455,438,466,455],
[440,433,0,436,439,472,483,452,467,440],
[456,432,454,0,451,447,459,439,447,440],
[429,449,451,439,0,445,457,449,447,473],
[445,427,418,443,445,0,476,432,439,437],
[403,435,407,431,433,414,0,404,433,448],
[438,452,438,451,441,458,486,0,446,470],
[398,424,423,443,443,451,457,444,0,448],
[433,435,450,450,417,453,442,420,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,453,482,419,471,458,423,450,428],
[464,0,467,522,446,477,487,438,462,453],
[437,423,0,468,448,456,467,434,451,456],
[408,368,422,0,391,431,422,396,429,404],
[471,444,442,499,0,475,465,454,474,472],
[419,413,434,459,415,0,434,393,419,433],
[432,403,423,468,425,456,0,408,432,430],
[467,452,456,494,436,497,482,0,479,439],
[440,428,439,461,416,471,458,411,0,413],
[462,437,434,486,418,457,460,451,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,402,434,420,419,429,449,413,425],
[480,0,469,492,459,455,453,501,442,461],
[488,421,0,434,453,439,453,460,437,440],
[456,398,456,0,447,423,445,447,425,448],
[470,431,437,443,0,421,450,459,432,451],
[471,435,451,467,469,0,443,485,446,474],
[461,437,437,445,440,447,0,460,433,458],
[441,389,430,443,431,405,430,0,430,427],
[477,448,453,465,458,444,457,460,0,446],
[465,429,450,442,439,416,432,463,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,435,432,455,473,429,436,434,450],
[455,0,442,435,459,463,445,438,454,457],
[455,448,0,427,468,437,449,433,441,453],
[458,455,463,0,465,472,448,439,456,458],
[435,431,422,425,0,429,429,413,434,447],
[417,427,453,418,461,0,434,433,447,443],
[461,445,441,442,461,456,0,441,470,447],
[454,452,457,451,477,457,449,0,441,444],
[456,436,449,434,456,443,420,449,0,446],
[440,433,437,432,443,447,443,446,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,437,445,427,437,439,434,435,451],
[466,0,453,447,448,458,438,435,468,454],
[453,437,0,418,442,456,455,456,459,432],
[445,443,472,0,462,428,434,440,450,465],
[463,442,448,428,0,441,478,432,458,464],
[453,432,434,462,449,0,441,438,462,425],
[451,452,435,456,412,449,0,437,430,426],
[456,455,434,450,458,452,453,0,457,424],
[455,422,431,440,432,428,460,433,0,424],
[439,436,458,425,426,465,464,466,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,420,446,465,416,481,463,424,432],
[445,0,468,468,496,431,454,448,434,444],
[470,422,0,452,460,391,466,460,464,435],
[444,422,438,0,486,445,455,454,443,451],
[425,394,430,404,0,417,408,427,395,428],
[474,459,499,445,473,0,505,473,455,442],
[409,436,424,435,482,385,0,422,431,420],
[427,442,430,436,463,417,468,0,417,421],
[466,456,426,447,495,435,459,473,0,452],
[458,446,455,439,462,448,470,469,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,486,427,399,463,383,364,415,432],
[463,0,434,429,404,456,427,440,432,419],
[404,456,0,410,402,424,468,400,455,475],
[463,461,480,0,447,523,487,475,475,428],
[491,486,488,443,0,520,477,401,482,423],
[427,434,466,367,370,0,377,349,467,436],
[507,463,422,403,413,513,0,446,476,444],
[526,450,490,415,489,541,444,0,515,423],
[475,458,435,415,408,423,414,375,0,462],
[458,471,415,462,467,454,446,467,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,457,439,454,480,439,449,448,446],
[446,0,456,445,468,480,450,439,450,474],
[433,434,0,437,464,466,418,427,447,436],
[451,445,453,0,485,459,456,456,435,455],
[436,422,426,405,0,440,432,419,417,422],
[410,410,424,431,450,0,437,448,445,431],
[451,440,472,434,458,453,0,446,436,441],
[441,451,463,434,471,442,444,0,459,439],
[442,440,443,455,473,445,454,431,0,430],
[444,416,454,435,468,459,449,451,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,487,469,477,439,480,439,442,481],
[419,0,450,449,467,408,456,432,431,460],
[403,440,0,452,450,424,424,431,431,442],
[421,441,438,0,457,428,461,415,443,448],
[413,423,440,433,0,414,445,425,440,483],
[451,482,466,462,476,0,468,458,440,483],
[410,434,466,429,445,422,0,418,451,449],
[451,458,459,475,465,432,472,0,445,475],
[448,459,459,447,450,450,439,445,0,476],
[409,430,448,442,407,407,441,415,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,445,448,461,476,445,453,476,443],
[445,0,430,449,453,486,480,454,451,473],
[445,460,0,433,437,481,447,444,442,437],
[442,441,457,0,442,478,462,476,431,460],
[429,437,453,448,0,479,443,434,452,444],
[414,404,409,412,411,0,425,437,426,450],
[445,410,443,428,447,465,0,441,428,445],
[437,436,446,414,456,453,449,0,456,436],
[414,439,448,459,438,464,462,434,0,430],
[447,417,453,430,446,440,445,454,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,461,434,462,447,467,464,486,465],
[420,0,439,428,432,420,432,449,420,412],
[429,451,0,448,453,422,436,466,450,438],
[456,462,442,0,440,432,462,445,457,447],
[428,458,437,450,0,407,462,434,428,409],
[443,470,468,458,483,0,456,468,477,447],
[423,458,454,428,428,434,0,455,440,425],
[426,441,424,445,456,422,435,0,469,442],
[404,470,440,433,462,413,450,421,0,419],
[425,478,452,443,481,443,465,448,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,442,450,457,458,439,443,462,441],
[431,0,438,448,443,429,418,434,444,440],
[448,452,0,433,464,438,450,459,451,472],
[440,442,457,0,446,421,413,449,455,476],
[433,447,426,444,0,416,414,449,444,426],
[432,461,452,469,474,0,463,444,460,472],
[451,472,440,477,476,427,0,474,462,441],
[447,456,431,441,441,446,416,0,444,432],
[428,446,439,435,446,430,428,446,0,431],
[449,450,418,414,464,418,449,458,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,466,442,453,419,446,472,427,458],
[450,0,446,485,477,453,421,446,458,429],
[424,444,0,469,468,426,420,448,454,426],
[448,405,421,0,414,449,396,439,433,428],
[437,413,422,476,0,445,434,459,435,429],
[471,437,464,441,445,0,419,453,443,440],
[444,469,470,494,456,471,0,461,473,447],
[418,444,442,451,431,437,429,0,454,429],
[463,432,436,457,455,447,417,436,0,424],
[432,461,464,462,461,450,443,461,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,470,445,438,443,446,443,468,435],
[451,0,448,487,431,466,464,446,489,480],
[420,442,0,450,434,437,449,434,452,461],
[445,403,440,0,422,436,441,424,467,450],
[452,459,456,468,0,440,474,439,453,443],
[447,424,453,454,450,0,445,422,479,440],
[444,426,441,449,416,445,0,431,445,439],
[447,444,456,466,451,468,459,0,460,474],
[422,401,438,423,437,411,445,430,0,434],
[455,410,429,440,447,450,451,416,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,427,430,446,443,428,445,417,479],
[472,0,457,450,472,470,478,444,444,479],
[463,433,0,458,449,456,452,433,455,467],
[460,440,432,0,432,447,439,430,437,456],
[444,418,441,458,0,450,452,444,436,477],
[447,420,434,443,440,0,445,414,417,469],
[462,412,438,451,438,445,0,430,436,464],
[445,446,457,460,446,476,460,0,439,469],
[473,446,435,453,454,473,454,451,0,474],
[411,411,423,434,413,421,426,421,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,455,457,442,466,473,419,463,453],
[457,0,452,432,470,482,477,449,481,437],
[435,438,0,449,430,436,460,431,450,460],
[433,458,441,0,420,458,453,406,457,459],
[448,420,460,470,0,463,458,467,467,444],
[424,408,454,432,427,0,445,428,456,426],
[417,413,430,437,432,445,0,374,447,430],
[471,441,459,484,423,462,516,0,492,487],
[427,409,440,433,423,434,443,398,0,426],
[437,453,430,431,446,464,460,403,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,467,416,471,447,435,441,487,482],
[380,0,400,392,419,418,407,387,422,431],
[423,490,0,398,471,436,433,444,473,455],
[474,498,492,0,491,468,445,458,442,446],
[419,471,419,399,0,411,424,413,420,397],
[443,472,454,422,479,0,438,451,460,447],
[455,483,457,445,466,452,0,468,434,442],
[449,503,446,432,477,439,422,0,453,460],
[403,468,417,448,470,430,456,437,0,456],
[408,459,435,444,493,443,448,430,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,466,465,445,458,403,419,427,461],
[440,0,468,427,453,443,443,415,398,420],
[424,422,0,429,454,441,414,425,432,431],
[425,463,461,0,443,429,431,409,421,448],
[445,437,436,447,0,469,431,433,440,464],
[432,447,449,461,421,0,425,420,429,455],
[487,447,476,459,459,465,0,445,454,461],
[471,475,465,481,457,470,445,0,454,453],
[463,492,458,469,450,461,436,436,0,454],
[429,470,459,442,426,435,429,437,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,449,348,646,444,348,546,395,495],
[396,0,497,448,445,542,447,447,495,446],
[441,393,0,395,343,591,392,491,441,443],
[542,442,495,0,496,592,394,492,492,447],
[244,445,547,394,0,542,392,346,346,544],
[446,348,299,298,348,0,346,397,348,397],
[542,443,498,496,498,544,0,445,493,447],
[344,443,399,398,544,493,445,0,395,494],
[495,395,449,398,544,542,397,495,0,544],
[395,444,447,443,346,493,443,396,346,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,349,560,517,440,371,456,392,421,434],
[541,0,581,475,561,498,520,393,441,519],
[330,309,0,472,372,310,413,352,457,370],
[373,415,418,0,459,438,455,370,440,504],
[450,329,518,431,0,332,413,346,415,476],
[519,392,580,452,558,0,475,434,500,517],
[434,370,477,435,477,415,0,455,462,478],
[498,497,538,520,544,456,435,0,480,481],
[469,449,433,450,475,390,428,410,0,431],
[456,371,520,386,414,373,412,409,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,419,410,452,391,417,415,429,407],
[471,0,451,453,461,483,432,435,429,453],
[471,439,0,444,466,454,440,444,442,422],
[480,437,446,0,469,440,419,456,443,444],
[438,429,424,421,0,417,388,416,433,441],
[499,407,436,450,473,0,454,425,457,435],
[473,458,450,471,502,436,0,423,442,455],
[475,455,446,434,474,465,467,0,441,462],
[461,461,448,447,457,433,448,449,0,451],
[483,437,468,446,449,455,435,428,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,382,444,428,422,396,430,434,428],
[461,0,435,413,448,437,431,470,424,433],
[508,455,0,471,471,440,466,480,455,447],
[446,477,419,0,453,430,440,470,413,397],
[462,442,419,437,0,433,414,393,368,409],
[468,453,450,460,457,0,447,437,391,428],
[494,459,424,450,476,443,0,446,409,441],
[460,420,410,420,497,453,444,0,449,453],
[456,466,435,477,522,499,481,441,0,467],
[462,457,443,493,481,462,449,437,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,512,420,565,432,369,408,410,420],
[445,0,432,498,447,471,417,488,481,447],
[378,458,0,397,423,434,336,387,398,425],
[470,392,493,0,487,421,487,382,438,457],
[325,443,467,403,0,353,465,432,383,403],
[458,419,456,469,537,0,459,476,524,437],
[521,473,554,403,425,431,0,508,525,472],
[482,402,503,508,458,414,382,0,532,461],
[480,409,492,452,507,366,365,358,0,435],
[470,443,465,433,487,453,418,429,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,436,453,424,448,462,438,459,445],
[448,0,415,439,454,457,447,440,461,444],
[454,475,0,438,449,457,453,471,494,460],
[437,451,452,0,430,450,449,447,466,467],
[466,436,441,460,0,451,464,446,441,434],
[442,433,433,440,439,0,444,427,444,438],
[428,443,437,441,426,446,0,413,446,450],
[452,450,419,443,444,463,477,0,469,441],
[431,429,396,424,449,446,444,421,0,450],
[445,446,430,423,456,452,440,449,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,436,461,434,418,445,444,431,448],
[469,0,469,457,499,446,453,460,438,449],
[454,421,0,452,444,463,460,461,445,458],
[429,433,438,0,437,397,443,426,384,408],
[456,391,446,453,0,452,433,437,387,426],
[472,444,427,493,438,0,454,450,454,436],
[445,437,430,447,457,436,0,399,448,448],
[446,430,429,464,453,440,491,0,431,448],
[459,452,445,506,503,436,442,459,0,448],
[442,441,432,482,464,454,442,442,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,428,477,448,462,418,472,420,440],
[453,0,441,496,449,470,438,487,428,454],
[462,449,0,496,478,464,425,469,437,462],
[413,394,394,0,414,418,365,432,388,400],
[442,441,412,476,0,450,419,476,431,431],
[428,420,426,472,440,0,420,455,427,405],
[472,452,465,525,471,470,0,485,453,445],
[418,403,421,458,414,435,405,0,417,409],
[470,462,453,502,459,463,437,473,0,457],
[450,436,428,490,459,485,445,481,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,434,447,434,431,447,452,426,442],
[436,0,444,454,466,465,441,470,454,455],
[456,446,0,465,459,475,473,441,434,459],
[443,436,425,0,446,455,451,440,436,452],
[456,424,431,444,0,433,436,440,435,444],
[459,425,415,435,457,0,475,455,417,466],
[443,449,417,439,454,415,0,458,426,439],
[438,420,449,450,450,435,432,0,476,448],
[464,436,456,454,455,473,464,414,0,488],
[448,435,431,438,446,424,451,442,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,427,435,430,447,440,466,446,415],
[454,0,451,451,464,444,454,471,447,453],
[463,439,0,446,443,430,451,472,442,428],
[455,439,444,0,451,447,456,466,458,452],
[460,426,447,439,0,456,422,438,441,444],
[443,446,460,443,434,0,449,469,446,428],
[450,436,439,434,468,441,0,460,450,412],
[424,419,418,424,452,421,430,0,425,410],
[444,443,448,432,449,444,440,465,0,429],
[475,437,462,438,446,462,478,480,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,469,455,419,470,463,433,432,465],
[430,0,451,430,425,438,423,416,423,454],
[421,439,0,435,397,435,416,426,427,445],
[435,460,455,0,441,455,437,445,438,473],
[471,465,493,449,0,465,444,444,459,488],
[420,452,455,435,425,0,437,438,428,453],
[427,467,474,453,446,453,0,423,449,471],
[457,474,464,445,446,452,467,0,440,468],
[458,467,463,452,431,462,441,450,0,475],
[425,436,445,417,402,437,419,422,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,424,414,407,394,391,381,404,410],
[460,0,427,429,394,425,404,456,436,440],
[466,463,0,484,460,429,410,430,441,436],
[476,461,406,0,434,428,399,387,433,459],
[483,496,430,456,0,456,459,413,457,487],
[496,465,461,462,434,0,425,430,436,478],
[499,486,480,491,431,465,0,403,455,469],
[509,434,460,503,477,460,487,0,495,481],
[486,454,449,457,433,454,435,395,0,449],
[480,450,454,431,403,412,421,409,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,430,456,438,435,478,438,442,468],
[428,0,416,440,430,452,434,427,436,474],
[460,474,0,437,452,477,466,438,478,486],
[434,450,453,0,449,474,435,448,469,475],
[452,460,438,441,0,465,459,444,465,466],
[455,438,413,416,425,0,448,454,432,476],
[412,456,424,455,431,442,0,428,436,468],
[452,463,452,442,446,436,462,0,454,488],
[448,454,412,421,425,458,454,436,0,460],
[422,416,404,415,424,414,422,402,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,380,442,422,470,400,447,426,370],
[472,0,348,406,423,454,395,433,418,381],
[510,542,0,497,446,507,445,476,469,443],
[448,484,393,0,423,469,419,407,435,377],
[468,467,444,467,0,480,432,411,470,444],
[420,436,383,421,410,0,385,389,394,396],
[490,495,445,471,458,505,0,443,453,446],
[443,457,414,483,479,501,447,0,454,431],
[464,472,421,455,420,496,437,436,0,429],
[520,509,447,513,446,494,444,459,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,420,426,424,449,441,401,416,423],
[459,0,430,463,433,438,439,433,440,442],
[470,460,0,443,453,448,428,428,450,449],
[464,427,447,0,436,448,446,423,436,448],
[466,457,437,454,0,443,439,442,456,449],
[441,452,442,442,447,0,454,449,435,455],
[449,451,462,444,451,436,0,427,428,452],
[489,457,462,467,448,441,463,0,454,448],
[474,450,440,454,434,455,462,436,0,435],
[467,448,441,442,441,435,438,442,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,420,462,423,451,453,442,435,423],
[453,0,441,458,458,455,486,436,454,448],
[470,449,0,457,463,457,464,468,458,439],
[428,432,433,0,428,433,462,426,433,433],
[467,432,427,462,0,469,485,446,459,441],
[439,435,433,457,421,0,450,456,446,436],
[437,404,426,428,405,440,0,427,423,413],
[448,454,422,464,444,434,463,0,445,437],
[455,436,432,457,431,444,467,445,0,423],
[467,442,451,457,449,454,477,453,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,454,475,468,464,468,461,469,441],
[437,0,433,468,454,450,461,460,434,427],
[436,457,0,477,469,461,484,464,468,449],
[415,422,413,0,458,424,437,429,428,426],
[422,436,421,432,0,422,469,447,434,428],
[426,440,429,466,468,0,447,472,463,431],
[422,429,406,453,421,443,0,442,433,409],
[429,430,426,461,443,418,448,0,434,430],
[421,456,422,462,456,427,457,456,0,446],
[449,463,441,464,462,459,481,460,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,432,470,414,412,463,442,441,452],
[429,0,451,411,405,434,462,445,439,442],
[458,439,0,450,474,457,488,463,466,466],
[420,479,440,0,441,443,427,434,437,426],
[476,485,416,449,0,452,468,499,495,494],
[478,456,433,447,438,0,475,459,464,435],
[427,428,402,463,422,415,0,441,442,423],
[448,445,427,456,391,431,449,0,462,421],
[449,451,424,453,395,426,448,428,0,387],
[438,448,424,464,396,455,467,469,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,471,446,465,443,486,498,476,465],
[459,0,473,462,405,471,445,472,427,446],
[419,417,0,432,381,404,441,445,409,406],
[444,428,458,0,435,445,423,451,429,404],
[425,485,509,455,0,466,487,481,475,487],
[447,419,486,445,424,0,445,477,446,435],
[404,445,449,467,403,445,0,421,427,404],
[392,418,445,439,409,413,469,0,411,414],
[414,463,481,461,415,444,463,479,0,457],
[425,444,484,486,403,455,486,476,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,448,426,442,453,432,451,456,473],
[443,0,450,416,434,461,444,448,437,468],
[442,440,0,466,453,464,432,458,454,470],
[464,474,424,0,448,469,451,420,422,468],
[448,456,437,442,0,451,442,439,439,478],
[437,429,426,421,439,0,425,419,413,449],
[458,446,458,439,448,465,0,455,471,466],
[439,442,432,470,451,471,435,0,449,476],
[434,453,436,468,451,477,419,441,0,481],
[417,422,420,422,412,441,424,414,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,451,449,462,472,431,405,463,438],
[436,0,400,422,424,434,426,421,446,410],
[439,490,0,461,426,458,464,465,483,446],
[441,468,429,0,452,463,452,426,458,453],
[428,466,464,438,0,445,443,446,454,424],
[418,456,432,427,445,0,437,421,454,439],
[459,464,426,438,447,453,0,440,473,413],
[485,469,425,464,444,469,450,0,462,450],
[427,444,407,432,436,436,417,428,0,418],
[452,480,444,437,466,451,477,440,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,463,421,471,465,448,473,457,462],
[421,0,424,438,440,453,430,465,432,444],
[427,466,0,410,438,466,393,467,420,455],
[469,452,480,0,529,484,456,556,412,461],
[419,450,452,361,0,421,403,405,384,408],
[425,437,424,406,469,0,387,434,372,411],
[442,460,497,434,487,503,0,491,420,450],
[417,425,423,334,485,456,399,0,411,390],
[433,458,470,478,506,518,470,479,0,480],
[428,446,435,429,482,479,440,500,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,431,440,439,435,467,442,447,443],
[464,0,459,432,446,442,494,443,455,468],
[459,431,0,421,457,429,461,474,455,467],
[450,458,469,0,441,440,471,467,473,457],
[451,444,433,449,0,439,463,440,463,451],
[455,448,461,450,451,0,462,470,458,442],
[423,396,429,419,427,428,0,407,446,430],
[448,447,416,423,450,420,483,0,450,445],
[443,435,435,417,427,432,444,440,0,435],
[447,422,423,433,439,448,460,445,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,397,390,439,422,412,409,455,452],
[478,0,464,439,476,446,455,464,457,514],
[493,426,0,472,491,473,451,448,481,501],
[500,451,418,0,479,430,423,449,477,490],
[451,414,399,411,0,432,429,408,436,464],
[468,444,417,460,458,0,435,426,468,489],
[478,435,439,467,461,455,0,439,461,474],
[481,426,442,441,482,464,451,0,469,496],
[435,433,409,413,454,422,429,421,0,474],
[438,376,389,400,426,401,416,394,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,453,421,473,494,463,431,423,448],
[452,0,461,461,456,479,476,449,420,465],
[437,429,0,476,459,504,454,445,455,509],
[469,429,414,0,437,476,470,440,422,465],
[417,434,431,453,0,501,463,424,455,455],
[396,411,386,414,389,0,431,381,392,425],
[427,414,436,420,427,459,0,412,432,439],
[459,441,445,450,466,509,478,0,468,526],
[467,470,435,468,435,498,458,422,0,470],
[442,425,381,425,435,465,451,364,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,494,471,407,400,493,432,397,472],
[437,0,462,382,400,379,506,420,379,427],
[396,428,0,322,395,369,411,384,326,385],
[419,508,568,0,429,452,501,421,457,493],
[483,490,495,461,0,447,520,443,414,454],
[490,511,521,438,443,0,480,490,444,481],
[397,384,479,389,370,410,0,377,308,438],
[458,470,506,469,447,400,513,0,388,485],
[493,511,564,433,476,446,582,502,0,532],
[418,463,505,397,436,409,452,405,358,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,465,450,439,393,437,404,493,444],
[444,0,402,445,411,423,420,400,412,459],
[425,488,0,460,450,463,443,445,464,491],
[440,445,430,0,473,455,429,435,416,446],
[451,479,440,417,0,427,410,441,485,449],
[497,467,427,435,463,0,462,443,485,492],
[453,470,447,461,480,428,0,452,443,495],
[486,490,445,455,449,447,438,0,488,483],
[397,478,426,474,405,405,447,402,0,489],
[446,431,399,444,441,398,395,407,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,444,443,471,440,449,424,444,418],
[443,0,464,451,472,453,452,434,473,424],
[446,426,0,424,451,441,423,410,434,421],
[447,439,466,0,470,434,455,451,451,443],
[419,418,439,420,0,422,441,427,468,408],
[450,437,449,456,468,0,442,439,458,409],
[441,438,467,435,449,448,0,446,463,443],
[466,456,480,439,463,451,444,0,482,465],
[446,417,456,439,422,432,427,408,0,428],
[472,466,469,447,482,481,447,425,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,431,419,440,466,426,421,399,437],
[471,0,442,454,485,473,460,450,443,436],
[459,448,0,436,471,485,444,444,446,443],
[471,436,454,0,450,492,438,393,436,402],
[450,405,419,440,0,484,440,431,410,482],
[424,417,405,398,406,0,411,420,419,411],
[464,430,446,452,450,479,0,450,451,481],
[469,440,446,497,459,470,440,0,428,486],
[491,447,444,454,480,471,439,462,0,463],
[453,454,447,488,408,479,409,404,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,454,443,389,422,403,440,403,429],
[450,0,451,445,427,410,430,454,418,420],
[436,439,0,439,397,412,406,471,436,419],
[447,445,451,0,412,419,431,478,445,444],
[501,463,493,478,0,453,476,490,460,445],
[468,480,478,471,437,0,442,483,438,456],
[487,460,484,459,414,448,0,485,470,459],
[450,436,419,412,400,407,405,0,392,402],
[487,472,454,445,430,452,420,498,0,461],
[461,470,471,446,445,434,431,488,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,428,424,435,461,440,430,446,469],
[456,0,434,446,436,460,414,423,468,483],
[462,456,0,446,453,456,443,458,463,495],
[466,444,444,0,438,492,462,469,459,468],
[455,454,437,452,0,470,454,424,447,446],
[429,430,434,398,420,0,424,425,447,452],
[450,476,447,428,436,466,0,433,481,477],
[460,467,432,421,466,465,457,0,468,464],
[444,422,427,431,443,443,409,422,0,449],
[421,407,395,422,444,438,413,426,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,427,426,427,452,440,442,432,457],
[435,0,423,424,438,457,453,436,421,420],
[463,467,0,449,446,472,438,453,452,462],
[464,466,441,0,435,462,441,437,455,444],
[463,452,444,455,0,470,448,456,442,439],
[438,433,418,428,420,0,432,417,422,430],
[450,437,452,449,442,458,0,453,426,451],
[448,454,437,453,434,473,437,0,433,446],
[458,469,438,435,448,468,464,457,0,447],
[433,470,428,446,451,460,439,444,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,415,455,423,398,407,408,417,434],
[474,0,462,469,476,450,431,446,448,434],
[475,428,0,480,446,464,418,424,442,451],
[435,421,410,0,432,412,399,408,441,415],
[467,414,444,458,0,433,423,419,420,460],
[492,440,426,478,457,0,442,429,431,478],
[483,459,472,491,467,448,0,442,468,448],
[482,444,466,482,471,461,448,0,446,495],
[473,442,448,449,470,459,422,444,0,474],
[456,456,439,475,430,412,442,395,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,486,561,394,323,488,398,277,351],
[424,0,420,442,323,256,422,471,300,307],
[404,470,0,466,517,308,421,307,283,375],
[329,448,424,0,350,325,465,376,278,350],
[496,567,373,540,0,424,470,451,375,377],
[567,634,582,565,466,0,636,475,395,491],
[402,468,469,425,420,254,0,403,303,304],
[492,419,583,514,439,415,487,0,424,305],
[613,590,607,612,515,495,587,466,0,398],
[539,583,515,540,513,399,586,585,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,440,459,488,450,469,414,456,464],
[426,0,423,442,466,419,468,403,458,455],
[450,467,0,463,495,434,447,448,473,470],
[431,448,427,0,464,438,419,419,456,470],
[402,424,395,426,0,427,426,413,431,433],
[440,471,456,452,463,0,440,439,457,468],
[421,422,443,471,464,450,0,422,453,466],
[476,487,442,471,477,451,468,0,469,462],
[434,432,417,434,459,433,437,421,0,453],
[426,435,420,420,457,422,424,428,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,438,461,441,465,447,453,470,439],
[436,0,427,453,421,451,443,445,444,428],
[452,463,0,477,449,488,438,475,449,457],
[429,437,413,0,440,456,437,454,438,443],
[449,469,441,450,0,461,433,463,443,439],
[425,439,402,434,429,0,420,437,431,448],
[443,447,452,453,457,470,0,460,465,452],
[437,445,415,436,427,453,430,0,431,443],
[420,446,441,452,447,459,425,459,0,435],
[451,462,433,447,451,442,438,447,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,449,443,449,416,440,439,416,431],
[455,0,432,449,432,420,421,445,428,433],
[441,458,0,468,430,424,412,446,454,456],
[447,441,422,0,460,424,443,432,436,440],
[441,458,460,430,0,421,443,435,443,417],
[474,470,466,466,469,0,473,457,445,437],
[450,469,478,447,447,417,0,428,445,445],
[451,445,444,458,455,433,462,0,439,450],
[474,462,436,454,447,445,445,451,0,449],
[459,457,434,450,473,453,445,440,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,469,481,462,466,460,443,453,466],
[419,0,460,449,442,416,436,413,446,424],
[421,430,0,460,439,431,434,411,459,436],
[409,441,430,0,461,431,430,415,446,430],
[428,448,451,429,0,444,475,435,450,446],
[424,474,459,459,446,0,456,445,465,455],
[430,454,456,460,415,434,0,403,438,410],
[447,477,479,475,455,445,487,0,471,473],
[437,444,431,444,440,425,452,419,0,419],
[424,466,454,460,444,435,480,417,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,423,402,453,435,440,462,464,397],
[463,0,474,432,469,466,450,445,481,447],
[467,416,0,395,420,443,411,437,434,429],
[488,458,495,0,442,514,465,469,493,437],
[437,421,470,448,0,462,455,456,482,444],
[455,424,447,376,428,0,458,414,437,417],
[450,440,479,425,435,432,0,433,458,427],
[428,445,453,421,434,476,457,0,449,434],
[426,409,456,397,408,453,432,441,0,424],
[493,443,461,453,446,473,463,456,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,483,428,466,537,526,408,513,456],
[387,0,414,403,428,480,428,403,475,440],
[407,476,0,454,469,434,492,417,485,452],
[462,487,436,0,481,494,509,449,427,474],
[424,462,421,409,0,476,437,375,416,465],
[353,410,456,396,414,0,463,411,452,437],
[364,462,398,381,453,427,0,428,421,453],
[482,487,473,441,515,479,462,0,470,510],
[377,415,405,463,474,438,469,420,0,442],
[434,450,438,416,425,453,437,380,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,391,421,435,482,410,440,447,406,404],
[499,0,450,478,508,462,492,492,417,462],
[469,440,0,460,511,434,487,440,429,454],
[455,412,430,0,489,404,469,443,393,402],
[408,382,379,401,0,381,428,409,365,424],
[480,428,456,486,509,0,528,479,453,505],
[450,398,403,421,462,362,0,418,399,419],
[443,398,450,447,481,411,472,0,407,421],
[484,473,461,497,525,437,491,483,0,448],
[486,428,436,488,466,385,471,469,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,436,479,409,422,468,495,495,401],
[474,0,451,422,473,478,505,563,510,520],
[454,439,0,409,371,421,440,448,477,469],
[411,468,481,0,435,446,462,449,521,468],
[481,417,519,455,0,443,434,560,480,491],
[468,412,469,444,447,0,472,484,539,487],
[422,385,450,428,456,418,0,481,510,397],
[395,327,442,441,330,406,409,0,483,458],
[395,380,413,369,410,351,380,407,0,396],
[489,370,421,422,399,403,493,432,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,552,469,509,552,467,511,510,469,425],
[338,0,553,468,382,424,384,425,469,341],
[421,337,0,509,380,464,464,422,339,338],
[381,422,381,0,424,382,298,340,214,255],
[338,508,510,466,0,465,424,508,339,423],
[423,466,426,508,425,0,383,592,383,381],
[379,506,426,592,466,507,0,551,339,338],
[380,465,468,550,382,298,339,0,299,298],
[421,421,551,676,551,507,551,591,0,507],
[465,549,552,635,467,509,552,592,383,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,482,412,407,439,415,456,451,419],
[450,0,434,420,456,495,408,413,435,450],
[408,456,0,474,469,455,437,485,421,440],
[478,470,416,0,440,448,403,389,471,400],
[483,434,421,450,0,415,416,399,452,431],
[451,395,435,442,475,0,437,456,440,355],
[475,482,453,487,474,453,0,433,491,482],
[434,477,405,501,491,434,457,0,503,510],
[439,455,469,419,438,450,399,387,0,379],
[471,440,450,490,459,535,408,380,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,456,477,448,470,456,453,441,451],
[442,0,418,437,460,455,458,416,436,441],
[434,472,0,464,435,467,469,451,427,441],
[413,453,426,0,425,438,407,424,415,417],
[442,430,455,465,0,379,437,431,408,457],
[420,435,423,452,511,0,425,462,471,406],
[434,432,421,483,453,465,0,487,423,424],
[437,474,439,466,459,428,403,0,419,437],
[449,454,463,475,482,419,467,471,0,408],
[439,449,449,473,433,484,466,453,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,506,436,433,485,420,439,441,454],
[413,0,483,421,460,469,425,443,406,386],
[384,407,0,436,430,450,406,442,442,422],
[454,469,454,0,432,468,440,454,477,454],
[457,430,460,458,0,465,449,433,435,426],
[405,421,440,422,425,0,398,420,434,395],
[470,465,484,450,441,492,0,484,467,438],
[451,447,448,436,457,470,406,0,427,408],
[449,484,448,413,455,456,423,463,0,442],
[436,504,468,436,464,495,452,482,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,459,409,483,474,462,446,436,439],
[425,0,460,434,413,433,438,433,427,426],
[431,430,0,440,428,425,419,409,439,406],
[481,456,450,0,438,454,440,451,444,446],
[407,477,462,452,0,445,432,420,418,433],
[416,457,465,436,445,0,418,410,417,433],
[428,452,471,450,458,472,0,432,430,452],
[444,457,481,439,470,480,458,0,443,457],
[454,463,451,446,472,473,460,447,0,441],
[451,464,484,444,457,457,438,433,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,500,479,419,510,461,443,512,429],
[369,0,437,424,386,462,439,463,481,403],
[390,453,0,415,402,424,456,477,475,444],
[411,466,475,0,401,465,391,459,470,432],
[471,504,488,489,0,522,420,568,477,512],
[380,428,466,425,368,0,398,459,470,395],
[429,451,434,499,470,492,0,501,444,442],
[447,427,413,431,322,431,389,0,423,408],
[378,409,415,420,413,420,446,467,0,407],
[461,487,446,458,378,495,448,482,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,420,492,441,477,458,419,445,437],
[418,0,381,451,449,418,411,404,377,391],
[470,509,0,472,500,431,458,454,438,437],
[398,439,418,0,397,433,421,383,410,407],
[449,441,390,493,0,440,420,407,408,428],
[413,472,459,457,450,0,396,405,397,435],
[432,479,432,469,470,494,0,399,399,424],
[471,486,436,507,483,485,491,0,421,488],
[445,513,452,480,482,493,491,469,0,460],
[453,499,453,483,462,455,466,402,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,422,430,433,435,458,456,448,450],
[454,0,469,465,444,453,462,458,470,449],
[468,421,0,420,449,443,450,441,451,416],
[460,425,470,0,465,462,485,467,487,436],
[457,446,441,425,0,420,457,468,453,437],
[455,437,447,428,470,0,469,466,475,441],
[432,428,440,405,433,421,0,435,444,465],
[434,432,449,423,422,424,455,0,455,442],
[442,420,439,403,437,415,446,435,0,422],
[440,441,474,454,453,449,425,448,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,523,496,517,451,446,482,518,422],
[410,0,447,467,440,402,420,446,502,451],
[367,443,0,478,460,428,393,403,474,422],
[394,423,412,0,360,390,404,390,491,401],
[373,450,430,530,0,403,396,409,485,468],
[439,488,462,500,487,0,432,462,533,499],
[444,470,497,486,494,458,0,440,492,513],
[408,444,487,500,481,428,450,0,485,492],
[372,388,416,399,405,357,398,405,0,430],
[468,439,468,489,422,391,377,398,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,464,450,484,514,467,494,474,484],
[466,0,481,384,451,438,444,473,465,497],
[426,409,0,366,420,397,443,456,422,461],
[440,506,524,0,456,544,478,511,444,558],
[406,439,470,434,0,429,473,534,482,449],
[376,452,493,346,461,0,468,496,373,472],
[423,446,447,412,417,422,0,470,471,476],
[396,417,434,379,356,394,420,0,365,440],
[416,425,468,446,408,517,419,525,0,459],
[406,393,429,332,441,418,414,450,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,397,439,471,424,447,487,468,449,434],
[493,0,459,464,445,456,481,492,466,497],
[451,431,0,478,442,462,481,458,462,466],
[419,426,412,0,430,428,467,463,444,458],
[466,445,448,460,0,446,453,468,464,438],
[443,434,428,462,444,0,442,461,446,422],
[403,409,409,423,437,448,0,465,442,439],
[422,398,432,427,422,429,425,0,415,419],
[441,424,428,446,426,444,448,475,0,457],
[456,393,424,432,452,468,451,471,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,440,436,425,442,457,405,447,453],
[431,0,409,424,430,432,451,391,419,443],
[450,481,0,430,438,443,456,422,453,424],
[454,466,460,0,449,435,472,450,457,457],
[465,460,452,441,0,440,442,418,459,444],
[448,458,447,455,450,0,445,431,426,456],
[433,439,434,418,448,445,0,424,437,450],
[485,499,468,440,472,459,466,0,447,485],
[443,471,437,433,431,464,453,443,0,455],
[437,447,466,433,446,434,440,405,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,474,464,423,447,459,474,448,488],
[426,0,470,408,432,409,448,374,394,502],
[416,420,0,464,421,419,435,428,400,447],
[426,482,426,0,478,491,435,493,454,501],
[467,458,469,412,0,445,473,456,426,518],
[443,481,471,399,445,0,461,423,436,485],
[431,442,455,455,417,429,0,443,424,462],
[416,516,462,397,434,467,447,0,401,496],
[442,496,490,436,464,454,466,489,0,500],
[402,388,443,389,372,405,428,394,390,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,387,418,424,415,431,396,407,400,459],
[503,0,449,448,447,473,433,441,456,480],
[472,441,0,434,440,461,430,424,434,435],
[466,442,456,0,415,465,434,453,443,437],
[475,443,450,475,0,441,448,428,445,446],
[459,417,429,425,449,0,419,446,441,458],
[494,457,460,456,442,471,0,453,441,449],
[483,449,466,437,462,444,437,0,466,455],
[490,434,456,447,445,449,449,424,0,467],
[431,410,455,453,444,432,441,435,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,428,418,437,446,457,435,449,448],
[429,0,405,371,422,451,454,428,435,428],
[462,485,0,440,445,464,471,464,455,466],
[472,519,450,0,432,481,468,441,492,493],
[453,468,445,458,0,469,474,448,459,451],
[444,439,426,409,421,0,473,424,444,450],
[433,436,419,422,416,417,0,440,446,441],
[455,462,426,449,442,466,450,0,472,441],
[441,455,435,398,431,446,444,418,0,433],
[442,462,424,397,439,440,449,449,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,443,474,445,442,437,455,469,454],
[434,0,438,430,439,437,412,432,450,429],
[447,452,0,448,456,449,436,417,451,453],
[416,460,442,0,457,448,443,425,458,457],
[445,451,434,433,0,423,422,437,463,436],
[448,453,441,442,467,0,454,462,462,462],
[453,478,454,447,468,436,0,455,463,464],
[435,458,473,465,453,428,435,0,449,457],
[421,440,439,432,427,428,427,441,0,452],
[436,461,437,433,454,428,426,433,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,442,428,461,450,466,422,430,438],
[454,0,454,434,470,463,467,448,462,453],
[448,436,0,434,448,439,480,446,431,460],
[462,456,456,0,460,469,456,439,455,466],
[429,420,442,430,0,442,450,439,434,434],
[440,427,451,421,448,0,451,420,450,453],
[424,423,410,434,440,439,0,416,430,432],
[468,442,444,451,451,470,474,0,436,466],
[460,428,459,435,456,440,460,454,0,440],
[452,437,430,424,456,437,458,424,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,455,461,437,444,447,452,451,439],
[436,0,469,457,458,463,473,470,466,454],
[435,421,0,435,443,422,430,431,448,435],
[429,433,455,0,425,448,431,433,451,444],
[453,432,447,465,0,453,454,450,460,450],
[446,427,468,442,437,0,443,449,451,433],
[443,417,460,459,436,447,0,442,443,435],
[438,420,459,457,440,441,448,0,446,446],
[439,424,442,439,430,439,447,444,0,458],
[451,436,455,446,440,457,455,444,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,531,530,468,497,470,496,390,404],
[400,0,407,418,340,387,402,430,388,327],
[359,483,0,497,398,513,480,479,439,437],
[360,472,393,0,404,424,435,473,410,342],
[422,550,492,486,0,440,471,499,486,452],
[393,503,377,466,450,0,436,487,395,363],
[420,488,410,455,419,454,0,465,378,357],
[394,460,411,417,391,403,425,0,376,358],
[500,502,451,480,404,495,512,514,0,422],
[486,563,453,548,438,527,533,532,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,448,441,448,458,464,457,449,447],
[440,0,474,461,468,464,465,438,465,429],
[442,416,0,447,449,481,435,447,452,420],
[449,429,443,0,456,462,452,450,450,441],
[442,422,441,434,0,453,444,435,442,425],
[432,426,409,428,437,0,431,441,437,421],
[426,425,455,438,446,459,0,466,437,428],
[433,452,443,440,455,449,424,0,443,434],
[441,425,438,440,448,453,453,447,0,438],
[443,461,470,449,465,469,462,456,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,382,465,421,395,443,408,436,417,403],
[508,0,496,443,443,454,421,475,485,457],
[425,394,0,389,405,443,421,418,380,391],
[469,447,501,0,448,465,408,421,434,431],
[495,447,485,442,0,489,448,443,460,412],
[447,436,447,425,401,0,430,431,374,416],
[482,469,469,482,442,460,0,502,468,463],
[454,415,472,469,447,459,388,0,432,372],
[473,405,510,456,430,516,422,458,0,442],
[487,433,499,459,478,474,427,518,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,472,443,449,460,467,453,494,473],
[447,0,454,454,456,422,439,429,480,466],
[418,436,0,422,431,435,404,417,462,471],
[447,436,468,0,456,448,437,445,472,488],
[441,434,459,434,0,441,457,447,470,472],
[430,468,455,442,449,0,445,456,488,490],
[423,451,486,453,433,445,0,437,478,483],
[437,461,473,445,443,434,453,0,479,468],
[396,410,428,418,420,402,412,411,0,462],
[417,424,419,402,418,400,407,422,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,415,421,408,417,439,436,420,448],
[463,0,477,474,443,465,467,475,447,471],
[475,413,0,454,444,455,443,471,445,469],
[469,416,436,0,394,440,435,463,423,445],
[482,447,446,496,0,467,446,461,444,465],
[473,425,435,450,423,0,442,445,404,452],
[451,423,447,455,444,448,0,459,447,474],
[454,415,419,427,429,445,431,0,453,445],
[470,443,445,467,446,486,443,437,0,494],
[442,419,421,445,425,438,416,445,396,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,450,444,473,455,435,438,443,437],
[428,0,449,435,461,446,434,450,448,429],
[440,441,0,435,465,421,427,440,419,419],
[446,455,455,0,478,455,447,450,441,426],
[417,429,425,412,0,424,420,445,421,423],
[435,444,469,435,466,0,457,455,439,454],
[455,456,463,443,470,433,0,471,478,418],
[452,440,450,440,445,435,419,0,456,443],
[447,442,471,449,469,451,412,434,0,435],
[453,461,471,464,467,436,472,447,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,408,456,459,476,479,435,457,450],
[423,0,465,451,461,450,445,445,469,459],
[482,425,0,464,500,471,493,440,477,447],
[434,439,426,0,422,457,423,448,417,437],
[431,429,390,468,0,465,474,440,453,430],
[414,440,419,433,425,0,425,428,415,414],
[411,445,397,467,416,465,0,407,442,437],
[455,445,450,442,450,462,483,0,443,450],
[433,421,413,473,437,475,448,447,0,448],
[440,431,443,453,460,476,453,440,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,390,473,423,444,480,442,490,473],
[421,0,380,392,428,442,464,451,450,465],
[500,510,0,473,462,445,507,486,508,474],
[417,498,417,0,434,423,447,445,453,459],
[467,462,428,456,0,445,499,469,477,476],
[446,448,445,467,445,0,499,443,452,483],
[410,426,383,443,391,391,0,421,457,446],
[448,439,404,445,421,447,469,0,448,446],
[400,440,382,437,413,438,433,442,0,436],
[417,425,416,431,414,407,444,444,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,452,452,450,468,456,451,453,438],
[443,0,445,451,459,448,456,449,458,440],
[438,445,0,437,449,470,422,432,453,430],
[438,439,453,0,426,435,448,449,445,450],
[440,431,441,464,0,457,419,441,428,421],
[422,442,420,455,433,0,420,423,416,429],
[434,434,468,442,471,470,0,462,456,433],
[439,441,458,441,449,467,428,0,453,438],
[437,432,437,445,462,474,434,437,0,430],
[452,450,460,440,469,461,457,452,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,440,453,460,424,489,459,442,463],
[450,0,412,438,483,428,500,415,446,507],
[450,478,0,406,463,408,497,405,413,470],
[437,452,484,0,485,433,478,461,462,462],
[430,407,427,405,0,452,481,416,406,439],
[466,462,482,457,438,0,505,451,426,495],
[401,390,393,412,409,385,0,391,369,417],
[431,475,485,429,474,439,499,0,432,447],
[448,444,477,428,484,464,521,458,0,475],
[427,383,420,428,451,395,473,443,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,436,439,431,438,430,441,409,455],
[458,0,434,447,470,450,461,457,447,414],
[454,456,0,454,461,446,484,439,452,460],
[451,443,436,0,470,465,458,422,432,431],
[459,420,429,420,0,467,466,426,417,404],
[452,440,444,425,423,0,456,426,426,417],
[460,429,406,432,424,434,0,454,413,421],
[449,433,451,468,464,464,436,0,456,449],
[481,443,438,458,473,464,477,434,0,465],
[435,476,430,459,486,473,469,441,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,444,487,449,460,457,470,441,454],
[449,0,444,484,443,472,429,461,451,469],
[446,446,0,476,448,469,427,457,448,470],
[403,406,414,0,388,381,378,418,401,418],
[441,447,442,502,0,439,410,471,478,453],
[430,418,421,509,451,0,419,474,441,478],
[433,461,463,512,480,471,0,503,462,474],
[420,429,433,472,419,416,387,0,409,467],
[449,439,442,489,412,449,428,481,0,435],
[436,421,420,472,437,412,416,423,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,421,400,386,436,438,460,434,419],
[442,0,450,426,393,457,383,443,432,385],
[469,440,0,411,407,459,434,450,446,410],
[490,464,479,0,432,500,440,475,498,419],
[504,497,483,458,0,483,431,488,481,463],
[454,433,431,390,407,0,373,439,455,368],
[452,507,456,450,459,517,0,446,470,432],
[430,447,440,415,402,451,444,0,451,385],
[456,458,444,392,409,435,420,439,0,386],
[471,505,480,471,427,522,458,505,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,455,391,392,402,424,401,448,400],
[432,0,445,373,425,348,407,418,379,400],
[435,445,0,403,418,427,451,437,439,403],
[499,517,487,0,477,461,473,474,515,427],
[498,465,472,413,0,414,400,494,468,431],
[488,542,463,429,476,0,434,436,462,446],
[466,483,439,417,490,456,0,465,500,460],
[489,472,453,416,396,454,425,0,450,405],
[442,511,451,375,422,428,390,440,0,427],
[490,490,487,463,459,444,430,485,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,438,411,461,472,406,412,472,475],
[483,0,432,439,451,462,437,467,459,495],
[452,458,0,417,460,487,410,447,464,489],
[479,451,473,0,447,499,433,442,481,493],
[429,439,430,443,0,440,416,438,474,496],
[418,428,403,391,450,0,459,392,481,472],
[484,453,480,457,474,431,0,428,477,484],
[478,423,443,448,452,498,462,0,470,484],
[418,431,426,409,416,409,413,420,0,464],
[415,395,401,397,394,418,406,406,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,459,435,450,426,428,426,465,428],
[462,0,432,446,481,441,461,452,455,417],
[431,458,0,456,475,428,451,441,454,446],
[455,444,434,0,455,451,453,443,465,441],
[440,409,415,435,0,417,441,421,409,425],
[464,449,462,439,473,0,465,456,460,444],
[462,429,439,437,449,425,0,438,444,431],
[464,438,449,447,469,434,452,0,436,420],
[425,435,436,425,481,430,446,454,0,427],
[462,473,444,449,465,446,459,470,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,459,444,414,444,443,488,493,435],
[456,0,464,469,459,467,430,478,468,476],
[431,426,0,459,448,437,461,478,446,409],
[446,421,431,0,442,417,462,474,500,438],
[476,431,442,448,0,445,446,477,451,414],
[446,423,453,473,445,0,417,488,472,391],
[447,460,429,428,444,473,0,478,456,419],
[402,412,412,416,413,402,412,0,447,394],
[397,422,444,390,439,418,434,443,0,391],
[455,414,481,452,476,499,471,496,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,453,445,423,434,456,427,446,417],
[465,0,451,455,458,453,440,447,449,435],
[437,439,0,444,445,423,446,434,450,430],
[445,435,446,0,439,443,442,445,437,443],
[467,432,445,451,0,428,450,437,440,417],
[456,437,467,447,462,0,467,449,457,439],
[434,450,444,448,440,423,0,427,447,455],
[463,443,456,445,453,441,463,0,455,440],
[444,441,440,453,450,433,443,435,0,448],
[473,455,460,447,473,451,435,450,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,483,456,457,457,462,451,461,442],
[443,0,469,449,425,479,439,474,446,456],
[407,421,0,431,450,456,431,444,420,439],
[434,441,459,0,459,455,436,449,418,423],
[433,465,440,431,0,449,426,437,418,408],
[433,411,434,435,441,0,456,433,435,436],
[428,451,459,454,464,434,0,431,437,442],
[439,416,446,441,453,457,459,0,445,421],
[429,444,470,472,472,455,453,445,0,403],
[448,434,451,467,482,454,448,469,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,454,451,441,452,463,446,480,441],
[448,0,459,453,423,451,430,435,472,426],
[436,431,0,420,430,437,443,432,449,392],
[439,437,470,0,452,429,420,432,445,408],
[449,467,460,438,0,477,439,446,467,453],
[438,439,453,461,413,0,430,451,465,438],
[427,460,447,470,451,460,0,458,496,449],
[444,455,458,458,444,439,432,0,458,397],
[410,418,441,445,423,425,394,432,0,416],
[449,464,498,482,437,452,441,493,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,448,496,432,445,453,426,426,442],
[438,0,473,468,450,433,441,446,451,446],
[442,417,0,469,444,453,455,428,443,448],
[394,422,421,0,424,418,432,407,436,405],
[458,440,446,466,0,440,451,433,456,454],
[445,457,437,472,450,0,468,449,429,441],
[437,449,435,458,439,422,0,436,427,440],
[464,444,462,483,457,441,454,0,458,457],
[464,439,447,454,434,461,463,432,0,423],
[448,444,442,485,436,449,450,433,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,413,395,410,403,426,391,393,411],
[477,0,461,469,481,426,457,435,447,462],
[477,429,0,440,450,445,469,422,449,474],
[495,421,450,0,461,389,469,442,438,459],
[480,409,440,429,0,403,426,417,452,414],
[487,464,445,501,487,0,470,437,459,466],
[464,433,421,421,464,420,0,439,465,470],
[499,455,468,448,473,453,451,0,457,443],
[497,443,441,452,438,431,425,433,0,475],
[479,428,416,431,476,424,420,447,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,437,396,413,417,424,432,464,497],
[384,0,434,368,401,390,421,418,457,448],
[453,456,0,438,422,435,419,360,446,405],
[494,522,452,0,479,472,457,433,501,474],
[477,489,468,411,0,410,448,458,507,542],
[473,500,455,418,480,0,452,425,498,518],
[466,469,471,433,442,438,0,406,455,421],
[458,472,530,457,432,465,484,0,468,528],
[426,433,444,389,383,392,435,422,0,461],
[393,442,485,416,348,372,469,362,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,404,454,430,434,413,430,445,442],
[461,0,441,448,414,426,415,445,404,431],
[486,449,0,445,432,474,421,466,464,445],
[436,442,445,0,413,426,420,434,449,455],
[460,476,458,477,0,438,430,472,479,470],
[456,464,416,464,452,0,420,443,470,432],
[477,475,469,470,460,470,0,440,465,476],
[460,445,424,456,418,447,450,0,453,487],
[445,486,426,441,411,420,425,437,0,454],
[448,459,445,435,420,458,414,403,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,441,427,437,470,451,505,453,478],
[455,0,418,456,484,481,440,487,453,450],
[449,472,0,467,446,486,432,467,479,469],
[463,434,423,0,452,477,490,461,457,465],
[453,406,444,438,0,445,424,456,429,474],
[420,409,404,413,445,0,375,409,432,442],
[439,450,458,400,466,515,0,468,449,464],
[385,403,423,429,434,481,422,0,401,442],
[437,437,411,433,461,458,441,489,0,471],
[412,440,421,425,416,448,426,448,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,421,447,407,393,409,416,390,456],
[473,0,432,448,488,436,431,431,429,486],
[469,458,0,500,488,456,438,476,460,484],
[443,442,390,0,439,437,401,427,402,453],
[483,402,402,451,0,406,416,424,413,469],
[497,454,434,453,484,0,444,423,434,487],
[481,459,452,489,474,446,0,463,407,469],
[474,459,414,463,466,467,427,0,451,482],
[500,461,430,488,477,456,483,439,0,488],
[434,404,406,437,421,403,421,408,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,422,414,431,446,406,436,402,442],
[433,0,440,425,445,442,414,414,424,433],
[468,450,0,425,465,457,411,437,431,462],
[476,465,465,0,452,436,445,446,449,448],
[459,445,425,438,0,453,432,430,419,433],
[444,448,433,454,437,0,423,429,433,435],
[484,476,479,445,458,467,0,443,464,444],
[454,476,453,444,460,461,447,0,435,461],
[488,466,459,441,471,457,426,455,0,443],
[448,457,428,442,457,455,446,429,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,434,376,425,446,420,451,427,454],
[483,0,450,418,446,460,440,444,436,502],
[456,440,0,419,436,451,456,472,434,438],
[514,472,471,0,474,472,453,474,437,484],
[465,444,454,416,0,452,438,457,447,483],
[444,430,439,418,438,0,449,452,437,456],
[470,450,434,437,452,441,0,465,428,462],
[439,446,418,416,433,438,425,0,444,466],
[463,454,456,453,443,453,462,446,0,487],
[436,388,452,406,407,434,428,424,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,460,462,463,461,454,472,461,443],
[451,0,477,465,454,471,435,466,445,422],
[430,413,0,440,435,444,435,443,417,433],
[428,425,450,0,433,420,465,429,437,442],
[427,436,455,457,0,436,435,457,453,426],
[429,419,446,470,454,0,481,463,446,430],
[436,455,455,425,455,409,0,446,436,437],
[418,424,447,461,433,427,444,0,422,438],
[429,445,473,453,437,444,454,468,0,458],
[447,468,457,448,464,460,453,452,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,439,433,439,452,432,477,442,456],
[438,0,427,424,443,431,425,459,412,451],
[451,463,0,440,461,453,451,471,465,448],
[457,466,450,0,458,449,432,471,438,458],
[451,447,429,432,0,440,420,460,424,438],
[438,459,437,441,450,0,447,465,456,471],
[458,465,439,458,470,443,0,473,432,448],
[413,431,419,419,430,425,417,0,426,439],
[448,478,425,452,466,434,458,464,0,472],
[434,439,442,432,452,419,442,451,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,452,454,449,446,426,414,419,428],
[423,0,469,440,468,493,468,427,434,499],
[438,421,0,464,434,448,475,391,431,481],
[436,450,426,0,482,446,440,464,462,448],
[441,422,456,408,0,460,445,428,454,446],
[444,397,442,444,430,0,455,413,385,423],
[464,422,415,450,445,435,0,404,441,447],
[476,463,499,426,462,477,486,0,454,516],
[471,456,459,428,436,505,449,436,0,447],
[462,391,409,442,444,467,443,374,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,460,441,452,459,448,467,445,451],
[437,0,420,433,416,436,411,420,420,434],
[430,470,0,429,427,435,446,440,443,460],
[449,457,461,0,458,437,451,447,451,461],
[438,474,463,432,0,454,442,439,452,446],
[431,454,455,453,436,0,456,452,433,453],
[442,479,444,439,448,434,0,451,456,454],
[423,470,450,443,451,438,439,0,436,438],
[445,470,447,439,438,457,434,454,0,436],
[439,456,430,429,444,437,436,452,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,472,446,457,442,459,468,464,463],
[436,0,447,447,455,445,434,456,448,439],
[418,443,0,457,451,450,433,421,422,454],
[444,443,433,0,439,414,426,461,438,458],
[433,435,439,451,0,433,404,423,414,425],
[448,445,440,476,457,0,436,443,426,450],
[431,456,457,464,486,454,0,445,422,449],
[422,434,469,429,467,447,445,0,437,460],
[426,442,468,452,476,464,468,453,0,456],
[427,451,436,432,465,440,441,430,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,432,434,457,444,422,414,461,435],
[469,0,510,432,491,479,470,473,511,484],
[458,380,0,406,437,416,430,410,424,402],
[456,458,484,0,447,471,454,436,478,423],
[433,399,453,443,0,450,435,430,424,414],
[446,411,474,419,440,0,444,430,445,438],
[468,420,460,436,455,446,0,456,446,432],
[476,417,480,454,460,460,434,0,447,441],
[429,379,466,412,466,445,444,443,0,436],
[455,406,488,467,476,452,458,449,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,422,444,412,393,503,385,369,296],
[467,0,429,466,462,473,493,496,416,419],
[468,461,0,423,463,415,536,430,371,375],
[446,424,467,0,471,457,514,461,408,405],
[478,428,427,419,0,319,489,365,359,346],
[497,417,475,433,571,0,495,454,419,428],
[387,397,354,376,401,395,0,333,253,337],
[505,394,460,429,525,436,557,0,446,421],
[521,474,519,482,531,471,637,444,0,455],
[594,471,515,485,544,462,553,469,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,313,156,364,258,206,260,417,315],
[631,0,525,316,630,419,316,420,576,419],
[577,365,0,261,576,419,364,468,473,521],
[734,574,629,0,682,629,420,471,522,524],
[526,260,314,208,0,367,209,312,317,364],
[632,471,471,261,523,0,475,367,419,472],
[684,574,526,470,681,415,0,418,469,576],
[630,470,422,419,578,523,472,0,471,522],
[473,314,417,368,573,471,421,419,0,525],
[575,471,369,366,526,418,314,368,365,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,429,429,443,436,462,423,449,440],
[459,0,455,427,418,460,453,412,463,452],
[461,435,0,430,426,422,473,431,426,445],
[461,463,460,0,454,428,483,446,463,455],
[447,472,464,436,0,445,472,475,461,468],
[454,430,468,462,445,0,488,435,451,483],
[428,437,417,407,418,402,0,411,438,437],
[467,478,459,444,415,455,479,0,452,449],
[441,427,464,427,429,439,452,438,0,441],
[450,438,445,435,422,407,453,441,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,486,524,462,466,502,472,477,441],
[400,0,466,430,407,427,457,411,426,414],
[404,424,0,441,469,417,475,392,433,392],
[366,460,449,0,457,417,438,423,414,355],
[428,483,421,433,0,467,465,435,420,415],
[424,463,473,473,423,0,465,427,404,392],
[388,433,415,452,425,425,0,399,400,394],
[418,479,498,467,455,463,491,0,455,426],
[413,464,457,476,470,486,490,435,0,451],
[449,476,498,535,475,498,496,464,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,408,485,425,424,424,466,413,462],
[485,0,459,519,443,434,458,468,405,499],
[482,431,0,513,450,467,510,471,429,460],
[405,371,377,0,400,395,392,414,369,412],
[465,447,440,490,0,438,423,458,412,459],
[466,456,423,495,452,0,461,500,450,486],
[466,432,380,498,467,429,0,456,427,456],
[424,422,419,476,432,390,434,0,395,415],
[477,485,461,521,478,440,463,495,0,473],
[428,391,430,478,431,404,434,475,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,386,439,438,417,450,445,433,424,411],
[504,0,428,448,457,460,474,453,442,441],
[451,462,0,442,421,454,445,450,454,465],
[452,442,448,0,450,471,458,457,436,431],
[473,433,469,440,0,472,450,427,443,419],
[440,430,436,419,418,0,455,418,437,422],
[445,416,445,432,440,435,0,443,428,443],
[457,437,440,433,463,472,447,0,441,434],
[466,448,436,454,447,453,462,449,0,432],
[479,449,425,459,471,468,447,456,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,380,430,512,468,448,413,398,399,450],
[510,0,504,555,623,469,534,417,490,503],
[460,386,0,524,512,402,457,454,441,404],
[378,335,366,0,358,388,368,422,322,251],
[422,267,378,532,0,370,400,400,387,452],
[442,421,488,502,520,0,470,436,389,482],
[477,356,433,522,490,420,0,473,425,437],
[492,473,436,468,490,454,417,0,505,455],
[491,400,449,568,503,501,465,385,0,515],
[440,387,486,639,438,408,453,435,375,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,440,452,417,449,452,461,454,430],
[431,0,430,439,421,432,455,433,471,434],
[450,460,0,454,448,484,462,453,484,441],
[438,451,436,0,429,429,437,451,463,430],
[473,469,442,461,0,468,462,478,470,455],
[441,458,406,461,422,0,458,440,457,421],
[438,435,428,453,428,432,0,440,477,423],
[429,457,437,439,412,450,450,0,457,427],
[436,419,406,427,420,433,413,433,0,419],
[460,456,449,460,435,469,467,463,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,471,506,477,467,437,479,470,434],
[447,0,473,458,471,429,446,459,448,440],
[419,417,0,471,469,416,403,433,446,407],
[384,432,419,0,450,438,405,409,440,402],
[413,419,421,440,0,416,418,448,434,432],
[423,461,474,452,474,0,413,433,459,444],
[453,444,487,485,472,477,0,450,473,452],
[411,431,457,481,442,457,440,0,467,420],
[420,442,444,450,456,431,417,423,0,404],
[456,450,483,488,458,446,438,470,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,486,467,452,491,453,494,477,429],
[421,0,447,461,445,446,433,449,452,390],
[404,443,0,451,426,454,462,426,442,400],
[423,429,439,0,422,452,423,432,437,387],
[438,445,464,468,0,471,454,466,456,437],
[399,444,436,438,419,0,418,445,446,432],
[437,457,428,467,436,472,0,448,446,451],
[396,441,464,458,424,445,442,0,451,408],
[413,438,448,453,434,444,444,439,0,387],
[461,500,490,503,453,458,439,482,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,439,443,451,456,447,441,470,456],
[448,0,443,444,451,462,452,438,448,439],
[451,447,0,451,462,476,464,446,462,433],
[447,446,439,0,432,466,439,441,441,448],
[439,439,428,458,0,459,440,457,467,432],
[434,428,414,424,431,0,428,428,427,406],
[443,438,426,451,450,462,0,462,455,432],
[449,452,444,449,433,462,428,0,456,439],
[420,442,428,449,423,463,435,434,0,417],
[434,451,457,442,458,484,458,451,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,401,443,460,409,439,370,400,432,446],
[489,0,457,468,439,467,461,456,421,455],
[447,433,0,473,414,456,416,435,411,457],
[430,422,417,0,412,424,388,404,420,396],
[481,451,476,478,0,466,418,439,457,452],
[451,423,434,466,424,0,397,421,444,449],
[520,429,474,502,472,493,0,452,467,461],
[490,434,455,486,451,469,438,0,477,498],
[458,469,479,470,433,446,423,413,0,437],
[444,435,433,494,438,441,429,392,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,383,497,489,423,477,528,546,448],
[401,0,338,435,379,360,494,443,496,341],
[507,552,0,483,458,475,538,505,530,416],
[393,455,407,0,376,356,519,463,454,394],
[401,511,432,514,0,429,519,518,544,486],
[467,530,415,534,461,0,537,487,588,406],
[413,396,352,371,371,353,0,380,367,360],
[362,447,385,427,372,403,510,0,431,411],
[344,394,360,436,346,302,523,459,0,377],
[442,549,474,496,404,484,530,479,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,451,401,469,445,423,442,428,439],
[445,0,456,428,424,454,441,429,457,443],
[439,434,0,410,442,453,429,454,456,419],
[489,462,480,0,482,484,468,444,484,473],
[421,466,448,408,0,454,466,416,449,436],
[445,436,437,406,436,0,437,411,446,428],
[467,449,461,422,424,453,0,443,456,438],
[448,461,436,446,474,479,447,0,471,443],
[462,433,434,406,441,444,434,419,0,449],
[451,447,471,417,454,462,452,447,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,451,456,455,467,453,467,448,458],
[445,0,453,440,459,461,416,443,458,475],
[439,437,0,438,435,445,414,443,467,481],
[434,450,452,0,449,438,441,428,451,474],
[435,431,455,441,0,436,445,423,449,439],
[423,429,445,452,454,0,451,435,462,461],
[437,474,476,449,445,439,0,414,443,423],
[423,447,447,462,467,455,476,0,456,491],
[442,432,423,439,441,428,447,434,0,454],
[432,415,409,416,451,429,467,399,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,457,449,442,482,479,430,447,488],
[436,0,461,442,436,459,452,462,440,468],
[433,429,0,424,421,443,452,425,437,451],
[441,448,466,0,454,464,468,453,459,468],
[448,454,469,436,0,465,460,450,446,479],
[408,431,447,426,425,0,450,430,445,458],
[411,438,438,422,430,440,0,445,440,457],
[460,428,465,437,440,460,445,0,456,457],
[443,450,453,431,444,445,450,434,0,465],
[402,422,439,422,411,432,433,433,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,477,435,463,440,417,453,450,431],
[428,0,485,467,458,426,403,430,404,461],
[413,405,0,435,425,418,398,387,410,419],
[455,423,455,0,452,431,414,406,416,442],
[427,432,465,438,0,450,426,424,422,439],
[450,464,472,459,440,0,421,429,446,411],
[473,487,492,476,464,469,0,427,465,459],
[437,460,503,484,466,461,463,0,464,452],
[440,486,480,474,468,444,425,426,0,454],
[459,429,471,448,451,479,431,438,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,421,421,465,445,430,441,436,464],
[468,0,440,460,473,454,453,470,455,492],
[469,450,0,446,488,491,437,455,453,490],
[469,430,444,0,458,451,454,462,437,483],
[425,417,402,432,0,436,413,421,445,459],
[445,436,399,439,454,0,425,438,438,473],
[460,437,453,436,477,465,0,470,477,498],
[449,420,435,428,469,452,420,0,459,473],
[454,435,437,453,445,452,413,431,0,459],
[426,398,400,407,431,417,392,417,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,471,453,434,553,425,507,540,522],
[400,0,387,481,414,447,405,420,468,422],
[419,503,0,436,418,439,475,425,522,442],
[437,409,454,0,385,550,470,521,502,390],
[456,476,472,505,0,557,443,492,521,428],
[337,443,451,340,333,0,362,439,425,371],
[465,485,415,420,447,528,0,519,532,466],
[383,470,465,369,398,451,371,0,463,421],
[350,422,368,388,369,465,358,427,0,406],
[368,468,448,500,462,519,424,469,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,468,462,472,362,423,474,424,377],
[422,0,382,374,541,390,462,467,425,359],
[422,508,0,403,547,487,518,451,481,405],
[428,516,487,0,478,569,490,529,544,438],
[418,349,343,412,0,387,417,464,422,355],
[528,500,403,321,503,0,567,459,471,448],
[467,428,372,400,473,323,0,441,395,438],
[416,423,439,361,426,431,449,0,479,363],
[466,465,409,346,468,419,495,411,0,441],
[513,531,485,452,535,442,452,527,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,454,442,434,438,444,422,461,470],
[457,0,455,468,465,468,456,459,441,453],
[436,435,0,449,455,439,464,433,436,470],
[448,422,441,0,436,437,455,429,436,463],
[456,425,435,454,0,453,449,427,450,470],
[452,422,451,453,437,0,458,449,440,470],
[446,434,426,435,441,432,0,427,430,477],
[468,431,457,461,463,441,463,0,440,464],
[429,449,454,454,440,450,460,450,0,466],
[420,437,420,427,420,420,413,426,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,447,482,461,422,429,461,427,495],
[414,0,426,460,441,426,449,477,456,436],
[443,464,0,474,464,408,460,497,425,483],
[408,430,416,0,380,365,443,480,427,462],
[429,449,426,510,0,463,470,446,443,476],
[468,464,482,525,427,0,477,498,471,505],
[461,441,430,447,420,413,0,433,445,468],
[429,413,393,410,444,392,457,0,417,456],
[463,434,465,463,447,419,445,473,0,473],
[395,454,407,428,414,385,422,434,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,466,456,499,410,482,387,458,423],
[471,0,446,432,463,456,443,396,443,436],
[424,444,0,454,477,437,445,366,419,444],
[434,458,436,0,472,451,457,453,464,456],
[391,427,413,418,0,424,433,393,404,392],
[480,434,453,439,466,0,476,436,425,443],
[408,447,445,433,457,414,0,416,396,413],
[503,494,524,437,497,454,474,0,448,477],
[432,447,471,426,486,465,494,442,0,445],
[467,454,446,434,498,447,477,413,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,424,475,470,488,462,468,495,411],
[429,0,455,475,439,482,493,442,450,420],
[466,435,0,470,476,471,505,442,479,422],
[415,415,420,0,439,427,442,403,434,394],
[420,451,414,451,0,450,460,438,455,428],
[402,408,419,463,440,0,465,408,451,402],
[428,397,385,448,430,425,0,381,430,400],
[422,448,448,487,452,482,509,0,463,455],
[395,440,411,456,435,439,460,427,0,435],
[479,470,468,496,462,488,490,435,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,436,468,513,443,462,471,455,480],
[395,0,429,392,425,395,413,401,397,410],
[454,461,0,447,454,462,442,469,424,417],
[422,498,443,0,453,438,470,454,441,491],
[377,465,436,437,0,439,433,455,452,431],
[447,495,428,452,451,0,473,452,443,472],
[428,477,448,420,457,417,0,471,436,474],
[419,489,421,436,435,438,419,0,439,459],
[435,493,466,449,438,447,454,451,0,451],
[410,480,473,399,459,418,416,431,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,455,470,416,459,428,425,423,409],
[440,0,439,452,437,493,466,459,417,444],
[435,451,0,465,454,468,424,437,439,424],
[420,438,425,0,387,443,412,429,423,412],
[474,453,436,503,0,457,423,466,412,474],
[431,397,422,447,433,0,419,426,406,426],
[462,424,466,478,467,471,0,469,406,445],
[465,431,453,461,424,464,421,0,406,448],
[467,473,451,467,478,484,484,484,0,438],
[481,446,466,478,416,464,445,442,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,451,445,446,436,425,436,436,439],
[448,0,474,456,457,462,444,454,460,449],
[439,416,0,431,421,430,427,447,441,431],
[445,434,459,0,468,427,423,426,448,422],
[444,433,469,422,0,439,420,440,439,443],
[454,428,460,463,451,0,453,459,451,430],
[465,446,463,467,470,437,0,438,449,438],
[454,436,443,464,450,431,452,0,465,433],
[454,430,449,442,451,439,441,425,0,434],
[451,441,459,468,447,460,452,457,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,327,441,345,295,373,326,423,384],
[580,0,388,606,436,392,551,451,467,536],
[563,502,0,519,418,316,463,435,484,463],
[449,284,371,0,351,336,451,297,418,312],
[545,454,472,539,0,402,517,401,484,452],
[595,498,574,554,488,0,584,435,552,467],
[517,339,427,439,373,306,0,286,386,370],
[564,439,455,593,489,455,604,0,568,500],
[467,423,406,472,406,338,504,322,0,385],
[506,354,427,578,438,423,520,390,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,415,467,437,457,451,451,458,448],
[448,0,431,450,429,451,443,464,455,438],
[475,459,0,442,450,461,454,468,469,447],
[423,440,448,0,437,462,445,475,466,441],
[453,461,440,453,0,452,440,477,460,465],
[433,439,429,428,438,0,432,450,457,479],
[439,447,436,445,450,458,0,455,456,459],
[439,426,422,415,413,440,435,0,434,432],
[432,435,421,424,430,433,434,456,0,434],
[442,452,443,449,425,411,431,458,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,446,498,439,451,458,466,449,480],
[421,0,405,431,446,431,442,432,473,450],
[444,485,0,468,447,466,470,500,493,499],
[392,459,422,0,422,400,463,441,460,440],
[451,444,443,468,0,454,426,463,431,441],
[439,459,424,490,436,0,452,437,433,487],
[432,448,420,427,464,438,0,461,442,466],
[424,458,390,449,427,453,429,0,452,459],
[441,417,397,430,459,457,448,438,0,438],
[410,440,391,450,449,403,424,431,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,444,457,431,470,481,468,472,477],
[431,0,446,449,450,460,471,449,485,466],
[446,444,0,448,434,458,479,450,475,456],
[433,441,442,0,432,450,462,453,483,425],
[459,440,456,458,0,457,491,490,471,452],
[420,430,432,440,433,0,468,440,441,457],
[409,419,411,428,399,422,0,431,462,412],
[422,441,440,437,400,450,459,0,460,420],
[418,405,415,407,419,449,428,430,0,423],
[413,424,434,465,438,433,478,470,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,432,434,448,447,463,446,447,433],
[375,0,408,451,388,447,434,392,425,403],
[458,482,0,452,441,481,519,468,491,445],
[456,439,438,0,470,454,473,424,462,443],
[442,502,449,420,0,443,448,438,417,461],
[443,443,409,436,447,0,467,437,441,448],
[427,456,371,417,442,423,0,405,413,408],
[444,498,422,466,452,453,485,0,439,453],
[443,465,399,428,473,449,477,451,0,441],
[457,487,445,447,429,442,482,437,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,431,449,478,446,450,441,415,446],
[431,0,442,445,429,424,378,409,399,453],
[459,448,0,447,468,456,429,452,420,465],
[441,445,443,0,471,431,400,443,429,436],
[412,461,422,419,0,449,423,424,419,430],
[444,466,434,459,441,0,437,424,414,463],
[440,512,461,490,467,453,0,466,456,460],
[449,481,438,447,466,466,424,0,442,439],
[475,491,470,461,471,476,434,448,0,460],
[444,437,425,454,460,427,430,451,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,441,448,449,454,461,435,429,438],
[453,0,450,463,440,450,428,459,438,443],
[449,440,0,445,427,445,432,432,427,446],
[442,427,445,0,445,445,427,430,429,425],
[441,450,463,445,0,469,437,448,447,441],
[436,440,445,445,421,0,431,440,432,430],
[429,462,458,463,453,459,0,446,428,443],
[455,431,458,460,442,450,444,0,417,453],
[461,452,463,461,443,458,462,473,0,452],
[452,447,444,465,449,460,447,437,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,433,426,465,441,449,451,467,431],
[429,0,424,415,425,453,439,387,454,410],
[457,466,0,443,473,466,446,437,440,449],
[464,475,447,0,458,457,460,436,469,457],
[425,465,417,432,0,445,433,401,429,445],
[449,437,424,433,445,0,443,400,436,437],
[441,451,444,430,457,447,0,416,441,438],
[439,503,453,454,489,490,474,0,466,456],
[423,436,450,421,461,454,449,424,0,442],
[459,480,441,433,445,453,452,434,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,455,453,450,488,466,497,434,464],
[440,0,473,456,443,483,422,474,439,435],
[435,417,0,440,438,453,415,464,412,438],
[437,434,450,0,458,476,453,472,434,440],
[440,447,452,432,0,453,438,441,430,432],
[402,407,437,414,437,0,407,424,431,431],
[424,468,475,437,452,483,0,484,462,455],
[393,416,426,418,449,466,406,0,446,403],
[456,451,478,456,460,459,428,444,0,459],
[426,455,452,450,458,459,435,487,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,424,445,449,459,466,458,470,453],
[422,0,428,415,424,402,444,426,422,378],
[466,462,0,454,458,423,463,469,426,440],
[445,475,436,0,450,424,443,471,470,443],
[441,466,432,440,0,447,476,489,448,448],
[431,488,467,466,443,0,469,472,478,478],
[424,446,427,447,414,421,0,450,456,411],
[432,464,421,419,401,418,440,0,446,441],
[420,468,464,420,442,412,434,444,0,430],
[437,512,450,447,442,412,479,449,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,468,439,424,464,426,432,449,429],
[434,0,471,426,414,431,460,434,432,421],
[422,419,0,433,394,400,377,418,405,400],
[451,464,457,0,441,438,446,452,436,409],
[466,476,496,449,0,453,456,489,445,446],
[426,459,490,452,437,0,460,420,432,426],
[464,430,513,444,434,430,0,433,464,450],
[458,456,472,438,401,470,457,0,445,432],
[441,458,485,454,445,458,426,445,0,438],
[461,469,490,481,444,464,440,458,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,450,440,456,452,449,446,449,449],
[447,0,421,440,424,416,433,445,435,432],
[440,469,0,446,435,443,445,450,442,456],
[450,450,444,0,433,432,455,463,440,454],
[434,466,455,457,0,438,455,460,447,467],
[438,474,447,458,452,0,455,464,449,446],
[441,457,445,435,435,435,0,463,431,467],
[444,445,440,427,430,426,427,0,425,436],
[441,455,448,450,443,441,459,465,0,433],
[441,458,434,436,423,444,423,454,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,455,433,438,457,450,454,437,446],
[463,0,484,446,463,424,478,496,460,468],
[435,406,0,399,431,419,401,455,440,433],
[457,444,491,0,461,464,467,486,475,471],
[452,427,459,429,0,437,463,466,468,461],
[433,466,471,426,453,0,462,481,465,431],
[440,412,489,423,427,428,0,476,452,456],
[436,394,435,404,424,409,414,0,442,435],
[453,430,450,415,422,425,438,448,0,427],
[444,422,457,419,429,459,434,455,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,437,458,457,463,466,443,445,455],
[429,0,441,446,459,443,436,446,447,454],
[453,449,0,446,451,454,431,447,442,446],
[432,444,444,0,455,448,450,440,435,442],
[433,431,439,435,0,455,437,432,439,447],
[427,447,436,442,435,0,439,444,440,461],
[424,454,459,440,453,451,0,444,455,446],
[447,444,443,450,458,446,446,0,451,461],
[445,443,448,455,451,450,435,439,0,440],
[435,436,444,448,443,429,444,429,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,432,487,476,482,468,479,444,478],
[430,0,448,477,452,466,457,474,472,480],
[458,442,0,476,483,468,468,447,493,473],
[403,413,414,0,455,444,427,431,429,446],
[414,438,407,435,0,462,434,442,444,475],
[408,424,422,446,428,0,440,441,426,448],
[422,433,422,463,456,450,0,463,469,475],
[411,416,443,459,448,449,427,0,441,463],
[446,418,397,461,446,464,421,449,0,439],
[412,410,417,444,415,442,415,427,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,446,438,435,423,435,465,421,443],
[447,0,438,443,450,463,428,447,434,450],
[444,452,0,458,450,441,415,456,431,455],
[452,447,432,0,458,459,438,466,432,448],
[455,440,440,432,0,450,432,444,435,457],
[467,427,449,431,440,0,441,459,420,442],
[455,462,475,452,458,449,0,461,433,465],
[425,443,434,424,446,431,429,0,462,460],
[469,456,459,458,455,470,457,428,0,473],
[447,440,435,442,433,448,425,430,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,499,476,496,461,420,474,462,448],
[401,0,479,474,449,448,458,454,457,446],
[391,411,0,421,417,419,417,431,419,389],
[414,416,469,0,420,445,413,443,428,434],
[394,441,473,470,0,422,419,404,444,450],
[429,442,471,445,468,0,415,412,427,431],
[470,432,473,477,471,475,0,436,461,437],
[416,436,459,447,486,478,454,0,458,466],
[428,433,471,462,446,463,429,432,0,416],
[442,444,501,456,440,459,453,424,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,442,441,427,414,450,421,424,466],
[456,0,458,461,472,451,464,447,443,463],
[448,432,0,437,419,443,438,401,427,440],
[449,429,453,0,456,441,465,447,460,454],
[463,418,471,434,0,427,421,415,445,442],
[476,439,447,449,463,0,446,427,446,457],
[440,426,452,425,469,444,0,429,445,469],
[469,443,489,443,475,463,461,0,456,496],
[466,447,463,430,445,444,445,434,0,468],
[424,427,450,436,448,433,421,394,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,481,427,436,436,450,480,477,479],
[432,0,455,405,428,428,420,418,436,430],
[409,435,0,392,440,426,397,436,423,420],
[463,485,498,0,469,477,418,472,485,470],
[454,462,450,421,0,466,407,471,459,456],
[454,462,464,413,424,0,422,459,470,434],
[440,470,493,472,483,468,0,471,473,462],
[410,472,454,418,419,431,419,0,463,456],
[413,454,467,405,431,420,417,427,0,449],
[411,460,470,420,434,456,428,434,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,428,443,422,470,457,426,439,448],
[447,0,413,450,437,446,453,454,412,460],
[462,477,0,463,450,493,438,438,445,442],
[447,440,427,0,441,473,453,446,422,455],
[468,453,440,449,0,472,473,454,448,457],
[420,444,397,417,418,0,436,429,426,429],
[433,437,452,437,417,454,0,437,423,439],
[464,436,452,444,436,461,453,0,440,456],
[451,478,445,468,442,464,467,450,0,465],
[442,430,448,435,433,461,451,434,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,418,364,416,378,367,409,411,408],
[477,0,427,431,496,441,423,413,481,466],
[472,463,0,379,446,482,459,491,420,433],
[526,459,511,0,481,399,412,439,465,438],
[474,394,444,409,0,425,364,444,414,354],
[512,449,408,491,465,0,434,451,463,434],
[523,467,431,478,526,456,0,453,457,473],
[481,477,399,451,446,439,437,0,441,413],
[479,409,470,425,476,427,433,449,0,409],
[482,424,457,452,536,456,417,477,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,607,455,441,483,471,443,476,431,503],
[283,0,311,397,412,431,353,411,385,370],
[435,579,0,485,513,427,516,520,536,513],
[449,493,405,0,476,430,415,446,433,522],
[407,478,377,414,0,429,434,491,464,419],
[419,459,463,460,461,0,418,490,476,519],
[447,537,374,475,456,472,0,486,432,490],
[414,479,370,444,399,400,404,0,403,446],
[459,505,354,457,426,414,458,487,0,549],
[387,520,377,368,471,371,400,444,341,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,444,500,455,489,462,420,459,428],
[455,0,445,444,457,451,441,466,442,417],
[446,445,0,459,480,477,444,456,445,445],
[390,446,431,0,445,434,432,455,415,426],
[435,433,410,445,0,414,421,439,440,410],
[401,439,413,456,476,0,441,434,430,416],
[428,449,446,458,469,449,0,444,455,443],
[470,424,434,435,451,456,446,0,444,413],
[431,448,445,475,450,460,435,446,0,428],
[462,473,445,464,480,474,447,477,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,372,451,441,472,407,476,422,433,420],
[518,0,460,501,507,465,432,468,491,470],
[439,430,0,452,476,418,419,377,428,400],
[449,389,438,0,441,391,453,421,454,403],
[418,383,414,449,0,408,380,406,404,386],
[483,425,472,499,482,0,442,449,454,381],
[414,458,471,437,510,448,0,456,463,404],
[468,422,513,469,484,441,434,0,478,509],
[457,399,462,436,486,436,427,412,0,397],
[470,420,490,487,504,509,486,381,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,400,443,457,448,461,434,462,471,452],
[490,0,468,444,460,460,442,439,486,451],
[447,422,0,457,432,457,465,452,465,421],
[433,446,433,0,444,430,441,435,467,448],
[442,430,458,446,0,473,434,490,469,440],
[429,430,433,460,417,0,442,448,432,431],
[456,448,425,449,456,448,0,429,462,457],
[428,451,438,455,400,442,461,0,450,438],
[419,404,425,423,421,458,428,440,0,419],
[438,439,469,442,450,459,433,452,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,430,400,434,439,471,488,415,450],
[448,0,442,453,445,456,443,485,461,442],
[460,448,0,408,453,440,464,507,435,435],
[490,437,482,0,454,486,481,494,462,443],
[456,445,437,436,0,435,466,496,429,450],
[451,434,450,404,455,0,452,500,449,447],
[419,447,426,409,424,438,0,472,411,437],
[402,405,383,396,394,390,418,0,397,405],
[475,429,455,428,461,441,479,493,0,461],
[440,448,455,447,440,443,453,485,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,450,420,428,462,433,464,471,408],
[442,0,430,440,471,423,406,463,435,418],
[440,460,0,455,446,440,444,455,506,435],
[470,450,435,0,425,467,431,471,442,457],
[462,419,444,465,0,453,409,463,430,463],
[428,467,450,423,437,0,412,467,461,419],
[457,484,446,459,481,478,0,445,485,422],
[426,427,435,419,427,423,445,0,448,395],
[419,455,384,448,460,429,405,442,0,407],
[482,472,455,433,427,471,468,495,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,448,444,487,430,471,537,388,467],
[440,0,463,499,461,456,456,464,450,445],
[442,427,0,473,473,438,441,448,407,451],
[446,391,417,0,406,370,411,490,386,429],
[403,429,417,484,0,434,408,459,405,439],
[460,434,452,520,456,0,446,516,435,470],
[419,434,449,479,482,444,0,518,401,451],
[353,426,442,400,431,374,372,0,371,387],
[502,440,483,504,485,455,489,519,0,489],
[423,445,439,461,451,420,439,503,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,453,428,477,420,390,444,469,428],
[436,0,422,470,452,447,404,490,430,451],
[437,468,0,482,504,473,429,447,447,444],
[462,420,408,0,450,462,364,426,359,435],
[413,438,386,440,0,437,349,406,371,397],
[470,443,417,428,453,0,437,423,443,406],
[500,486,461,526,541,453,0,463,442,494],
[446,400,443,464,484,467,427,0,476,483],
[421,460,443,531,519,447,448,414,0,425],
[462,439,446,455,493,484,396,407,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,447,471,463,455,440,455,473,439],
[392,0,385,479,437,468,450,426,433,451],
[443,505,0,508,411,486,507,454,419,476],
[419,411,382,0,396,418,442,412,439,416],
[427,453,479,494,0,467,467,412,440,435],
[435,422,404,472,423,0,450,437,427,457],
[450,440,383,448,423,440,0,412,432,447],
[435,464,436,478,478,453,478,0,422,443],
[417,457,471,451,450,463,458,468,0,439],
[451,439,414,474,455,433,443,447,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,445,452,425,407,416,421,447,446],
[450,0,448,429,414,425,425,438,479,432],
[445,442,0,405,429,405,441,429,458,433],
[438,461,485,0,436,458,417,436,466,467],
[465,476,461,454,0,421,454,434,486,446],
[483,465,485,432,469,0,453,458,488,462],
[474,465,449,473,436,437,0,445,484,470],
[469,452,461,454,456,432,445,0,499,451],
[443,411,432,424,404,402,406,391,0,433],
[444,458,457,423,444,428,420,439,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,366,389,445,409,406,357,368,480],
[431,0,432,447,390,446,447,408,391,487],
[524,458,0,421,444,518,444,433,465,463],
[501,443,469,0,515,553,538,392,444,519],
[445,500,446,375,0,501,316,335,332,447],
[481,444,372,337,389,0,429,429,425,410],
[484,443,446,352,574,461,0,448,424,550],
[533,482,457,498,555,461,442,0,438,480],
[522,499,425,446,558,465,466,452,0,479],
[410,403,427,371,443,480,340,410,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,406,399,415,420,440,415,437,409],
[439,0,425,414,431,433,437,431,434,436],
[484,465,0,482,482,458,478,468,465,445],
[491,476,408,0,443,455,477,452,474,424],
[475,459,408,447,0,428,491,445,448,467],
[470,457,432,435,462,0,483,450,439,443],
[450,453,412,413,399,407,0,408,414,415],
[475,459,422,438,445,440,482,0,451,448],
[453,456,425,416,442,451,476,439,0,401],
[481,454,445,466,423,447,475,442,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,459,441,428,426,446,422,410,430],
[476,0,487,464,458,491,460,456,443,464],
[431,403,0,432,425,450,427,422,408,415],
[449,426,458,0,466,465,451,449,442,441],
[462,432,465,424,0,450,434,459,427,453],
[464,399,440,425,440,0,442,432,428,428],
[444,430,463,439,456,448,0,432,420,434],
[468,434,468,441,431,458,458,0,451,443],
[480,447,482,448,463,462,470,439,0,461],
[460,426,475,449,437,462,456,447,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,465,500,393,321,501,500,319,464],
[569,0,428,498,570,425,534,535,354,462],
[425,462,0,498,535,389,568,531,357,465],
[390,392,392,0,534,426,605,497,460,462],
[497,320,355,356,0,391,497,426,210,428],
[569,465,501,464,499,0,573,431,392,501],
[389,356,322,285,393,317,0,391,212,426],
[390,355,359,393,464,459,499,0,248,462],
[571,536,533,430,680,498,678,642,0,568],
[426,428,425,428,462,389,464,428,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,434,425,433,421,403,423,423,411],
[448,0,451,439,433,459,412,445,428,422],
[456,439,0,441,445,471,455,444,445,421],
[465,451,449,0,456,484,419,438,460,453],
[457,457,445,434,0,470,431,441,467,436],
[469,431,419,406,420,0,428,444,446,395],
[487,478,435,471,459,462,0,459,456,455],
[467,445,446,452,449,446,431,0,452,436],
[467,462,445,430,423,444,434,438,0,412],
[479,468,469,437,454,495,435,454,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,433,441,447,439,406,421,414,413],
[472,0,470,449,485,444,450,436,440,445],
[457,420,0,440,468,450,410,422,423,451],
[449,441,450,0,461,437,403,460,418,449],
[443,405,422,429,0,458,399,408,448,419],
[451,446,440,453,432,0,455,449,440,441],
[484,440,480,487,491,435,0,505,460,464],
[469,454,468,430,482,441,385,0,432,439],
[476,450,467,472,442,450,430,458,0,482],
[477,445,439,441,471,449,426,451,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,447,435,440,430,435,430,431,446],
[430,0,456,427,460,439,454,429,432,450],
[443,434,0,425,443,438,445,417,433,448],
[455,463,465,0,461,447,440,457,447,449],
[450,430,447,429,0,448,449,457,426,437],
[460,451,452,443,442,0,446,443,434,462],
[455,436,445,450,441,444,0,455,450,441],
[460,461,473,433,433,447,435,0,437,457],
[459,458,457,443,464,456,440,453,0,476],
[444,440,442,441,453,428,449,433,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,375,413,404,421,402,412,426,419],
[464,0,435,430,470,458,442,417,466,442],
[515,455,0,474,451,472,480,491,482,445],
[477,460,416,0,457,470,458,472,486,465],
[486,420,439,433,0,426,461,426,439,404],
[469,432,418,420,464,0,404,431,432,443],
[488,448,410,432,429,486,0,437,446,427],
[478,473,399,418,464,459,453,0,468,422],
[464,424,408,404,451,458,444,422,0,431],
[471,448,445,425,486,447,463,468,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,429,430,440,428,424,439,444,408],
[436,0,460,416,444,428,453,444,439,412],
[461,430,0,418,459,425,447,435,461,422],
[460,474,472,0,458,447,450,423,461,444],
[450,446,431,432,0,409,430,449,440,407],
[462,462,465,443,481,0,442,449,478,459],
[466,437,443,440,460,448,0,444,477,440],
[451,446,455,467,441,441,446,0,470,429],
[446,451,429,429,450,412,413,420,0,401],
[482,478,468,446,483,431,450,461,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,466,506,403,479,467,450,448,480],
[430,0,458,508,441,459,414,433,404,438],
[424,432,0,486,407,441,416,407,407,399],
[384,382,404,0,380,423,372,442,356,361],
[487,449,483,510,0,469,464,468,438,477],
[411,431,449,467,421,0,367,433,379,376],
[423,476,474,518,426,523,0,488,430,437],
[440,457,483,448,422,457,402,0,410,421],
[442,486,483,534,452,511,460,480,0,467],
[410,452,491,529,413,514,453,469,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,426,454,469,445,404,418,458,459],
[435,0,418,431,426,434,405,421,423,429],
[464,472,0,477,502,487,441,456,468,471],
[436,459,413,0,446,431,445,462,439,447],
[421,464,388,444,0,455,447,471,463,460],
[445,456,403,459,435,0,467,451,460,495],
[486,485,449,445,443,423,0,419,452,473],
[472,469,434,428,419,439,471,0,476,463],
[432,467,422,451,427,430,438,414,0,463],
[431,461,419,443,430,395,417,427,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,431,431,421,411,420,414,424,436],
[459,0,428,420,424,430,431,437,412,419],
[459,462,0,431,432,438,424,448,446,466],
[459,470,459,0,458,442,438,471,469,464],
[469,466,458,432,0,431,434,460,450,445],
[479,460,452,448,459,0,449,442,418,468],
[470,459,466,452,456,441,0,441,448,481],
[476,453,442,419,430,448,449,0,446,462],
[466,478,444,421,440,472,442,444,0,452],
[454,471,424,426,445,422,409,428,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,449,439,444,428,476,475,423,447],
[459,0,461,466,441,446,467,518,448,426],
[441,429,0,468,447,468,462,489,410,418],
[451,424,422,0,412,411,393,451,406,397],
[446,449,443,478,0,464,434,465,471,453],
[462,444,422,479,426,0,437,469,450,398],
[414,423,428,497,456,453,0,461,414,425],
[415,372,401,439,425,421,429,0,413,393],
[467,442,480,484,419,440,476,477,0,434],
[443,464,472,493,437,492,465,497,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,494,482,506,489,441,474,453,503],
[417,0,395,390,428,412,405,456,353,427],
[396,495,0,412,496,408,451,412,440,498],
[408,500,478,0,481,469,435,458,387,490],
[384,462,394,409,0,434,382,386,446,445],
[401,478,482,421,456,0,390,398,432,450],
[449,485,439,455,508,500,0,443,435,463],
[416,434,478,432,504,492,447,0,430,468],
[437,537,450,503,444,458,455,460,0,512],
[387,463,392,400,445,440,427,422,378,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,454,470,476,442,426,436,454,413],
[447,0,443,434,446,452,423,438,404,452],
[436,447,0,451,471,456,439,451,430,439],
[420,456,439,0,440,444,438,444,439,434],
[414,444,419,450,0,452,436,440,418,429],
[448,438,434,446,438,0,432,447,429,420],
[464,467,451,452,454,458,0,440,434,444],
[454,452,439,446,450,443,450,0,415,464],
[436,486,460,451,472,461,456,475,0,459],
[477,438,451,456,461,470,446,426,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,441,460,423,432,467,438,430,433],
[462,0,481,459,425,468,444,457,440,435],
[449,409,0,465,429,459,442,425,436,425],
[430,431,425,0,416,433,443,446,407,419],
[467,465,461,474,0,487,474,464,500,445],
[458,422,431,457,403,0,457,423,450,428],
[423,446,448,447,416,433,0,442,417,430],
[452,433,465,444,426,467,448,0,419,419],
[460,450,454,483,390,440,473,471,0,434],
[457,455,465,471,445,462,460,471,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,475,466,545,455,408,503,484,511],
[460,0,546,440,564,485,402,475,500,469],
[415,344,0,371,500,300,327,320,397,371],
[424,450,519,0,536,432,451,405,434,421],
[345,326,390,354,0,369,352,418,384,355],
[435,405,590,458,521,0,385,492,460,430],
[482,488,563,439,538,505,0,478,456,474],
[387,415,570,485,472,398,412,0,485,454],
[406,390,493,456,506,430,434,405,0,422],
[379,421,519,469,535,460,416,436,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,415,463,423,434,424,427,422,444],
[475,0,465,485,437,482,440,446,452,465],
[475,425,0,468,458,438,448,469,424,461],
[427,405,422,0,411,405,447,462,432,433],
[467,453,432,479,0,430,445,453,418,464],
[456,408,452,485,460,0,437,433,444,480],
[466,450,442,443,445,453,0,436,454,442],
[463,444,421,428,437,457,454,0,408,455],
[468,438,466,458,472,446,436,482,0,467],
[446,425,429,457,426,410,448,435,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,412,455,428,421,432,418,432,431],
[444,0,428,472,457,457,466,425,446,438],
[478,462,0,475,463,463,463,443,477,456],
[435,418,415,0,431,422,421,406,428,427],
[462,433,427,459,0,435,445,419,437,449],
[469,433,427,468,455,0,440,449,440,452],
[458,424,427,469,445,450,0,436,447,426],
[472,465,447,484,471,441,454,0,449,459],
[458,444,413,462,453,450,443,441,0,460],
[459,452,434,463,441,438,464,431,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,436,470,463,451,472,453,475,468],
[418,0,433,455,450,467,444,447,431,449],
[454,457,0,440,452,445,444,460,439,448],
[420,435,450,0,439,446,435,457,434,455],
[427,440,438,451,0,440,441,454,453,445],
[439,423,445,444,450,0,445,439,428,439],
[418,446,446,455,449,445,0,464,454,447],
[437,443,430,433,436,451,426,0,413,445],
[415,459,451,456,437,462,436,477,0,454],
[422,441,442,435,445,451,443,445,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,412,502,465,503,430,500,464,413],
[430,0,375,503,426,474,431,472,457,437],
[478,515,0,514,446,476,466,492,471,423],
[388,387,376,0,343,441,396,448,409,428],
[425,464,444,547,0,557,448,523,434,387],
[387,416,414,449,333,0,414,426,413,448],
[460,459,424,494,442,476,0,485,488,460],
[390,418,398,442,367,464,405,0,369,400],
[426,433,419,481,456,477,402,521,0,427],
[477,453,467,462,503,442,430,490,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,438,460,460,431,445,452,464,428],
[440,0,434,453,421,438,442,439,435,443],
[452,456,0,447,455,425,446,451,447,430],
[430,437,443,0,460,436,440,442,431,437],
[430,469,435,430,0,433,440,439,446,450],
[459,452,465,454,457,0,451,454,447,433],
[445,448,444,450,450,439,0,450,456,439],
[438,451,439,448,451,436,440,0,449,440],
[426,455,443,459,444,443,434,441,0,450],
[462,447,460,453,440,457,451,450,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,461,444,456,454,438,433,465,455],
[442,0,453,439,430,439,448,438,455,447],
[429,437,0,427,442,448,442,428,445,444],
[446,451,463,0,436,442,465,428,442,441],
[434,460,448,454,0,455,467,452,475,456],
[436,451,442,448,435,0,445,442,447,453],
[452,442,448,425,423,445,0,436,456,437],
[457,452,462,462,438,448,454,0,461,446],
[425,435,445,448,415,443,434,429,0,407],
[435,443,446,449,434,437,453,444,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,456,441,498,480,454,468,498,473],
[413,0,495,395,409,385,462,455,446,447],
[434,395,0,471,477,443,459,510,481,469],
[449,495,419,0,451,437,476,486,479,473],
[392,481,413,439,0,413,422,459,469,460],
[410,505,447,453,477,0,448,466,469,460],
[436,428,431,414,468,442,0,443,437,455],
[422,435,380,404,431,424,447,0,447,417],
[392,444,409,411,421,421,453,443,0,437],
[417,443,421,417,430,430,435,473,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,440,459,429,444,448,448,445,417],
[454,0,457,454,445,435,475,444,454,429],
[450,433,0,448,434,437,470,435,454,445],
[431,436,442,0,406,444,449,417,449,432],
[461,445,456,484,0,444,475,422,468,433],
[446,455,453,446,446,0,461,419,450,399],
[442,415,420,441,415,429,0,406,437,401],
[442,446,455,473,468,471,484,0,448,445],
[445,436,436,441,422,440,453,442,0,420],
[473,461,445,458,457,491,489,445,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,452,468,445,455,445,435,421,451],
[444,0,468,469,448,453,441,473,425,444],
[438,422,0,446,439,437,425,426,437,454],
[422,421,444,0,454,452,442,456,447,450],
[445,442,451,436,0,445,439,456,431,439],
[435,437,453,438,445,0,424,435,423,441],
[445,449,465,448,451,466,0,453,432,458],
[455,417,464,434,434,455,437,0,421,446],
[469,465,453,443,459,467,458,469,0,459],
[439,446,436,440,451,449,432,444,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,476,463,454,442,467,491,470,449],
[444,0,471,452,462,457,471,448,453,458],
[414,419,0,416,452,441,443,418,429,436],
[427,438,474,0,454,452,465,450,468,448],
[436,428,438,436,0,455,474,445,430,463],
[448,433,449,438,435,0,447,457,458,432],
[423,419,447,425,416,443,0,427,412,395],
[399,442,472,440,445,433,463,0,467,440],
[420,437,461,422,460,432,478,423,0,443],
[441,432,454,442,427,458,495,450,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,431,409,467,462,456,435,446,468],
[448,0,427,429,457,432,402,430,457,444],
[459,463,0,419,493,455,416,442,471,486],
[481,461,471,0,515,453,429,483,483,495],
[423,433,397,375,0,382,400,406,449,433],
[428,458,435,437,508,0,396,453,453,452],
[434,488,474,461,490,494,0,432,473,478],
[455,460,448,407,484,437,458,0,494,469],
[444,433,419,407,441,437,417,396,0,415],
[422,446,404,395,457,438,412,421,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,438,436,427,448,481,450,483,477],
[455,0,425,451,442,451,434,456,420,467],
[452,465,0,476,462,445,477,469,457,488],
[454,439,414,0,444,446,464,434,442,476],
[463,448,428,446,0,446,452,456,445,514],
[442,439,445,444,444,0,472,437,440,467],
[409,456,413,426,438,418,0,406,430,460],
[440,434,421,456,434,453,484,0,441,487],
[407,470,433,448,445,450,460,449,0,486],
[413,423,402,414,376,423,430,403,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,461,445,437,491,470,411,439,442],
[423,0,454,455,417,435,435,434,410,446],
[429,436,0,413,429,457,466,443,463,427],
[445,435,477,0,431,462,444,421,460,407],
[453,473,461,459,0,462,480,463,465,423],
[399,455,433,428,428,0,445,435,441,406],
[420,455,424,446,410,445,0,423,445,416],
[479,456,447,469,427,455,467,0,439,454],
[451,480,427,430,425,449,445,451,0,437],
[448,444,463,483,467,484,474,436,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,421,440,417,431,430,409,443,434],
[465,0,465,451,462,427,457,432,438,418],
[469,425,0,478,441,446,426,446,458,440],
[450,439,412,0,444,454,439,442,432,471],
[473,428,449,446,0,455,454,455,467,441],
[459,463,444,436,435,0,435,425,447,445],
[460,433,464,451,436,455,0,412,436,429],
[481,458,444,448,435,465,478,0,461,460],
[447,452,432,458,423,443,454,429,0,442],
[456,472,450,419,449,445,461,430,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,455,433,436,487,448,461,462,487],
[415,0,335,369,409,413,376,389,434,413],
[435,555,0,420,446,455,468,427,402,485],
[457,521,470,0,439,428,411,413,389,478],
[454,481,444,451,0,419,424,431,417,444],
[403,477,435,462,471,0,436,398,389,450],
[442,514,422,479,466,454,0,442,425,409],
[429,501,463,477,459,492,448,0,415,492],
[428,456,488,501,473,501,465,475,0,480],
[403,477,405,412,446,440,481,398,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,453,480,464,428,428,456,436,438],
[429,0,460,426,447,449,441,464,437,432],
[437,430,0,404,420,395,411,428,439,434],
[410,464,486,0,473,452,449,430,451,474],
[426,443,470,417,0,406,429,467,427,465],
[462,441,495,438,484,0,482,442,491,467],
[462,449,479,441,461,408,0,465,425,456],
[434,426,462,460,423,448,425,0,445,435],
[454,453,451,439,463,399,465,445,0,453],
[452,458,456,416,425,423,434,455,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,447,429,448,462,430,449,461,428],
[471,0,440,437,444,475,440,451,447,458],
[443,450,0,448,472,464,469,433,460,437],
[461,453,442,0,459,475,459,441,474,452],
[442,446,418,431,0,474,402,481,436,438],
[428,415,426,415,416,0,401,430,427,409],
[460,450,421,431,488,489,0,482,435,430],
[441,439,457,449,409,460,408,0,442,434],
[429,443,430,416,454,463,455,448,0,424],
[462,432,453,438,452,481,460,456,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,422,428,431,424,469,441,432,440],
[447,0,433,450,462,441,468,479,444,456],
[468,457,0,449,466,448,447,467,426,462],
[462,440,441,0,478,467,459,458,475,439],
[459,428,424,412,0,434,436,445,433,440],
[466,449,442,423,456,0,446,465,446,451],
[421,422,443,431,454,444,0,458,439,455],
[449,411,423,432,445,425,432,0,432,432],
[458,446,464,415,457,444,451,458,0,438],
[450,434,428,451,450,439,435,458,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,434,458,443,454,436,457,456,469],
[433,0,440,447,429,435,469,451,448,461],
[456,450,0,427,425,432,442,462,455,455],
[432,443,463,0,421,447,430,459,439,460],
[447,461,465,469,0,455,437,458,472,458],
[436,455,458,443,435,0,443,440,457,448],
[454,421,448,460,453,447,0,453,444,451],
[433,439,428,431,432,450,437,0,434,445],
[434,442,435,451,418,433,446,456,0,437],
[421,429,435,430,432,442,439,445,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,459,446,438,443,473,461,447,457],
[430,0,437,435,425,448,468,460,444,455],
[431,453,0,446,451,460,476,453,429,437],
[444,455,444,0,438,447,480,455,464,451],
[452,465,439,452,0,477,488,465,460,447],
[447,442,430,443,413,0,468,448,448,441],
[417,422,414,410,402,422,0,428,434,420],
[429,430,437,435,425,442,462,0,441,457],
[443,446,461,426,430,442,456,449,0,448],
[433,435,453,439,443,449,470,433,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,452,443,436,460,436,448,417,452],
[443,0,436,438,457,434,457,438,439,437],
[438,454,0,434,438,464,441,446,438,435],
[447,452,456,0,440,458,445,453,429,439],
[454,433,452,450,0,475,440,467,442,439],
[430,456,426,432,415,0,441,452,446,428],
[454,433,449,445,450,449,0,461,440,454],
[442,452,444,437,423,438,429,0,435,451],
[473,451,452,461,448,444,450,455,0,436],
[438,453,455,451,451,462,436,439,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,477,499,468,444,480,435,513,452],
[437,0,458,465,452,434,464,456,467,411],
[413,432,0,440,424,461,468,457,450,437],
[391,425,450,0,419,461,438,439,489,433],
[422,438,466,471,0,449,489,484,493,439],
[446,456,429,429,441,0,455,440,466,473],
[410,426,422,452,401,435,0,425,438,408],
[455,434,433,451,406,450,465,0,444,422],
[377,423,440,401,397,424,452,446,0,417],
[438,479,453,457,451,417,482,468,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,445,476,404,421,436,396,441,410],
[501,0,441,488,477,462,461,431,445,427],
[445,449,0,495,405,444,451,446,438,460],
[414,402,395,0,425,419,428,380,421,399],
[486,413,485,465,0,439,453,430,450,472],
[469,428,446,471,451,0,420,425,452,417],
[454,429,439,462,437,470,0,415,455,425],
[494,459,444,510,460,465,475,0,479,478],
[449,445,452,469,440,438,435,411,0,446],
[480,463,430,491,418,473,465,412,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,485,491,479,436,443,445,472,446],
[409,0,452,431,450,444,413,394,440,436],
[405,438,0,454,430,407,407,421,432,430],
[399,459,436,0,423,433,410,418,436,444],
[411,440,460,467,0,404,408,419,442,399],
[454,446,483,457,486,0,465,460,444,450],
[447,477,483,480,482,425,0,427,465,472],
[445,496,469,472,471,430,463,0,482,453],
[418,450,458,454,448,446,425,408,0,423],
[444,454,460,446,491,440,418,437,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,430,431,417,446,437,437,451,398],
[452,0,471,432,445,440,458,447,465,433],
[460,419,0,443,435,452,445,429,455,390],
[459,458,447,0,445,457,483,481,462,430],
[473,445,455,445,0,428,457,460,440,459],
[444,450,438,433,462,0,450,470,444,380],
[453,432,445,407,433,440,0,433,418,402],
[453,443,461,409,430,420,457,0,409,374],
[439,425,435,428,450,446,472,481,0,432],
[492,457,500,460,431,510,488,516,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,467,454,483,450,427,465,448,461],
[412,0,445,453,434,417,428,438,427,465],
[423,445,0,438,411,425,437,423,389,403],
[436,437,452,0,440,444,456,420,433,439],
[407,456,479,450,0,405,429,436,410,426],
[440,473,465,446,485,0,483,473,445,466],
[463,462,453,434,461,407,0,448,416,418],
[425,452,467,470,454,417,442,0,417,411],
[442,463,501,457,480,445,474,473,0,451],
[429,425,487,451,464,424,472,479,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,342,308,399,399,430,432,337,398],
[485,0,337,392,455,301,426,365,362,363],
[548,553,0,431,521,456,486,487,395,393],
[582,498,459,0,556,369,367,399,399,487],
[491,435,369,334,0,369,397,429,459,364],
[491,589,434,521,521,0,461,431,397,519],
[460,464,404,523,493,429,0,429,427,551],
[458,525,403,491,461,459,461,0,460,520],
[553,528,495,491,431,493,463,430,0,460],
[492,527,497,403,526,371,339,370,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,464,462,471,430,438,461,473,462],
[430,0,480,504,487,425,470,471,461,472],
[426,410,0,437,450,425,452,456,438,445],
[428,386,453,0,436,418,463,448,430,443],
[419,403,440,454,0,425,415,424,445,421],
[460,465,465,472,465,0,463,462,442,452],
[452,420,438,427,475,427,0,479,428,440],
[429,419,434,442,466,428,411,0,427,451],
[417,429,452,460,445,448,462,463,0,474],
[428,418,445,447,469,438,450,439,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,398,464,432,454,418,437,408,438],
[471,0,413,448,460,481,474,473,446,458],
[492,477,0,468,468,463,458,455,456,433],
[426,442,422,0,435,444,400,437,429,418],
[458,430,422,455,0,472,456,451,415,414],
[436,409,427,446,418,0,433,426,422,420],
[472,416,432,490,434,457,0,453,448,437],
[453,417,435,453,439,464,437,0,430,432],
[482,444,434,461,475,468,442,460,0,443],
[452,432,457,472,476,470,453,458,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,472,454,400,370,410,410,396,481],
[424,0,385,359,374,383,364,414,376,460],
[418,505,0,393,380,391,402,407,383,415],
[436,531,497,0,459,529,465,493,467,527],
[490,516,510,431,0,527,463,458,474,421],
[520,507,499,361,363,0,418,449,391,402],
[480,526,488,425,427,472,0,477,555,468],
[480,476,483,397,432,441,413,0,366,442],
[494,514,507,423,416,499,335,524,0,501],
[409,430,475,363,469,488,422,448,389,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,416,417,419,455,409,438,416,447],
[456,0,444,418,427,446,422,461,431,446],
[474,446,0,441,467,473,451,466,469,487],
[473,472,449,0,425,461,453,455,465,472],
[471,463,423,465,0,460,484,498,482,479],
[435,444,417,429,430,0,419,446,439,458],
[481,468,439,437,406,471,0,458,454,470],
[452,429,424,435,392,444,432,0,427,442],
[474,459,421,425,408,451,436,463,0,448],
[443,444,403,418,411,432,420,448,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,433,451,429,428,448,426,437,434],
[449,0,453,443,433,395,442,426,433,435],
[457,437,0,456,468,444,464,431,478,483],
[439,447,434,0,448,449,456,435,442,434],
[461,457,422,442,0,432,434,434,445,442],
[462,495,446,441,458,0,474,435,477,473],
[442,448,426,434,456,416,0,427,463,458],
[464,464,459,455,456,455,463,0,454,445],
[453,457,412,448,445,413,427,436,0,456],
[456,455,407,456,448,417,432,445,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,442,432,461,411,449,463,429,436],
[468,0,438,395,460,412,422,486,416,444],
[448,452,0,490,470,445,434,483,443,469],
[458,495,400,0,461,432,449,509,445,454],
[429,430,420,429,0,404,441,466,391,426],
[479,478,445,458,486,0,487,483,436,486],
[441,468,456,441,449,403,0,474,434,442],
[427,404,407,381,424,407,416,0,424,418],
[461,474,447,445,499,454,456,466,0,450],
[454,446,421,436,464,404,448,472,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,448,438,436,428,423,440,420,446],
[436,0,475,432,442,445,455,459,441,472],
[442,415,0,441,445,434,447,419,418,457],
[452,458,449,0,429,460,463,461,427,459],
[454,448,445,461,0,439,437,471,463,479],
[462,445,456,430,451,0,463,438,423,457],
[467,435,443,427,453,427,0,445,409,464],
[450,431,471,429,419,452,445,0,445,486],
[470,449,472,463,427,467,481,445,0,471],
[444,418,433,431,411,433,426,404,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,431,436,429,429,435,422,430,420],
[462,0,445,439,455,450,438,433,447,447],
[459,445,0,456,452,464,458,459,454,464],
[454,451,434,0,451,456,453,452,452,433],
[461,435,438,439,0,438,447,446,462,442],
[461,440,426,434,452,0,455,428,447,431],
[455,452,432,437,443,435,0,458,432,446],
[468,457,431,438,444,462,432,0,479,450],
[460,443,436,438,428,443,458,411,0,428],
[470,443,426,457,448,459,444,440,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,441,430,416,457,432,413,434,446],
[481,0,438,450,486,469,459,447,482,487],
[449,452,0,434,503,501,466,415,454,491],
[460,440,456,0,451,462,458,435,449,457],
[474,404,387,439,0,461,457,409,439,453],
[433,421,389,428,429,0,423,391,400,432],
[458,431,424,432,433,467,0,420,434,468],
[477,443,475,455,481,499,470,0,488,486],
[456,408,436,441,451,490,456,402,0,457],
[444,403,399,433,437,458,422,404,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,459,463,447,458,451,455,445,436],
[479,0,456,464,447,441,440,494,471,425],
[431,434,0,454,423,459,458,487,459,445],
[427,426,436,0,453,453,448,465,451,444],
[443,443,467,437,0,457,467,471,484,434],
[432,449,431,437,433,0,443,468,443,417],
[439,450,432,442,423,447,0,461,448,443],
[435,396,403,425,419,422,429,0,441,419],
[445,419,431,439,406,447,442,449,0,437],
[454,465,445,446,456,473,447,471,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,454,444,446,451,476,459,461,469],
[389,0,383,410,392,402,421,411,377,420],
[436,507,0,439,416,466,443,455,452,453],
[446,480,451,0,440,475,457,506,485,482],
[444,498,474,450,0,437,449,490,452,461],
[439,488,424,415,453,0,439,444,478,459],
[414,469,447,433,441,451,0,461,469,427],
[431,479,435,384,400,446,429,0,446,441],
[429,513,438,405,438,412,421,444,0,444],
[421,470,437,408,429,431,463,449,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,525,483,390,483,481,440,403,459,595],
[365,0,463,425,423,404,406,387,330,429],
[407,427,0,428,480,419,461,405,369,555],
[500,465,462,0,517,551,443,496,350,578],
[407,467,410,373,0,519,388,445,367,467],
[409,486,471,339,371,0,469,431,406,482],
[450,484,429,447,502,421,0,502,444,480],
[487,503,485,394,445,459,388,0,409,469],
[431,560,521,540,523,484,446,481,0,575],
[295,461,335,312,423,408,410,421,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,458,427,458,433,442,442,459,419],
[435,0,421,416,425,442,444,438,434,417],
[432,469,0,415,472,446,423,406,442,424],
[463,474,475,0,478,473,443,477,494,459],
[432,465,418,412,0,415,441,435,422,424],
[457,448,444,417,475,0,453,428,468,429],
[448,446,467,447,449,437,0,430,467,418],
[448,452,484,413,455,462,460,0,464,448],
[431,456,448,396,468,422,423,426,0,412],
[471,473,466,431,466,461,472,442,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,447,461,456,422,454,393,405,436],
[461,0,472,457,447,469,422,445,440,420],
[443,418,0,446,485,422,445,418,420,442],
[429,433,444,0,449,425,454,432,439,440],
[434,443,405,441,0,413,425,413,432,435],
[468,421,468,465,477,0,455,424,425,450],
[436,468,445,436,465,435,0,427,445,439],
[497,445,472,458,477,466,463,0,447,439],
[485,450,470,451,458,465,445,443,0,474],
[454,470,448,450,455,440,451,451,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,455,445,459,442,454,433,453,430],
[413,0,438,413,370,418,407,425,418,377],
[435,452,0,410,441,426,456,446,425,411],
[445,477,480,0,438,458,466,462,447,434],
[431,520,449,452,0,462,484,450,451,462],
[448,472,464,432,428,0,445,441,453,419],
[436,483,434,424,406,445,0,433,430,407],
[457,465,444,428,440,449,457,0,447,453],
[437,472,465,443,439,437,460,443,0,427],
[460,513,479,456,428,471,483,437,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,482,394,454,439,454,464,428,433],
[444,0,478,423,468,468,513,471,411,469],
[408,412,0,418,414,427,423,465,388,437],
[496,467,472,0,454,469,509,477,442,477],
[436,422,476,436,0,457,503,504,438,401],
[451,422,463,421,433,0,484,447,413,424],
[436,377,467,381,387,406,0,433,373,421],
[426,419,425,413,386,443,457,0,387,442],
[462,479,502,448,452,477,517,503,0,443],
[457,421,453,413,489,466,469,448,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 890, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_10_890.csv", index=False, header=False)